
Door_Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000426e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001ac  00800060  0000426e  00004302  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  0080020c  0080020c  000044ae  2**0
                  ALLOC
  3 .stab         000039a8  00000000  00000000  000044b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001206  00000000  00000000  00007e58  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000905e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f5  00000000  00000000  000091fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002216  00000000  00000000  000093f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000012b8  00000000  00000000  0000b609  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001136  00000000  00000000  0000c8c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000d9f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002d2  00000000  00000000  0000dbb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000095a  00000000  00000000  0000de8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e7e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e6       	ldi	r30, 0x6E	; 110
      68:	f2 e4       	ldi	r31, 0x42	; 66
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 30       	cpi	r26, 0x0C	; 12
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ac e0       	ldi	r26, 0x0C	; 12
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 31       	cpi	r26, 0x1C	; 28
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b8 1c 	call	0x3970	; 0x3970 <main>
      8a:	0c 94 35 21 	jmp	0x426a	; 0x426a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 5d 1e 	jmp	0x3cba	; 0x3cba <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 ef       	ldi	r26, 0xF3	; 243
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 79 1e 	jmp	0x3cf2	; 0x3cf2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 69 1e 	jmp	0x3cd2	; 0x3cd2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 23 05 	call	0xa46	; 0xa46 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 85 1e 	jmp	0x3d0a	; 0x3d0a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 69 1e 	jmp	0x3cd2	; 0x3cd2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 23 05 	call	0xa46	; 0xa46 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 85 1e 	jmp	0x3d0a	; 0x3d0a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 5d 1e 	jmp	0x3cba	; 0x3cba <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 ef       	ldi	r24, 0xF3	; 243
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 23 05 	call	0xa46	; 0xa46 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 79 1e 	jmp	0x3cf2	; 0x3cf2 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 69 1e 	jmp	0x3cd2	; 0x3cd2 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 70 06 	call	0xce0	; 0xce0 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 85 1e 	jmp	0x3d0a	; 0x3d0a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 69 1e 	jmp	0x3cd2	; 0x3cd2 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 70 06 	call	0xce0	; 0xce0 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 85 1e 	jmp	0x3d0a	; 0x3d0a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 69 1e 	jmp	0x3cd2	; 0x3cd2 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 70 06 	call	0xce0	; 0xce0 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 85 1e 	jmp	0x3d0a	; 0x3d0a <__epilogue_restores__+0x18>

00000752 <__floatsisf>:
     752:	a8 e0       	ldi	r26, 0x08	; 8
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 66 1e 	jmp	0x3ccc	; 0x3ccc <__prologue_saves__+0x12>
     75e:	9b 01       	movw	r18, r22
     760:	ac 01       	movw	r20, r24
     762:	83 e0       	ldi	r24, 0x03	; 3
     764:	89 83       	std	Y+1, r24	; 0x01
     766:	da 01       	movw	r26, r20
     768:	c9 01       	movw	r24, r18
     76a:	88 27       	eor	r24, r24
     76c:	b7 fd       	sbrc	r27, 7
     76e:	83 95       	inc	r24
     770:	99 27       	eor	r25, r25
     772:	aa 27       	eor	r26, r26
     774:	bb 27       	eor	r27, r27
     776:	b8 2e       	mov	r11, r24
     778:	21 15       	cp	r18, r1
     77a:	31 05       	cpc	r19, r1
     77c:	41 05       	cpc	r20, r1
     77e:	51 05       	cpc	r21, r1
     780:	19 f4       	brne	.+6      	; 0x788 <__floatsisf+0x36>
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	89 83       	std	Y+1, r24	; 0x01
     786:	3a c0       	rjmp	.+116    	; 0x7fc <__floatsisf+0xaa>
     788:	88 23       	and	r24, r24
     78a:	a9 f0       	breq	.+42     	; 0x7b6 <__floatsisf+0x64>
     78c:	20 30       	cpi	r18, 0x00	; 0
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	38 07       	cpc	r19, r24
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	48 07       	cpc	r20, r24
     796:	80 e8       	ldi	r24, 0x80	; 128
     798:	58 07       	cpc	r21, r24
     79a:	29 f4       	brne	.+10     	; 0x7a6 <__floatsisf+0x54>
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	9f ec       	ldi	r25, 0xCF	; 207
     7a4:	30 c0       	rjmp	.+96     	; 0x806 <__floatsisf+0xb4>
     7a6:	ee 24       	eor	r14, r14
     7a8:	ff 24       	eor	r15, r15
     7aa:	87 01       	movw	r16, r14
     7ac:	e2 1a       	sub	r14, r18
     7ae:	f3 0a       	sbc	r15, r19
     7b0:	04 0b       	sbc	r16, r20
     7b2:	15 0b       	sbc	r17, r21
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <__floatsisf+0x68>
     7b6:	79 01       	movw	r14, r18
     7b8:	8a 01       	movw	r16, r20
     7ba:	8e e1       	ldi	r24, 0x1E	; 30
     7bc:	c8 2e       	mov	r12, r24
     7be:	d1 2c       	mov	r13, r1
     7c0:	dc 82       	std	Y+4, r13	; 0x04
     7c2:	cb 82       	std	Y+3, r12	; 0x03
     7c4:	ed 82       	std	Y+5, r14	; 0x05
     7c6:	fe 82       	std	Y+6, r15	; 0x06
     7c8:	0f 83       	std	Y+7, r16	; 0x07
     7ca:	18 87       	std	Y+8, r17	; 0x08
     7cc:	c8 01       	movw	r24, r16
     7ce:	b7 01       	movw	r22, r14
     7d0:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__clzsi2>
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	18 16       	cp	r1, r24
     7d8:	19 06       	cpc	r1, r25
     7da:	84 f4       	brge	.+32     	; 0x7fc <__floatsisf+0xaa>
     7dc:	08 2e       	mov	r0, r24
     7de:	04 c0       	rjmp	.+8      	; 0x7e8 <__floatsisf+0x96>
     7e0:	ee 0c       	add	r14, r14
     7e2:	ff 1c       	adc	r15, r15
     7e4:	00 1f       	adc	r16, r16
     7e6:	11 1f       	adc	r17, r17
     7e8:	0a 94       	dec	r0
     7ea:	d2 f7       	brpl	.-12     	; 0x7e0 <__floatsisf+0x8e>
     7ec:	ed 82       	std	Y+5, r14	; 0x05
     7ee:	fe 82       	std	Y+6, r15	; 0x06
     7f0:	0f 83       	std	Y+7, r16	; 0x07
     7f2:	18 87       	std	Y+8, r17	; 0x08
     7f4:	c8 1a       	sub	r12, r24
     7f6:	d9 0a       	sbc	r13, r25
     7f8:	dc 82       	std	Y+4, r13	; 0x04
     7fa:	cb 82       	std	Y+3, r12	; 0x03
     7fc:	ba 82       	std	Y+2, r11	; 0x02
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	0e 94 23 05 	call	0xa46	; 0xa46 <__pack_f>
     806:	28 96       	adiw	r28, 0x08	; 8
     808:	e9 e0       	ldi	r30, 0x09	; 9
     80a:	0c 94 82 1e 	jmp	0x3d04	; 0x3d04 <__epilogue_restores__+0x12>

0000080e <__fixsfsi>:
     80e:	ac e0       	ldi	r26, 0x0C	; 12
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	ed e0       	ldi	r30, 0x0D	; 13
     814:	f4 e0       	ldi	r31, 0x04	; 4
     816:	0c 94 6d 1e 	jmp	0x3cda	; 0x3cda <__prologue_saves__+0x20>
     81a:	69 83       	std	Y+1, r22	; 0x01
     81c:	7a 83       	std	Y+2, r23	; 0x02
     81e:	8b 83       	std	Y+3, r24	; 0x03
     820:	9c 83       	std	Y+4, r25	; 0x04
     822:	ce 01       	movw	r24, r28
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	be 01       	movw	r22, r28
     828:	6b 5f       	subi	r22, 0xFB	; 251
     82a:	7f 4f       	sbci	r23, 0xFF	; 255
     82c:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     830:	8d 81       	ldd	r24, Y+5	; 0x05
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	61 f1       	breq	.+88     	; 0x88e <__stack+0x2f>
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	50 f1       	brcs	.+84     	; 0x88e <__stack+0x2f>
     83a:	84 30       	cpi	r24, 0x04	; 4
     83c:	21 f4       	brne	.+8      	; 0x846 <__fixsfsi+0x38>
     83e:	8e 81       	ldd	r24, Y+6	; 0x06
     840:	88 23       	and	r24, r24
     842:	51 f1       	breq	.+84     	; 0x898 <__stack+0x39>
     844:	2e c0       	rjmp	.+92     	; 0x8a2 <__stack+0x43>
     846:	2f 81       	ldd	r18, Y+7	; 0x07
     848:	38 85       	ldd	r19, Y+8	; 0x08
     84a:	37 fd       	sbrc	r19, 7
     84c:	20 c0       	rjmp	.+64     	; 0x88e <__stack+0x2f>
     84e:	6e 81       	ldd	r22, Y+6	; 0x06
     850:	2f 31       	cpi	r18, 0x1F	; 31
     852:	31 05       	cpc	r19, r1
     854:	1c f0       	brlt	.+6      	; 0x85c <__fixsfsi+0x4e>
     856:	66 23       	and	r22, r22
     858:	f9 f0       	breq	.+62     	; 0x898 <__stack+0x39>
     85a:	23 c0       	rjmp	.+70     	; 0x8a2 <__stack+0x43>
     85c:	8e e1       	ldi	r24, 0x1E	; 30
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	82 1b       	sub	r24, r18
     862:	93 0b       	sbc	r25, r19
     864:	29 85       	ldd	r18, Y+9	; 0x09
     866:	3a 85       	ldd	r19, Y+10	; 0x0a
     868:	4b 85       	ldd	r20, Y+11	; 0x0b
     86a:	5c 85       	ldd	r21, Y+12	; 0x0c
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	56 95       	lsr	r21
     870:	47 95       	ror	r20
     872:	37 95       	ror	r19
     874:	27 95       	ror	r18
     876:	8a 95       	dec	r24
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	66 23       	and	r22, r22
     87c:	b1 f0       	breq	.+44     	; 0x8aa <__stack+0x4b>
     87e:	50 95       	com	r21
     880:	40 95       	com	r20
     882:	30 95       	com	r19
     884:	21 95       	neg	r18
     886:	3f 4f       	sbci	r19, 0xFF	; 255
     888:	4f 4f       	sbci	r20, 0xFF	; 255
     88a:	5f 4f       	sbci	r21, 0xFF	; 255
     88c:	0e c0       	rjmp	.+28     	; 0x8aa <__stack+0x4b>
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	09 c0       	rjmp	.+18     	; 0x8aa <__stack+0x4b>
     898:	2f ef       	ldi	r18, 0xFF	; 255
     89a:	3f ef       	ldi	r19, 0xFF	; 255
     89c:	4f ef       	ldi	r20, 0xFF	; 255
     89e:	5f e7       	ldi	r21, 0x7F	; 127
     8a0:	04 c0       	rjmp	.+8      	; 0x8aa <__stack+0x4b>
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	50 e8       	ldi	r21, 0x80	; 128
     8aa:	b9 01       	movw	r22, r18
     8ac:	ca 01       	movw	r24, r20
     8ae:	2c 96       	adiw	r28, 0x0c	; 12
     8b0:	e2 e0       	ldi	r30, 0x02	; 2
     8b2:	0c 94 89 1e 	jmp	0x3d12	; 0x3d12 <__epilogue_restores__+0x20>

000008b6 <__floatunsisf>:
     8b6:	a8 e0       	ldi	r26, 0x08	; 8
     8b8:	b0 e0       	ldi	r27, 0x00	; 0
     8ba:	e1 e6       	ldi	r30, 0x61	; 97
     8bc:	f4 e0       	ldi	r31, 0x04	; 4
     8be:	0c 94 65 1e 	jmp	0x3cca	; 0x3cca <__prologue_saves__+0x10>
     8c2:	7b 01       	movw	r14, r22
     8c4:	8c 01       	movw	r16, r24
     8c6:	61 15       	cp	r22, r1
     8c8:	71 05       	cpc	r23, r1
     8ca:	81 05       	cpc	r24, r1
     8cc:	91 05       	cpc	r25, r1
     8ce:	19 f4       	brne	.+6      	; 0x8d6 <__floatunsisf+0x20>
     8d0:	82 e0       	ldi	r24, 0x02	; 2
     8d2:	89 83       	std	Y+1, r24	; 0x01
     8d4:	60 c0       	rjmp	.+192    	; 0x996 <__floatunsisf+0xe0>
     8d6:	83 e0       	ldi	r24, 0x03	; 3
     8d8:	89 83       	std	Y+1, r24	; 0x01
     8da:	8e e1       	ldi	r24, 0x1E	; 30
     8dc:	c8 2e       	mov	r12, r24
     8de:	d1 2c       	mov	r13, r1
     8e0:	dc 82       	std	Y+4, r13	; 0x04
     8e2:	cb 82       	std	Y+3, r12	; 0x03
     8e4:	ed 82       	std	Y+5, r14	; 0x05
     8e6:	fe 82       	std	Y+6, r15	; 0x06
     8e8:	0f 83       	std	Y+7, r16	; 0x07
     8ea:	18 87       	std	Y+8, r17	; 0x08
     8ec:	c8 01       	movw	r24, r16
     8ee:	b7 01       	movw	r22, r14
     8f0:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__clzsi2>
     8f4:	fc 01       	movw	r30, r24
     8f6:	31 97       	sbiw	r30, 0x01	; 1
     8f8:	f7 ff       	sbrs	r31, 7
     8fa:	3b c0       	rjmp	.+118    	; 0x972 <__floatunsisf+0xbc>
     8fc:	22 27       	eor	r18, r18
     8fe:	33 27       	eor	r19, r19
     900:	2e 1b       	sub	r18, r30
     902:	3f 0b       	sbc	r19, r31
     904:	57 01       	movw	r10, r14
     906:	68 01       	movw	r12, r16
     908:	02 2e       	mov	r0, r18
     90a:	04 c0       	rjmp	.+8      	; 0x914 <__floatunsisf+0x5e>
     90c:	d6 94       	lsr	r13
     90e:	c7 94       	ror	r12
     910:	b7 94       	ror	r11
     912:	a7 94       	ror	r10
     914:	0a 94       	dec	r0
     916:	d2 f7       	brpl	.-12     	; 0x90c <__floatunsisf+0x56>
     918:	40 e0       	ldi	r20, 0x00	; 0
     91a:	50 e0       	ldi	r21, 0x00	; 0
     91c:	60 e0       	ldi	r22, 0x00	; 0
     91e:	70 e0       	ldi	r23, 0x00	; 0
     920:	81 e0       	ldi	r24, 0x01	; 1
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	a0 e0       	ldi	r26, 0x00	; 0
     926:	b0 e0       	ldi	r27, 0x00	; 0
     928:	04 c0       	rjmp	.+8      	; 0x932 <__floatunsisf+0x7c>
     92a:	88 0f       	add	r24, r24
     92c:	99 1f       	adc	r25, r25
     92e:	aa 1f       	adc	r26, r26
     930:	bb 1f       	adc	r27, r27
     932:	2a 95       	dec	r18
     934:	d2 f7       	brpl	.-12     	; 0x92a <__floatunsisf+0x74>
     936:	01 97       	sbiw	r24, 0x01	; 1
     938:	a1 09       	sbc	r26, r1
     93a:	b1 09       	sbc	r27, r1
     93c:	8e 21       	and	r24, r14
     93e:	9f 21       	and	r25, r15
     940:	a0 23       	and	r26, r16
     942:	b1 23       	and	r27, r17
     944:	00 97       	sbiw	r24, 0x00	; 0
     946:	a1 05       	cpc	r26, r1
     948:	b1 05       	cpc	r27, r1
     94a:	21 f0       	breq	.+8      	; 0x954 <__floatunsisf+0x9e>
     94c:	41 e0       	ldi	r20, 0x01	; 1
     94e:	50 e0       	ldi	r21, 0x00	; 0
     950:	60 e0       	ldi	r22, 0x00	; 0
     952:	70 e0       	ldi	r23, 0x00	; 0
     954:	4a 29       	or	r20, r10
     956:	5b 29       	or	r21, r11
     958:	6c 29       	or	r22, r12
     95a:	7d 29       	or	r23, r13
     95c:	4d 83       	std	Y+5, r20	; 0x05
     95e:	5e 83       	std	Y+6, r21	; 0x06
     960:	6f 83       	std	Y+7, r22	; 0x07
     962:	78 87       	std	Y+8, r23	; 0x08
     964:	8e e1       	ldi	r24, 0x1E	; 30
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	8e 1b       	sub	r24, r30
     96a:	9f 0b       	sbc	r25, r31
     96c:	9c 83       	std	Y+4, r25	; 0x04
     96e:	8b 83       	std	Y+3, r24	; 0x03
     970:	12 c0       	rjmp	.+36     	; 0x996 <__floatunsisf+0xe0>
     972:	30 97       	sbiw	r30, 0x00	; 0
     974:	81 f0       	breq	.+32     	; 0x996 <__floatunsisf+0xe0>
     976:	0e 2e       	mov	r0, r30
     978:	04 c0       	rjmp	.+8      	; 0x982 <__floatunsisf+0xcc>
     97a:	ee 0c       	add	r14, r14
     97c:	ff 1c       	adc	r15, r15
     97e:	00 1f       	adc	r16, r16
     980:	11 1f       	adc	r17, r17
     982:	0a 94       	dec	r0
     984:	d2 f7       	brpl	.-12     	; 0x97a <__floatunsisf+0xc4>
     986:	ed 82       	std	Y+5, r14	; 0x05
     988:	fe 82       	std	Y+6, r15	; 0x06
     98a:	0f 83       	std	Y+7, r16	; 0x07
     98c:	18 87       	std	Y+8, r17	; 0x08
     98e:	ce 1a       	sub	r12, r30
     990:	df 0a       	sbc	r13, r31
     992:	dc 82       	std	Y+4, r13	; 0x04
     994:	cb 82       	std	Y+3, r12	; 0x03
     996:	1a 82       	std	Y+2, r1	; 0x02
     998:	ce 01       	movw	r24, r28
     99a:	01 96       	adiw	r24, 0x01	; 1
     99c:	0e 94 23 05 	call	0xa46	; 0xa46 <__pack_f>
     9a0:	28 96       	adiw	r28, 0x08	; 8
     9a2:	ea e0       	ldi	r30, 0x0A	; 10
     9a4:	0c 94 81 1e 	jmp	0x3d02	; 0x3d02 <__epilogue_restores__+0x10>

000009a8 <__clzsi2>:
     9a8:	ef 92       	push	r14
     9aa:	ff 92       	push	r15
     9ac:	0f 93       	push	r16
     9ae:	1f 93       	push	r17
     9b0:	7b 01       	movw	r14, r22
     9b2:	8c 01       	movw	r16, r24
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	e8 16       	cp	r14, r24
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	f8 06       	cpc	r15, r24
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	08 07       	cpc	r16, r24
     9c0:	80 e0       	ldi	r24, 0x00	; 0
     9c2:	18 07       	cpc	r17, r24
     9c4:	88 f4       	brcc	.+34     	; 0x9e8 <__clzsi2+0x40>
     9c6:	8f ef       	ldi	r24, 0xFF	; 255
     9c8:	e8 16       	cp	r14, r24
     9ca:	f1 04       	cpc	r15, r1
     9cc:	01 05       	cpc	r16, r1
     9ce:	11 05       	cpc	r17, r1
     9d0:	31 f0       	breq	.+12     	; 0x9de <__clzsi2+0x36>
     9d2:	28 f0       	brcs	.+10     	; 0x9de <__clzsi2+0x36>
     9d4:	88 e0       	ldi	r24, 0x08	; 8
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	a0 e0       	ldi	r26, 0x00	; 0
     9da:	b0 e0       	ldi	r27, 0x00	; 0
     9dc:	17 c0       	rjmp	.+46     	; 0xa0c <__clzsi2+0x64>
     9de:	80 e0       	ldi	r24, 0x00	; 0
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	a0 e0       	ldi	r26, 0x00	; 0
     9e4:	b0 e0       	ldi	r27, 0x00	; 0
     9e6:	12 c0       	rjmp	.+36     	; 0xa0c <__clzsi2+0x64>
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	e8 16       	cp	r14, r24
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	f8 06       	cpc	r15, r24
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	08 07       	cpc	r16, r24
     9f4:	81 e0       	ldi	r24, 0x01	; 1
     9f6:	18 07       	cpc	r17, r24
     9f8:	28 f0       	brcs	.+10     	; 0xa04 <__clzsi2+0x5c>
     9fa:	88 e1       	ldi	r24, 0x18	; 24
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	a0 e0       	ldi	r26, 0x00	; 0
     a00:	b0 e0       	ldi	r27, 0x00	; 0
     a02:	04 c0       	rjmp	.+8      	; 0xa0c <__clzsi2+0x64>
     a04:	80 e1       	ldi	r24, 0x10	; 16
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	a0 e0       	ldi	r26, 0x00	; 0
     a0a:	b0 e0       	ldi	r27, 0x00	; 0
     a0c:	20 e2       	ldi	r18, 0x20	; 32
     a0e:	30 e0       	ldi	r19, 0x00	; 0
     a10:	40 e0       	ldi	r20, 0x00	; 0
     a12:	50 e0       	ldi	r21, 0x00	; 0
     a14:	28 1b       	sub	r18, r24
     a16:	39 0b       	sbc	r19, r25
     a18:	4a 0b       	sbc	r20, r26
     a1a:	5b 0b       	sbc	r21, r27
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__clzsi2+0x7e>
     a1e:	16 95       	lsr	r17
     a20:	07 95       	ror	r16
     a22:	f7 94       	ror	r15
     a24:	e7 94       	ror	r14
     a26:	8a 95       	dec	r24
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__clzsi2+0x76>
     a2a:	f7 01       	movw	r30, r14
     a2c:	e5 50       	subi	r30, 0x05	; 5
     a2e:	ff 4f       	sbci	r31, 0xFF	; 255
     a30:	80 81       	ld	r24, Z
     a32:	28 1b       	sub	r18, r24
     a34:	31 09       	sbc	r19, r1
     a36:	41 09       	sbc	r20, r1
     a38:	51 09       	sbc	r21, r1
     a3a:	c9 01       	movw	r24, r18
     a3c:	1f 91       	pop	r17
     a3e:	0f 91       	pop	r16
     a40:	ff 90       	pop	r15
     a42:	ef 90       	pop	r14
     a44:	08 95       	ret

00000a46 <__pack_f>:
     a46:	df 92       	push	r13
     a48:	ef 92       	push	r14
     a4a:	ff 92       	push	r15
     a4c:	0f 93       	push	r16
     a4e:	1f 93       	push	r17
     a50:	fc 01       	movw	r30, r24
     a52:	e4 80       	ldd	r14, Z+4	; 0x04
     a54:	f5 80       	ldd	r15, Z+5	; 0x05
     a56:	06 81       	ldd	r16, Z+6	; 0x06
     a58:	17 81       	ldd	r17, Z+7	; 0x07
     a5a:	d1 80       	ldd	r13, Z+1	; 0x01
     a5c:	80 81       	ld	r24, Z
     a5e:	82 30       	cpi	r24, 0x02	; 2
     a60:	48 f4       	brcc	.+18     	; 0xa74 <__pack_f+0x2e>
     a62:	80 e0       	ldi	r24, 0x00	; 0
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	a0 e1       	ldi	r26, 0x10	; 16
     a68:	b0 e0       	ldi	r27, 0x00	; 0
     a6a:	e8 2a       	or	r14, r24
     a6c:	f9 2a       	or	r15, r25
     a6e:	0a 2b       	or	r16, r26
     a70:	1b 2b       	or	r17, r27
     a72:	a5 c0       	rjmp	.+330    	; 0xbbe <__pack_f+0x178>
     a74:	84 30       	cpi	r24, 0x04	; 4
     a76:	09 f4       	brne	.+2      	; 0xa7a <__pack_f+0x34>
     a78:	9f c0       	rjmp	.+318    	; 0xbb8 <__pack_f+0x172>
     a7a:	82 30       	cpi	r24, 0x02	; 2
     a7c:	21 f4       	brne	.+8      	; 0xa86 <__pack_f+0x40>
     a7e:	ee 24       	eor	r14, r14
     a80:	ff 24       	eor	r15, r15
     a82:	87 01       	movw	r16, r14
     a84:	05 c0       	rjmp	.+10     	; 0xa90 <__pack_f+0x4a>
     a86:	e1 14       	cp	r14, r1
     a88:	f1 04       	cpc	r15, r1
     a8a:	01 05       	cpc	r16, r1
     a8c:	11 05       	cpc	r17, r1
     a8e:	19 f4       	brne	.+6      	; 0xa96 <__pack_f+0x50>
     a90:	e0 e0       	ldi	r30, 0x00	; 0
     a92:	f0 e0       	ldi	r31, 0x00	; 0
     a94:	96 c0       	rjmp	.+300    	; 0xbc2 <__pack_f+0x17c>
     a96:	62 81       	ldd	r22, Z+2	; 0x02
     a98:	73 81       	ldd	r23, Z+3	; 0x03
     a9a:	9f ef       	ldi	r25, 0xFF	; 255
     a9c:	62 38       	cpi	r22, 0x82	; 130
     a9e:	79 07       	cpc	r23, r25
     aa0:	0c f0       	brlt	.+2      	; 0xaa4 <__pack_f+0x5e>
     aa2:	5b c0       	rjmp	.+182    	; 0xb5a <__pack_f+0x114>
     aa4:	22 e8       	ldi	r18, 0x82	; 130
     aa6:	3f ef       	ldi	r19, 0xFF	; 255
     aa8:	26 1b       	sub	r18, r22
     aaa:	37 0b       	sbc	r19, r23
     aac:	2a 31       	cpi	r18, 0x1A	; 26
     aae:	31 05       	cpc	r19, r1
     ab0:	2c f0       	brlt	.+10     	; 0xabc <__pack_f+0x76>
     ab2:	20 e0       	ldi	r18, 0x00	; 0
     ab4:	30 e0       	ldi	r19, 0x00	; 0
     ab6:	40 e0       	ldi	r20, 0x00	; 0
     ab8:	50 e0       	ldi	r21, 0x00	; 0
     aba:	2a c0       	rjmp	.+84     	; 0xb10 <__pack_f+0xca>
     abc:	b8 01       	movw	r22, r16
     abe:	a7 01       	movw	r20, r14
     ac0:	02 2e       	mov	r0, r18
     ac2:	04 c0       	rjmp	.+8      	; 0xacc <__pack_f+0x86>
     ac4:	76 95       	lsr	r23
     ac6:	67 95       	ror	r22
     ac8:	57 95       	ror	r21
     aca:	47 95       	ror	r20
     acc:	0a 94       	dec	r0
     ace:	d2 f7       	brpl	.-12     	; 0xac4 <__pack_f+0x7e>
     ad0:	81 e0       	ldi	r24, 0x01	; 1
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	a0 e0       	ldi	r26, 0x00	; 0
     ad6:	b0 e0       	ldi	r27, 0x00	; 0
     ad8:	04 c0       	rjmp	.+8      	; 0xae2 <__pack_f+0x9c>
     ada:	88 0f       	add	r24, r24
     adc:	99 1f       	adc	r25, r25
     ade:	aa 1f       	adc	r26, r26
     ae0:	bb 1f       	adc	r27, r27
     ae2:	2a 95       	dec	r18
     ae4:	d2 f7       	brpl	.-12     	; 0xada <__pack_f+0x94>
     ae6:	01 97       	sbiw	r24, 0x01	; 1
     ae8:	a1 09       	sbc	r26, r1
     aea:	b1 09       	sbc	r27, r1
     aec:	8e 21       	and	r24, r14
     aee:	9f 21       	and	r25, r15
     af0:	a0 23       	and	r26, r16
     af2:	b1 23       	and	r27, r17
     af4:	00 97       	sbiw	r24, 0x00	; 0
     af6:	a1 05       	cpc	r26, r1
     af8:	b1 05       	cpc	r27, r1
     afa:	21 f0       	breq	.+8      	; 0xb04 <__pack_f+0xbe>
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	a0 e0       	ldi	r26, 0x00	; 0
     b02:	b0 e0       	ldi	r27, 0x00	; 0
     b04:	9a 01       	movw	r18, r20
     b06:	ab 01       	movw	r20, r22
     b08:	28 2b       	or	r18, r24
     b0a:	39 2b       	or	r19, r25
     b0c:	4a 2b       	or	r20, r26
     b0e:	5b 2b       	or	r21, r27
     b10:	da 01       	movw	r26, r20
     b12:	c9 01       	movw	r24, r18
     b14:	8f 77       	andi	r24, 0x7F	; 127
     b16:	90 70       	andi	r25, 0x00	; 0
     b18:	a0 70       	andi	r26, 0x00	; 0
     b1a:	b0 70       	andi	r27, 0x00	; 0
     b1c:	80 34       	cpi	r24, 0x40	; 64
     b1e:	91 05       	cpc	r25, r1
     b20:	a1 05       	cpc	r26, r1
     b22:	b1 05       	cpc	r27, r1
     b24:	39 f4       	brne	.+14     	; 0xb34 <__pack_f+0xee>
     b26:	27 ff       	sbrs	r18, 7
     b28:	09 c0       	rjmp	.+18     	; 0xb3c <__pack_f+0xf6>
     b2a:	20 5c       	subi	r18, 0xC0	; 192
     b2c:	3f 4f       	sbci	r19, 0xFF	; 255
     b2e:	4f 4f       	sbci	r20, 0xFF	; 255
     b30:	5f 4f       	sbci	r21, 0xFF	; 255
     b32:	04 c0       	rjmp	.+8      	; 0xb3c <__pack_f+0xf6>
     b34:	21 5c       	subi	r18, 0xC1	; 193
     b36:	3f 4f       	sbci	r19, 0xFF	; 255
     b38:	4f 4f       	sbci	r20, 0xFF	; 255
     b3a:	5f 4f       	sbci	r21, 0xFF	; 255
     b3c:	e0 e0       	ldi	r30, 0x00	; 0
     b3e:	f0 e0       	ldi	r31, 0x00	; 0
     b40:	20 30       	cpi	r18, 0x00	; 0
     b42:	a0 e0       	ldi	r26, 0x00	; 0
     b44:	3a 07       	cpc	r19, r26
     b46:	a0 e0       	ldi	r26, 0x00	; 0
     b48:	4a 07       	cpc	r20, r26
     b4a:	a0 e4       	ldi	r26, 0x40	; 64
     b4c:	5a 07       	cpc	r21, r26
     b4e:	10 f0       	brcs	.+4      	; 0xb54 <__pack_f+0x10e>
     b50:	e1 e0       	ldi	r30, 0x01	; 1
     b52:	f0 e0       	ldi	r31, 0x00	; 0
     b54:	79 01       	movw	r14, r18
     b56:	8a 01       	movw	r16, r20
     b58:	27 c0       	rjmp	.+78     	; 0xba8 <__pack_f+0x162>
     b5a:	60 38       	cpi	r22, 0x80	; 128
     b5c:	71 05       	cpc	r23, r1
     b5e:	64 f5       	brge	.+88     	; 0xbb8 <__pack_f+0x172>
     b60:	fb 01       	movw	r30, r22
     b62:	e1 58       	subi	r30, 0x81	; 129
     b64:	ff 4f       	sbci	r31, 0xFF	; 255
     b66:	d8 01       	movw	r26, r16
     b68:	c7 01       	movw	r24, r14
     b6a:	8f 77       	andi	r24, 0x7F	; 127
     b6c:	90 70       	andi	r25, 0x00	; 0
     b6e:	a0 70       	andi	r26, 0x00	; 0
     b70:	b0 70       	andi	r27, 0x00	; 0
     b72:	80 34       	cpi	r24, 0x40	; 64
     b74:	91 05       	cpc	r25, r1
     b76:	a1 05       	cpc	r26, r1
     b78:	b1 05       	cpc	r27, r1
     b7a:	39 f4       	brne	.+14     	; 0xb8a <__pack_f+0x144>
     b7c:	e7 fe       	sbrs	r14, 7
     b7e:	0d c0       	rjmp	.+26     	; 0xb9a <__pack_f+0x154>
     b80:	80 e4       	ldi	r24, 0x40	; 64
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	a0 e0       	ldi	r26, 0x00	; 0
     b86:	b0 e0       	ldi	r27, 0x00	; 0
     b88:	04 c0       	rjmp	.+8      	; 0xb92 <__pack_f+0x14c>
     b8a:	8f e3       	ldi	r24, 0x3F	; 63
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	a0 e0       	ldi	r26, 0x00	; 0
     b90:	b0 e0       	ldi	r27, 0x00	; 0
     b92:	e8 0e       	add	r14, r24
     b94:	f9 1e       	adc	r15, r25
     b96:	0a 1f       	adc	r16, r26
     b98:	1b 1f       	adc	r17, r27
     b9a:	17 ff       	sbrs	r17, 7
     b9c:	05 c0       	rjmp	.+10     	; 0xba8 <__pack_f+0x162>
     b9e:	16 95       	lsr	r17
     ba0:	07 95       	ror	r16
     ba2:	f7 94       	ror	r15
     ba4:	e7 94       	ror	r14
     ba6:	31 96       	adiw	r30, 0x01	; 1
     ba8:	87 e0       	ldi	r24, 0x07	; 7
     baa:	16 95       	lsr	r17
     bac:	07 95       	ror	r16
     bae:	f7 94       	ror	r15
     bb0:	e7 94       	ror	r14
     bb2:	8a 95       	dec	r24
     bb4:	d1 f7       	brne	.-12     	; 0xbaa <__pack_f+0x164>
     bb6:	05 c0       	rjmp	.+10     	; 0xbc2 <__pack_f+0x17c>
     bb8:	ee 24       	eor	r14, r14
     bba:	ff 24       	eor	r15, r15
     bbc:	87 01       	movw	r16, r14
     bbe:	ef ef       	ldi	r30, 0xFF	; 255
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	6e 2f       	mov	r22, r30
     bc4:	67 95       	ror	r22
     bc6:	66 27       	eor	r22, r22
     bc8:	67 95       	ror	r22
     bca:	90 2f       	mov	r25, r16
     bcc:	9f 77       	andi	r25, 0x7F	; 127
     bce:	d7 94       	ror	r13
     bd0:	dd 24       	eor	r13, r13
     bd2:	d7 94       	ror	r13
     bd4:	8e 2f       	mov	r24, r30
     bd6:	86 95       	lsr	r24
     bd8:	49 2f       	mov	r20, r25
     bda:	46 2b       	or	r20, r22
     bdc:	58 2f       	mov	r21, r24
     bde:	5d 29       	or	r21, r13
     be0:	b7 01       	movw	r22, r14
     be2:	ca 01       	movw	r24, r20
     be4:	1f 91       	pop	r17
     be6:	0f 91       	pop	r16
     be8:	ff 90       	pop	r15
     bea:	ef 90       	pop	r14
     bec:	df 90       	pop	r13
     bee:	08 95       	ret

00000bf0 <__unpack_f>:
     bf0:	fc 01       	movw	r30, r24
     bf2:	db 01       	movw	r26, r22
     bf4:	40 81       	ld	r20, Z
     bf6:	51 81       	ldd	r21, Z+1	; 0x01
     bf8:	22 81       	ldd	r18, Z+2	; 0x02
     bfa:	62 2f       	mov	r22, r18
     bfc:	6f 77       	andi	r22, 0x7F	; 127
     bfe:	70 e0       	ldi	r23, 0x00	; 0
     c00:	22 1f       	adc	r18, r18
     c02:	22 27       	eor	r18, r18
     c04:	22 1f       	adc	r18, r18
     c06:	93 81       	ldd	r25, Z+3	; 0x03
     c08:	89 2f       	mov	r24, r25
     c0a:	88 0f       	add	r24, r24
     c0c:	82 2b       	or	r24, r18
     c0e:	28 2f       	mov	r18, r24
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	99 1f       	adc	r25, r25
     c14:	99 27       	eor	r25, r25
     c16:	99 1f       	adc	r25, r25
     c18:	11 96       	adiw	r26, 0x01	; 1
     c1a:	9c 93       	st	X, r25
     c1c:	11 97       	sbiw	r26, 0x01	; 1
     c1e:	21 15       	cp	r18, r1
     c20:	31 05       	cpc	r19, r1
     c22:	a9 f5       	brne	.+106    	; 0xc8e <__unpack_f+0x9e>
     c24:	41 15       	cp	r20, r1
     c26:	51 05       	cpc	r21, r1
     c28:	61 05       	cpc	r22, r1
     c2a:	71 05       	cpc	r23, r1
     c2c:	11 f4       	brne	.+4      	; 0xc32 <__unpack_f+0x42>
     c2e:	82 e0       	ldi	r24, 0x02	; 2
     c30:	37 c0       	rjmp	.+110    	; 0xca0 <__unpack_f+0xb0>
     c32:	82 e8       	ldi	r24, 0x82	; 130
     c34:	9f ef       	ldi	r25, 0xFF	; 255
     c36:	13 96       	adiw	r26, 0x03	; 3
     c38:	9c 93       	st	X, r25
     c3a:	8e 93       	st	-X, r24
     c3c:	12 97       	sbiw	r26, 0x02	; 2
     c3e:	9a 01       	movw	r18, r20
     c40:	ab 01       	movw	r20, r22
     c42:	67 e0       	ldi	r22, 0x07	; 7
     c44:	22 0f       	add	r18, r18
     c46:	33 1f       	adc	r19, r19
     c48:	44 1f       	adc	r20, r20
     c4a:	55 1f       	adc	r21, r21
     c4c:	6a 95       	dec	r22
     c4e:	d1 f7       	brne	.-12     	; 0xc44 <__unpack_f+0x54>
     c50:	83 e0       	ldi	r24, 0x03	; 3
     c52:	8c 93       	st	X, r24
     c54:	0d c0       	rjmp	.+26     	; 0xc70 <__unpack_f+0x80>
     c56:	22 0f       	add	r18, r18
     c58:	33 1f       	adc	r19, r19
     c5a:	44 1f       	adc	r20, r20
     c5c:	55 1f       	adc	r21, r21
     c5e:	12 96       	adiw	r26, 0x02	; 2
     c60:	8d 91       	ld	r24, X+
     c62:	9c 91       	ld	r25, X
     c64:	13 97       	sbiw	r26, 0x03	; 3
     c66:	01 97       	sbiw	r24, 0x01	; 1
     c68:	13 96       	adiw	r26, 0x03	; 3
     c6a:	9c 93       	st	X, r25
     c6c:	8e 93       	st	-X, r24
     c6e:	12 97       	sbiw	r26, 0x02	; 2
     c70:	20 30       	cpi	r18, 0x00	; 0
     c72:	80 e0       	ldi	r24, 0x00	; 0
     c74:	38 07       	cpc	r19, r24
     c76:	80 e0       	ldi	r24, 0x00	; 0
     c78:	48 07       	cpc	r20, r24
     c7a:	80 e4       	ldi	r24, 0x40	; 64
     c7c:	58 07       	cpc	r21, r24
     c7e:	58 f3       	brcs	.-42     	; 0xc56 <__unpack_f+0x66>
     c80:	14 96       	adiw	r26, 0x04	; 4
     c82:	2d 93       	st	X+, r18
     c84:	3d 93       	st	X+, r19
     c86:	4d 93       	st	X+, r20
     c88:	5c 93       	st	X, r21
     c8a:	17 97       	sbiw	r26, 0x07	; 7
     c8c:	08 95       	ret
     c8e:	2f 3f       	cpi	r18, 0xFF	; 255
     c90:	31 05       	cpc	r19, r1
     c92:	79 f4       	brne	.+30     	; 0xcb2 <__unpack_f+0xc2>
     c94:	41 15       	cp	r20, r1
     c96:	51 05       	cpc	r21, r1
     c98:	61 05       	cpc	r22, r1
     c9a:	71 05       	cpc	r23, r1
     c9c:	19 f4       	brne	.+6      	; 0xca4 <__unpack_f+0xb4>
     c9e:	84 e0       	ldi	r24, 0x04	; 4
     ca0:	8c 93       	st	X, r24
     ca2:	08 95       	ret
     ca4:	64 ff       	sbrs	r22, 4
     ca6:	03 c0       	rjmp	.+6      	; 0xcae <__unpack_f+0xbe>
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	8c 93       	st	X, r24
     cac:	12 c0       	rjmp	.+36     	; 0xcd2 <__unpack_f+0xe2>
     cae:	1c 92       	st	X, r1
     cb0:	10 c0       	rjmp	.+32     	; 0xcd2 <__unpack_f+0xe2>
     cb2:	2f 57       	subi	r18, 0x7F	; 127
     cb4:	30 40       	sbci	r19, 0x00	; 0
     cb6:	13 96       	adiw	r26, 0x03	; 3
     cb8:	3c 93       	st	X, r19
     cba:	2e 93       	st	-X, r18
     cbc:	12 97       	sbiw	r26, 0x02	; 2
     cbe:	83 e0       	ldi	r24, 0x03	; 3
     cc0:	8c 93       	st	X, r24
     cc2:	87 e0       	ldi	r24, 0x07	; 7
     cc4:	44 0f       	add	r20, r20
     cc6:	55 1f       	adc	r21, r21
     cc8:	66 1f       	adc	r22, r22
     cca:	77 1f       	adc	r23, r23
     ccc:	8a 95       	dec	r24
     cce:	d1 f7       	brne	.-12     	; 0xcc4 <__unpack_f+0xd4>
     cd0:	70 64       	ori	r23, 0x40	; 64
     cd2:	14 96       	adiw	r26, 0x04	; 4
     cd4:	4d 93       	st	X+, r20
     cd6:	5d 93       	st	X+, r21
     cd8:	6d 93       	st	X+, r22
     cda:	7c 93       	st	X, r23
     cdc:	17 97       	sbiw	r26, 0x07	; 7
     cde:	08 95       	ret

00000ce0 <__fpcmp_parts_f>:
     ce0:	1f 93       	push	r17
     ce2:	dc 01       	movw	r26, r24
     ce4:	fb 01       	movw	r30, r22
     ce6:	9c 91       	ld	r25, X
     ce8:	92 30       	cpi	r25, 0x02	; 2
     cea:	08 f4       	brcc	.+2      	; 0xcee <__fpcmp_parts_f+0xe>
     cec:	47 c0       	rjmp	.+142    	; 0xd7c <__fpcmp_parts_f+0x9c>
     cee:	80 81       	ld	r24, Z
     cf0:	82 30       	cpi	r24, 0x02	; 2
     cf2:	08 f4       	brcc	.+2      	; 0xcf6 <__fpcmp_parts_f+0x16>
     cf4:	43 c0       	rjmp	.+134    	; 0xd7c <__fpcmp_parts_f+0x9c>
     cf6:	94 30       	cpi	r25, 0x04	; 4
     cf8:	51 f4       	brne	.+20     	; 0xd0e <__fpcmp_parts_f+0x2e>
     cfa:	11 96       	adiw	r26, 0x01	; 1
     cfc:	1c 91       	ld	r17, X
     cfe:	84 30       	cpi	r24, 0x04	; 4
     d00:	99 f5       	brne	.+102    	; 0xd68 <__fpcmp_parts_f+0x88>
     d02:	81 81       	ldd	r24, Z+1	; 0x01
     d04:	68 2f       	mov	r22, r24
     d06:	70 e0       	ldi	r23, 0x00	; 0
     d08:	61 1b       	sub	r22, r17
     d0a:	71 09       	sbc	r23, r1
     d0c:	3f c0       	rjmp	.+126    	; 0xd8c <__fpcmp_parts_f+0xac>
     d0e:	84 30       	cpi	r24, 0x04	; 4
     d10:	21 f0       	breq	.+8      	; 0xd1a <__fpcmp_parts_f+0x3a>
     d12:	92 30       	cpi	r25, 0x02	; 2
     d14:	31 f4       	brne	.+12     	; 0xd22 <__fpcmp_parts_f+0x42>
     d16:	82 30       	cpi	r24, 0x02	; 2
     d18:	b9 f1       	breq	.+110    	; 0xd88 <__fpcmp_parts_f+0xa8>
     d1a:	81 81       	ldd	r24, Z+1	; 0x01
     d1c:	88 23       	and	r24, r24
     d1e:	89 f1       	breq	.+98     	; 0xd82 <__fpcmp_parts_f+0xa2>
     d20:	2d c0       	rjmp	.+90     	; 0xd7c <__fpcmp_parts_f+0x9c>
     d22:	11 96       	adiw	r26, 0x01	; 1
     d24:	1c 91       	ld	r17, X
     d26:	11 97       	sbiw	r26, 0x01	; 1
     d28:	82 30       	cpi	r24, 0x02	; 2
     d2a:	f1 f0       	breq	.+60     	; 0xd68 <__fpcmp_parts_f+0x88>
     d2c:	81 81       	ldd	r24, Z+1	; 0x01
     d2e:	18 17       	cp	r17, r24
     d30:	d9 f4       	brne	.+54     	; 0xd68 <__fpcmp_parts_f+0x88>
     d32:	12 96       	adiw	r26, 0x02	; 2
     d34:	2d 91       	ld	r18, X+
     d36:	3c 91       	ld	r19, X
     d38:	13 97       	sbiw	r26, 0x03	; 3
     d3a:	82 81       	ldd	r24, Z+2	; 0x02
     d3c:	93 81       	ldd	r25, Z+3	; 0x03
     d3e:	82 17       	cp	r24, r18
     d40:	93 07       	cpc	r25, r19
     d42:	94 f0       	brlt	.+36     	; 0xd68 <__fpcmp_parts_f+0x88>
     d44:	28 17       	cp	r18, r24
     d46:	39 07       	cpc	r19, r25
     d48:	bc f0       	brlt	.+46     	; 0xd78 <__fpcmp_parts_f+0x98>
     d4a:	14 96       	adiw	r26, 0x04	; 4
     d4c:	8d 91       	ld	r24, X+
     d4e:	9d 91       	ld	r25, X+
     d50:	0d 90       	ld	r0, X+
     d52:	bc 91       	ld	r27, X
     d54:	a0 2d       	mov	r26, r0
     d56:	24 81       	ldd	r18, Z+4	; 0x04
     d58:	35 81       	ldd	r19, Z+5	; 0x05
     d5a:	46 81       	ldd	r20, Z+6	; 0x06
     d5c:	57 81       	ldd	r21, Z+7	; 0x07
     d5e:	28 17       	cp	r18, r24
     d60:	39 07       	cpc	r19, r25
     d62:	4a 07       	cpc	r20, r26
     d64:	5b 07       	cpc	r21, r27
     d66:	18 f4       	brcc	.+6      	; 0xd6e <__fpcmp_parts_f+0x8e>
     d68:	11 23       	and	r17, r17
     d6a:	41 f0       	breq	.+16     	; 0xd7c <__fpcmp_parts_f+0x9c>
     d6c:	0a c0       	rjmp	.+20     	; 0xd82 <__fpcmp_parts_f+0xa2>
     d6e:	82 17       	cp	r24, r18
     d70:	93 07       	cpc	r25, r19
     d72:	a4 07       	cpc	r26, r20
     d74:	b5 07       	cpc	r27, r21
     d76:	40 f4       	brcc	.+16     	; 0xd88 <__fpcmp_parts_f+0xa8>
     d78:	11 23       	and	r17, r17
     d7a:	19 f0       	breq	.+6      	; 0xd82 <__fpcmp_parts_f+0xa2>
     d7c:	61 e0       	ldi	r22, 0x01	; 1
     d7e:	70 e0       	ldi	r23, 0x00	; 0
     d80:	05 c0       	rjmp	.+10     	; 0xd8c <__fpcmp_parts_f+0xac>
     d82:	6f ef       	ldi	r22, 0xFF	; 255
     d84:	7f ef       	ldi	r23, 0xFF	; 255
     d86:	02 c0       	rjmp	.+4      	; 0xd8c <__fpcmp_parts_f+0xac>
     d88:	60 e0       	ldi	r22, 0x00	; 0
     d8a:	70 e0       	ldi	r23, 0x00	; 0
     d8c:	cb 01       	movw	r24, r22
     d8e:	1f 91       	pop	r17
     d90:	08 95       	ret

00000d92 <EEPROM_voidWrite>:
#include "EEPROM_interface.h"
#include "EEPROM_config.h"
#include "EEPROM_private.h"

void EEPROM_voidWrite (u16 copy_u16Address , u8 copy_u8Data)
{
     d92:	df 93       	push	r29
     d94:	cf 93       	push	r28
     d96:	00 d0       	rcall	.+0      	; 0xd98 <EEPROM_voidWrite+0x6>
     d98:	0f 92       	push	r0
     d9a:	cd b7       	in	r28, 0x3d	; 61
     d9c:	de b7       	in	r29, 0x3e	; 62
     d9e:	9a 83       	std	Y+2, r25	; 0x02
     da0:	89 83       	std	Y+1, r24	; 0x01
     da2:	6b 83       	std	Y+3, r22	; 0x03
	EEARL = (u8)copy_u16Address;
     da4:	ee e3       	ldi	r30, 0x3E	; 62
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	89 81       	ldd	r24, Y+1	; 0x01
     daa:	80 83       	st	Z, r24
	EEARH = (u8)(copy_u16Address>>8);
     dac:	ef e3       	ldi	r30, 0x3F	; 63
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	89 81       	ldd	r24, Y+1	; 0x01
     db2:	9a 81       	ldd	r25, Y+2	; 0x02
     db4:	89 2f       	mov	r24, r25
     db6:	99 27       	eor	r25, r25
     db8:	80 83       	st	Z, r24
	EEDR = copy_u8Data ;
     dba:	ed e3       	ldi	r30, 0x3D	; 61
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	8b 81       	ldd	r24, Y+3	; 0x03
     dc0:	80 83       	st	Z, r24
	
	SET_BIT(EECR , EEMWE);
     dc2:	ac e3       	ldi	r26, 0x3C	; 60
     dc4:	b0 e0       	ldi	r27, 0x00	; 0
     dc6:	ec e3       	ldi	r30, 0x3C	; 60
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	80 81       	ld	r24, Z
     dcc:	84 60       	ori	r24, 0x04	; 4
     dce:	8c 93       	st	X, r24
	SET_BIT (EECR , EEWE);
     dd0:	ac e3       	ldi	r26, 0x3C	; 60
     dd2:	b0 e0       	ldi	r27, 0x00	; 0
     dd4:	ec e3       	ldi	r30, 0x3C	; 60
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	80 81       	ld	r24, Z
     dda:	82 60       	ori	r24, 0x02	; 2
     ddc:	8c 93       	st	X, r24
	while (GET_BIT(EECR,EEWE)==1);
     dde:	ec e3       	ldi	r30, 0x3C	; 60
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	80 81       	ld	r24, Z
     de4:	88 2f       	mov	r24, r24
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	82 70       	andi	r24, 0x02	; 2
     dea:	90 70       	andi	r25, 0x00	; 0
     dec:	95 95       	asr	r25
     dee:	87 95       	ror	r24
     df0:	81 30       	cpi	r24, 0x01	; 1
     df2:	91 05       	cpc	r25, r1
     df4:	a1 f3       	breq	.-24     	; 0xdde <EEPROM_voidWrite+0x4c>
}
     df6:	0f 90       	pop	r0
     df8:	0f 90       	pop	r0
     dfa:	0f 90       	pop	r0
     dfc:	cf 91       	pop	r28
     dfe:	df 91       	pop	r29
     e00:	08 95       	ret

00000e02 <EEPROM_voidRead>:
u8 EEPROM_voidRead (u16 copy_u16Address)
{
     e02:	df 93       	push	r29
     e04:	cf 93       	push	r28
     e06:	00 d0       	rcall	.+0      	; 0xe08 <EEPROM_voidRead+0x6>
     e08:	cd b7       	in	r28, 0x3d	; 61
     e0a:	de b7       	in	r29, 0x3e	; 62
     e0c:	9a 83       	std	Y+2, r25	; 0x02
     e0e:	89 83       	std	Y+1, r24	; 0x01
	
	EEARL = (u8)copy_u16Address;
     e10:	ee e3       	ldi	r30, 0x3E	; 62
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	89 81       	ldd	r24, Y+1	; 0x01
     e16:	80 83       	st	Z, r24
	EEARH = (u8)(copy_u16Address>>8);
     e18:	ef e3       	ldi	r30, 0x3F	; 63
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	89 81       	ldd	r24, Y+1	; 0x01
     e1e:	9a 81       	ldd	r25, Y+2	; 0x02
     e20:	89 2f       	mov	r24, r25
     e22:	99 27       	eor	r25, r25
     e24:	80 83       	st	Z, r24
	SET_BIT (EECR , EERE);
     e26:	ac e3       	ldi	r26, 0x3C	; 60
     e28:	b0 e0       	ldi	r27, 0x00	; 0
     e2a:	ec e3       	ldi	r30, 0x3C	; 60
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	80 81       	ld	r24, Z
     e30:	81 60       	ori	r24, 0x01	; 1
     e32:	8c 93       	st	X, r24
	return EEDR ; 
     e34:	ed e3       	ldi	r30, 0x3D	; 61
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	80 81       	ld	r24, Z
}
     e3a:	0f 90       	pop	r0
     e3c:	0f 90       	pop	r0
     e3e:	cf 91       	pop	r28
     e40:	df 91       	pop	r29
     e42:	08 95       	ret

00000e44 <ExtEEPROM_voidWrite>:
#include "ExtEEPROM_interface.h"
#include "ExtEEPROM_private.h"
#include "ExtEEPROM_config.h"

void ExtEEPROM_voidWrite (u8 copy_u8Address , u8 copy_u8Data)
{
     e44:	df 93       	push	r29
     e46:	cf 93       	push	r28
     e48:	00 d0       	rcall	.+0      	; 0xe4a <ExtEEPROM_voidWrite+0x6>
     e4a:	cd b7       	in	r28, 0x3d	; 61
     e4c:	de b7       	in	r29, 0x3e	; 62
     e4e:	89 83       	std	Y+1, r24	; 0x01
     e50:	6a 83       	std	Y+2, r22	; 0x02
	I2C_voidStart(); // transmit start condition
     e52:	0e 94 05 12 	call	0x240a	; 0x240a <I2C_voidStart>
	I2C_voidWriteAddress(0b10100000); // transmit device address and Write
     e56:	80 ea       	ldi	r24, 0xA0	; 160
     e58:	0e 94 25 12 	call	0x244a	; 0x244a <I2C_voidWriteAddress>
	I2C_voidWriteData(copy_u8Address); // transmit word address
     e5c:	89 81       	ldd	r24, Y+1	; 0x01
     e5e:	0e 94 4c 12 	call	0x2498	; 0x2498 <I2C_voidWriteData>
	I2C_voidWriteData(copy_u8Data); // transmit data
     e62:	8a 81       	ldd	r24, Y+2	; 0x02
     e64:	0e 94 4c 12 	call	0x2498	; 0x2498 <I2C_voidWriteData>
	I2C_voidStop(); // transmit stop condition
     e68:	0e 94 73 12 	call	0x24e6	; 0x24e6 <I2C_voidStop>
}
     e6c:	0f 90       	pop	r0
     e6e:	0f 90       	pop	r0
     e70:	cf 91       	pop	r28
     e72:	df 91       	pop	r29
     e74:	08 95       	ret

00000e76 <ExtEEPROM_voidRead>:

u8  ExtEEPROM_voidRead (u8 copy_u8Address )
{
     e76:	df 93       	push	r29
     e78:	cf 93       	push	r28
     e7a:	00 d0       	rcall	.+0      	; 0xe7c <ExtEEPROM_voidRead+0x6>
     e7c:	cd b7       	in	r28, 0x3d	; 61
     e7e:	de b7       	in	r29, 0x3e	; 62
     e80:	8a 83       	std	Y+2, r24	; 0x02
	u8 x ;
	I2C_voidStart(); // transmit start condition
     e82:	0e 94 05 12 	call	0x240a	; 0x240a <I2C_voidStart>
	I2C_voidWriteAddress(0xA0); // transmit device address and Write
     e86:	80 ea       	ldi	r24, 0xA0	; 160
     e88:	0e 94 25 12 	call	0x244a	; 0x244a <I2C_voidWriteAddress>
	I2C_voidWriteData(copy_u8Address); // transmit word address
     e8c:	8a 81       	ldd	r24, Y+2	; 0x02
     e8e:	0e 94 4c 12 	call	0x2498	; 0x2498 <I2C_voidWriteData>
	I2C_repeated_start(); // transmit repeated start condition
     e92:	0e 94 c8 12 	call	0x2590	; 0x2590 <I2C_repeated_start>
	I2C_write_address_and_read(0b10100001); // transmit device address and read
     e96:	81 ea       	ldi	r24, 0xA1	; 161
     e98:	0e 94 0b 13 	call	0x2616	; 0x2616 <I2C_write_address_and_read>
	x=I2C_read_with_NACK();
     e9c:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <I2C_read_with_NACK>
     ea0:	89 83       	std	Y+1, r24	; 0x01
	I2C_voidStop();
     ea2:	0e 94 73 12 	call	0x24e6	; 0x24e6 <I2C_voidStop>
	return x;
     ea6:	89 81       	ldd	r24, Y+1	; 0x01

}
     ea8:	0f 90       	pop	r0
     eaa:	0f 90       	pop	r0
     eac:	cf 91       	pop	r28
     eae:	df 91       	pop	r29
     eb0:	08 95       	ret

00000eb2 <SetPass>:

u8 PassKey , Index , PassIndex ;
u8 PassWord[5];

void SetPass (void)
{
     eb2:	df 93       	push	r29
     eb4:	cf 93       	push	r28
     eb6:	cd b7       	in	r28, 0x3d	; 61
     eb8:	de b7       	in	r29, 0x3e	; 62
     eba:	e8 97       	sbiw	r28, 0x38	; 56
     ebc:	0f b6       	in	r0, 0x3f	; 63
     ebe:	f8 94       	cli
     ec0:	de bf       	out	0x3e, r29	; 62
     ec2:	0f be       	out	0x3f, r0	; 63
     ec4:	cd bf       	out	0x3d, r28	; 61

	LCD_voidClearScreen();
     ec6:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <LCD_voidClearScreen>
	LCD_voidDispString("Set new Pass");
     eca:	80 e6       	ldi	r24, 0x60	; 96
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	0e 94 13 1a 	call	0x3426	; 0x3426 <LCD_voidDispString>
     ed2:	80 e0       	ldi	r24, 0x00	; 0
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	aa ef       	ldi	r26, 0xFA	; 250
     ed8:	b4 e4       	ldi	r27, 0x44	; 68
     eda:	8d ab       	std	Y+53, r24	; 0x35
     edc:	9e ab       	std	Y+54, r25	; 0x36
     ede:	af ab       	std	Y+55, r26	; 0x37
     ee0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ee2:	6d a9       	ldd	r22, Y+53	; 0x35
     ee4:	7e a9       	ldd	r23, Y+54	; 0x36
     ee6:	8f a9       	ldd	r24, Y+55	; 0x37
     ee8:	98 ad       	ldd	r25, Y+56	; 0x38
     eea:	20 e0       	ldi	r18, 0x00	; 0
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	4a ef       	ldi	r20, 0xFA	; 250
     ef0:	54 e4       	ldi	r21, 0x44	; 68
     ef2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ef6:	dc 01       	movw	r26, r24
     ef8:	cb 01       	movw	r24, r22
     efa:	89 ab       	std	Y+49, r24	; 0x31
     efc:	9a ab       	std	Y+50, r25	; 0x32
     efe:	ab ab       	std	Y+51, r26	; 0x33
     f00:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     f02:	69 a9       	ldd	r22, Y+49	; 0x31
     f04:	7a a9       	ldd	r23, Y+50	; 0x32
     f06:	8b a9       	ldd	r24, Y+51	; 0x33
     f08:	9c a9       	ldd	r25, Y+52	; 0x34
     f0a:	20 e0       	ldi	r18, 0x00	; 0
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	40 e8       	ldi	r20, 0x80	; 128
     f10:	5f e3       	ldi	r21, 0x3F	; 63
     f12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f16:	88 23       	and	r24, r24
     f18:	2c f4       	brge	.+10     	; 0xf24 <SetPass+0x72>
		__ticks = 1;
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	98 ab       	std	Y+48, r25	; 0x30
     f20:	8f a7       	std	Y+47, r24	; 0x2f
     f22:	3f c0       	rjmp	.+126    	; 0xfa2 <SetPass+0xf0>
	else if (__tmp > 65535)
     f24:	69 a9       	ldd	r22, Y+49	; 0x31
     f26:	7a a9       	ldd	r23, Y+50	; 0x32
     f28:	8b a9       	ldd	r24, Y+51	; 0x33
     f2a:	9c a9       	ldd	r25, Y+52	; 0x34
     f2c:	20 e0       	ldi	r18, 0x00	; 0
     f2e:	3f ef       	ldi	r19, 0xFF	; 255
     f30:	4f e7       	ldi	r20, 0x7F	; 127
     f32:	57 e4       	ldi	r21, 0x47	; 71
     f34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f38:	18 16       	cp	r1, r24
     f3a:	4c f5       	brge	.+82     	; 0xf8e <SetPass+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f3c:	6d a9       	ldd	r22, Y+53	; 0x35
     f3e:	7e a9       	ldd	r23, Y+54	; 0x36
     f40:	8f a9       	ldd	r24, Y+55	; 0x37
     f42:	98 ad       	ldd	r25, Y+56	; 0x38
     f44:	20 e0       	ldi	r18, 0x00	; 0
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	40 e2       	ldi	r20, 0x20	; 32
     f4a:	51 e4       	ldi	r21, 0x41	; 65
     f4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f50:	dc 01       	movw	r26, r24
     f52:	cb 01       	movw	r24, r22
     f54:	bc 01       	movw	r22, r24
     f56:	cd 01       	movw	r24, r26
     f58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f5c:	dc 01       	movw	r26, r24
     f5e:	cb 01       	movw	r24, r22
     f60:	98 ab       	std	Y+48, r25	; 0x30
     f62:	8f a7       	std	Y+47, r24	; 0x2f
     f64:	0f c0       	rjmp	.+30     	; 0xf84 <SetPass+0xd2>
     f66:	88 ec       	ldi	r24, 0xC8	; 200
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	9e a7       	std	Y+46, r25	; 0x2e
     f6c:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f6e:	8d a5       	ldd	r24, Y+45	; 0x2d
     f70:	9e a5       	ldd	r25, Y+46	; 0x2e
     f72:	01 97       	sbiw	r24, 0x01	; 1
     f74:	f1 f7       	brne	.-4      	; 0xf72 <SetPass+0xc0>
     f76:	9e a7       	std	Y+46, r25	; 0x2e
     f78:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f7a:	8f a5       	ldd	r24, Y+47	; 0x2f
     f7c:	98 a9       	ldd	r25, Y+48	; 0x30
     f7e:	01 97       	sbiw	r24, 0x01	; 1
     f80:	98 ab       	std	Y+48, r25	; 0x30
     f82:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f84:	8f a5       	ldd	r24, Y+47	; 0x2f
     f86:	98 a9       	ldd	r25, Y+48	; 0x30
     f88:	00 97       	sbiw	r24, 0x00	; 0
     f8a:	69 f7       	brne	.-38     	; 0xf66 <SetPass+0xb4>
     f8c:	14 c0       	rjmp	.+40     	; 0xfb6 <SetPass+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f8e:	69 a9       	ldd	r22, Y+49	; 0x31
     f90:	7a a9       	ldd	r23, Y+50	; 0x32
     f92:	8b a9       	ldd	r24, Y+51	; 0x33
     f94:	9c a9       	ldd	r25, Y+52	; 0x34
     f96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f9a:	dc 01       	movw	r26, r24
     f9c:	cb 01       	movw	r24, r22
     f9e:	98 ab       	std	Y+48, r25	; 0x30
     fa0:	8f a7       	std	Y+47, r24	; 0x2f
     fa2:	8f a5       	ldd	r24, Y+47	; 0x2f
     fa4:	98 a9       	ldd	r25, Y+48	; 0x30
     fa6:	9c a7       	std	Y+44, r25	; 0x2c
     fa8:	8b a7       	std	Y+43, r24	; 0x2b
     faa:	8b a5       	ldd	r24, Y+43	; 0x2b
     fac:	9c a5       	ldd	r25, Y+44	; 0x2c
     fae:	01 97       	sbiw	r24, 0x01	; 1
     fb0:	f1 f7       	brne	.-4      	; 0xfae <SetPass+0xfc>
     fb2:	9c a7       	std	Y+44, r25	; 0x2c
     fb4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2000);
	LCD_voidClearScreen();
     fb6:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <LCD_voidClearScreen>
	Index = 0 ;
     fba:	10 92 0c 02 	sts	0x020C, r1
	LCD_voidMoveCrusor(1,6);
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	66 e0       	ldi	r22, 0x06	; 6
     fc2:	0e 94 3b 18 	call	0x3076	; 0x3076 <LCD_voidMoveCrusor>
	LCD_voidDispString("<PIN>");
     fc6:	8d e6       	ldi	r24, 0x6D	; 109
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	0e 94 13 1a 	call	0x3426	; 0x3426 <LCD_voidDispString>
	LCD_voidMoveCrusor(2,4);
     fce:	82 e0       	ldi	r24, 0x02	; 2
     fd0:	64 e0       	ldi	r22, 0x04	; 4
     fd2:	0e 94 3b 18 	call	0x3076	; 0x3076 <LCD_voidMoveCrusor>
	do
	{
		do
		{
			PassKey = Keypad_voidCheckVal(GPIOB);
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <Keypad_voidCheckVal>
     fdc:	80 93 0d 02 	sts	0x020D, r24

		} while (PassKey == NOTPRESSED);
     fe0:	80 91 0d 02 	lds	r24, 0x020D
     fe4:	8f 3f       	cpi	r24, 0xFF	; 255
     fe6:	b9 f3       	breq	.-18     	; 0xfd6 <SetPass+0x124>
     fe8:	80 e0       	ldi	r24, 0x00	; 0
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	a8 e4       	ldi	r26, 0x48	; 72
     fee:	b3 e4       	ldi	r27, 0x43	; 67
     ff0:	8f a3       	std	Y+39, r24	; 0x27
     ff2:	98 a7       	std	Y+40, r25	; 0x28
     ff4:	a9 a7       	std	Y+41, r26	; 0x29
     ff6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ff8:	6f a1       	ldd	r22, Y+39	; 0x27
     ffa:	78 a5       	ldd	r23, Y+40	; 0x28
     ffc:	89 a5       	ldd	r24, Y+41	; 0x29
     ffe:	9a a5       	ldd	r25, Y+42	; 0x2a
    1000:	20 e0       	ldi	r18, 0x00	; 0
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	4a ef       	ldi	r20, 0xFA	; 250
    1006:	54 e4       	ldi	r21, 0x44	; 68
    1008:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    100c:	dc 01       	movw	r26, r24
    100e:	cb 01       	movw	r24, r22
    1010:	8b a3       	std	Y+35, r24	; 0x23
    1012:	9c a3       	std	Y+36, r25	; 0x24
    1014:	ad a3       	std	Y+37, r26	; 0x25
    1016:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1018:	6b a1       	ldd	r22, Y+35	; 0x23
    101a:	7c a1       	ldd	r23, Y+36	; 0x24
    101c:	8d a1       	ldd	r24, Y+37	; 0x25
    101e:	9e a1       	ldd	r25, Y+38	; 0x26
    1020:	20 e0       	ldi	r18, 0x00	; 0
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	40 e8       	ldi	r20, 0x80	; 128
    1026:	5f e3       	ldi	r21, 0x3F	; 63
    1028:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    102c:	88 23       	and	r24, r24
    102e:	2c f4       	brge	.+10     	; 0x103a <SetPass+0x188>
		__ticks = 1;
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	9a a3       	std	Y+34, r25	; 0x22
    1036:	89 a3       	std	Y+33, r24	; 0x21
    1038:	3f c0       	rjmp	.+126    	; 0x10b8 <SetPass+0x206>
	else if (__tmp > 65535)
    103a:	6b a1       	ldd	r22, Y+35	; 0x23
    103c:	7c a1       	ldd	r23, Y+36	; 0x24
    103e:	8d a1       	ldd	r24, Y+37	; 0x25
    1040:	9e a1       	ldd	r25, Y+38	; 0x26
    1042:	20 e0       	ldi	r18, 0x00	; 0
    1044:	3f ef       	ldi	r19, 0xFF	; 255
    1046:	4f e7       	ldi	r20, 0x7F	; 127
    1048:	57 e4       	ldi	r21, 0x47	; 71
    104a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    104e:	18 16       	cp	r1, r24
    1050:	4c f5       	brge	.+82     	; 0x10a4 <SetPass+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1052:	6f a1       	ldd	r22, Y+39	; 0x27
    1054:	78 a5       	ldd	r23, Y+40	; 0x28
    1056:	89 a5       	ldd	r24, Y+41	; 0x29
    1058:	9a a5       	ldd	r25, Y+42	; 0x2a
    105a:	20 e0       	ldi	r18, 0x00	; 0
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	40 e2       	ldi	r20, 0x20	; 32
    1060:	51 e4       	ldi	r21, 0x41	; 65
    1062:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1066:	dc 01       	movw	r26, r24
    1068:	cb 01       	movw	r24, r22
    106a:	bc 01       	movw	r22, r24
    106c:	cd 01       	movw	r24, r26
    106e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1072:	dc 01       	movw	r26, r24
    1074:	cb 01       	movw	r24, r22
    1076:	9a a3       	std	Y+34, r25	; 0x22
    1078:	89 a3       	std	Y+33, r24	; 0x21
    107a:	0f c0       	rjmp	.+30     	; 0x109a <SetPass+0x1e8>
    107c:	88 ec       	ldi	r24, 0xC8	; 200
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	98 a3       	std	Y+32, r25	; 0x20
    1082:	8f 8f       	std	Y+31, r24	; 0x1f
    1084:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1086:	98 a1       	ldd	r25, Y+32	; 0x20
    1088:	01 97       	sbiw	r24, 0x01	; 1
    108a:	f1 f7       	brne	.-4      	; 0x1088 <SetPass+0x1d6>
    108c:	98 a3       	std	Y+32, r25	; 0x20
    108e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1090:	89 a1       	ldd	r24, Y+33	; 0x21
    1092:	9a a1       	ldd	r25, Y+34	; 0x22
    1094:	01 97       	sbiw	r24, 0x01	; 1
    1096:	9a a3       	std	Y+34, r25	; 0x22
    1098:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    109a:	89 a1       	ldd	r24, Y+33	; 0x21
    109c:	9a a1       	ldd	r25, Y+34	; 0x22
    109e:	00 97       	sbiw	r24, 0x00	; 0
    10a0:	69 f7       	brne	.-38     	; 0x107c <SetPass+0x1ca>
    10a2:	14 c0       	rjmp	.+40     	; 0x10cc <SetPass+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10a4:	6b a1       	ldd	r22, Y+35	; 0x23
    10a6:	7c a1       	ldd	r23, Y+36	; 0x24
    10a8:	8d a1       	ldd	r24, Y+37	; 0x25
    10aa:	9e a1       	ldd	r25, Y+38	; 0x26
    10ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10b0:	dc 01       	movw	r26, r24
    10b2:	cb 01       	movw	r24, r22
    10b4:	9a a3       	std	Y+34, r25	; 0x22
    10b6:	89 a3       	std	Y+33, r24	; 0x21
    10b8:	89 a1       	ldd	r24, Y+33	; 0x21
    10ba:	9a a1       	ldd	r25, Y+34	; 0x22
    10bc:	9e 8f       	std	Y+30, r25	; 0x1e
    10be:	8d 8f       	std	Y+29, r24	; 0x1d
    10c0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10c2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    10c4:	01 97       	sbiw	r24, 0x01	; 1
    10c6:	f1 f7       	brne	.-4      	; 0x10c4 <SetPass+0x212>
    10c8:	9e 8f       	std	Y+30, r25	; 0x1e
    10ca:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(KEYDELAY);
		LCD_voidDispChar(PassKey);
    10cc:	80 91 0d 02 	lds	r24, 0x020D
    10d0:	0e 94 69 19 	call	0x32d2	; 0x32d2 <LCD_voidDispChar>
		PassKey ^= E_KEY ;
    10d4:	90 91 0d 02 	lds	r25, 0x020D
    10d8:	8c ed       	ldi	r24, 0xDC	; 220
    10da:	89 27       	eor	r24, r25
    10dc:	80 93 0d 02 	sts	0x020D, r24
		PassWord[Index] = PassKey;
    10e0:	80 91 0c 02 	lds	r24, 0x020C
    10e4:	88 2f       	mov	r24, r24
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	20 91 0d 02 	lds	r18, 0x020D
    10ec:	fc 01       	movw	r30, r24
    10ee:	e2 5f       	subi	r30, 0xF2	; 242
    10f0:	fd 4f       	sbci	r31, 0xFD	; 253
    10f2:	20 83       	st	Z, r18
		Index ++ ;
    10f4:	80 91 0c 02 	lds	r24, 0x020C
    10f8:	8f 5f       	subi	r24, 0xFF	; 255
    10fa:	80 93 0c 02 	sts	0x020C, r24
	} while (Index != 5);
    10fe:	80 91 0c 02 	lds	r24, 0x020C
    1102:	85 30       	cpi	r24, 0x05	; 5
    1104:	09 f0       	breq	.+2      	; 0x1108 <SetPass+0x256>
    1106:	67 cf       	rjmp	.-306    	; 0xfd6 <SetPass+0x124>
	do{
	do
	{
		PassKey = Keypad_voidCheckVal(GPIOB);
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <Keypad_voidCheckVal>
    110e:	80 93 0d 02 	sts	0x020D, r24

	} while (PassKey == NOTPRESSED);
    1112:	80 91 0d 02 	lds	r24, 0x020D
    1116:	8f 3f       	cpi	r24, 0xFF	; 255
    1118:	b9 f3       	breq	.-18     	; 0x1108 <SetPass+0x256>
    111a:	80 e0       	ldi	r24, 0x00	; 0
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	a8 e4       	ldi	r26, 0x48	; 72
    1120:	b3 e4       	ldi	r27, 0x43	; 67
    1122:	89 8f       	std	Y+25, r24	; 0x19
    1124:	9a 8f       	std	Y+26, r25	; 0x1a
    1126:	ab 8f       	std	Y+27, r26	; 0x1b
    1128:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    112a:	69 8d       	ldd	r22, Y+25	; 0x19
    112c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    112e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1130:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1132:	20 e0       	ldi	r18, 0x00	; 0
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	4a ef       	ldi	r20, 0xFA	; 250
    1138:	54 e4       	ldi	r21, 0x44	; 68
    113a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    113e:	dc 01       	movw	r26, r24
    1140:	cb 01       	movw	r24, r22
    1142:	8d 8b       	std	Y+21, r24	; 0x15
    1144:	9e 8b       	std	Y+22, r25	; 0x16
    1146:	af 8b       	std	Y+23, r26	; 0x17
    1148:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    114a:	6d 89       	ldd	r22, Y+21	; 0x15
    114c:	7e 89       	ldd	r23, Y+22	; 0x16
    114e:	8f 89       	ldd	r24, Y+23	; 0x17
    1150:	98 8d       	ldd	r25, Y+24	; 0x18
    1152:	20 e0       	ldi	r18, 0x00	; 0
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	40 e8       	ldi	r20, 0x80	; 128
    1158:	5f e3       	ldi	r21, 0x3F	; 63
    115a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    115e:	88 23       	and	r24, r24
    1160:	2c f4       	brge	.+10     	; 0x116c <SetPass+0x2ba>
		__ticks = 1;
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	9c 8b       	std	Y+20, r25	; 0x14
    1168:	8b 8b       	std	Y+19, r24	; 0x13
    116a:	3f c0       	rjmp	.+126    	; 0x11ea <SetPass+0x338>
	else if (__tmp > 65535)
    116c:	6d 89       	ldd	r22, Y+21	; 0x15
    116e:	7e 89       	ldd	r23, Y+22	; 0x16
    1170:	8f 89       	ldd	r24, Y+23	; 0x17
    1172:	98 8d       	ldd	r25, Y+24	; 0x18
    1174:	20 e0       	ldi	r18, 0x00	; 0
    1176:	3f ef       	ldi	r19, 0xFF	; 255
    1178:	4f e7       	ldi	r20, 0x7F	; 127
    117a:	57 e4       	ldi	r21, 0x47	; 71
    117c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1180:	18 16       	cp	r1, r24
    1182:	4c f5       	brge	.+82     	; 0x11d6 <SetPass+0x324>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1184:	69 8d       	ldd	r22, Y+25	; 0x19
    1186:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1188:	8b 8d       	ldd	r24, Y+27	; 0x1b
    118a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    118c:	20 e0       	ldi	r18, 0x00	; 0
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	40 e2       	ldi	r20, 0x20	; 32
    1192:	51 e4       	ldi	r21, 0x41	; 65
    1194:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1198:	dc 01       	movw	r26, r24
    119a:	cb 01       	movw	r24, r22
    119c:	bc 01       	movw	r22, r24
    119e:	cd 01       	movw	r24, r26
    11a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11a4:	dc 01       	movw	r26, r24
    11a6:	cb 01       	movw	r24, r22
    11a8:	9c 8b       	std	Y+20, r25	; 0x14
    11aa:	8b 8b       	std	Y+19, r24	; 0x13
    11ac:	0f c0       	rjmp	.+30     	; 0x11cc <SetPass+0x31a>
    11ae:	88 ec       	ldi	r24, 0xC8	; 200
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	9a 8b       	std	Y+18, r25	; 0x12
    11b4:	89 8b       	std	Y+17, r24	; 0x11
    11b6:	89 89       	ldd	r24, Y+17	; 0x11
    11b8:	9a 89       	ldd	r25, Y+18	; 0x12
    11ba:	01 97       	sbiw	r24, 0x01	; 1
    11bc:	f1 f7       	brne	.-4      	; 0x11ba <SetPass+0x308>
    11be:	9a 8b       	std	Y+18, r25	; 0x12
    11c0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11c2:	8b 89       	ldd	r24, Y+19	; 0x13
    11c4:	9c 89       	ldd	r25, Y+20	; 0x14
    11c6:	01 97       	sbiw	r24, 0x01	; 1
    11c8:	9c 8b       	std	Y+20, r25	; 0x14
    11ca:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11cc:	8b 89       	ldd	r24, Y+19	; 0x13
    11ce:	9c 89       	ldd	r25, Y+20	; 0x14
    11d0:	00 97       	sbiw	r24, 0x00	; 0
    11d2:	69 f7       	brne	.-38     	; 0x11ae <SetPass+0x2fc>
    11d4:	14 c0       	rjmp	.+40     	; 0x11fe <SetPass+0x34c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11d6:	6d 89       	ldd	r22, Y+21	; 0x15
    11d8:	7e 89       	ldd	r23, Y+22	; 0x16
    11da:	8f 89       	ldd	r24, Y+23	; 0x17
    11dc:	98 8d       	ldd	r25, Y+24	; 0x18
    11de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11e2:	dc 01       	movw	r26, r24
    11e4:	cb 01       	movw	r24, r22
    11e6:	9c 8b       	std	Y+20, r25	; 0x14
    11e8:	8b 8b       	std	Y+19, r24	; 0x13
    11ea:	8b 89       	ldd	r24, Y+19	; 0x13
    11ec:	9c 89       	ldd	r25, Y+20	; 0x14
    11ee:	98 8b       	std	Y+16, r25	; 0x10
    11f0:	8f 87       	std	Y+15, r24	; 0x0f
    11f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    11f4:	98 89       	ldd	r25, Y+16	; 0x10
    11f6:	01 97       	sbiw	r24, 0x01	; 1
    11f8:	f1 f7       	brne	.-4      	; 0x11f6 <SetPass+0x344>
    11fa:	98 8b       	std	Y+16, r25	; 0x10
    11fc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(KEYDELAY);

	if (PassKey == 'A')
    11fe:	80 91 0d 02 	lds	r24, 0x020D
    1202:	81 34       	cpi	r24, 0x41	; 65
    1204:	09 f0       	breq	.+2      	; 0x1208 <SetPass+0x356>
    1206:	98 c0       	rjmp	.+304    	; 0x1338 <SetPass+0x486>
	{
		LCD_voidClearScreen();
    1208:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <LCD_voidClearScreen>
		LCD_voidMoveCrusor(1,3);
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	63 e0       	ldi	r22, 0x03	; 3
    1210:	0e 94 3b 18 	call	0x3076	; 0x3076 <LCD_voidMoveCrusor>
		for (Index = 0 ; Index<5 ; Index ++)
    1214:	10 92 0c 02 	sts	0x020C, r1
    1218:	85 c0       	rjmp	.+266    	; 0x1324 <SetPass+0x472>
    121a:	80 e0       	ldi	r24, 0x00	; 0
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	aa ef       	ldi	r26, 0xFA	; 250
    1220:	b3 e4       	ldi	r27, 0x43	; 67
    1222:	8b 87       	std	Y+11, r24	; 0x0b
    1224:	9c 87       	std	Y+12, r25	; 0x0c
    1226:	ad 87       	std	Y+13, r26	; 0x0d
    1228:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    122a:	6b 85       	ldd	r22, Y+11	; 0x0b
    122c:	7c 85       	ldd	r23, Y+12	; 0x0c
    122e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1230:	9e 85       	ldd	r25, Y+14	; 0x0e
    1232:	20 e0       	ldi	r18, 0x00	; 0
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	4a ef       	ldi	r20, 0xFA	; 250
    1238:	54 e4       	ldi	r21, 0x44	; 68
    123a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    123e:	dc 01       	movw	r26, r24
    1240:	cb 01       	movw	r24, r22
    1242:	8f 83       	std	Y+7, r24	; 0x07
    1244:	98 87       	std	Y+8, r25	; 0x08
    1246:	a9 87       	std	Y+9, r26	; 0x09
    1248:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    124a:	6f 81       	ldd	r22, Y+7	; 0x07
    124c:	78 85       	ldd	r23, Y+8	; 0x08
    124e:	89 85       	ldd	r24, Y+9	; 0x09
    1250:	9a 85       	ldd	r25, Y+10	; 0x0a
    1252:	20 e0       	ldi	r18, 0x00	; 0
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	40 e8       	ldi	r20, 0x80	; 128
    1258:	5f e3       	ldi	r21, 0x3F	; 63
    125a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    125e:	88 23       	and	r24, r24
    1260:	2c f4       	brge	.+10     	; 0x126c <SetPass+0x3ba>
		__ticks = 1;
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	9e 83       	std	Y+6, r25	; 0x06
    1268:	8d 83       	std	Y+5, r24	; 0x05
    126a:	3f c0       	rjmp	.+126    	; 0x12ea <SetPass+0x438>
	else if (__tmp > 65535)
    126c:	6f 81       	ldd	r22, Y+7	; 0x07
    126e:	78 85       	ldd	r23, Y+8	; 0x08
    1270:	89 85       	ldd	r24, Y+9	; 0x09
    1272:	9a 85       	ldd	r25, Y+10	; 0x0a
    1274:	20 e0       	ldi	r18, 0x00	; 0
    1276:	3f ef       	ldi	r19, 0xFF	; 255
    1278:	4f e7       	ldi	r20, 0x7F	; 127
    127a:	57 e4       	ldi	r21, 0x47	; 71
    127c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1280:	18 16       	cp	r1, r24
    1282:	4c f5       	brge	.+82     	; 0x12d6 <SetPass+0x424>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1284:	6b 85       	ldd	r22, Y+11	; 0x0b
    1286:	7c 85       	ldd	r23, Y+12	; 0x0c
    1288:	8d 85       	ldd	r24, Y+13	; 0x0d
    128a:	9e 85       	ldd	r25, Y+14	; 0x0e
    128c:	20 e0       	ldi	r18, 0x00	; 0
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	40 e2       	ldi	r20, 0x20	; 32
    1292:	51 e4       	ldi	r21, 0x41	; 65
    1294:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1298:	dc 01       	movw	r26, r24
    129a:	cb 01       	movw	r24, r22
    129c:	bc 01       	movw	r22, r24
    129e:	cd 01       	movw	r24, r26
    12a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12a4:	dc 01       	movw	r26, r24
    12a6:	cb 01       	movw	r24, r22
    12a8:	9e 83       	std	Y+6, r25	; 0x06
    12aa:	8d 83       	std	Y+5, r24	; 0x05
    12ac:	0f c0       	rjmp	.+30     	; 0x12cc <SetPass+0x41a>
    12ae:	88 ec       	ldi	r24, 0xC8	; 200
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	9c 83       	std	Y+4, r25	; 0x04
    12b4:	8b 83       	std	Y+3, r24	; 0x03
    12b6:	8b 81       	ldd	r24, Y+3	; 0x03
    12b8:	9c 81       	ldd	r25, Y+4	; 0x04
    12ba:	01 97       	sbiw	r24, 0x01	; 1
    12bc:	f1 f7       	brne	.-4      	; 0x12ba <SetPass+0x408>
    12be:	9c 83       	std	Y+4, r25	; 0x04
    12c0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12c2:	8d 81       	ldd	r24, Y+5	; 0x05
    12c4:	9e 81       	ldd	r25, Y+6	; 0x06
    12c6:	01 97       	sbiw	r24, 0x01	; 1
    12c8:	9e 83       	std	Y+6, r25	; 0x06
    12ca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12cc:	8d 81       	ldd	r24, Y+5	; 0x05
    12ce:	9e 81       	ldd	r25, Y+6	; 0x06
    12d0:	00 97       	sbiw	r24, 0x00	; 0
    12d2:	69 f7       	brne	.-38     	; 0x12ae <SetPass+0x3fc>
    12d4:	14 c0       	rjmp	.+40     	; 0x12fe <SetPass+0x44c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12d6:	6f 81       	ldd	r22, Y+7	; 0x07
    12d8:	78 85       	ldd	r23, Y+8	; 0x08
    12da:	89 85       	ldd	r24, Y+9	; 0x09
    12dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    12de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12e2:	dc 01       	movw	r26, r24
    12e4:	cb 01       	movw	r24, r22
    12e6:	9e 83       	std	Y+6, r25	; 0x06
    12e8:	8d 83       	std	Y+5, r24	; 0x05
    12ea:	8d 81       	ldd	r24, Y+5	; 0x05
    12ec:	9e 81       	ldd	r25, Y+6	; 0x06
    12ee:	9a 83       	std	Y+2, r25	; 0x02
    12f0:	89 83       	std	Y+1, r24	; 0x01
    12f2:	89 81       	ldd	r24, Y+1	; 0x01
    12f4:	9a 81       	ldd	r25, Y+2	; 0x02
    12f6:	01 97       	sbiw	r24, 0x01	; 1
    12f8:	f1 f7       	brne	.-4      	; 0x12f6 <SetPass+0x444>
    12fa:	9a 83       	std	Y+2, r25	; 0x02
    12fc:	89 83       	std	Y+1, r24	; 0x01
		{
			_delay_ms(500);
			ExtEEPROM_voidWrite(EEPROM_ADDRESS + Index , PassWord[Index]);
    12fe:	20 91 0c 02 	lds	r18, 0x020C
    1302:	80 91 0c 02 	lds	r24, 0x020C
    1306:	88 2f       	mov	r24, r24
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	fc 01       	movw	r30, r24
    130c:	e2 5f       	subi	r30, 0xF2	; 242
    130e:	fd 4f       	sbci	r31, 0xFD	; 253
    1310:	90 81       	ld	r25, Z
    1312:	82 2f       	mov	r24, r18
    1314:	69 2f       	mov	r22, r25
    1316:	0e 94 22 07 	call	0xe44	; 0xe44 <ExtEEPROM_voidWrite>

	if (PassKey == 'A')
	{
		LCD_voidClearScreen();
		LCD_voidMoveCrusor(1,3);
		for (Index = 0 ; Index<5 ; Index ++)
    131a:	80 91 0c 02 	lds	r24, 0x020C
    131e:	8f 5f       	subi	r24, 0xFF	; 255
    1320:	80 93 0c 02 	sts	0x020C, r24
    1324:	80 91 0c 02 	lds	r24, 0x020C
    1328:	85 30       	cpi	r24, 0x05	; 5
    132a:	08 f4       	brcc	.+2      	; 0x132e <SetPass+0x47c>
    132c:	76 cf       	rjmp	.-276    	; 0x121a <SetPass+0x368>
		{
			_delay_ms(500);
			ExtEEPROM_voidWrite(EEPROM_ADDRESS + Index , PassWord[Index]);
		}
		LCD_voidDispString("Pass Is Set");
    132e:	83 e7       	ldi	r24, 0x73	; 115
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	0e 94 13 1a 	call	0x3426	; 0x3426 <LCD_voidDispString>
    1336:	12 c0       	rjmp	.+36     	; 0x135c <SetPass+0x4aa>
		break;

	}
	else if (PassKey == '=')
    1338:	80 91 0d 02 	lds	r24, 0x020D
    133c:	8d 33       	cpi	r24, 0x3D	; 61
    133e:	21 f4       	brne	.+8      	; 0x1348 <SetPass+0x496>
	{
		LCD_voidClearScreen();
    1340:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <LCD_voidClearScreen>
		SetPass();
    1344:	0e 94 59 07 	call	0xeb2	; 0xeb2 <SetPass>
	}
}while(PassKey != '='|| PassKey != 'A');
    1348:	80 91 0d 02 	lds	r24, 0x020D
    134c:	8d 33       	cpi	r24, 0x3D	; 61
    134e:	09 f0       	breq	.+2      	; 0x1352 <SetPass+0x4a0>
    1350:	db ce       	rjmp	.-586    	; 0x1108 <SetPass+0x256>
    1352:	80 91 0d 02 	lds	r24, 0x020D
    1356:	81 34       	cpi	r24, 0x41	; 65
    1358:	09 f0       	breq	.+2      	; 0x135c <SetPass+0x4aa>
    135a:	d6 ce       	rjmp	.-596    	; 0x1108 <SetPass+0x256>
}
    135c:	e8 96       	adiw	r28, 0x38	; 56
    135e:	0f b6       	in	r0, 0x3f	; 63
    1360:	f8 94       	cli
    1362:	de bf       	out	0x3e, r29	; 62
    1364:	0f be       	out	0x3f, r0	; 63
    1366:	cd bf       	out	0x3d, r28	; 61
    1368:	cf 91       	pop	r28
    136a:	df 91       	pop	r29
    136c:	08 95       	ret

0000136e <CheckPass>:

u8 CheckPass (void)
{
    136e:	0f 93       	push	r16
    1370:	1f 93       	push	r17
    1372:	df 93       	push	r29
    1374:	cf 93       	push	r28
    1376:	cd b7       	in	r28, 0x3d	; 61
    1378:	de b7       	in	r29, 0x3e	; 62
    137a:	c4 54       	subi	r28, 0x44	; 68
    137c:	d0 40       	sbci	r29, 0x00	; 0
    137e:	0f b6       	in	r0, 0x3f	; 63
    1380:	f8 94       	cli
    1382:	de bf       	out	0x3e, r29	; 62
    1384:	0f be       	out	0x3f, r0	; 63
    1386:	cd bf       	out	0x3d, r28	; 61
	LCD_voidClearScreen();
    1388:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <LCD_voidClearScreen>
	PassIndex = 0 ;
    138c:	10 92 13 02 	sts	0x0213, r1
	u8 Pass[5] , Pin[5];
	LCD_voidMoveCrusor(1,6);
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	66 e0       	ldi	r22, 0x06	; 6
    1394:	0e 94 3b 18 	call	0x3076	; 0x3076 <LCD_voidMoveCrusor>
	LCD_voidDispString("<PIN>");
    1398:	8d e6       	ldi	r24, 0x6D	; 109
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	0e 94 13 1a 	call	0x3426	; 0x3426 <LCD_voidDispString>
	LCD_voidMoveCrusor(2,4);
    13a0:	82 e0       	ldi	r24, 0x02	; 2
    13a2:	64 e0       	ldi	r22, 0x04	; 4
    13a4:	0e 94 3b 18 	call	0x3076	; 0x3076 <LCD_voidMoveCrusor>
	do
	{
		do
		{
			PassKey = Keypad_voidCheckVal(GPIOB);
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <Keypad_voidCheckVal>
    13ae:	80 93 0d 02 	sts	0x020D, r24

		} while (PassKey == NOTPRESSED);
    13b2:	80 91 0d 02 	lds	r24, 0x020D
    13b6:	8f 3f       	cpi	r24, 0xFF	; 255
    13b8:	b9 f3       	breq	.-18     	; 0x13a8 <CheckPass+0x3a>
    13ba:	80 e0       	ldi	r24, 0x00	; 0
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	a8 e4       	ldi	r26, 0x48	; 72
    13c0:	b3 e4       	ldi	r27, 0x43	; 67
    13c2:	8d ab       	std	Y+53, r24	; 0x35
    13c4:	9e ab       	std	Y+54, r25	; 0x36
    13c6:	af ab       	std	Y+55, r26	; 0x37
    13c8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13ca:	6d a9       	ldd	r22, Y+53	; 0x35
    13cc:	7e a9       	ldd	r23, Y+54	; 0x36
    13ce:	8f a9       	ldd	r24, Y+55	; 0x37
    13d0:	98 ad       	ldd	r25, Y+56	; 0x38
    13d2:	20 e0       	ldi	r18, 0x00	; 0
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	4a ef       	ldi	r20, 0xFA	; 250
    13d8:	54 e4       	ldi	r21, 0x44	; 68
    13da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13de:	dc 01       	movw	r26, r24
    13e0:	cb 01       	movw	r24, r22
    13e2:	89 ab       	std	Y+49, r24	; 0x31
    13e4:	9a ab       	std	Y+50, r25	; 0x32
    13e6:	ab ab       	std	Y+51, r26	; 0x33
    13e8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    13ea:	69 a9       	ldd	r22, Y+49	; 0x31
    13ec:	7a a9       	ldd	r23, Y+50	; 0x32
    13ee:	8b a9       	ldd	r24, Y+51	; 0x33
    13f0:	9c a9       	ldd	r25, Y+52	; 0x34
    13f2:	20 e0       	ldi	r18, 0x00	; 0
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	40 e8       	ldi	r20, 0x80	; 128
    13f8:	5f e3       	ldi	r21, 0x3F	; 63
    13fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13fe:	88 23       	and	r24, r24
    1400:	2c f4       	brge	.+10     	; 0x140c <CheckPass+0x9e>
		__ticks = 1;
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	98 ab       	std	Y+48, r25	; 0x30
    1408:	8f a7       	std	Y+47, r24	; 0x2f
    140a:	3f c0       	rjmp	.+126    	; 0x148a <CheckPass+0x11c>
	else if (__tmp > 65535)
    140c:	69 a9       	ldd	r22, Y+49	; 0x31
    140e:	7a a9       	ldd	r23, Y+50	; 0x32
    1410:	8b a9       	ldd	r24, Y+51	; 0x33
    1412:	9c a9       	ldd	r25, Y+52	; 0x34
    1414:	20 e0       	ldi	r18, 0x00	; 0
    1416:	3f ef       	ldi	r19, 0xFF	; 255
    1418:	4f e7       	ldi	r20, 0x7F	; 127
    141a:	57 e4       	ldi	r21, 0x47	; 71
    141c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1420:	18 16       	cp	r1, r24
    1422:	4c f5       	brge	.+82     	; 0x1476 <CheckPass+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1424:	6d a9       	ldd	r22, Y+53	; 0x35
    1426:	7e a9       	ldd	r23, Y+54	; 0x36
    1428:	8f a9       	ldd	r24, Y+55	; 0x37
    142a:	98 ad       	ldd	r25, Y+56	; 0x38
    142c:	20 e0       	ldi	r18, 0x00	; 0
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	40 e2       	ldi	r20, 0x20	; 32
    1432:	51 e4       	ldi	r21, 0x41	; 65
    1434:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1438:	dc 01       	movw	r26, r24
    143a:	cb 01       	movw	r24, r22
    143c:	bc 01       	movw	r22, r24
    143e:	cd 01       	movw	r24, r26
    1440:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1444:	dc 01       	movw	r26, r24
    1446:	cb 01       	movw	r24, r22
    1448:	98 ab       	std	Y+48, r25	; 0x30
    144a:	8f a7       	std	Y+47, r24	; 0x2f
    144c:	0f c0       	rjmp	.+30     	; 0x146c <CheckPass+0xfe>
    144e:	88 ec       	ldi	r24, 0xC8	; 200
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	9e a7       	std	Y+46, r25	; 0x2e
    1454:	8d a7       	std	Y+45, r24	; 0x2d
    1456:	8d a5       	ldd	r24, Y+45	; 0x2d
    1458:	9e a5       	ldd	r25, Y+46	; 0x2e
    145a:	01 97       	sbiw	r24, 0x01	; 1
    145c:	f1 f7       	brne	.-4      	; 0x145a <CheckPass+0xec>
    145e:	9e a7       	std	Y+46, r25	; 0x2e
    1460:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1462:	8f a5       	ldd	r24, Y+47	; 0x2f
    1464:	98 a9       	ldd	r25, Y+48	; 0x30
    1466:	01 97       	sbiw	r24, 0x01	; 1
    1468:	98 ab       	std	Y+48, r25	; 0x30
    146a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    146c:	8f a5       	ldd	r24, Y+47	; 0x2f
    146e:	98 a9       	ldd	r25, Y+48	; 0x30
    1470:	00 97       	sbiw	r24, 0x00	; 0
    1472:	69 f7       	brne	.-38     	; 0x144e <CheckPass+0xe0>
    1474:	14 c0       	rjmp	.+40     	; 0x149e <CheckPass+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1476:	69 a9       	ldd	r22, Y+49	; 0x31
    1478:	7a a9       	ldd	r23, Y+50	; 0x32
    147a:	8b a9       	ldd	r24, Y+51	; 0x33
    147c:	9c a9       	ldd	r25, Y+52	; 0x34
    147e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1482:	dc 01       	movw	r26, r24
    1484:	cb 01       	movw	r24, r22
    1486:	98 ab       	std	Y+48, r25	; 0x30
    1488:	8f a7       	std	Y+47, r24	; 0x2f
    148a:	8f a5       	ldd	r24, Y+47	; 0x2f
    148c:	98 a9       	ldd	r25, Y+48	; 0x30
    148e:	9c a7       	std	Y+44, r25	; 0x2c
    1490:	8b a7       	std	Y+43, r24	; 0x2b
    1492:	8b a5       	ldd	r24, Y+43	; 0x2b
    1494:	9c a5       	ldd	r25, Y+44	; 0x2c
    1496:	01 97       	sbiw	r24, 0x01	; 1
    1498:	f1 f7       	brne	.-4      	; 0x1496 <CheckPass+0x128>
    149a:	9c a7       	std	Y+44, r25	; 0x2c
    149c:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(KEYDELAY);
		LCD_voidDispChar('*');
    149e:	8a e2       	ldi	r24, 0x2A	; 42
    14a0:	0e 94 69 19 	call	0x32d2	; 0x32d2 <LCD_voidDispChar>
		Pass[PassIndex]= (PassKey ^= E_KEY) ;
    14a4:	80 91 13 02 	lds	r24, 0x0213
    14a8:	48 2f       	mov	r20, r24
    14aa:	50 e0       	ldi	r21, 0x00	; 0
    14ac:	90 91 0d 02 	lds	r25, 0x020D
    14b0:	8c ed       	ldi	r24, 0xDC	; 220
    14b2:	89 27       	eor	r24, r25
    14b4:	80 93 0d 02 	sts	0x020D, r24
    14b8:	20 91 0d 02 	lds	r18, 0x020D
    14bc:	ce 01       	movw	r24, r28
    14be:	ca 96       	adiw	r24, 0x3a	; 58
    14c0:	fc 01       	movw	r30, r24
    14c2:	e4 0f       	add	r30, r20
    14c4:	f5 1f       	adc	r31, r21
    14c6:	20 83       	st	Z, r18
		Pin[PassIndex] = ExtEEPROM_voidRead(EEPROM_ADDRESS + PassIndex );
    14c8:	80 91 13 02 	lds	r24, 0x0213
    14cc:	08 2f       	mov	r16, r24
    14ce:	10 e0       	ldi	r17, 0x00	; 0
    14d0:	80 91 13 02 	lds	r24, 0x0213
    14d4:	0e 94 3b 07 	call	0xe76	; 0xe76 <ExtEEPROM_voidRead>
    14d8:	28 2f       	mov	r18, r24
    14da:	ce 01       	movw	r24, r28
    14dc:	cf 96       	adiw	r24, 0x3f	; 63
    14de:	fc 01       	movw	r30, r24
    14e0:	e0 0f       	add	r30, r16
    14e2:	f1 1f       	adc	r31, r17
    14e4:	20 83       	st	Z, r18
		PassIndex ++ ;
    14e6:	80 91 13 02 	lds	r24, 0x0213
    14ea:	8f 5f       	subi	r24, 0xFF	; 255
    14ec:	80 93 13 02 	sts	0x0213, r24
	} while (PassIndex != 5);
    14f0:	80 91 13 02 	lds	r24, 0x0213
    14f4:	85 30       	cpi	r24, 0x05	; 5
    14f6:	09 f0       	breq	.+2      	; 0x14fa <CheckPass+0x18c>
    14f8:	57 cf       	rjmp	.-338    	; 0x13a8 <CheckPass+0x3a>
do{
	do
	{
		PassKey = Keypad_voidCheckVal(GPIOB);
    14fa:	81 e0       	ldi	r24, 0x01	; 1
    14fc:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <Keypad_voidCheckVal>
    1500:	80 93 0d 02 	sts	0x020D, r24

	} while (PassKey == NOTPRESSED);
    1504:	80 91 0d 02 	lds	r24, 0x020D
    1508:	8f 3f       	cpi	r24, 0xFF	; 255
    150a:	b9 f3       	breq	.-18     	; 0x14fa <CheckPass+0x18c>
    150c:	80 e0       	ldi	r24, 0x00	; 0
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	a8 e4       	ldi	r26, 0x48	; 72
    1512:	b3 e4       	ldi	r27, 0x43	; 67
    1514:	8f a3       	std	Y+39, r24	; 0x27
    1516:	98 a7       	std	Y+40, r25	; 0x28
    1518:	a9 a7       	std	Y+41, r26	; 0x29
    151a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    151c:	6f a1       	ldd	r22, Y+39	; 0x27
    151e:	78 a5       	ldd	r23, Y+40	; 0x28
    1520:	89 a5       	ldd	r24, Y+41	; 0x29
    1522:	9a a5       	ldd	r25, Y+42	; 0x2a
    1524:	20 e0       	ldi	r18, 0x00	; 0
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	4a ef       	ldi	r20, 0xFA	; 250
    152a:	54 e4       	ldi	r21, 0x44	; 68
    152c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1530:	dc 01       	movw	r26, r24
    1532:	cb 01       	movw	r24, r22
    1534:	8b a3       	std	Y+35, r24	; 0x23
    1536:	9c a3       	std	Y+36, r25	; 0x24
    1538:	ad a3       	std	Y+37, r26	; 0x25
    153a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    153c:	6b a1       	ldd	r22, Y+35	; 0x23
    153e:	7c a1       	ldd	r23, Y+36	; 0x24
    1540:	8d a1       	ldd	r24, Y+37	; 0x25
    1542:	9e a1       	ldd	r25, Y+38	; 0x26
    1544:	20 e0       	ldi	r18, 0x00	; 0
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	40 e8       	ldi	r20, 0x80	; 128
    154a:	5f e3       	ldi	r21, 0x3F	; 63
    154c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1550:	88 23       	and	r24, r24
    1552:	2c f4       	brge	.+10     	; 0x155e <CheckPass+0x1f0>
		__ticks = 1;
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	9a a3       	std	Y+34, r25	; 0x22
    155a:	89 a3       	std	Y+33, r24	; 0x21
    155c:	3f c0       	rjmp	.+126    	; 0x15dc <CheckPass+0x26e>
	else if (__tmp > 65535)
    155e:	6b a1       	ldd	r22, Y+35	; 0x23
    1560:	7c a1       	ldd	r23, Y+36	; 0x24
    1562:	8d a1       	ldd	r24, Y+37	; 0x25
    1564:	9e a1       	ldd	r25, Y+38	; 0x26
    1566:	20 e0       	ldi	r18, 0x00	; 0
    1568:	3f ef       	ldi	r19, 0xFF	; 255
    156a:	4f e7       	ldi	r20, 0x7F	; 127
    156c:	57 e4       	ldi	r21, 0x47	; 71
    156e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1572:	18 16       	cp	r1, r24
    1574:	4c f5       	brge	.+82     	; 0x15c8 <CheckPass+0x25a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1576:	6f a1       	ldd	r22, Y+39	; 0x27
    1578:	78 a5       	ldd	r23, Y+40	; 0x28
    157a:	89 a5       	ldd	r24, Y+41	; 0x29
    157c:	9a a5       	ldd	r25, Y+42	; 0x2a
    157e:	20 e0       	ldi	r18, 0x00	; 0
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	40 e2       	ldi	r20, 0x20	; 32
    1584:	51 e4       	ldi	r21, 0x41	; 65
    1586:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    158a:	dc 01       	movw	r26, r24
    158c:	cb 01       	movw	r24, r22
    158e:	bc 01       	movw	r22, r24
    1590:	cd 01       	movw	r24, r26
    1592:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1596:	dc 01       	movw	r26, r24
    1598:	cb 01       	movw	r24, r22
    159a:	9a a3       	std	Y+34, r25	; 0x22
    159c:	89 a3       	std	Y+33, r24	; 0x21
    159e:	0f c0       	rjmp	.+30     	; 0x15be <CheckPass+0x250>
    15a0:	88 ec       	ldi	r24, 0xC8	; 200
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	98 a3       	std	Y+32, r25	; 0x20
    15a6:	8f 8f       	std	Y+31, r24	; 0x1f
    15a8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    15aa:	98 a1       	ldd	r25, Y+32	; 0x20
    15ac:	01 97       	sbiw	r24, 0x01	; 1
    15ae:	f1 f7       	brne	.-4      	; 0x15ac <CheckPass+0x23e>
    15b0:	98 a3       	std	Y+32, r25	; 0x20
    15b2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15b4:	89 a1       	ldd	r24, Y+33	; 0x21
    15b6:	9a a1       	ldd	r25, Y+34	; 0x22
    15b8:	01 97       	sbiw	r24, 0x01	; 1
    15ba:	9a a3       	std	Y+34, r25	; 0x22
    15bc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15be:	89 a1       	ldd	r24, Y+33	; 0x21
    15c0:	9a a1       	ldd	r25, Y+34	; 0x22
    15c2:	00 97       	sbiw	r24, 0x00	; 0
    15c4:	69 f7       	brne	.-38     	; 0x15a0 <CheckPass+0x232>
    15c6:	14 c0       	rjmp	.+40     	; 0x15f0 <CheckPass+0x282>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15c8:	6b a1       	ldd	r22, Y+35	; 0x23
    15ca:	7c a1       	ldd	r23, Y+36	; 0x24
    15cc:	8d a1       	ldd	r24, Y+37	; 0x25
    15ce:	9e a1       	ldd	r25, Y+38	; 0x26
    15d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15d4:	dc 01       	movw	r26, r24
    15d6:	cb 01       	movw	r24, r22
    15d8:	9a a3       	std	Y+34, r25	; 0x22
    15da:	89 a3       	std	Y+33, r24	; 0x21
    15dc:	89 a1       	ldd	r24, Y+33	; 0x21
    15de:	9a a1       	ldd	r25, Y+34	; 0x22
    15e0:	9e 8f       	std	Y+30, r25	; 0x1e
    15e2:	8d 8f       	std	Y+29, r24	; 0x1d
    15e4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    15e6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    15e8:	01 97       	sbiw	r24, 0x01	; 1
    15ea:	f1 f7       	brne	.-4      	; 0x15e8 <CheckPass+0x27a>
    15ec:	9e 8f       	std	Y+30, r25	; 0x1e
    15ee:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(KEYDELAY);

	if (PassKey == 'A')
    15f0:	80 91 0d 02 	lds	r24, 0x020D
    15f4:	81 34       	cpi	r24, 0x41	; 65
    15f6:	09 f0       	breq	.+2      	; 0x15fa <CheckPass+0x28c>
    15f8:	20 c1       	rjmp	.+576    	; 0x183a <CheckPass+0x4cc>
	{
		LCD_voidClearScreen();
    15fa:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <LCD_voidClearScreen>
		LCD_voidMoveCrusor(1,3);
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	63 e0       	ldi	r22, 0x03	; 3
    1602:	0e 94 3b 18 	call	0x3076	; 0x3076 <LCD_voidMoveCrusor>
		if (Pass[0]==Pin[0] && Pass[1]==Pin[1] && Pass[2]==Pin[2] && Pass[3]==Pin[3] && Pass[4]==Pin[4] )
    1606:	9a ad       	ldd	r25, Y+58	; 0x3a
    1608:	8f ad       	ldd	r24, Y+63	; 0x3f
    160a:	98 17       	cp	r25, r24
    160c:	09 f0       	breq	.+2      	; 0x1610 <CheckPass+0x2a2>
    160e:	9b c0       	rjmp	.+310    	; 0x1746 <CheckPass+0x3d8>
    1610:	8b ad       	ldd	r24, Y+59	; 0x3b
    1612:	fe 01       	movw	r30, r28
    1614:	e0 5c       	subi	r30, 0xC0	; 192
    1616:	ff 4f       	sbci	r31, 0xFF	; 255
    1618:	90 81       	ld	r25, Z
    161a:	89 17       	cp	r24, r25
    161c:	09 f0       	breq	.+2      	; 0x1620 <CheckPass+0x2b2>
    161e:	93 c0       	rjmp	.+294    	; 0x1746 <CheckPass+0x3d8>
    1620:	8c ad       	ldd	r24, Y+60	; 0x3c
    1622:	fe 01       	movw	r30, r28
    1624:	ef 5b       	subi	r30, 0xBF	; 191
    1626:	ff 4f       	sbci	r31, 0xFF	; 255
    1628:	90 81       	ld	r25, Z
    162a:	89 17       	cp	r24, r25
    162c:	09 f0       	breq	.+2      	; 0x1630 <CheckPass+0x2c2>
    162e:	8b c0       	rjmp	.+278    	; 0x1746 <CheckPass+0x3d8>
    1630:	8d ad       	ldd	r24, Y+61	; 0x3d
    1632:	fe 01       	movw	r30, r28
    1634:	ee 5b       	subi	r30, 0xBE	; 190
    1636:	ff 4f       	sbci	r31, 0xFF	; 255
    1638:	90 81       	ld	r25, Z
    163a:	89 17       	cp	r24, r25
    163c:	09 f0       	breq	.+2      	; 0x1640 <CheckPass+0x2d2>
    163e:	83 c0       	rjmp	.+262    	; 0x1746 <CheckPass+0x3d8>
    1640:	8e ad       	ldd	r24, Y+62	; 0x3e
    1642:	fe 01       	movw	r30, r28
    1644:	ed 5b       	subi	r30, 0xBD	; 189
    1646:	ff 4f       	sbci	r31, 0xFF	; 255
    1648:	90 81       	ld	r25, Z
    164a:	89 17       	cp	r24, r25
    164c:	09 f0       	breq	.+2      	; 0x1650 <CheckPass+0x2e2>
    164e:	7b c0       	rjmp	.+246    	; 0x1746 <CheckPass+0x3d8>
		{
			LCD_voidDispString("PASS IS Correct");
    1650:	8f e7       	ldi	r24, 0x7F	; 127
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	0e 94 13 1a 	call	0x3426	; 0x3426 <LCD_voidDispString>
    1658:	80 e0       	ldi	r24, 0x00	; 0
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	aa ef       	ldi	r26, 0xFA	; 250
    165e:	b3 e4       	ldi	r27, 0x43	; 67
    1660:	89 8f       	std	Y+25, r24	; 0x19
    1662:	9a 8f       	std	Y+26, r25	; 0x1a
    1664:	ab 8f       	std	Y+27, r26	; 0x1b
    1666:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1668:	69 8d       	ldd	r22, Y+25	; 0x19
    166a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    166c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    166e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1670:	20 e0       	ldi	r18, 0x00	; 0
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	4a ef       	ldi	r20, 0xFA	; 250
    1676:	54 e4       	ldi	r21, 0x44	; 68
    1678:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    167c:	dc 01       	movw	r26, r24
    167e:	cb 01       	movw	r24, r22
    1680:	8d 8b       	std	Y+21, r24	; 0x15
    1682:	9e 8b       	std	Y+22, r25	; 0x16
    1684:	af 8b       	std	Y+23, r26	; 0x17
    1686:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1688:	6d 89       	ldd	r22, Y+21	; 0x15
    168a:	7e 89       	ldd	r23, Y+22	; 0x16
    168c:	8f 89       	ldd	r24, Y+23	; 0x17
    168e:	98 8d       	ldd	r25, Y+24	; 0x18
    1690:	20 e0       	ldi	r18, 0x00	; 0
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	40 e8       	ldi	r20, 0x80	; 128
    1696:	5f e3       	ldi	r21, 0x3F	; 63
    1698:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    169c:	88 23       	and	r24, r24
    169e:	2c f4       	brge	.+10     	; 0x16aa <CheckPass+0x33c>
		__ticks = 1;
    16a0:	81 e0       	ldi	r24, 0x01	; 1
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	9c 8b       	std	Y+20, r25	; 0x14
    16a6:	8b 8b       	std	Y+19, r24	; 0x13
    16a8:	3f c0       	rjmp	.+126    	; 0x1728 <CheckPass+0x3ba>
	else if (__tmp > 65535)
    16aa:	6d 89       	ldd	r22, Y+21	; 0x15
    16ac:	7e 89       	ldd	r23, Y+22	; 0x16
    16ae:	8f 89       	ldd	r24, Y+23	; 0x17
    16b0:	98 8d       	ldd	r25, Y+24	; 0x18
    16b2:	20 e0       	ldi	r18, 0x00	; 0
    16b4:	3f ef       	ldi	r19, 0xFF	; 255
    16b6:	4f e7       	ldi	r20, 0x7F	; 127
    16b8:	57 e4       	ldi	r21, 0x47	; 71
    16ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16be:	18 16       	cp	r1, r24
    16c0:	4c f5       	brge	.+82     	; 0x1714 <CheckPass+0x3a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16c2:	69 8d       	ldd	r22, Y+25	; 0x19
    16c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16ca:	20 e0       	ldi	r18, 0x00	; 0
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	40 e2       	ldi	r20, 0x20	; 32
    16d0:	51 e4       	ldi	r21, 0x41	; 65
    16d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16d6:	dc 01       	movw	r26, r24
    16d8:	cb 01       	movw	r24, r22
    16da:	bc 01       	movw	r22, r24
    16dc:	cd 01       	movw	r24, r26
    16de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16e2:	dc 01       	movw	r26, r24
    16e4:	cb 01       	movw	r24, r22
    16e6:	9c 8b       	std	Y+20, r25	; 0x14
    16e8:	8b 8b       	std	Y+19, r24	; 0x13
    16ea:	0f c0       	rjmp	.+30     	; 0x170a <CheckPass+0x39c>
    16ec:	88 ec       	ldi	r24, 0xC8	; 200
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	9a 8b       	std	Y+18, r25	; 0x12
    16f2:	89 8b       	std	Y+17, r24	; 0x11
    16f4:	89 89       	ldd	r24, Y+17	; 0x11
    16f6:	9a 89       	ldd	r25, Y+18	; 0x12
    16f8:	01 97       	sbiw	r24, 0x01	; 1
    16fa:	f1 f7       	brne	.-4      	; 0x16f8 <CheckPass+0x38a>
    16fc:	9a 8b       	std	Y+18, r25	; 0x12
    16fe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1700:	8b 89       	ldd	r24, Y+19	; 0x13
    1702:	9c 89       	ldd	r25, Y+20	; 0x14
    1704:	01 97       	sbiw	r24, 0x01	; 1
    1706:	9c 8b       	std	Y+20, r25	; 0x14
    1708:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    170a:	8b 89       	ldd	r24, Y+19	; 0x13
    170c:	9c 89       	ldd	r25, Y+20	; 0x14
    170e:	00 97       	sbiw	r24, 0x00	; 0
    1710:	69 f7       	brne	.-38     	; 0x16ec <CheckPass+0x37e>
    1712:	14 c0       	rjmp	.+40     	; 0x173c <CheckPass+0x3ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1714:	6d 89       	ldd	r22, Y+21	; 0x15
    1716:	7e 89       	ldd	r23, Y+22	; 0x16
    1718:	8f 89       	ldd	r24, Y+23	; 0x17
    171a:	98 8d       	ldd	r25, Y+24	; 0x18
    171c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1720:	dc 01       	movw	r26, r24
    1722:	cb 01       	movw	r24, r22
    1724:	9c 8b       	std	Y+20, r25	; 0x14
    1726:	8b 8b       	std	Y+19, r24	; 0x13
    1728:	8b 89       	ldd	r24, Y+19	; 0x13
    172a:	9c 89       	ldd	r25, Y+20	; 0x14
    172c:	98 8b       	std	Y+16, r25	; 0x10
    172e:	8f 87       	std	Y+15, r24	; 0x0f
    1730:	8f 85       	ldd	r24, Y+15	; 0x0f
    1732:	98 89       	ldd	r25, Y+16	; 0x10
    1734:	01 97       	sbiw	r24, 0x01	; 1
    1736:	f1 f7       	brne	.-4      	; 0x1734 <CheckPass+0x3c6>
    1738:	98 8b       	std	Y+16, r25	; 0x10
    173a:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(500);
			return 1 ;
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	25 96       	adiw	r28, 0x05	; 5
    1740:	8f af       	std	Y+63, r24	; 0x3f
    1742:	25 97       	sbiw	r28, 0x05	; 5
    1744:	88 c0       	rjmp	.+272    	; 0x1856 <CheckPass+0x4e8>
		}
		else
		{
		LCD_voidDispString("PASS IS Wrong");
    1746:	8f e8       	ldi	r24, 0x8F	; 143
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	0e 94 13 1a 	call	0x3426	; 0x3426 <LCD_voidDispString>
    174e:	80 e0       	ldi	r24, 0x00	; 0
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	aa ef       	ldi	r26, 0xFA	; 250
    1754:	b3 e4       	ldi	r27, 0x43	; 67
    1756:	8b 87       	std	Y+11, r24	; 0x0b
    1758:	9c 87       	std	Y+12, r25	; 0x0c
    175a:	ad 87       	std	Y+13, r26	; 0x0d
    175c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    175e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1760:	7c 85       	ldd	r23, Y+12	; 0x0c
    1762:	8d 85       	ldd	r24, Y+13	; 0x0d
    1764:	9e 85       	ldd	r25, Y+14	; 0x0e
    1766:	20 e0       	ldi	r18, 0x00	; 0
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	4a ef       	ldi	r20, 0xFA	; 250
    176c:	54 e4       	ldi	r21, 0x44	; 68
    176e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1772:	dc 01       	movw	r26, r24
    1774:	cb 01       	movw	r24, r22
    1776:	8f 83       	std	Y+7, r24	; 0x07
    1778:	98 87       	std	Y+8, r25	; 0x08
    177a:	a9 87       	std	Y+9, r26	; 0x09
    177c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    177e:	6f 81       	ldd	r22, Y+7	; 0x07
    1780:	78 85       	ldd	r23, Y+8	; 0x08
    1782:	89 85       	ldd	r24, Y+9	; 0x09
    1784:	9a 85       	ldd	r25, Y+10	; 0x0a
    1786:	20 e0       	ldi	r18, 0x00	; 0
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	40 e8       	ldi	r20, 0x80	; 128
    178c:	5f e3       	ldi	r21, 0x3F	; 63
    178e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1792:	88 23       	and	r24, r24
    1794:	2c f4       	brge	.+10     	; 0x17a0 <CheckPass+0x432>
		__ticks = 1;
    1796:	81 e0       	ldi	r24, 0x01	; 1
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	9e 83       	std	Y+6, r25	; 0x06
    179c:	8d 83       	std	Y+5, r24	; 0x05
    179e:	3f c0       	rjmp	.+126    	; 0x181e <CheckPass+0x4b0>
	else if (__tmp > 65535)
    17a0:	6f 81       	ldd	r22, Y+7	; 0x07
    17a2:	78 85       	ldd	r23, Y+8	; 0x08
    17a4:	89 85       	ldd	r24, Y+9	; 0x09
    17a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    17a8:	20 e0       	ldi	r18, 0x00	; 0
    17aa:	3f ef       	ldi	r19, 0xFF	; 255
    17ac:	4f e7       	ldi	r20, 0x7F	; 127
    17ae:	57 e4       	ldi	r21, 0x47	; 71
    17b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17b4:	18 16       	cp	r1, r24
    17b6:	4c f5       	brge	.+82     	; 0x180a <CheckPass+0x49c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    17ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    17bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    17be:	9e 85       	ldd	r25, Y+14	; 0x0e
    17c0:	20 e0       	ldi	r18, 0x00	; 0
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	40 e2       	ldi	r20, 0x20	; 32
    17c6:	51 e4       	ldi	r21, 0x41	; 65
    17c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17cc:	dc 01       	movw	r26, r24
    17ce:	cb 01       	movw	r24, r22
    17d0:	bc 01       	movw	r22, r24
    17d2:	cd 01       	movw	r24, r26
    17d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17d8:	dc 01       	movw	r26, r24
    17da:	cb 01       	movw	r24, r22
    17dc:	9e 83       	std	Y+6, r25	; 0x06
    17de:	8d 83       	std	Y+5, r24	; 0x05
    17e0:	0f c0       	rjmp	.+30     	; 0x1800 <CheckPass+0x492>
    17e2:	88 ec       	ldi	r24, 0xC8	; 200
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	9c 83       	std	Y+4, r25	; 0x04
    17e8:	8b 83       	std	Y+3, r24	; 0x03
    17ea:	8b 81       	ldd	r24, Y+3	; 0x03
    17ec:	9c 81       	ldd	r25, Y+4	; 0x04
    17ee:	01 97       	sbiw	r24, 0x01	; 1
    17f0:	f1 f7       	brne	.-4      	; 0x17ee <CheckPass+0x480>
    17f2:	9c 83       	std	Y+4, r25	; 0x04
    17f4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17f6:	8d 81       	ldd	r24, Y+5	; 0x05
    17f8:	9e 81       	ldd	r25, Y+6	; 0x06
    17fa:	01 97       	sbiw	r24, 0x01	; 1
    17fc:	9e 83       	std	Y+6, r25	; 0x06
    17fe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1800:	8d 81       	ldd	r24, Y+5	; 0x05
    1802:	9e 81       	ldd	r25, Y+6	; 0x06
    1804:	00 97       	sbiw	r24, 0x00	; 0
    1806:	69 f7       	brne	.-38     	; 0x17e2 <CheckPass+0x474>
    1808:	14 c0       	rjmp	.+40     	; 0x1832 <CheckPass+0x4c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    180a:	6f 81       	ldd	r22, Y+7	; 0x07
    180c:	78 85       	ldd	r23, Y+8	; 0x08
    180e:	89 85       	ldd	r24, Y+9	; 0x09
    1810:	9a 85       	ldd	r25, Y+10	; 0x0a
    1812:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1816:	dc 01       	movw	r26, r24
    1818:	cb 01       	movw	r24, r22
    181a:	9e 83       	std	Y+6, r25	; 0x06
    181c:	8d 83       	std	Y+5, r24	; 0x05
    181e:	8d 81       	ldd	r24, Y+5	; 0x05
    1820:	9e 81       	ldd	r25, Y+6	; 0x06
    1822:	9a 83       	std	Y+2, r25	; 0x02
    1824:	89 83       	std	Y+1, r24	; 0x01
    1826:	89 81       	ldd	r24, Y+1	; 0x01
    1828:	9a 81       	ldd	r25, Y+2	; 0x02
    182a:	01 97       	sbiw	r24, 0x01	; 1
    182c:	f1 f7       	brne	.-4      	; 0x182a <CheckPass+0x4bc>
    182e:	9a 83       	std	Y+2, r25	; 0x02
    1830:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		return 0 ;
    1832:	25 96       	adiw	r28, 0x05	; 5
    1834:	1f ae       	std	Y+63, r1	; 0x3f
    1836:	25 97       	sbiw	r28, 0x05	; 5
    1838:	0e c0       	rjmp	.+28     	; 0x1856 <CheckPass+0x4e8>
		}
	}
	else if (PassKey == '=')
    183a:	80 91 0d 02 	lds	r24, 0x020D
    183e:	8d 33       	cpi	r24, 0x3D	; 61
    1840:	09 f0       	breq	.+2      	; 0x1844 <CheckPass+0x4d6>
    1842:	5b ce       	rjmp	.-842    	; 0x14fa <CheckPass+0x18c>
	{
		LCD_voidClearScreen();
    1844:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <LCD_voidClearScreen>
		u8 r ;
		r = CheckPass() ;
    1848:	0e 94 b7 09 	call	0x136e	; 0x136e <CheckPass>
    184c:	89 af       	std	Y+57, r24	; 0x39
		return  r ;
    184e:	89 ad       	ldd	r24, Y+57	; 0x39
    1850:	25 96       	adiw	r28, 0x05	; 5
    1852:	8f af       	std	Y+63, r24	; 0x3f
    1854:	25 97       	sbiw	r28, 0x05	; 5
	}
	}while (PassKey != 'A' || '=');
    1856:	25 96       	adiw	r28, 0x05	; 5
    1858:	8f ad       	ldd	r24, Y+63	; 0x3f
    185a:	25 97       	sbiw	r28, 0x05	; 5


}
    185c:	cc 5b       	subi	r28, 0xBC	; 188
    185e:	df 4f       	sbci	r29, 0xFF	; 255
    1860:	0f b6       	in	r0, 0x3f	; 63
    1862:	f8 94       	cli
    1864:	de bf       	out	0x3e, r29	; 62
    1866:	0f be       	out	0x3f, r0	; 63
    1868:	cd bf       	out	0x3d, r28	; 61
    186a:	cf 91       	pop	r28
    186c:	df 91       	pop	r29
    186e:	1f 91       	pop	r17
    1870:	0f 91       	pop	r16
    1872:	08 95       	ret

00001874 <Wrongpass>:

void Wrongpass (void)
{
    1874:	df 93       	push	r29
    1876:	cf 93       	push	r28
    1878:	cd b7       	in	r28, 0x3d	; 61
    187a:	de b7       	in	r29, 0x3e	; 62
    187c:	2f 97       	sbiw	r28, 0x0f	; 15
    187e:	0f b6       	in	r0, 0x3f	; 63
    1880:	f8 94       	cli
    1882:	de bf       	out	0x3e, r29	; 62
    1884:	0f be       	out	0x3f, r0	; 63
    1886:	cd bf       	out	0x3d, r28	; 61
	u8 try ;
	try = ExtEEPROM_voidRead(TRY_ADDRESS);
    1888:	85 e0       	ldi	r24, 0x05	; 5
    188a:	0e 94 3b 07 	call	0xe76	; 0xe76 <ExtEEPROM_voidRead>
    188e:	8f 87       	std	Y+15, r24	; 0x0f
	try -- ;
    1890:	8f 85       	ldd	r24, Y+15	; 0x0f
    1892:	81 50       	subi	r24, 0x01	; 1
    1894:	8f 87       	std	Y+15, r24	; 0x0f
	ExtEEPROM_voidWrite(TRY_ADDRESS , try );
    1896:	85 e0       	ldi	r24, 0x05	; 5
    1898:	6f 85       	ldd	r22, Y+15	; 0x0f
    189a:	0e 94 22 07 	call	0xe44	; 0xe44 <ExtEEPROM_voidWrite>
	I2Cfun_voidMasterSend(SLAVE,try);
    189e:	8c ec       	ldi	r24, 0xCC	; 204
    18a0:	6f 85       	ldd	r22, Y+15	; 0x0f
    18a2:	0e 94 32 13 	call	0x2664	; 0x2664 <I2Cfun_voidMasterSend>
	LCD_voidClearScreen();
    18a6:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <LCD_voidClearScreen>
	LCD_voidMoveCrusor(1,1);
    18aa:	81 e0       	ldi	r24, 0x01	; 1
    18ac:	61 e0       	ldi	r22, 0x01	; 1
    18ae:	0e 94 3b 18 	call	0x3076	; 0x3076 <LCD_voidMoveCrusor>
	LCD_voidDispString("You have");
    18b2:	8d e9       	ldi	r24, 0x9D	; 157
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	0e 94 13 1a 	call	0x3426	; 0x3426 <LCD_voidDispString>
	LCD_voidMoveCrusor(2,1);
    18ba:	82 e0       	ldi	r24, 0x02	; 2
    18bc:	61 e0       	ldi	r22, 0x01	; 1
    18be:	0e 94 3b 18 	call	0x3076	; 0x3076 <LCD_voidMoveCrusor>
	LCD_voidDispNumber(try);
    18c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    18c4:	88 2f       	mov	r24, r24
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	a0 e0       	ldi	r26, 0x00	; 0
    18ca:	b0 e0       	ldi	r27, 0x00	; 0
    18cc:	bc 01       	movw	r22, r24
    18ce:	cd 01       	movw	r24, r26
    18d0:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__floatunsisf>
    18d4:	dc 01       	movw	r26, r24
    18d6:	cb 01       	movw	r24, r22
    18d8:	bc 01       	movw	r22, r24
    18da:	cd 01       	movw	r24, r26
    18dc:	0e 94 2f 1a 	call	0x345e	; 0x345e <LCD_voidDispNumber>
	LCD_voidMoveCrusor(2,3);
    18e0:	82 e0       	ldi	r24, 0x02	; 2
    18e2:	63 e0       	ldi	r22, 0x03	; 3
    18e4:	0e 94 3b 18 	call	0x3076	; 0x3076 <LCD_voidMoveCrusor>
	LCD_voidDispString("Tries left");
    18e8:	86 ea       	ldi	r24, 0xA6	; 166
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	0e 94 13 1a 	call	0x3426	; 0x3426 <LCD_voidDispString>
    18f0:	80 e0       	ldi	r24, 0x00	; 0
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	aa ef       	ldi	r26, 0xFA	; 250
    18f6:	b4 e4       	ldi	r27, 0x44	; 68
    18f8:	8b 87       	std	Y+11, r24	; 0x0b
    18fa:	9c 87       	std	Y+12, r25	; 0x0c
    18fc:	ad 87       	std	Y+13, r26	; 0x0d
    18fe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1900:	6b 85       	ldd	r22, Y+11	; 0x0b
    1902:	7c 85       	ldd	r23, Y+12	; 0x0c
    1904:	8d 85       	ldd	r24, Y+13	; 0x0d
    1906:	9e 85       	ldd	r25, Y+14	; 0x0e
    1908:	20 e0       	ldi	r18, 0x00	; 0
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	4a ef       	ldi	r20, 0xFA	; 250
    190e:	54 e4       	ldi	r21, 0x44	; 68
    1910:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1914:	dc 01       	movw	r26, r24
    1916:	cb 01       	movw	r24, r22
    1918:	8f 83       	std	Y+7, r24	; 0x07
    191a:	98 87       	std	Y+8, r25	; 0x08
    191c:	a9 87       	std	Y+9, r26	; 0x09
    191e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1920:	6f 81       	ldd	r22, Y+7	; 0x07
    1922:	78 85       	ldd	r23, Y+8	; 0x08
    1924:	89 85       	ldd	r24, Y+9	; 0x09
    1926:	9a 85       	ldd	r25, Y+10	; 0x0a
    1928:	20 e0       	ldi	r18, 0x00	; 0
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	40 e8       	ldi	r20, 0x80	; 128
    192e:	5f e3       	ldi	r21, 0x3F	; 63
    1930:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1934:	88 23       	and	r24, r24
    1936:	2c f4       	brge	.+10     	; 0x1942 <Wrongpass+0xce>
		__ticks = 1;
    1938:	81 e0       	ldi	r24, 0x01	; 1
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	9e 83       	std	Y+6, r25	; 0x06
    193e:	8d 83       	std	Y+5, r24	; 0x05
    1940:	3f c0       	rjmp	.+126    	; 0x19c0 <Wrongpass+0x14c>
	else if (__tmp > 65535)
    1942:	6f 81       	ldd	r22, Y+7	; 0x07
    1944:	78 85       	ldd	r23, Y+8	; 0x08
    1946:	89 85       	ldd	r24, Y+9	; 0x09
    1948:	9a 85       	ldd	r25, Y+10	; 0x0a
    194a:	20 e0       	ldi	r18, 0x00	; 0
    194c:	3f ef       	ldi	r19, 0xFF	; 255
    194e:	4f e7       	ldi	r20, 0x7F	; 127
    1950:	57 e4       	ldi	r21, 0x47	; 71
    1952:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1956:	18 16       	cp	r1, r24
    1958:	4c f5       	brge	.+82     	; 0x19ac <Wrongpass+0x138>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    195a:	6b 85       	ldd	r22, Y+11	; 0x0b
    195c:	7c 85       	ldd	r23, Y+12	; 0x0c
    195e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1960:	9e 85       	ldd	r25, Y+14	; 0x0e
    1962:	20 e0       	ldi	r18, 0x00	; 0
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	40 e2       	ldi	r20, 0x20	; 32
    1968:	51 e4       	ldi	r21, 0x41	; 65
    196a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    196e:	dc 01       	movw	r26, r24
    1970:	cb 01       	movw	r24, r22
    1972:	bc 01       	movw	r22, r24
    1974:	cd 01       	movw	r24, r26
    1976:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    197a:	dc 01       	movw	r26, r24
    197c:	cb 01       	movw	r24, r22
    197e:	9e 83       	std	Y+6, r25	; 0x06
    1980:	8d 83       	std	Y+5, r24	; 0x05
    1982:	0f c0       	rjmp	.+30     	; 0x19a2 <Wrongpass+0x12e>
    1984:	88 ec       	ldi	r24, 0xC8	; 200
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	9c 83       	std	Y+4, r25	; 0x04
    198a:	8b 83       	std	Y+3, r24	; 0x03
    198c:	8b 81       	ldd	r24, Y+3	; 0x03
    198e:	9c 81       	ldd	r25, Y+4	; 0x04
    1990:	01 97       	sbiw	r24, 0x01	; 1
    1992:	f1 f7       	brne	.-4      	; 0x1990 <Wrongpass+0x11c>
    1994:	9c 83       	std	Y+4, r25	; 0x04
    1996:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1998:	8d 81       	ldd	r24, Y+5	; 0x05
    199a:	9e 81       	ldd	r25, Y+6	; 0x06
    199c:	01 97       	sbiw	r24, 0x01	; 1
    199e:	9e 83       	std	Y+6, r25	; 0x06
    19a0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19a2:	8d 81       	ldd	r24, Y+5	; 0x05
    19a4:	9e 81       	ldd	r25, Y+6	; 0x06
    19a6:	00 97       	sbiw	r24, 0x00	; 0
    19a8:	69 f7       	brne	.-38     	; 0x1984 <Wrongpass+0x110>
    19aa:	14 c0       	rjmp	.+40     	; 0x19d4 <Wrongpass+0x160>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19ac:	6f 81       	ldd	r22, Y+7	; 0x07
    19ae:	78 85       	ldd	r23, Y+8	; 0x08
    19b0:	89 85       	ldd	r24, Y+9	; 0x09
    19b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    19b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19b8:	dc 01       	movw	r26, r24
    19ba:	cb 01       	movw	r24, r22
    19bc:	9e 83       	std	Y+6, r25	; 0x06
    19be:	8d 83       	std	Y+5, r24	; 0x05
    19c0:	8d 81       	ldd	r24, Y+5	; 0x05
    19c2:	9e 81       	ldd	r25, Y+6	; 0x06
    19c4:	9a 83       	std	Y+2, r25	; 0x02
    19c6:	89 83       	std	Y+1, r24	; 0x01
    19c8:	89 81       	ldd	r24, Y+1	; 0x01
    19ca:	9a 81       	ldd	r25, Y+2	; 0x02
    19cc:	01 97       	sbiw	r24, 0x01	; 1
    19ce:	f1 f7       	brne	.-4      	; 0x19cc <Wrongpass+0x158>
    19d0:	9a 83       	std	Y+2, r25	; 0x02
    19d2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2000);
	LCD_voidClearScreen();
    19d4:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <LCD_voidClearScreen>
}
    19d8:	2f 96       	adiw	r28, 0x0f	; 15
    19da:	0f b6       	in	r0, 0x3f	; 63
    19dc:	f8 94       	cli
    19de:	de bf       	out	0x3e, r29	; 62
    19e0:	0f be       	out	0x3f, r0	; 63
    19e2:	cd bf       	out	0x3d, r28	; 61
    19e4:	cf 91       	pop	r28
    19e6:	df 91       	pop	r29
    19e8:	08 95       	ret

000019ea <LockedOut>:

void LockedOut (void)
{
    19ea:	df 93       	push	r29
    19ec:	cf 93       	push	r28
    19ee:	cd b7       	in	r28, 0x3d	; 61
    19f0:	de b7       	in	r29, 0x3e	; 62
	USART_voidSendByte(0);
    19f2:	80 e0       	ldi	r24, 0x00	; 0
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	0e 94 8f 1b 	call	0x371e	; 0x371e <USART_voidSendByte>
	LCD_voidClearScreen();
    19fa:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <LCD_voidClearScreen>
	LCD_voidMoveCrusor(1,1);
    19fe:	81 e0       	ldi	r24, 0x01	; 1
    1a00:	61 e0       	ldi	r22, 0x01	; 1
    1a02:	0e 94 3b 18 	call	0x3076	; 0x3076 <LCD_voidMoveCrusor>
	LCD_voidDispString("YOU ARE LOCKED");
    1a06:	81 eb       	ldi	r24, 0xB1	; 177
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	0e 94 13 1a 	call	0x3426	; 0x3426 <LCD_voidDispString>
	LCD_voidMoveCrusor(2,1);
    1a0e:	82 e0       	ldi	r24, 0x02	; 2
    1a10:	61 e0       	ldi	r22, 0x01	; 1
    1a12:	0e 94 3b 18 	call	0x3076	; 0x3076 <LCD_voidMoveCrusor>
	LCD_voidDispString("Contact Service");
    1a16:	80 ec       	ldi	r24, 0xC0	; 192
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	0e 94 13 1a 	call	0x3426	; 0x3426 <LCD_voidDispString>
	I2Cfun_voidMasterSend(SLAVE , 7);
    1a1e:	8c ec       	ldi	r24, 0xCC	; 204
    1a20:	67 e0       	ldi	r22, 0x07	; 7
    1a22:	0e 94 32 13 	call	0x2664	; 0x2664 <I2Cfun_voidMasterSend>

}
    1a26:	cf 91       	pop	r28
    1a28:	df 91       	pop	r29
    1a2a:	08 95       	ret

00001a2c <GPIO_voidSetPinDDR>:




	void GPIO_voidSetPinDDR (u8  copy_u8Port ,u8 copy_u8Pin , u8 copy_u8Mode )
	{
    1a2c:	df 93       	push	r29
    1a2e:	cf 93       	push	r28
    1a30:	00 d0       	rcall	.+0      	; 0x1a32 <GPIO_voidSetPinDDR+0x6>
    1a32:	00 d0       	rcall	.+0      	; 0x1a34 <GPIO_voidSetPinDDR+0x8>
    1a34:	0f 92       	push	r0
    1a36:	cd b7       	in	r28, 0x3d	; 61
    1a38:	de b7       	in	r29, 0x3e	; 62
    1a3a:	89 83       	std	Y+1, r24	; 0x01
    1a3c:	6a 83       	std	Y+2, r22	; 0x02
    1a3e:	4b 83       	std	Y+3, r20	; 0x03
		switch(copy_u8Port)
    1a40:	89 81       	ldd	r24, Y+1	; 0x01
    1a42:	28 2f       	mov	r18, r24
    1a44:	30 e0       	ldi	r19, 0x00	; 0
    1a46:	3d 83       	std	Y+5, r19	; 0x05
    1a48:	2c 83       	std	Y+4, r18	; 0x04
    1a4a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a4c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a4e:	81 30       	cpi	r24, 0x01	; 1
    1a50:	91 05       	cpc	r25, r1
    1a52:	09 f4       	brne	.+2      	; 0x1a56 <GPIO_voidSetPinDDR+0x2a>
    1a54:	43 c0       	rjmp	.+134    	; 0x1adc <GPIO_voidSetPinDDR+0xb0>
    1a56:	2c 81       	ldd	r18, Y+4	; 0x04
    1a58:	3d 81       	ldd	r19, Y+5	; 0x05
    1a5a:	22 30       	cpi	r18, 0x02	; 2
    1a5c:	31 05       	cpc	r19, r1
    1a5e:	2c f4       	brge	.+10     	; 0x1a6a <GPIO_voidSetPinDDR+0x3e>
    1a60:	8c 81       	ldd	r24, Y+4	; 0x04
    1a62:	9d 81       	ldd	r25, Y+5	; 0x05
    1a64:	00 97       	sbiw	r24, 0x00	; 0
    1a66:	71 f0       	breq	.+28     	; 0x1a84 <GPIO_voidSetPinDDR+0x58>
    1a68:	bc c0       	rjmp	.+376    	; 0x1be2 <GPIO_voidSetPinDDR+0x1b6>
    1a6a:	2c 81       	ldd	r18, Y+4	; 0x04
    1a6c:	3d 81       	ldd	r19, Y+5	; 0x05
    1a6e:	22 30       	cpi	r18, 0x02	; 2
    1a70:	31 05       	cpc	r19, r1
    1a72:	09 f4       	brne	.+2      	; 0x1a76 <GPIO_voidSetPinDDR+0x4a>
    1a74:	5f c0       	rjmp	.+190    	; 0x1b34 <GPIO_voidSetPinDDR+0x108>
    1a76:	8c 81       	ldd	r24, Y+4	; 0x04
    1a78:	9d 81       	ldd	r25, Y+5	; 0x05
    1a7a:	83 30       	cpi	r24, 0x03	; 3
    1a7c:	91 05       	cpc	r25, r1
    1a7e:	09 f4       	brne	.+2      	; 0x1a82 <GPIO_voidSetPinDDR+0x56>
    1a80:	85 c0       	rjmp	.+266    	; 0x1b8c <GPIO_voidSetPinDDR+0x160>
    1a82:	af c0       	rjmp	.+350    	; 0x1be2 <GPIO_voidSetPinDDR+0x1b6>
		{
			case GPIOA :
				if(copy_u8Mode ==OUTPUT )
    1a84:	8b 81       	ldd	r24, Y+3	; 0x03
    1a86:	81 30       	cpi	r24, 0x01	; 1
    1a88:	a1 f4       	brne	.+40     	; 0x1ab2 <GPIO_voidSetPinDDR+0x86>
				{
					SET_BIT(DDRA ,copy_u8Pin);
    1a8a:	aa e3       	ldi	r26, 0x3A	; 58
    1a8c:	b0 e0       	ldi	r27, 0x00	; 0
    1a8e:	ea e3       	ldi	r30, 0x3A	; 58
    1a90:	f0 e0       	ldi	r31, 0x00	; 0
    1a92:	80 81       	ld	r24, Z
    1a94:	48 2f       	mov	r20, r24
    1a96:	8a 81       	ldd	r24, Y+2	; 0x02
    1a98:	28 2f       	mov	r18, r24
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	81 e0       	ldi	r24, 0x01	; 1
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	02 2e       	mov	r0, r18
    1aa2:	02 c0       	rjmp	.+4      	; 0x1aa8 <GPIO_voidSetPinDDR+0x7c>
    1aa4:	88 0f       	add	r24, r24
    1aa6:	99 1f       	adc	r25, r25
    1aa8:	0a 94       	dec	r0
    1aaa:	e2 f7       	brpl	.-8      	; 0x1aa4 <GPIO_voidSetPinDDR+0x78>
    1aac:	84 2b       	or	r24, r20
    1aae:	8c 93       	st	X, r24
    1ab0:	98 c0       	rjmp	.+304    	; 0x1be2 <GPIO_voidSetPinDDR+0x1b6>
				}
				else {
					CLEAR_BIT(DDRA,copy_u8Pin);
    1ab2:	aa e3       	ldi	r26, 0x3A	; 58
    1ab4:	b0 e0       	ldi	r27, 0x00	; 0
    1ab6:	ea e3       	ldi	r30, 0x3A	; 58
    1ab8:	f0 e0       	ldi	r31, 0x00	; 0
    1aba:	80 81       	ld	r24, Z
    1abc:	48 2f       	mov	r20, r24
    1abe:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac0:	28 2f       	mov	r18, r24
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	81 e0       	ldi	r24, 0x01	; 1
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	02 2e       	mov	r0, r18
    1aca:	02 c0       	rjmp	.+4      	; 0x1ad0 <GPIO_voidSetPinDDR+0xa4>
    1acc:	88 0f       	add	r24, r24
    1ace:	99 1f       	adc	r25, r25
    1ad0:	0a 94       	dec	r0
    1ad2:	e2 f7       	brpl	.-8      	; 0x1acc <GPIO_voidSetPinDDR+0xa0>
    1ad4:	80 95       	com	r24
    1ad6:	84 23       	and	r24, r20
    1ad8:	8c 93       	st	X, r24
    1ada:	83 c0       	rjmp	.+262    	; 0x1be2 <GPIO_voidSetPinDDR+0x1b6>
				}
				break;
			case GPIOB :
				if(copy_u8Mode ==OUTPUT )
    1adc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ade:	81 30       	cpi	r24, 0x01	; 1
    1ae0:	a1 f4       	brne	.+40     	; 0x1b0a <GPIO_voidSetPinDDR+0xde>
				{
					SET_BIT(DDRB ,copy_u8Pin);
    1ae2:	a7 e3       	ldi	r26, 0x37	; 55
    1ae4:	b0 e0       	ldi	r27, 0x00	; 0
    1ae6:	e7 e3       	ldi	r30, 0x37	; 55
    1ae8:	f0 e0       	ldi	r31, 0x00	; 0
    1aea:	80 81       	ld	r24, Z
    1aec:	48 2f       	mov	r20, r24
    1aee:	8a 81       	ldd	r24, Y+2	; 0x02
    1af0:	28 2f       	mov	r18, r24
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	81 e0       	ldi	r24, 0x01	; 1
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	02 2e       	mov	r0, r18
    1afa:	02 c0       	rjmp	.+4      	; 0x1b00 <GPIO_voidSetPinDDR+0xd4>
    1afc:	88 0f       	add	r24, r24
    1afe:	99 1f       	adc	r25, r25
    1b00:	0a 94       	dec	r0
    1b02:	e2 f7       	brpl	.-8      	; 0x1afc <GPIO_voidSetPinDDR+0xd0>
    1b04:	84 2b       	or	r24, r20
    1b06:	8c 93       	st	X, r24
    1b08:	6c c0       	rjmp	.+216    	; 0x1be2 <GPIO_voidSetPinDDR+0x1b6>
				}
				else {
					CLEAR_BIT(DDRB,copy_u8Pin);
    1b0a:	a7 e3       	ldi	r26, 0x37	; 55
    1b0c:	b0 e0       	ldi	r27, 0x00	; 0
    1b0e:	e7 e3       	ldi	r30, 0x37	; 55
    1b10:	f0 e0       	ldi	r31, 0x00	; 0
    1b12:	80 81       	ld	r24, Z
    1b14:	48 2f       	mov	r20, r24
    1b16:	8a 81       	ldd	r24, Y+2	; 0x02
    1b18:	28 2f       	mov	r18, r24
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	81 e0       	ldi	r24, 0x01	; 1
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	02 2e       	mov	r0, r18
    1b22:	02 c0       	rjmp	.+4      	; 0x1b28 <GPIO_voidSetPinDDR+0xfc>
    1b24:	88 0f       	add	r24, r24
    1b26:	99 1f       	adc	r25, r25
    1b28:	0a 94       	dec	r0
    1b2a:	e2 f7       	brpl	.-8      	; 0x1b24 <GPIO_voidSetPinDDR+0xf8>
    1b2c:	80 95       	com	r24
    1b2e:	84 23       	and	r24, r20
    1b30:	8c 93       	st	X, r24
    1b32:	57 c0       	rjmp	.+174    	; 0x1be2 <GPIO_voidSetPinDDR+0x1b6>
				}
				break;
			case GPIOC :
				if(copy_u8Mode ==OUTPUT )
    1b34:	8b 81       	ldd	r24, Y+3	; 0x03
    1b36:	81 30       	cpi	r24, 0x01	; 1
    1b38:	a1 f4       	brne	.+40     	; 0x1b62 <GPIO_voidSetPinDDR+0x136>
				{
					SET_BIT(DDRC ,copy_u8Pin);
    1b3a:	a4 e3       	ldi	r26, 0x34	; 52
    1b3c:	b0 e0       	ldi	r27, 0x00	; 0
    1b3e:	e4 e3       	ldi	r30, 0x34	; 52
    1b40:	f0 e0       	ldi	r31, 0x00	; 0
    1b42:	80 81       	ld	r24, Z
    1b44:	48 2f       	mov	r20, r24
    1b46:	8a 81       	ldd	r24, Y+2	; 0x02
    1b48:	28 2f       	mov	r18, r24
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	02 2e       	mov	r0, r18
    1b52:	02 c0       	rjmp	.+4      	; 0x1b58 <GPIO_voidSetPinDDR+0x12c>
    1b54:	88 0f       	add	r24, r24
    1b56:	99 1f       	adc	r25, r25
    1b58:	0a 94       	dec	r0
    1b5a:	e2 f7       	brpl	.-8      	; 0x1b54 <GPIO_voidSetPinDDR+0x128>
    1b5c:	84 2b       	or	r24, r20
    1b5e:	8c 93       	st	X, r24
    1b60:	40 c0       	rjmp	.+128    	; 0x1be2 <GPIO_voidSetPinDDR+0x1b6>
				}
				else {
					CLEAR_BIT(DDRC,copy_u8Pin);
    1b62:	a4 e3       	ldi	r26, 0x34	; 52
    1b64:	b0 e0       	ldi	r27, 0x00	; 0
    1b66:	e4 e3       	ldi	r30, 0x34	; 52
    1b68:	f0 e0       	ldi	r31, 0x00	; 0
    1b6a:	80 81       	ld	r24, Z
    1b6c:	48 2f       	mov	r20, r24
    1b6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b70:	28 2f       	mov	r18, r24
    1b72:	30 e0       	ldi	r19, 0x00	; 0
    1b74:	81 e0       	ldi	r24, 0x01	; 1
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	02 2e       	mov	r0, r18
    1b7a:	02 c0       	rjmp	.+4      	; 0x1b80 <GPIO_voidSetPinDDR+0x154>
    1b7c:	88 0f       	add	r24, r24
    1b7e:	99 1f       	adc	r25, r25
    1b80:	0a 94       	dec	r0
    1b82:	e2 f7       	brpl	.-8      	; 0x1b7c <GPIO_voidSetPinDDR+0x150>
    1b84:	80 95       	com	r24
    1b86:	84 23       	and	r24, r20
    1b88:	8c 93       	st	X, r24
    1b8a:	2b c0       	rjmp	.+86     	; 0x1be2 <GPIO_voidSetPinDDR+0x1b6>
				}
				break;
			case GPIOD :
				if(copy_u8Mode ==OUTPUT )
    1b8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8e:	81 30       	cpi	r24, 0x01	; 1
    1b90:	a1 f4       	brne	.+40     	; 0x1bba <GPIO_voidSetPinDDR+0x18e>
				{
					SET_BIT(DDRD ,copy_u8Pin);
    1b92:	a1 e3       	ldi	r26, 0x31	; 49
    1b94:	b0 e0       	ldi	r27, 0x00	; 0
    1b96:	e1 e3       	ldi	r30, 0x31	; 49
    1b98:	f0 e0       	ldi	r31, 0x00	; 0
    1b9a:	80 81       	ld	r24, Z
    1b9c:	48 2f       	mov	r20, r24
    1b9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba0:	28 2f       	mov	r18, r24
    1ba2:	30 e0       	ldi	r19, 0x00	; 0
    1ba4:	81 e0       	ldi	r24, 0x01	; 1
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	02 2e       	mov	r0, r18
    1baa:	02 c0       	rjmp	.+4      	; 0x1bb0 <GPIO_voidSetPinDDR+0x184>
    1bac:	88 0f       	add	r24, r24
    1bae:	99 1f       	adc	r25, r25
    1bb0:	0a 94       	dec	r0
    1bb2:	e2 f7       	brpl	.-8      	; 0x1bac <GPIO_voidSetPinDDR+0x180>
    1bb4:	84 2b       	or	r24, r20
    1bb6:	8c 93       	st	X, r24
    1bb8:	14 c0       	rjmp	.+40     	; 0x1be2 <GPIO_voidSetPinDDR+0x1b6>
				}
				else {
					CLEAR_BIT(DDRD,copy_u8Pin);
    1bba:	a1 e3       	ldi	r26, 0x31	; 49
    1bbc:	b0 e0       	ldi	r27, 0x00	; 0
    1bbe:	e1 e3       	ldi	r30, 0x31	; 49
    1bc0:	f0 e0       	ldi	r31, 0x00	; 0
    1bc2:	80 81       	ld	r24, Z
    1bc4:	48 2f       	mov	r20, r24
    1bc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc8:	28 2f       	mov	r18, r24
    1bca:	30 e0       	ldi	r19, 0x00	; 0
    1bcc:	81 e0       	ldi	r24, 0x01	; 1
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	02 2e       	mov	r0, r18
    1bd2:	02 c0       	rjmp	.+4      	; 0x1bd8 <GPIO_voidSetPinDDR+0x1ac>
    1bd4:	88 0f       	add	r24, r24
    1bd6:	99 1f       	adc	r25, r25
    1bd8:	0a 94       	dec	r0
    1bda:	e2 f7       	brpl	.-8      	; 0x1bd4 <GPIO_voidSetPinDDR+0x1a8>
    1bdc:	80 95       	com	r24
    1bde:	84 23       	and	r24, r20
    1be0:	8c 93       	st	X, r24
				}
				break;	
			default:
				break;
		}
	}
    1be2:	0f 90       	pop	r0
    1be4:	0f 90       	pop	r0
    1be6:	0f 90       	pop	r0
    1be8:	0f 90       	pop	r0
    1bea:	0f 90       	pop	r0
    1bec:	cf 91       	pop	r28
    1bee:	df 91       	pop	r29
    1bf0:	08 95       	ret

00001bf2 <GPIO_voidWritePin>:
	
	void GPIO_voidWritePin (u8  copy_u8Port ,u8 copy_u8Pin , u8 copy_u8Value )
	{
    1bf2:	df 93       	push	r29
    1bf4:	cf 93       	push	r28
    1bf6:	00 d0       	rcall	.+0      	; 0x1bf8 <GPIO_voidWritePin+0x6>
    1bf8:	00 d0       	rcall	.+0      	; 0x1bfa <GPIO_voidWritePin+0x8>
    1bfa:	0f 92       	push	r0
    1bfc:	cd b7       	in	r28, 0x3d	; 61
    1bfe:	de b7       	in	r29, 0x3e	; 62
    1c00:	89 83       	std	Y+1, r24	; 0x01
    1c02:	6a 83       	std	Y+2, r22	; 0x02
    1c04:	4b 83       	std	Y+3, r20	; 0x03
		switch(copy_u8Port)
    1c06:	89 81       	ldd	r24, Y+1	; 0x01
    1c08:	28 2f       	mov	r18, r24
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	3d 83       	std	Y+5, r19	; 0x05
    1c0e:	2c 83       	std	Y+4, r18	; 0x04
    1c10:	8c 81       	ldd	r24, Y+4	; 0x04
    1c12:	9d 81       	ldd	r25, Y+5	; 0x05
    1c14:	81 30       	cpi	r24, 0x01	; 1
    1c16:	91 05       	cpc	r25, r1
    1c18:	09 f4       	brne	.+2      	; 0x1c1c <GPIO_voidWritePin+0x2a>
    1c1a:	43 c0       	rjmp	.+134    	; 0x1ca2 <GPIO_voidWritePin+0xb0>
    1c1c:	2c 81       	ldd	r18, Y+4	; 0x04
    1c1e:	3d 81       	ldd	r19, Y+5	; 0x05
    1c20:	22 30       	cpi	r18, 0x02	; 2
    1c22:	31 05       	cpc	r19, r1
    1c24:	2c f4       	brge	.+10     	; 0x1c30 <GPIO_voidWritePin+0x3e>
    1c26:	8c 81       	ldd	r24, Y+4	; 0x04
    1c28:	9d 81       	ldd	r25, Y+5	; 0x05
    1c2a:	00 97       	sbiw	r24, 0x00	; 0
    1c2c:	71 f0       	breq	.+28     	; 0x1c4a <GPIO_voidWritePin+0x58>
    1c2e:	bc c0       	rjmp	.+376    	; 0x1da8 <GPIO_voidWritePin+0x1b6>
    1c30:	2c 81       	ldd	r18, Y+4	; 0x04
    1c32:	3d 81       	ldd	r19, Y+5	; 0x05
    1c34:	22 30       	cpi	r18, 0x02	; 2
    1c36:	31 05       	cpc	r19, r1
    1c38:	09 f4       	brne	.+2      	; 0x1c3c <GPIO_voidWritePin+0x4a>
    1c3a:	5f c0       	rjmp	.+190    	; 0x1cfa <GPIO_voidWritePin+0x108>
    1c3c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c3e:	9d 81       	ldd	r25, Y+5	; 0x05
    1c40:	83 30       	cpi	r24, 0x03	; 3
    1c42:	91 05       	cpc	r25, r1
    1c44:	09 f4       	brne	.+2      	; 0x1c48 <GPIO_voidWritePin+0x56>
    1c46:	85 c0       	rjmp	.+266    	; 0x1d52 <GPIO_voidWritePin+0x160>
    1c48:	af c0       	rjmp	.+350    	; 0x1da8 <GPIO_voidWritePin+0x1b6>
		{
			case GPIOA :
				if(copy_u8Value ==HIGH )
    1c4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4c:	81 30       	cpi	r24, 0x01	; 1
    1c4e:	a1 f4       	brne	.+40     	; 0x1c78 <GPIO_voidWritePin+0x86>
				{
					SET_BIT(PORTA ,copy_u8Pin);
    1c50:	ab e3       	ldi	r26, 0x3B	; 59
    1c52:	b0 e0       	ldi	r27, 0x00	; 0
    1c54:	eb e3       	ldi	r30, 0x3B	; 59
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	80 81       	ld	r24, Z
    1c5a:	48 2f       	mov	r20, r24
    1c5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5e:	28 2f       	mov	r18, r24
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	81 e0       	ldi	r24, 0x01	; 1
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	02 2e       	mov	r0, r18
    1c68:	02 c0       	rjmp	.+4      	; 0x1c6e <GPIO_voidWritePin+0x7c>
    1c6a:	88 0f       	add	r24, r24
    1c6c:	99 1f       	adc	r25, r25
    1c6e:	0a 94       	dec	r0
    1c70:	e2 f7       	brpl	.-8      	; 0x1c6a <GPIO_voidWritePin+0x78>
    1c72:	84 2b       	or	r24, r20
    1c74:	8c 93       	st	X, r24
    1c76:	98 c0       	rjmp	.+304    	; 0x1da8 <GPIO_voidWritePin+0x1b6>
				}
				else {
					CLEAR_BIT(PORTA,copy_u8Pin);
    1c78:	ab e3       	ldi	r26, 0x3B	; 59
    1c7a:	b0 e0       	ldi	r27, 0x00	; 0
    1c7c:	eb e3       	ldi	r30, 0x3B	; 59
    1c7e:	f0 e0       	ldi	r31, 0x00	; 0
    1c80:	80 81       	ld	r24, Z
    1c82:	48 2f       	mov	r20, r24
    1c84:	8a 81       	ldd	r24, Y+2	; 0x02
    1c86:	28 2f       	mov	r18, r24
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	81 e0       	ldi	r24, 0x01	; 1
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	02 2e       	mov	r0, r18
    1c90:	02 c0       	rjmp	.+4      	; 0x1c96 <GPIO_voidWritePin+0xa4>
    1c92:	88 0f       	add	r24, r24
    1c94:	99 1f       	adc	r25, r25
    1c96:	0a 94       	dec	r0
    1c98:	e2 f7       	brpl	.-8      	; 0x1c92 <GPIO_voidWritePin+0xa0>
    1c9a:	80 95       	com	r24
    1c9c:	84 23       	and	r24, r20
    1c9e:	8c 93       	st	X, r24
    1ca0:	83 c0       	rjmp	.+262    	; 0x1da8 <GPIO_voidWritePin+0x1b6>
				}
				break;
			case GPIOB :
				if(copy_u8Value ==HIGH )
    1ca2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca4:	81 30       	cpi	r24, 0x01	; 1
    1ca6:	a1 f4       	brne	.+40     	; 0x1cd0 <GPIO_voidWritePin+0xde>
				{
					SET_BIT(PORTB ,copy_u8Pin);
    1ca8:	a8 e3       	ldi	r26, 0x38	; 56
    1caa:	b0 e0       	ldi	r27, 0x00	; 0
    1cac:	e8 e3       	ldi	r30, 0x38	; 56
    1cae:	f0 e0       	ldi	r31, 0x00	; 0
    1cb0:	80 81       	ld	r24, Z
    1cb2:	48 2f       	mov	r20, r24
    1cb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb6:	28 2f       	mov	r18, r24
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	81 e0       	ldi	r24, 0x01	; 1
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	02 2e       	mov	r0, r18
    1cc0:	02 c0       	rjmp	.+4      	; 0x1cc6 <GPIO_voidWritePin+0xd4>
    1cc2:	88 0f       	add	r24, r24
    1cc4:	99 1f       	adc	r25, r25
    1cc6:	0a 94       	dec	r0
    1cc8:	e2 f7       	brpl	.-8      	; 0x1cc2 <GPIO_voidWritePin+0xd0>
    1cca:	84 2b       	or	r24, r20
    1ccc:	8c 93       	st	X, r24
    1cce:	6c c0       	rjmp	.+216    	; 0x1da8 <GPIO_voidWritePin+0x1b6>
				}
				else {
					CLEAR_BIT(PORTB,copy_u8Pin);
    1cd0:	a8 e3       	ldi	r26, 0x38	; 56
    1cd2:	b0 e0       	ldi	r27, 0x00	; 0
    1cd4:	e8 e3       	ldi	r30, 0x38	; 56
    1cd6:	f0 e0       	ldi	r31, 0x00	; 0
    1cd8:	80 81       	ld	r24, Z
    1cda:	48 2f       	mov	r20, r24
    1cdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cde:	28 2f       	mov	r18, r24
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	81 e0       	ldi	r24, 0x01	; 1
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	02 2e       	mov	r0, r18
    1ce8:	02 c0       	rjmp	.+4      	; 0x1cee <GPIO_voidWritePin+0xfc>
    1cea:	88 0f       	add	r24, r24
    1cec:	99 1f       	adc	r25, r25
    1cee:	0a 94       	dec	r0
    1cf0:	e2 f7       	brpl	.-8      	; 0x1cea <GPIO_voidWritePin+0xf8>
    1cf2:	80 95       	com	r24
    1cf4:	84 23       	and	r24, r20
    1cf6:	8c 93       	st	X, r24
    1cf8:	57 c0       	rjmp	.+174    	; 0x1da8 <GPIO_voidWritePin+0x1b6>
				}
				break;
			case GPIOC :
				if(copy_u8Value ==HIGH )
    1cfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfc:	81 30       	cpi	r24, 0x01	; 1
    1cfe:	a1 f4       	brne	.+40     	; 0x1d28 <GPIO_voidWritePin+0x136>
				{
					SET_BIT(PORTC ,copy_u8Pin);
    1d00:	a5 e3       	ldi	r26, 0x35	; 53
    1d02:	b0 e0       	ldi	r27, 0x00	; 0
    1d04:	e5 e3       	ldi	r30, 0x35	; 53
    1d06:	f0 e0       	ldi	r31, 0x00	; 0
    1d08:	80 81       	ld	r24, Z
    1d0a:	48 2f       	mov	r20, r24
    1d0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0e:	28 2f       	mov	r18, r24
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	81 e0       	ldi	r24, 0x01	; 1
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	02 2e       	mov	r0, r18
    1d18:	02 c0       	rjmp	.+4      	; 0x1d1e <GPIO_voidWritePin+0x12c>
    1d1a:	88 0f       	add	r24, r24
    1d1c:	99 1f       	adc	r25, r25
    1d1e:	0a 94       	dec	r0
    1d20:	e2 f7       	brpl	.-8      	; 0x1d1a <GPIO_voidWritePin+0x128>
    1d22:	84 2b       	or	r24, r20
    1d24:	8c 93       	st	X, r24
    1d26:	40 c0       	rjmp	.+128    	; 0x1da8 <GPIO_voidWritePin+0x1b6>
				}
				else {
					CLEAR_BIT(PORTC,copy_u8Pin);
    1d28:	a5 e3       	ldi	r26, 0x35	; 53
    1d2a:	b0 e0       	ldi	r27, 0x00	; 0
    1d2c:	e5 e3       	ldi	r30, 0x35	; 53
    1d2e:	f0 e0       	ldi	r31, 0x00	; 0
    1d30:	80 81       	ld	r24, Z
    1d32:	48 2f       	mov	r20, r24
    1d34:	8a 81       	ldd	r24, Y+2	; 0x02
    1d36:	28 2f       	mov	r18, r24
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	81 e0       	ldi	r24, 0x01	; 1
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	02 2e       	mov	r0, r18
    1d40:	02 c0       	rjmp	.+4      	; 0x1d46 <GPIO_voidWritePin+0x154>
    1d42:	88 0f       	add	r24, r24
    1d44:	99 1f       	adc	r25, r25
    1d46:	0a 94       	dec	r0
    1d48:	e2 f7       	brpl	.-8      	; 0x1d42 <GPIO_voidWritePin+0x150>
    1d4a:	80 95       	com	r24
    1d4c:	84 23       	and	r24, r20
    1d4e:	8c 93       	st	X, r24
    1d50:	2b c0       	rjmp	.+86     	; 0x1da8 <GPIO_voidWritePin+0x1b6>
				}
				break;
			case GPIOD :
				if(copy_u8Value == HIGH )
    1d52:	8b 81       	ldd	r24, Y+3	; 0x03
    1d54:	81 30       	cpi	r24, 0x01	; 1
    1d56:	a1 f4       	brne	.+40     	; 0x1d80 <GPIO_voidWritePin+0x18e>
				{
					SET_BIT(PORTD ,copy_u8Pin);
    1d58:	a2 e3       	ldi	r26, 0x32	; 50
    1d5a:	b0 e0       	ldi	r27, 0x00	; 0
    1d5c:	e2 e3       	ldi	r30, 0x32	; 50
    1d5e:	f0 e0       	ldi	r31, 0x00	; 0
    1d60:	80 81       	ld	r24, Z
    1d62:	48 2f       	mov	r20, r24
    1d64:	8a 81       	ldd	r24, Y+2	; 0x02
    1d66:	28 2f       	mov	r18, r24
    1d68:	30 e0       	ldi	r19, 0x00	; 0
    1d6a:	81 e0       	ldi	r24, 0x01	; 1
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	02 2e       	mov	r0, r18
    1d70:	02 c0       	rjmp	.+4      	; 0x1d76 <GPIO_voidWritePin+0x184>
    1d72:	88 0f       	add	r24, r24
    1d74:	99 1f       	adc	r25, r25
    1d76:	0a 94       	dec	r0
    1d78:	e2 f7       	brpl	.-8      	; 0x1d72 <GPIO_voidWritePin+0x180>
    1d7a:	84 2b       	or	r24, r20
    1d7c:	8c 93       	st	X, r24
    1d7e:	14 c0       	rjmp	.+40     	; 0x1da8 <GPIO_voidWritePin+0x1b6>
				}
				else {
					CLEAR_BIT(PORTD,copy_u8Pin);
    1d80:	a2 e3       	ldi	r26, 0x32	; 50
    1d82:	b0 e0       	ldi	r27, 0x00	; 0
    1d84:	e2 e3       	ldi	r30, 0x32	; 50
    1d86:	f0 e0       	ldi	r31, 0x00	; 0
    1d88:	80 81       	ld	r24, Z
    1d8a:	48 2f       	mov	r20, r24
    1d8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8e:	28 2f       	mov	r18, r24
    1d90:	30 e0       	ldi	r19, 0x00	; 0
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	02 2e       	mov	r0, r18
    1d98:	02 c0       	rjmp	.+4      	; 0x1d9e <GPIO_voidWritePin+0x1ac>
    1d9a:	88 0f       	add	r24, r24
    1d9c:	99 1f       	adc	r25, r25
    1d9e:	0a 94       	dec	r0
    1da0:	e2 f7       	brpl	.-8      	; 0x1d9a <GPIO_voidWritePin+0x1a8>
    1da2:	80 95       	com	r24
    1da4:	84 23       	and	r24, r20
    1da6:	8c 93       	st	X, r24
				break;	
			default:
				break;
		}
		
	}
    1da8:	0f 90       	pop	r0
    1daa:	0f 90       	pop	r0
    1dac:	0f 90       	pop	r0
    1dae:	0f 90       	pop	r0
    1db0:	0f 90       	pop	r0
    1db2:	cf 91       	pop	r28
    1db4:	df 91       	pop	r29
    1db6:	08 95       	ret

00001db8 <GPIO_u8ReadPin>:
	
	u8	GPIO_u8ReadPin(	u8  copy_u8Port ,u8 copy_u8Pin )
	{
    1db8:	df 93       	push	r29
    1dba:	cf 93       	push	r28
    1dbc:	00 d0       	rcall	.+0      	; 0x1dbe <GPIO_u8ReadPin+0x6>
    1dbe:	00 d0       	rcall	.+0      	; 0x1dc0 <GPIO_u8ReadPin+0x8>
    1dc0:	0f 92       	push	r0
    1dc2:	cd b7       	in	r28, 0x3d	; 61
    1dc4:	de b7       	in	r29, 0x3e	; 62
    1dc6:	8a 83       	std	Y+2, r24	; 0x02
    1dc8:	6b 83       	std	Y+3, r22	; 0x03
		u8 Local_u8ReturnValue ;
		switch(copy_u8Port){
    1dca:	8a 81       	ldd	r24, Y+2	; 0x02
    1dcc:	28 2f       	mov	r18, r24
    1dce:	30 e0       	ldi	r19, 0x00	; 0
    1dd0:	3d 83       	std	Y+5, r19	; 0x05
    1dd2:	2c 83       	std	Y+4, r18	; 0x04
    1dd4:	4c 81       	ldd	r20, Y+4	; 0x04
    1dd6:	5d 81       	ldd	r21, Y+5	; 0x05
    1dd8:	41 30       	cpi	r20, 0x01	; 1
    1dda:	51 05       	cpc	r21, r1
    1ddc:	b1 f1       	breq	.+108    	; 0x1e4a <GPIO_u8ReadPin+0x92>
    1dde:	8c 81       	ldd	r24, Y+4	; 0x04
    1de0:	9d 81       	ldd	r25, Y+5	; 0x05
    1de2:	82 30       	cpi	r24, 0x02	; 2
    1de4:	91 05       	cpc	r25, r1
    1de6:	34 f4       	brge	.+12     	; 0x1df4 <GPIO_u8ReadPin+0x3c>
    1de8:	2c 81       	ldd	r18, Y+4	; 0x04
    1dea:	3d 81       	ldd	r19, Y+5	; 0x05
    1dec:	21 15       	cp	r18, r1
    1dee:	31 05       	cpc	r19, r1
    1df0:	71 f0       	breq	.+28     	; 0x1e0e <GPIO_u8ReadPin+0x56>
    1df2:	84 c0       	rjmp	.+264    	; 0x1efc <GPIO_u8ReadPin+0x144>
    1df4:	4c 81       	ldd	r20, Y+4	; 0x04
    1df6:	5d 81       	ldd	r21, Y+5	; 0x05
    1df8:	42 30       	cpi	r20, 0x02	; 2
    1dfa:	51 05       	cpc	r21, r1
    1dfc:	09 f4       	brne	.+2      	; 0x1e00 <GPIO_u8ReadPin+0x48>
    1dfe:	43 c0       	rjmp	.+134    	; 0x1e86 <GPIO_u8ReadPin+0xce>
    1e00:	8c 81       	ldd	r24, Y+4	; 0x04
    1e02:	9d 81       	ldd	r25, Y+5	; 0x05
    1e04:	83 30       	cpi	r24, 0x03	; 3
    1e06:	91 05       	cpc	r25, r1
    1e08:	09 f4       	brne	.+2      	; 0x1e0c <GPIO_u8ReadPin+0x54>
    1e0a:	5b c0       	rjmp	.+182    	; 0x1ec2 <GPIO_u8ReadPin+0x10a>
    1e0c:	77 c0       	rjmp	.+238    	; 0x1efc <GPIO_u8ReadPin+0x144>
			case GPIOA :
				Local_u8ReturnValue = GET_BIT(PINA,copy_u8Pin);
    1e0e:	e9 e3       	ldi	r30, 0x39	; 57
    1e10:	f0 e0       	ldi	r31, 0x00	; 0
    1e12:	80 81       	ld	r24, Z
    1e14:	48 2f       	mov	r20, r24
    1e16:	50 e0       	ldi	r21, 0x00	; 0
    1e18:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1a:	28 2f       	mov	r18, r24
    1e1c:	30 e0       	ldi	r19, 0x00	; 0
    1e1e:	81 e0       	ldi	r24, 0x01	; 1
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	02 c0       	rjmp	.+4      	; 0x1e28 <GPIO_u8ReadPin+0x70>
    1e24:	88 0f       	add	r24, r24
    1e26:	99 1f       	adc	r25, r25
    1e28:	2a 95       	dec	r18
    1e2a:	e2 f7       	brpl	.-8      	; 0x1e24 <GPIO_u8ReadPin+0x6c>
    1e2c:	9a 01       	movw	r18, r20
    1e2e:	28 23       	and	r18, r24
    1e30:	39 23       	and	r19, r25
    1e32:	8b 81       	ldd	r24, Y+3	; 0x03
    1e34:	88 2f       	mov	r24, r24
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	a9 01       	movw	r20, r18
    1e3a:	02 c0       	rjmp	.+4      	; 0x1e40 <GPIO_u8ReadPin+0x88>
    1e3c:	55 95       	asr	r21
    1e3e:	47 95       	ror	r20
    1e40:	8a 95       	dec	r24
    1e42:	e2 f7       	brpl	.-8      	; 0x1e3c <GPIO_u8ReadPin+0x84>
    1e44:	ca 01       	movw	r24, r20
    1e46:	89 83       	std	Y+1, r24	; 0x01
    1e48:	59 c0       	rjmp	.+178    	; 0x1efc <GPIO_u8ReadPin+0x144>
				break ;
			case GPIOB :
				Local_u8ReturnValue = GET_BIT(PINB,copy_u8Pin);
    1e4a:	e6 e3       	ldi	r30, 0x36	; 54
    1e4c:	f0 e0       	ldi	r31, 0x00	; 0
    1e4e:	80 81       	ld	r24, Z
    1e50:	48 2f       	mov	r20, r24
    1e52:	50 e0       	ldi	r21, 0x00	; 0
    1e54:	8b 81       	ldd	r24, Y+3	; 0x03
    1e56:	28 2f       	mov	r18, r24
    1e58:	30 e0       	ldi	r19, 0x00	; 0
    1e5a:	81 e0       	ldi	r24, 0x01	; 1
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	02 c0       	rjmp	.+4      	; 0x1e64 <GPIO_u8ReadPin+0xac>
    1e60:	88 0f       	add	r24, r24
    1e62:	99 1f       	adc	r25, r25
    1e64:	2a 95       	dec	r18
    1e66:	e2 f7       	brpl	.-8      	; 0x1e60 <GPIO_u8ReadPin+0xa8>
    1e68:	9a 01       	movw	r18, r20
    1e6a:	28 23       	and	r18, r24
    1e6c:	39 23       	and	r19, r25
    1e6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e70:	88 2f       	mov	r24, r24
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	a9 01       	movw	r20, r18
    1e76:	02 c0       	rjmp	.+4      	; 0x1e7c <GPIO_u8ReadPin+0xc4>
    1e78:	55 95       	asr	r21
    1e7a:	47 95       	ror	r20
    1e7c:	8a 95       	dec	r24
    1e7e:	e2 f7       	brpl	.-8      	; 0x1e78 <GPIO_u8ReadPin+0xc0>
    1e80:	ca 01       	movw	r24, r20
    1e82:	89 83       	std	Y+1, r24	; 0x01
    1e84:	3b c0       	rjmp	.+118    	; 0x1efc <GPIO_u8ReadPin+0x144>
				break ;
			case GPIOC :
				Local_u8ReturnValue = GET_BIT(PINC,copy_u8Pin);
    1e86:	e3 e3       	ldi	r30, 0x33	; 51
    1e88:	f0 e0       	ldi	r31, 0x00	; 0
    1e8a:	80 81       	ld	r24, Z
    1e8c:	48 2f       	mov	r20, r24
    1e8e:	50 e0       	ldi	r21, 0x00	; 0
    1e90:	8b 81       	ldd	r24, Y+3	; 0x03
    1e92:	28 2f       	mov	r18, r24
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	81 e0       	ldi	r24, 0x01	; 1
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	02 c0       	rjmp	.+4      	; 0x1ea0 <GPIO_u8ReadPin+0xe8>
    1e9c:	88 0f       	add	r24, r24
    1e9e:	99 1f       	adc	r25, r25
    1ea0:	2a 95       	dec	r18
    1ea2:	e2 f7       	brpl	.-8      	; 0x1e9c <GPIO_u8ReadPin+0xe4>
    1ea4:	9a 01       	movw	r18, r20
    1ea6:	28 23       	and	r18, r24
    1ea8:	39 23       	and	r19, r25
    1eaa:	8b 81       	ldd	r24, Y+3	; 0x03
    1eac:	88 2f       	mov	r24, r24
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	a9 01       	movw	r20, r18
    1eb2:	02 c0       	rjmp	.+4      	; 0x1eb8 <GPIO_u8ReadPin+0x100>
    1eb4:	55 95       	asr	r21
    1eb6:	47 95       	ror	r20
    1eb8:	8a 95       	dec	r24
    1eba:	e2 f7       	brpl	.-8      	; 0x1eb4 <GPIO_u8ReadPin+0xfc>
    1ebc:	ca 01       	movw	r24, r20
    1ebe:	89 83       	std	Y+1, r24	; 0x01
    1ec0:	1d c0       	rjmp	.+58     	; 0x1efc <GPIO_u8ReadPin+0x144>
				break ;
			case GPIOD :
				Local_u8ReturnValue = GET_BIT(PIND,copy_u8Pin);
    1ec2:	e0 e3       	ldi	r30, 0x30	; 48
    1ec4:	f0 e0       	ldi	r31, 0x00	; 0
    1ec6:	80 81       	ld	r24, Z
    1ec8:	48 2f       	mov	r20, r24
    1eca:	50 e0       	ldi	r21, 0x00	; 0
    1ecc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ece:	28 2f       	mov	r18, r24
    1ed0:	30 e0       	ldi	r19, 0x00	; 0
    1ed2:	81 e0       	ldi	r24, 0x01	; 1
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	02 c0       	rjmp	.+4      	; 0x1edc <GPIO_u8ReadPin+0x124>
    1ed8:	88 0f       	add	r24, r24
    1eda:	99 1f       	adc	r25, r25
    1edc:	2a 95       	dec	r18
    1ede:	e2 f7       	brpl	.-8      	; 0x1ed8 <GPIO_u8ReadPin+0x120>
    1ee0:	9a 01       	movw	r18, r20
    1ee2:	28 23       	and	r18, r24
    1ee4:	39 23       	and	r19, r25
    1ee6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee8:	88 2f       	mov	r24, r24
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	a9 01       	movw	r20, r18
    1eee:	02 c0       	rjmp	.+4      	; 0x1ef4 <GPIO_u8ReadPin+0x13c>
    1ef0:	55 95       	asr	r21
    1ef2:	47 95       	ror	r20
    1ef4:	8a 95       	dec	r24
    1ef6:	e2 f7       	brpl	.-8      	; 0x1ef0 <GPIO_u8ReadPin+0x138>
    1ef8:	ca 01       	movw	r24, r20
    1efa:	89 83       	std	Y+1, r24	; 0x01
				break ;
			default:
			break;
		}
		return Local_u8ReturnValue ;
    1efc:	89 81       	ldd	r24, Y+1	; 0x01
		
	}
    1efe:	0f 90       	pop	r0
    1f00:	0f 90       	pop	r0
    1f02:	0f 90       	pop	r0
    1f04:	0f 90       	pop	r0
    1f06:	0f 90       	pop	r0
    1f08:	cf 91       	pop	r28
    1f0a:	df 91       	pop	r29
    1f0c:	08 95       	ret

00001f0e <GPIO_voidTogPin>:
	
	void GPIO_voidTogPin 	( u8 copy_u8Port , u8 copy_u8Pin )
	{
    1f0e:	df 93       	push	r29
    1f10:	cf 93       	push	r28
    1f12:	00 d0       	rcall	.+0      	; 0x1f14 <GPIO_voidTogPin+0x6>
    1f14:	00 d0       	rcall	.+0      	; 0x1f16 <GPIO_voidTogPin+0x8>
    1f16:	cd b7       	in	r28, 0x3d	; 61
    1f18:	de b7       	in	r29, 0x3e	; 62
    1f1a:	89 83       	std	Y+1, r24	; 0x01
    1f1c:	6a 83       	std	Y+2, r22	; 0x02
		switch(copy_u8Port){
    1f1e:	89 81       	ldd	r24, Y+1	; 0x01
    1f20:	28 2f       	mov	r18, r24
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	3c 83       	std	Y+4, r19	; 0x04
    1f26:	2b 83       	std	Y+3, r18	; 0x03
    1f28:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f2c:	81 30       	cpi	r24, 0x01	; 1
    1f2e:	91 05       	cpc	r25, r1
    1f30:	49 f1       	breq	.+82     	; 0x1f84 <GPIO_voidTogPin+0x76>
    1f32:	2b 81       	ldd	r18, Y+3	; 0x03
    1f34:	3c 81       	ldd	r19, Y+4	; 0x04
    1f36:	22 30       	cpi	r18, 0x02	; 2
    1f38:	31 05       	cpc	r19, r1
    1f3a:	2c f4       	brge	.+10     	; 0x1f46 <GPIO_voidTogPin+0x38>
    1f3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f40:	00 97       	sbiw	r24, 0x00	; 0
    1f42:	61 f0       	breq	.+24     	; 0x1f5c <GPIO_voidTogPin+0x4e>
    1f44:	5a c0       	rjmp	.+180    	; 0x1ffa <GPIO_voidTogPin+0xec>
    1f46:	2b 81       	ldd	r18, Y+3	; 0x03
    1f48:	3c 81       	ldd	r19, Y+4	; 0x04
    1f4a:	22 30       	cpi	r18, 0x02	; 2
    1f4c:	31 05       	cpc	r19, r1
    1f4e:	71 f1       	breq	.+92     	; 0x1fac <GPIO_voidTogPin+0x9e>
    1f50:	8b 81       	ldd	r24, Y+3	; 0x03
    1f52:	9c 81       	ldd	r25, Y+4	; 0x04
    1f54:	83 30       	cpi	r24, 0x03	; 3
    1f56:	91 05       	cpc	r25, r1
    1f58:	e9 f1       	breq	.+122    	; 0x1fd4 <GPIO_voidTogPin+0xc6>
    1f5a:	4f c0       	rjmp	.+158    	; 0x1ffa <GPIO_voidTogPin+0xec>
			case GPIOA :
				TOG_BIT(PORTA,copy_u8Pin);
    1f5c:	ab e3       	ldi	r26, 0x3B	; 59
    1f5e:	b0 e0       	ldi	r27, 0x00	; 0
    1f60:	eb e3       	ldi	r30, 0x3B	; 59
    1f62:	f0 e0       	ldi	r31, 0x00	; 0
    1f64:	80 81       	ld	r24, Z
    1f66:	48 2f       	mov	r20, r24
    1f68:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6a:	28 2f       	mov	r18, r24
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
    1f6e:	81 e0       	ldi	r24, 0x01	; 1
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	02 2e       	mov	r0, r18
    1f74:	02 c0       	rjmp	.+4      	; 0x1f7a <GPIO_voidTogPin+0x6c>
    1f76:	88 0f       	add	r24, r24
    1f78:	99 1f       	adc	r25, r25
    1f7a:	0a 94       	dec	r0
    1f7c:	e2 f7       	brpl	.-8      	; 0x1f76 <GPIO_voidTogPin+0x68>
    1f7e:	84 27       	eor	r24, r20
    1f80:	8c 93       	st	X, r24
    1f82:	3b c0       	rjmp	.+118    	; 0x1ffa <GPIO_voidTogPin+0xec>
				break ;             
			case GPIOB :            
				TOG_BIT(PORTB,copy_u8Pin);
    1f84:	a8 e3       	ldi	r26, 0x38	; 56
    1f86:	b0 e0       	ldi	r27, 0x00	; 0
    1f88:	e8 e3       	ldi	r30, 0x38	; 56
    1f8a:	f0 e0       	ldi	r31, 0x00	; 0
    1f8c:	80 81       	ld	r24, Z
    1f8e:	48 2f       	mov	r20, r24
    1f90:	8a 81       	ldd	r24, Y+2	; 0x02
    1f92:	28 2f       	mov	r18, r24
    1f94:	30 e0       	ldi	r19, 0x00	; 0
    1f96:	81 e0       	ldi	r24, 0x01	; 1
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	02 2e       	mov	r0, r18
    1f9c:	02 c0       	rjmp	.+4      	; 0x1fa2 <GPIO_voidTogPin+0x94>
    1f9e:	88 0f       	add	r24, r24
    1fa0:	99 1f       	adc	r25, r25
    1fa2:	0a 94       	dec	r0
    1fa4:	e2 f7       	brpl	.-8      	; 0x1f9e <GPIO_voidTogPin+0x90>
    1fa6:	84 27       	eor	r24, r20
    1fa8:	8c 93       	st	X, r24
    1faa:	27 c0       	rjmp	.+78     	; 0x1ffa <GPIO_voidTogPin+0xec>
				break ;             
			case GPIOC :            
				TOG_BIT(PORTC,copy_u8Pin);
    1fac:	a5 e3       	ldi	r26, 0x35	; 53
    1fae:	b0 e0       	ldi	r27, 0x00	; 0
    1fb0:	e5 e3       	ldi	r30, 0x35	; 53
    1fb2:	f0 e0       	ldi	r31, 0x00	; 0
    1fb4:	80 81       	ld	r24, Z
    1fb6:	48 2f       	mov	r20, r24
    1fb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fba:	28 2f       	mov	r18, r24
    1fbc:	30 e0       	ldi	r19, 0x00	; 0
    1fbe:	81 e0       	ldi	r24, 0x01	; 1
    1fc0:	90 e0       	ldi	r25, 0x00	; 0
    1fc2:	02 2e       	mov	r0, r18
    1fc4:	02 c0       	rjmp	.+4      	; 0x1fca <GPIO_voidTogPin+0xbc>
    1fc6:	88 0f       	add	r24, r24
    1fc8:	99 1f       	adc	r25, r25
    1fca:	0a 94       	dec	r0
    1fcc:	e2 f7       	brpl	.-8      	; 0x1fc6 <GPIO_voidTogPin+0xb8>
    1fce:	84 27       	eor	r24, r20
    1fd0:	8c 93       	st	X, r24
    1fd2:	13 c0       	rjmp	.+38     	; 0x1ffa <GPIO_voidTogPin+0xec>
				break ;             
			case GPIOD : 
				TOG_BIT(PORTD,copy_u8Pin);
    1fd4:	a2 e3       	ldi	r26, 0x32	; 50
    1fd6:	b0 e0       	ldi	r27, 0x00	; 0
    1fd8:	e2 e3       	ldi	r30, 0x32	; 50
    1fda:	f0 e0       	ldi	r31, 0x00	; 0
    1fdc:	80 81       	ld	r24, Z
    1fde:	48 2f       	mov	r20, r24
    1fe0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe2:	28 2f       	mov	r18, r24
    1fe4:	30 e0       	ldi	r19, 0x00	; 0
    1fe6:	81 e0       	ldi	r24, 0x01	; 1
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	02 2e       	mov	r0, r18
    1fec:	02 c0       	rjmp	.+4      	; 0x1ff2 <GPIO_voidTogPin+0xe4>
    1fee:	88 0f       	add	r24, r24
    1ff0:	99 1f       	adc	r25, r25
    1ff2:	0a 94       	dec	r0
    1ff4:	e2 f7       	brpl	.-8      	; 0x1fee <GPIO_voidTogPin+0xe0>
    1ff6:	84 27       	eor	r24, r20
    1ff8:	8c 93       	st	X, r24
			default:
			break;
		}
		
		
	}
    1ffa:	0f 90       	pop	r0
    1ffc:	0f 90       	pop	r0
    1ffe:	0f 90       	pop	r0
    2000:	0f 90       	pop	r0
    2002:	cf 91       	pop	r28
    2004:	df 91       	pop	r29
    2006:	08 95       	ret

00002008 <GPIO_voidSetPortDDR>:
	void GPIO_voidSetPortDDR (u8  copy_u8Port , u8 copy_u8Mode )
	{
    2008:	df 93       	push	r29
    200a:	cf 93       	push	r28
    200c:	00 d0       	rcall	.+0      	; 0x200e <GPIO_voidSetPortDDR+0x6>
    200e:	00 d0       	rcall	.+0      	; 0x2010 <GPIO_voidSetPortDDR+0x8>
    2010:	cd b7       	in	r28, 0x3d	; 61
    2012:	de b7       	in	r29, 0x3e	; 62
    2014:	89 83       	std	Y+1, r24	; 0x01
    2016:	6a 83       	std	Y+2, r22	; 0x02
		switch(copy_u8Port)
    2018:	89 81       	ldd	r24, Y+1	; 0x01
    201a:	28 2f       	mov	r18, r24
    201c:	30 e0       	ldi	r19, 0x00	; 0
    201e:	3c 83       	std	Y+4, r19	; 0x04
    2020:	2b 83       	std	Y+3, r18	; 0x03
    2022:	8b 81       	ldd	r24, Y+3	; 0x03
    2024:	9c 81       	ldd	r25, Y+4	; 0x04
    2026:	81 30       	cpi	r24, 0x01	; 1
    2028:	91 05       	cpc	r25, r1
    202a:	09 f1       	breq	.+66     	; 0x206e <GPIO_voidSetPortDDR+0x66>
    202c:	2b 81       	ldd	r18, Y+3	; 0x03
    202e:	3c 81       	ldd	r19, Y+4	; 0x04
    2030:	22 30       	cpi	r18, 0x02	; 2
    2032:	31 05       	cpc	r19, r1
    2034:	2c f4       	brge	.+10     	; 0x2040 <GPIO_voidSetPortDDR+0x38>
    2036:	8b 81       	ldd	r24, Y+3	; 0x03
    2038:	9c 81       	ldd	r25, Y+4	; 0x04
    203a:	00 97       	sbiw	r24, 0x00	; 0
    203c:	61 f0       	breq	.+24     	; 0x2056 <GPIO_voidSetPortDDR+0x4e>
    203e:	3a c0       	rjmp	.+116    	; 0x20b4 <GPIO_voidSetPortDDR+0xac>
    2040:	2b 81       	ldd	r18, Y+3	; 0x03
    2042:	3c 81       	ldd	r19, Y+4	; 0x04
    2044:	22 30       	cpi	r18, 0x02	; 2
    2046:	31 05       	cpc	r19, r1
    2048:	f1 f0       	breq	.+60     	; 0x2086 <GPIO_voidSetPortDDR+0x7e>
    204a:	8b 81       	ldd	r24, Y+3	; 0x03
    204c:	9c 81       	ldd	r25, Y+4	; 0x04
    204e:	83 30       	cpi	r24, 0x03	; 3
    2050:	91 05       	cpc	r25, r1
    2052:	29 f1       	breq	.+74     	; 0x209e <GPIO_voidSetPortDDR+0x96>
    2054:	2f c0       	rjmp	.+94     	; 0x20b4 <GPIO_voidSetPortDDR+0xac>
		{
			case GPIOA :
				if(copy_u8Mode ==OUTPUT )
    2056:	8a 81       	ldd	r24, Y+2	; 0x02
    2058:	81 30       	cpi	r24, 0x01	; 1
    205a:	29 f4       	brne	.+10     	; 0x2066 <GPIO_voidSetPortDDR+0x5e>
				{
					DDRA= 0xFF;
    205c:	ea e3       	ldi	r30, 0x3A	; 58
    205e:	f0 e0       	ldi	r31, 0x00	; 0
    2060:	8f ef       	ldi	r24, 0xFF	; 255
    2062:	80 83       	st	Z, r24
    2064:	27 c0       	rjmp	.+78     	; 0x20b4 <GPIO_voidSetPortDDR+0xac>
				}
				else {
					DDRA = 0x00 ;
    2066:	ea e3       	ldi	r30, 0x3A	; 58
    2068:	f0 e0       	ldi	r31, 0x00	; 0
    206a:	10 82       	st	Z, r1
    206c:	23 c0       	rjmp	.+70     	; 0x20b4 <GPIO_voidSetPortDDR+0xac>
				}
				break;
			case GPIOB :
				if(copy_u8Mode ==OUTPUT )
    206e:	8a 81       	ldd	r24, Y+2	; 0x02
    2070:	81 30       	cpi	r24, 0x01	; 1
    2072:	29 f4       	brne	.+10     	; 0x207e <GPIO_voidSetPortDDR+0x76>
				{
					DDRB = 0xFF;
    2074:	e7 e3       	ldi	r30, 0x37	; 55
    2076:	f0 e0       	ldi	r31, 0x00	; 0
    2078:	8f ef       	ldi	r24, 0xFF	; 255
    207a:	80 83       	st	Z, r24
    207c:	1b c0       	rjmp	.+54     	; 0x20b4 <GPIO_voidSetPortDDR+0xac>
				}
				else {
					DDRB = 0x00;
    207e:	e7 e3       	ldi	r30, 0x37	; 55
    2080:	f0 e0       	ldi	r31, 0x00	; 0
    2082:	10 82       	st	Z, r1
    2084:	17 c0       	rjmp	.+46     	; 0x20b4 <GPIO_voidSetPortDDR+0xac>
				}
				break;
			case GPIOC :
				if(copy_u8Mode ==OUTPUT )
    2086:	8a 81       	ldd	r24, Y+2	; 0x02
    2088:	81 30       	cpi	r24, 0x01	; 1
    208a:	29 f4       	brne	.+10     	; 0x2096 <GPIO_voidSetPortDDR+0x8e>
				{
					DDRC = 0xFF ;
    208c:	e4 e3       	ldi	r30, 0x34	; 52
    208e:	f0 e0       	ldi	r31, 0x00	; 0
    2090:	8f ef       	ldi	r24, 0xFF	; 255
    2092:	80 83       	st	Z, r24
    2094:	0f c0       	rjmp	.+30     	; 0x20b4 <GPIO_voidSetPortDDR+0xac>
				}
				else {
					DDRC = 0x00 ;
    2096:	e4 e3       	ldi	r30, 0x34	; 52
    2098:	f0 e0       	ldi	r31, 0x00	; 0
    209a:	10 82       	st	Z, r1
    209c:	0b c0       	rjmp	.+22     	; 0x20b4 <GPIO_voidSetPortDDR+0xac>
				}
				break;
			case GPIOD :
				if(copy_u8Mode ==OUTPUT )
    209e:	8a 81       	ldd	r24, Y+2	; 0x02
    20a0:	81 30       	cpi	r24, 0x01	; 1
    20a2:	29 f4       	brne	.+10     	; 0x20ae <GPIO_voidSetPortDDR+0xa6>
				{
					DDRD = 0xFF;
    20a4:	e1 e3       	ldi	r30, 0x31	; 49
    20a6:	f0 e0       	ldi	r31, 0x00	; 0
    20a8:	8f ef       	ldi	r24, 0xFF	; 255
    20aa:	80 83       	st	Z, r24
    20ac:	03 c0       	rjmp	.+6      	; 0x20b4 <GPIO_voidSetPortDDR+0xac>
				}
				else {
					DDRD = 0x00;
    20ae:	e1 e3       	ldi	r30, 0x31	; 49
    20b0:	f0 e0       	ldi	r31, 0x00	; 0
    20b2:	10 82       	st	Z, r1
				}
				break;	
			default:
				break;
		}
	}
    20b4:	0f 90       	pop	r0
    20b6:	0f 90       	pop	r0
    20b8:	0f 90       	pop	r0
    20ba:	0f 90       	pop	r0
    20bc:	cf 91       	pop	r28
    20be:	df 91       	pop	r29
    20c0:	08 95       	ret

000020c2 <GPIO_voidWritePort>:
	void	GPIO_voidWritePort (u8 copy_u8Port , u8 copy_u8Value)
	{
    20c2:	df 93       	push	r29
    20c4:	cf 93       	push	r28
    20c6:	00 d0       	rcall	.+0      	; 0x20c8 <GPIO_voidWritePort+0x6>
    20c8:	00 d0       	rcall	.+0      	; 0x20ca <GPIO_voidWritePort+0x8>
    20ca:	cd b7       	in	r28, 0x3d	; 61
    20cc:	de b7       	in	r29, 0x3e	; 62
    20ce:	89 83       	std	Y+1, r24	; 0x01
    20d0:	6a 83       	std	Y+2, r22	; 0x02
			switch(copy_u8Port)
    20d2:	89 81       	ldd	r24, Y+1	; 0x01
    20d4:	28 2f       	mov	r18, r24
    20d6:	30 e0       	ldi	r19, 0x00	; 0
    20d8:	3c 83       	std	Y+4, r19	; 0x04
    20da:	2b 83       	std	Y+3, r18	; 0x03
    20dc:	8b 81       	ldd	r24, Y+3	; 0x03
    20de:	9c 81       	ldd	r25, Y+4	; 0x04
    20e0:	81 30       	cpi	r24, 0x01	; 1
    20e2:	91 05       	cpc	r25, r1
    20e4:	d1 f0       	breq	.+52     	; 0x211a <GPIO_voidWritePort+0x58>
    20e6:	2b 81       	ldd	r18, Y+3	; 0x03
    20e8:	3c 81       	ldd	r19, Y+4	; 0x04
    20ea:	22 30       	cpi	r18, 0x02	; 2
    20ec:	31 05       	cpc	r19, r1
    20ee:	2c f4       	brge	.+10     	; 0x20fa <GPIO_voidWritePort+0x38>
    20f0:	8b 81       	ldd	r24, Y+3	; 0x03
    20f2:	9c 81       	ldd	r25, Y+4	; 0x04
    20f4:	00 97       	sbiw	r24, 0x00	; 0
    20f6:	61 f0       	breq	.+24     	; 0x2110 <GPIO_voidWritePort+0x4e>
    20f8:	1e c0       	rjmp	.+60     	; 0x2136 <GPIO_voidWritePort+0x74>
    20fa:	2b 81       	ldd	r18, Y+3	; 0x03
    20fc:	3c 81       	ldd	r19, Y+4	; 0x04
    20fe:	22 30       	cpi	r18, 0x02	; 2
    2100:	31 05       	cpc	r19, r1
    2102:	81 f0       	breq	.+32     	; 0x2124 <GPIO_voidWritePort+0x62>
    2104:	8b 81       	ldd	r24, Y+3	; 0x03
    2106:	9c 81       	ldd	r25, Y+4	; 0x04
    2108:	83 30       	cpi	r24, 0x03	; 3
    210a:	91 05       	cpc	r25, r1
    210c:	81 f0       	breq	.+32     	; 0x212e <GPIO_voidWritePort+0x6c>
    210e:	13 c0       	rjmp	.+38     	; 0x2136 <GPIO_voidWritePort+0x74>
		{
			case GPIOA :
				PORTA = copy_u8Value ;
    2110:	eb e3       	ldi	r30, 0x3B	; 59
    2112:	f0 e0       	ldi	r31, 0x00	; 0
    2114:	8a 81       	ldd	r24, Y+2	; 0x02
    2116:	80 83       	st	Z, r24
    2118:	0e c0       	rjmp	.+28     	; 0x2136 <GPIO_voidWritePort+0x74>
				break;
			case GPIOB :
				PORTB = copy_u8Value;
    211a:	e8 e3       	ldi	r30, 0x38	; 56
    211c:	f0 e0       	ldi	r31, 0x00	; 0
    211e:	8a 81       	ldd	r24, Y+2	; 0x02
    2120:	80 83       	st	Z, r24
    2122:	09 c0       	rjmp	.+18     	; 0x2136 <GPIO_voidWritePort+0x74>
				break;
			case GPIOC :
				PORTC = copy_u8Value;
    2124:	e5 e3       	ldi	r30, 0x35	; 53
    2126:	f0 e0       	ldi	r31, 0x00	; 0
    2128:	8a 81       	ldd	r24, Y+2	; 0x02
    212a:	80 83       	st	Z, r24
    212c:	04 c0       	rjmp	.+8      	; 0x2136 <GPIO_voidWritePort+0x74>
				break;
			case GPIOD :
				PORTD = copy_u8Value;
    212e:	e2 e3       	ldi	r30, 0x32	; 50
    2130:	f0 e0       	ldi	r31, 0x00	; 0
    2132:	8a 81       	ldd	r24, Y+2	; 0x02
    2134:	80 83       	st	Z, r24
				break;
		}
		
			
			
		}
    2136:	0f 90       	pop	r0
    2138:	0f 90       	pop	r0
    213a:	0f 90       	pop	r0
    213c:	0f 90       	pop	r0
    213e:	cf 91       	pop	r28
    2140:	df 91       	pop	r29
    2142:	08 95       	ret

00002144 <GPIO_voidSetLowNippleDDR>:
	void GPIO_voidSetLowNippleDDR(u8 copy_u8Port , u8 copy_u8Mode)
	{
    2144:	df 93       	push	r29
    2146:	cf 93       	push	r28
    2148:	00 d0       	rcall	.+0      	; 0x214a <GPIO_voidSetLowNippleDDR+0x6>
    214a:	0f 92       	push	r0
    214c:	cd b7       	in	r28, 0x3d	; 61
    214e:	de b7       	in	r29, 0x3e	; 62
    2150:	8a 83       	std	Y+2, r24	; 0x02
    2152:	6b 83       	std	Y+3, r22	; 0x03
		u8 i ;
		for (i= 0 ; i<4 ; i++){
    2154:	19 82       	std	Y+1, r1	; 0x01
    2156:	08 c0       	rjmp	.+16     	; 0x2168 <GPIO_voidSetLowNippleDDR+0x24>
			GPIO_voidSetPinDDR(copy_u8Port , i ,copy_u8Mode );
    2158:	8a 81       	ldd	r24, Y+2	; 0x02
    215a:	69 81       	ldd	r22, Y+1	; 0x01
    215c:	4b 81       	ldd	r20, Y+3	; 0x03
    215e:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <GPIO_voidSetPinDDR>
			
		}
	void GPIO_voidSetLowNippleDDR(u8 copy_u8Port , u8 copy_u8Mode)
	{
		u8 i ;
		for (i= 0 ; i<4 ; i++){
    2162:	89 81       	ldd	r24, Y+1	; 0x01
    2164:	8f 5f       	subi	r24, 0xFF	; 255
    2166:	89 83       	std	Y+1, r24	; 0x01
    2168:	89 81       	ldd	r24, Y+1	; 0x01
    216a:	84 30       	cpi	r24, 0x04	; 4
    216c:	a8 f3       	brcs	.-22     	; 0x2158 <GPIO_voidSetLowNippleDDR+0x14>
			GPIO_voidSetPinDDR(copy_u8Port , i ,copy_u8Mode );
		}
	}
    216e:	0f 90       	pop	r0
    2170:	0f 90       	pop	r0
    2172:	0f 90       	pop	r0
    2174:	cf 91       	pop	r28
    2176:	df 91       	pop	r29
    2178:	08 95       	ret

0000217a <GPIO_voidSetHighNippleDDR>:
	void GPIO_voidSetHighNippleDDR(u8 copy_u8Port , u8 copy_u8Mode)
	{
    217a:	df 93       	push	r29
    217c:	cf 93       	push	r28
    217e:	00 d0       	rcall	.+0      	; 0x2180 <GPIO_voidSetHighNippleDDR+0x6>
    2180:	0f 92       	push	r0
    2182:	cd b7       	in	r28, 0x3d	; 61
    2184:	de b7       	in	r29, 0x3e	; 62
    2186:	8a 83       	std	Y+2, r24	; 0x02
    2188:	6b 83       	std	Y+3, r22	; 0x03
		u8 i ;
		for (i= 4 ; i<8 ; i++){
    218a:	84 e0       	ldi	r24, 0x04	; 4
    218c:	89 83       	std	Y+1, r24	; 0x01
    218e:	08 c0       	rjmp	.+16     	; 0x21a0 <GPIO_voidSetHighNippleDDR+0x26>
			GPIO_voidSetPinDDR(copy_u8Port , i ,copy_u8Mode );
    2190:	8a 81       	ldd	r24, Y+2	; 0x02
    2192:	69 81       	ldd	r22, Y+1	; 0x01
    2194:	4b 81       	ldd	r20, Y+3	; 0x03
    2196:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <GPIO_voidSetPinDDR>
		}
	}
	void GPIO_voidSetHighNippleDDR(u8 copy_u8Port , u8 copy_u8Mode)
	{
		u8 i ;
		for (i= 4 ; i<8 ; i++){
    219a:	89 81       	ldd	r24, Y+1	; 0x01
    219c:	8f 5f       	subi	r24, 0xFF	; 255
    219e:	89 83       	std	Y+1, r24	; 0x01
    21a0:	89 81       	ldd	r24, Y+1	; 0x01
    21a2:	88 30       	cpi	r24, 0x08	; 8
    21a4:	a8 f3       	brcs	.-22     	; 0x2190 <GPIO_voidSetHighNippleDDR+0x16>
			GPIO_voidSetPinDDR(copy_u8Port , i ,copy_u8Mode );
		}
	}
    21a6:	0f 90       	pop	r0
    21a8:	0f 90       	pop	r0
    21aa:	0f 90       	pop	r0
    21ac:	cf 91       	pop	r28
    21ae:	df 91       	pop	r29
    21b0:	08 95       	ret

000021b2 <GPIO_voidWriteLowNipple>:
	void GPIO_voidWriteLowNipple (u8 copy_u8Port , u8 copy_u8Value )
	{
    21b2:	df 93       	push	r29
    21b4:	cf 93       	push	r28
    21b6:	00 d0       	rcall	.+0      	; 0x21b8 <GPIO_voidWriteLowNipple+0x6>
    21b8:	00 d0       	rcall	.+0      	; 0x21ba <GPIO_voidWriteLowNipple+0x8>
    21ba:	cd b7       	in	r28, 0x3d	; 61
    21bc:	de b7       	in	r29, 0x3e	; 62
    21be:	89 83       	std	Y+1, r24	; 0x01
    21c0:	6a 83       	std	Y+2, r22	; 0x02
		copy_u8Value &= 0x0F;
    21c2:	8a 81       	ldd	r24, Y+2	; 0x02
    21c4:	8f 70       	andi	r24, 0x0F	; 15
    21c6:	8a 83       	std	Y+2, r24	; 0x02
		switch (copy_u8Port) {
    21c8:	89 81       	ldd	r24, Y+1	; 0x01
    21ca:	28 2f       	mov	r18, r24
    21cc:	30 e0       	ldi	r19, 0x00	; 0
    21ce:	3c 83       	std	Y+4, r19	; 0x04
    21d0:	2b 83       	std	Y+3, r18	; 0x03
    21d2:	8b 81       	ldd	r24, Y+3	; 0x03
    21d4:	9c 81       	ldd	r25, Y+4	; 0x04
    21d6:	81 30       	cpi	r24, 0x01	; 1
    21d8:	91 05       	cpc	r25, r1
    21da:	29 f1       	breq	.+74     	; 0x2226 <GPIO_voidWriteLowNipple+0x74>
    21dc:	2b 81       	ldd	r18, Y+3	; 0x03
    21de:	3c 81       	ldd	r19, Y+4	; 0x04
    21e0:	22 30       	cpi	r18, 0x02	; 2
    21e2:	31 05       	cpc	r19, r1
    21e4:	2c f4       	brge	.+10     	; 0x21f0 <GPIO_voidWriteLowNipple+0x3e>
    21e6:	8b 81       	ldd	r24, Y+3	; 0x03
    21e8:	9c 81       	ldd	r25, Y+4	; 0x04
    21ea:	00 97       	sbiw	r24, 0x00	; 0
    21ec:	61 f0       	breq	.+24     	; 0x2206 <GPIO_voidWriteLowNipple+0x54>
    21ee:	4a c0       	rjmp	.+148    	; 0x2284 <GPIO_voidWriteLowNipple+0xd2>
    21f0:	2b 81       	ldd	r18, Y+3	; 0x03
    21f2:	3c 81       	ldd	r19, Y+4	; 0x04
    21f4:	22 30       	cpi	r18, 0x02	; 2
    21f6:	31 05       	cpc	r19, r1
    21f8:	31 f1       	breq	.+76     	; 0x2246 <GPIO_voidWriteLowNipple+0x94>
    21fa:	8b 81       	ldd	r24, Y+3	; 0x03
    21fc:	9c 81       	ldd	r25, Y+4	; 0x04
    21fe:	83 30       	cpi	r24, 0x03	; 3
    2200:	91 05       	cpc	r25, r1
    2202:	89 f1       	breq	.+98     	; 0x2266 <GPIO_voidWriteLowNipple+0xb4>
    2204:	3f c0       	rjmp	.+126    	; 0x2284 <GPIO_voidWriteLowNipple+0xd2>
			case GPIOA :
				PORTA &= 0xF0 ; 
    2206:	ab e3       	ldi	r26, 0x3B	; 59
    2208:	b0 e0       	ldi	r27, 0x00	; 0
    220a:	eb e3       	ldi	r30, 0x3B	; 59
    220c:	f0 e0       	ldi	r31, 0x00	; 0
    220e:	80 81       	ld	r24, Z
    2210:	80 7f       	andi	r24, 0xF0	; 240
    2212:	8c 93       	st	X, r24
				PORTA |= copy_u8Value ;
    2214:	ab e3       	ldi	r26, 0x3B	; 59
    2216:	b0 e0       	ldi	r27, 0x00	; 0
    2218:	eb e3       	ldi	r30, 0x3B	; 59
    221a:	f0 e0       	ldi	r31, 0x00	; 0
    221c:	90 81       	ld	r25, Z
    221e:	8a 81       	ldd	r24, Y+2	; 0x02
    2220:	89 2b       	or	r24, r25
    2222:	8c 93       	st	X, r24
    2224:	2f c0       	rjmp	.+94     	; 0x2284 <GPIO_voidWriteLowNipple+0xd2>
				break;
			case GPIOB :
				PORTB &= 0xF0 ; 
    2226:	a8 e3       	ldi	r26, 0x38	; 56
    2228:	b0 e0       	ldi	r27, 0x00	; 0
    222a:	e8 e3       	ldi	r30, 0x38	; 56
    222c:	f0 e0       	ldi	r31, 0x00	; 0
    222e:	80 81       	ld	r24, Z
    2230:	80 7f       	andi	r24, 0xF0	; 240
    2232:	8c 93       	st	X, r24
				PORTB |= copy_u8Value ;
    2234:	a8 e3       	ldi	r26, 0x38	; 56
    2236:	b0 e0       	ldi	r27, 0x00	; 0
    2238:	e8 e3       	ldi	r30, 0x38	; 56
    223a:	f0 e0       	ldi	r31, 0x00	; 0
    223c:	90 81       	ld	r25, Z
    223e:	8a 81       	ldd	r24, Y+2	; 0x02
    2240:	89 2b       	or	r24, r25
    2242:	8c 93       	st	X, r24
    2244:	1f c0       	rjmp	.+62     	; 0x2284 <GPIO_voidWriteLowNipple+0xd2>
				break;
			case GPIOC :
				PORTC &= 0xF0 ; 
    2246:	a5 e3       	ldi	r26, 0x35	; 53
    2248:	b0 e0       	ldi	r27, 0x00	; 0
    224a:	e5 e3       	ldi	r30, 0x35	; 53
    224c:	f0 e0       	ldi	r31, 0x00	; 0
    224e:	80 81       	ld	r24, Z
    2250:	80 7f       	andi	r24, 0xF0	; 240
    2252:	8c 93       	st	X, r24
				PORTC |= copy_u8Value ;
    2254:	a5 e3       	ldi	r26, 0x35	; 53
    2256:	b0 e0       	ldi	r27, 0x00	; 0
    2258:	e5 e3       	ldi	r30, 0x35	; 53
    225a:	f0 e0       	ldi	r31, 0x00	; 0
    225c:	90 81       	ld	r25, Z
    225e:	8a 81       	ldd	r24, Y+2	; 0x02
    2260:	89 2b       	or	r24, r25
    2262:	8c 93       	st	X, r24
    2264:	0f c0       	rjmp	.+30     	; 0x2284 <GPIO_voidWriteLowNipple+0xd2>
				break;
			case GPIOD :
				PORTD &= 0xF0 ; 
    2266:	a2 e3       	ldi	r26, 0x32	; 50
    2268:	b0 e0       	ldi	r27, 0x00	; 0
    226a:	e2 e3       	ldi	r30, 0x32	; 50
    226c:	f0 e0       	ldi	r31, 0x00	; 0
    226e:	80 81       	ld	r24, Z
    2270:	80 7f       	andi	r24, 0xF0	; 240
    2272:	8c 93       	st	X, r24
				PORTD |= copy_u8Value ;
    2274:	a2 e3       	ldi	r26, 0x32	; 50
    2276:	b0 e0       	ldi	r27, 0x00	; 0
    2278:	e2 e3       	ldi	r30, 0x32	; 50
    227a:	f0 e0       	ldi	r31, 0x00	; 0
    227c:	90 81       	ld	r25, Z
    227e:	8a 81       	ldd	r24, Y+2	; 0x02
    2280:	89 2b       	or	r24, r25
    2282:	8c 93       	st	X, r24
				break;	
		}
	}
    2284:	0f 90       	pop	r0
    2286:	0f 90       	pop	r0
    2288:	0f 90       	pop	r0
    228a:	0f 90       	pop	r0
    228c:	cf 91       	pop	r28
    228e:	df 91       	pop	r29
    2290:	08 95       	ret

00002292 <GPIO_voidWriteHighNipple>:
	void GPIO_voidWriteHighNipple (u8 copy_u8Port , u8 copy_u8Value )
	{
    2292:	df 93       	push	r29
    2294:	cf 93       	push	r28
    2296:	00 d0       	rcall	.+0      	; 0x2298 <GPIO_voidWriteHighNipple+0x6>
    2298:	00 d0       	rcall	.+0      	; 0x229a <GPIO_voidWriteHighNipple+0x8>
    229a:	cd b7       	in	r28, 0x3d	; 61
    229c:	de b7       	in	r29, 0x3e	; 62
    229e:	89 83       	std	Y+1, r24	; 0x01
    22a0:	6a 83       	std	Y+2, r22	; 0x02
		copy_u8Value &= 0xF0;
    22a2:	8a 81       	ldd	r24, Y+2	; 0x02
    22a4:	80 7f       	andi	r24, 0xF0	; 240
    22a6:	8a 83       	std	Y+2, r24	; 0x02
		switch (copy_u8Port) {
    22a8:	89 81       	ldd	r24, Y+1	; 0x01
    22aa:	28 2f       	mov	r18, r24
    22ac:	30 e0       	ldi	r19, 0x00	; 0
    22ae:	3c 83       	std	Y+4, r19	; 0x04
    22b0:	2b 83       	std	Y+3, r18	; 0x03
    22b2:	8b 81       	ldd	r24, Y+3	; 0x03
    22b4:	9c 81       	ldd	r25, Y+4	; 0x04
    22b6:	81 30       	cpi	r24, 0x01	; 1
    22b8:	91 05       	cpc	r25, r1
    22ba:	29 f1       	breq	.+74     	; 0x2306 <GPIO_voidWriteHighNipple+0x74>
    22bc:	2b 81       	ldd	r18, Y+3	; 0x03
    22be:	3c 81       	ldd	r19, Y+4	; 0x04
    22c0:	22 30       	cpi	r18, 0x02	; 2
    22c2:	31 05       	cpc	r19, r1
    22c4:	2c f4       	brge	.+10     	; 0x22d0 <GPIO_voidWriteHighNipple+0x3e>
    22c6:	8b 81       	ldd	r24, Y+3	; 0x03
    22c8:	9c 81       	ldd	r25, Y+4	; 0x04
    22ca:	00 97       	sbiw	r24, 0x00	; 0
    22cc:	61 f0       	breq	.+24     	; 0x22e6 <GPIO_voidWriteHighNipple+0x54>
    22ce:	4a c0       	rjmp	.+148    	; 0x2364 <GPIO_voidWriteHighNipple+0xd2>
    22d0:	2b 81       	ldd	r18, Y+3	; 0x03
    22d2:	3c 81       	ldd	r19, Y+4	; 0x04
    22d4:	22 30       	cpi	r18, 0x02	; 2
    22d6:	31 05       	cpc	r19, r1
    22d8:	31 f1       	breq	.+76     	; 0x2326 <GPIO_voidWriteHighNipple+0x94>
    22da:	8b 81       	ldd	r24, Y+3	; 0x03
    22dc:	9c 81       	ldd	r25, Y+4	; 0x04
    22de:	83 30       	cpi	r24, 0x03	; 3
    22e0:	91 05       	cpc	r25, r1
    22e2:	89 f1       	breq	.+98     	; 0x2346 <GPIO_voidWriteHighNipple+0xb4>
    22e4:	3f c0       	rjmp	.+126    	; 0x2364 <GPIO_voidWriteHighNipple+0xd2>
			case GPIOA :
				PORTA &= 0x0F ; 
    22e6:	ab e3       	ldi	r26, 0x3B	; 59
    22e8:	b0 e0       	ldi	r27, 0x00	; 0
    22ea:	eb e3       	ldi	r30, 0x3B	; 59
    22ec:	f0 e0       	ldi	r31, 0x00	; 0
    22ee:	80 81       	ld	r24, Z
    22f0:	8f 70       	andi	r24, 0x0F	; 15
    22f2:	8c 93       	st	X, r24
				PORTA |= copy_u8Value ;
    22f4:	ab e3       	ldi	r26, 0x3B	; 59
    22f6:	b0 e0       	ldi	r27, 0x00	; 0
    22f8:	eb e3       	ldi	r30, 0x3B	; 59
    22fa:	f0 e0       	ldi	r31, 0x00	; 0
    22fc:	90 81       	ld	r25, Z
    22fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2300:	89 2b       	or	r24, r25
    2302:	8c 93       	st	X, r24
    2304:	2f c0       	rjmp	.+94     	; 0x2364 <GPIO_voidWriteHighNipple+0xd2>
				break;
			case GPIOB :
				PORTB &= 0x0F ; 
    2306:	a8 e3       	ldi	r26, 0x38	; 56
    2308:	b0 e0       	ldi	r27, 0x00	; 0
    230a:	e8 e3       	ldi	r30, 0x38	; 56
    230c:	f0 e0       	ldi	r31, 0x00	; 0
    230e:	80 81       	ld	r24, Z
    2310:	8f 70       	andi	r24, 0x0F	; 15
    2312:	8c 93       	st	X, r24
				PORTB |= copy_u8Value ;
    2314:	a8 e3       	ldi	r26, 0x38	; 56
    2316:	b0 e0       	ldi	r27, 0x00	; 0
    2318:	e8 e3       	ldi	r30, 0x38	; 56
    231a:	f0 e0       	ldi	r31, 0x00	; 0
    231c:	90 81       	ld	r25, Z
    231e:	8a 81       	ldd	r24, Y+2	; 0x02
    2320:	89 2b       	or	r24, r25
    2322:	8c 93       	st	X, r24
    2324:	1f c0       	rjmp	.+62     	; 0x2364 <GPIO_voidWriteHighNipple+0xd2>
				break;
			case GPIOC :
				PORTC &= 0x0F ; 
    2326:	a5 e3       	ldi	r26, 0x35	; 53
    2328:	b0 e0       	ldi	r27, 0x00	; 0
    232a:	e5 e3       	ldi	r30, 0x35	; 53
    232c:	f0 e0       	ldi	r31, 0x00	; 0
    232e:	80 81       	ld	r24, Z
    2330:	8f 70       	andi	r24, 0x0F	; 15
    2332:	8c 93       	st	X, r24
				PORTC |= copy_u8Value ;
    2334:	a5 e3       	ldi	r26, 0x35	; 53
    2336:	b0 e0       	ldi	r27, 0x00	; 0
    2338:	e5 e3       	ldi	r30, 0x35	; 53
    233a:	f0 e0       	ldi	r31, 0x00	; 0
    233c:	90 81       	ld	r25, Z
    233e:	8a 81       	ldd	r24, Y+2	; 0x02
    2340:	89 2b       	or	r24, r25
    2342:	8c 93       	st	X, r24
    2344:	0f c0       	rjmp	.+30     	; 0x2364 <GPIO_voidWriteHighNipple+0xd2>
				break;
			case GPIOD :
				PORTD &= 0x0F ; 
    2346:	a2 e3       	ldi	r26, 0x32	; 50
    2348:	b0 e0       	ldi	r27, 0x00	; 0
    234a:	e2 e3       	ldi	r30, 0x32	; 50
    234c:	f0 e0       	ldi	r31, 0x00	; 0
    234e:	80 81       	ld	r24, Z
    2350:	8f 70       	andi	r24, 0x0F	; 15
    2352:	8c 93       	st	X, r24
				PORTD |= copy_u8Value ;
    2354:	a2 e3       	ldi	r26, 0x32	; 50
    2356:	b0 e0       	ldi	r27, 0x00	; 0
    2358:	e2 e3       	ldi	r30, 0x32	; 50
    235a:	f0 e0       	ldi	r31, 0x00	; 0
    235c:	90 81       	ld	r25, Z
    235e:	8a 81       	ldd	r24, Y+2	; 0x02
    2360:	89 2b       	or	r24, r25
    2362:	8c 93       	st	X, r24
				break;	
		}
	}
    2364:	0f 90       	pop	r0
    2366:	0f 90       	pop	r0
    2368:	0f 90       	pop	r0
    236a:	0f 90       	pop	r0
    236c:	cf 91       	pop	r28
    236e:	df 91       	pop	r29
    2370:	08 95       	ret

00002372 <I2C_voidInit>:

#define F_CPU 8000000UL


void I2C_voidInit (u32 copy_u32Scl)
{
    2372:	0f 93       	push	r16
    2374:	1f 93       	push	r17
    2376:	df 93       	push	r29
    2378:	cf 93       	push	r28
    237a:	00 d0       	rcall	.+0      	; 0x237c <I2C_voidInit+0xa>
    237c:	00 d0       	rcall	.+0      	; 0x237e <I2C_voidInit+0xc>
    237e:	cd b7       	in	r28, 0x3d	; 61
    2380:	de b7       	in	r29, 0x3e	; 62
    2382:	69 83       	std	Y+1, r22	; 0x01
    2384:	7a 83       	std	Y+2, r23	; 0x02
    2386:	8b 83       	std	Y+3, r24	; 0x03
    2388:	9c 83       	std	Y+4, r25	; 0x04
	#if I2C_PreScaler ==1
		CLEAR_BIT(TWSR , TWS1);
    238a:	a1 e2       	ldi	r26, 0x21	; 33
    238c:	b0 e0       	ldi	r27, 0x00	; 0
    238e:	e1 e2       	ldi	r30, 0x21	; 33
    2390:	f0 e0       	ldi	r31, 0x00	; 0
    2392:	80 81       	ld	r24, Z
    2394:	8d 7f       	andi	r24, 0xFD	; 253
    2396:	8c 93       	st	X, r24
		CLEAR_BIT(TWSR , TWS0);
    2398:	a1 e2       	ldi	r26, 0x21	; 33
    239a:	b0 e0       	ldi	r27, 0x00	; 0
    239c:	e1 e2       	ldi	r30, 0x21	; 33
    239e:	f0 e0       	ldi	r31, 0x00	; 0
    23a0:	80 81       	ld	r24, Z
    23a2:	8e 7f       	andi	r24, 0xFE	; 254
    23a4:	8c 93       	st	X, r24
		SET_BIT(TWSR , TWS1);
	#else
		SET_BIT(TWSR , TWS1);
		SET_BIT(TWSR , TWS0);
	#endif
TWBR = (((F_CPU/copy_u32Scl)-16 )/2*(4^I2C_PreScaler));
    23a6:	00 e2       	ldi	r16, 0x20	; 32
    23a8:	10 e0       	ldi	r17, 0x00	; 0
    23aa:	80 e0       	ldi	r24, 0x00	; 0
    23ac:	92 e1       	ldi	r25, 0x12	; 18
    23ae:	aa e7       	ldi	r26, 0x7A	; 122
    23b0:	b0 e0       	ldi	r27, 0x00	; 0
    23b2:	29 81       	ldd	r18, Y+1	; 0x01
    23b4:	3a 81       	ldd	r19, Y+2	; 0x02
    23b6:	4b 81       	ldd	r20, Y+3	; 0x03
    23b8:	5c 81       	ldd	r21, Y+4	; 0x04
    23ba:	bc 01       	movw	r22, r24
    23bc:	cd 01       	movw	r24, r26
    23be:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <__udivmodsi4>
    23c2:	da 01       	movw	r26, r20
    23c4:	c9 01       	movw	r24, r18
    23c6:	40 97       	sbiw	r24, 0x10	; 16
    23c8:	a1 09       	sbc	r26, r1
    23ca:	b1 09       	sbc	r27, r1
    23cc:	9c 01       	movw	r18, r24
    23ce:	ad 01       	movw	r20, r26
    23d0:	56 95       	lsr	r21
    23d2:	47 95       	ror	r20
    23d4:	37 95       	ror	r19
    23d6:	27 95       	ror	r18
    23d8:	da 01       	movw	r26, r20
    23da:	c9 01       	movw	r24, r18
    23dc:	88 0f       	add	r24, r24
    23de:	99 1f       	adc	r25, r25
    23e0:	aa 1f       	adc	r26, r26
    23e2:	bb 1f       	adc	r27, r27
    23e4:	88 0f       	add	r24, r24
    23e6:	99 1f       	adc	r25, r25
    23e8:	aa 1f       	adc	r26, r26
    23ea:	bb 1f       	adc	r27, r27
    23ec:	82 0f       	add	r24, r18
    23ee:	93 1f       	adc	r25, r19
    23f0:	a4 1f       	adc	r26, r20
    23f2:	b5 1f       	adc	r27, r21
    23f4:	f8 01       	movw	r30, r16
    23f6:	80 83       	st	Z, r24

}
    23f8:	0f 90       	pop	r0
    23fa:	0f 90       	pop	r0
    23fc:	0f 90       	pop	r0
    23fe:	0f 90       	pop	r0
    2400:	cf 91       	pop	r28
    2402:	df 91       	pop	r29
    2404:	1f 91       	pop	r17
    2406:	0f 91       	pop	r16
    2408:	08 95       	ret

0000240a <I2C_voidStart>:
void I2C_voidStart (void)
{
    240a:	df 93       	push	r29
    240c:	cf 93       	push	r28
    240e:	cd b7       	in	r28, 0x3d	; 61
    2410:	de b7       	in	r29, 0x3e	; 62
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTA);
    2412:	e6 e5       	ldi	r30, 0x56	; 86
    2414:	f0 e0       	ldi	r31, 0x00	; 0
    2416:	84 ea       	ldi	r24, 0xA4	; 164
    2418:	80 83       	st	Z, r24
	while (GET_BIT(TWCR , TWINT) == 0);
    241a:	e6 e5       	ldi	r30, 0x56	; 86
    241c:	f0 e0       	ldi	r31, 0x00	; 0
    241e:	80 81       	ld	r24, Z
    2420:	88 1f       	adc	r24, r24
    2422:	88 27       	eor	r24, r24
    2424:	88 1f       	adc	r24, r24
    2426:	88 2f       	mov	r24, r24
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	90 70       	andi	r25, 0x00	; 0
    242c:	00 97       	sbiw	r24, 0x00	; 0
    242e:	a9 f3       	breq	.-22     	; 0x241a <I2C_voidStart+0x10>
	while ((TWSR&=0xF8) != StartHasBeenSent);
    2430:	a1 e2       	ldi	r26, 0x21	; 33
    2432:	b0 e0       	ldi	r27, 0x00	; 0
    2434:	e1 e2       	ldi	r30, 0x21	; 33
    2436:	f0 e0       	ldi	r31, 0x00	; 0
    2438:	80 81       	ld	r24, Z
    243a:	88 7f       	andi	r24, 0xF8	; 248
    243c:	8c 93       	st	X, r24
    243e:	8c 91       	ld	r24, X
    2440:	88 30       	cpi	r24, 0x08	; 8
    2442:	b1 f7       	brne	.-20     	; 0x2430 <I2C_voidStart+0x26>

}
    2444:	cf 91       	pop	r28
    2446:	df 91       	pop	r29
    2448:	08 95       	ret

0000244a <I2C_voidWriteAddress>:
void I2C_voidWriteAddress (u8 copy_u8Address)
{
    244a:	df 93       	push	r29
    244c:	cf 93       	push	r28
    244e:	0f 92       	push	r0
    2450:	cd b7       	in	r28, 0x3d	; 61
    2452:	de b7       	in	r29, 0x3e	; 62
    2454:	89 83       	std	Y+1, r24	; 0x01
	TWDR = copy_u8Address ;
    2456:	e3 e2       	ldi	r30, 0x23	; 35
    2458:	f0 e0       	ldi	r31, 0x00	; 0
    245a:	89 81       	ldd	r24, Y+1	; 0x01
    245c:	80 83       	st	Z, r24
	TWCR=(1<<TWINT)|(1<<TWEN);
    245e:	e6 e5       	ldi	r30, 0x56	; 86
    2460:	f0 e0       	ldi	r31, 0x00	; 0
    2462:	84 e8       	ldi	r24, 0x84	; 132
    2464:	80 83       	st	Z, r24
	while (GET_BIT(TWCR , TWINT) == 0);
    2466:	e6 e5       	ldi	r30, 0x56	; 86
    2468:	f0 e0       	ldi	r31, 0x00	; 0
    246a:	80 81       	ld	r24, Z
    246c:	88 1f       	adc	r24, r24
    246e:	88 27       	eor	r24, r24
    2470:	88 1f       	adc	r24, r24
    2472:	88 2f       	mov	r24, r24
    2474:	90 e0       	ldi	r25, 0x00	; 0
    2476:	90 70       	andi	r25, 0x00	; 0
    2478:	00 97       	sbiw	r24, 0x00	; 0
    247a:	a9 f3       	breq	.-22     	; 0x2466 <I2C_voidWriteAddress+0x1c>
	while ((TWSR&=0xF8) != AddressSentAckRes);
    247c:	a1 e2       	ldi	r26, 0x21	; 33
    247e:	b0 e0       	ldi	r27, 0x00	; 0
    2480:	e1 e2       	ldi	r30, 0x21	; 33
    2482:	f0 e0       	ldi	r31, 0x00	; 0
    2484:	80 81       	ld	r24, Z
    2486:	88 7f       	andi	r24, 0xF8	; 248
    2488:	8c 93       	st	X, r24
    248a:	8c 91       	ld	r24, X
    248c:	88 31       	cpi	r24, 0x18	; 24
    248e:	b1 f7       	brne	.-20     	; 0x247c <I2C_voidWriteAddress+0x32>
}
    2490:	0f 90       	pop	r0
    2492:	cf 91       	pop	r28
    2494:	df 91       	pop	r29
    2496:	08 95       	ret

00002498 <I2C_voidWriteData>:
void I2C_voidWriteData (u8 copy_u8Data)
{
    2498:	df 93       	push	r29
    249a:	cf 93       	push	r28
    249c:	0f 92       	push	r0
    249e:	cd b7       	in	r28, 0x3d	; 61
    24a0:	de b7       	in	r29, 0x3e	; 62
    24a2:	89 83       	std	Y+1, r24	; 0x01
	TWDR = copy_u8Data ;
    24a4:	e3 e2       	ldi	r30, 0x23	; 35
    24a6:	f0 e0       	ldi	r31, 0x00	; 0
    24a8:	89 81       	ldd	r24, Y+1	; 0x01
    24aa:	80 83       	st	Z, r24
	TWCR=(1<<TWINT)|(1<<TWEN);
    24ac:	e6 e5       	ldi	r30, 0x56	; 86
    24ae:	f0 e0       	ldi	r31, 0x00	; 0
    24b0:	84 e8       	ldi	r24, 0x84	; 132
    24b2:	80 83       	st	Z, r24
	while (GET_BIT(TWCR , TWINT) == 0);
    24b4:	e6 e5       	ldi	r30, 0x56	; 86
    24b6:	f0 e0       	ldi	r31, 0x00	; 0
    24b8:	80 81       	ld	r24, Z
    24ba:	88 1f       	adc	r24, r24
    24bc:	88 27       	eor	r24, r24
    24be:	88 1f       	adc	r24, r24
    24c0:	88 2f       	mov	r24, r24
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	90 70       	andi	r25, 0x00	; 0
    24c6:	00 97       	sbiw	r24, 0x00	; 0
    24c8:	a9 f3       	breq	.-22     	; 0x24b4 <I2C_voidWriteData+0x1c>
	while ((TWSR&=0xF8) != DataSentAckRes);
    24ca:	a1 e2       	ldi	r26, 0x21	; 33
    24cc:	b0 e0       	ldi	r27, 0x00	; 0
    24ce:	e1 e2       	ldi	r30, 0x21	; 33
    24d0:	f0 e0       	ldi	r31, 0x00	; 0
    24d2:	80 81       	ld	r24, Z
    24d4:	88 7f       	andi	r24, 0xF8	; 248
    24d6:	8c 93       	st	X, r24
    24d8:	8c 91       	ld	r24, X
    24da:	88 32       	cpi	r24, 0x28	; 40
    24dc:	b1 f7       	brne	.-20     	; 0x24ca <I2C_voidWriteData+0x32>
}
    24de:	0f 90       	pop	r0
    24e0:	cf 91       	pop	r28
    24e2:	df 91       	pop	r29
    24e4:	08 95       	ret

000024e6 <I2C_voidStop>:
void I2C_voidStop	(void)
{
    24e6:	df 93       	push	r29
    24e8:	cf 93       	push	r28
    24ea:	cd b7       	in	r28, 0x3d	; 61
    24ec:	de b7       	in	r29, 0x3e	; 62
	
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
    24ee:	e6 e5       	ldi	r30, 0x56	; 86
    24f0:	f0 e0       	ldi	r31, 0x00	; 0
    24f2:	84 e9       	ldi	r24, 0x94	; 148
    24f4:	80 83       	st	Z, r24
	
}
    24f6:	cf 91       	pop	r28
    24f8:	df 91       	pop	r29
    24fa:	08 95       	ret

000024fc <I2C_voidSetAddress>:
void I2C_voidSetAddress(u8 copy_u8Address)
{
    24fc:	df 93       	push	r29
    24fe:	cf 93       	push	r28
    2500:	0f 92       	push	r0
    2502:	cd b7       	in	r28, 0x3d	; 61
    2504:	de b7       	in	r29, 0x3e	; 62
    2506:	89 83       	std	Y+1, r24	; 0x01
	TWAR = copy_u8Address ;
    2508:	e2 e2       	ldi	r30, 0x22	; 34
    250a:	f0 e0       	ldi	r31, 0x00	; 0
    250c:	89 81       	ldd	r24, Y+1	; 0x01
    250e:	80 83       	st	Z, r24
}
    2510:	0f 90       	pop	r0
    2512:	cf 91       	pop	r28
    2514:	df 91       	pop	r29
    2516:	08 95       	ret

00002518 <I2C_u8SlaveRead>:
u8 I2C_u8SlaveRead (void)
{
    2518:	df 93       	push	r29
    251a:	cf 93       	push	r28
    251c:	cd b7       	in	r28, 0x3d	; 61
    251e:	de b7       	in	r29, 0x3e	; 62
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
    2520:	e6 e5       	ldi	r30, 0x56	; 86
    2522:	f0 e0       	ldi	r31, 0x00	; 0
    2524:	84 ec       	ldi	r24, 0xC4	; 196
    2526:	80 83       	st	Z, r24
	while (GET_BIT(TWCR , TWINT) == 0);
    2528:	e6 e5       	ldi	r30, 0x56	; 86
    252a:	f0 e0       	ldi	r31, 0x00	; 0
    252c:	80 81       	ld	r24, Z
    252e:	88 1f       	adc	r24, r24
    2530:	88 27       	eor	r24, r24
    2532:	88 1f       	adc	r24, r24
    2534:	88 2f       	mov	r24, r24
    2536:	90 e0       	ldi	r25, 0x00	; 0
    2538:	90 70       	andi	r25, 0x00	; 0
    253a:	00 97       	sbiw	r24, 0x00	; 0
    253c:	a9 f3       	breq	.-22     	; 0x2528 <I2C_u8SlaveRead+0x10>
	while ((TWSR&=0xF8) != SlaWResAckReturn);
    253e:	a1 e2       	ldi	r26, 0x21	; 33
    2540:	b0 e0       	ldi	r27, 0x00	; 0
    2542:	e1 e2       	ldi	r30, 0x21	; 33
    2544:	f0 e0       	ldi	r31, 0x00	; 0
    2546:	80 81       	ld	r24, Z
    2548:	88 7f       	andi	r24, 0xF8	; 248
    254a:	8c 93       	st	X, r24
    254c:	8c 91       	ld	r24, X
    254e:	80 36       	cpi	r24, 0x60	; 96
    2550:	b1 f7       	brne	.-20     	; 0x253e <I2C_u8SlaveRead+0x26>
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
    2552:	e6 e5       	ldi	r30, 0x56	; 86
    2554:	f0 e0       	ldi	r31, 0x00	; 0
    2556:	84 ec       	ldi	r24, 0xC4	; 196
    2558:	80 83       	st	Z, r24
	while (GET_BIT(TWCR , TWINT) == 0);
    255a:	e6 e5       	ldi	r30, 0x56	; 86
    255c:	f0 e0       	ldi	r31, 0x00	; 0
    255e:	80 81       	ld	r24, Z
    2560:	88 1f       	adc	r24, r24
    2562:	88 27       	eor	r24, r24
    2564:	88 1f       	adc	r24, r24
    2566:	88 2f       	mov	r24, r24
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	90 70       	andi	r25, 0x00	; 0
    256c:	00 97       	sbiw	r24, 0x00	; 0
    256e:	a9 f3       	breq	.-22     	; 0x255a <I2C_u8SlaveRead+0x42>
	while ((TWSR&=0xF8) != SLADataSentAckRes);
    2570:	a1 e2       	ldi	r26, 0x21	; 33
    2572:	b0 e0       	ldi	r27, 0x00	; 0
    2574:	e1 e2       	ldi	r30, 0x21	; 33
    2576:	f0 e0       	ldi	r31, 0x00	; 0
    2578:	80 81       	ld	r24, Z
    257a:	88 7f       	andi	r24, 0xF8	; 248
    257c:	8c 93       	st	X, r24
    257e:	8c 91       	ld	r24, X
    2580:	80 38       	cpi	r24, 0x80	; 128
    2582:	b1 f7       	brne	.-20     	; 0x2570 <I2C_u8SlaveRead+0x58>
	return TWDR ;
    2584:	e3 e2       	ldi	r30, 0x23	; 35
    2586:	f0 e0       	ldi	r31, 0x00	; 0
    2588:	80 81       	ld	r24, Z
	
}
    258a:	cf 91       	pop	r28
    258c:	df 91       	pop	r29
    258e:	08 95       	ret

00002590 <I2C_repeated_start>:
void I2C_repeated_start(void)
	{
    2590:	df 93       	push	r29
    2592:	cf 93       	push	r28
    2594:	cd b7       	in	r28, 0x3d	; 61
    2596:	de b7       	in	r29, 0x3e	; 62
		TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTA);
    2598:	e6 e5       	ldi	r30, 0x56	; 86
    259a:	f0 e0       	ldi	r31, 0x00	; 0
    259c:	84 ea       	ldi	r24, 0xA4	; 164
    259e:	80 83       	st	Z, r24
		while(GET_BIT(TWCR,TWINT)==0); //wait to finish
    25a0:	e6 e5       	ldi	r30, 0x56	; 86
    25a2:	f0 e0       	ldi	r31, 0x00	; 0
    25a4:	80 81       	ld	r24, Z
    25a6:	88 1f       	adc	r24, r24
    25a8:	88 27       	eor	r24, r24
    25aa:	88 1f       	adc	r24, r24
    25ac:	88 2f       	mov	r24, r24
    25ae:	90 e0       	ldi	r25, 0x00	; 0
    25b0:	90 70       	andi	r25, 0x00	; 0
    25b2:	00 97       	sbiw	r24, 0x00	; 0
    25b4:	a9 f3       	breq	.-22     	; 0x25a0 <I2C_repeated_start+0x10>
		while ((TWSR & 0XF8) != 0x10); // repeated start condition has been transmitted
    25b6:	e1 e2       	ldi	r30, 0x21	; 33
    25b8:	f0 e0       	ldi	r31, 0x00	; 0
    25ba:	80 81       	ld	r24, Z
    25bc:	88 2f       	mov	r24, r24
    25be:	90 e0       	ldi	r25, 0x00	; 0
    25c0:	88 7f       	andi	r24, 0xF8	; 248
    25c2:	90 70       	andi	r25, 0x00	; 0
    25c4:	80 31       	cpi	r24, 0x10	; 16
    25c6:	91 05       	cpc	r25, r1
    25c8:	b1 f7       	brne	.-20     	; 0x25b6 <I2C_repeated_start+0x26>
	}
    25ca:	cf 91       	pop	r28
    25cc:	df 91       	pop	r29
    25ce:	08 95       	ret

000025d0 <I2C_read_with_NACK>:

u8 I2C_read_with_NACK(void)
	{
    25d0:	df 93       	push	r29
    25d2:	cf 93       	push	r28
    25d4:	cd b7       	in	r28, 0x3d	; 61
    25d6:	de b7       	in	r29, 0x3e	; 62
		TWCR=(1<<TWINT)|(1<<TWEN);
    25d8:	e6 e5       	ldi	r30, 0x56	; 86
    25da:	f0 e0       	ldi	r31, 0x00	; 0
    25dc:	84 e8       	ldi	r24, 0x84	; 132
    25de:	80 83       	st	Z, r24
		while(GET_BIT(TWCR,TWINT)==0);
    25e0:	e6 e5       	ldi	r30, 0x56	; 86
    25e2:	f0 e0       	ldi	r31, 0x00	; 0
    25e4:	80 81       	ld	r24, Z
    25e6:	88 1f       	adc	r24, r24
    25e8:	88 27       	eor	r24, r24
    25ea:	88 1f       	adc	r24, r24
    25ec:	88 2f       	mov	r24, r24
    25ee:	90 e0       	ldi	r25, 0x00	; 0
    25f0:	90 70       	andi	r25, 0x00	; 0
    25f2:	00 97       	sbiw	r24, 0x00	; 0
    25f4:	a9 f3       	breq	.-22     	; 0x25e0 <I2C_read_with_NACK+0x10>
		while ((TWSR & 0XF8) != 0x58); // data byte has been received and Not ACK has been returned
    25f6:	e1 e2       	ldi	r30, 0x21	; 33
    25f8:	f0 e0       	ldi	r31, 0x00	; 0
    25fa:	80 81       	ld	r24, Z
    25fc:	88 2f       	mov	r24, r24
    25fe:	90 e0       	ldi	r25, 0x00	; 0
    2600:	88 7f       	andi	r24, 0xF8	; 248
    2602:	90 70       	andi	r25, 0x00	; 0
    2604:	88 35       	cpi	r24, 0x58	; 88
    2606:	91 05       	cpc	r25, r1
    2608:	b1 f7       	brne	.-20     	; 0x25f6 <I2C_read_with_NACK+0x26>
		return TWDR ;
    260a:	e3 e2       	ldi	r30, 0x23	; 35
    260c:	f0 e0       	ldi	r31, 0x00	; 0
    260e:	80 81       	ld	r24, Z
	}
    2610:	cf 91       	pop	r28
    2612:	df 91       	pop	r29
    2614:	08 95       	ret

00002616 <I2C_write_address_and_read>:
void I2C_write_address_and_read(u8 address)
	{
    2616:	df 93       	push	r29
    2618:	cf 93       	push	r28
    261a:	0f 92       	push	r0
    261c:	cd b7       	in	r28, 0x3d	; 61
    261e:	de b7       	in	r29, 0x3e	; 62
    2620:	89 83       	std	Y+1, r24	; 0x01
		TWDR=address;
    2622:	e3 e2       	ldi	r30, 0x23	; 35
    2624:	f0 e0       	ldi	r31, 0x00	; 0
    2626:	89 81       	ldd	r24, Y+1	; 0x01
    2628:	80 83       	st	Z, r24
		TWCR=(1<<TWINT)|(1<<TWEN);
    262a:	e6 e5       	ldi	r30, 0x56	; 86
    262c:	f0 e0       	ldi	r31, 0x00	; 0
    262e:	84 e8       	ldi	r24, 0x84	; 132
    2630:	80 83       	st	Z, r24
		while(GET_BIT(TWCR,TWINT)==0); //wait to finish
    2632:	e6 e5       	ldi	r30, 0x56	; 86
    2634:	f0 e0       	ldi	r31, 0x00	; 0
    2636:	80 81       	ld	r24, Z
    2638:	88 1f       	adc	r24, r24
    263a:	88 27       	eor	r24, r24
    263c:	88 1f       	adc	r24, r24
    263e:	88 2f       	mov	r24, r24
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	90 70       	andi	r25, 0x00	; 0
    2644:	00 97       	sbiw	r24, 0x00	; 0
    2646:	a9 f3       	breq	.-22     	; 0x2632 <I2C_write_address_and_read+0x1c>
		while ((TWSR & 0XF8) != 0x40); // SLA+read has been transmitted and ACK has been received
    2648:	e1 e2       	ldi	r30, 0x21	; 33
    264a:	f0 e0       	ldi	r31, 0x00	; 0
    264c:	80 81       	ld	r24, Z
    264e:	88 2f       	mov	r24, r24
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	88 7f       	andi	r24, 0xF8	; 248
    2654:	90 70       	andi	r25, 0x00	; 0
    2656:	80 34       	cpi	r24, 0x40	; 64
    2658:	91 05       	cpc	r25, r1
    265a:	b1 f7       	brne	.-20     	; 0x2648 <I2C_write_address_and_read+0x32>
	}
    265c:	0f 90       	pop	r0
    265e:	cf 91       	pop	r28
    2660:	df 91       	pop	r29
    2662:	08 95       	ret

00002664 <I2Cfun_voidMasterSend>:




void I2Cfun_voidMasterSend(u8 copy_u8SlaveAddress , u8 copy_u8Data)
{
    2664:	df 93       	push	r29
    2666:	cf 93       	push	r28
    2668:	00 d0       	rcall	.+0      	; 0x266a <I2Cfun_voidMasterSend+0x6>
    266a:	cd b7       	in	r28, 0x3d	; 61
    266c:	de b7       	in	r29, 0x3e	; 62
    266e:	89 83       	std	Y+1, r24	; 0x01
    2670:	6a 83       	std	Y+2, r22	; 0x02
		I2C_voidStart(); // transmit start condition
    2672:	0e 94 05 12 	call	0x240a	; 0x240a <I2C_voidStart>
	    I2C_voidWriteAddress(copy_u8SlaveAddress); // transmit SLA+W
    2676:	89 81       	ldd	r24, Y+1	; 0x01
    2678:	0e 94 25 12 	call	0x244a	; 0x244a <I2C_voidWriteAddress>
	    I2C_voidWriteData(copy_u8Data); // transmit data
    267c:	8a 81       	ldd	r24, Y+2	; 0x02
    267e:	0e 94 4c 12 	call	0x2498	; 0x2498 <I2C_voidWriteData>
	    I2C_voidStop(); // transmit stop condition
    2682:	0e 94 73 12 	call	0x24e6	; 0x24e6 <I2C_voidStop>
}
    2686:	0f 90       	pop	r0
    2688:	0f 90       	pop	r0
    268a:	cf 91       	pop	r28
    268c:	df 91       	pop	r29
    268e:	08 95       	ret

00002690 <I2Cfun_voidMasterRead>:
u8 I2Cfun_voidMasterRead(u8 copy_u8SlaveAddress)
{
    2690:	df 93       	push	r29
    2692:	cf 93       	push	r28
    2694:	00 d0       	rcall	.+0      	; 0x2696 <I2Cfun_voidMasterRead+0x6>
    2696:	cd b7       	in	r28, 0x3d	; 61
    2698:	de b7       	in	r29, 0x3e	; 62
    269a:	8a 83       	std	Y+2, r24	; 0x02
	u8 RETURN;
	I2C_voidStart(); // transmit start condition
    269c:	0e 94 05 12 	call	0x240a	; 0x240a <I2C_voidStart>
	I2C_voidWriteAddress(copy_u8SlaveAddress); // transmit device address and Write
    26a0:	8a 81       	ldd	r24, Y+2	; 0x02
    26a2:	0e 94 25 12 	call	0x244a	; 0x244a <I2C_voidWriteAddress>
	I2C_repeated_start(); // transmit repeated start condition
    26a6:	0e 94 c8 12 	call	0x2590	; 0x2590 <I2C_repeated_start>
	I2C_write_address_and_read(copy_u8SlaveAddress+ 1); // transmit device address and read
    26aa:	8a 81       	ldd	r24, Y+2	; 0x02
    26ac:	8f 5f       	subi	r24, 0xFF	; 255
    26ae:	0e 94 0b 13 	call	0x2616	; 0x2616 <I2C_write_address_and_read>
	RETURN=I2C_read_with_NACK();
    26b2:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <I2C_read_with_NACK>
    26b6:	89 83       	std	Y+1, r24	; 0x01
	I2C_voidStop();
    26b8:	0e 94 73 12 	call	0x24e6	; 0x24e6 <I2C_voidStop>
	return RETURN ;
    26bc:	89 81       	ldd	r24, Y+1	; 0x01
}
    26be:	0f 90       	pop	r0
    26c0:	0f 90       	pop	r0
    26c2:	cf 91       	pop	r28
    26c4:	df 91       	pop	r29
    26c6:	08 95       	ret

000026c8 <Keypad_voidinit>:

u8 Keypad [4][4] = { {'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A', '0','=','+'}};
//u8 Keypad [4][4] = { {'1','2','3','A'},{'4','5','6','B'},{'7','8','9','C'},{'*', '0','#','D'}};

void Keypad_voidinit (u8 copy_u8Port )
{
    26c8:	df 93       	push	r29
    26ca:	cf 93       	push	r28
    26cc:	0f 92       	push	r0
    26ce:	cd b7       	in	r28, 0x3d	; 61
    26d0:	de b7       	in	r29, 0x3e	; 62
    26d2:	89 83       	std	Y+1, r24	; 0x01
	GPIO_voidSetLowNippleDDR (copy_u8Port , OUTPUT);
    26d4:	89 81       	ldd	r24, Y+1	; 0x01
    26d6:	61 e0       	ldi	r22, 0x01	; 1
    26d8:	0e 94 a2 10 	call	0x2144	; 0x2144 <GPIO_voidSetLowNippleDDR>
	GPIO_voidSetHighNippleDDR (copy_u8Port , INPUT);
    26dc:	89 81       	ldd	r24, Y+1	; 0x01
    26de:	60 e0       	ldi	r22, 0x00	; 0
    26e0:	0e 94 bd 10 	call	0x217a	; 0x217a <GPIO_voidSetHighNippleDDR>
	GPIO_voidWriteHighNipple (copy_u8Port , 0xF0);
    26e4:	89 81       	ldd	r24, Y+1	; 0x01
    26e6:	60 ef       	ldi	r22, 0xF0	; 240
    26e8:	0e 94 49 11 	call	0x2292	; 0x2292 <GPIO_voidWriteHighNipple>
}
    26ec:	0f 90       	pop	r0
    26ee:	cf 91       	pop	r28
    26f0:	df 91       	pop	r29
    26f2:	08 95       	ret

000026f4 <Keypad_voidCheckVal>:
u8 Keypad_voidCheckVal (u8 copy_u8Port)
{
    26f4:	df 93       	push	r29
    26f6:	cf 93       	push	r28
    26f8:	00 d0       	rcall	.+0      	; 0x26fa <Keypad_voidCheckVal+0x6>
    26fa:	00 d0       	rcall	.+0      	; 0x26fc <Keypad_voidCheckVal+0x8>
    26fc:	0f 92       	push	r0
    26fe:	cd b7       	in	r28, 0x3d	; 61
    2700:	de b7       	in	r29, 0x3e	; 62
    2702:	8d 83       	std	Y+5, r24	; 0x05


	u8 Row , Column , Return  , Value = NOTPRESSED;
    2704:	8f ef       	ldi	r24, 0xFF	; 255
    2706:	89 83       	std	Y+1, r24	; 0x01
	for (Row = 0 ; Row < 4 ; Row ++)
    2708:	1c 82       	std	Y+4, r1	; 0x04
    270a:	35 c0       	rjmp	.+106    	; 0x2776 <Keypad_voidCheckVal+0x82>
		{
			GPIO_voidWriteLowNipple	(copy_u8Port , 0x0F);
    270c:	8d 81       	ldd	r24, Y+5	; 0x05
    270e:	6f e0       	ldi	r22, 0x0F	; 15
    2710:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <GPIO_voidWriteLowNipple>
			GPIO_voidWritePin (copy_u8Port , Row , LOW );
    2714:	8d 81       	ldd	r24, Y+5	; 0x05
    2716:	6c 81       	ldd	r22, Y+4	; 0x04
    2718:	40 e0       	ldi	r20, 0x00	; 0
    271a:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <GPIO_voidWritePin>
			
			for (Column = 0 ; Column <4 ; Column ++ )
    271e:	1b 82       	std	Y+3, r1	; 0x03
    2720:	21 c0       	rjmp	.+66     	; 0x2764 <Keypad_voidCheckVal+0x70>
			{
				
			Return=GPIO_u8ReadPin(copy_u8Port ,( Column+4 ));
    2722:	8b 81       	ldd	r24, Y+3	; 0x03
    2724:	98 2f       	mov	r25, r24
    2726:	9c 5f       	subi	r25, 0xFC	; 252
    2728:	8d 81       	ldd	r24, Y+5	; 0x05
    272a:	69 2f       	mov	r22, r25
    272c:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <GPIO_u8ReadPin>
    2730:	8a 83       	std	Y+2, r24	; 0x02
		
			if (Return == 0 )
    2732:	8a 81       	ldd	r24, Y+2	; 0x02
    2734:	88 23       	and	r24, r24
    2736:	99 f4       	brne	.+38     	; 0x275e <Keypad_voidCheckVal+0x6a>
			{
				Value = Keypad [Row][Column];
    2738:	8c 81       	ldd	r24, Y+4	; 0x04
    273a:	48 2f       	mov	r20, r24
    273c:	50 e0       	ldi	r21, 0x00	; 0
    273e:	8b 81       	ldd	r24, Y+3	; 0x03
    2740:	28 2f       	mov	r18, r24
    2742:	30 e0       	ldi	r19, 0x00	; 0
    2744:	ca 01       	movw	r24, r20
    2746:	88 0f       	add	r24, r24
    2748:	99 1f       	adc	r25, r25
    274a:	88 0f       	add	r24, r24
    274c:	99 1f       	adc	r25, r25
    274e:	82 0f       	add	r24, r18
    2750:	93 1f       	adc	r25, r19
    2752:	fc 01       	movw	r30, r24
    2754:	e5 50       	subi	r30, 0x05	; 5
    2756:	fe 4f       	sbci	r31, 0xFE	; 254
    2758:	80 81       	ld	r24, Z
    275a:	89 83       	std	Y+1, r24	; 0x01
    275c:	06 c0       	rjmp	.+12     	; 0x276a <Keypad_voidCheckVal+0x76>
	for (Row = 0 ; Row < 4 ; Row ++)
		{
			GPIO_voidWriteLowNipple	(copy_u8Port , 0x0F);
			GPIO_voidWritePin (copy_u8Port , Row , LOW );
			
			for (Column = 0 ; Column <4 ; Column ++ )
    275e:	8b 81       	ldd	r24, Y+3	; 0x03
    2760:	8f 5f       	subi	r24, 0xFF	; 255
    2762:	8b 83       	std	Y+3, r24	; 0x03
    2764:	8b 81       	ldd	r24, Y+3	; 0x03
    2766:	84 30       	cpi	r24, 0x04	; 4
    2768:	e0 f2       	brcs	.-72     	; 0x2722 <Keypad_voidCheckVal+0x2e>
				Value = Keypad [Row][Column];
				break;
			}
				
			}
			if (Return ==0)
    276a:	8a 81       	ldd	r24, Y+2	; 0x02
    276c:	88 23       	and	r24, r24
    276e:	31 f0       	breq	.+12     	; 0x277c <Keypad_voidCheckVal+0x88>
u8 Keypad_voidCheckVal (u8 copy_u8Port)
{


	u8 Row , Column , Return  , Value = NOTPRESSED;
	for (Row = 0 ; Row < 4 ; Row ++)
    2770:	8c 81       	ldd	r24, Y+4	; 0x04
    2772:	8f 5f       	subi	r24, 0xFF	; 255
    2774:	8c 83       	std	Y+4, r24	; 0x04
    2776:	8c 81       	ldd	r24, Y+4	; 0x04
    2778:	84 30       	cpi	r24, 0x04	; 4
    277a:	40 f2       	brcs	.-112    	; 0x270c <Keypad_voidCheckVal+0x18>
			if (Return ==0)
			{
			break;
			}
		}
		return Value ;
    277c:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    277e:	0f 90       	pop	r0
    2780:	0f 90       	pop	r0
    2782:	0f 90       	pop	r0
    2784:	0f 90       	pop	r0
    2786:	0f 90       	pop	r0
    2788:	cf 91       	pop	r28
    278a:	df 91       	pop	r29
    278c:	08 95       	ret

0000278e <LCD_voidInit>:
#include "util/delay.h"



void LCD_voidInit()
{
    278e:	0f 93       	push	r16
    2790:	1f 93       	push	r17
    2792:	df 93       	push	r29
    2794:	cf 93       	push	r28
    2796:	cd b7       	in	r28, 0x3d	; 61
    2798:	de b7       	in	r29, 0x3e	; 62
    279a:	c4 55       	subi	r28, 0x54	; 84
    279c:	d0 40       	sbci	r29, 0x00	; 0
    279e:	0f b6       	in	r0, 0x3f	; 63
    27a0:	f8 94       	cli
    27a2:	de bf       	out	0x3e, r29	; 62
    27a4:	0f be       	out	0x3f, r0	; 63
    27a6:	cd bf       	out	0x3d, r28	; 61
    27a8:	fe 01       	movw	r30, r28
    27aa:	ef 5a       	subi	r30, 0xAF	; 175
    27ac:	ff 4f       	sbci	r31, 0xFF	; 255
    27ae:	80 e0       	ldi	r24, 0x00	; 0
    27b0:	90 e0       	ldi	r25, 0x00	; 0
    27b2:	a0 e2       	ldi	r26, 0x20	; 32
    27b4:	b2 e4       	ldi	r27, 0x42	; 66
    27b6:	80 83       	st	Z, r24
    27b8:	91 83       	std	Z+1, r25	; 0x01
    27ba:	a2 83       	std	Z+2, r26	; 0x02
    27bc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27be:	8e 01       	movw	r16, r28
    27c0:	03 5b       	subi	r16, 0xB3	; 179
    27c2:	1f 4f       	sbci	r17, 0xFF	; 255
    27c4:	fe 01       	movw	r30, r28
    27c6:	ef 5a       	subi	r30, 0xAF	; 175
    27c8:	ff 4f       	sbci	r31, 0xFF	; 255
    27ca:	60 81       	ld	r22, Z
    27cc:	71 81       	ldd	r23, Z+1	; 0x01
    27ce:	82 81       	ldd	r24, Z+2	; 0x02
    27d0:	93 81       	ldd	r25, Z+3	; 0x03
    27d2:	20 e0       	ldi	r18, 0x00	; 0
    27d4:	30 e0       	ldi	r19, 0x00	; 0
    27d6:	4a ef       	ldi	r20, 0xFA	; 250
    27d8:	54 e4       	ldi	r21, 0x44	; 68
    27da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27de:	dc 01       	movw	r26, r24
    27e0:	cb 01       	movw	r24, r22
    27e2:	f8 01       	movw	r30, r16
    27e4:	80 83       	st	Z, r24
    27e6:	91 83       	std	Z+1, r25	; 0x01
    27e8:	a2 83       	std	Z+2, r26	; 0x02
    27ea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    27ec:	fe 01       	movw	r30, r28
    27ee:	e3 5b       	subi	r30, 0xB3	; 179
    27f0:	ff 4f       	sbci	r31, 0xFF	; 255
    27f2:	60 81       	ld	r22, Z
    27f4:	71 81       	ldd	r23, Z+1	; 0x01
    27f6:	82 81       	ldd	r24, Z+2	; 0x02
    27f8:	93 81       	ldd	r25, Z+3	; 0x03
    27fa:	20 e0       	ldi	r18, 0x00	; 0
    27fc:	30 e0       	ldi	r19, 0x00	; 0
    27fe:	40 e8       	ldi	r20, 0x80	; 128
    2800:	5f e3       	ldi	r21, 0x3F	; 63
    2802:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2806:	88 23       	and	r24, r24
    2808:	44 f4       	brge	.+16     	; 0x281a <LCD_voidInit+0x8c>
		__ticks = 1;
    280a:	fe 01       	movw	r30, r28
    280c:	e5 5b       	subi	r30, 0xB5	; 181
    280e:	ff 4f       	sbci	r31, 0xFF	; 255
    2810:	81 e0       	ldi	r24, 0x01	; 1
    2812:	90 e0       	ldi	r25, 0x00	; 0
    2814:	91 83       	std	Z+1, r25	; 0x01
    2816:	80 83       	st	Z, r24
    2818:	64 c0       	rjmp	.+200    	; 0x28e2 <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    281a:	fe 01       	movw	r30, r28
    281c:	e3 5b       	subi	r30, 0xB3	; 179
    281e:	ff 4f       	sbci	r31, 0xFF	; 255
    2820:	60 81       	ld	r22, Z
    2822:	71 81       	ldd	r23, Z+1	; 0x01
    2824:	82 81       	ldd	r24, Z+2	; 0x02
    2826:	93 81       	ldd	r25, Z+3	; 0x03
    2828:	20 e0       	ldi	r18, 0x00	; 0
    282a:	3f ef       	ldi	r19, 0xFF	; 255
    282c:	4f e7       	ldi	r20, 0x7F	; 127
    282e:	57 e4       	ldi	r21, 0x47	; 71
    2830:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2834:	18 16       	cp	r1, r24
    2836:	0c f0       	brlt	.+2      	; 0x283a <LCD_voidInit+0xac>
    2838:	43 c0       	rjmp	.+134    	; 0x28c0 <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    283a:	fe 01       	movw	r30, r28
    283c:	ef 5a       	subi	r30, 0xAF	; 175
    283e:	ff 4f       	sbci	r31, 0xFF	; 255
    2840:	60 81       	ld	r22, Z
    2842:	71 81       	ldd	r23, Z+1	; 0x01
    2844:	82 81       	ldd	r24, Z+2	; 0x02
    2846:	93 81       	ldd	r25, Z+3	; 0x03
    2848:	20 e0       	ldi	r18, 0x00	; 0
    284a:	30 e0       	ldi	r19, 0x00	; 0
    284c:	40 e2       	ldi	r20, 0x20	; 32
    284e:	51 e4       	ldi	r21, 0x41	; 65
    2850:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2854:	dc 01       	movw	r26, r24
    2856:	cb 01       	movw	r24, r22
    2858:	8e 01       	movw	r16, r28
    285a:	05 5b       	subi	r16, 0xB5	; 181
    285c:	1f 4f       	sbci	r17, 0xFF	; 255
    285e:	bc 01       	movw	r22, r24
    2860:	cd 01       	movw	r24, r26
    2862:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2866:	dc 01       	movw	r26, r24
    2868:	cb 01       	movw	r24, r22
    286a:	f8 01       	movw	r30, r16
    286c:	91 83       	std	Z+1, r25	; 0x01
    286e:	80 83       	st	Z, r24
    2870:	1f c0       	rjmp	.+62     	; 0x28b0 <LCD_voidInit+0x122>
    2872:	fe 01       	movw	r30, r28
    2874:	e7 5b       	subi	r30, 0xB7	; 183
    2876:	ff 4f       	sbci	r31, 0xFF	; 255
    2878:	88 ec       	ldi	r24, 0xC8	; 200
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	91 83       	std	Z+1, r25	; 0x01
    287e:	80 83       	st	Z, r24
    2880:	fe 01       	movw	r30, r28
    2882:	e7 5b       	subi	r30, 0xB7	; 183
    2884:	ff 4f       	sbci	r31, 0xFF	; 255
    2886:	80 81       	ld	r24, Z
    2888:	91 81       	ldd	r25, Z+1	; 0x01
    288a:	01 97       	sbiw	r24, 0x01	; 1
    288c:	f1 f7       	brne	.-4      	; 0x288a <LCD_voidInit+0xfc>
    288e:	fe 01       	movw	r30, r28
    2890:	e7 5b       	subi	r30, 0xB7	; 183
    2892:	ff 4f       	sbci	r31, 0xFF	; 255
    2894:	91 83       	std	Z+1, r25	; 0x01
    2896:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2898:	de 01       	movw	r26, r28
    289a:	a5 5b       	subi	r26, 0xB5	; 181
    289c:	bf 4f       	sbci	r27, 0xFF	; 255
    289e:	fe 01       	movw	r30, r28
    28a0:	e5 5b       	subi	r30, 0xB5	; 181
    28a2:	ff 4f       	sbci	r31, 0xFF	; 255
    28a4:	80 81       	ld	r24, Z
    28a6:	91 81       	ldd	r25, Z+1	; 0x01
    28a8:	01 97       	sbiw	r24, 0x01	; 1
    28aa:	11 96       	adiw	r26, 0x01	; 1
    28ac:	9c 93       	st	X, r25
    28ae:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28b0:	fe 01       	movw	r30, r28
    28b2:	e5 5b       	subi	r30, 0xB5	; 181
    28b4:	ff 4f       	sbci	r31, 0xFF	; 255
    28b6:	80 81       	ld	r24, Z
    28b8:	91 81       	ldd	r25, Z+1	; 0x01
    28ba:	00 97       	sbiw	r24, 0x00	; 0
    28bc:	d1 f6       	brne	.-76     	; 0x2872 <LCD_voidInit+0xe4>
    28be:	27 c0       	rjmp	.+78     	; 0x290e <LCD_voidInit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28c0:	8e 01       	movw	r16, r28
    28c2:	05 5b       	subi	r16, 0xB5	; 181
    28c4:	1f 4f       	sbci	r17, 0xFF	; 255
    28c6:	fe 01       	movw	r30, r28
    28c8:	e3 5b       	subi	r30, 0xB3	; 179
    28ca:	ff 4f       	sbci	r31, 0xFF	; 255
    28cc:	60 81       	ld	r22, Z
    28ce:	71 81       	ldd	r23, Z+1	; 0x01
    28d0:	82 81       	ldd	r24, Z+2	; 0x02
    28d2:	93 81       	ldd	r25, Z+3	; 0x03
    28d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28d8:	dc 01       	movw	r26, r24
    28da:	cb 01       	movw	r24, r22
    28dc:	f8 01       	movw	r30, r16
    28de:	91 83       	std	Z+1, r25	; 0x01
    28e0:	80 83       	st	Z, r24
    28e2:	de 01       	movw	r26, r28
    28e4:	a9 5b       	subi	r26, 0xB9	; 185
    28e6:	bf 4f       	sbci	r27, 0xFF	; 255
    28e8:	fe 01       	movw	r30, r28
    28ea:	e5 5b       	subi	r30, 0xB5	; 181
    28ec:	ff 4f       	sbci	r31, 0xFF	; 255
    28ee:	80 81       	ld	r24, Z
    28f0:	91 81       	ldd	r25, Z+1	; 0x01
    28f2:	8d 93       	st	X+, r24
    28f4:	9c 93       	st	X, r25
    28f6:	fe 01       	movw	r30, r28
    28f8:	e9 5b       	subi	r30, 0xB9	; 185
    28fa:	ff 4f       	sbci	r31, 0xFF	; 255
    28fc:	80 81       	ld	r24, Z
    28fe:	91 81       	ldd	r25, Z+1	; 0x01
    2900:	01 97       	sbiw	r24, 0x01	; 1
    2902:	f1 f7       	brne	.-4      	; 0x2900 <LCD_voidInit+0x172>
    2904:	fe 01       	movw	r30, r28
    2906:	e9 5b       	subi	r30, 0xB9	; 185
    2908:	ff 4f       	sbci	r31, 0xFF	; 255
    290a:	91 83       	std	Z+1, r25	; 0x01
    290c:	80 83       	st	Z, r24
	_delay_ms(40);
	
	GPIO_voidSetPinDDR(LCD_RSPORT , LCD_RSPIN , OUTPUT);
    290e:	80 e0       	ldi	r24, 0x00	; 0
    2910:	66 e0       	ldi	r22, 0x06	; 6
    2912:	41 e0       	ldi	r20, 0x01	; 1
    2914:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <GPIO_voidSetPinDDR>
	GPIO_voidSetPinDDR(LCD_RWPORT , LCD_RWPIN , OUTPUT);
    2918:	80 e0       	ldi	r24, 0x00	; 0
    291a:	65 e0       	ldi	r22, 0x05	; 5
    291c:	41 e0       	ldi	r20, 0x01	; 1
    291e:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <GPIO_voidSetPinDDR>
	GPIO_voidSetPinDDR(LCD_ENPORT , LCD_ENPIN , OUTPUT);
    2922:	80 e0       	ldi	r24, 0x00	; 0
    2924:	64 e0       	ldi	r22, 0x04	; 4
    2926:	41 e0       	ldi	r20, 0x01	; 1
    2928:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <GPIO_voidSetPinDDR>
		LCD_voidSendCmd(LCD_ENTRY_MODE);
		_delay_ms(1);
		
	#elif LCD_MODE == 1 
		#if LCD_NIBBLE == 0 
			GPIO_voidSetLowNippleDDR(LCD_PORT , OUTPUT);
    292c:	80 e0       	ldi	r24, 0x00	; 0
    292e:	61 e0       	ldi	r22, 0x01	; 1
    2930:	0e 94 a2 10 	call	0x2144	; 0x2144 <GPIO_voidSetLowNippleDDR>
			LCD_voidSendCmd(LCD_RETURN_HOME);
    2934:	82 e0       	ldi	r24, 0x02	; 2
    2936:	0e 94 02 17 	call	0x2e04	; 0x2e04 <LCD_voidSendCmd>
    293a:	fe 01       	movw	r30, r28
    293c:	ed 5b       	subi	r30, 0xBD	; 189
    293e:	ff 4f       	sbci	r31, 0xFF	; 255
    2940:	80 e0       	ldi	r24, 0x00	; 0
    2942:	90 e0       	ldi	r25, 0x00	; 0
    2944:	a0 e7       	ldi	r26, 0x70	; 112
    2946:	b1 e4       	ldi	r27, 0x41	; 65
    2948:	80 83       	st	Z, r24
    294a:	91 83       	std	Z+1, r25	; 0x01
    294c:	a2 83       	std	Z+2, r26	; 0x02
    294e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2950:	8e 01       	movw	r16, r28
    2952:	01 5c       	subi	r16, 0xC1	; 193
    2954:	1f 4f       	sbci	r17, 0xFF	; 255
    2956:	fe 01       	movw	r30, r28
    2958:	ed 5b       	subi	r30, 0xBD	; 189
    295a:	ff 4f       	sbci	r31, 0xFF	; 255
    295c:	60 81       	ld	r22, Z
    295e:	71 81       	ldd	r23, Z+1	; 0x01
    2960:	82 81       	ldd	r24, Z+2	; 0x02
    2962:	93 81       	ldd	r25, Z+3	; 0x03
    2964:	20 e0       	ldi	r18, 0x00	; 0
    2966:	30 e0       	ldi	r19, 0x00	; 0
    2968:	4a ef       	ldi	r20, 0xFA	; 250
    296a:	54 e4       	ldi	r21, 0x44	; 68
    296c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2970:	dc 01       	movw	r26, r24
    2972:	cb 01       	movw	r24, r22
    2974:	f8 01       	movw	r30, r16
    2976:	80 83       	st	Z, r24
    2978:	91 83       	std	Z+1, r25	; 0x01
    297a:	a2 83       	std	Z+2, r26	; 0x02
    297c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    297e:	fe 01       	movw	r30, r28
    2980:	ff 96       	adiw	r30, 0x3f	; 63
    2982:	60 81       	ld	r22, Z
    2984:	71 81       	ldd	r23, Z+1	; 0x01
    2986:	82 81       	ldd	r24, Z+2	; 0x02
    2988:	93 81       	ldd	r25, Z+3	; 0x03
    298a:	20 e0       	ldi	r18, 0x00	; 0
    298c:	30 e0       	ldi	r19, 0x00	; 0
    298e:	40 e8       	ldi	r20, 0x80	; 128
    2990:	5f e3       	ldi	r21, 0x3F	; 63
    2992:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2996:	88 23       	and	r24, r24
    2998:	2c f4       	brge	.+10     	; 0x29a4 <LCD_voidInit+0x216>
		__ticks = 1;
    299a:	81 e0       	ldi	r24, 0x01	; 1
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	9e af       	std	Y+62, r25	; 0x3e
    29a0:	8d af       	std	Y+61, r24	; 0x3d
    29a2:	46 c0       	rjmp	.+140    	; 0x2a30 <LCD_voidInit+0x2a2>
	else if (__tmp > 65535)
    29a4:	fe 01       	movw	r30, r28
    29a6:	ff 96       	adiw	r30, 0x3f	; 63
    29a8:	60 81       	ld	r22, Z
    29aa:	71 81       	ldd	r23, Z+1	; 0x01
    29ac:	82 81       	ldd	r24, Z+2	; 0x02
    29ae:	93 81       	ldd	r25, Z+3	; 0x03
    29b0:	20 e0       	ldi	r18, 0x00	; 0
    29b2:	3f ef       	ldi	r19, 0xFF	; 255
    29b4:	4f e7       	ldi	r20, 0x7F	; 127
    29b6:	57 e4       	ldi	r21, 0x47	; 71
    29b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29bc:	18 16       	cp	r1, r24
    29be:	64 f5       	brge	.+88     	; 0x2a18 <LCD_voidInit+0x28a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29c0:	fe 01       	movw	r30, r28
    29c2:	ed 5b       	subi	r30, 0xBD	; 189
    29c4:	ff 4f       	sbci	r31, 0xFF	; 255
    29c6:	60 81       	ld	r22, Z
    29c8:	71 81       	ldd	r23, Z+1	; 0x01
    29ca:	82 81       	ldd	r24, Z+2	; 0x02
    29cc:	93 81       	ldd	r25, Z+3	; 0x03
    29ce:	20 e0       	ldi	r18, 0x00	; 0
    29d0:	30 e0       	ldi	r19, 0x00	; 0
    29d2:	40 e2       	ldi	r20, 0x20	; 32
    29d4:	51 e4       	ldi	r21, 0x41	; 65
    29d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29da:	dc 01       	movw	r26, r24
    29dc:	cb 01       	movw	r24, r22
    29de:	bc 01       	movw	r22, r24
    29e0:	cd 01       	movw	r24, r26
    29e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29e6:	dc 01       	movw	r26, r24
    29e8:	cb 01       	movw	r24, r22
    29ea:	9e af       	std	Y+62, r25	; 0x3e
    29ec:	8d af       	std	Y+61, r24	; 0x3d
    29ee:	0f c0       	rjmp	.+30     	; 0x2a0e <LCD_voidInit+0x280>
    29f0:	88 ec       	ldi	r24, 0xC8	; 200
    29f2:	90 e0       	ldi	r25, 0x00	; 0
    29f4:	9c af       	std	Y+60, r25	; 0x3c
    29f6:	8b af       	std	Y+59, r24	; 0x3b
    29f8:	8b ad       	ldd	r24, Y+59	; 0x3b
    29fa:	9c ad       	ldd	r25, Y+60	; 0x3c
    29fc:	01 97       	sbiw	r24, 0x01	; 1
    29fe:	f1 f7       	brne	.-4      	; 0x29fc <LCD_voidInit+0x26e>
    2a00:	9c af       	std	Y+60, r25	; 0x3c
    2a02:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a04:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a06:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a08:	01 97       	sbiw	r24, 0x01	; 1
    2a0a:	9e af       	std	Y+62, r25	; 0x3e
    2a0c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a0e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a10:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a12:	00 97       	sbiw	r24, 0x00	; 0
    2a14:	69 f7       	brne	.-38     	; 0x29f0 <LCD_voidInit+0x262>
    2a16:	16 c0       	rjmp	.+44     	; 0x2a44 <LCD_voidInit+0x2b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a18:	fe 01       	movw	r30, r28
    2a1a:	ff 96       	adiw	r30, 0x3f	; 63
    2a1c:	60 81       	ld	r22, Z
    2a1e:	71 81       	ldd	r23, Z+1	; 0x01
    2a20:	82 81       	ldd	r24, Z+2	; 0x02
    2a22:	93 81       	ldd	r25, Z+3	; 0x03
    2a24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a28:	dc 01       	movw	r26, r24
    2a2a:	cb 01       	movw	r24, r22
    2a2c:	9e af       	std	Y+62, r25	; 0x3e
    2a2e:	8d af       	std	Y+61, r24	; 0x3d
    2a30:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a32:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a34:	9a af       	std	Y+58, r25	; 0x3a
    2a36:	89 af       	std	Y+57, r24	; 0x39
    2a38:	89 ad       	ldd	r24, Y+57	; 0x39
    2a3a:	9a ad       	ldd	r25, Y+58	; 0x3a
    2a3c:	01 97       	sbiw	r24, 0x01	; 1
    2a3e:	f1 f7       	brne	.-4      	; 0x2a3c <LCD_voidInit+0x2ae>
    2a40:	9a af       	std	Y+58, r25	; 0x3a
    2a42:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(15);
			LCD_voidSendCmd(LCD_Function_4BIT_2Lines);
    2a44:	88 e2       	ldi	r24, 0x28	; 40
    2a46:	0e 94 02 17 	call	0x2e04	; 0x2e04 <LCD_voidSendCmd>
    2a4a:	80 e0       	ldi	r24, 0x00	; 0
    2a4c:	90 e0       	ldi	r25, 0x00	; 0
    2a4e:	a0 e8       	ldi	r26, 0x80	; 128
    2a50:	bf e3       	ldi	r27, 0x3F	; 63
    2a52:	8d ab       	std	Y+53, r24	; 0x35
    2a54:	9e ab       	std	Y+54, r25	; 0x36
    2a56:	af ab       	std	Y+55, r26	; 0x37
    2a58:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a5a:	6d a9       	ldd	r22, Y+53	; 0x35
    2a5c:	7e a9       	ldd	r23, Y+54	; 0x36
    2a5e:	8f a9       	ldd	r24, Y+55	; 0x37
    2a60:	98 ad       	ldd	r25, Y+56	; 0x38
    2a62:	20 e0       	ldi	r18, 0x00	; 0
    2a64:	30 e0       	ldi	r19, 0x00	; 0
    2a66:	4a ef       	ldi	r20, 0xFA	; 250
    2a68:	54 e4       	ldi	r21, 0x44	; 68
    2a6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a6e:	dc 01       	movw	r26, r24
    2a70:	cb 01       	movw	r24, r22
    2a72:	89 ab       	std	Y+49, r24	; 0x31
    2a74:	9a ab       	std	Y+50, r25	; 0x32
    2a76:	ab ab       	std	Y+51, r26	; 0x33
    2a78:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2a7a:	69 a9       	ldd	r22, Y+49	; 0x31
    2a7c:	7a a9       	ldd	r23, Y+50	; 0x32
    2a7e:	8b a9       	ldd	r24, Y+51	; 0x33
    2a80:	9c a9       	ldd	r25, Y+52	; 0x34
    2a82:	20 e0       	ldi	r18, 0x00	; 0
    2a84:	30 e0       	ldi	r19, 0x00	; 0
    2a86:	40 e8       	ldi	r20, 0x80	; 128
    2a88:	5f e3       	ldi	r21, 0x3F	; 63
    2a8a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a8e:	88 23       	and	r24, r24
    2a90:	2c f4       	brge	.+10     	; 0x2a9c <LCD_voidInit+0x30e>
		__ticks = 1;
    2a92:	81 e0       	ldi	r24, 0x01	; 1
    2a94:	90 e0       	ldi	r25, 0x00	; 0
    2a96:	98 ab       	std	Y+48, r25	; 0x30
    2a98:	8f a7       	std	Y+47, r24	; 0x2f
    2a9a:	3f c0       	rjmp	.+126    	; 0x2b1a <LCD_voidInit+0x38c>
	else if (__tmp > 65535)
    2a9c:	69 a9       	ldd	r22, Y+49	; 0x31
    2a9e:	7a a9       	ldd	r23, Y+50	; 0x32
    2aa0:	8b a9       	ldd	r24, Y+51	; 0x33
    2aa2:	9c a9       	ldd	r25, Y+52	; 0x34
    2aa4:	20 e0       	ldi	r18, 0x00	; 0
    2aa6:	3f ef       	ldi	r19, 0xFF	; 255
    2aa8:	4f e7       	ldi	r20, 0x7F	; 127
    2aaa:	57 e4       	ldi	r21, 0x47	; 71
    2aac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ab0:	18 16       	cp	r1, r24
    2ab2:	4c f5       	brge	.+82     	; 0x2b06 <LCD_voidInit+0x378>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ab4:	6d a9       	ldd	r22, Y+53	; 0x35
    2ab6:	7e a9       	ldd	r23, Y+54	; 0x36
    2ab8:	8f a9       	ldd	r24, Y+55	; 0x37
    2aba:	98 ad       	ldd	r25, Y+56	; 0x38
    2abc:	20 e0       	ldi	r18, 0x00	; 0
    2abe:	30 e0       	ldi	r19, 0x00	; 0
    2ac0:	40 e2       	ldi	r20, 0x20	; 32
    2ac2:	51 e4       	ldi	r21, 0x41	; 65
    2ac4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ac8:	dc 01       	movw	r26, r24
    2aca:	cb 01       	movw	r24, r22
    2acc:	bc 01       	movw	r22, r24
    2ace:	cd 01       	movw	r24, r26
    2ad0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ad4:	dc 01       	movw	r26, r24
    2ad6:	cb 01       	movw	r24, r22
    2ad8:	98 ab       	std	Y+48, r25	; 0x30
    2ada:	8f a7       	std	Y+47, r24	; 0x2f
    2adc:	0f c0       	rjmp	.+30     	; 0x2afc <LCD_voidInit+0x36e>
    2ade:	88 ec       	ldi	r24, 0xC8	; 200
    2ae0:	90 e0       	ldi	r25, 0x00	; 0
    2ae2:	9e a7       	std	Y+46, r25	; 0x2e
    2ae4:	8d a7       	std	Y+45, r24	; 0x2d
    2ae6:	8d a5       	ldd	r24, Y+45	; 0x2d
    2ae8:	9e a5       	ldd	r25, Y+46	; 0x2e
    2aea:	01 97       	sbiw	r24, 0x01	; 1
    2aec:	f1 f7       	brne	.-4      	; 0x2aea <LCD_voidInit+0x35c>
    2aee:	9e a7       	std	Y+46, r25	; 0x2e
    2af0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2af2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2af4:	98 a9       	ldd	r25, Y+48	; 0x30
    2af6:	01 97       	sbiw	r24, 0x01	; 1
    2af8:	98 ab       	std	Y+48, r25	; 0x30
    2afa:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2afc:	8f a5       	ldd	r24, Y+47	; 0x2f
    2afe:	98 a9       	ldd	r25, Y+48	; 0x30
    2b00:	00 97       	sbiw	r24, 0x00	; 0
    2b02:	69 f7       	brne	.-38     	; 0x2ade <LCD_voidInit+0x350>
    2b04:	14 c0       	rjmp	.+40     	; 0x2b2e <LCD_voidInit+0x3a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b06:	69 a9       	ldd	r22, Y+49	; 0x31
    2b08:	7a a9       	ldd	r23, Y+50	; 0x32
    2b0a:	8b a9       	ldd	r24, Y+51	; 0x33
    2b0c:	9c a9       	ldd	r25, Y+52	; 0x34
    2b0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b12:	dc 01       	movw	r26, r24
    2b14:	cb 01       	movw	r24, r22
    2b16:	98 ab       	std	Y+48, r25	; 0x30
    2b18:	8f a7       	std	Y+47, r24	; 0x2f
    2b1a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b1c:	98 a9       	ldd	r25, Y+48	; 0x30
    2b1e:	9c a7       	std	Y+44, r25	; 0x2c
    2b20:	8b a7       	std	Y+43, r24	; 0x2b
    2b22:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b24:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b26:	01 97       	sbiw	r24, 0x01	; 1
    2b28:	f1 f7       	brne	.-4      	; 0x2b26 <LCD_voidInit+0x398>
    2b2a:	9c a7       	std	Y+44, r25	; 0x2c
    2b2c:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(1);
		    LCD_voidSendCmd(LCD_DISP_ON_CURSOR_ON);
    2b2e:	8e e0       	ldi	r24, 0x0E	; 14
    2b30:	0e 94 02 17 	call	0x2e04	; 0x2e04 <LCD_voidSendCmd>
    2b34:	80 e0       	ldi	r24, 0x00	; 0
    2b36:	90 e0       	ldi	r25, 0x00	; 0
    2b38:	a0 e8       	ldi	r26, 0x80	; 128
    2b3a:	bf e3       	ldi	r27, 0x3F	; 63
    2b3c:	8f a3       	std	Y+39, r24	; 0x27
    2b3e:	98 a7       	std	Y+40, r25	; 0x28
    2b40:	a9 a7       	std	Y+41, r26	; 0x29
    2b42:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b44:	6f a1       	ldd	r22, Y+39	; 0x27
    2b46:	78 a5       	ldd	r23, Y+40	; 0x28
    2b48:	89 a5       	ldd	r24, Y+41	; 0x29
    2b4a:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b4c:	20 e0       	ldi	r18, 0x00	; 0
    2b4e:	30 e0       	ldi	r19, 0x00	; 0
    2b50:	4a ef       	ldi	r20, 0xFA	; 250
    2b52:	54 e4       	ldi	r21, 0x44	; 68
    2b54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b58:	dc 01       	movw	r26, r24
    2b5a:	cb 01       	movw	r24, r22
    2b5c:	8b a3       	std	Y+35, r24	; 0x23
    2b5e:	9c a3       	std	Y+36, r25	; 0x24
    2b60:	ad a3       	std	Y+37, r26	; 0x25
    2b62:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2b64:	6b a1       	ldd	r22, Y+35	; 0x23
    2b66:	7c a1       	ldd	r23, Y+36	; 0x24
    2b68:	8d a1       	ldd	r24, Y+37	; 0x25
    2b6a:	9e a1       	ldd	r25, Y+38	; 0x26
    2b6c:	20 e0       	ldi	r18, 0x00	; 0
    2b6e:	30 e0       	ldi	r19, 0x00	; 0
    2b70:	40 e8       	ldi	r20, 0x80	; 128
    2b72:	5f e3       	ldi	r21, 0x3F	; 63
    2b74:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b78:	88 23       	and	r24, r24
    2b7a:	2c f4       	brge	.+10     	; 0x2b86 <LCD_voidInit+0x3f8>
		__ticks = 1;
    2b7c:	81 e0       	ldi	r24, 0x01	; 1
    2b7e:	90 e0       	ldi	r25, 0x00	; 0
    2b80:	9a a3       	std	Y+34, r25	; 0x22
    2b82:	89 a3       	std	Y+33, r24	; 0x21
    2b84:	3f c0       	rjmp	.+126    	; 0x2c04 <LCD_voidInit+0x476>
	else if (__tmp > 65535)
    2b86:	6b a1       	ldd	r22, Y+35	; 0x23
    2b88:	7c a1       	ldd	r23, Y+36	; 0x24
    2b8a:	8d a1       	ldd	r24, Y+37	; 0x25
    2b8c:	9e a1       	ldd	r25, Y+38	; 0x26
    2b8e:	20 e0       	ldi	r18, 0x00	; 0
    2b90:	3f ef       	ldi	r19, 0xFF	; 255
    2b92:	4f e7       	ldi	r20, 0x7F	; 127
    2b94:	57 e4       	ldi	r21, 0x47	; 71
    2b96:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b9a:	18 16       	cp	r1, r24
    2b9c:	4c f5       	brge	.+82     	; 0x2bf0 <LCD_voidInit+0x462>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b9e:	6f a1       	ldd	r22, Y+39	; 0x27
    2ba0:	78 a5       	ldd	r23, Y+40	; 0x28
    2ba2:	89 a5       	ldd	r24, Y+41	; 0x29
    2ba4:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ba6:	20 e0       	ldi	r18, 0x00	; 0
    2ba8:	30 e0       	ldi	r19, 0x00	; 0
    2baa:	40 e2       	ldi	r20, 0x20	; 32
    2bac:	51 e4       	ldi	r21, 0x41	; 65
    2bae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bb2:	dc 01       	movw	r26, r24
    2bb4:	cb 01       	movw	r24, r22
    2bb6:	bc 01       	movw	r22, r24
    2bb8:	cd 01       	movw	r24, r26
    2bba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bbe:	dc 01       	movw	r26, r24
    2bc0:	cb 01       	movw	r24, r22
    2bc2:	9a a3       	std	Y+34, r25	; 0x22
    2bc4:	89 a3       	std	Y+33, r24	; 0x21
    2bc6:	0f c0       	rjmp	.+30     	; 0x2be6 <LCD_voidInit+0x458>
    2bc8:	88 ec       	ldi	r24, 0xC8	; 200
    2bca:	90 e0       	ldi	r25, 0x00	; 0
    2bcc:	98 a3       	std	Y+32, r25	; 0x20
    2bce:	8f 8f       	std	Y+31, r24	; 0x1f
    2bd0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2bd2:	98 a1       	ldd	r25, Y+32	; 0x20
    2bd4:	01 97       	sbiw	r24, 0x01	; 1
    2bd6:	f1 f7       	brne	.-4      	; 0x2bd4 <LCD_voidInit+0x446>
    2bd8:	98 a3       	std	Y+32, r25	; 0x20
    2bda:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bdc:	89 a1       	ldd	r24, Y+33	; 0x21
    2bde:	9a a1       	ldd	r25, Y+34	; 0x22
    2be0:	01 97       	sbiw	r24, 0x01	; 1
    2be2:	9a a3       	std	Y+34, r25	; 0x22
    2be4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2be6:	89 a1       	ldd	r24, Y+33	; 0x21
    2be8:	9a a1       	ldd	r25, Y+34	; 0x22
    2bea:	00 97       	sbiw	r24, 0x00	; 0
    2bec:	69 f7       	brne	.-38     	; 0x2bc8 <LCD_voidInit+0x43a>
    2bee:	14 c0       	rjmp	.+40     	; 0x2c18 <LCD_voidInit+0x48a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bf0:	6b a1       	ldd	r22, Y+35	; 0x23
    2bf2:	7c a1       	ldd	r23, Y+36	; 0x24
    2bf4:	8d a1       	ldd	r24, Y+37	; 0x25
    2bf6:	9e a1       	ldd	r25, Y+38	; 0x26
    2bf8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bfc:	dc 01       	movw	r26, r24
    2bfe:	cb 01       	movw	r24, r22
    2c00:	9a a3       	std	Y+34, r25	; 0x22
    2c02:	89 a3       	std	Y+33, r24	; 0x21
    2c04:	89 a1       	ldd	r24, Y+33	; 0x21
    2c06:	9a a1       	ldd	r25, Y+34	; 0x22
    2c08:	9e 8f       	std	Y+30, r25	; 0x1e
    2c0a:	8d 8f       	std	Y+29, r24	; 0x1d
    2c0c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c0e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c10:	01 97       	sbiw	r24, 0x01	; 1
    2c12:	f1 f7       	brne	.-4      	; 0x2c10 <LCD_voidInit+0x482>
    2c14:	9e 8f       	std	Y+30, r25	; 0x1e
    2c16:	8d 8f       	std	Y+29, r24	; 0x1d
		    _delay_ms(1);
		    LCD_voidSendCmd(LCD_CLEAR_SCREEN);
    2c18:	81 e0       	ldi	r24, 0x01	; 1
    2c1a:	0e 94 02 17 	call	0x2e04	; 0x2e04 <LCD_voidSendCmd>
    2c1e:	80 e0       	ldi	r24, 0x00	; 0
    2c20:	90 e0       	ldi	r25, 0x00	; 0
    2c22:	a0 e2       	ldi	r26, 0x20	; 32
    2c24:	b1 e4       	ldi	r27, 0x41	; 65
    2c26:	89 8f       	std	Y+25, r24	; 0x19
    2c28:	9a 8f       	std	Y+26, r25	; 0x1a
    2c2a:	ab 8f       	std	Y+27, r26	; 0x1b
    2c2c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c2e:	69 8d       	ldd	r22, Y+25	; 0x19
    2c30:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c32:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c34:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c36:	20 e0       	ldi	r18, 0x00	; 0
    2c38:	30 e0       	ldi	r19, 0x00	; 0
    2c3a:	4a ef       	ldi	r20, 0xFA	; 250
    2c3c:	54 e4       	ldi	r21, 0x44	; 68
    2c3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c42:	dc 01       	movw	r26, r24
    2c44:	cb 01       	movw	r24, r22
    2c46:	8d 8b       	std	Y+21, r24	; 0x15
    2c48:	9e 8b       	std	Y+22, r25	; 0x16
    2c4a:	af 8b       	std	Y+23, r26	; 0x17
    2c4c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c4e:	6d 89       	ldd	r22, Y+21	; 0x15
    2c50:	7e 89       	ldd	r23, Y+22	; 0x16
    2c52:	8f 89       	ldd	r24, Y+23	; 0x17
    2c54:	98 8d       	ldd	r25, Y+24	; 0x18
    2c56:	20 e0       	ldi	r18, 0x00	; 0
    2c58:	30 e0       	ldi	r19, 0x00	; 0
    2c5a:	40 e8       	ldi	r20, 0x80	; 128
    2c5c:	5f e3       	ldi	r21, 0x3F	; 63
    2c5e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c62:	88 23       	and	r24, r24
    2c64:	2c f4       	brge	.+10     	; 0x2c70 <LCD_voidInit+0x4e2>
		__ticks = 1;
    2c66:	81 e0       	ldi	r24, 0x01	; 1
    2c68:	90 e0       	ldi	r25, 0x00	; 0
    2c6a:	9c 8b       	std	Y+20, r25	; 0x14
    2c6c:	8b 8b       	std	Y+19, r24	; 0x13
    2c6e:	3f c0       	rjmp	.+126    	; 0x2cee <LCD_voidInit+0x560>
	else if (__tmp > 65535)
    2c70:	6d 89       	ldd	r22, Y+21	; 0x15
    2c72:	7e 89       	ldd	r23, Y+22	; 0x16
    2c74:	8f 89       	ldd	r24, Y+23	; 0x17
    2c76:	98 8d       	ldd	r25, Y+24	; 0x18
    2c78:	20 e0       	ldi	r18, 0x00	; 0
    2c7a:	3f ef       	ldi	r19, 0xFF	; 255
    2c7c:	4f e7       	ldi	r20, 0x7F	; 127
    2c7e:	57 e4       	ldi	r21, 0x47	; 71
    2c80:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c84:	18 16       	cp	r1, r24
    2c86:	4c f5       	brge	.+82     	; 0x2cda <LCD_voidInit+0x54c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c88:	69 8d       	ldd	r22, Y+25	; 0x19
    2c8a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c8c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c8e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c90:	20 e0       	ldi	r18, 0x00	; 0
    2c92:	30 e0       	ldi	r19, 0x00	; 0
    2c94:	40 e2       	ldi	r20, 0x20	; 32
    2c96:	51 e4       	ldi	r21, 0x41	; 65
    2c98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c9c:	dc 01       	movw	r26, r24
    2c9e:	cb 01       	movw	r24, r22
    2ca0:	bc 01       	movw	r22, r24
    2ca2:	cd 01       	movw	r24, r26
    2ca4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ca8:	dc 01       	movw	r26, r24
    2caa:	cb 01       	movw	r24, r22
    2cac:	9c 8b       	std	Y+20, r25	; 0x14
    2cae:	8b 8b       	std	Y+19, r24	; 0x13
    2cb0:	0f c0       	rjmp	.+30     	; 0x2cd0 <LCD_voidInit+0x542>
    2cb2:	88 ec       	ldi	r24, 0xC8	; 200
    2cb4:	90 e0       	ldi	r25, 0x00	; 0
    2cb6:	9a 8b       	std	Y+18, r25	; 0x12
    2cb8:	89 8b       	std	Y+17, r24	; 0x11
    2cba:	89 89       	ldd	r24, Y+17	; 0x11
    2cbc:	9a 89       	ldd	r25, Y+18	; 0x12
    2cbe:	01 97       	sbiw	r24, 0x01	; 1
    2cc0:	f1 f7       	brne	.-4      	; 0x2cbe <LCD_voidInit+0x530>
    2cc2:	9a 8b       	std	Y+18, r25	; 0x12
    2cc4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cc6:	8b 89       	ldd	r24, Y+19	; 0x13
    2cc8:	9c 89       	ldd	r25, Y+20	; 0x14
    2cca:	01 97       	sbiw	r24, 0x01	; 1
    2ccc:	9c 8b       	std	Y+20, r25	; 0x14
    2cce:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cd0:	8b 89       	ldd	r24, Y+19	; 0x13
    2cd2:	9c 89       	ldd	r25, Y+20	; 0x14
    2cd4:	00 97       	sbiw	r24, 0x00	; 0
    2cd6:	69 f7       	brne	.-38     	; 0x2cb2 <LCD_voidInit+0x524>
    2cd8:	14 c0       	rjmp	.+40     	; 0x2d02 <LCD_voidInit+0x574>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cda:	6d 89       	ldd	r22, Y+21	; 0x15
    2cdc:	7e 89       	ldd	r23, Y+22	; 0x16
    2cde:	8f 89       	ldd	r24, Y+23	; 0x17
    2ce0:	98 8d       	ldd	r25, Y+24	; 0x18
    2ce2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ce6:	dc 01       	movw	r26, r24
    2ce8:	cb 01       	movw	r24, r22
    2cea:	9c 8b       	std	Y+20, r25	; 0x14
    2cec:	8b 8b       	std	Y+19, r24	; 0x13
    2cee:	8b 89       	ldd	r24, Y+19	; 0x13
    2cf0:	9c 89       	ldd	r25, Y+20	; 0x14
    2cf2:	98 8b       	std	Y+16, r25	; 0x10
    2cf4:	8f 87       	std	Y+15, r24	; 0x0f
    2cf6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cf8:	98 89       	ldd	r25, Y+16	; 0x10
    2cfa:	01 97       	sbiw	r24, 0x01	; 1
    2cfc:	f1 f7       	brne	.-4      	; 0x2cfa <LCD_voidInit+0x56c>
    2cfe:	98 8b       	std	Y+16, r25	; 0x10
    2d00:	8f 87       	std	Y+15, r24	; 0x0f
		    _delay_ms(10);
		    LCD_voidSendCmd(LCD_ENTRY_MODE);
    2d02:	86 e0       	ldi	r24, 0x06	; 6
    2d04:	0e 94 02 17 	call	0x2e04	; 0x2e04 <LCD_voidSendCmd>
    2d08:	80 e0       	ldi	r24, 0x00	; 0
    2d0a:	90 e0       	ldi	r25, 0x00	; 0
    2d0c:	a0 e8       	ldi	r26, 0x80	; 128
    2d0e:	bf e3       	ldi	r27, 0x3F	; 63
    2d10:	8b 87       	std	Y+11, r24	; 0x0b
    2d12:	9c 87       	std	Y+12, r25	; 0x0c
    2d14:	ad 87       	std	Y+13, r26	; 0x0d
    2d16:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d18:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d1a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d20:	20 e0       	ldi	r18, 0x00	; 0
    2d22:	30 e0       	ldi	r19, 0x00	; 0
    2d24:	4a ef       	ldi	r20, 0xFA	; 250
    2d26:	54 e4       	ldi	r21, 0x44	; 68
    2d28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d2c:	dc 01       	movw	r26, r24
    2d2e:	cb 01       	movw	r24, r22
    2d30:	8f 83       	std	Y+7, r24	; 0x07
    2d32:	98 87       	std	Y+8, r25	; 0x08
    2d34:	a9 87       	std	Y+9, r26	; 0x09
    2d36:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d38:	6f 81       	ldd	r22, Y+7	; 0x07
    2d3a:	78 85       	ldd	r23, Y+8	; 0x08
    2d3c:	89 85       	ldd	r24, Y+9	; 0x09
    2d3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d40:	20 e0       	ldi	r18, 0x00	; 0
    2d42:	30 e0       	ldi	r19, 0x00	; 0
    2d44:	40 e8       	ldi	r20, 0x80	; 128
    2d46:	5f e3       	ldi	r21, 0x3F	; 63
    2d48:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d4c:	88 23       	and	r24, r24
    2d4e:	2c f4       	brge	.+10     	; 0x2d5a <LCD_voidInit+0x5cc>
		__ticks = 1;
    2d50:	81 e0       	ldi	r24, 0x01	; 1
    2d52:	90 e0       	ldi	r25, 0x00	; 0
    2d54:	9e 83       	std	Y+6, r25	; 0x06
    2d56:	8d 83       	std	Y+5, r24	; 0x05
    2d58:	3f c0       	rjmp	.+126    	; 0x2dd8 <LCD_voidInit+0x64a>
	else if (__tmp > 65535)
    2d5a:	6f 81       	ldd	r22, Y+7	; 0x07
    2d5c:	78 85       	ldd	r23, Y+8	; 0x08
    2d5e:	89 85       	ldd	r24, Y+9	; 0x09
    2d60:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d62:	20 e0       	ldi	r18, 0x00	; 0
    2d64:	3f ef       	ldi	r19, 0xFF	; 255
    2d66:	4f e7       	ldi	r20, 0x7F	; 127
    2d68:	57 e4       	ldi	r21, 0x47	; 71
    2d6a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d6e:	18 16       	cp	r1, r24
    2d70:	4c f5       	brge	.+82     	; 0x2dc4 <LCD_voidInit+0x636>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d72:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d74:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d76:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d78:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d7a:	20 e0       	ldi	r18, 0x00	; 0
    2d7c:	30 e0       	ldi	r19, 0x00	; 0
    2d7e:	40 e2       	ldi	r20, 0x20	; 32
    2d80:	51 e4       	ldi	r21, 0x41	; 65
    2d82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d86:	dc 01       	movw	r26, r24
    2d88:	cb 01       	movw	r24, r22
    2d8a:	bc 01       	movw	r22, r24
    2d8c:	cd 01       	movw	r24, r26
    2d8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d92:	dc 01       	movw	r26, r24
    2d94:	cb 01       	movw	r24, r22
    2d96:	9e 83       	std	Y+6, r25	; 0x06
    2d98:	8d 83       	std	Y+5, r24	; 0x05
    2d9a:	0f c0       	rjmp	.+30     	; 0x2dba <LCD_voidInit+0x62c>
    2d9c:	88 ec       	ldi	r24, 0xC8	; 200
    2d9e:	90 e0       	ldi	r25, 0x00	; 0
    2da0:	9c 83       	std	Y+4, r25	; 0x04
    2da2:	8b 83       	std	Y+3, r24	; 0x03
    2da4:	8b 81       	ldd	r24, Y+3	; 0x03
    2da6:	9c 81       	ldd	r25, Y+4	; 0x04
    2da8:	01 97       	sbiw	r24, 0x01	; 1
    2daa:	f1 f7       	brne	.-4      	; 0x2da8 <LCD_voidInit+0x61a>
    2dac:	9c 83       	std	Y+4, r25	; 0x04
    2dae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2db0:	8d 81       	ldd	r24, Y+5	; 0x05
    2db2:	9e 81       	ldd	r25, Y+6	; 0x06
    2db4:	01 97       	sbiw	r24, 0x01	; 1
    2db6:	9e 83       	std	Y+6, r25	; 0x06
    2db8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dba:	8d 81       	ldd	r24, Y+5	; 0x05
    2dbc:	9e 81       	ldd	r25, Y+6	; 0x06
    2dbe:	00 97       	sbiw	r24, 0x00	; 0
    2dc0:	69 f7       	brne	.-38     	; 0x2d9c <LCD_voidInit+0x60e>
    2dc2:	14 c0       	rjmp	.+40     	; 0x2dec <LCD_voidInit+0x65e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dc4:	6f 81       	ldd	r22, Y+7	; 0x07
    2dc6:	78 85       	ldd	r23, Y+8	; 0x08
    2dc8:	89 85       	ldd	r24, Y+9	; 0x09
    2dca:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dd0:	dc 01       	movw	r26, r24
    2dd2:	cb 01       	movw	r24, r22
    2dd4:	9e 83       	std	Y+6, r25	; 0x06
    2dd6:	8d 83       	std	Y+5, r24	; 0x05
    2dd8:	8d 81       	ldd	r24, Y+5	; 0x05
    2dda:	9e 81       	ldd	r25, Y+6	; 0x06
    2ddc:	9a 83       	std	Y+2, r25	; 0x02
    2dde:	89 83       	std	Y+1, r24	; 0x01
    2de0:	89 81       	ldd	r24, Y+1	; 0x01
    2de2:	9a 81       	ldd	r25, Y+2	; 0x02
    2de4:	01 97       	sbiw	r24, 0x01	; 1
    2de6:	f1 f7       	brne	.-4      	; 0x2de4 <LCD_voidInit+0x656>
    2de8:	9a 83       	std	Y+2, r25	; 0x02
    2dea:	89 83       	std	Y+1, r24	; 0x01
	#endif
	
	
	

}
    2dec:	cc 5a       	subi	r28, 0xAC	; 172
    2dee:	df 4f       	sbci	r29, 0xFF	; 255
    2df0:	0f b6       	in	r0, 0x3f	; 63
    2df2:	f8 94       	cli
    2df4:	de bf       	out	0x3e, r29	; 62
    2df6:	0f be       	out	0x3f, r0	; 63
    2df8:	cd bf       	out	0x3d, r28	; 61
    2dfa:	cf 91       	pop	r28
    2dfc:	df 91       	pop	r29
    2dfe:	1f 91       	pop	r17
    2e00:	0f 91       	pop	r16
    2e02:	08 95       	ret

00002e04 <LCD_voidSendCmd>:

void LCD_voidSendCmd(u8 copy_u8Cmd)
{
    2e04:	df 93       	push	r29
    2e06:	cf 93       	push	r28
    2e08:	cd b7       	in	r28, 0x3d	; 61
    2e0a:	de b7       	in	r29, 0x3e	; 62
    2e0c:	2f 97       	sbiw	r28, 0x0f	; 15
    2e0e:	0f b6       	in	r0, 0x3f	; 63
    2e10:	f8 94       	cli
    2e12:	de bf       	out	0x3e, r29	; 62
    2e14:	0f be       	out	0x3f, r0	; 63
    2e16:	cd bf       	out	0x3d, r28	; 61
    2e18:	8f 87       	std	Y+15, r24	; 0x0f
		GPIO_voidWritePin  (LCD_RWPORT , LCD_RWPIN , 0);
		LCD_voidSendEnPulse();
		
	#elif LCD_MODE == 1 
		#if LCD_NIBBLE == 0 
			GPIO_voidWriteLowNipple(LCD_PORT , copy_u8Cmd>>4);
    2e1a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e1c:	98 2f       	mov	r25, r24
    2e1e:	92 95       	swap	r25
    2e20:	9f 70       	andi	r25, 0x0F	; 15
    2e22:	80 e0       	ldi	r24, 0x00	; 0
    2e24:	69 2f       	mov	r22, r25
    2e26:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <GPIO_voidWriteLowNipple>
			GPIO_voidWritePin  (LCD_RSPORT , LCD_RSPIN , 0);
    2e2a:	80 e0       	ldi	r24, 0x00	; 0
    2e2c:	66 e0       	ldi	r22, 0x06	; 6
    2e2e:	40 e0       	ldi	r20, 0x00	; 0
    2e30:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <GPIO_voidWritePin>
			GPIO_voidWritePin  (LCD_RWPORT , LCD_RWPIN , 0);
    2e34:	80 e0       	ldi	r24, 0x00	; 0
    2e36:	65 e0       	ldi	r22, 0x05	; 5
    2e38:	40 e0       	ldi	r20, 0x00	; 0
    2e3a:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <GPIO_voidWritePin>
			LCD_voidSendEnPulse();
    2e3e:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <LCD_voidSendEnPulse>
		
			GPIO_voidWriteLowNipple(LCD_PORT , copy_u8Cmd);
    2e42:	80 e0       	ldi	r24, 0x00	; 0
    2e44:	6f 85       	ldd	r22, Y+15	; 0x0f
    2e46:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <GPIO_voidWriteLowNipple>
			GPIO_voidWritePin  (LCD_RSPORT , LCD_RSPIN , 0);
    2e4a:	80 e0       	ldi	r24, 0x00	; 0
    2e4c:	66 e0       	ldi	r22, 0x06	; 6
    2e4e:	40 e0       	ldi	r20, 0x00	; 0
    2e50:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <GPIO_voidWritePin>
			GPIO_voidWritePin  (LCD_RWPORT , LCD_RWPIN , 0);
    2e54:	80 e0       	ldi	r24, 0x00	; 0
    2e56:	65 e0       	ldi	r22, 0x05	; 5
    2e58:	40 e0       	ldi	r20, 0x00	; 0
    2e5a:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <GPIO_voidWritePin>
			LCD_voidSendEnPulse();
    2e5e:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <LCD_voidSendEnPulse>
    2e62:	80 e0       	ldi	r24, 0x00	; 0
    2e64:	90 e0       	ldi	r25, 0x00	; 0
    2e66:	a0 e0       	ldi	r26, 0x00	; 0
    2e68:	b0 e4       	ldi	r27, 0x40	; 64
    2e6a:	8b 87       	std	Y+11, r24	; 0x0b
    2e6c:	9c 87       	std	Y+12, r25	; 0x0c
    2e6e:	ad 87       	std	Y+13, r26	; 0x0d
    2e70:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e72:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e74:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e76:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e78:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e7a:	20 e0       	ldi	r18, 0x00	; 0
    2e7c:	30 e0       	ldi	r19, 0x00	; 0
    2e7e:	4a ef       	ldi	r20, 0xFA	; 250
    2e80:	54 e4       	ldi	r21, 0x44	; 68
    2e82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e86:	dc 01       	movw	r26, r24
    2e88:	cb 01       	movw	r24, r22
    2e8a:	8f 83       	std	Y+7, r24	; 0x07
    2e8c:	98 87       	std	Y+8, r25	; 0x08
    2e8e:	a9 87       	std	Y+9, r26	; 0x09
    2e90:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e92:	6f 81       	ldd	r22, Y+7	; 0x07
    2e94:	78 85       	ldd	r23, Y+8	; 0x08
    2e96:	89 85       	ldd	r24, Y+9	; 0x09
    2e98:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e9a:	20 e0       	ldi	r18, 0x00	; 0
    2e9c:	30 e0       	ldi	r19, 0x00	; 0
    2e9e:	40 e8       	ldi	r20, 0x80	; 128
    2ea0:	5f e3       	ldi	r21, 0x3F	; 63
    2ea2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ea6:	88 23       	and	r24, r24
    2ea8:	2c f4       	brge	.+10     	; 0x2eb4 <LCD_voidSendCmd+0xb0>
		__ticks = 1;
    2eaa:	81 e0       	ldi	r24, 0x01	; 1
    2eac:	90 e0       	ldi	r25, 0x00	; 0
    2eae:	9e 83       	std	Y+6, r25	; 0x06
    2eb0:	8d 83       	std	Y+5, r24	; 0x05
    2eb2:	3f c0       	rjmp	.+126    	; 0x2f32 <LCD_voidSendCmd+0x12e>
	else if (__tmp > 65535)
    2eb4:	6f 81       	ldd	r22, Y+7	; 0x07
    2eb6:	78 85       	ldd	r23, Y+8	; 0x08
    2eb8:	89 85       	ldd	r24, Y+9	; 0x09
    2eba:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ebc:	20 e0       	ldi	r18, 0x00	; 0
    2ebe:	3f ef       	ldi	r19, 0xFF	; 255
    2ec0:	4f e7       	ldi	r20, 0x7F	; 127
    2ec2:	57 e4       	ldi	r21, 0x47	; 71
    2ec4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ec8:	18 16       	cp	r1, r24
    2eca:	4c f5       	brge	.+82     	; 0x2f1e <LCD_voidSendCmd+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ecc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ece:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ed0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ed2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ed4:	20 e0       	ldi	r18, 0x00	; 0
    2ed6:	30 e0       	ldi	r19, 0x00	; 0
    2ed8:	40 e2       	ldi	r20, 0x20	; 32
    2eda:	51 e4       	ldi	r21, 0x41	; 65
    2edc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ee0:	dc 01       	movw	r26, r24
    2ee2:	cb 01       	movw	r24, r22
    2ee4:	bc 01       	movw	r22, r24
    2ee6:	cd 01       	movw	r24, r26
    2ee8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eec:	dc 01       	movw	r26, r24
    2eee:	cb 01       	movw	r24, r22
    2ef0:	9e 83       	std	Y+6, r25	; 0x06
    2ef2:	8d 83       	std	Y+5, r24	; 0x05
    2ef4:	0f c0       	rjmp	.+30     	; 0x2f14 <LCD_voidSendCmd+0x110>
    2ef6:	88 ec       	ldi	r24, 0xC8	; 200
    2ef8:	90 e0       	ldi	r25, 0x00	; 0
    2efa:	9c 83       	std	Y+4, r25	; 0x04
    2efc:	8b 83       	std	Y+3, r24	; 0x03
    2efe:	8b 81       	ldd	r24, Y+3	; 0x03
    2f00:	9c 81       	ldd	r25, Y+4	; 0x04
    2f02:	01 97       	sbiw	r24, 0x01	; 1
    2f04:	f1 f7       	brne	.-4      	; 0x2f02 <LCD_voidSendCmd+0xfe>
    2f06:	9c 83       	std	Y+4, r25	; 0x04
    2f08:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f0a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f0c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f0e:	01 97       	sbiw	r24, 0x01	; 1
    2f10:	9e 83       	std	Y+6, r25	; 0x06
    2f12:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f14:	8d 81       	ldd	r24, Y+5	; 0x05
    2f16:	9e 81       	ldd	r25, Y+6	; 0x06
    2f18:	00 97       	sbiw	r24, 0x00	; 0
    2f1a:	69 f7       	brne	.-38     	; 0x2ef6 <LCD_voidSendCmd+0xf2>
    2f1c:	14 c0       	rjmp	.+40     	; 0x2f46 <LCD_voidSendCmd+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f1e:	6f 81       	ldd	r22, Y+7	; 0x07
    2f20:	78 85       	ldd	r23, Y+8	; 0x08
    2f22:	89 85       	ldd	r24, Y+9	; 0x09
    2f24:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f2a:	dc 01       	movw	r26, r24
    2f2c:	cb 01       	movw	r24, r22
    2f2e:	9e 83       	std	Y+6, r25	; 0x06
    2f30:	8d 83       	std	Y+5, r24	; 0x05
    2f32:	8d 81       	ldd	r24, Y+5	; 0x05
    2f34:	9e 81       	ldd	r25, Y+6	; 0x06
    2f36:	9a 83       	std	Y+2, r25	; 0x02
    2f38:	89 83       	std	Y+1, r24	; 0x01
    2f3a:	89 81       	ldd	r24, Y+1	; 0x01
    2f3c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f3e:	01 97       	sbiw	r24, 0x01	; 1
    2f40:	f1 f7       	brne	.-4      	; 0x2f3e <LCD_voidSendCmd+0x13a>
    2f42:	9a 83       	std	Y+2, r25	; 0x02
    2f44:	89 83       	std	Y+1, r24	; 0x01
			LCD_voidSendEnPulse();
			_delay_ms(2);
		#endif
	#endif
	
}
    2f46:	2f 96       	adiw	r28, 0x0f	; 15
    2f48:	0f b6       	in	r0, 0x3f	; 63
    2f4a:	f8 94       	cli
    2f4c:	de bf       	out	0x3e, r29	; 62
    2f4e:	0f be       	out	0x3f, r0	; 63
    2f50:	cd bf       	out	0x3d, r28	; 61
    2f52:	cf 91       	pop	r28
    2f54:	df 91       	pop	r29
    2f56:	08 95       	ret

00002f58 <LCD_voidSendEnPulse>:
void LCD_voidSendEnPulse ()
{
    2f58:	df 93       	push	r29
    2f5a:	cf 93       	push	r28
    2f5c:	cd b7       	in	r28, 0x3d	; 61
    2f5e:	de b7       	in	r29, 0x3e	; 62
    2f60:	2e 97       	sbiw	r28, 0x0e	; 14
    2f62:	0f b6       	in	r0, 0x3f	; 63
    2f64:	f8 94       	cli
    2f66:	de bf       	out	0x3e, r29	; 62
    2f68:	0f be       	out	0x3f, r0	; 63
    2f6a:	cd bf       	out	0x3d, r28	; 61
	GPIO_voidWritePin  (LCD_ENPORT , LCD_ENPIN , 1);
    2f6c:	80 e0       	ldi	r24, 0x00	; 0
    2f6e:	64 e0       	ldi	r22, 0x04	; 4
    2f70:	41 e0       	ldi	r20, 0x01	; 1
    2f72:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <GPIO_voidWritePin>
    2f76:	80 e0       	ldi	r24, 0x00	; 0
    2f78:	90 e0       	ldi	r25, 0x00	; 0
    2f7a:	a0 e0       	ldi	r26, 0x00	; 0
    2f7c:	b0 e4       	ldi	r27, 0x40	; 64
    2f7e:	8b 87       	std	Y+11, r24	; 0x0b
    2f80:	9c 87       	std	Y+12, r25	; 0x0c
    2f82:	ad 87       	std	Y+13, r26	; 0x0d
    2f84:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f86:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f88:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f8e:	20 e0       	ldi	r18, 0x00	; 0
    2f90:	30 e0       	ldi	r19, 0x00	; 0
    2f92:	4a ef       	ldi	r20, 0xFA	; 250
    2f94:	54 e4       	ldi	r21, 0x44	; 68
    2f96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f9a:	dc 01       	movw	r26, r24
    2f9c:	cb 01       	movw	r24, r22
    2f9e:	8f 83       	std	Y+7, r24	; 0x07
    2fa0:	98 87       	std	Y+8, r25	; 0x08
    2fa2:	a9 87       	std	Y+9, r26	; 0x09
    2fa4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2fa6:	6f 81       	ldd	r22, Y+7	; 0x07
    2fa8:	78 85       	ldd	r23, Y+8	; 0x08
    2faa:	89 85       	ldd	r24, Y+9	; 0x09
    2fac:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fae:	20 e0       	ldi	r18, 0x00	; 0
    2fb0:	30 e0       	ldi	r19, 0x00	; 0
    2fb2:	40 e8       	ldi	r20, 0x80	; 128
    2fb4:	5f e3       	ldi	r21, 0x3F	; 63
    2fb6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2fba:	88 23       	and	r24, r24
    2fbc:	2c f4       	brge	.+10     	; 0x2fc8 <LCD_voidSendEnPulse+0x70>
		__ticks = 1;
    2fbe:	81 e0       	ldi	r24, 0x01	; 1
    2fc0:	90 e0       	ldi	r25, 0x00	; 0
    2fc2:	9e 83       	std	Y+6, r25	; 0x06
    2fc4:	8d 83       	std	Y+5, r24	; 0x05
    2fc6:	3f c0       	rjmp	.+126    	; 0x3046 <LCD_voidSendEnPulse+0xee>
	else if (__tmp > 65535)
    2fc8:	6f 81       	ldd	r22, Y+7	; 0x07
    2fca:	78 85       	ldd	r23, Y+8	; 0x08
    2fcc:	89 85       	ldd	r24, Y+9	; 0x09
    2fce:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fd0:	20 e0       	ldi	r18, 0x00	; 0
    2fd2:	3f ef       	ldi	r19, 0xFF	; 255
    2fd4:	4f e7       	ldi	r20, 0x7F	; 127
    2fd6:	57 e4       	ldi	r21, 0x47	; 71
    2fd8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fdc:	18 16       	cp	r1, r24
    2fde:	4c f5       	brge	.+82     	; 0x3032 <LCD_voidSendEnPulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fe0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fe2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fe4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fe6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fe8:	20 e0       	ldi	r18, 0x00	; 0
    2fea:	30 e0       	ldi	r19, 0x00	; 0
    2fec:	40 e2       	ldi	r20, 0x20	; 32
    2fee:	51 e4       	ldi	r21, 0x41	; 65
    2ff0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ff4:	dc 01       	movw	r26, r24
    2ff6:	cb 01       	movw	r24, r22
    2ff8:	bc 01       	movw	r22, r24
    2ffa:	cd 01       	movw	r24, r26
    2ffc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3000:	dc 01       	movw	r26, r24
    3002:	cb 01       	movw	r24, r22
    3004:	9e 83       	std	Y+6, r25	; 0x06
    3006:	8d 83       	std	Y+5, r24	; 0x05
    3008:	0f c0       	rjmp	.+30     	; 0x3028 <LCD_voidSendEnPulse+0xd0>
    300a:	88 ec       	ldi	r24, 0xC8	; 200
    300c:	90 e0       	ldi	r25, 0x00	; 0
    300e:	9c 83       	std	Y+4, r25	; 0x04
    3010:	8b 83       	std	Y+3, r24	; 0x03
    3012:	8b 81       	ldd	r24, Y+3	; 0x03
    3014:	9c 81       	ldd	r25, Y+4	; 0x04
    3016:	01 97       	sbiw	r24, 0x01	; 1
    3018:	f1 f7       	brne	.-4      	; 0x3016 <LCD_voidSendEnPulse+0xbe>
    301a:	9c 83       	std	Y+4, r25	; 0x04
    301c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    301e:	8d 81       	ldd	r24, Y+5	; 0x05
    3020:	9e 81       	ldd	r25, Y+6	; 0x06
    3022:	01 97       	sbiw	r24, 0x01	; 1
    3024:	9e 83       	std	Y+6, r25	; 0x06
    3026:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3028:	8d 81       	ldd	r24, Y+5	; 0x05
    302a:	9e 81       	ldd	r25, Y+6	; 0x06
    302c:	00 97       	sbiw	r24, 0x00	; 0
    302e:	69 f7       	brne	.-38     	; 0x300a <LCD_voidSendEnPulse+0xb2>
    3030:	14 c0       	rjmp	.+40     	; 0x305a <LCD_voidSendEnPulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3032:	6f 81       	ldd	r22, Y+7	; 0x07
    3034:	78 85       	ldd	r23, Y+8	; 0x08
    3036:	89 85       	ldd	r24, Y+9	; 0x09
    3038:	9a 85       	ldd	r25, Y+10	; 0x0a
    303a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    303e:	dc 01       	movw	r26, r24
    3040:	cb 01       	movw	r24, r22
    3042:	9e 83       	std	Y+6, r25	; 0x06
    3044:	8d 83       	std	Y+5, r24	; 0x05
    3046:	8d 81       	ldd	r24, Y+5	; 0x05
    3048:	9e 81       	ldd	r25, Y+6	; 0x06
    304a:	9a 83       	std	Y+2, r25	; 0x02
    304c:	89 83       	std	Y+1, r24	; 0x01
    304e:	89 81       	ldd	r24, Y+1	; 0x01
    3050:	9a 81       	ldd	r25, Y+2	; 0x02
    3052:	01 97       	sbiw	r24, 0x01	; 1
    3054:	f1 f7       	brne	.-4      	; 0x3052 <LCD_voidSendEnPulse+0xfa>
    3056:	9a 83       	std	Y+2, r25	; 0x02
    3058:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	GPIO_voidWritePin  (LCD_ENPORT , LCD_ENPIN , 0);
    305a:	80 e0       	ldi	r24, 0x00	; 0
    305c:	64 e0       	ldi	r22, 0x04	; 4
    305e:	40 e0       	ldi	r20, 0x00	; 0
    3060:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <GPIO_voidWritePin>

}
    3064:	2e 96       	adiw	r28, 0x0e	; 14
    3066:	0f b6       	in	r0, 0x3f	; 63
    3068:	f8 94       	cli
    306a:	de bf       	out	0x3e, r29	; 62
    306c:	0f be       	out	0x3f, r0	; 63
    306e:	cd bf       	out	0x3d, r28	; 61
    3070:	cf 91       	pop	r28
    3072:	df 91       	pop	r29
    3074:	08 95       	ret

00003076 <LCD_voidMoveCrusor>:
void LCD_voidMoveCrusor(u8 copy_u8Line , u8 copy_u8Position)
{
    3076:	df 93       	push	r29
    3078:	cf 93       	push	r28
    307a:	cd b7       	in	r28, 0x3d	; 61
    307c:	de b7       	in	r29, 0x3e	; 62
    307e:	61 97       	sbiw	r28, 0x11	; 17
    3080:	0f b6       	in	r0, 0x3f	; 63
    3082:	f8 94       	cli
    3084:	de bf       	out	0x3e, r29	; 62
    3086:	0f be       	out	0x3f, r0	; 63
    3088:	cd bf       	out	0x3d, r28	; 61
    308a:	88 8b       	std	Y+16, r24	; 0x10
    308c:	69 8b       	std	Y+17, r22	; 0x11
	u8 data ;
if(copy_u8Line < 1 || copy_u8Line > 2 || copy_u8Position >16 || copy_u8Position <1 )	
    308e:	88 89       	ldd	r24, Y+16	; 0x10
    3090:	88 23       	and	r24, r24
    3092:	49 f0       	breq	.+18     	; 0x30a6 <LCD_voidMoveCrusor+0x30>
    3094:	88 89       	ldd	r24, Y+16	; 0x10
    3096:	83 30       	cpi	r24, 0x03	; 3
    3098:	30 f4       	brcc	.+12     	; 0x30a6 <LCD_voidMoveCrusor+0x30>
    309a:	89 89       	ldd	r24, Y+17	; 0x11
    309c:	81 31       	cpi	r24, 0x11	; 17
    309e:	18 f4       	brcc	.+6      	; 0x30a6 <LCD_voidMoveCrusor+0x30>
    30a0:	89 89       	ldd	r24, Y+17	; 0x11
    30a2:	88 23       	and	r24, r24
    30a4:	19 f4       	brne	.+6      	; 0x30ac <LCD_voidMoveCrusor+0x36>
{
	data = 0x80 ;
    30a6:	80 e8       	ldi	r24, 0x80	; 128
    30a8:	8f 87       	std	Y+15, r24	; 0x0f
    30aa:	0d c0       	rjmp	.+26     	; 0x30c6 <LCD_voidMoveCrusor+0x50>
}
else if (copy_u8Line ==1)
    30ac:	88 89       	ldd	r24, Y+16	; 0x10
    30ae:	81 30       	cpi	r24, 0x01	; 1
    30b0:	21 f4       	brne	.+8      	; 0x30ba <LCD_voidMoveCrusor+0x44>
{
	data = 0x80 +(copy_u8Position -1);
    30b2:	89 89       	ldd	r24, Y+17	; 0x11
    30b4:	81 58       	subi	r24, 0x81	; 129
    30b6:	8f 87       	std	Y+15, r24	; 0x0f
    30b8:	06 c0       	rjmp	.+12     	; 0x30c6 <LCD_voidMoveCrusor+0x50>
}
else if (copy_u8Line==2)
    30ba:	88 89       	ldd	r24, Y+16	; 0x10
    30bc:	82 30       	cpi	r24, 0x02	; 2
    30be:	19 f4       	brne	.+6      	; 0x30c6 <LCD_voidMoveCrusor+0x50>
{
	data = 0xC0 + (copy_u8Position -1 );
    30c0:	89 89       	ldd	r24, Y+17	; 0x11
    30c2:	81 54       	subi	r24, 0x41	; 65
    30c4:	8f 87       	std	Y+15, r24	; 0x0f
}
LCD_voidSendCmd(data);
    30c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    30c8:	0e 94 02 17 	call	0x2e04	; 0x2e04 <LCD_voidSendCmd>
    30cc:	80 e0       	ldi	r24, 0x00	; 0
    30ce:	90 e0       	ldi	r25, 0x00	; 0
    30d0:	a0 e8       	ldi	r26, 0x80	; 128
    30d2:	bf e3       	ldi	r27, 0x3F	; 63
    30d4:	8b 87       	std	Y+11, r24	; 0x0b
    30d6:	9c 87       	std	Y+12, r25	; 0x0c
    30d8:	ad 87       	std	Y+13, r26	; 0x0d
    30da:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    30de:	7c 85       	ldd	r23, Y+12	; 0x0c
    30e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    30e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    30e4:	20 e0       	ldi	r18, 0x00	; 0
    30e6:	30 e0       	ldi	r19, 0x00	; 0
    30e8:	4a ef       	ldi	r20, 0xFA	; 250
    30ea:	54 e4       	ldi	r21, 0x44	; 68
    30ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30f0:	dc 01       	movw	r26, r24
    30f2:	cb 01       	movw	r24, r22
    30f4:	8f 83       	std	Y+7, r24	; 0x07
    30f6:	98 87       	std	Y+8, r25	; 0x08
    30f8:	a9 87       	std	Y+9, r26	; 0x09
    30fa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30fc:	6f 81       	ldd	r22, Y+7	; 0x07
    30fe:	78 85       	ldd	r23, Y+8	; 0x08
    3100:	89 85       	ldd	r24, Y+9	; 0x09
    3102:	9a 85       	ldd	r25, Y+10	; 0x0a
    3104:	20 e0       	ldi	r18, 0x00	; 0
    3106:	30 e0       	ldi	r19, 0x00	; 0
    3108:	40 e8       	ldi	r20, 0x80	; 128
    310a:	5f e3       	ldi	r21, 0x3F	; 63
    310c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3110:	88 23       	and	r24, r24
    3112:	2c f4       	brge	.+10     	; 0x311e <LCD_voidMoveCrusor+0xa8>
		__ticks = 1;
    3114:	81 e0       	ldi	r24, 0x01	; 1
    3116:	90 e0       	ldi	r25, 0x00	; 0
    3118:	9e 83       	std	Y+6, r25	; 0x06
    311a:	8d 83       	std	Y+5, r24	; 0x05
    311c:	3f c0       	rjmp	.+126    	; 0x319c <LCD_voidMoveCrusor+0x126>
	else if (__tmp > 65535)
    311e:	6f 81       	ldd	r22, Y+7	; 0x07
    3120:	78 85       	ldd	r23, Y+8	; 0x08
    3122:	89 85       	ldd	r24, Y+9	; 0x09
    3124:	9a 85       	ldd	r25, Y+10	; 0x0a
    3126:	20 e0       	ldi	r18, 0x00	; 0
    3128:	3f ef       	ldi	r19, 0xFF	; 255
    312a:	4f e7       	ldi	r20, 0x7F	; 127
    312c:	57 e4       	ldi	r21, 0x47	; 71
    312e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3132:	18 16       	cp	r1, r24
    3134:	4c f5       	brge	.+82     	; 0x3188 <LCD_voidMoveCrusor+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3136:	6b 85       	ldd	r22, Y+11	; 0x0b
    3138:	7c 85       	ldd	r23, Y+12	; 0x0c
    313a:	8d 85       	ldd	r24, Y+13	; 0x0d
    313c:	9e 85       	ldd	r25, Y+14	; 0x0e
    313e:	20 e0       	ldi	r18, 0x00	; 0
    3140:	30 e0       	ldi	r19, 0x00	; 0
    3142:	40 e2       	ldi	r20, 0x20	; 32
    3144:	51 e4       	ldi	r21, 0x41	; 65
    3146:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    314a:	dc 01       	movw	r26, r24
    314c:	cb 01       	movw	r24, r22
    314e:	bc 01       	movw	r22, r24
    3150:	cd 01       	movw	r24, r26
    3152:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3156:	dc 01       	movw	r26, r24
    3158:	cb 01       	movw	r24, r22
    315a:	9e 83       	std	Y+6, r25	; 0x06
    315c:	8d 83       	std	Y+5, r24	; 0x05
    315e:	0f c0       	rjmp	.+30     	; 0x317e <LCD_voidMoveCrusor+0x108>
    3160:	88 ec       	ldi	r24, 0xC8	; 200
    3162:	90 e0       	ldi	r25, 0x00	; 0
    3164:	9c 83       	std	Y+4, r25	; 0x04
    3166:	8b 83       	std	Y+3, r24	; 0x03
    3168:	8b 81       	ldd	r24, Y+3	; 0x03
    316a:	9c 81       	ldd	r25, Y+4	; 0x04
    316c:	01 97       	sbiw	r24, 0x01	; 1
    316e:	f1 f7       	brne	.-4      	; 0x316c <LCD_voidMoveCrusor+0xf6>
    3170:	9c 83       	std	Y+4, r25	; 0x04
    3172:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3174:	8d 81       	ldd	r24, Y+5	; 0x05
    3176:	9e 81       	ldd	r25, Y+6	; 0x06
    3178:	01 97       	sbiw	r24, 0x01	; 1
    317a:	9e 83       	std	Y+6, r25	; 0x06
    317c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    317e:	8d 81       	ldd	r24, Y+5	; 0x05
    3180:	9e 81       	ldd	r25, Y+6	; 0x06
    3182:	00 97       	sbiw	r24, 0x00	; 0
    3184:	69 f7       	brne	.-38     	; 0x3160 <LCD_voidMoveCrusor+0xea>
    3186:	14 c0       	rjmp	.+40     	; 0x31b0 <LCD_voidMoveCrusor+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3188:	6f 81       	ldd	r22, Y+7	; 0x07
    318a:	78 85       	ldd	r23, Y+8	; 0x08
    318c:	89 85       	ldd	r24, Y+9	; 0x09
    318e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3190:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3194:	dc 01       	movw	r26, r24
    3196:	cb 01       	movw	r24, r22
    3198:	9e 83       	std	Y+6, r25	; 0x06
    319a:	8d 83       	std	Y+5, r24	; 0x05
    319c:	8d 81       	ldd	r24, Y+5	; 0x05
    319e:	9e 81       	ldd	r25, Y+6	; 0x06
    31a0:	9a 83       	std	Y+2, r25	; 0x02
    31a2:	89 83       	std	Y+1, r24	; 0x01
    31a4:	89 81       	ldd	r24, Y+1	; 0x01
    31a6:	9a 81       	ldd	r25, Y+2	; 0x02
    31a8:	01 97       	sbiw	r24, 0x01	; 1
    31aa:	f1 f7       	brne	.-4      	; 0x31a8 <LCD_voidMoveCrusor+0x132>
    31ac:	9a 83       	std	Y+2, r25	; 0x02
    31ae:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(1);
}
    31b0:	61 96       	adiw	r28, 0x11	; 17
    31b2:	0f b6       	in	r0, 0x3f	; 63
    31b4:	f8 94       	cli
    31b6:	de bf       	out	0x3e, r29	; 62
    31b8:	0f be       	out	0x3f, r0	; 63
    31ba:	cd bf       	out	0x3d, r28	; 61
    31bc:	cf 91       	pop	r28
    31be:	df 91       	pop	r29
    31c0:	08 95       	ret

000031c2 <LCD_voidClearScreen>:
void LCD_voidClearScreen()
{
    31c2:	df 93       	push	r29
    31c4:	cf 93       	push	r28
    31c6:	cd b7       	in	r28, 0x3d	; 61
    31c8:	de b7       	in	r29, 0x3e	; 62
    31ca:	2e 97       	sbiw	r28, 0x0e	; 14
    31cc:	0f b6       	in	r0, 0x3f	; 63
    31ce:	f8 94       	cli
    31d0:	de bf       	out	0x3e, r29	; 62
    31d2:	0f be       	out	0x3f, r0	; 63
    31d4:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCmd(LCD_CLEAR_SCREEN);
    31d6:	81 e0       	ldi	r24, 0x01	; 1
    31d8:	0e 94 02 17 	call	0x2e04	; 0x2e04 <LCD_voidSendCmd>
    31dc:	80 e0       	ldi	r24, 0x00	; 0
    31de:	90 e0       	ldi	r25, 0x00	; 0
    31e0:	a0 e2       	ldi	r26, 0x20	; 32
    31e2:	b1 e4       	ldi	r27, 0x41	; 65
    31e4:	8b 87       	std	Y+11, r24	; 0x0b
    31e6:	9c 87       	std	Y+12, r25	; 0x0c
    31e8:	ad 87       	std	Y+13, r26	; 0x0d
    31ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    31ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    31f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    31f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    31f4:	20 e0       	ldi	r18, 0x00	; 0
    31f6:	30 e0       	ldi	r19, 0x00	; 0
    31f8:	4a ef       	ldi	r20, 0xFA	; 250
    31fa:	54 e4       	ldi	r21, 0x44	; 68
    31fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3200:	dc 01       	movw	r26, r24
    3202:	cb 01       	movw	r24, r22
    3204:	8f 83       	std	Y+7, r24	; 0x07
    3206:	98 87       	std	Y+8, r25	; 0x08
    3208:	a9 87       	std	Y+9, r26	; 0x09
    320a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    320c:	6f 81       	ldd	r22, Y+7	; 0x07
    320e:	78 85       	ldd	r23, Y+8	; 0x08
    3210:	89 85       	ldd	r24, Y+9	; 0x09
    3212:	9a 85       	ldd	r25, Y+10	; 0x0a
    3214:	20 e0       	ldi	r18, 0x00	; 0
    3216:	30 e0       	ldi	r19, 0x00	; 0
    3218:	40 e8       	ldi	r20, 0x80	; 128
    321a:	5f e3       	ldi	r21, 0x3F	; 63
    321c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3220:	88 23       	and	r24, r24
    3222:	2c f4       	brge	.+10     	; 0x322e <LCD_voidClearScreen+0x6c>
		__ticks = 1;
    3224:	81 e0       	ldi	r24, 0x01	; 1
    3226:	90 e0       	ldi	r25, 0x00	; 0
    3228:	9e 83       	std	Y+6, r25	; 0x06
    322a:	8d 83       	std	Y+5, r24	; 0x05
    322c:	3f c0       	rjmp	.+126    	; 0x32ac <LCD_voidClearScreen+0xea>
	else if (__tmp > 65535)
    322e:	6f 81       	ldd	r22, Y+7	; 0x07
    3230:	78 85       	ldd	r23, Y+8	; 0x08
    3232:	89 85       	ldd	r24, Y+9	; 0x09
    3234:	9a 85       	ldd	r25, Y+10	; 0x0a
    3236:	20 e0       	ldi	r18, 0x00	; 0
    3238:	3f ef       	ldi	r19, 0xFF	; 255
    323a:	4f e7       	ldi	r20, 0x7F	; 127
    323c:	57 e4       	ldi	r21, 0x47	; 71
    323e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3242:	18 16       	cp	r1, r24
    3244:	4c f5       	brge	.+82     	; 0x3298 <LCD_voidClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3246:	6b 85       	ldd	r22, Y+11	; 0x0b
    3248:	7c 85       	ldd	r23, Y+12	; 0x0c
    324a:	8d 85       	ldd	r24, Y+13	; 0x0d
    324c:	9e 85       	ldd	r25, Y+14	; 0x0e
    324e:	20 e0       	ldi	r18, 0x00	; 0
    3250:	30 e0       	ldi	r19, 0x00	; 0
    3252:	40 e2       	ldi	r20, 0x20	; 32
    3254:	51 e4       	ldi	r21, 0x41	; 65
    3256:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    325a:	dc 01       	movw	r26, r24
    325c:	cb 01       	movw	r24, r22
    325e:	bc 01       	movw	r22, r24
    3260:	cd 01       	movw	r24, r26
    3262:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3266:	dc 01       	movw	r26, r24
    3268:	cb 01       	movw	r24, r22
    326a:	9e 83       	std	Y+6, r25	; 0x06
    326c:	8d 83       	std	Y+5, r24	; 0x05
    326e:	0f c0       	rjmp	.+30     	; 0x328e <LCD_voidClearScreen+0xcc>
    3270:	88 ec       	ldi	r24, 0xC8	; 200
    3272:	90 e0       	ldi	r25, 0x00	; 0
    3274:	9c 83       	std	Y+4, r25	; 0x04
    3276:	8b 83       	std	Y+3, r24	; 0x03
    3278:	8b 81       	ldd	r24, Y+3	; 0x03
    327a:	9c 81       	ldd	r25, Y+4	; 0x04
    327c:	01 97       	sbiw	r24, 0x01	; 1
    327e:	f1 f7       	brne	.-4      	; 0x327c <LCD_voidClearScreen+0xba>
    3280:	9c 83       	std	Y+4, r25	; 0x04
    3282:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3284:	8d 81       	ldd	r24, Y+5	; 0x05
    3286:	9e 81       	ldd	r25, Y+6	; 0x06
    3288:	01 97       	sbiw	r24, 0x01	; 1
    328a:	9e 83       	std	Y+6, r25	; 0x06
    328c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    328e:	8d 81       	ldd	r24, Y+5	; 0x05
    3290:	9e 81       	ldd	r25, Y+6	; 0x06
    3292:	00 97       	sbiw	r24, 0x00	; 0
    3294:	69 f7       	brne	.-38     	; 0x3270 <LCD_voidClearScreen+0xae>
    3296:	14 c0       	rjmp	.+40     	; 0x32c0 <LCD_voidClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3298:	6f 81       	ldd	r22, Y+7	; 0x07
    329a:	78 85       	ldd	r23, Y+8	; 0x08
    329c:	89 85       	ldd	r24, Y+9	; 0x09
    329e:	9a 85       	ldd	r25, Y+10	; 0x0a
    32a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32a4:	dc 01       	movw	r26, r24
    32a6:	cb 01       	movw	r24, r22
    32a8:	9e 83       	std	Y+6, r25	; 0x06
    32aa:	8d 83       	std	Y+5, r24	; 0x05
    32ac:	8d 81       	ldd	r24, Y+5	; 0x05
    32ae:	9e 81       	ldd	r25, Y+6	; 0x06
    32b0:	9a 83       	std	Y+2, r25	; 0x02
    32b2:	89 83       	std	Y+1, r24	; 0x01
    32b4:	89 81       	ldd	r24, Y+1	; 0x01
    32b6:	9a 81       	ldd	r25, Y+2	; 0x02
    32b8:	01 97       	sbiw	r24, 0x01	; 1
    32ba:	f1 f7       	brne	.-4      	; 0x32b8 <LCD_voidClearScreen+0xf6>
    32bc:	9a 83       	std	Y+2, r25	; 0x02
    32be:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    32c0:	2e 96       	adiw	r28, 0x0e	; 14
    32c2:	0f b6       	in	r0, 0x3f	; 63
    32c4:	f8 94       	cli
    32c6:	de bf       	out	0x3e, r29	; 62
    32c8:	0f be       	out	0x3f, r0	; 63
    32ca:	cd bf       	out	0x3d, r28	; 61
    32cc:	cf 91       	pop	r28
    32ce:	df 91       	pop	r29
    32d0:	08 95       	ret

000032d2 <LCD_voidDispChar>:
void LCD_voidDispChar(u8 copy_u8char)
{
    32d2:	df 93       	push	r29
    32d4:	cf 93       	push	r28
    32d6:	cd b7       	in	r28, 0x3d	; 61
    32d8:	de b7       	in	r29, 0x3e	; 62
    32da:	2f 97       	sbiw	r28, 0x0f	; 15
    32dc:	0f b6       	in	r0, 0x3f	; 63
    32de:	f8 94       	cli
    32e0:	de bf       	out	0x3e, r29	; 62
    32e2:	0f be       	out	0x3f, r0	; 63
    32e4:	cd bf       	out	0x3d, r28	; 61
    32e6:	8f 87       	std	Y+15, r24	; 0x0f
		GPIO_voidWritePin  (LCD_RWPORT , LCD_RWPIN , 0);
		LCD_voidSendEnPulse();
		
	#elif LCD_MODE == 1 
		#if LCD_NIBBLE == 0 
			GPIO_voidWriteLowNipple(LCD_PORT , copy_u8char>>4);
    32e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    32ea:	98 2f       	mov	r25, r24
    32ec:	92 95       	swap	r25
    32ee:	9f 70       	andi	r25, 0x0F	; 15
    32f0:	80 e0       	ldi	r24, 0x00	; 0
    32f2:	69 2f       	mov	r22, r25
    32f4:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <GPIO_voidWriteLowNipple>
			GPIO_voidWritePin  (LCD_RSPORT , LCD_RSPIN , 1);
    32f8:	80 e0       	ldi	r24, 0x00	; 0
    32fa:	66 e0       	ldi	r22, 0x06	; 6
    32fc:	41 e0       	ldi	r20, 0x01	; 1
    32fe:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <GPIO_voidWritePin>
			GPIO_voidWritePin  (LCD_RWPORT , LCD_RWPIN , 0);
    3302:	80 e0       	ldi	r24, 0x00	; 0
    3304:	65 e0       	ldi	r22, 0x05	; 5
    3306:	40 e0       	ldi	r20, 0x00	; 0
    3308:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <GPIO_voidWritePin>
			LCD_voidSendEnPulse();
    330c:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <LCD_voidSendEnPulse>
		
			GPIO_voidWriteLowNipple(LCD_PORT , copy_u8char);
    3310:	80 e0       	ldi	r24, 0x00	; 0
    3312:	6f 85       	ldd	r22, Y+15	; 0x0f
    3314:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <GPIO_voidWriteLowNipple>
			GPIO_voidWritePin  (LCD_RSPORT , LCD_RSPIN , 1);
    3318:	80 e0       	ldi	r24, 0x00	; 0
    331a:	66 e0       	ldi	r22, 0x06	; 6
    331c:	41 e0       	ldi	r20, 0x01	; 1
    331e:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <GPIO_voidWritePin>
			GPIO_voidWritePin  (LCD_RWPORT , LCD_RWPIN , 0);
    3322:	80 e0       	ldi	r24, 0x00	; 0
    3324:	65 e0       	ldi	r22, 0x05	; 5
    3326:	40 e0       	ldi	r20, 0x00	; 0
    3328:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <GPIO_voidWritePin>
			LCD_voidSendEnPulse();
    332c:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <LCD_voidSendEnPulse>
    3330:	80 e0       	ldi	r24, 0x00	; 0
    3332:	90 e0       	ldi	r25, 0x00	; 0
    3334:	a0 e0       	ldi	r26, 0x00	; 0
    3336:	b0 e4       	ldi	r27, 0x40	; 64
    3338:	8b 87       	std	Y+11, r24	; 0x0b
    333a:	9c 87       	std	Y+12, r25	; 0x0c
    333c:	ad 87       	std	Y+13, r26	; 0x0d
    333e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3340:	6b 85       	ldd	r22, Y+11	; 0x0b
    3342:	7c 85       	ldd	r23, Y+12	; 0x0c
    3344:	8d 85       	ldd	r24, Y+13	; 0x0d
    3346:	9e 85       	ldd	r25, Y+14	; 0x0e
    3348:	20 e0       	ldi	r18, 0x00	; 0
    334a:	30 e0       	ldi	r19, 0x00	; 0
    334c:	4a ef       	ldi	r20, 0xFA	; 250
    334e:	54 e4       	ldi	r21, 0x44	; 68
    3350:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3354:	dc 01       	movw	r26, r24
    3356:	cb 01       	movw	r24, r22
    3358:	8f 83       	std	Y+7, r24	; 0x07
    335a:	98 87       	std	Y+8, r25	; 0x08
    335c:	a9 87       	std	Y+9, r26	; 0x09
    335e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3360:	6f 81       	ldd	r22, Y+7	; 0x07
    3362:	78 85       	ldd	r23, Y+8	; 0x08
    3364:	89 85       	ldd	r24, Y+9	; 0x09
    3366:	9a 85       	ldd	r25, Y+10	; 0x0a
    3368:	20 e0       	ldi	r18, 0x00	; 0
    336a:	30 e0       	ldi	r19, 0x00	; 0
    336c:	40 e8       	ldi	r20, 0x80	; 128
    336e:	5f e3       	ldi	r21, 0x3F	; 63
    3370:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3374:	88 23       	and	r24, r24
    3376:	2c f4       	brge	.+10     	; 0x3382 <LCD_voidDispChar+0xb0>
		__ticks = 1;
    3378:	81 e0       	ldi	r24, 0x01	; 1
    337a:	90 e0       	ldi	r25, 0x00	; 0
    337c:	9e 83       	std	Y+6, r25	; 0x06
    337e:	8d 83       	std	Y+5, r24	; 0x05
    3380:	3f c0       	rjmp	.+126    	; 0x3400 <LCD_voidDispChar+0x12e>
	else if (__tmp > 65535)
    3382:	6f 81       	ldd	r22, Y+7	; 0x07
    3384:	78 85       	ldd	r23, Y+8	; 0x08
    3386:	89 85       	ldd	r24, Y+9	; 0x09
    3388:	9a 85       	ldd	r25, Y+10	; 0x0a
    338a:	20 e0       	ldi	r18, 0x00	; 0
    338c:	3f ef       	ldi	r19, 0xFF	; 255
    338e:	4f e7       	ldi	r20, 0x7F	; 127
    3390:	57 e4       	ldi	r21, 0x47	; 71
    3392:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3396:	18 16       	cp	r1, r24
    3398:	4c f5       	brge	.+82     	; 0x33ec <LCD_voidDispChar+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    339a:	6b 85       	ldd	r22, Y+11	; 0x0b
    339c:	7c 85       	ldd	r23, Y+12	; 0x0c
    339e:	8d 85       	ldd	r24, Y+13	; 0x0d
    33a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    33a2:	20 e0       	ldi	r18, 0x00	; 0
    33a4:	30 e0       	ldi	r19, 0x00	; 0
    33a6:	40 e2       	ldi	r20, 0x20	; 32
    33a8:	51 e4       	ldi	r21, 0x41	; 65
    33aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33ae:	dc 01       	movw	r26, r24
    33b0:	cb 01       	movw	r24, r22
    33b2:	bc 01       	movw	r22, r24
    33b4:	cd 01       	movw	r24, r26
    33b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33ba:	dc 01       	movw	r26, r24
    33bc:	cb 01       	movw	r24, r22
    33be:	9e 83       	std	Y+6, r25	; 0x06
    33c0:	8d 83       	std	Y+5, r24	; 0x05
    33c2:	0f c0       	rjmp	.+30     	; 0x33e2 <LCD_voidDispChar+0x110>
    33c4:	88 ec       	ldi	r24, 0xC8	; 200
    33c6:	90 e0       	ldi	r25, 0x00	; 0
    33c8:	9c 83       	std	Y+4, r25	; 0x04
    33ca:	8b 83       	std	Y+3, r24	; 0x03
    33cc:	8b 81       	ldd	r24, Y+3	; 0x03
    33ce:	9c 81       	ldd	r25, Y+4	; 0x04
    33d0:	01 97       	sbiw	r24, 0x01	; 1
    33d2:	f1 f7       	brne	.-4      	; 0x33d0 <LCD_voidDispChar+0xfe>
    33d4:	9c 83       	std	Y+4, r25	; 0x04
    33d6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33d8:	8d 81       	ldd	r24, Y+5	; 0x05
    33da:	9e 81       	ldd	r25, Y+6	; 0x06
    33dc:	01 97       	sbiw	r24, 0x01	; 1
    33de:	9e 83       	std	Y+6, r25	; 0x06
    33e0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33e2:	8d 81       	ldd	r24, Y+5	; 0x05
    33e4:	9e 81       	ldd	r25, Y+6	; 0x06
    33e6:	00 97       	sbiw	r24, 0x00	; 0
    33e8:	69 f7       	brne	.-38     	; 0x33c4 <LCD_voidDispChar+0xf2>
    33ea:	14 c0       	rjmp	.+40     	; 0x3414 <LCD_voidDispChar+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33ec:	6f 81       	ldd	r22, Y+7	; 0x07
    33ee:	78 85       	ldd	r23, Y+8	; 0x08
    33f0:	89 85       	ldd	r24, Y+9	; 0x09
    33f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    33f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33f8:	dc 01       	movw	r26, r24
    33fa:	cb 01       	movw	r24, r22
    33fc:	9e 83       	std	Y+6, r25	; 0x06
    33fe:	8d 83       	std	Y+5, r24	; 0x05
    3400:	8d 81       	ldd	r24, Y+5	; 0x05
    3402:	9e 81       	ldd	r25, Y+6	; 0x06
    3404:	9a 83       	std	Y+2, r25	; 0x02
    3406:	89 83       	std	Y+1, r24	; 0x01
    3408:	89 81       	ldd	r24, Y+1	; 0x01
    340a:	9a 81       	ldd	r25, Y+2	; 0x02
    340c:	01 97       	sbiw	r24, 0x01	; 1
    340e:	f1 f7       	brne	.-4      	; 0x340c <LCD_voidDispChar+0x13a>
    3410:	9a 83       	std	Y+2, r25	; 0x02
    3412:	89 83       	std	Y+1, r24	; 0x01
			LCD_voidSendEnPulse();
			_delay_ms(2);
		#endif
	#endif
		
}
    3414:	2f 96       	adiw	r28, 0x0f	; 15
    3416:	0f b6       	in	r0, 0x3f	; 63
    3418:	f8 94       	cli
    341a:	de bf       	out	0x3e, r29	; 62
    341c:	0f be       	out	0x3f, r0	; 63
    341e:	cd bf       	out	0x3d, r28	; 61
    3420:	cf 91       	pop	r28
    3422:	df 91       	pop	r29
    3424:	08 95       	ret

00003426 <LCD_voidDispString>:
void LCD_voidDispString(u8 *copy_u8String)
{
    3426:	df 93       	push	r29
    3428:	cf 93       	push	r28
    342a:	00 d0       	rcall	.+0      	; 0x342c <LCD_voidDispString+0x6>
    342c:	cd b7       	in	r28, 0x3d	; 61
    342e:	de b7       	in	r29, 0x3e	; 62
    3430:	9a 83       	std	Y+2, r25	; 0x02
    3432:	89 83       	std	Y+1, r24	; 0x01
    3434:	0a c0       	rjmp	.+20     	; 0x344a <LCD_voidDispString+0x24>
	while ((*copy_u8String) != '\0')
	{
		LCD_voidDispChar (*copy_u8String);
    3436:	e9 81       	ldd	r30, Y+1	; 0x01
    3438:	fa 81       	ldd	r31, Y+2	; 0x02
    343a:	80 81       	ld	r24, Z
    343c:	0e 94 69 19 	call	0x32d2	; 0x32d2 <LCD_voidDispChar>
		copy_u8String ++ ;
    3440:	89 81       	ldd	r24, Y+1	; 0x01
    3442:	9a 81       	ldd	r25, Y+2	; 0x02
    3444:	01 96       	adiw	r24, 0x01	; 1
    3446:	9a 83       	std	Y+2, r25	; 0x02
    3448:	89 83       	std	Y+1, r24	; 0x01
	#endif
		
}
void LCD_voidDispString(u8 *copy_u8String)
{
	while ((*copy_u8String) != '\0')
    344a:	e9 81       	ldd	r30, Y+1	; 0x01
    344c:	fa 81       	ldd	r31, Y+2	; 0x02
    344e:	80 81       	ld	r24, Z
    3450:	88 23       	and	r24, r24
    3452:	89 f7       	brne	.-30     	; 0x3436 <LCD_voidDispString+0x10>
	{
		LCD_voidDispChar (*copy_u8String);
		copy_u8String ++ ;
	}
}
    3454:	0f 90       	pop	r0
    3456:	0f 90       	pop	r0
    3458:	cf 91       	pop	r28
    345a:	df 91       	pop	r29
    345c:	08 95       	ret

0000345e <LCD_voidDispNumber>:

void LCD_voidDispNumber (f32 copy_f32Num)
{
    345e:	df 93       	push	r29
    3460:	cf 93       	push	r28
    3462:	00 d0       	rcall	.+0      	; 0x3464 <LCD_voidDispNumber+0x6>
    3464:	00 d0       	rcall	.+0      	; 0x3466 <LCD_voidDispNumber+0x8>
    3466:	0f 92       	push	r0
    3468:	cd b7       	in	r28, 0x3d	; 61
    346a:	de b7       	in	r29, 0x3e	; 62
    346c:	6a 83       	std	Y+2, r22	; 0x02
    346e:	7b 83       	std	Y+3, r23	; 0x03
    3470:	8c 83       	std	Y+4, r24	; 0x04
    3472:	9d 83       	std	Y+5, r25	; 0x05
	u8 str[1];
	sprintf(str,"%d",(u8)copy_f32Num);
    3474:	6a 81       	ldd	r22, Y+2	; 0x02
    3476:	7b 81       	ldd	r23, Y+3	; 0x03
    3478:	8c 81       	ldd	r24, Y+4	; 0x04
    347a:	9d 81       	ldd	r25, Y+5	; 0x05
    347c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3480:	dc 01       	movw	r26, r24
    3482:	cb 01       	movw	r24, r22
    3484:	28 2f       	mov	r18, r24
    3486:	30 e0       	ldi	r19, 0x00	; 0
    3488:	00 d0       	rcall	.+0      	; 0x348a <LCD_voidDispNumber+0x2c>
    348a:	00 d0       	rcall	.+0      	; 0x348c <LCD_voidDispNumber+0x2e>
    348c:	00 d0       	rcall	.+0      	; 0x348e <LCD_voidDispNumber+0x30>
    348e:	ed b7       	in	r30, 0x3d	; 61
    3490:	fe b7       	in	r31, 0x3e	; 62
    3492:	31 96       	adiw	r30, 0x01	; 1
    3494:	ce 01       	movw	r24, r28
    3496:	01 96       	adiw	r24, 0x01	; 1
    3498:	91 83       	std	Z+1, r25	; 0x01
    349a:	80 83       	st	Z, r24
    349c:	80 ed       	ldi	r24, 0xD0	; 208
    349e:	90 e0       	ldi	r25, 0x00	; 0
    34a0:	93 83       	std	Z+3, r25	; 0x03
    34a2:	82 83       	std	Z+2, r24	; 0x02
    34a4:	35 83       	std	Z+5, r19	; 0x05
    34a6:	24 83       	std	Z+4, r18	; 0x04
    34a8:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <sprintf>
    34ac:	8d b7       	in	r24, 0x3d	; 61
    34ae:	9e b7       	in	r25, 0x3e	; 62
    34b0:	06 96       	adiw	r24, 0x06	; 6
    34b2:	0f b6       	in	r0, 0x3f	; 63
    34b4:	f8 94       	cli
    34b6:	9e bf       	out	0x3e, r25	; 62
    34b8:	0f be       	out	0x3f, r0	; 63
    34ba:	8d bf       	out	0x3d, r24	; 61
	LCD_voidDispString(str);
    34bc:	ce 01       	movw	r24, r28
    34be:	01 96       	adiw	r24, 0x01	; 1
    34c0:	0e 94 13 1a 	call	0x3426	; 0x3426 <LCD_voidDispString>
	LCD_voidDispChar('.');
    34c4:	8e e2       	ldi	r24, 0x2E	; 46
    34c6:	0e 94 69 19 	call	0x32d2	; 0x32d2 <LCD_voidDispChar>
	copy_f32Num = ((copy_f32Num-(u8)copy_f32Num)*100);
    34ca:	6a 81       	ldd	r22, Y+2	; 0x02
    34cc:	7b 81       	ldd	r23, Y+3	; 0x03
    34ce:	8c 81       	ldd	r24, Y+4	; 0x04
    34d0:	9d 81       	ldd	r25, Y+5	; 0x05
    34d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34d6:	dc 01       	movw	r26, r24
    34d8:	cb 01       	movw	r24, r22
    34da:	88 2f       	mov	r24, r24
    34dc:	90 e0       	ldi	r25, 0x00	; 0
    34de:	aa 27       	eor	r26, r26
    34e0:	97 fd       	sbrc	r25, 7
    34e2:	a0 95       	com	r26
    34e4:	ba 2f       	mov	r27, r26
    34e6:	bc 01       	movw	r22, r24
    34e8:	cd 01       	movw	r24, r26
    34ea:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    34ee:	9b 01       	movw	r18, r22
    34f0:	ac 01       	movw	r20, r24
    34f2:	6a 81       	ldd	r22, Y+2	; 0x02
    34f4:	7b 81       	ldd	r23, Y+3	; 0x03
    34f6:	8c 81       	ldd	r24, Y+4	; 0x04
    34f8:	9d 81       	ldd	r25, Y+5	; 0x05
    34fa:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    34fe:	dc 01       	movw	r26, r24
    3500:	cb 01       	movw	r24, r22
    3502:	bc 01       	movw	r22, r24
    3504:	cd 01       	movw	r24, r26
    3506:	20 e0       	ldi	r18, 0x00	; 0
    3508:	30 e0       	ldi	r19, 0x00	; 0
    350a:	48 ec       	ldi	r20, 0xC8	; 200
    350c:	52 e4       	ldi	r21, 0x42	; 66
    350e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3512:	dc 01       	movw	r26, r24
    3514:	cb 01       	movw	r24, r22
    3516:	8a 83       	std	Y+2, r24	; 0x02
    3518:	9b 83       	std	Y+3, r25	; 0x03
    351a:	ac 83       	std	Y+4, r26	; 0x04
    351c:	bd 83       	std	Y+5, r27	; 0x05
	sprintf(str,"%d",(u8)copy_f32Num);
    351e:	6a 81       	ldd	r22, Y+2	; 0x02
    3520:	7b 81       	ldd	r23, Y+3	; 0x03
    3522:	8c 81       	ldd	r24, Y+4	; 0x04
    3524:	9d 81       	ldd	r25, Y+5	; 0x05
    3526:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    352a:	dc 01       	movw	r26, r24
    352c:	cb 01       	movw	r24, r22
    352e:	28 2f       	mov	r18, r24
    3530:	30 e0       	ldi	r19, 0x00	; 0
    3532:	00 d0       	rcall	.+0      	; 0x3534 <LCD_voidDispNumber+0xd6>
    3534:	00 d0       	rcall	.+0      	; 0x3536 <LCD_voidDispNumber+0xd8>
    3536:	00 d0       	rcall	.+0      	; 0x3538 <LCD_voidDispNumber+0xda>
    3538:	ed b7       	in	r30, 0x3d	; 61
    353a:	fe b7       	in	r31, 0x3e	; 62
    353c:	31 96       	adiw	r30, 0x01	; 1
    353e:	ce 01       	movw	r24, r28
    3540:	01 96       	adiw	r24, 0x01	; 1
    3542:	91 83       	std	Z+1, r25	; 0x01
    3544:	80 83       	st	Z, r24
    3546:	80 ed       	ldi	r24, 0xD0	; 208
    3548:	90 e0       	ldi	r25, 0x00	; 0
    354a:	93 83       	std	Z+3, r25	; 0x03
    354c:	82 83       	std	Z+2, r24	; 0x02
    354e:	35 83       	std	Z+5, r19	; 0x05
    3550:	24 83       	std	Z+4, r18	; 0x04
    3552:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <sprintf>
    3556:	8d b7       	in	r24, 0x3d	; 61
    3558:	9e b7       	in	r25, 0x3e	; 62
    355a:	06 96       	adiw	r24, 0x06	; 6
    355c:	0f b6       	in	r0, 0x3f	; 63
    355e:	f8 94       	cli
    3560:	9e bf       	out	0x3e, r25	; 62
    3562:	0f be       	out	0x3f, r0	; 63
    3564:	8d bf       	out	0x3d, r24	; 61
	LCD_voidDispString(str);
    3566:	ce 01       	movw	r24, r28
    3568:	01 96       	adiw	r24, 0x01	; 1
    356a:	0e 94 13 1a 	call	0x3426	; 0x3426 <LCD_voidDispString>
}
    356e:	0f 90       	pop	r0
    3570:	0f 90       	pop	r0
    3572:	0f 90       	pop	r0
    3574:	0f 90       	pop	r0
    3576:	0f 90       	pop	r0
    3578:	cf 91       	pop	r28
    357a:	df 91       	pop	r29
    357c:	08 95       	ret

0000357e <LED_voidTurnOn>:




void LED_voidTurnOn(u8 copy_u8port , u8 copy_u8pin)
{
    357e:	df 93       	push	r29
    3580:	cf 93       	push	r28
    3582:	00 d0       	rcall	.+0      	; 0x3584 <LED_voidTurnOn+0x6>
    3584:	cd b7       	in	r28, 0x3d	; 61
    3586:	de b7       	in	r29, 0x3e	; 62
    3588:	89 83       	std	Y+1, r24	; 0x01
    358a:	6a 83       	std	Y+2, r22	; 0x02
	GPIO_voidSetPinDDR(copy_u8port , copy_u8pin , OUTPUT );
    358c:	89 81       	ldd	r24, Y+1	; 0x01
    358e:	6a 81       	ldd	r22, Y+2	; 0x02
    3590:	41 e0       	ldi	r20, 0x01	; 1
    3592:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <GPIO_voidSetPinDDR>
	GPIO_voidWritePin (copy_u8port , copy_u8pin , HIGH);
    3596:	89 81       	ldd	r24, Y+1	; 0x01
    3598:	6a 81       	ldd	r22, Y+2	; 0x02
    359a:	41 e0       	ldi	r20, 0x01	; 1
    359c:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <GPIO_voidWritePin>
}
    35a0:	0f 90       	pop	r0
    35a2:	0f 90       	pop	r0
    35a4:	cf 91       	pop	r28
    35a6:	df 91       	pop	r29
    35a8:	08 95       	ret

000035aa <LED_voidTurnOff>:
void LED_voidTurnOff(u8 copy_u8port , u8 copy_u8pin)
{
    35aa:	df 93       	push	r29
    35ac:	cf 93       	push	r28
    35ae:	00 d0       	rcall	.+0      	; 0x35b0 <LED_voidTurnOff+0x6>
    35b0:	cd b7       	in	r28, 0x3d	; 61
    35b2:	de b7       	in	r29, 0x3e	; 62
    35b4:	89 83       	std	Y+1, r24	; 0x01
    35b6:	6a 83       	std	Y+2, r22	; 0x02
	GPIO_voidSetPinDDR(copy_u8port , copy_u8pin , OUTPUT );
    35b8:	89 81       	ldd	r24, Y+1	; 0x01
    35ba:	6a 81       	ldd	r22, Y+2	; 0x02
    35bc:	41 e0       	ldi	r20, 0x01	; 1
    35be:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <GPIO_voidSetPinDDR>
	GPIO_voidWritePin (copy_u8port , copy_u8pin , LOW);
    35c2:	89 81       	ldd	r24, Y+1	; 0x01
    35c4:	6a 81       	ldd	r22, Y+2	; 0x02
    35c6:	40 e0       	ldi	r20, 0x00	; 0
    35c8:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <GPIO_voidWritePin>
}
    35cc:	0f 90       	pop	r0
    35ce:	0f 90       	pop	r0
    35d0:	cf 91       	pop	r28
    35d2:	df 91       	pop	r29
    35d4:	08 95       	ret

000035d6 <LED_voidTogLed>:
void LED_voidTogLed (u8 copy_u8port , u8 copy_u8pin )
{
    35d6:	df 93       	push	r29
    35d8:	cf 93       	push	r28
    35da:	00 d0       	rcall	.+0      	; 0x35dc <LED_voidTogLed+0x6>
    35dc:	cd b7       	in	r28, 0x3d	; 61
    35de:	de b7       	in	r29, 0x3e	; 62
    35e0:	89 83       	std	Y+1, r24	; 0x01
    35e2:	6a 83       	std	Y+2, r22	; 0x02
	GPIO_voidSetPinDDR(copy_u8port , copy_u8pin , OUTPUT );
    35e4:	89 81       	ldd	r24, Y+1	; 0x01
    35e6:	6a 81       	ldd	r22, Y+2	; 0x02
    35e8:	41 e0       	ldi	r20, 0x01	; 1
    35ea:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <GPIO_voidSetPinDDR>
	GPIO_voidTogPin(copy_u8port , copy_u8pin);
    35ee:	89 81       	ldd	r24, Y+1	; 0x01
    35f0:	6a 81       	ldd	r22, Y+2	; 0x02
    35f2:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <GPIO_voidTogPin>
}
    35f6:	0f 90       	pop	r0
    35f8:	0f 90       	pop	r0
    35fa:	cf 91       	pop	r28
    35fc:	df 91       	pop	r29
    35fe:	08 95       	ret

00003600 <USART_voidInit>:
void (*CB_TX)(void);
void (*CB_RX)(void);
void (*CB_UDR)(void);

void USART_voidInit(u32 copy_u8BaudRate)
{
    3600:	df 93       	push	r29
    3602:	cf 93       	push	r28
    3604:	00 d0       	rcall	.+0      	; 0x3606 <USART_voidInit+0x6>
    3606:	00 d0       	rcall	.+0      	; 0x3608 <USART_voidInit+0x8>
    3608:	00 d0       	rcall	.+0      	; 0x360a <USART_voidInit+0xa>
    360a:	cd b7       	in	r28, 0x3d	; 61
    360c:	de b7       	in	r29, 0x3e	; 62
    360e:	6b 83       	std	Y+3, r22	; 0x03
    3610:	7c 83       	std	Y+4, r23	; 0x04
    3612:	8d 83       	std	Y+5, r24	; 0x05
    3614:	9e 83       	std	Y+6, r25	; 0x06
	u16 Local_UBRR ;
	// Adjust Mode
	CLEAR_BIT (USCRC , URSEL);
    3616:	a0 e4       	ldi	r26, 0x40	; 64
    3618:	b0 e0       	ldi	r27, 0x00	; 0
    361a:	e0 e4       	ldi	r30, 0x40	; 64
    361c:	f0 e0       	ldi	r31, 0x00	; 0
    361e:	80 81       	ld	r24, Z
    3620:	8f 77       	andi	r24, 0x7F	; 127
    3622:	8c 93       	st	X, r24
	#if USART_MODE == 0
	//SET_BIT(USCRC,URSEL);
	CLEAR_BIT (USCRC , URSEL);
    3624:	a0 e4       	ldi	r26, 0x40	; 64
    3626:	b0 e0       	ldi	r27, 0x00	; 0
    3628:	e0 e4       	ldi	r30, 0x40	; 64
    362a:	f0 e0       	ldi	r31, 0x00	; 0
    362c:	80 81       	ld	r24, Z
    362e:	8f 77       	andi	r24, 0x7F	; 127
    3630:	8c 93       	st	X, r24
	Local_UBRR = (8000000/(16*copy_u8BaudRate))-1 ;
    3632:	8b 81       	ldd	r24, Y+3	; 0x03
    3634:	9c 81       	ldd	r25, Y+4	; 0x04
    3636:	ad 81       	ldd	r26, Y+5	; 0x05
    3638:	be 81       	ldd	r27, Y+6	; 0x06
    363a:	88 0f       	add	r24, r24
    363c:	99 1f       	adc	r25, r25
    363e:	aa 1f       	adc	r26, r26
    3640:	bb 1f       	adc	r27, r27
    3642:	88 0f       	add	r24, r24
    3644:	99 1f       	adc	r25, r25
    3646:	aa 1f       	adc	r26, r26
    3648:	bb 1f       	adc	r27, r27
    364a:	88 0f       	add	r24, r24
    364c:	99 1f       	adc	r25, r25
    364e:	aa 1f       	adc	r26, r26
    3650:	bb 1f       	adc	r27, r27
    3652:	88 0f       	add	r24, r24
    3654:	99 1f       	adc	r25, r25
    3656:	aa 1f       	adc	r26, r26
    3658:	bb 1f       	adc	r27, r27
    365a:	9c 01       	movw	r18, r24
    365c:	ad 01       	movw	r20, r26
    365e:	80 e0       	ldi	r24, 0x00	; 0
    3660:	92 e1       	ldi	r25, 0x12	; 18
    3662:	aa e7       	ldi	r26, 0x7A	; 122
    3664:	b0 e0       	ldi	r27, 0x00	; 0
    3666:	bc 01       	movw	r22, r24
    3668:	cd 01       	movw	r24, r26
    366a:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <__udivmodsi4>
    366e:	da 01       	movw	r26, r20
    3670:	c9 01       	movw	r24, r18
    3672:	01 97       	sbiw	r24, 0x01	; 1
    3674:	9a 83       	std	Y+2, r25	; 0x02
    3676:	89 83       	std	Y+1, r24	; 0x01
	#elif USART_WORDSIZE == 2
		CLEAR_BIT(USCRC,UCSZ0);
		SET_BIT(USCRC,UCSZ1);
		CLEAR_BIT(USCRB,UCSZ2);
	#elif USART_WORDSIZE == 3
		SET_BIT(USCRC,UCSZ0);
    3678:	a0 e4       	ldi	r26, 0x40	; 64
    367a:	b0 e0       	ldi	r27, 0x00	; 0
    367c:	e0 e4       	ldi	r30, 0x40	; 64
    367e:	f0 e0       	ldi	r31, 0x00	; 0
    3680:	80 81       	ld	r24, Z
    3682:	82 60       	ori	r24, 0x02	; 2
    3684:	8c 93       	st	X, r24
		SET_BIT(USCRC,UCSZ1);
    3686:	a0 e4       	ldi	r26, 0x40	; 64
    3688:	b0 e0       	ldi	r27, 0x00	; 0
    368a:	e0 e4       	ldi	r30, 0x40	; 64
    368c:	f0 e0       	ldi	r31, 0x00	; 0
    368e:	80 81       	ld	r24, Z
    3690:	84 60       	ori	r24, 0x04	; 4
    3692:	8c 93       	st	X, r24
		CLEAR_BIT(USCRB,UCSZ2);
    3694:	aa e2       	ldi	r26, 0x2A	; 42
    3696:	b0 e0       	ldi	r27, 0x00	; 0
    3698:	ea e2       	ldi	r30, 0x2A	; 42
    369a:	f0 e0       	ldi	r31, 0x00	; 0
    369c:	80 81       	ld	r24, Z
    369e:	8b 7f       	andi	r24, 0xFB	; 251
    36a0:	8c 93       	st	X, r24
		SET_BIT(USCRC,UCSZ1);
		SET_BIT(USCRB,UCSZ2);
	#endif
	/* Adjust Parity */
	#if   USART_PARITY  == 0
		CLEAR_BIT(USCRC,UPM0);
    36a2:	a0 e4       	ldi	r26, 0x40	; 64
    36a4:	b0 e0       	ldi	r27, 0x00	; 0
    36a6:	e0 e4       	ldi	r30, 0x40	; 64
    36a8:	f0 e0       	ldi	r31, 0x00	; 0
    36aa:	80 81       	ld	r24, Z
    36ac:	8f 7e       	andi	r24, 0xEF	; 239
    36ae:	8c 93       	st	X, r24
		CLEAR_BIT(USCRC,UPM1);
    36b0:	a0 e4       	ldi	r26, 0x40	; 64
    36b2:	b0 e0       	ldi	r27, 0x00	; 0
    36b4:	e0 e4       	ldi	r30, 0x40	; 64
    36b6:	f0 e0       	ldi	r31, 0x00	; 0
    36b8:	80 81       	ld	r24, Z
    36ba:	8f 7d       	andi	r24, 0xDF	; 223
    36bc:	8c 93       	st	X, r24
	#endif
	/* Adjust Stop bit */
	#if  USART_STOPBIT == 0
		CLEAR_BIT(USCRC,USBS);
	#else 
		SET_BIT(USCRC,USBS);
    36be:	a0 e4       	ldi	r26, 0x40	; 64
    36c0:	b0 e0       	ldi	r27, 0x00	; 0
    36c2:	e0 e4       	ldi	r30, 0x40	; 64
    36c4:	f0 e0       	ldi	r31, 0x00	; 0
    36c6:	80 81       	ld	r24, Z
    36c8:	88 60       	ori	r24, 0x08	; 8
    36ca:	8c 93       	st	X, r24
	#endif
	
	/* Enable TX and RX */
	SET_BIT(USCRB,TXEN);
    36cc:	aa e2       	ldi	r26, 0x2A	; 42
    36ce:	b0 e0       	ldi	r27, 0x00	; 0
    36d0:	ea e2       	ldi	r30, 0x2A	; 42
    36d2:	f0 e0       	ldi	r31, 0x00	; 0
    36d4:	80 81       	ld	r24, Z
    36d6:	88 60       	ori	r24, 0x08	; 8
    36d8:	8c 93       	st	X, r24
	SET_BIT(USCRB,RXEN);
    36da:	aa e2       	ldi	r26, 0x2A	; 42
    36dc:	b0 e0       	ldi	r27, 0x00	; 0
    36de:	ea e2       	ldi	r30, 0x2A	; 42
    36e0:	f0 e0       	ldi	r31, 0x00	; 0
    36e2:	80 81       	ld	r24, Z
    36e4:	80 61       	ori	r24, 0x10	; 16
    36e6:	8c 93       	st	X, r24
	
	/* Adjust UBRR */
	SET_BIT(USCRC,URSEL);
    36e8:	a0 e4       	ldi	r26, 0x40	; 64
    36ea:	b0 e0       	ldi	r27, 0x00	; 0
    36ec:	e0 e4       	ldi	r30, 0x40	; 64
    36ee:	f0 e0       	ldi	r31, 0x00	; 0
    36f0:	80 81       	ld	r24, Z
    36f2:	80 68       	ori	r24, 0x80	; 128
    36f4:	8c 93       	st	X, r24
	UBRRH = (u8)(Local_UBRR >> 8);
    36f6:	e0 e4       	ldi	r30, 0x40	; 64
    36f8:	f0 e0       	ldi	r31, 0x00	; 0
    36fa:	89 81       	ldd	r24, Y+1	; 0x01
    36fc:	9a 81       	ldd	r25, Y+2	; 0x02
    36fe:	89 2f       	mov	r24, r25
    3700:	99 27       	eor	r25, r25
    3702:	80 83       	st	Z, r24
	UBRRL = (u8)(Local_UBRR);
    3704:	e9 e2       	ldi	r30, 0x29	; 41
    3706:	f0 e0       	ldi	r31, 0x00	; 0
    3708:	89 81       	ldd	r24, Y+1	; 0x01
    370a:	80 83       	st	Z, r24
}
    370c:	26 96       	adiw	r28, 0x06	; 6
    370e:	0f b6       	in	r0, 0x3f	; 63
    3710:	f8 94       	cli
    3712:	de bf       	out	0x3e, r29	; 62
    3714:	0f be       	out	0x3f, r0	; 63
    3716:	cd bf       	out	0x3d, r28	; 61
    3718:	cf 91       	pop	r28
    371a:	df 91       	pop	r29
    371c:	08 95       	ret

0000371e <USART_voidSendByte>:

void USART_voidSendByte(u8 copy_u8DataSend)
{
    371e:	df 93       	push	r29
    3720:	cf 93       	push	r28
    3722:	0f 92       	push	r0
    3724:	cd b7       	in	r28, 0x3d	; 61
    3726:	de b7       	in	r29, 0x3e	; 62
    3728:	89 83       	std	Y+1, r24	; 0x01
	while(GET_BIT(USCRA,UDRE)==0);
    372a:	eb e2       	ldi	r30, 0x2B	; 43
    372c:	f0 e0       	ldi	r31, 0x00	; 0
    372e:	80 81       	ld	r24, Z
    3730:	88 2f       	mov	r24, r24
    3732:	90 e0       	ldi	r25, 0x00	; 0
    3734:	80 72       	andi	r24, 0x20	; 32
    3736:	90 70       	andi	r25, 0x00	; 0
    3738:	95 95       	asr	r25
    373a:	87 95       	ror	r24
    373c:	95 95       	asr	r25
    373e:	87 95       	ror	r24
    3740:	95 95       	asr	r25
    3742:	87 95       	ror	r24
    3744:	95 95       	asr	r25
    3746:	87 95       	ror	r24
    3748:	95 95       	asr	r25
    374a:	87 95       	ror	r24
    374c:	00 97       	sbiw	r24, 0x00	; 0
    374e:	69 f3       	breq	.-38     	; 0x372a <USART_voidSendByte+0xc>
	UDR = copy_u8DataSend ;
    3750:	ec e2       	ldi	r30, 0x2C	; 44
    3752:	f0 e0       	ldi	r31, 0x00	; 0
    3754:	89 81       	ldd	r24, Y+1	; 0x01
    3756:	80 83       	st	Z, r24
}
    3758:	0f 90       	pop	r0
    375a:	cf 91       	pop	r28
    375c:	df 91       	pop	r29
    375e:	08 95       	ret

00003760 <USART_u8RecieveByte>:

u8 USART_u8RecieveByte(void)
{
    3760:	df 93       	push	r29
    3762:	cf 93       	push	r28
    3764:	cd b7       	in	r28, 0x3d	; 61
    3766:	de b7       	in	r29, 0x3e	; 62
	while(GET_BIT(USCRA,RXC)==0);
    3768:	eb e2       	ldi	r30, 0x2B	; 43
    376a:	f0 e0       	ldi	r31, 0x00	; 0
    376c:	80 81       	ld	r24, Z
    376e:	88 1f       	adc	r24, r24
    3770:	88 27       	eor	r24, r24
    3772:	88 1f       	adc	r24, r24
    3774:	88 2f       	mov	r24, r24
    3776:	90 e0       	ldi	r25, 0x00	; 0
    3778:	90 70       	andi	r25, 0x00	; 0
    377a:	00 97       	sbiw	r24, 0x00	; 0
    377c:	a9 f3       	breq	.-22     	; 0x3768 <USART_u8RecieveByte+0x8>
	return UDR;
    377e:	ec e2       	ldi	r30, 0x2C	; 44
    3780:	f0 e0       	ldi	r31, 0x00	; 0
    3782:	80 81       	ld	r24, Z
}
    3784:	cf 91       	pop	r28
    3786:	df 91       	pop	r29
    3788:	08 95       	ret

0000378a <USART_voidEnableTXInterrupt>:

void USART_voidEnableTXInterrupt(void)
{
    378a:	df 93       	push	r29
    378c:	cf 93       	push	r28
    378e:	cd b7       	in	r28, 0x3d	; 61
    3790:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(USCRB,TXCIE);
    3792:	aa e2       	ldi	r26, 0x2A	; 42
    3794:	b0 e0       	ldi	r27, 0x00	; 0
    3796:	ea e2       	ldi	r30, 0x2A	; 42
    3798:	f0 e0       	ldi	r31, 0x00	; 0
    379a:	80 81       	ld	r24, Z
    379c:	80 64       	ori	r24, 0x40	; 64
    379e:	8c 93       	st	X, r24
}
    37a0:	cf 91       	pop	r28
    37a2:	df 91       	pop	r29
    37a4:	08 95       	ret

000037a6 <USART_voidEnableRXInterrupt>:

void USART_voidEnableRXInterrupt(void)
{
    37a6:	df 93       	push	r29
    37a8:	cf 93       	push	r28
    37aa:	cd b7       	in	r28, 0x3d	; 61
    37ac:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(USCRB,RXCIE);
    37ae:	aa e2       	ldi	r26, 0x2A	; 42
    37b0:	b0 e0       	ldi	r27, 0x00	; 0
    37b2:	ea e2       	ldi	r30, 0x2A	; 42
    37b4:	f0 e0       	ldi	r31, 0x00	; 0
    37b6:	80 81       	ld	r24, Z
    37b8:	80 68       	ori	r24, 0x80	; 128
    37ba:	8c 93       	st	X, r24
}
    37bc:	cf 91       	pop	r28
    37be:	df 91       	pop	r29
    37c0:	08 95       	ret

000037c2 <USART_voidEnableUDREInterrupt>:

void USART_voidEnableUDREInterrupt(void)
{
    37c2:	df 93       	push	r29
    37c4:	cf 93       	push	r28
    37c6:	cd b7       	in	r28, 0x3d	; 61
    37c8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(USCRB,UDRIE);
    37ca:	aa e2       	ldi	r26, 0x2A	; 42
    37cc:	b0 e0       	ldi	r27, 0x00	; 0
    37ce:	ea e2       	ldi	r30, 0x2A	; 42
    37d0:	f0 e0       	ldi	r31, 0x00	; 0
    37d2:	80 81       	ld	r24, Z
    37d4:	80 62       	ori	r24, 0x20	; 32
    37d6:	8c 93       	st	X, r24
}
    37d8:	cf 91       	pop	r28
    37da:	df 91       	pop	r29
    37dc:	08 95       	ret

000037de <USART_voidSetCBTX>:

void USART_voidSetCBTX(void(*copy_CB)(void))
{
    37de:	df 93       	push	r29
    37e0:	cf 93       	push	r28
    37e2:	00 d0       	rcall	.+0      	; 0x37e4 <USART_voidSetCBTX+0x6>
    37e4:	cd b7       	in	r28, 0x3d	; 61
    37e6:	de b7       	in	r29, 0x3e	; 62
    37e8:	9a 83       	std	Y+2, r25	; 0x02
    37ea:	89 83       	std	Y+1, r24	; 0x01
	CB_TX = copy_CB;
    37ec:	89 81       	ldd	r24, Y+1	; 0x01
    37ee:	9a 81       	ldd	r25, Y+2	; 0x02
    37f0:	90 93 17 02 	sts	0x0217, r25
    37f4:	80 93 16 02 	sts	0x0216, r24
}
    37f8:	0f 90       	pop	r0
    37fa:	0f 90       	pop	r0
    37fc:	cf 91       	pop	r28
    37fe:	df 91       	pop	r29
    3800:	08 95       	ret

00003802 <USART_voidSetCBRX>:

void USART_voidSetCBRX(void(*copy_CB)(void))
{
    3802:	df 93       	push	r29
    3804:	cf 93       	push	r28
    3806:	00 d0       	rcall	.+0      	; 0x3808 <USART_voidSetCBRX+0x6>
    3808:	cd b7       	in	r28, 0x3d	; 61
    380a:	de b7       	in	r29, 0x3e	; 62
    380c:	9a 83       	std	Y+2, r25	; 0x02
    380e:	89 83       	std	Y+1, r24	; 0x01
	CB_RX = copy_CB;
    3810:	89 81       	ldd	r24, Y+1	; 0x01
    3812:	9a 81       	ldd	r25, Y+2	; 0x02
    3814:	90 93 19 02 	sts	0x0219, r25
    3818:	80 93 18 02 	sts	0x0218, r24
}
    381c:	0f 90       	pop	r0
    381e:	0f 90       	pop	r0
    3820:	cf 91       	pop	r28
    3822:	df 91       	pop	r29
    3824:	08 95       	ret

00003826 <USART_voidSetCBUDRE>:

void USART_voidSetCBUDRE(void(*copy_CB)(void))
{
    3826:	df 93       	push	r29
    3828:	cf 93       	push	r28
    382a:	00 d0       	rcall	.+0      	; 0x382c <USART_voidSetCBUDRE+0x6>
    382c:	cd b7       	in	r28, 0x3d	; 61
    382e:	de b7       	in	r29, 0x3e	; 62
    3830:	9a 83       	std	Y+2, r25	; 0x02
    3832:	89 83       	std	Y+1, r24	; 0x01
	CB_UDR = copy_CB;
    3834:	89 81       	ldd	r24, Y+1	; 0x01
    3836:	9a 81       	ldd	r25, Y+2	; 0x02
    3838:	90 93 15 02 	sts	0x0215, r25
    383c:	80 93 14 02 	sts	0x0214, r24
}
    3840:	0f 90       	pop	r0
    3842:	0f 90       	pop	r0
    3844:	cf 91       	pop	r28
    3846:	df 91       	pop	r29
    3848:	08 95       	ret

0000384a <USART_voidSendString>:

void USART_voidSendString(u8 *copy_ptrString)
{
    384a:	df 93       	push	r29
    384c:	cf 93       	push	r28
    384e:	00 d0       	rcall	.+0      	; 0x3850 <USART_voidSendString+0x6>
    3850:	cd b7       	in	r28, 0x3d	; 61
    3852:	de b7       	in	r29, 0x3e	; 62
    3854:	9a 83       	std	Y+2, r25	; 0x02
    3856:	89 83       	std	Y+1, r24	; 0x01
    3858:	0a c0       	rjmp	.+20     	; 0x386e <USART_voidSendString+0x24>
	while((*copy_ptrString) != '\0')
	{
		USART_voidSendByte(*copy_ptrString);
    385a:	e9 81       	ldd	r30, Y+1	; 0x01
    385c:	fa 81       	ldd	r31, Y+2	; 0x02
    385e:	80 81       	ld	r24, Z
    3860:	0e 94 8f 1b 	call	0x371e	; 0x371e <USART_voidSendByte>
		copy_ptrString++;
    3864:	89 81       	ldd	r24, Y+1	; 0x01
    3866:	9a 81       	ldd	r25, Y+2	; 0x02
    3868:	01 96       	adiw	r24, 0x01	; 1
    386a:	9a 83       	std	Y+2, r25	; 0x02
    386c:	89 83       	std	Y+1, r24	; 0x01
	CB_UDR = copy_CB;
}

void USART_voidSendString(u8 *copy_ptrString)
{
	while((*copy_ptrString) != '\0')
    386e:	e9 81       	ldd	r30, Y+1	; 0x01
    3870:	fa 81       	ldd	r31, Y+2	; 0x02
    3872:	80 81       	ld	r24, Z
    3874:	88 23       	and	r24, r24
    3876:	89 f7       	brne	.-30     	; 0x385a <USART_voidSendString+0x10>
	{
		USART_voidSendByte(*copy_ptrString);
		copy_ptrString++;
	}
}
    3878:	0f 90       	pop	r0
    387a:	0f 90       	pop	r0
    387c:	cf 91       	pop	r28
    387e:	df 91       	pop	r29
    3880:	08 95       	ret

00003882 <USART_voidSendu32Block>:

void USART_voidSendu32Block(u32 copy_u32DataSend)
{
    3882:	df 93       	push	r29
    3884:	cf 93       	push	r28
    3886:	00 d0       	rcall	.+0      	; 0x3888 <USART_voidSendu32Block+0x6>
    3888:	00 d0       	rcall	.+0      	; 0x388a <USART_voidSendu32Block+0x8>
    388a:	00 d0       	rcall	.+0      	; 0x388c <USART_voidSendu32Block+0xa>
    388c:	cd b7       	in	r28, 0x3d	; 61
    388e:	de b7       	in	r29, 0x3e	; 62
    3890:	6b 83       	std	Y+3, r22	; 0x03
    3892:	7c 83       	std	Y+4, r23	; 0x04
    3894:	8d 83       	std	Y+5, r24	; 0x05
    3896:	9e 83       	std	Y+6, r25	; 0x06
	u8 Data;
	u8 counter;
	for(counter = 0; counter <=3 ; counter ++)
    3898:	19 82       	std	Y+1, r1	; 0x01
    389a:	1c c0       	rjmp	.+56     	; 0x38d4 <USART_voidSendu32Block+0x52>
	{
		Data = (u8)(copy_u32DataSend >> (8*counter));
    389c:	89 81       	ldd	r24, Y+1	; 0x01
    389e:	88 2f       	mov	r24, r24
    38a0:	90 e0       	ldi	r25, 0x00	; 0
    38a2:	9c 01       	movw	r18, r24
    38a4:	22 0f       	add	r18, r18
    38a6:	33 1f       	adc	r19, r19
    38a8:	22 0f       	add	r18, r18
    38aa:	33 1f       	adc	r19, r19
    38ac:	22 0f       	add	r18, r18
    38ae:	33 1f       	adc	r19, r19
    38b0:	8b 81       	ldd	r24, Y+3	; 0x03
    38b2:	9c 81       	ldd	r25, Y+4	; 0x04
    38b4:	ad 81       	ldd	r26, Y+5	; 0x05
    38b6:	be 81       	ldd	r27, Y+6	; 0x06
    38b8:	04 c0       	rjmp	.+8      	; 0x38c2 <USART_voidSendu32Block+0x40>
    38ba:	b6 95       	lsr	r27
    38bc:	a7 95       	ror	r26
    38be:	97 95       	ror	r25
    38c0:	87 95       	ror	r24
    38c2:	2a 95       	dec	r18
    38c4:	d2 f7       	brpl	.-12     	; 0x38ba <USART_voidSendu32Block+0x38>
    38c6:	8a 83       	std	Y+2, r24	; 0x02
		USART_voidSendByte(Data);
    38c8:	8a 81       	ldd	r24, Y+2	; 0x02
    38ca:	0e 94 8f 1b 	call	0x371e	; 0x371e <USART_voidSendByte>

void USART_voidSendu32Block(u32 copy_u32DataSend)
{
	u8 Data;
	u8 counter;
	for(counter = 0; counter <=3 ; counter ++)
    38ce:	89 81       	ldd	r24, Y+1	; 0x01
    38d0:	8f 5f       	subi	r24, 0xFF	; 255
    38d2:	89 83       	std	Y+1, r24	; 0x01
    38d4:	89 81       	ldd	r24, Y+1	; 0x01
    38d6:	84 30       	cpi	r24, 0x04	; 4
    38d8:	08 f3       	brcs	.-62     	; 0x389c <USART_voidSendu32Block+0x1a>
	{
		Data = (u8)(copy_u32DataSend >> (8*counter));
		USART_voidSendByte(Data);
	}
}
    38da:	26 96       	adiw	r28, 0x06	; 6
    38dc:	0f b6       	in	r0, 0x3f	; 63
    38de:	f8 94       	cli
    38e0:	de bf       	out	0x3e, r29	; 62
    38e2:	0f be       	out	0x3f, r0	; 63
    38e4:	cd bf       	out	0x3d, r28	; 61
    38e6:	cf 91       	pop	r28
    38e8:	df 91       	pop	r29
    38ea:	08 95       	ret

000038ec <USART_u32Recieveu32Block>:
u32 USART_u32Recieveu32Block(void)
{
    38ec:	df 93       	push	r29
    38ee:	cf 93       	push	r28
    38f0:	00 d0       	rcall	.+0      	; 0x38f2 <USART_u32Recieveu32Block+0x6>
    38f2:	00 d0       	rcall	.+0      	; 0x38f4 <USART_u32Recieveu32Block+0x8>
    38f4:	0f 92       	push	r0
    38f6:	cd b7       	in	r28, 0x3d	; 61
    38f8:	de b7       	in	r29, 0x3e	; 62
	u32 Data;
	u8 counter;
	for(counter = 0; counter <=3 ; counter ++)
    38fa:	19 82       	std	Y+1, r1	; 0x01
    38fc:	28 c0       	rjmp	.+80     	; 0x394e <USART_u32Recieveu32Block+0x62>
	{
		Data |=(USART_u8RecieveByte() << (8* counter)); 
    38fe:	0e 94 b0 1b 	call	0x3760	; 0x3760 <USART_u8RecieveByte>
    3902:	28 2f       	mov	r18, r24
    3904:	30 e0       	ldi	r19, 0x00	; 0
    3906:	89 81       	ldd	r24, Y+1	; 0x01
    3908:	88 2f       	mov	r24, r24
    390a:	90 e0       	ldi	r25, 0x00	; 0
    390c:	88 0f       	add	r24, r24
    390e:	99 1f       	adc	r25, r25
    3910:	88 0f       	add	r24, r24
    3912:	99 1f       	adc	r25, r25
    3914:	88 0f       	add	r24, r24
    3916:	99 1f       	adc	r25, r25
    3918:	a9 01       	movw	r20, r18
    391a:	02 c0       	rjmp	.+4      	; 0x3920 <USART_u32Recieveu32Block+0x34>
    391c:	44 0f       	add	r20, r20
    391e:	55 1f       	adc	r21, r21
    3920:	8a 95       	dec	r24
    3922:	e2 f7       	brpl	.-8      	; 0x391c <USART_u32Recieveu32Block+0x30>
    3924:	ca 01       	movw	r24, r20
    3926:	9c 01       	movw	r18, r24
    3928:	44 27       	eor	r20, r20
    392a:	37 fd       	sbrc	r19, 7
    392c:	40 95       	com	r20
    392e:	54 2f       	mov	r21, r20
    3930:	8a 81       	ldd	r24, Y+2	; 0x02
    3932:	9b 81       	ldd	r25, Y+3	; 0x03
    3934:	ac 81       	ldd	r26, Y+4	; 0x04
    3936:	bd 81       	ldd	r27, Y+5	; 0x05
    3938:	82 2b       	or	r24, r18
    393a:	93 2b       	or	r25, r19
    393c:	a4 2b       	or	r26, r20
    393e:	b5 2b       	or	r27, r21
    3940:	8a 83       	std	Y+2, r24	; 0x02
    3942:	9b 83       	std	Y+3, r25	; 0x03
    3944:	ac 83       	std	Y+4, r26	; 0x04
    3946:	bd 83       	std	Y+5, r27	; 0x05
}
u32 USART_u32Recieveu32Block(void)
{
	u32 Data;
	u8 counter;
	for(counter = 0; counter <=3 ; counter ++)
    3948:	89 81       	ldd	r24, Y+1	; 0x01
    394a:	8f 5f       	subi	r24, 0xFF	; 255
    394c:	89 83       	std	Y+1, r24	; 0x01
    394e:	89 81       	ldd	r24, Y+1	; 0x01
    3950:	84 30       	cpi	r24, 0x04	; 4
    3952:	a8 f2       	brcs	.-86     	; 0x38fe <USART_u32Recieveu32Block+0x12>
	{
		Data |=(USART_u8RecieveByte() << (8* counter)); 
	} 
	return Data;
    3954:	8a 81       	ldd	r24, Y+2	; 0x02
    3956:	9b 81       	ldd	r25, Y+3	; 0x03
    3958:	ac 81       	ldd	r26, Y+4	; 0x04
    395a:	bd 81       	ldd	r27, Y+5	; 0x05
}
    395c:	bc 01       	movw	r22, r24
    395e:	cd 01       	movw	r24, r26
    3960:	0f 90       	pop	r0
    3962:	0f 90       	pop	r0
    3964:	0f 90       	pop	r0
    3966:	0f 90       	pop	r0
    3968:	0f 90       	pop	r0
    396a:	cf 91       	pop	r28
    396c:	df 91       	pop	r29
    396e:	08 95       	ret

00003970 <main>:


u8 Key , Correct ;

int main(void)
{
    3970:	df 93       	push	r29
    3972:	cf 93       	push	r28
    3974:	cd b7       	in	r28, 0x3d	; 61
    3976:	de b7       	in	r29, 0x3e	; 62
    3978:	6c 97       	sbiw	r28, 0x1c	; 28
    397a:	0f b6       	in	r0, 0x3f	; 63
    397c:	f8 94       	cli
    397e:	de bf       	out	0x3e, r29	; 62
    3980:	0f be       	out	0x3f, r0	; 63
    3982:	cd bf       	out	0x3d, r28	; 61
	LCD_voidInit();
    3984:	0e 94 c7 13 	call	0x278e	; 0x278e <LCD_voidInit>
	I2C_voidInit(50000);
    3988:	60 e5       	ldi	r22, 0x50	; 80
    398a:	73 ec       	ldi	r23, 0xC3	; 195
    398c:	80 e0       	ldi	r24, 0x00	; 0
    398e:	90 e0       	ldi	r25, 0x00	; 0
    3990:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_voidInit>
	Keypad_voidinit(GPIOB);
    3994:	81 e0       	ldi	r24, 0x01	; 1
    3996:	0e 94 64 13 	call	0x26c8	; 0x26c8 <Keypad_voidinit>
    399a:	80 e0       	ldi	r24, 0x00	; 0
    399c:	90 e0       	ldi	r25, 0x00	; 0
    399e:	aa ef       	ldi	r26, 0xFA	; 250
    39a0:	b3 e4       	ldi	r27, 0x43	; 67
    39a2:	89 8f       	std	Y+25, r24	; 0x19
    39a4:	9a 8f       	std	Y+26, r25	; 0x1a
    39a6:	ab 8f       	std	Y+27, r26	; 0x1b
    39a8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39aa:	69 8d       	ldd	r22, Y+25	; 0x19
    39ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    39ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    39b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    39b2:	20 e0       	ldi	r18, 0x00	; 0
    39b4:	30 e0       	ldi	r19, 0x00	; 0
    39b6:	4a ef       	ldi	r20, 0xFA	; 250
    39b8:	54 e4       	ldi	r21, 0x44	; 68
    39ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39be:	dc 01       	movw	r26, r24
    39c0:	cb 01       	movw	r24, r22
    39c2:	8d 8b       	std	Y+21, r24	; 0x15
    39c4:	9e 8b       	std	Y+22, r25	; 0x16
    39c6:	af 8b       	std	Y+23, r26	; 0x17
    39c8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    39ca:	6d 89       	ldd	r22, Y+21	; 0x15
    39cc:	7e 89       	ldd	r23, Y+22	; 0x16
    39ce:	8f 89       	ldd	r24, Y+23	; 0x17
    39d0:	98 8d       	ldd	r25, Y+24	; 0x18
    39d2:	20 e0       	ldi	r18, 0x00	; 0
    39d4:	30 e0       	ldi	r19, 0x00	; 0
    39d6:	40 e8       	ldi	r20, 0x80	; 128
    39d8:	5f e3       	ldi	r21, 0x3F	; 63
    39da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    39de:	88 23       	and	r24, r24
    39e0:	2c f4       	brge	.+10     	; 0x39ec <main+0x7c>
		__ticks = 1;
    39e2:	81 e0       	ldi	r24, 0x01	; 1
    39e4:	90 e0       	ldi	r25, 0x00	; 0
    39e6:	9c 8b       	std	Y+20, r25	; 0x14
    39e8:	8b 8b       	std	Y+19, r24	; 0x13
    39ea:	3f c0       	rjmp	.+126    	; 0x3a6a <main+0xfa>
	else if (__tmp > 65535)
    39ec:	6d 89       	ldd	r22, Y+21	; 0x15
    39ee:	7e 89       	ldd	r23, Y+22	; 0x16
    39f0:	8f 89       	ldd	r24, Y+23	; 0x17
    39f2:	98 8d       	ldd	r25, Y+24	; 0x18
    39f4:	20 e0       	ldi	r18, 0x00	; 0
    39f6:	3f ef       	ldi	r19, 0xFF	; 255
    39f8:	4f e7       	ldi	r20, 0x7F	; 127
    39fa:	57 e4       	ldi	r21, 0x47	; 71
    39fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a00:	18 16       	cp	r1, r24
    3a02:	4c f5       	brge	.+82     	; 0x3a56 <main+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a04:	69 8d       	ldd	r22, Y+25	; 0x19
    3a06:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a08:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a0a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a0c:	20 e0       	ldi	r18, 0x00	; 0
    3a0e:	30 e0       	ldi	r19, 0x00	; 0
    3a10:	40 e2       	ldi	r20, 0x20	; 32
    3a12:	51 e4       	ldi	r21, 0x41	; 65
    3a14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a18:	dc 01       	movw	r26, r24
    3a1a:	cb 01       	movw	r24, r22
    3a1c:	bc 01       	movw	r22, r24
    3a1e:	cd 01       	movw	r24, r26
    3a20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a24:	dc 01       	movw	r26, r24
    3a26:	cb 01       	movw	r24, r22
    3a28:	9c 8b       	std	Y+20, r25	; 0x14
    3a2a:	8b 8b       	std	Y+19, r24	; 0x13
    3a2c:	0f c0       	rjmp	.+30     	; 0x3a4c <main+0xdc>
    3a2e:	88 ec       	ldi	r24, 0xC8	; 200
    3a30:	90 e0       	ldi	r25, 0x00	; 0
    3a32:	9a 8b       	std	Y+18, r25	; 0x12
    3a34:	89 8b       	std	Y+17, r24	; 0x11
    3a36:	89 89       	ldd	r24, Y+17	; 0x11
    3a38:	9a 89       	ldd	r25, Y+18	; 0x12
    3a3a:	01 97       	sbiw	r24, 0x01	; 1
    3a3c:	f1 f7       	brne	.-4      	; 0x3a3a <main+0xca>
    3a3e:	9a 8b       	std	Y+18, r25	; 0x12
    3a40:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a42:	8b 89       	ldd	r24, Y+19	; 0x13
    3a44:	9c 89       	ldd	r25, Y+20	; 0x14
    3a46:	01 97       	sbiw	r24, 0x01	; 1
    3a48:	9c 8b       	std	Y+20, r25	; 0x14
    3a4a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a4c:	8b 89       	ldd	r24, Y+19	; 0x13
    3a4e:	9c 89       	ldd	r25, Y+20	; 0x14
    3a50:	00 97       	sbiw	r24, 0x00	; 0
    3a52:	69 f7       	brne	.-38     	; 0x3a2e <main+0xbe>
    3a54:	14 c0       	rjmp	.+40     	; 0x3a7e <main+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a56:	6d 89       	ldd	r22, Y+21	; 0x15
    3a58:	7e 89       	ldd	r23, Y+22	; 0x16
    3a5a:	8f 89       	ldd	r24, Y+23	; 0x17
    3a5c:	98 8d       	ldd	r25, Y+24	; 0x18
    3a5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a62:	dc 01       	movw	r26, r24
    3a64:	cb 01       	movw	r24, r22
    3a66:	9c 8b       	std	Y+20, r25	; 0x14
    3a68:	8b 8b       	std	Y+19, r24	; 0x13
    3a6a:	8b 89       	ldd	r24, Y+19	; 0x13
    3a6c:	9c 89       	ldd	r25, Y+20	; 0x14
    3a6e:	98 8b       	std	Y+16, r25	; 0x10
    3a70:	8f 87       	std	Y+15, r24	; 0x0f
    3a72:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a74:	98 89       	ldd	r25, Y+16	; 0x10
    3a76:	01 97       	sbiw	r24, 0x01	; 1
    3a78:	f1 f7       	brne	.-4      	; 0x3a76 <main+0x106>
    3a7a:	98 8b       	std	Y+16, r25	; 0x10
    3a7c:	8f 87       	std	Y+15, r24	; 0x0f


    while(1)
    {
    	_delay_ms(500);
		if (ExtEEPROM_voidRead(TRY_ADDRESS) == 0)
    3a7e:	85 e0       	ldi	r24, 0x05	; 5
    3a80:	0e 94 3b 07 	call	0xe76	; 0xe76 <ExtEEPROM_voidRead>
    3a84:	88 23       	and	r24, r24
    3a86:	19 f4       	brne	.+6      	; 0x3a8e <main+0x11e>
		{
			LockedOut();
    3a88:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <LockedOut>
    3a8c:	e9 c0       	rjmp	.+466    	; 0x3c60 <main+0x2f0>
			break;

		}
		ExtEEPROM_voidWrite(TRY_ADDRESS,3);
    3a8e:	85 e0       	ldi	r24, 0x05	; 5
    3a90:	63 e0       	ldi	r22, 0x03	; 3
    3a92:	0e 94 22 07 	call	0xe44	; 0xe44 <ExtEEPROM_voidWrite>
		LCD_voidMoveCrusor(1,1);
    3a96:	81 e0       	ldi	r24, 0x01	; 1
    3a98:	61 e0       	ldi	r22, 0x01	; 1
    3a9a:	0e 94 3b 18 	call	0x3076	; 0x3076 <LCD_voidMoveCrusor>
		LCD_voidDispString("1-Set new Pass");
    3a9e:	83 ed       	ldi	r24, 0xD3	; 211
    3aa0:	90 e0       	ldi	r25, 0x00	; 0
    3aa2:	0e 94 13 1a 	call	0x3426	; 0x3426 <LCD_voidDispString>
		LCD_voidMoveCrusor(2,1);
    3aa6:	82 e0       	ldi	r24, 0x02	; 2
    3aa8:	61 e0       	ldi	r22, 0x01	; 1
    3aaa:	0e 94 3b 18 	call	0x3076	; 0x3076 <LCD_voidMoveCrusor>
		LCD_voidDispString("2-Enter PassWord");
    3aae:	82 ee       	ldi	r24, 0xE2	; 226
    3ab0:	90 e0       	ldi	r25, 0x00	; 0
    3ab2:	0e 94 13 1a 	call	0x3426	; 0x3426 <LCD_voidDispString>
		do
		{
			Key = Keypad_voidCheckVal(GPIOB);
    3ab6:	81 e0       	ldi	r24, 0x01	; 1
    3ab8:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <Keypad_voidCheckVal>
    3abc:	80 93 1b 02 	sts	0x021B, r24

		} while (Key == NOTPRESSED);
    3ac0:	80 91 1b 02 	lds	r24, 0x021B
    3ac4:	8f 3f       	cpi	r24, 0xFF	; 255
    3ac6:	b9 f3       	breq	.-18     	; 0x3ab6 <main+0x146>
    3ac8:	80 e0       	ldi	r24, 0x00	; 0
    3aca:	90 e0       	ldi	r25, 0x00	; 0
    3acc:	aa ef       	ldi	r26, 0xFA	; 250
    3ace:	b3 e4       	ldi	r27, 0x43	; 67
    3ad0:	8b 87       	std	Y+11, r24	; 0x0b
    3ad2:	9c 87       	std	Y+12, r25	; 0x0c
    3ad4:	ad 87       	std	Y+13, r26	; 0x0d
    3ad6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ad8:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ada:	7c 85       	ldd	r23, Y+12	; 0x0c
    3adc:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ade:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ae0:	20 e0       	ldi	r18, 0x00	; 0
    3ae2:	30 e0       	ldi	r19, 0x00	; 0
    3ae4:	4a ef       	ldi	r20, 0xFA	; 250
    3ae6:	54 e4       	ldi	r21, 0x44	; 68
    3ae8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3aec:	dc 01       	movw	r26, r24
    3aee:	cb 01       	movw	r24, r22
    3af0:	8f 83       	std	Y+7, r24	; 0x07
    3af2:	98 87       	std	Y+8, r25	; 0x08
    3af4:	a9 87       	std	Y+9, r26	; 0x09
    3af6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3af8:	6f 81       	ldd	r22, Y+7	; 0x07
    3afa:	78 85       	ldd	r23, Y+8	; 0x08
    3afc:	89 85       	ldd	r24, Y+9	; 0x09
    3afe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b00:	20 e0       	ldi	r18, 0x00	; 0
    3b02:	30 e0       	ldi	r19, 0x00	; 0
    3b04:	40 e8       	ldi	r20, 0x80	; 128
    3b06:	5f e3       	ldi	r21, 0x3F	; 63
    3b08:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3b0c:	88 23       	and	r24, r24
    3b0e:	2c f4       	brge	.+10     	; 0x3b1a <main+0x1aa>
		__ticks = 1;
    3b10:	81 e0       	ldi	r24, 0x01	; 1
    3b12:	90 e0       	ldi	r25, 0x00	; 0
    3b14:	9e 83       	std	Y+6, r25	; 0x06
    3b16:	8d 83       	std	Y+5, r24	; 0x05
    3b18:	3f c0       	rjmp	.+126    	; 0x3b98 <main+0x228>
	else if (__tmp > 65535)
    3b1a:	6f 81       	ldd	r22, Y+7	; 0x07
    3b1c:	78 85       	ldd	r23, Y+8	; 0x08
    3b1e:	89 85       	ldd	r24, Y+9	; 0x09
    3b20:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b22:	20 e0       	ldi	r18, 0x00	; 0
    3b24:	3f ef       	ldi	r19, 0xFF	; 255
    3b26:	4f e7       	ldi	r20, 0x7F	; 127
    3b28:	57 e4       	ldi	r21, 0x47	; 71
    3b2a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3b2e:	18 16       	cp	r1, r24
    3b30:	4c f5       	brge	.+82     	; 0x3b84 <main+0x214>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b32:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b34:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b36:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b38:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b3a:	20 e0       	ldi	r18, 0x00	; 0
    3b3c:	30 e0       	ldi	r19, 0x00	; 0
    3b3e:	40 e2       	ldi	r20, 0x20	; 32
    3b40:	51 e4       	ldi	r21, 0x41	; 65
    3b42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b46:	dc 01       	movw	r26, r24
    3b48:	cb 01       	movw	r24, r22
    3b4a:	bc 01       	movw	r22, r24
    3b4c:	cd 01       	movw	r24, r26
    3b4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b52:	dc 01       	movw	r26, r24
    3b54:	cb 01       	movw	r24, r22
    3b56:	9e 83       	std	Y+6, r25	; 0x06
    3b58:	8d 83       	std	Y+5, r24	; 0x05
    3b5a:	0f c0       	rjmp	.+30     	; 0x3b7a <main+0x20a>
    3b5c:	88 ec       	ldi	r24, 0xC8	; 200
    3b5e:	90 e0       	ldi	r25, 0x00	; 0
    3b60:	9c 83       	std	Y+4, r25	; 0x04
    3b62:	8b 83       	std	Y+3, r24	; 0x03
    3b64:	8b 81       	ldd	r24, Y+3	; 0x03
    3b66:	9c 81       	ldd	r25, Y+4	; 0x04
    3b68:	01 97       	sbiw	r24, 0x01	; 1
    3b6a:	f1 f7       	brne	.-4      	; 0x3b68 <main+0x1f8>
    3b6c:	9c 83       	std	Y+4, r25	; 0x04
    3b6e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b70:	8d 81       	ldd	r24, Y+5	; 0x05
    3b72:	9e 81       	ldd	r25, Y+6	; 0x06
    3b74:	01 97       	sbiw	r24, 0x01	; 1
    3b76:	9e 83       	std	Y+6, r25	; 0x06
    3b78:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b7a:	8d 81       	ldd	r24, Y+5	; 0x05
    3b7c:	9e 81       	ldd	r25, Y+6	; 0x06
    3b7e:	00 97       	sbiw	r24, 0x00	; 0
    3b80:	69 f7       	brne	.-38     	; 0x3b5c <main+0x1ec>
    3b82:	14 c0       	rjmp	.+40     	; 0x3bac <main+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b84:	6f 81       	ldd	r22, Y+7	; 0x07
    3b86:	78 85       	ldd	r23, Y+8	; 0x08
    3b88:	89 85       	ldd	r24, Y+9	; 0x09
    3b8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b90:	dc 01       	movw	r26, r24
    3b92:	cb 01       	movw	r24, r22
    3b94:	9e 83       	std	Y+6, r25	; 0x06
    3b96:	8d 83       	std	Y+5, r24	; 0x05
    3b98:	8d 81       	ldd	r24, Y+5	; 0x05
    3b9a:	9e 81       	ldd	r25, Y+6	; 0x06
    3b9c:	9a 83       	std	Y+2, r25	; 0x02
    3b9e:	89 83       	std	Y+1, r24	; 0x01
    3ba0:	89 81       	ldd	r24, Y+1	; 0x01
    3ba2:	9a 81       	ldd	r25, Y+2	; 0x02
    3ba4:	01 97       	sbiw	r24, 0x01	; 1
    3ba6:	f1 f7       	brne	.-4      	; 0x3ba4 <main+0x234>
    3ba8:	9a 83       	std	Y+2, r25	; 0x02
    3baa:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(KEYDELAY);
		if (Key == '1')
    3bac:	80 91 1b 02 	lds	r24, 0x021B
    3bb0:	81 33       	cpi	r24, 0x31	; 49
    3bb2:	69 f5       	brne	.+90     	; 0x3c0e <main+0x29e>
		{
			if (ExtEEPROM_voidRead(EEPROM_ADDRESS) == 0xff)
    3bb4:	80 e0       	ldi	r24, 0x00	; 0
    3bb6:	0e 94 3b 07 	call	0xe76	; 0xe76 <ExtEEPROM_voidRead>
    3bba:	8f 3f       	cpi	r24, 0xFF	; 255
    3bbc:	59 f4       	brne	.+22     	; 0x3bd4 <main+0x264>
			{
				SetPass();
    3bbe:	0e 94 59 07 	call	0xeb2	; 0xeb2 <SetPass>
				ExtEEPROM_voidWrite(TRY_ADDRESS , 3);
    3bc2:	85 e0       	ldi	r24, 0x05	; 5
    3bc4:	63 e0       	ldi	r22, 0x03	; 3
    3bc6:	0e 94 22 07 	call	0xe44	; 0xe44 <ExtEEPROM_voidWrite>
				I2Cfun_voidMasterSend(SLAVE , 8);
    3bca:	8c ec       	ldi	r24, 0xCC	; 204
    3bcc:	68 e0       	ldi	r22, 0x08	; 8
    3bce:	0e 94 32 13 	call	0x2664	; 0x2664 <I2Cfun_voidMasterSend>
    3bd2:	e3 ce       	rjmp	.-570    	; 0x399a <main+0x2a>

					do
					{


						if (CheckPass() == 1)
    3bd4:	0e 94 b7 09 	call	0x136e	; 0x136e <CheckPass>
    3bd8:	81 30       	cpi	r24, 0x01	; 1
    3bda:	39 f4       	brne	.+14     	; 0x3bea <main+0x27a>
						{

							SetPass();
    3bdc:	0e 94 59 07 	call	0xeb2	; 0xeb2 <SetPass>
							ExtEEPROM_voidWrite(TRY_ADDRESS , 3);
    3be0:	85 e0       	ldi	r24, 0x05	; 5
    3be2:	63 e0       	ldi	r22, 0x03	; 3
    3be4:	0e 94 22 07 	call	0xe44	; 0xe44 <ExtEEPROM_voidWrite>
    3be8:	08 c0       	rjmp	.+16     	; 0x3bfa <main+0x28a>
							break;
						}
						else
						{
							Wrongpass();
    3bea:	0e 94 3a 0c 	call	0x1874	; 0x1874 <Wrongpass>
						}

					}while (EEPROM_voidRead(TRY_ADDRESS) != 0);
    3bee:	85 e0       	ldi	r24, 0x05	; 5
    3bf0:	90 e0       	ldi	r25, 0x00	; 0
    3bf2:	0e 94 01 07 	call	0xe02	; 0xe02 <EEPROM_voidRead>
    3bf6:	00 97       	sbiw	r24, 0x00	; 0
    3bf8:	69 f7       	brne	.-38     	; 0x3bd4 <main+0x264>

					if (EEPROM_voidRead(TRY_ADDRESS)== 0)
    3bfa:	85 e0       	ldi	r24, 0x05	; 5
    3bfc:	90 e0       	ldi	r25, 0x00	; 0
    3bfe:	0e 94 01 07 	call	0xe02	; 0xe02 <EEPROM_voidRead>
    3c02:	00 97       	sbiw	r24, 0x00	; 0
    3c04:	09 f0       	breq	.+2      	; 0x3c08 <main+0x298>
    3c06:	c9 ce       	rjmp	.-622    	; 0x399a <main+0x2a>
					{
						LockedOut();
    3c08:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <LockedOut>
    3c0c:	29 c0       	rjmp	.+82     	; 0x3c60 <main+0x2f0>


			}
		}

		else if (Key == '2')
    3c0e:	80 91 1b 02 	lds	r24, 0x021B
    3c12:	82 33       	cpi	r24, 0x32	; 50
    3c14:	09 f0       	breq	.+2      	; 0x3c18 <main+0x2a8>
    3c16:	c1 ce       	rjmp	.-638    	; 0x399a <main+0x2a>
		{
			if(ExtEEPROM_voidRead(EEPROM_ADDRESS) ==0xFF)
    3c18:	80 e0       	ldi	r24, 0x00	; 0
    3c1a:	0e 94 3b 07 	call	0xe76	; 0xe76 <ExtEEPROM_voidRead>
    3c1e:	8f 3f       	cpi	r24, 0xFF	; 255
    3c20:	39 f4       	brne	.+14     	; 0x3c30 <main+0x2c0>
			{
				SetPass();
    3c22:	0e 94 59 07 	call	0xeb2	; 0xeb2 <SetPass>
				ExtEEPROM_voidWrite(TRY_ADDRESS , 3);
    3c26:	85 e0       	ldi	r24, 0x05	; 5
    3c28:	63 e0       	ldi	r22, 0x03	; 3
    3c2a:	0e 94 22 07 	call	0xe44	; 0xe44 <ExtEEPROM_voidWrite>
    3c2e:	b5 ce       	rjmp	.-662    	; 0x399a <main+0x2a>
				continue;
			}

			do
			{
				Correct = CheckPass();
    3c30:	0e 94 b7 09 	call	0x136e	; 0x136e <CheckPass>
    3c34:	80 93 1a 02 	sts	0x021A, r24
				if (Correct == 1)
    3c38:	80 91 1a 02 	lds	r24, 0x021A
    3c3c:	81 30       	cpi	r24, 0x01	; 1
    3c3e:	49 f4       	brne	.+18     	; 0x3c52 <main+0x2e2>
				{
					I2Cfun_voidMasterSend(SLAVE , 15);
    3c40:	8c ec       	ldi	r24, 0xCC	; 204
    3c42:	6f e0       	ldi	r22, 0x0F	; 15
    3c44:	0e 94 32 13 	call	0x2664	; 0x2664 <I2Cfun_voidMasterSend>
					ExtEEPROM_voidWrite(TRY_ADDRESS , 3);
    3c48:	85 e0       	ldi	r24, 0x05	; 5
    3c4a:	63 e0       	ldi	r22, 0x03	; 3
    3c4c:	0e 94 22 07 	call	0xe44	; 0xe44 <ExtEEPROM_voidWrite>
    3c50:	07 c0       	rjmp	.+14     	; 0x3c60 <main+0x2f0>
					break;
				}
				else
				{
					Wrongpass();
    3c52:	0e 94 3a 0c 	call	0x1874	; 0x1874 <Wrongpass>
				}


			}while(ExtEEPROM_voidRead(TRY_ADDRESS)!=0);
    3c56:	85 e0       	ldi	r24, 0x05	; 5
    3c58:	0e 94 3b 07 	call	0xe76	; 0xe76 <ExtEEPROM_voidRead>
    3c5c:	88 23       	and	r24, r24
    3c5e:	41 f7       	brne	.-48     	; 0x3c30 <main+0x2c0>
    3c60:	80 e0       	ldi	r24, 0x00	; 0
    3c62:	90 e0       	ldi	r25, 0x00	; 0


    }
  }

}
    3c64:	6c 96       	adiw	r28, 0x1c	; 28
    3c66:	0f b6       	in	r0, 0x3f	; 63
    3c68:	f8 94       	cli
    3c6a:	de bf       	out	0x3e, r29	; 62
    3c6c:	0f be       	out	0x3f, r0	; 63
    3c6e:	cd bf       	out	0x3d, r28	; 61
    3c70:	cf 91       	pop	r28
    3c72:	df 91       	pop	r29
    3c74:	08 95       	ret

00003c76 <__udivmodsi4>:
    3c76:	a1 e2       	ldi	r26, 0x21	; 33
    3c78:	1a 2e       	mov	r1, r26
    3c7a:	aa 1b       	sub	r26, r26
    3c7c:	bb 1b       	sub	r27, r27
    3c7e:	fd 01       	movw	r30, r26
    3c80:	0d c0       	rjmp	.+26     	; 0x3c9c <__udivmodsi4_ep>

00003c82 <__udivmodsi4_loop>:
    3c82:	aa 1f       	adc	r26, r26
    3c84:	bb 1f       	adc	r27, r27
    3c86:	ee 1f       	adc	r30, r30
    3c88:	ff 1f       	adc	r31, r31
    3c8a:	a2 17       	cp	r26, r18
    3c8c:	b3 07       	cpc	r27, r19
    3c8e:	e4 07       	cpc	r30, r20
    3c90:	f5 07       	cpc	r31, r21
    3c92:	20 f0       	brcs	.+8      	; 0x3c9c <__udivmodsi4_ep>
    3c94:	a2 1b       	sub	r26, r18
    3c96:	b3 0b       	sbc	r27, r19
    3c98:	e4 0b       	sbc	r30, r20
    3c9a:	f5 0b       	sbc	r31, r21

00003c9c <__udivmodsi4_ep>:
    3c9c:	66 1f       	adc	r22, r22
    3c9e:	77 1f       	adc	r23, r23
    3ca0:	88 1f       	adc	r24, r24
    3ca2:	99 1f       	adc	r25, r25
    3ca4:	1a 94       	dec	r1
    3ca6:	69 f7       	brne	.-38     	; 0x3c82 <__udivmodsi4_loop>
    3ca8:	60 95       	com	r22
    3caa:	70 95       	com	r23
    3cac:	80 95       	com	r24
    3cae:	90 95       	com	r25
    3cb0:	9b 01       	movw	r18, r22
    3cb2:	ac 01       	movw	r20, r24
    3cb4:	bd 01       	movw	r22, r26
    3cb6:	cf 01       	movw	r24, r30
    3cb8:	08 95       	ret

00003cba <__prologue_saves__>:
    3cba:	2f 92       	push	r2
    3cbc:	3f 92       	push	r3
    3cbe:	4f 92       	push	r4
    3cc0:	5f 92       	push	r5
    3cc2:	6f 92       	push	r6
    3cc4:	7f 92       	push	r7
    3cc6:	8f 92       	push	r8
    3cc8:	9f 92       	push	r9
    3cca:	af 92       	push	r10
    3ccc:	bf 92       	push	r11
    3cce:	cf 92       	push	r12
    3cd0:	df 92       	push	r13
    3cd2:	ef 92       	push	r14
    3cd4:	ff 92       	push	r15
    3cd6:	0f 93       	push	r16
    3cd8:	1f 93       	push	r17
    3cda:	cf 93       	push	r28
    3cdc:	df 93       	push	r29
    3cde:	cd b7       	in	r28, 0x3d	; 61
    3ce0:	de b7       	in	r29, 0x3e	; 62
    3ce2:	ca 1b       	sub	r28, r26
    3ce4:	db 0b       	sbc	r29, r27
    3ce6:	0f b6       	in	r0, 0x3f	; 63
    3ce8:	f8 94       	cli
    3cea:	de bf       	out	0x3e, r29	; 62
    3cec:	0f be       	out	0x3f, r0	; 63
    3cee:	cd bf       	out	0x3d, r28	; 61
    3cf0:	09 94       	ijmp

00003cf2 <__epilogue_restores__>:
    3cf2:	2a 88       	ldd	r2, Y+18	; 0x12
    3cf4:	39 88       	ldd	r3, Y+17	; 0x11
    3cf6:	48 88       	ldd	r4, Y+16	; 0x10
    3cf8:	5f 84       	ldd	r5, Y+15	; 0x0f
    3cfa:	6e 84       	ldd	r6, Y+14	; 0x0e
    3cfc:	7d 84       	ldd	r7, Y+13	; 0x0d
    3cfe:	8c 84       	ldd	r8, Y+12	; 0x0c
    3d00:	9b 84       	ldd	r9, Y+11	; 0x0b
    3d02:	aa 84       	ldd	r10, Y+10	; 0x0a
    3d04:	b9 84       	ldd	r11, Y+9	; 0x09
    3d06:	c8 84       	ldd	r12, Y+8	; 0x08
    3d08:	df 80       	ldd	r13, Y+7	; 0x07
    3d0a:	ee 80       	ldd	r14, Y+6	; 0x06
    3d0c:	fd 80       	ldd	r15, Y+5	; 0x05
    3d0e:	0c 81       	ldd	r16, Y+4	; 0x04
    3d10:	1b 81       	ldd	r17, Y+3	; 0x03
    3d12:	aa 81       	ldd	r26, Y+2	; 0x02
    3d14:	b9 81       	ldd	r27, Y+1	; 0x01
    3d16:	ce 0f       	add	r28, r30
    3d18:	d1 1d       	adc	r29, r1
    3d1a:	0f b6       	in	r0, 0x3f	; 63
    3d1c:	f8 94       	cli
    3d1e:	de bf       	out	0x3e, r29	; 62
    3d20:	0f be       	out	0x3f, r0	; 63
    3d22:	cd bf       	out	0x3d, r28	; 61
    3d24:	ed 01       	movw	r28, r26
    3d26:	08 95       	ret

00003d28 <sprintf>:
    3d28:	ae e0       	ldi	r26, 0x0E	; 14
    3d2a:	b0 e0       	ldi	r27, 0x00	; 0
    3d2c:	ea e9       	ldi	r30, 0x9A	; 154
    3d2e:	fe e1       	ldi	r31, 0x1E	; 30
    3d30:	0c 94 6b 1e 	jmp	0x3cd6	; 0x3cd6 <__prologue_saves__+0x1c>
    3d34:	0d 89       	ldd	r16, Y+21	; 0x15
    3d36:	1e 89       	ldd	r17, Y+22	; 0x16
    3d38:	86 e0       	ldi	r24, 0x06	; 6
    3d3a:	8c 83       	std	Y+4, r24	; 0x04
    3d3c:	1a 83       	std	Y+2, r17	; 0x02
    3d3e:	09 83       	std	Y+1, r16	; 0x01
    3d40:	8f ef       	ldi	r24, 0xFF	; 255
    3d42:	9f e7       	ldi	r25, 0x7F	; 127
    3d44:	9e 83       	std	Y+6, r25	; 0x06
    3d46:	8d 83       	std	Y+5, r24	; 0x05
    3d48:	9e 01       	movw	r18, r28
    3d4a:	27 5e       	subi	r18, 0xE7	; 231
    3d4c:	3f 4f       	sbci	r19, 0xFF	; 255
    3d4e:	ce 01       	movw	r24, r28
    3d50:	01 96       	adiw	r24, 0x01	; 1
    3d52:	6f 89       	ldd	r22, Y+23	; 0x17
    3d54:	78 8d       	ldd	r23, Y+24	; 0x18
    3d56:	a9 01       	movw	r20, r18
    3d58:	0e 94 b8 1e 	call	0x3d70	; 0x3d70 <vfprintf>
    3d5c:	2f 81       	ldd	r18, Y+7	; 0x07
    3d5e:	38 85       	ldd	r19, Y+8	; 0x08
    3d60:	02 0f       	add	r16, r18
    3d62:	13 1f       	adc	r17, r19
    3d64:	f8 01       	movw	r30, r16
    3d66:	10 82       	st	Z, r1
    3d68:	2e 96       	adiw	r28, 0x0e	; 14
    3d6a:	e4 e0       	ldi	r30, 0x04	; 4
    3d6c:	0c 94 87 1e 	jmp	0x3d0e	; 0x3d0e <__epilogue_restores__+0x1c>

00003d70 <vfprintf>:
    3d70:	ab e0       	ldi	r26, 0x0B	; 11
    3d72:	b0 e0       	ldi	r27, 0x00	; 0
    3d74:	ee eb       	ldi	r30, 0xBE	; 190
    3d76:	fe e1       	ldi	r31, 0x1E	; 30
    3d78:	0c 94 5d 1e 	jmp	0x3cba	; 0x3cba <__prologue_saves__>
    3d7c:	3c 01       	movw	r6, r24
    3d7e:	2b 01       	movw	r4, r22
    3d80:	5a 01       	movw	r10, r20
    3d82:	fc 01       	movw	r30, r24
    3d84:	17 82       	std	Z+7, r1	; 0x07
    3d86:	16 82       	std	Z+6, r1	; 0x06
    3d88:	83 81       	ldd	r24, Z+3	; 0x03
    3d8a:	81 fd       	sbrc	r24, 1
    3d8c:	03 c0       	rjmp	.+6      	; 0x3d94 <vfprintf+0x24>
    3d8e:	6f ef       	ldi	r22, 0xFF	; 255
    3d90:	7f ef       	ldi	r23, 0xFF	; 255
    3d92:	c6 c1       	rjmp	.+908    	; 0x4120 <vfprintf+0x3b0>
    3d94:	9a e0       	ldi	r25, 0x0A	; 10
    3d96:	89 2e       	mov	r8, r25
    3d98:	1e 01       	movw	r2, r28
    3d9a:	08 94       	sec
    3d9c:	21 1c       	adc	r2, r1
    3d9e:	31 1c       	adc	r3, r1
    3da0:	f3 01       	movw	r30, r6
    3da2:	23 81       	ldd	r18, Z+3	; 0x03
    3da4:	f2 01       	movw	r30, r4
    3da6:	23 fd       	sbrc	r18, 3
    3da8:	85 91       	lpm	r24, Z+
    3daa:	23 ff       	sbrs	r18, 3
    3dac:	81 91       	ld	r24, Z+
    3dae:	2f 01       	movw	r4, r30
    3db0:	88 23       	and	r24, r24
    3db2:	09 f4       	brne	.+2      	; 0x3db6 <vfprintf+0x46>
    3db4:	b2 c1       	rjmp	.+868    	; 0x411a <vfprintf+0x3aa>
    3db6:	85 32       	cpi	r24, 0x25	; 37
    3db8:	39 f4       	brne	.+14     	; 0x3dc8 <vfprintf+0x58>
    3dba:	23 fd       	sbrc	r18, 3
    3dbc:	85 91       	lpm	r24, Z+
    3dbe:	23 ff       	sbrs	r18, 3
    3dc0:	81 91       	ld	r24, Z+
    3dc2:	2f 01       	movw	r4, r30
    3dc4:	85 32       	cpi	r24, 0x25	; 37
    3dc6:	29 f4       	brne	.+10     	; 0x3dd2 <vfprintf+0x62>
    3dc8:	90 e0       	ldi	r25, 0x00	; 0
    3dca:	b3 01       	movw	r22, r6
    3dcc:	0e 94 ab 20 	call	0x4156	; 0x4156 <fputc>
    3dd0:	e7 cf       	rjmp	.-50     	; 0x3da0 <vfprintf+0x30>
    3dd2:	98 2f       	mov	r25, r24
    3dd4:	ff 24       	eor	r15, r15
    3dd6:	ee 24       	eor	r14, r14
    3dd8:	99 24       	eor	r9, r9
    3dda:	ff e1       	ldi	r31, 0x1F	; 31
    3ddc:	ff 15       	cp	r31, r15
    3dde:	d0 f0       	brcs	.+52     	; 0x3e14 <vfprintf+0xa4>
    3de0:	9b 32       	cpi	r25, 0x2B	; 43
    3de2:	69 f0       	breq	.+26     	; 0x3dfe <vfprintf+0x8e>
    3de4:	9c 32       	cpi	r25, 0x2C	; 44
    3de6:	28 f4       	brcc	.+10     	; 0x3df2 <vfprintf+0x82>
    3de8:	90 32       	cpi	r25, 0x20	; 32
    3dea:	59 f0       	breq	.+22     	; 0x3e02 <vfprintf+0x92>
    3dec:	93 32       	cpi	r25, 0x23	; 35
    3dee:	91 f4       	brne	.+36     	; 0x3e14 <vfprintf+0xa4>
    3df0:	0e c0       	rjmp	.+28     	; 0x3e0e <vfprintf+0x9e>
    3df2:	9d 32       	cpi	r25, 0x2D	; 45
    3df4:	49 f0       	breq	.+18     	; 0x3e08 <vfprintf+0x98>
    3df6:	90 33       	cpi	r25, 0x30	; 48
    3df8:	69 f4       	brne	.+26     	; 0x3e14 <vfprintf+0xa4>
    3dfa:	41 e0       	ldi	r20, 0x01	; 1
    3dfc:	24 c0       	rjmp	.+72     	; 0x3e46 <vfprintf+0xd6>
    3dfe:	52 e0       	ldi	r21, 0x02	; 2
    3e00:	f5 2a       	or	r15, r21
    3e02:	84 e0       	ldi	r24, 0x04	; 4
    3e04:	f8 2a       	or	r15, r24
    3e06:	28 c0       	rjmp	.+80     	; 0x3e58 <vfprintf+0xe8>
    3e08:	98 e0       	ldi	r25, 0x08	; 8
    3e0a:	f9 2a       	or	r15, r25
    3e0c:	25 c0       	rjmp	.+74     	; 0x3e58 <vfprintf+0xe8>
    3e0e:	e0 e1       	ldi	r30, 0x10	; 16
    3e10:	fe 2a       	or	r15, r30
    3e12:	22 c0       	rjmp	.+68     	; 0x3e58 <vfprintf+0xe8>
    3e14:	f7 fc       	sbrc	r15, 7
    3e16:	29 c0       	rjmp	.+82     	; 0x3e6a <vfprintf+0xfa>
    3e18:	89 2f       	mov	r24, r25
    3e1a:	80 53       	subi	r24, 0x30	; 48
    3e1c:	8a 30       	cpi	r24, 0x0A	; 10
    3e1e:	70 f4       	brcc	.+28     	; 0x3e3c <vfprintf+0xcc>
    3e20:	f6 fe       	sbrs	r15, 6
    3e22:	05 c0       	rjmp	.+10     	; 0x3e2e <vfprintf+0xbe>
    3e24:	98 9c       	mul	r9, r8
    3e26:	90 2c       	mov	r9, r0
    3e28:	11 24       	eor	r1, r1
    3e2a:	98 0e       	add	r9, r24
    3e2c:	15 c0       	rjmp	.+42     	; 0x3e58 <vfprintf+0xe8>
    3e2e:	e8 9c       	mul	r14, r8
    3e30:	e0 2c       	mov	r14, r0
    3e32:	11 24       	eor	r1, r1
    3e34:	e8 0e       	add	r14, r24
    3e36:	f0 e2       	ldi	r31, 0x20	; 32
    3e38:	ff 2a       	or	r15, r31
    3e3a:	0e c0       	rjmp	.+28     	; 0x3e58 <vfprintf+0xe8>
    3e3c:	9e 32       	cpi	r25, 0x2E	; 46
    3e3e:	29 f4       	brne	.+10     	; 0x3e4a <vfprintf+0xda>
    3e40:	f6 fc       	sbrc	r15, 6
    3e42:	6b c1       	rjmp	.+726    	; 0x411a <vfprintf+0x3aa>
    3e44:	40 e4       	ldi	r20, 0x40	; 64
    3e46:	f4 2a       	or	r15, r20
    3e48:	07 c0       	rjmp	.+14     	; 0x3e58 <vfprintf+0xe8>
    3e4a:	9c 36       	cpi	r25, 0x6C	; 108
    3e4c:	19 f4       	brne	.+6      	; 0x3e54 <vfprintf+0xe4>
    3e4e:	50 e8       	ldi	r21, 0x80	; 128
    3e50:	f5 2a       	or	r15, r21
    3e52:	02 c0       	rjmp	.+4      	; 0x3e58 <vfprintf+0xe8>
    3e54:	98 36       	cpi	r25, 0x68	; 104
    3e56:	49 f4       	brne	.+18     	; 0x3e6a <vfprintf+0xfa>
    3e58:	f2 01       	movw	r30, r4
    3e5a:	23 fd       	sbrc	r18, 3
    3e5c:	95 91       	lpm	r25, Z+
    3e5e:	23 ff       	sbrs	r18, 3
    3e60:	91 91       	ld	r25, Z+
    3e62:	2f 01       	movw	r4, r30
    3e64:	99 23       	and	r25, r25
    3e66:	09 f0       	breq	.+2      	; 0x3e6a <vfprintf+0xfa>
    3e68:	b8 cf       	rjmp	.-144    	; 0x3dda <vfprintf+0x6a>
    3e6a:	89 2f       	mov	r24, r25
    3e6c:	85 54       	subi	r24, 0x45	; 69
    3e6e:	83 30       	cpi	r24, 0x03	; 3
    3e70:	18 f0       	brcs	.+6      	; 0x3e78 <vfprintf+0x108>
    3e72:	80 52       	subi	r24, 0x20	; 32
    3e74:	83 30       	cpi	r24, 0x03	; 3
    3e76:	38 f4       	brcc	.+14     	; 0x3e86 <vfprintf+0x116>
    3e78:	44 e0       	ldi	r20, 0x04	; 4
    3e7a:	50 e0       	ldi	r21, 0x00	; 0
    3e7c:	a4 0e       	add	r10, r20
    3e7e:	b5 1e       	adc	r11, r21
    3e80:	5f e3       	ldi	r21, 0x3F	; 63
    3e82:	59 83       	std	Y+1, r21	; 0x01
    3e84:	0f c0       	rjmp	.+30     	; 0x3ea4 <vfprintf+0x134>
    3e86:	93 36       	cpi	r25, 0x63	; 99
    3e88:	31 f0       	breq	.+12     	; 0x3e96 <vfprintf+0x126>
    3e8a:	93 37       	cpi	r25, 0x73	; 115
    3e8c:	79 f0       	breq	.+30     	; 0x3eac <vfprintf+0x13c>
    3e8e:	93 35       	cpi	r25, 0x53	; 83
    3e90:	09 f0       	breq	.+2      	; 0x3e94 <vfprintf+0x124>
    3e92:	56 c0       	rjmp	.+172    	; 0x3f40 <vfprintf+0x1d0>
    3e94:	20 c0       	rjmp	.+64     	; 0x3ed6 <vfprintf+0x166>
    3e96:	f5 01       	movw	r30, r10
    3e98:	80 81       	ld	r24, Z
    3e9a:	89 83       	std	Y+1, r24	; 0x01
    3e9c:	42 e0       	ldi	r20, 0x02	; 2
    3e9e:	50 e0       	ldi	r21, 0x00	; 0
    3ea0:	a4 0e       	add	r10, r20
    3ea2:	b5 1e       	adc	r11, r21
    3ea4:	61 01       	movw	r12, r2
    3ea6:	01 e0       	ldi	r16, 0x01	; 1
    3ea8:	10 e0       	ldi	r17, 0x00	; 0
    3eaa:	12 c0       	rjmp	.+36     	; 0x3ed0 <vfprintf+0x160>
    3eac:	f5 01       	movw	r30, r10
    3eae:	c0 80       	ld	r12, Z
    3eb0:	d1 80       	ldd	r13, Z+1	; 0x01
    3eb2:	f6 fc       	sbrc	r15, 6
    3eb4:	03 c0       	rjmp	.+6      	; 0x3ebc <vfprintf+0x14c>
    3eb6:	6f ef       	ldi	r22, 0xFF	; 255
    3eb8:	7f ef       	ldi	r23, 0xFF	; 255
    3eba:	02 c0       	rjmp	.+4      	; 0x3ec0 <vfprintf+0x150>
    3ebc:	69 2d       	mov	r22, r9
    3ebe:	70 e0       	ldi	r23, 0x00	; 0
    3ec0:	42 e0       	ldi	r20, 0x02	; 2
    3ec2:	50 e0       	ldi	r21, 0x00	; 0
    3ec4:	a4 0e       	add	r10, r20
    3ec6:	b5 1e       	adc	r11, r21
    3ec8:	c6 01       	movw	r24, r12
    3eca:	0e 94 a0 20 	call	0x4140	; 0x4140 <strnlen>
    3ece:	8c 01       	movw	r16, r24
    3ed0:	5f e7       	ldi	r21, 0x7F	; 127
    3ed2:	f5 22       	and	r15, r21
    3ed4:	14 c0       	rjmp	.+40     	; 0x3efe <vfprintf+0x18e>
    3ed6:	f5 01       	movw	r30, r10
    3ed8:	c0 80       	ld	r12, Z
    3eda:	d1 80       	ldd	r13, Z+1	; 0x01
    3edc:	f6 fc       	sbrc	r15, 6
    3ede:	03 c0       	rjmp	.+6      	; 0x3ee6 <vfprintf+0x176>
    3ee0:	6f ef       	ldi	r22, 0xFF	; 255
    3ee2:	7f ef       	ldi	r23, 0xFF	; 255
    3ee4:	02 c0       	rjmp	.+4      	; 0x3eea <vfprintf+0x17a>
    3ee6:	69 2d       	mov	r22, r9
    3ee8:	70 e0       	ldi	r23, 0x00	; 0
    3eea:	42 e0       	ldi	r20, 0x02	; 2
    3eec:	50 e0       	ldi	r21, 0x00	; 0
    3eee:	a4 0e       	add	r10, r20
    3ef0:	b5 1e       	adc	r11, r21
    3ef2:	c6 01       	movw	r24, r12
    3ef4:	0e 94 95 20 	call	0x412a	; 0x412a <strnlen_P>
    3ef8:	8c 01       	movw	r16, r24
    3efa:	50 e8       	ldi	r21, 0x80	; 128
    3efc:	f5 2a       	or	r15, r21
    3efe:	f3 fe       	sbrs	r15, 3
    3f00:	07 c0       	rjmp	.+14     	; 0x3f10 <vfprintf+0x1a0>
    3f02:	1a c0       	rjmp	.+52     	; 0x3f38 <vfprintf+0x1c8>
    3f04:	80 e2       	ldi	r24, 0x20	; 32
    3f06:	90 e0       	ldi	r25, 0x00	; 0
    3f08:	b3 01       	movw	r22, r6
    3f0a:	0e 94 ab 20 	call	0x4156	; 0x4156 <fputc>
    3f0e:	ea 94       	dec	r14
    3f10:	8e 2d       	mov	r24, r14
    3f12:	90 e0       	ldi	r25, 0x00	; 0
    3f14:	08 17       	cp	r16, r24
    3f16:	19 07       	cpc	r17, r25
    3f18:	a8 f3       	brcs	.-22     	; 0x3f04 <vfprintf+0x194>
    3f1a:	0e c0       	rjmp	.+28     	; 0x3f38 <vfprintf+0x1c8>
    3f1c:	f6 01       	movw	r30, r12
    3f1e:	f7 fc       	sbrc	r15, 7
    3f20:	85 91       	lpm	r24, Z+
    3f22:	f7 fe       	sbrs	r15, 7
    3f24:	81 91       	ld	r24, Z+
    3f26:	6f 01       	movw	r12, r30
    3f28:	90 e0       	ldi	r25, 0x00	; 0
    3f2a:	b3 01       	movw	r22, r6
    3f2c:	0e 94 ab 20 	call	0x4156	; 0x4156 <fputc>
    3f30:	e1 10       	cpse	r14, r1
    3f32:	ea 94       	dec	r14
    3f34:	01 50       	subi	r16, 0x01	; 1
    3f36:	10 40       	sbci	r17, 0x00	; 0
    3f38:	01 15       	cp	r16, r1
    3f3a:	11 05       	cpc	r17, r1
    3f3c:	79 f7       	brne	.-34     	; 0x3f1c <vfprintf+0x1ac>
    3f3e:	ea c0       	rjmp	.+468    	; 0x4114 <vfprintf+0x3a4>
    3f40:	94 36       	cpi	r25, 0x64	; 100
    3f42:	11 f0       	breq	.+4      	; 0x3f48 <vfprintf+0x1d8>
    3f44:	99 36       	cpi	r25, 0x69	; 105
    3f46:	69 f5       	brne	.+90     	; 0x3fa2 <vfprintf+0x232>
    3f48:	f7 fe       	sbrs	r15, 7
    3f4a:	08 c0       	rjmp	.+16     	; 0x3f5c <vfprintf+0x1ec>
    3f4c:	f5 01       	movw	r30, r10
    3f4e:	20 81       	ld	r18, Z
    3f50:	31 81       	ldd	r19, Z+1	; 0x01
    3f52:	42 81       	ldd	r20, Z+2	; 0x02
    3f54:	53 81       	ldd	r21, Z+3	; 0x03
    3f56:	84 e0       	ldi	r24, 0x04	; 4
    3f58:	90 e0       	ldi	r25, 0x00	; 0
    3f5a:	0a c0       	rjmp	.+20     	; 0x3f70 <vfprintf+0x200>
    3f5c:	f5 01       	movw	r30, r10
    3f5e:	80 81       	ld	r24, Z
    3f60:	91 81       	ldd	r25, Z+1	; 0x01
    3f62:	9c 01       	movw	r18, r24
    3f64:	44 27       	eor	r20, r20
    3f66:	37 fd       	sbrc	r19, 7
    3f68:	40 95       	com	r20
    3f6a:	54 2f       	mov	r21, r20
    3f6c:	82 e0       	ldi	r24, 0x02	; 2
    3f6e:	90 e0       	ldi	r25, 0x00	; 0
    3f70:	a8 0e       	add	r10, r24
    3f72:	b9 1e       	adc	r11, r25
    3f74:	9f e6       	ldi	r25, 0x6F	; 111
    3f76:	f9 22       	and	r15, r25
    3f78:	57 ff       	sbrs	r21, 7
    3f7a:	09 c0       	rjmp	.+18     	; 0x3f8e <vfprintf+0x21e>
    3f7c:	50 95       	com	r21
    3f7e:	40 95       	com	r20
    3f80:	30 95       	com	r19
    3f82:	21 95       	neg	r18
    3f84:	3f 4f       	sbci	r19, 0xFF	; 255
    3f86:	4f 4f       	sbci	r20, 0xFF	; 255
    3f88:	5f 4f       	sbci	r21, 0xFF	; 255
    3f8a:	e0 e8       	ldi	r30, 0x80	; 128
    3f8c:	fe 2a       	or	r15, r30
    3f8e:	ca 01       	movw	r24, r20
    3f90:	b9 01       	movw	r22, r18
    3f92:	a1 01       	movw	r20, r2
    3f94:	2a e0       	ldi	r18, 0x0A	; 10
    3f96:	30 e0       	ldi	r19, 0x00	; 0
    3f98:	0e 94 d7 20 	call	0x41ae	; 0x41ae <__ultoa_invert>
    3f9c:	d8 2e       	mov	r13, r24
    3f9e:	d2 18       	sub	r13, r2
    3fa0:	40 c0       	rjmp	.+128    	; 0x4022 <vfprintf+0x2b2>
    3fa2:	95 37       	cpi	r25, 0x75	; 117
    3fa4:	29 f4       	brne	.+10     	; 0x3fb0 <vfprintf+0x240>
    3fa6:	1f 2d       	mov	r17, r15
    3fa8:	1f 7e       	andi	r17, 0xEF	; 239
    3faa:	2a e0       	ldi	r18, 0x0A	; 10
    3fac:	30 e0       	ldi	r19, 0x00	; 0
    3fae:	1d c0       	rjmp	.+58     	; 0x3fea <vfprintf+0x27a>
    3fb0:	1f 2d       	mov	r17, r15
    3fb2:	19 7f       	andi	r17, 0xF9	; 249
    3fb4:	9f 36       	cpi	r25, 0x6F	; 111
    3fb6:	61 f0       	breq	.+24     	; 0x3fd0 <vfprintf+0x260>
    3fb8:	90 37       	cpi	r25, 0x70	; 112
    3fba:	20 f4       	brcc	.+8      	; 0x3fc4 <vfprintf+0x254>
    3fbc:	98 35       	cpi	r25, 0x58	; 88
    3fbe:	09 f0       	breq	.+2      	; 0x3fc2 <vfprintf+0x252>
    3fc0:	ac c0       	rjmp	.+344    	; 0x411a <vfprintf+0x3aa>
    3fc2:	0f c0       	rjmp	.+30     	; 0x3fe2 <vfprintf+0x272>
    3fc4:	90 37       	cpi	r25, 0x70	; 112
    3fc6:	39 f0       	breq	.+14     	; 0x3fd6 <vfprintf+0x266>
    3fc8:	98 37       	cpi	r25, 0x78	; 120
    3fca:	09 f0       	breq	.+2      	; 0x3fce <vfprintf+0x25e>
    3fcc:	a6 c0       	rjmp	.+332    	; 0x411a <vfprintf+0x3aa>
    3fce:	04 c0       	rjmp	.+8      	; 0x3fd8 <vfprintf+0x268>
    3fd0:	28 e0       	ldi	r18, 0x08	; 8
    3fd2:	30 e0       	ldi	r19, 0x00	; 0
    3fd4:	0a c0       	rjmp	.+20     	; 0x3fea <vfprintf+0x27a>
    3fd6:	10 61       	ori	r17, 0x10	; 16
    3fd8:	14 fd       	sbrc	r17, 4
    3fda:	14 60       	ori	r17, 0x04	; 4
    3fdc:	20 e1       	ldi	r18, 0x10	; 16
    3fde:	30 e0       	ldi	r19, 0x00	; 0
    3fe0:	04 c0       	rjmp	.+8      	; 0x3fea <vfprintf+0x27a>
    3fe2:	14 fd       	sbrc	r17, 4
    3fe4:	16 60       	ori	r17, 0x06	; 6
    3fe6:	20 e1       	ldi	r18, 0x10	; 16
    3fe8:	32 e0       	ldi	r19, 0x02	; 2
    3fea:	17 ff       	sbrs	r17, 7
    3fec:	08 c0       	rjmp	.+16     	; 0x3ffe <vfprintf+0x28e>
    3fee:	f5 01       	movw	r30, r10
    3ff0:	60 81       	ld	r22, Z
    3ff2:	71 81       	ldd	r23, Z+1	; 0x01
    3ff4:	82 81       	ldd	r24, Z+2	; 0x02
    3ff6:	93 81       	ldd	r25, Z+3	; 0x03
    3ff8:	44 e0       	ldi	r20, 0x04	; 4
    3ffa:	50 e0       	ldi	r21, 0x00	; 0
    3ffc:	08 c0       	rjmp	.+16     	; 0x400e <vfprintf+0x29e>
    3ffe:	f5 01       	movw	r30, r10
    4000:	80 81       	ld	r24, Z
    4002:	91 81       	ldd	r25, Z+1	; 0x01
    4004:	bc 01       	movw	r22, r24
    4006:	80 e0       	ldi	r24, 0x00	; 0
    4008:	90 e0       	ldi	r25, 0x00	; 0
    400a:	42 e0       	ldi	r20, 0x02	; 2
    400c:	50 e0       	ldi	r21, 0x00	; 0
    400e:	a4 0e       	add	r10, r20
    4010:	b5 1e       	adc	r11, r21
    4012:	a1 01       	movw	r20, r2
    4014:	0e 94 d7 20 	call	0x41ae	; 0x41ae <__ultoa_invert>
    4018:	d8 2e       	mov	r13, r24
    401a:	d2 18       	sub	r13, r2
    401c:	8f e7       	ldi	r24, 0x7F	; 127
    401e:	f8 2e       	mov	r15, r24
    4020:	f1 22       	and	r15, r17
    4022:	f6 fe       	sbrs	r15, 6
    4024:	0b c0       	rjmp	.+22     	; 0x403c <vfprintf+0x2cc>
    4026:	5e ef       	ldi	r21, 0xFE	; 254
    4028:	f5 22       	and	r15, r21
    402a:	d9 14       	cp	r13, r9
    402c:	38 f4       	brcc	.+14     	; 0x403c <vfprintf+0x2cc>
    402e:	f4 fe       	sbrs	r15, 4
    4030:	07 c0       	rjmp	.+14     	; 0x4040 <vfprintf+0x2d0>
    4032:	f2 fc       	sbrc	r15, 2
    4034:	05 c0       	rjmp	.+10     	; 0x4040 <vfprintf+0x2d0>
    4036:	8f ee       	ldi	r24, 0xEF	; 239
    4038:	f8 22       	and	r15, r24
    403a:	02 c0       	rjmp	.+4      	; 0x4040 <vfprintf+0x2d0>
    403c:	1d 2d       	mov	r17, r13
    403e:	01 c0       	rjmp	.+2      	; 0x4042 <vfprintf+0x2d2>
    4040:	19 2d       	mov	r17, r9
    4042:	f4 fe       	sbrs	r15, 4
    4044:	0d c0       	rjmp	.+26     	; 0x4060 <vfprintf+0x2f0>
    4046:	fe 01       	movw	r30, r28
    4048:	ed 0d       	add	r30, r13
    404a:	f1 1d       	adc	r31, r1
    404c:	80 81       	ld	r24, Z
    404e:	80 33       	cpi	r24, 0x30	; 48
    4050:	19 f4       	brne	.+6      	; 0x4058 <vfprintf+0x2e8>
    4052:	99 ee       	ldi	r25, 0xE9	; 233
    4054:	f9 22       	and	r15, r25
    4056:	08 c0       	rjmp	.+16     	; 0x4068 <vfprintf+0x2f8>
    4058:	1f 5f       	subi	r17, 0xFF	; 255
    405a:	f2 fe       	sbrs	r15, 2
    405c:	05 c0       	rjmp	.+10     	; 0x4068 <vfprintf+0x2f8>
    405e:	03 c0       	rjmp	.+6      	; 0x4066 <vfprintf+0x2f6>
    4060:	8f 2d       	mov	r24, r15
    4062:	86 78       	andi	r24, 0x86	; 134
    4064:	09 f0       	breq	.+2      	; 0x4068 <vfprintf+0x2f8>
    4066:	1f 5f       	subi	r17, 0xFF	; 255
    4068:	0f 2d       	mov	r16, r15
    406a:	f3 fc       	sbrc	r15, 3
    406c:	14 c0       	rjmp	.+40     	; 0x4096 <vfprintf+0x326>
    406e:	f0 fe       	sbrs	r15, 0
    4070:	0f c0       	rjmp	.+30     	; 0x4090 <vfprintf+0x320>
    4072:	1e 15       	cp	r17, r14
    4074:	10 f0       	brcs	.+4      	; 0x407a <vfprintf+0x30a>
    4076:	9d 2c       	mov	r9, r13
    4078:	0b c0       	rjmp	.+22     	; 0x4090 <vfprintf+0x320>
    407a:	9d 2c       	mov	r9, r13
    407c:	9e 0c       	add	r9, r14
    407e:	91 1a       	sub	r9, r17
    4080:	1e 2d       	mov	r17, r14
    4082:	06 c0       	rjmp	.+12     	; 0x4090 <vfprintf+0x320>
    4084:	80 e2       	ldi	r24, 0x20	; 32
    4086:	90 e0       	ldi	r25, 0x00	; 0
    4088:	b3 01       	movw	r22, r6
    408a:	0e 94 ab 20 	call	0x4156	; 0x4156 <fputc>
    408e:	1f 5f       	subi	r17, 0xFF	; 255
    4090:	1e 15       	cp	r17, r14
    4092:	c0 f3       	brcs	.-16     	; 0x4084 <vfprintf+0x314>
    4094:	04 c0       	rjmp	.+8      	; 0x409e <vfprintf+0x32e>
    4096:	1e 15       	cp	r17, r14
    4098:	10 f4       	brcc	.+4      	; 0x409e <vfprintf+0x32e>
    409a:	e1 1a       	sub	r14, r17
    409c:	01 c0       	rjmp	.+2      	; 0x40a0 <vfprintf+0x330>
    409e:	ee 24       	eor	r14, r14
    40a0:	04 ff       	sbrs	r16, 4
    40a2:	0f c0       	rjmp	.+30     	; 0x40c2 <vfprintf+0x352>
    40a4:	80 e3       	ldi	r24, 0x30	; 48
    40a6:	90 e0       	ldi	r25, 0x00	; 0
    40a8:	b3 01       	movw	r22, r6
    40aa:	0e 94 ab 20 	call	0x4156	; 0x4156 <fputc>
    40ae:	02 ff       	sbrs	r16, 2
    40b0:	1d c0       	rjmp	.+58     	; 0x40ec <vfprintf+0x37c>
    40b2:	01 fd       	sbrc	r16, 1
    40b4:	03 c0       	rjmp	.+6      	; 0x40bc <vfprintf+0x34c>
    40b6:	88 e7       	ldi	r24, 0x78	; 120
    40b8:	90 e0       	ldi	r25, 0x00	; 0
    40ba:	0e c0       	rjmp	.+28     	; 0x40d8 <vfprintf+0x368>
    40bc:	88 e5       	ldi	r24, 0x58	; 88
    40be:	90 e0       	ldi	r25, 0x00	; 0
    40c0:	0b c0       	rjmp	.+22     	; 0x40d8 <vfprintf+0x368>
    40c2:	80 2f       	mov	r24, r16
    40c4:	86 78       	andi	r24, 0x86	; 134
    40c6:	91 f0       	breq	.+36     	; 0x40ec <vfprintf+0x37c>
    40c8:	01 ff       	sbrs	r16, 1
    40ca:	02 c0       	rjmp	.+4      	; 0x40d0 <vfprintf+0x360>
    40cc:	8b e2       	ldi	r24, 0x2B	; 43
    40ce:	01 c0       	rjmp	.+2      	; 0x40d2 <vfprintf+0x362>
    40d0:	80 e2       	ldi	r24, 0x20	; 32
    40d2:	f7 fc       	sbrc	r15, 7
    40d4:	8d e2       	ldi	r24, 0x2D	; 45
    40d6:	90 e0       	ldi	r25, 0x00	; 0
    40d8:	b3 01       	movw	r22, r6
    40da:	0e 94 ab 20 	call	0x4156	; 0x4156 <fputc>
    40de:	06 c0       	rjmp	.+12     	; 0x40ec <vfprintf+0x37c>
    40e0:	80 e3       	ldi	r24, 0x30	; 48
    40e2:	90 e0       	ldi	r25, 0x00	; 0
    40e4:	b3 01       	movw	r22, r6
    40e6:	0e 94 ab 20 	call	0x4156	; 0x4156 <fputc>
    40ea:	9a 94       	dec	r9
    40ec:	d9 14       	cp	r13, r9
    40ee:	c0 f3       	brcs	.-16     	; 0x40e0 <vfprintf+0x370>
    40f0:	da 94       	dec	r13
    40f2:	f1 01       	movw	r30, r2
    40f4:	ed 0d       	add	r30, r13
    40f6:	f1 1d       	adc	r31, r1
    40f8:	80 81       	ld	r24, Z
    40fa:	90 e0       	ldi	r25, 0x00	; 0
    40fc:	b3 01       	movw	r22, r6
    40fe:	0e 94 ab 20 	call	0x4156	; 0x4156 <fputc>
    4102:	dd 20       	and	r13, r13
    4104:	a9 f7       	brne	.-22     	; 0x40f0 <vfprintf+0x380>
    4106:	06 c0       	rjmp	.+12     	; 0x4114 <vfprintf+0x3a4>
    4108:	80 e2       	ldi	r24, 0x20	; 32
    410a:	90 e0       	ldi	r25, 0x00	; 0
    410c:	b3 01       	movw	r22, r6
    410e:	0e 94 ab 20 	call	0x4156	; 0x4156 <fputc>
    4112:	ea 94       	dec	r14
    4114:	ee 20       	and	r14, r14
    4116:	c1 f7       	brne	.-16     	; 0x4108 <vfprintf+0x398>
    4118:	43 ce       	rjmp	.-890    	; 0x3da0 <vfprintf+0x30>
    411a:	f3 01       	movw	r30, r6
    411c:	66 81       	ldd	r22, Z+6	; 0x06
    411e:	77 81       	ldd	r23, Z+7	; 0x07
    4120:	cb 01       	movw	r24, r22
    4122:	2b 96       	adiw	r28, 0x0b	; 11
    4124:	e2 e1       	ldi	r30, 0x12	; 18
    4126:	0c 94 79 1e 	jmp	0x3cf2	; 0x3cf2 <__epilogue_restores__>

0000412a <strnlen_P>:
    412a:	fc 01       	movw	r30, r24
    412c:	05 90       	lpm	r0, Z+
    412e:	61 50       	subi	r22, 0x01	; 1
    4130:	70 40       	sbci	r23, 0x00	; 0
    4132:	01 10       	cpse	r0, r1
    4134:	d8 f7       	brcc	.-10     	; 0x412c <strnlen_P+0x2>
    4136:	80 95       	com	r24
    4138:	90 95       	com	r25
    413a:	8e 0f       	add	r24, r30
    413c:	9f 1f       	adc	r25, r31
    413e:	08 95       	ret

00004140 <strnlen>:
    4140:	fc 01       	movw	r30, r24
    4142:	61 50       	subi	r22, 0x01	; 1
    4144:	70 40       	sbci	r23, 0x00	; 0
    4146:	01 90       	ld	r0, Z+
    4148:	01 10       	cpse	r0, r1
    414a:	d8 f7       	brcc	.-10     	; 0x4142 <strnlen+0x2>
    414c:	80 95       	com	r24
    414e:	90 95       	com	r25
    4150:	8e 0f       	add	r24, r30
    4152:	9f 1f       	adc	r25, r31
    4154:	08 95       	ret

00004156 <fputc>:
    4156:	0f 93       	push	r16
    4158:	1f 93       	push	r17
    415a:	cf 93       	push	r28
    415c:	df 93       	push	r29
    415e:	8c 01       	movw	r16, r24
    4160:	eb 01       	movw	r28, r22
    4162:	8b 81       	ldd	r24, Y+3	; 0x03
    4164:	81 ff       	sbrs	r24, 1
    4166:	1b c0       	rjmp	.+54     	; 0x419e <fputc+0x48>
    4168:	82 ff       	sbrs	r24, 2
    416a:	0d c0       	rjmp	.+26     	; 0x4186 <fputc+0x30>
    416c:	2e 81       	ldd	r18, Y+6	; 0x06
    416e:	3f 81       	ldd	r19, Y+7	; 0x07
    4170:	8c 81       	ldd	r24, Y+4	; 0x04
    4172:	9d 81       	ldd	r25, Y+5	; 0x05
    4174:	28 17       	cp	r18, r24
    4176:	39 07       	cpc	r19, r25
    4178:	64 f4       	brge	.+24     	; 0x4192 <fputc+0x3c>
    417a:	e8 81       	ld	r30, Y
    417c:	f9 81       	ldd	r31, Y+1	; 0x01
    417e:	01 93       	st	Z+, r16
    4180:	f9 83       	std	Y+1, r31	; 0x01
    4182:	e8 83       	st	Y, r30
    4184:	06 c0       	rjmp	.+12     	; 0x4192 <fputc+0x3c>
    4186:	e8 85       	ldd	r30, Y+8	; 0x08
    4188:	f9 85       	ldd	r31, Y+9	; 0x09
    418a:	80 2f       	mov	r24, r16
    418c:	09 95       	icall
    418e:	89 2b       	or	r24, r25
    4190:	31 f4       	brne	.+12     	; 0x419e <fputc+0x48>
    4192:	8e 81       	ldd	r24, Y+6	; 0x06
    4194:	9f 81       	ldd	r25, Y+7	; 0x07
    4196:	01 96       	adiw	r24, 0x01	; 1
    4198:	9f 83       	std	Y+7, r25	; 0x07
    419a:	8e 83       	std	Y+6, r24	; 0x06
    419c:	02 c0       	rjmp	.+4      	; 0x41a2 <fputc+0x4c>
    419e:	0f ef       	ldi	r16, 0xFF	; 255
    41a0:	1f ef       	ldi	r17, 0xFF	; 255
    41a2:	c8 01       	movw	r24, r16
    41a4:	df 91       	pop	r29
    41a6:	cf 91       	pop	r28
    41a8:	1f 91       	pop	r17
    41aa:	0f 91       	pop	r16
    41ac:	08 95       	ret

000041ae <__ultoa_invert>:
    41ae:	fa 01       	movw	r30, r20
    41b0:	aa 27       	eor	r26, r26
    41b2:	28 30       	cpi	r18, 0x08	; 8
    41b4:	51 f1       	breq	.+84     	; 0x420a <__ultoa_invert+0x5c>
    41b6:	20 31       	cpi	r18, 0x10	; 16
    41b8:	81 f1       	breq	.+96     	; 0x421a <__ultoa_invert+0x6c>
    41ba:	e8 94       	clt
    41bc:	6f 93       	push	r22
    41be:	6e 7f       	andi	r22, 0xFE	; 254
    41c0:	6e 5f       	subi	r22, 0xFE	; 254
    41c2:	7f 4f       	sbci	r23, 0xFF	; 255
    41c4:	8f 4f       	sbci	r24, 0xFF	; 255
    41c6:	9f 4f       	sbci	r25, 0xFF	; 255
    41c8:	af 4f       	sbci	r26, 0xFF	; 255
    41ca:	b1 e0       	ldi	r27, 0x01	; 1
    41cc:	3e d0       	rcall	.+124    	; 0x424a <__ultoa_invert+0x9c>
    41ce:	b4 e0       	ldi	r27, 0x04	; 4
    41d0:	3c d0       	rcall	.+120    	; 0x424a <__ultoa_invert+0x9c>
    41d2:	67 0f       	add	r22, r23
    41d4:	78 1f       	adc	r23, r24
    41d6:	89 1f       	adc	r24, r25
    41d8:	9a 1f       	adc	r25, r26
    41da:	a1 1d       	adc	r26, r1
    41dc:	68 0f       	add	r22, r24
    41de:	79 1f       	adc	r23, r25
    41e0:	8a 1f       	adc	r24, r26
    41e2:	91 1d       	adc	r25, r1
    41e4:	a1 1d       	adc	r26, r1
    41e6:	6a 0f       	add	r22, r26
    41e8:	71 1d       	adc	r23, r1
    41ea:	81 1d       	adc	r24, r1
    41ec:	91 1d       	adc	r25, r1
    41ee:	a1 1d       	adc	r26, r1
    41f0:	20 d0       	rcall	.+64     	; 0x4232 <__ultoa_invert+0x84>
    41f2:	09 f4       	brne	.+2      	; 0x41f6 <__ultoa_invert+0x48>
    41f4:	68 94       	set
    41f6:	3f 91       	pop	r19
    41f8:	2a e0       	ldi	r18, 0x0A	; 10
    41fa:	26 9f       	mul	r18, r22
    41fc:	11 24       	eor	r1, r1
    41fe:	30 19       	sub	r19, r0
    4200:	30 5d       	subi	r19, 0xD0	; 208
    4202:	31 93       	st	Z+, r19
    4204:	de f6       	brtc	.-74     	; 0x41bc <__ultoa_invert+0xe>
    4206:	cf 01       	movw	r24, r30
    4208:	08 95       	ret
    420a:	46 2f       	mov	r20, r22
    420c:	47 70       	andi	r20, 0x07	; 7
    420e:	40 5d       	subi	r20, 0xD0	; 208
    4210:	41 93       	st	Z+, r20
    4212:	b3 e0       	ldi	r27, 0x03	; 3
    4214:	0f d0       	rcall	.+30     	; 0x4234 <__ultoa_invert+0x86>
    4216:	c9 f7       	brne	.-14     	; 0x420a <__ultoa_invert+0x5c>
    4218:	f6 cf       	rjmp	.-20     	; 0x4206 <__ultoa_invert+0x58>
    421a:	46 2f       	mov	r20, r22
    421c:	4f 70       	andi	r20, 0x0F	; 15
    421e:	40 5d       	subi	r20, 0xD0	; 208
    4220:	4a 33       	cpi	r20, 0x3A	; 58
    4222:	18 f0       	brcs	.+6      	; 0x422a <__ultoa_invert+0x7c>
    4224:	49 5d       	subi	r20, 0xD9	; 217
    4226:	31 fd       	sbrc	r19, 1
    4228:	40 52       	subi	r20, 0x20	; 32
    422a:	41 93       	st	Z+, r20
    422c:	02 d0       	rcall	.+4      	; 0x4232 <__ultoa_invert+0x84>
    422e:	a9 f7       	brne	.-22     	; 0x421a <__ultoa_invert+0x6c>
    4230:	ea cf       	rjmp	.-44     	; 0x4206 <__ultoa_invert+0x58>
    4232:	b4 e0       	ldi	r27, 0x04	; 4
    4234:	a6 95       	lsr	r26
    4236:	97 95       	ror	r25
    4238:	87 95       	ror	r24
    423a:	77 95       	ror	r23
    423c:	67 95       	ror	r22
    423e:	ba 95       	dec	r27
    4240:	c9 f7       	brne	.-14     	; 0x4234 <__ultoa_invert+0x86>
    4242:	00 97       	sbiw	r24, 0x00	; 0
    4244:	61 05       	cpc	r22, r1
    4246:	71 05       	cpc	r23, r1
    4248:	08 95       	ret
    424a:	9b 01       	movw	r18, r22
    424c:	ac 01       	movw	r20, r24
    424e:	0a 2e       	mov	r0, r26
    4250:	06 94       	lsr	r0
    4252:	57 95       	ror	r21
    4254:	47 95       	ror	r20
    4256:	37 95       	ror	r19
    4258:	27 95       	ror	r18
    425a:	ba 95       	dec	r27
    425c:	c9 f7       	brne	.-14     	; 0x4250 <__ultoa_invert+0xa2>
    425e:	62 0f       	add	r22, r18
    4260:	73 1f       	adc	r23, r19
    4262:	84 1f       	adc	r24, r20
    4264:	95 1f       	adc	r25, r21
    4266:	a0 1d       	adc	r26, r0
    4268:	08 95       	ret

0000426a <_exit>:
    426a:	f8 94       	cli

0000426c <__stop_program>:
    426c:	ff cf       	rjmp	.-2      	; 0x426c <__stop_program>
