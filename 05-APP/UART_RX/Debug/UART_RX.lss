
UART_RX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000db2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000006  00800060  00800060  00000e26  2**0
                  ALLOC
  2 .stab         00000e70  00000000  00000000  00000e28  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000006a0  00000000  00000000  00001c98  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a6 36       	cpi	r26, 0x66	; 102
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 99 06 	call	0xd32	; 0xd32 <main>
  74:	0c 94 d7 06 	jmp	0xdae	; 0xdae <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <GPIO_voidSetPinDDR>:




	void GPIO_voidSetPinDDR (u8  copy_u8Port ,u8 copy_u8Pin , u8 copy_u8Mode )
	{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	00 d0       	rcall	.+0      	; 0x82 <GPIO_voidSetPinDDR+0x6>
  82:	00 d0       	rcall	.+0      	; 0x84 <GPIO_voidSetPinDDR+0x8>
  84:	0f 92       	push	r0
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	89 83       	std	Y+1, r24	; 0x01
  8c:	6a 83       	std	Y+2, r22	; 0x02
  8e:	4b 83       	std	Y+3, r20	; 0x03
		switch(copy_u8Port)
  90:	89 81       	ldd	r24, Y+1	; 0x01
  92:	28 2f       	mov	r18, r24
  94:	30 e0       	ldi	r19, 0x00	; 0
  96:	3d 83       	std	Y+5, r19	; 0x05
  98:	2c 83       	std	Y+4, r18	; 0x04
  9a:	8c 81       	ldd	r24, Y+4	; 0x04
  9c:	9d 81       	ldd	r25, Y+5	; 0x05
  9e:	81 30       	cpi	r24, 0x01	; 1
  a0:	91 05       	cpc	r25, r1
  a2:	09 f4       	brne	.+2      	; 0xa6 <GPIO_voidSetPinDDR+0x2a>
  a4:	43 c0       	rjmp	.+134    	; 0x12c <GPIO_voidSetPinDDR+0xb0>
  a6:	2c 81       	ldd	r18, Y+4	; 0x04
  a8:	3d 81       	ldd	r19, Y+5	; 0x05
  aa:	22 30       	cpi	r18, 0x02	; 2
  ac:	31 05       	cpc	r19, r1
  ae:	2c f4       	brge	.+10     	; 0xba <GPIO_voidSetPinDDR+0x3e>
  b0:	8c 81       	ldd	r24, Y+4	; 0x04
  b2:	9d 81       	ldd	r25, Y+5	; 0x05
  b4:	00 97       	sbiw	r24, 0x00	; 0
  b6:	71 f0       	breq	.+28     	; 0xd4 <GPIO_voidSetPinDDR+0x58>
  b8:	bc c0       	rjmp	.+376    	; 0x232 <GPIO_voidSetPinDDR+0x1b6>
  ba:	2c 81       	ldd	r18, Y+4	; 0x04
  bc:	3d 81       	ldd	r19, Y+5	; 0x05
  be:	22 30       	cpi	r18, 0x02	; 2
  c0:	31 05       	cpc	r19, r1
  c2:	09 f4       	brne	.+2      	; 0xc6 <GPIO_voidSetPinDDR+0x4a>
  c4:	5f c0       	rjmp	.+190    	; 0x184 <GPIO_voidSetPinDDR+0x108>
  c6:	8c 81       	ldd	r24, Y+4	; 0x04
  c8:	9d 81       	ldd	r25, Y+5	; 0x05
  ca:	83 30       	cpi	r24, 0x03	; 3
  cc:	91 05       	cpc	r25, r1
  ce:	09 f4       	brne	.+2      	; 0xd2 <GPIO_voidSetPinDDR+0x56>
  d0:	85 c0       	rjmp	.+266    	; 0x1dc <GPIO_voidSetPinDDR+0x160>
  d2:	af c0       	rjmp	.+350    	; 0x232 <GPIO_voidSetPinDDR+0x1b6>
		{
			case GPIOA :
				if(copy_u8Mode ==OUTPUT )
  d4:	8b 81       	ldd	r24, Y+3	; 0x03
  d6:	81 30       	cpi	r24, 0x01	; 1
  d8:	a1 f4       	brne	.+40     	; 0x102 <GPIO_voidSetPinDDR+0x86>
				{
					SET_BIT(DDRA ,copy_u8Pin);
  da:	aa e3       	ldi	r26, 0x3A	; 58
  dc:	b0 e0       	ldi	r27, 0x00	; 0
  de:	ea e3       	ldi	r30, 0x3A	; 58
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	48 2f       	mov	r20, r24
  e6:	8a 81       	ldd	r24, Y+2	; 0x02
  e8:	28 2f       	mov	r18, r24
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	02 2e       	mov	r0, r18
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <GPIO_voidSetPinDDR+0x7c>
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	0a 94       	dec	r0
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <GPIO_voidSetPinDDR+0x78>
  fc:	84 2b       	or	r24, r20
  fe:	8c 93       	st	X, r24
 100:	98 c0       	rjmp	.+304    	; 0x232 <GPIO_voidSetPinDDR+0x1b6>
				}
				else {
					CLEAR_BIT(DDRA,copy_u8Pin);
 102:	aa e3       	ldi	r26, 0x3A	; 58
 104:	b0 e0       	ldi	r27, 0x00	; 0
 106:	ea e3       	ldi	r30, 0x3A	; 58
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	48 2f       	mov	r20, r24
 10e:	8a 81       	ldd	r24, Y+2	; 0x02
 110:	28 2f       	mov	r18, r24
 112:	30 e0       	ldi	r19, 0x00	; 0
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	02 2e       	mov	r0, r18
 11a:	02 c0       	rjmp	.+4      	; 0x120 <GPIO_voidSetPinDDR+0xa4>
 11c:	88 0f       	add	r24, r24
 11e:	99 1f       	adc	r25, r25
 120:	0a 94       	dec	r0
 122:	e2 f7       	brpl	.-8      	; 0x11c <GPIO_voidSetPinDDR+0xa0>
 124:	80 95       	com	r24
 126:	84 23       	and	r24, r20
 128:	8c 93       	st	X, r24
 12a:	83 c0       	rjmp	.+262    	; 0x232 <GPIO_voidSetPinDDR+0x1b6>
				}
				break;
			case GPIOB :
				if(copy_u8Mode ==OUTPUT )
 12c:	8b 81       	ldd	r24, Y+3	; 0x03
 12e:	81 30       	cpi	r24, 0x01	; 1
 130:	a1 f4       	brne	.+40     	; 0x15a <GPIO_voidSetPinDDR+0xde>
				{
					SET_BIT(DDRB ,copy_u8Pin);
 132:	a7 e3       	ldi	r26, 0x37	; 55
 134:	b0 e0       	ldi	r27, 0x00	; 0
 136:	e7 e3       	ldi	r30, 0x37	; 55
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	48 2f       	mov	r20, r24
 13e:	8a 81       	ldd	r24, Y+2	; 0x02
 140:	28 2f       	mov	r18, r24
 142:	30 e0       	ldi	r19, 0x00	; 0
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	02 2e       	mov	r0, r18
 14a:	02 c0       	rjmp	.+4      	; 0x150 <GPIO_voidSetPinDDR+0xd4>
 14c:	88 0f       	add	r24, r24
 14e:	99 1f       	adc	r25, r25
 150:	0a 94       	dec	r0
 152:	e2 f7       	brpl	.-8      	; 0x14c <GPIO_voidSetPinDDR+0xd0>
 154:	84 2b       	or	r24, r20
 156:	8c 93       	st	X, r24
 158:	6c c0       	rjmp	.+216    	; 0x232 <GPIO_voidSetPinDDR+0x1b6>
				}
				else {
					CLEAR_BIT(DDRB,copy_u8Pin);
 15a:	a7 e3       	ldi	r26, 0x37	; 55
 15c:	b0 e0       	ldi	r27, 0x00	; 0
 15e:	e7 e3       	ldi	r30, 0x37	; 55
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	80 81       	ld	r24, Z
 164:	48 2f       	mov	r20, r24
 166:	8a 81       	ldd	r24, Y+2	; 0x02
 168:	28 2f       	mov	r18, r24
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	02 2e       	mov	r0, r18
 172:	02 c0       	rjmp	.+4      	; 0x178 <GPIO_voidSetPinDDR+0xfc>
 174:	88 0f       	add	r24, r24
 176:	99 1f       	adc	r25, r25
 178:	0a 94       	dec	r0
 17a:	e2 f7       	brpl	.-8      	; 0x174 <GPIO_voidSetPinDDR+0xf8>
 17c:	80 95       	com	r24
 17e:	84 23       	and	r24, r20
 180:	8c 93       	st	X, r24
 182:	57 c0       	rjmp	.+174    	; 0x232 <GPIO_voidSetPinDDR+0x1b6>
				}
				break;
			case GPIOC :
				if(copy_u8Mode ==OUTPUT )
 184:	8b 81       	ldd	r24, Y+3	; 0x03
 186:	81 30       	cpi	r24, 0x01	; 1
 188:	a1 f4       	brne	.+40     	; 0x1b2 <GPIO_voidSetPinDDR+0x136>
				{
					SET_BIT(DDRC ,copy_u8Pin);
 18a:	a4 e3       	ldi	r26, 0x34	; 52
 18c:	b0 e0       	ldi	r27, 0x00	; 0
 18e:	e4 e3       	ldi	r30, 0x34	; 52
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	80 81       	ld	r24, Z
 194:	48 2f       	mov	r20, r24
 196:	8a 81       	ldd	r24, Y+2	; 0x02
 198:	28 2f       	mov	r18, r24
 19a:	30 e0       	ldi	r19, 0x00	; 0
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	02 2e       	mov	r0, r18
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <GPIO_voidSetPinDDR+0x12c>
 1a4:	88 0f       	add	r24, r24
 1a6:	99 1f       	adc	r25, r25
 1a8:	0a 94       	dec	r0
 1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <GPIO_voidSetPinDDR+0x128>
 1ac:	84 2b       	or	r24, r20
 1ae:	8c 93       	st	X, r24
 1b0:	40 c0       	rjmp	.+128    	; 0x232 <GPIO_voidSetPinDDR+0x1b6>
				}
				else {
					CLEAR_BIT(DDRC,copy_u8Pin);
 1b2:	a4 e3       	ldi	r26, 0x34	; 52
 1b4:	b0 e0       	ldi	r27, 0x00	; 0
 1b6:	e4 e3       	ldi	r30, 0x34	; 52
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	80 81       	ld	r24, Z
 1bc:	48 2f       	mov	r20, r24
 1be:	8a 81       	ldd	r24, Y+2	; 0x02
 1c0:	28 2f       	mov	r18, r24
 1c2:	30 e0       	ldi	r19, 0x00	; 0
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	02 2e       	mov	r0, r18
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <GPIO_voidSetPinDDR+0x154>
 1cc:	88 0f       	add	r24, r24
 1ce:	99 1f       	adc	r25, r25
 1d0:	0a 94       	dec	r0
 1d2:	e2 f7       	brpl	.-8      	; 0x1cc <GPIO_voidSetPinDDR+0x150>
 1d4:	80 95       	com	r24
 1d6:	84 23       	and	r24, r20
 1d8:	8c 93       	st	X, r24
 1da:	2b c0       	rjmp	.+86     	; 0x232 <GPIO_voidSetPinDDR+0x1b6>
				}
				break;
			case GPIOD :
				if(copy_u8Mode ==OUTPUT )
 1dc:	8b 81       	ldd	r24, Y+3	; 0x03
 1de:	81 30       	cpi	r24, 0x01	; 1
 1e0:	a1 f4       	brne	.+40     	; 0x20a <GPIO_voidSetPinDDR+0x18e>
				{
					SET_BIT(DDRD ,copy_u8Pin);
 1e2:	a1 e3       	ldi	r26, 0x31	; 49
 1e4:	b0 e0       	ldi	r27, 0x00	; 0
 1e6:	e1 e3       	ldi	r30, 0x31	; 49
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	80 81       	ld	r24, Z
 1ec:	48 2f       	mov	r20, r24
 1ee:	8a 81       	ldd	r24, Y+2	; 0x02
 1f0:	28 2f       	mov	r18, r24
 1f2:	30 e0       	ldi	r19, 0x00	; 0
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	02 2e       	mov	r0, r18
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <GPIO_voidSetPinDDR+0x184>
 1fc:	88 0f       	add	r24, r24
 1fe:	99 1f       	adc	r25, r25
 200:	0a 94       	dec	r0
 202:	e2 f7       	brpl	.-8      	; 0x1fc <GPIO_voidSetPinDDR+0x180>
 204:	84 2b       	or	r24, r20
 206:	8c 93       	st	X, r24
 208:	14 c0       	rjmp	.+40     	; 0x232 <GPIO_voidSetPinDDR+0x1b6>
				}
				else {
					CLEAR_BIT(DDRD,copy_u8Pin);
 20a:	a1 e3       	ldi	r26, 0x31	; 49
 20c:	b0 e0       	ldi	r27, 0x00	; 0
 20e:	e1 e3       	ldi	r30, 0x31	; 49
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	80 81       	ld	r24, Z
 214:	48 2f       	mov	r20, r24
 216:	8a 81       	ldd	r24, Y+2	; 0x02
 218:	28 2f       	mov	r18, r24
 21a:	30 e0       	ldi	r19, 0x00	; 0
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	02 2e       	mov	r0, r18
 222:	02 c0       	rjmp	.+4      	; 0x228 <GPIO_voidSetPinDDR+0x1ac>
 224:	88 0f       	add	r24, r24
 226:	99 1f       	adc	r25, r25
 228:	0a 94       	dec	r0
 22a:	e2 f7       	brpl	.-8      	; 0x224 <GPIO_voidSetPinDDR+0x1a8>
 22c:	80 95       	com	r24
 22e:	84 23       	and	r24, r20
 230:	8c 93       	st	X, r24
				}
				break;	
			default:
				break;
		}
	}
 232:	0f 90       	pop	r0
 234:	0f 90       	pop	r0
 236:	0f 90       	pop	r0
 238:	0f 90       	pop	r0
 23a:	0f 90       	pop	r0
 23c:	cf 91       	pop	r28
 23e:	df 91       	pop	r29
 240:	08 95       	ret

00000242 <GPIO_voidWritePin>:
	
	void GPIO_voidWritePin (u8  copy_u8Port ,u8 copy_u8Pin , u8 copy_u8Value )
	{
 242:	df 93       	push	r29
 244:	cf 93       	push	r28
 246:	00 d0       	rcall	.+0      	; 0x248 <GPIO_voidWritePin+0x6>
 248:	00 d0       	rcall	.+0      	; 0x24a <GPIO_voidWritePin+0x8>
 24a:	0f 92       	push	r0
 24c:	cd b7       	in	r28, 0x3d	; 61
 24e:	de b7       	in	r29, 0x3e	; 62
 250:	89 83       	std	Y+1, r24	; 0x01
 252:	6a 83       	std	Y+2, r22	; 0x02
 254:	4b 83       	std	Y+3, r20	; 0x03
		switch(copy_u8Port)
 256:	89 81       	ldd	r24, Y+1	; 0x01
 258:	28 2f       	mov	r18, r24
 25a:	30 e0       	ldi	r19, 0x00	; 0
 25c:	3d 83       	std	Y+5, r19	; 0x05
 25e:	2c 83       	std	Y+4, r18	; 0x04
 260:	8c 81       	ldd	r24, Y+4	; 0x04
 262:	9d 81       	ldd	r25, Y+5	; 0x05
 264:	81 30       	cpi	r24, 0x01	; 1
 266:	91 05       	cpc	r25, r1
 268:	09 f4       	brne	.+2      	; 0x26c <GPIO_voidWritePin+0x2a>
 26a:	43 c0       	rjmp	.+134    	; 0x2f2 <GPIO_voidWritePin+0xb0>
 26c:	2c 81       	ldd	r18, Y+4	; 0x04
 26e:	3d 81       	ldd	r19, Y+5	; 0x05
 270:	22 30       	cpi	r18, 0x02	; 2
 272:	31 05       	cpc	r19, r1
 274:	2c f4       	brge	.+10     	; 0x280 <GPIO_voidWritePin+0x3e>
 276:	8c 81       	ldd	r24, Y+4	; 0x04
 278:	9d 81       	ldd	r25, Y+5	; 0x05
 27a:	00 97       	sbiw	r24, 0x00	; 0
 27c:	71 f0       	breq	.+28     	; 0x29a <GPIO_voidWritePin+0x58>
 27e:	bc c0       	rjmp	.+376    	; 0x3f8 <GPIO_voidWritePin+0x1b6>
 280:	2c 81       	ldd	r18, Y+4	; 0x04
 282:	3d 81       	ldd	r19, Y+5	; 0x05
 284:	22 30       	cpi	r18, 0x02	; 2
 286:	31 05       	cpc	r19, r1
 288:	09 f4       	brne	.+2      	; 0x28c <GPIO_voidWritePin+0x4a>
 28a:	5f c0       	rjmp	.+190    	; 0x34a <GPIO_voidWritePin+0x108>
 28c:	8c 81       	ldd	r24, Y+4	; 0x04
 28e:	9d 81       	ldd	r25, Y+5	; 0x05
 290:	83 30       	cpi	r24, 0x03	; 3
 292:	91 05       	cpc	r25, r1
 294:	09 f4       	brne	.+2      	; 0x298 <GPIO_voidWritePin+0x56>
 296:	85 c0       	rjmp	.+266    	; 0x3a2 <GPIO_voidWritePin+0x160>
 298:	af c0       	rjmp	.+350    	; 0x3f8 <GPIO_voidWritePin+0x1b6>
		{
			case GPIOA :
				if(copy_u8Value ==HIGH )
 29a:	8b 81       	ldd	r24, Y+3	; 0x03
 29c:	81 30       	cpi	r24, 0x01	; 1
 29e:	a1 f4       	brne	.+40     	; 0x2c8 <GPIO_voidWritePin+0x86>
				{
					SET_BIT(PORTA ,copy_u8Pin);
 2a0:	ab e3       	ldi	r26, 0x3B	; 59
 2a2:	b0 e0       	ldi	r27, 0x00	; 0
 2a4:	eb e3       	ldi	r30, 0x3B	; 59
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
 2a8:	80 81       	ld	r24, Z
 2aa:	48 2f       	mov	r20, r24
 2ac:	8a 81       	ldd	r24, Y+2	; 0x02
 2ae:	28 2f       	mov	r18, r24
 2b0:	30 e0       	ldi	r19, 0x00	; 0
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	02 2e       	mov	r0, r18
 2b8:	02 c0       	rjmp	.+4      	; 0x2be <GPIO_voidWritePin+0x7c>
 2ba:	88 0f       	add	r24, r24
 2bc:	99 1f       	adc	r25, r25
 2be:	0a 94       	dec	r0
 2c0:	e2 f7       	brpl	.-8      	; 0x2ba <GPIO_voidWritePin+0x78>
 2c2:	84 2b       	or	r24, r20
 2c4:	8c 93       	st	X, r24
 2c6:	98 c0       	rjmp	.+304    	; 0x3f8 <GPIO_voidWritePin+0x1b6>
				}
				else {
					CLEAR_BIT(PORTA,copy_u8Pin);
 2c8:	ab e3       	ldi	r26, 0x3B	; 59
 2ca:	b0 e0       	ldi	r27, 0x00	; 0
 2cc:	eb e3       	ldi	r30, 0x3B	; 59
 2ce:	f0 e0       	ldi	r31, 0x00	; 0
 2d0:	80 81       	ld	r24, Z
 2d2:	48 2f       	mov	r20, r24
 2d4:	8a 81       	ldd	r24, Y+2	; 0x02
 2d6:	28 2f       	mov	r18, r24
 2d8:	30 e0       	ldi	r19, 0x00	; 0
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	02 2e       	mov	r0, r18
 2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <GPIO_voidWritePin+0xa4>
 2e2:	88 0f       	add	r24, r24
 2e4:	99 1f       	adc	r25, r25
 2e6:	0a 94       	dec	r0
 2e8:	e2 f7       	brpl	.-8      	; 0x2e2 <GPIO_voidWritePin+0xa0>
 2ea:	80 95       	com	r24
 2ec:	84 23       	and	r24, r20
 2ee:	8c 93       	st	X, r24
 2f0:	83 c0       	rjmp	.+262    	; 0x3f8 <GPIO_voidWritePin+0x1b6>
				}
				break;
			case GPIOB :
				if(copy_u8Value ==HIGH )
 2f2:	8b 81       	ldd	r24, Y+3	; 0x03
 2f4:	81 30       	cpi	r24, 0x01	; 1
 2f6:	a1 f4       	brne	.+40     	; 0x320 <GPIO_voidWritePin+0xde>
				{
					SET_BIT(PORTB ,copy_u8Pin);
 2f8:	a8 e3       	ldi	r26, 0x38	; 56
 2fa:	b0 e0       	ldi	r27, 0x00	; 0
 2fc:	e8 e3       	ldi	r30, 0x38	; 56
 2fe:	f0 e0       	ldi	r31, 0x00	; 0
 300:	80 81       	ld	r24, Z
 302:	48 2f       	mov	r20, r24
 304:	8a 81       	ldd	r24, Y+2	; 0x02
 306:	28 2f       	mov	r18, r24
 308:	30 e0       	ldi	r19, 0x00	; 0
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	02 2e       	mov	r0, r18
 310:	02 c0       	rjmp	.+4      	; 0x316 <GPIO_voidWritePin+0xd4>
 312:	88 0f       	add	r24, r24
 314:	99 1f       	adc	r25, r25
 316:	0a 94       	dec	r0
 318:	e2 f7       	brpl	.-8      	; 0x312 <GPIO_voidWritePin+0xd0>
 31a:	84 2b       	or	r24, r20
 31c:	8c 93       	st	X, r24
 31e:	6c c0       	rjmp	.+216    	; 0x3f8 <GPIO_voidWritePin+0x1b6>
				}
				else {
					CLEAR_BIT(PORTB,copy_u8Pin);
 320:	a8 e3       	ldi	r26, 0x38	; 56
 322:	b0 e0       	ldi	r27, 0x00	; 0
 324:	e8 e3       	ldi	r30, 0x38	; 56
 326:	f0 e0       	ldi	r31, 0x00	; 0
 328:	80 81       	ld	r24, Z
 32a:	48 2f       	mov	r20, r24
 32c:	8a 81       	ldd	r24, Y+2	; 0x02
 32e:	28 2f       	mov	r18, r24
 330:	30 e0       	ldi	r19, 0x00	; 0
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	02 2e       	mov	r0, r18
 338:	02 c0       	rjmp	.+4      	; 0x33e <GPIO_voidWritePin+0xfc>
 33a:	88 0f       	add	r24, r24
 33c:	99 1f       	adc	r25, r25
 33e:	0a 94       	dec	r0
 340:	e2 f7       	brpl	.-8      	; 0x33a <GPIO_voidWritePin+0xf8>
 342:	80 95       	com	r24
 344:	84 23       	and	r24, r20
 346:	8c 93       	st	X, r24
 348:	57 c0       	rjmp	.+174    	; 0x3f8 <GPIO_voidWritePin+0x1b6>
				}
				break;
			case GPIOC :
				if(copy_u8Value ==HIGH )
 34a:	8b 81       	ldd	r24, Y+3	; 0x03
 34c:	81 30       	cpi	r24, 0x01	; 1
 34e:	a1 f4       	brne	.+40     	; 0x378 <GPIO_voidWritePin+0x136>
				{
					SET_BIT(PORTC ,copy_u8Pin);
 350:	a5 e3       	ldi	r26, 0x35	; 53
 352:	b0 e0       	ldi	r27, 0x00	; 0
 354:	e5 e3       	ldi	r30, 0x35	; 53
 356:	f0 e0       	ldi	r31, 0x00	; 0
 358:	80 81       	ld	r24, Z
 35a:	48 2f       	mov	r20, r24
 35c:	8a 81       	ldd	r24, Y+2	; 0x02
 35e:	28 2f       	mov	r18, r24
 360:	30 e0       	ldi	r19, 0x00	; 0
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	02 2e       	mov	r0, r18
 368:	02 c0       	rjmp	.+4      	; 0x36e <GPIO_voidWritePin+0x12c>
 36a:	88 0f       	add	r24, r24
 36c:	99 1f       	adc	r25, r25
 36e:	0a 94       	dec	r0
 370:	e2 f7       	brpl	.-8      	; 0x36a <GPIO_voidWritePin+0x128>
 372:	84 2b       	or	r24, r20
 374:	8c 93       	st	X, r24
 376:	40 c0       	rjmp	.+128    	; 0x3f8 <GPIO_voidWritePin+0x1b6>
				}
				else {
					CLEAR_BIT(PORTC,copy_u8Pin);
 378:	a5 e3       	ldi	r26, 0x35	; 53
 37a:	b0 e0       	ldi	r27, 0x00	; 0
 37c:	e5 e3       	ldi	r30, 0x35	; 53
 37e:	f0 e0       	ldi	r31, 0x00	; 0
 380:	80 81       	ld	r24, Z
 382:	48 2f       	mov	r20, r24
 384:	8a 81       	ldd	r24, Y+2	; 0x02
 386:	28 2f       	mov	r18, r24
 388:	30 e0       	ldi	r19, 0x00	; 0
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	02 2e       	mov	r0, r18
 390:	02 c0       	rjmp	.+4      	; 0x396 <GPIO_voidWritePin+0x154>
 392:	88 0f       	add	r24, r24
 394:	99 1f       	adc	r25, r25
 396:	0a 94       	dec	r0
 398:	e2 f7       	brpl	.-8      	; 0x392 <GPIO_voidWritePin+0x150>
 39a:	80 95       	com	r24
 39c:	84 23       	and	r24, r20
 39e:	8c 93       	st	X, r24
 3a0:	2b c0       	rjmp	.+86     	; 0x3f8 <GPIO_voidWritePin+0x1b6>
				}
				break;
			case GPIOD :
				if(copy_u8Value == HIGH )
 3a2:	8b 81       	ldd	r24, Y+3	; 0x03
 3a4:	81 30       	cpi	r24, 0x01	; 1
 3a6:	a1 f4       	brne	.+40     	; 0x3d0 <GPIO_voidWritePin+0x18e>
				{
					SET_BIT(PORTD ,copy_u8Pin);
 3a8:	a2 e3       	ldi	r26, 0x32	; 50
 3aa:	b0 e0       	ldi	r27, 0x00	; 0
 3ac:	e2 e3       	ldi	r30, 0x32	; 50
 3ae:	f0 e0       	ldi	r31, 0x00	; 0
 3b0:	80 81       	ld	r24, Z
 3b2:	48 2f       	mov	r20, r24
 3b4:	8a 81       	ldd	r24, Y+2	; 0x02
 3b6:	28 2f       	mov	r18, r24
 3b8:	30 e0       	ldi	r19, 0x00	; 0
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	02 2e       	mov	r0, r18
 3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <GPIO_voidWritePin+0x184>
 3c2:	88 0f       	add	r24, r24
 3c4:	99 1f       	adc	r25, r25
 3c6:	0a 94       	dec	r0
 3c8:	e2 f7       	brpl	.-8      	; 0x3c2 <GPIO_voidWritePin+0x180>
 3ca:	84 2b       	or	r24, r20
 3cc:	8c 93       	st	X, r24
 3ce:	14 c0       	rjmp	.+40     	; 0x3f8 <GPIO_voidWritePin+0x1b6>
				}
				else {
					CLEAR_BIT(PORTD,copy_u8Pin);
 3d0:	a2 e3       	ldi	r26, 0x32	; 50
 3d2:	b0 e0       	ldi	r27, 0x00	; 0
 3d4:	e2 e3       	ldi	r30, 0x32	; 50
 3d6:	f0 e0       	ldi	r31, 0x00	; 0
 3d8:	80 81       	ld	r24, Z
 3da:	48 2f       	mov	r20, r24
 3dc:	8a 81       	ldd	r24, Y+2	; 0x02
 3de:	28 2f       	mov	r18, r24
 3e0:	30 e0       	ldi	r19, 0x00	; 0
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	02 2e       	mov	r0, r18
 3e8:	02 c0       	rjmp	.+4      	; 0x3ee <GPIO_voidWritePin+0x1ac>
 3ea:	88 0f       	add	r24, r24
 3ec:	99 1f       	adc	r25, r25
 3ee:	0a 94       	dec	r0
 3f0:	e2 f7       	brpl	.-8      	; 0x3ea <GPIO_voidWritePin+0x1a8>
 3f2:	80 95       	com	r24
 3f4:	84 23       	and	r24, r20
 3f6:	8c 93       	st	X, r24
				break;	
			default:
				break;
		}
		
	}
 3f8:	0f 90       	pop	r0
 3fa:	0f 90       	pop	r0
 3fc:	0f 90       	pop	r0
 3fe:	0f 90       	pop	r0
 400:	0f 90       	pop	r0
 402:	cf 91       	pop	r28
 404:	df 91       	pop	r29
 406:	08 95       	ret

00000408 <GPIO_u8ReadPin>:
	
	u8	GPIO_u8ReadPin(	u8  copy_u8Port ,u8 copy_u8Pin )
	{
 408:	df 93       	push	r29
 40a:	cf 93       	push	r28
 40c:	00 d0       	rcall	.+0      	; 0x40e <GPIO_u8ReadPin+0x6>
 40e:	00 d0       	rcall	.+0      	; 0x410 <GPIO_u8ReadPin+0x8>
 410:	0f 92       	push	r0
 412:	cd b7       	in	r28, 0x3d	; 61
 414:	de b7       	in	r29, 0x3e	; 62
 416:	8a 83       	std	Y+2, r24	; 0x02
 418:	6b 83       	std	Y+3, r22	; 0x03
		u8 Local_u8ReturnValue ;
		switch(copy_u8Port){
 41a:	8a 81       	ldd	r24, Y+2	; 0x02
 41c:	28 2f       	mov	r18, r24
 41e:	30 e0       	ldi	r19, 0x00	; 0
 420:	3d 83       	std	Y+5, r19	; 0x05
 422:	2c 83       	std	Y+4, r18	; 0x04
 424:	4c 81       	ldd	r20, Y+4	; 0x04
 426:	5d 81       	ldd	r21, Y+5	; 0x05
 428:	41 30       	cpi	r20, 0x01	; 1
 42a:	51 05       	cpc	r21, r1
 42c:	b1 f1       	breq	.+108    	; 0x49a <GPIO_u8ReadPin+0x92>
 42e:	8c 81       	ldd	r24, Y+4	; 0x04
 430:	9d 81       	ldd	r25, Y+5	; 0x05
 432:	82 30       	cpi	r24, 0x02	; 2
 434:	91 05       	cpc	r25, r1
 436:	34 f4       	brge	.+12     	; 0x444 <GPIO_u8ReadPin+0x3c>
 438:	2c 81       	ldd	r18, Y+4	; 0x04
 43a:	3d 81       	ldd	r19, Y+5	; 0x05
 43c:	21 15       	cp	r18, r1
 43e:	31 05       	cpc	r19, r1
 440:	71 f0       	breq	.+28     	; 0x45e <GPIO_u8ReadPin+0x56>
 442:	84 c0       	rjmp	.+264    	; 0x54c <GPIO_u8ReadPin+0x144>
 444:	4c 81       	ldd	r20, Y+4	; 0x04
 446:	5d 81       	ldd	r21, Y+5	; 0x05
 448:	42 30       	cpi	r20, 0x02	; 2
 44a:	51 05       	cpc	r21, r1
 44c:	09 f4       	brne	.+2      	; 0x450 <GPIO_u8ReadPin+0x48>
 44e:	43 c0       	rjmp	.+134    	; 0x4d6 <GPIO_u8ReadPin+0xce>
 450:	8c 81       	ldd	r24, Y+4	; 0x04
 452:	9d 81       	ldd	r25, Y+5	; 0x05
 454:	83 30       	cpi	r24, 0x03	; 3
 456:	91 05       	cpc	r25, r1
 458:	09 f4       	brne	.+2      	; 0x45c <GPIO_u8ReadPin+0x54>
 45a:	5b c0       	rjmp	.+182    	; 0x512 <GPIO_u8ReadPin+0x10a>
 45c:	77 c0       	rjmp	.+238    	; 0x54c <GPIO_u8ReadPin+0x144>
			case GPIOA :
				Local_u8ReturnValue = GET_BIT(PINA,copy_u8Pin);
 45e:	e9 e3       	ldi	r30, 0x39	; 57
 460:	f0 e0       	ldi	r31, 0x00	; 0
 462:	80 81       	ld	r24, Z
 464:	48 2f       	mov	r20, r24
 466:	50 e0       	ldi	r21, 0x00	; 0
 468:	8b 81       	ldd	r24, Y+3	; 0x03
 46a:	28 2f       	mov	r18, r24
 46c:	30 e0       	ldi	r19, 0x00	; 0
 46e:	81 e0       	ldi	r24, 0x01	; 1
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	02 c0       	rjmp	.+4      	; 0x478 <GPIO_u8ReadPin+0x70>
 474:	88 0f       	add	r24, r24
 476:	99 1f       	adc	r25, r25
 478:	2a 95       	dec	r18
 47a:	e2 f7       	brpl	.-8      	; 0x474 <GPIO_u8ReadPin+0x6c>
 47c:	9a 01       	movw	r18, r20
 47e:	28 23       	and	r18, r24
 480:	39 23       	and	r19, r25
 482:	8b 81       	ldd	r24, Y+3	; 0x03
 484:	88 2f       	mov	r24, r24
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	a9 01       	movw	r20, r18
 48a:	02 c0       	rjmp	.+4      	; 0x490 <GPIO_u8ReadPin+0x88>
 48c:	55 95       	asr	r21
 48e:	47 95       	ror	r20
 490:	8a 95       	dec	r24
 492:	e2 f7       	brpl	.-8      	; 0x48c <GPIO_u8ReadPin+0x84>
 494:	ca 01       	movw	r24, r20
 496:	89 83       	std	Y+1, r24	; 0x01
 498:	59 c0       	rjmp	.+178    	; 0x54c <GPIO_u8ReadPin+0x144>
				break ;
			case GPIOB :
				Local_u8ReturnValue = GET_BIT(PINB,copy_u8Pin);
 49a:	e6 e3       	ldi	r30, 0x36	; 54
 49c:	f0 e0       	ldi	r31, 0x00	; 0
 49e:	80 81       	ld	r24, Z
 4a0:	48 2f       	mov	r20, r24
 4a2:	50 e0       	ldi	r21, 0x00	; 0
 4a4:	8b 81       	ldd	r24, Y+3	; 0x03
 4a6:	28 2f       	mov	r18, r24
 4a8:	30 e0       	ldi	r19, 0x00	; 0
 4aa:	81 e0       	ldi	r24, 0x01	; 1
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <GPIO_u8ReadPin+0xac>
 4b0:	88 0f       	add	r24, r24
 4b2:	99 1f       	adc	r25, r25
 4b4:	2a 95       	dec	r18
 4b6:	e2 f7       	brpl	.-8      	; 0x4b0 <GPIO_u8ReadPin+0xa8>
 4b8:	9a 01       	movw	r18, r20
 4ba:	28 23       	and	r18, r24
 4bc:	39 23       	and	r19, r25
 4be:	8b 81       	ldd	r24, Y+3	; 0x03
 4c0:	88 2f       	mov	r24, r24
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	a9 01       	movw	r20, r18
 4c6:	02 c0       	rjmp	.+4      	; 0x4cc <GPIO_u8ReadPin+0xc4>
 4c8:	55 95       	asr	r21
 4ca:	47 95       	ror	r20
 4cc:	8a 95       	dec	r24
 4ce:	e2 f7       	brpl	.-8      	; 0x4c8 <GPIO_u8ReadPin+0xc0>
 4d0:	ca 01       	movw	r24, r20
 4d2:	89 83       	std	Y+1, r24	; 0x01
 4d4:	3b c0       	rjmp	.+118    	; 0x54c <GPIO_u8ReadPin+0x144>
				break ;
			case GPIOC :
				Local_u8ReturnValue = GET_BIT(PINC,copy_u8Pin);
 4d6:	e3 e3       	ldi	r30, 0x33	; 51
 4d8:	f0 e0       	ldi	r31, 0x00	; 0
 4da:	80 81       	ld	r24, Z
 4dc:	48 2f       	mov	r20, r24
 4de:	50 e0       	ldi	r21, 0x00	; 0
 4e0:	8b 81       	ldd	r24, Y+3	; 0x03
 4e2:	28 2f       	mov	r18, r24
 4e4:	30 e0       	ldi	r19, 0x00	; 0
 4e6:	81 e0       	ldi	r24, 0x01	; 1
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <GPIO_u8ReadPin+0xe8>
 4ec:	88 0f       	add	r24, r24
 4ee:	99 1f       	adc	r25, r25
 4f0:	2a 95       	dec	r18
 4f2:	e2 f7       	brpl	.-8      	; 0x4ec <GPIO_u8ReadPin+0xe4>
 4f4:	9a 01       	movw	r18, r20
 4f6:	28 23       	and	r18, r24
 4f8:	39 23       	and	r19, r25
 4fa:	8b 81       	ldd	r24, Y+3	; 0x03
 4fc:	88 2f       	mov	r24, r24
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	a9 01       	movw	r20, r18
 502:	02 c0       	rjmp	.+4      	; 0x508 <GPIO_u8ReadPin+0x100>
 504:	55 95       	asr	r21
 506:	47 95       	ror	r20
 508:	8a 95       	dec	r24
 50a:	e2 f7       	brpl	.-8      	; 0x504 <GPIO_u8ReadPin+0xfc>
 50c:	ca 01       	movw	r24, r20
 50e:	89 83       	std	Y+1, r24	; 0x01
 510:	1d c0       	rjmp	.+58     	; 0x54c <GPIO_u8ReadPin+0x144>
				break ;
			case GPIOD :
				Local_u8ReturnValue = GET_BIT(PIND,copy_u8Pin);
 512:	e0 e3       	ldi	r30, 0x30	; 48
 514:	f0 e0       	ldi	r31, 0x00	; 0
 516:	80 81       	ld	r24, Z
 518:	48 2f       	mov	r20, r24
 51a:	50 e0       	ldi	r21, 0x00	; 0
 51c:	8b 81       	ldd	r24, Y+3	; 0x03
 51e:	28 2f       	mov	r18, r24
 520:	30 e0       	ldi	r19, 0x00	; 0
 522:	81 e0       	ldi	r24, 0x01	; 1
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	02 c0       	rjmp	.+4      	; 0x52c <GPIO_u8ReadPin+0x124>
 528:	88 0f       	add	r24, r24
 52a:	99 1f       	adc	r25, r25
 52c:	2a 95       	dec	r18
 52e:	e2 f7       	brpl	.-8      	; 0x528 <GPIO_u8ReadPin+0x120>
 530:	9a 01       	movw	r18, r20
 532:	28 23       	and	r18, r24
 534:	39 23       	and	r19, r25
 536:	8b 81       	ldd	r24, Y+3	; 0x03
 538:	88 2f       	mov	r24, r24
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	a9 01       	movw	r20, r18
 53e:	02 c0       	rjmp	.+4      	; 0x544 <GPIO_u8ReadPin+0x13c>
 540:	55 95       	asr	r21
 542:	47 95       	ror	r20
 544:	8a 95       	dec	r24
 546:	e2 f7       	brpl	.-8      	; 0x540 <GPIO_u8ReadPin+0x138>
 548:	ca 01       	movw	r24, r20
 54a:	89 83       	std	Y+1, r24	; 0x01
				break ;
			default:
			break;
		}
		return Local_u8ReturnValue ;
 54c:	89 81       	ldd	r24, Y+1	; 0x01
		
	}
 54e:	0f 90       	pop	r0
 550:	0f 90       	pop	r0
 552:	0f 90       	pop	r0
 554:	0f 90       	pop	r0
 556:	0f 90       	pop	r0
 558:	cf 91       	pop	r28
 55a:	df 91       	pop	r29
 55c:	08 95       	ret

0000055e <GPIO_voidTogPin>:
	
	void GPIO_voidTogPin 	( u8 copy_u8Port , u8 copy_u8Pin )
	{
 55e:	df 93       	push	r29
 560:	cf 93       	push	r28
 562:	00 d0       	rcall	.+0      	; 0x564 <GPIO_voidTogPin+0x6>
 564:	00 d0       	rcall	.+0      	; 0x566 <GPIO_voidTogPin+0x8>
 566:	cd b7       	in	r28, 0x3d	; 61
 568:	de b7       	in	r29, 0x3e	; 62
 56a:	89 83       	std	Y+1, r24	; 0x01
 56c:	6a 83       	std	Y+2, r22	; 0x02
		switch(copy_u8Port){
 56e:	89 81       	ldd	r24, Y+1	; 0x01
 570:	28 2f       	mov	r18, r24
 572:	30 e0       	ldi	r19, 0x00	; 0
 574:	3c 83       	std	Y+4, r19	; 0x04
 576:	2b 83       	std	Y+3, r18	; 0x03
 578:	8b 81       	ldd	r24, Y+3	; 0x03
 57a:	9c 81       	ldd	r25, Y+4	; 0x04
 57c:	81 30       	cpi	r24, 0x01	; 1
 57e:	91 05       	cpc	r25, r1
 580:	49 f1       	breq	.+82     	; 0x5d4 <GPIO_voidTogPin+0x76>
 582:	2b 81       	ldd	r18, Y+3	; 0x03
 584:	3c 81       	ldd	r19, Y+4	; 0x04
 586:	22 30       	cpi	r18, 0x02	; 2
 588:	31 05       	cpc	r19, r1
 58a:	2c f4       	brge	.+10     	; 0x596 <GPIO_voidTogPin+0x38>
 58c:	8b 81       	ldd	r24, Y+3	; 0x03
 58e:	9c 81       	ldd	r25, Y+4	; 0x04
 590:	00 97       	sbiw	r24, 0x00	; 0
 592:	61 f0       	breq	.+24     	; 0x5ac <GPIO_voidTogPin+0x4e>
 594:	5a c0       	rjmp	.+180    	; 0x64a <GPIO_voidTogPin+0xec>
 596:	2b 81       	ldd	r18, Y+3	; 0x03
 598:	3c 81       	ldd	r19, Y+4	; 0x04
 59a:	22 30       	cpi	r18, 0x02	; 2
 59c:	31 05       	cpc	r19, r1
 59e:	71 f1       	breq	.+92     	; 0x5fc <GPIO_voidTogPin+0x9e>
 5a0:	8b 81       	ldd	r24, Y+3	; 0x03
 5a2:	9c 81       	ldd	r25, Y+4	; 0x04
 5a4:	83 30       	cpi	r24, 0x03	; 3
 5a6:	91 05       	cpc	r25, r1
 5a8:	e9 f1       	breq	.+122    	; 0x624 <GPIO_voidTogPin+0xc6>
 5aa:	4f c0       	rjmp	.+158    	; 0x64a <GPIO_voidTogPin+0xec>
			case GPIOA :
				TOG_BIT(PORTA,copy_u8Pin);
 5ac:	ab e3       	ldi	r26, 0x3B	; 59
 5ae:	b0 e0       	ldi	r27, 0x00	; 0
 5b0:	eb e3       	ldi	r30, 0x3B	; 59
 5b2:	f0 e0       	ldi	r31, 0x00	; 0
 5b4:	80 81       	ld	r24, Z
 5b6:	48 2f       	mov	r20, r24
 5b8:	8a 81       	ldd	r24, Y+2	; 0x02
 5ba:	28 2f       	mov	r18, r24
 5bc:	30 e0       	ldi	r19, 0x00	; 0
 5be:	81 e0       	ldi	r24, 0x01	; 1
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	02 2e       	mov	r0, r18
 5c4:	02 c0       	rjmp	.+4      	; 0x5ca <GPIO_voidTogPin+0x6c>
 5c6:	88 0f       	add	r24, r24
 5c8:	99 1f       	adc	r25, r25
 5ca:	0a 94       	dec	r0
 5cc:	e2 f7       	brpl	.-8      	; 0x5c6 <GPIO_voidTogPin+0x68>
 5ce:	84 27       	eor	r24, r20
 5d0:	8c 93       	st	X, r24
 5d2:	3b c0       	rjmp	.+118    	; 0x64a <GPIO_voidTogPin+0xec>
				break ;             
			case GPIOB :            
				TOG_BIT(PORTB,copy_u8Pin);
 5d4:	a8 e3       	ldi	r26, 0x38	; 56
 5d6:	b0 e0       	ldi	r27, 0x00	; 0
 5d8:	e8 e3       	ldi	r30, 0x38	; 56
 5da:	f0 e0       	ldi	r31, 0x00	; 0
 5dc:	80 81       	ld	r24, Z
 5de:	48 2f       	mov	r20, r24
 5e0:	8a 81       	ldd	r24, Y+2	; 0x02
 5e2:	28 2f       	mov	r18, r24
 5e4:	30 e0       	ldi	r19, 0x00	; 0
 5e6:	81 e0       	ldi	r24, 0x01	; 1
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	02 2e       	mov	r0, r18
 5ec:	02 c0       	rjmp	.+4      	; 0x5f2 <GPIO_voidTogPin+0x94>
 5ee:	88 0f       	add	r24, r24
 5f0:	99 1f       	adc	r25, r25
 5f2:	0a 94       	dec	r0
 5f4:	e2 f7       	brpl	.-8      	; 0x5ee <GPIO_voidTogPin+0x90>
 5f6:	84 27       	eor	r24, r20
 5f8:	8c 93       	st	X, r24
 5fa:	27 c0       	rjmp	.+78     	; 0x64a <GPIO_voidTogPin+0xec>
				break ;             
			case GPIOC :            
				TOG_BIT(PORTC,copy_u8Pin);
 5fc:	a5 e3       	ldi	r26, 0x35	; 53
 5fe:	b0 e0       	ldi	r27, 0x00	; 0
 600:	e5 e3       	ldi	r30, 0x35	; 53
 602:	f0 e0       	ldi	r31, 0x00	; 0
 604:	80 81       	ld	r24, Z
 606:	48 2f       	mov	r20, r24
 608:	8a 81       	ldd	r24, Y+2	; 0x02
 60a:	28 2f       	mov	r18, r24
 60c:	30 e0       	ldi	r19, 0x00	; 0
 60e:	81 e0       	ldi	r24, 0x01	; 1
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	02 2e       	mov	r0, r18
 614:	02 c0       	rjmp	.+4      	; 0x61a <GPIO_voidTogPin+0xbc>
 616:	88 0f       	add	r24, r24
 618:	99 1f       	adc	r25, r25
 61a:	0a 94       	dec	r0
 61c:	e2 f7       	brpl	.-8      	; 0x616 <GPIO_voidTogPin+0xb8>
 61e:	84 27       	eor	r24, r20
 620:	8c 93       	st	X, r24
 622:	13 c0       	rjmp	.+38     	; 0x64a <GPIO_voidTogPin+0xec>
				break ;             
			case GPIOD : 
				TOG_BIT(PORTD,copy_u8Pin);
 624:	a2 e3       	ldi	r26, 0x32	; 50
 626:	b0 e0       	ldi	r27, 0x00	; 0
 628:	e2 e3       	ldi	r30, 0x32	; 50
 62a:	f0 e0       	ldi	r31, 0x00	; 0
 62c:	80 81       	ld	r24, Z
 62e:	48 2f       	mov	r20, r24
 630:	8a 81       	ldd	r24, Y+2	; 0x02
 632:	28 2f       	mov	r18, r24
 634:	30 e0       	ldi	r19, 0x00	; 0
 636:	81 e0       	ldi	r24, 0x01	; 1
 638:	90 e0       	ldi	r25, 0x00	; 0
 63a:	02 2e       	mov	r0, r18
 63c:	02 c0       	rjmp	.+4      	; 0x642 <GPIO_voidTogPin+0xe4>
 63e:	88 0f       	add	r24, r24
 640:	99 1f       	adc	r25, r25
 642:	0a 94       	dec	r0
 644:	e2 f7       	brpl	.-8      	; 0x63e <GPIO_voidTogPin+0xe0>
 646:	84 27       	eor	r24, r20
 648:	8c 93       	st	X, r24
			default:
			break;
		}
		
		
	}
 64a:	0f 90       	pop	r0
 64c:	0f 90       	pop	r0
 64e:	0f 90       	pop	r0
 650:	0f 90       	pop	r0
 652:	cf 91       	pop	r28
 654:	df 91       	pop	r29
 656:	08 95       	ret

00000658 <GPIO_voidSetPortDDR>:
	void GPIO_voidSetPortDDR (u8  copy_u8Port , u8 copy_u8Mode )
	{
 658:	df 93       	push	r29
 65a:	cf 93       	push	r28
 65c:	00 d0       	rcall	.+0      	; 0x65e <GPIO_voidSetPortDDR+0x6>
 65e:	00 d0       	rcall	.+0      	; 0x660 <GPIO_voidSetPortDDR+0x8>
 660:	cd b7       	in	r28, 0x3d	; 61
 662:	de b7       	in	r29, 0x3e	; 62
 664:	89 83       	std	Y+1, r24	; 0x01
 666:	6a 83       	std	Y+2, r22	; 0x02
		switch(copy_u8Port)
 668:	89 81       	ldd	r24, Y+1	; 0x01
 66a:	28 2f       	mov	r18, r24
 66c:	30 e0       	ldi	r19, 0x00	; 0
 66e:	3c 83       	std	Y+4, r19	; 0x04
 670:	2b 83       	std	Y+3, r18	; 0x03
 672:	8b 81       	ldd	r24, Y+3	; 0x03
 674:	9c 81       	ldd	r25, Y+4	; 0x04
 676:	81 30       	cpi	r24, 0x01	; 1
 678:	91 05       	cpc	r25, r1
 67a:	09 f1       	breq	.+66     	; 0x6be <GPIO_voidSetPortDDR+0x66>
 67c:	2b 81       	ldd	r18, Y+3	; 0x03
 67e:	3c 81       	ldd	r19, Y+4	; 0x04
 680:	22 30       	cpi	r18, 0x02	; 2
 682:	31 05       	cpc	r19, r1
 684:	2c f4       	brge	.+10     	; 0x690 <GPIO_voidSetPortDDR+0x38>
 686:	8b 81       	ldd	r24, Y+3	; 0x03
 688:	9c 81       	ldd	r25, Y+4	; 0x04
 68a:	00 97       	sbiw	r24, 0x00	; 0
 68c:	61 f0       	breq	.+24     	; 0x6a6 <GPIO_voidSetPortDDR+0x4e>
 68e:	3a c0       	rjmp	.+116    	; 0x704 <GPIO_voidSetPortDDR+0xac>
 690:	2b 81       	ldd	r18, Y+3	; 0x03
 692:	3c 81       	ldd	r19, Y+4	; 0x04
 694:	22 30       	cpi	r18, 0x02	; 2
 696:	31 05       	cpc	r19, r1
 698:	f1 f0       	breq	.+60     	; 0x6d6 <GPIO_voidSetPortDDR+0x7e>
 69a:	8b 81       	ldd	r24, Y+3	; 0x03
 69c:	9c 81       	ldd	r25, Y+4	; 0x04
 69e:	83 30       	cpi	r24, 0x03	; 3
 6a0:	91 05       	cpc	r25, r1
 6a2:	29 f1       	breq	.+74     	; 0x6ee <GPIO_voidSetPortDDR+0x96>
 6a4:	2f c0       	rjmp	.+94     	; 0x704 <GPIO_voidSetPortDDR+0xac>
		{
			case GPIOA :
				if(copy_u8Mode ==OUTPUT )
 6a6:	8a 81       	ldd	r24, Y+2	; 0x02
 6a8:	81 30       	cpi	r24, 0x01	; 1
 6aa:	29 f4       	brne	.+10     	; 0x6b6 <GPIO_voidSetPortDDR+0x5e>
				{
					DDRA= 0xFF;
 6ac:	ea e3       	ldi	r30, 0x3A	; 58
 6ae:	f0 e0       	ldi	r31, 0x00	; 0
 6b0:	8f ef       	ldi	r24, 0xFF	; 255
 6b2:	80 83       	st	Z, r24
 6b4:	27 c0       	rjmp	.+78     	; 0x704 <GPIO_voidSetPortDDR+0xac>
				}
				else {
					DDRA = 0x00 ;
 6b6:	ea e3       	ldi	r30, 0x3A	; 58
 6b8:	f0 e0       	ldi	r31, 0x00	; 0
 6ba:	10 82       	st	Z, r1
 6bc:	23 c0       	rjmp	.+70     	; 0x704 <GPIO_voidSetPortDDR+0xac>
				}
				break;
			case GPIOB :
				if(copy_u8Mode ==OUTPUT )
 6be:	8a 81       	ldd	r24, Y+2	; 0x02
 6c0:	81 30       	cpi	r24, 0x01	; 1
 6c2:	29 f4       	brne	.+10     	; 0x6ce <GPIO_voidSetPortDDR+0x76>
				{
					DDRB = 0xFF;
 6c4:	e7 e3       	ldi	r30, 0x37	; 55
 6c6:	f0 e0       	ldi	r31, 0x00	; 0
 6c8:	8f ef       	ldi	r24, 0xFF	; 255
 6ca:	80 83       	st	Z, r24
 6cc:	1b c0       	rjmp	.+54     	; 0x704 <GPIO_voidSetPortDDR+0xac>
				}
				else {
					DDRB = 0x00;
 6ce:	e7 e3       	ldi	r30, 0x37	; 55
 6d0:	f0 e0       	ldi	r31, 0x00	; 0
 6d2:	10 82       	st	Z, r1
 6d4:	17 c0       	rjmp	.+46     	; 0x704 <GPIO_voidSetPortDDR+0xac>
				}
				break;
			case GPIOC :
				if(copy_u8Mode ==OUTPUT )
 6d6:	8a 81       	ldd	r24, Y+2	; 0x02
 6d8:	81 30       	cpi	r24, 0x01	; 1
 6da:	29 f4       	brne	.+10     	; 0x6e6 <GPIO_voidSetPortDDR+0x8e>
				{
					DDRC = 0xFF ;
 6dc:	e4 e3       	ldi	r30, 0x34	; 52
 6de:	f0 e0       	ldi	r31, 0x00	; 0
 6e0:	8f ef       	ldi	r24, 0xFF	; 255
 6e2:	80 83       	st	Z, r24
 6e4:	0f c0       	rjmp	.+30     	; 0x704 <GPIO_voidSetPortDDR+0xac>
				}
				else {
					DDRC = 0x00 ;
 6e6:	e4 e3       	ldi	r30, 0x34	; 52
 6e8:	f0 e0       	ldi	r31, 0x00	; 0
 6ea:	10 82       	st	Z, r1
 6ec:	0b c0       	rjmp	.+22     	; 0x704 <GPIO_voidSetPortDDR+0xac>
				}
				break;
			case GPIOD :
				if(copy_u8Mode ==OUTPUT )
 6ee:	8a 81       	ldd	r24, Y+2	; 0x02
 6f0:	81 30       	cpi	r24, 0x01	; 1
 6f2:	29 f4       	brne	.+10     	; 0x6fe <GPIO_voidSetPortDDR+0xa6>
				{
					DDRD = 0xFF;
 6f4:	e1 e3       	ldi	r30, 0x31	; 49
 6f6:	f0 e0       	ldi	r31, 0x00	; 0
 6f8:	8f ef       	ldi	r24, 0xFF	; 255
 6fa:	80 83       	st	Z, r24
 6fc:	03 c0       	rjmp	.+6      	; 0x704 <GPIO_voidSetPortDDR+0xac>
				}
				else {
					DDRD = 0x00;
 6fe:	e1 e3       	ldi	r30, 0x31	; 49
 700:	f0 e0       	ldi	r31, 0x00	; 0
 702:	10 82       	st	Z, r1
				}
				break;	
			default:
				break;
		}
	}
 704:	0f 90       	pop	r0
 706:	0f 90       	pop	r0
 708:	0f 90       	pop	r0
 70a:	0f 90       	pop	r0
 70c:	cf 91       	pop	r28
 70e:	df 91       	pop	r29
 710:	08 95       	ret

00000712 <GPIO_voidWritePort>:
	void	GPIO_voidWritePort (u8 copy_u8Port , u8 copy_u8Value)
	{
 712:	df 93       	push	r29
 714:	cf 93       	push	r28
 716:	00 d0       	rcall	.+0      	; 0x718 <GPIO_voidWritePort+0x6>
 718:	00 d0       	rcall	.+0      	; 0x71a <GPIO_voidWritePort+0x8>
 71a:	cd b7       	in	r28, 0x3d	; 61
 71c:	de b7       	in	r29, 0x3e	; 62
 71e:	89 83       	std	Y+1, r24	; 0x01
 720:	6a 83       	std	Y+2, r22	; 0x02
			switch(copy_u8Port)
 722:	89 81       	ldd	r24, Y+1	; 0x01
 724:	28 2f       	mov	r18, r24
 726:	30 e0       	ldi	r19, 0x00	; 0
 728:	3c 83       	std	Y+4, r19	; 0x04
 72a:	2b 83       	std	Y+3, r18	; 0x03
 72c:	8b 81       	ldd	r24, Y+3	; 0x03
 72e:	9c 81       	ldd	r25, Y+4	; 0x04
 730:	81 30       	cpi	r24, 0x01	; 1
 732:	91 05       	cpc	r25, r1
 734:	d1 f0       	breq	.+52     	; 0x76a <GPIO_voidWritePort+0x58>
 736:	2b 81       	ldd	r18, Y+3	; 0x03
 738:	3c 81       	ldd	r19, Y+4	; 0x04
 73a:	22 30       	cpi	r18, 0x02	; 2
 73c:	31 05       	cpc	r19, r1
 73e:	2c f4       	brge	.+10     	; 0x74a <GPIO_voidWritePort+0x38>
 740:	8b 81       	ldd	r24, Y+3	; 0x03
 742:	9c 81       	ldd	r25, Y+4	; 0x04
 744:	00 97       	sbiw	r24, 0x00	; 0
 746:	61 f0       	breq	.+24     	; 0x760 <GPIO_voidWritePort+0x4e>
 748:	1e c0       	rjmp	.+60     	; 0x786 <GPIO_voidWritePort+0x74>
 74a:	2b 81       	ldd	r18, Y+3	; 0x03
 74c:	3c 81       	ldd	r19, Y+4	; 0x04
 74e:	22 30       	cpi	r18, 0x02	; 2
 750:	31 05       	cpc	r19, r1
 752:	81 f0       	breq	.+32     	; 0x774 <GPIO_voidWritePort+0x62>
 754:	8b 81       	ldd	r24, Y+3	; 0x03
 756:	9c 81       	ldd	r25, Y+4	; 0x04
 758:	83 30       	cpi	r24, 0x03	; 3
 75a:	91 05       	cpc	r25, r1
 75c:	81 f0       	breq	.+32     	; 0x77e <GPIO_voidWritePort+0x6c>
 75e:	13 c0       	rjmp	.+38     	; 0x786 <GPIO_voidWritePort+0x74>
		{
			case GPIOA :
				PORTA = copy_u8Value ;
 760:	eb e3       	ldi	r30, 0x3B	; 59
 762:	f0 e0       	ldi	r31, 0x00	; 0
 764:	8a 81       	ldd	r24, Y+2	; 0x02
 766:	80 83       	st	Z, r24
 768:	0e c0       	rjmp	.+28     	; 0x786 <GPIO_voidWritePort+0x74>
				break;
			case GPIOB :
				PORTB = copy_u8Value;
 76a:	e8 e3       	ldi	r30, 0x38	; 56
 76c:	f0 e0       	ldi	r31, 0x00	; 0
 76e:	8a 81       	ldd	r24, Y+2	; 0x02
 770:	80 83       	st	Z, r24
 772:	09 c0       	rjmp	.+18     	; 0x786 <GPIO_voidWritePort+0x74>
				break;
			case GPIOC :
				PORTC = copy_u8Value;
 774:	e5 e3       	ldi	r30, 0x35	; 53
 776:	f0 e0       	ldi	r31, 0x00	; 0
 778:	8a 81       	ldd	r24, Y+2	; 0x02
 77a:	80 83       	st	Z, r24
 77c:	04 c0       	rjmp	.+8      	; 0x786 <GPIO_voidWritePort+0x74>
				break;
			case GPIOD :
				PORTD = copy_u8Value;
 77e:	e2 e3       	ldi	r30, 0x32	; 50
 780:	f0 e0       	ldi	r31, 0x00	; 0
 782:	8a 81       	ldd	r24, Y+2	; 0x02
 784:	80 83       	st	Z, r24
				break;
		}
		
			
			
		}
 786:	0f 90       	pop	r0
 788:	0f 90       	pop	r0
 78a:	0f 90       	pop	r0
 78c:	0f 90       	pop	r0
 78e:	cf 91       	pop	r28
 790:	df 91       	pop	r29
 792:	08 95       	ret

00000794 <GPIO_voidSetLowNippleDDR>:
	void GPIO_voidSetLowNippleDDR(u8 copy_u8Port , u8 copy_u8Mode)
	{
 794:	df 93       	push	r29
 796:	cf 93       	push	r28
 798:	00 d0       	rcall	.+0      	; 0x79a <GPIO_voidSetLowNippleDDR+0x6>
 79a:	0f 92       	push	r0
 79c:	cd b7       	in	r28, 0x3d	; 61
 79e:	de b7       	in	r29, 0x3e	; 62
 7a0:	8a 83       	std	Y+2, r24	; 0x02
 7a2:	6b 83       	std	Y+3, r22	; 0x03
		u8 i ;
		for (i= 0 ; i<4 ; i++){
 7a4:	19 82       	std	Y+1, r1	; 0x01
 7a6:	08 c0       	rjmp	.+16     	; 0x7b8 <GPIO_voidSetLowNippleDDR+0x24>
			GPIO_voidSetPinDDR(copy_u8Port , i ,copy_u8Mode );
 7a8:	8a 81       	ldd	r24, Y+2	; 0x02
 7aa:	69 81       	ldd	r22, Y+1	; 0x01
 7ac:	4b 81       	ldd	r20, Y+3	; 0x03
 7ae:	0e 94 3e 00 	call	0x7c	; 0x7c <GPIO_voidSetPinDDR>
			
		}
	void GPIO_voidSetLowNippleDDR(u8 copy_u8Port , u8 copy_u8Mode)
	{
		u8 i ;
		for (i= 0 ; i<4 ; i++){
 7b2:	89 81       	ldd	r24, Y+1	; 0x01
 7b4:	8f 5f       	subi	r24, 0xFF	; 255
 7b6:	89 83       	std	Y+1, r24	; 0x01
 7b8:	89 81       	ldd	r24, Y+1	; 0x01
 7ba:	84 30       	cpi	r24, 0x04	; 4
 7bc:	a8 f3       	brcs	.-22     	; 0x7a8 <GPIO_voidSetLowNippleDDR+0x14>
			GPIO_voidSetPinDDR(copy_u8Port , i ,copy_u8Mode );
		}
	}
 7be:	0f 90       	pop	r0
 7c0:	0f 90       	pop	r0
 7c2:	0f 90       	pop	r0
 7c4:	cf 91       	pop	r28
 7c6:	df 91       	pop	r29
 7c8:	08 95       	ret

000007ca <GPIO_voidSetHighNippleDDR>:
	void GPIO_voidSetHighNippleDDR(u8 copy_u8Port , u8 copy_u8Mode)
	{
 7ca:	df 93       	push	r29
 7cc:	cf 93       	push	r28
 7ce:	00 d0       	rcall	.+0      	; 0x7d0 <GPIO_voidSetHighNippleDDR+0x6>
 7d0:	0f 92       	push	r0
 7d2:	cd b7       	in	r28, 0x3d	; 61
 7d4:	de b7       	in	r29, 0x3e	; 62
 7d6:	8a 83       	std	Y+2, r24	; 0x02
 7d8:	6b 83       	std	Y+3, r22	; 0x03
		u8 i ;
		for (i= 4 ; i<8 ; i++){
 7da:	84 e0       	ldi	r24, 0x04	; 4
 7dc:	89 83       	std	Y+1, r24	; 0x01
 7de:	08 c0       	rjmp	.+16     	; 0x7f0 <GPIO_voidSetHighNippleDDR+0x26>
			GPIO_voidSetPinDDR(copy_u8Port , i ,copy_u8Mode );
 7e0:	8a 81       	ldd	r24, Y+2	; 0x02
 7e2:	69 81       	ldd	r22, Y+1	; 0x01
 7e4:	4b 81       	ldd	r20, Y+3	; 0x03
 7e6:	0e 94 3e 00 	call	0x7c	; 0x7c <GPIO_voidSetPinDDR>
		}
	}
	void GPIO_voidSetHighNippleDDR(u8 copy_u8Port , u8 copy_u8Mode)
	{
		u8 i ;
		for (i= 4 ; i<8 ; i++){
 7ea:	89 81       	ldd	r24, Y+1	; 0x01
 7ec:	8f 5f       	subi	r24, 0xFF	; 255
 7ee:	89 83       	std	Y+1, r24	; 0x01
 7f0:	89 81       	ldd	r24, Y+1	; 0x01
 7f2:	88 30       	cpi	r24, 0x08	; 8
 7f4:	a8 f3       	brcs	.-22     	; 0x7e0 <GPIO_voidSetHighNippleDDR+0x16>
			GPIO_voidSetPinDDR(copy_u8Port , i ,copy_u8Mode );
		}
	}
 7f6:	0f 90       	pop	r0
 7f8:	0f 90       	pop	r0
 7fa:	0f 90       	pop	r0
 7fc:	cf 91       	pop	r28
 7fe:	df 91       	pop	r29
 800:	08 95       	ret

00000802 <GPIO_voidWriteLowNipple>:
	void GPIO_voidWriteLowNipple (u8 copy_u8Port , u8 copy_u8Value )
	{
 802:	df 93       	push	r29
 804:	cf 93       	push	r28
 806:	00 d0       	rcall	.+0      	; 0x808 <GPIO_voidWriteLowNipple+0x6>
 808:	00 d0       	rcall	.+0      	; 0x80a <GPIO_voidWriteLowNipple+0x8>
 80a:	cd b7       	in	r28, 0x3d	; 61
 80c:	de b7       	in	r29, 0x3e	; 62
 80e:	89 83       	std	Y+1, r24	; 0x01
 810:	6a 83       	std	Y+2, r22	; 0x02
		copy_u8Value &= 0x0F;
 812:	8a 81       	ldd	r24, Y+2	; 0x02
 814:	8f 70       	andi	r24, 0x0F	; 15
 816:	8a 83       	std	Y+2, r24	; 0x02
		switch (copy_u8Port) {
 818:	89 81       	ldd	r24, Y+1	; 0x01
 81a:	28 2f       	mov	r18, r24
 81c:	30 e0       	ldi	r19, 0x00	; 0
 81e:	3c 83       	std	Y+4, r19	; 0x04
 820:	2b 83       	std	Y+3, r18	; 0x03
 822:	8b 81       	ldd	r24, Y+3	; 0x03
 824:	9c 81       	ldd	r25, Y+4	; 0x04
 826:	81 30       	cpi	r24, 0x01	; 1
 828:	91 05       	cpc	r25, r1
 82a:	29 f1       	breq	.+74     	; 0x876 <__stack+0x17>
 82c:	2b 81       	ldd	r18, Y+3	; 0x03
 82e:	3c 81       	ldd	r19, Y+4	; 0x04
 830:	22 30       	cpi	r18, 0x02	; 2
 832:	31 05       	cpc	r19, r1
 834:	2c f4       	brge	.+10     	; 0x840 <GPIO_voidWriteLowNipple+0x3e>
 836:	8b 81       	ldd	r24, Y+3	; 0x03
 838:	9c 81       	ldd	r25, Y+4	; 0x04
 83a:	00 97       	sbiw	r24, 0x00	; 0
 83c:	61 f0       	breq	.+24     	; 0x856 <GPIO_voidWriteLowNipple+0x54>
 83e:	4a c0       	rjmp	.+148    	; 0x8d4 <__stack+0x75>
 840:	2b 81       	ldd	r18, Y+3	; 0x03
 842:	3c 81       	ldd	r19, Y+4	; 0x04
 844:	22 30       	cpi	r18, 0x02	; 2
 846:	31 05       	cpc	r19, r1
 848:	31 f1       	breq	.+76     	; 0x896 <__stack+0x37>
 84a:	8b 81       	ldd	r24, Y+3	; 0x03
 84c:	9c 81       	ldd	r25, Y+4	; 0x04
 84e:	83 30       	cpi	r24, 0x03	; 3
 850:	91 05       	cpc	r25, r1
 852:	89 f1       	breq	.+98     	; 0x8b6 <__stack+0x57>
 854:	3f c0       	rjmp	.+126    	; 0x8d4 <__stack+0x75>
			case GPIOA :
				PORTA &= 0xF0 ; 
 856:	ab e3       	ldi	r26, 0x3B	; 59
 858:	b0 e0       	ldi	r27, 0x00	; 0
 85a:	eb e3       	ldi	r30, 0x3B	; 59
 85c:	f0 e0       	ldi	r31, 0x00	; 0
 85e:	80 81       	ld	r24, Z
 860:	80 7f       	andi	r24, 0xF0	; 240
 862:	8c 93       	st	X, r24
				PORTA |= copy_u8Value ;
 864:	ab e3       	ldi	r26, 0x3B	; 59
 866:	b0 e0       	ldi	r27, 0x00	; 0
 868:	eb e3       	ldi	r30, 0x3B	; 59
 86a:	f0 e0       	ldi	r31, 0x00	; 0
 86c:	90 81       	ld	r25, Z
 86e:	8a 81       	ldd	r24, Y+2	; 0x02
 870:	89 2b       	or	r24, r25
 872:	8c 93       	st	X, r24
 874:	2f c0       	rjmp	.+94     	; 0x8d4 <__stack+0x75>
				break;
			case GPIOB :
				PORTB &= 0xF0 ; 
 876:	a8 e3       	ldi	r26, 0x38	; 56
 878:	b0 e0       	ldi	r27, 0x00	; 0
 87a:	e8 e3       	ldi	r30, 0x38	; 56
 87c:	f0 e0       	ldi	r31, 0x00	; 0
 87e:	80 81       	ld	r24, Z
 880:	80 7f       	andi	r24, 0xF0	; 240
 882:	8c 93       	st	X, r24
				PORTB |= copy_u8Value ;
 884:	a8 e3       	ldi	r26, 0x38	; 56
 886:	b0 e0       	ldi	r27, 0x00	; 0
 888:	e8 e3       	ldi	r30, 0x38	; 56
 88a:	f0 e0       	ldi	r31, 0x00	; 0
 88c:	90 81       	ld	r25, Z
 88e:	8a 81       	ldd	r24, Y+2	; 0x02
 890:	89 2b       	or	r24, r25
 892:	8c 93       	st	X, r24
 894:	1f c0       	rjmp	.+62     	; 0x8d4 <__stack+0x75>
				break;
			case GPIOC :
				PORTC &= 0xF0 ; 
 896:	a5 e3       	ldi	r26, 0x35	; 53
 898:	b0 e0       	ldi	r27, 0x00	; 0
 89a:	e5 e3       	ldi	r30, 0x35	; 53
 89c:	f0 e0       	ldi	r31, 0x00	; 0
 89e:	80 81       	ld	r24, Z
 8a0:	80 7f       	andi	r24, 0xF0	; 240
 8a2:	8c 93       	st	X, r24
				PORTC |= copy_u8Value ;
 8a4:	a5 e3       	ldi	r26, 0x35	; 53
 8a6:	b0 e0       	ldi	r27, 0x00	; 0
 8a8:	e5 e3       	ldi	r30, 0x35	; 53
 8aa:	f0 e0       	ldi	r31, 0x00	; 0
 8ac:	90 81       	ld	r25, Z
 8ae:	8a 81       	ldd	r24, Y+2	; 0x02
 8b0:	89 2b       	or	r24, r25
 8b2:	8c 93       	st	X, r24
 8b4:	0f c0       	rjmp	.+30     	; 0x8d4 <__stack+0x75>
				break;
			case GPIOD :
				PORTD &= 0xF0 ; 
 8b6:	a2 e3       	ldi	r26, 0x32	; 50
 8b8:	b0 e0       	ldi	r27, 0x00	; 0
 8ba:	e2 e3       	ldi	r30, 0x32	; 50
 8bc:	f0 e0       	ldi	r31, 0x00	; 0
 8be:	80 81       	ld	r24, Z
 8c0:	80 7f       	andi	r24, 0xF0	; 240
 8c2:	8c 93       	st	X, r24
				PORTD |= copy_u8Value ;
 8c4:	a2 e3       	ldi	r26, 0x32	; 50
 8c6:	b0 e0       	ldi	r27, 0x00	; 0
 8c8:	e2 e3       	ldi	r30, 0x32	; 50
 8ca:	f0 e0       	ldi	r31, 0x00	; 0
 8cc:	90 81       	ld	r25, Z
 8ce:	8a 81       	ldd	r24, Y+2	; 0x02
 8d0:	89 2b       	or	r24, r25
 8d2:	8c 93       	st	X, r24
				break;	
		}
	}
 8d4:	0f 90       	pop	r0
 8d6:	0f 90       	pop	r0
 8d8:	0f 90       	pop	r0
 8da:	0f 90       	pop	r0
 8dc:	cf 91       	pop	r28
 8de:	df 91       	pop	r29
 8e0:	08 95       	ret

000008e2 <GPIO_voidWriteHighNipple>:
	void GPIO_voidWriteHighNipple (u8 copy_u8Port , u8 copy_u8Value )
	{
 8e2:	df 93       	push	r29
 8e4:	cf 93       	push	r28
 8e6:	00 d0       	rcall	.+0      	; 0x8e8 <GPIO_voidWriteHighNipple+0x6>
 8e8:	00 d0       	rcall	.+0      	; 0x8ea <GPIO_voidWriteHighNipple+0x8>
 8ea:	cd b7       	in	r28, 0x3d	; 61
 8ec:	de b7       	in	r29, 0x3e	; 62
 8ee:	89 83       	std	Y+1, r24	; 0x01
 8f0:	6a 83       	std	Y+2, r22	; 0x02
		copy_u8Value &= 0xF0;
 8f2:	8a 81       	ldd	r24, Y+2	; 0x02
 8f4:	80 7f       	andi	r24, 0xF0	; 240
 8f6:	8a 83       	std	Y+2, r24	; 0x02
		switch (copy_u8Port) {
 8f8:	89 81       	ldd	r24, Y+1	; 0x01
 8fa:	28 2f       	mov	r18, r24
 8fc:	30 e0       	ldi	r19, 0x00	; 0
 8fe:	3c 83       	std	Y+4, r19	; 0x04
 900:	2b 83       	std	Y+3, r18	; 0x03
 902:	8b 81       	ldd	r24, Y+3	; 0x03
 904:	9c 81       	ldd	r25, Y+4	; 0x04
 906:	81 30       	cpi	r24, 0x01	; 1
 908:	91 05       	cpc	r25, r1
 90a:	29 f1       	breq	.+74     	; 0x956 <GPIO_voidWriteHighNipple+0x74>
 90c:	2b 81       	ldd	r18, Y+3	; 0x03
 90e:	3c 81       	ldd	r19, Y+4	; 0x04
 910:	22 30       	cpi	r18, 0x02	; 2
 912:	31 05       	cpc	r19, r1
 914:	2c f4       	brge	.+10     	; 0x920 <GPIO_voidWriteHighNipple+0x3e>
 916:	8b 81       	ldd	r24, Y+3	; 0x03
 918:	9c 81       	ldd	r25, Y+4	; 0x04
 91a:	00 97       	sbiw	r24, 0x00	; 0
 91c:	61 f0       	breq	.+24     	; 0x936 <GPIO_voidWriteHighNipple+0x54>
 91e:	4a c0       	rjmp	.+148    	; 0x9b4 <GPIO_voidWriteHighNipple+0xd2>
 920:	2b 81       	ldd	r18, Y+3	; 0x03
 922:	3c 81       	ldd	r19, Y+4	; 0x04
 924:	22 30       	cpi	r18, 0x02	; 2
 926:	31 05       	cpc	r19, r1
 928:	31 f1       	breq	.+76     	; 0x976 <GPIO_voidWriteHighNipple+0x94>
 92a:	8b 81       	ldd	r24, Y+3	; 0x03
 92c:	9c 81       	ldd	r25, Y+4	; 0x04
 92e:	83 30       	cpi	r24, 0x03	; 3
 930:	91 05       	cpc	r25, r1
 932:	89 f1       	breq	.+98     	; 0x996 <GPIO_voidWriteHighNipple+0xb4>
 934:	3f c0       	rjmp	.+126    	; 0x9b4 <GPIO_voidWriteHighNipple+0xd2>
			case GPIOA :
				PORTA &= 0x0F ; 
 936:	ab e3       	ldi	r26, 0x3B	; 59
 938:	b0 e0       	ldi	r27, 0x00	; 0
 93a:	eb e3       	ldi	r30, 0x3B	; 59
 93c:	f0 e0       	ldi	r31, 0x00	; 0
 93e:	80 81       	ld	r24, Z
 940:	8f 70       	andi	r24, 0x0F	; 15
 942:	8c 93       	st	X, r24
				PORTA |= copy_u8Value ;
 944:	ab e3       	ldi	r26, 0x3B	; 59
 946:	b0 e0       	ldi	r27, 0x00	; 0
 948:	eb e3       	ldi	r30, 0x3B	; 59
 94a:	f0 e0       	ldi	r31, 0x00	; 0
 94c:	90 81       	ld	r25, Z
 94e:	8a 81       	ldd	r24, Y+2	; 0x02
 950:	89 2b       	or	r24, r25
 952:	8c 93       	st	X, r24
 954:	2f c0       	rjmp	.+94     	; 0x9b4 <GPIO_voidWriteHighNipple+0xd2>
				break;
			case GPIOB :
				PORTB &= 0x0F ; 
 956:	a8 e3       	ldi	r26, 0x38	; 56
 958:	b0 e0       	ldi	r27, 0x00	; 0
 95a:	e8 e3       	ldi	r30, 0x38	; 56
 95c:	f0 e0       	ldi	r31, 0x00	; 0
 95e:	80 81       	ld	r24, Z
 960:	8f 70       	andi	r24, 0x0F	; 15
 962:	8c 93       	st	X, r24
				PORTB |= copy_u8Value ;
 964:	a8 e3       	ldi	r26, 0x38	; 56
 966:	b0 e0       	ldi	r27, 0x00	; 0
 968:	e8 e3       	ldi	r30, 0x38	; 56
 96a:	f0 e0       	ldi	r31, 0x00	; 0
 96c:	90 81       	ld	r25, Z
 96e:	8a 81       	ldd	r24, Y+2	; 0x02
 970:	89 2b       	or	r24, r25
 972:	8c 93       	st	X, r24
 974:	1f c0       	rjmp	.+62     	; 0x9b4 <GPIO_voidWriteHighNipple+0xd2>
				break;
			case GPIOC :
				PORTC &= 0x0F ; 
 976:	a5 e3       	ldi	r26, 0x35	; 53
 978:	b0 e0       	ldi	r27, 0x00	; 0
 97a:	e5 e3       	ldi	r30, 0x35	; 53
 97c:	f0 e0       	ldi	r31, 0x00	; 0
 97e:	80 81       	ld	r24, Z
 980:	8f 70       	andi	r24, 0x0F	; 15
 982:	8c 93       	st	X, r24
				PORTC |= copy_u8Value ;
 984:	a5 e3       	ldi	r26, 0x35	; 53
 986:	b0 e0       	ldi	r27, 0x00	; 0
 988:	e5 e3       	ldi	r30, 0x35	; 53
 98a:	f0 e0       	ldi	r31, 0x00	; 0
 98c:	90 81       	ld	r25, Z
 98e:	8a 81       	ldd	r24, Y+2	; 0x02
 990:	89 2b       	or	r24, r25
 992:	8c 93       	st	X, r24
 994:	0f c0       	rjmp	.+30     	; 0x9b4 <GPIO_voidWriteHighNipple+0xd2>
				break;
			case GPIOD :
				PORTD &= 0x0F ; 
 996:	a2 e3       	ldi	r26, 0x32	; 50
 998:	b0 e0       	ldi	r27, 0x00	; 0
 99a:	e2 e3       	ldi	r30, 0x32	; 50
 99c:	f0 e0       	ldi	r31, 0x00	; 0
 99e:	80 81       	ld	r24, Z
 9a0:	8f 70       	andi	r24, 0x0F	; 15
 9a2:	8c 93       	st	X, r24
				PORTD |= copy_u8Value ;
 9a4:	a2 e3       	ldi	r26, 0x32	; 50
 9a6:	b0 e0       	ldi	r27, 0x00	; 0
 9a8:	e2 e3       	ldi	r30, 0x32	; 50
 9aa:	f0 e0       	ldi	r31, 0x00	; 0
 9ac:	90 81       	ld	r25, Z
 9ae:	8a 81       	ldd	r24, Y+2	; 0x02
 9b0:	89 2b       	or	r24, r25
 9b2:	8c 93       	st	X, r24
				break;	
		}
	}
 9b4:	0f 90       	pop	r0
 9b6:	0f 90       	pop	r0
 9b8:	0f 90       	pop	r0
 9ba:	0f 90       	pop	r0
 9bc:	cf 91       	pop	r28
 9be:	df 91       	pop	r29
 9c0:	08 95       	ret

000009c2 <USART_voidInit>:
void (*CB_TX)(void);
void (*CB_RX)(void);
void (*CB_UDR)(void);

void USART_voidInit(u32 copy_u8BaudRate)
{
 9c2:	df 93       	push	r29
 9c4:	cf 93       	push	r28
 9c6:	00 d0       	rcall	.+0      	; 0x9c8 <USART_voidInit+0x6>
 9c8:	00 d0       	rcall	.+0      	; 0x9ca <USART_voidInit+0x8>
 9ca:	00 d0       	rcall	.+0      	; 0x9cc <USART_voidInit+0xa>
 9cc:	cd b7       	in	r28, 0x3d	; 61
 9ce:	de b7       	in	r29, 0x3e	; 62
 9d0:	6b 83       	std	Y+3, r22	; 0x03
 9d2:	7c 83       	std	Y+4, r23	; 0x04
 9d4:	8d 83       	std	Y+5, r24	; 0x05
 9d6:	9e 83       	std	Y+6, r25	; 0x06
	u16 Local_UBRR ;
	// Adjust Mode
	CLEAR_BIT (USCRC , URSEL);
 9d8:	a0 e4       	ldi	r26, 0x40	; 64
 9da:	b0 e0       	ldi	r27, 0x00	; 0
 9dc:	e0 e4       	ldi	r30, 0x40	; 64
 9de:	f0 e0       	ldi	r31, 0x00	; 0
 9e0:	80 81       	ld	r24, Z
 9e2:	8f 77       	andi	r24, 0x7F	; 127
 9e4:	8c 93       	st	X, r24
	#if USART_MODE == 0
	//SET_BIT(USCRC,URSEL);
	CLEAR_BIT (USCRC , URSEL);
 9e6:	a0 e4       	ldi	r26, 0x40	; 64
 9e8:	b0 e0       	ldi	r27, 0x00	; 0
 9ea:	e0 e4       	ldi	r30, 0x40	; 64
 9ec:	f0 e0       	ldi	r31, 0x00	; 0
 9ee:	80 81       	ld	r24, Z
 9f0:	8f 77       	andi	r24, 0x7F	; 127
 9f2:	8c 93       	st	X, r24
	Local_UBRR = (8000000/(16*copy_u8BaudRate))-1 ;
 9f4:	8b 81       	ldd	r24, Y+3	; 0x03
 9f6:	9c 81       	ldd	r25, Y+4	; 0x04
 9f8:	ad 81       	ldd	r26, Y+5	; 0x05
 9fa:	be 81       	ldd	r27, Y+6	; 0x06
 9fc:	88 0f       	add	r24, r24
 9fe:	99 1f       	adc	r25, r25
 a00:	aa 1f       	adc	r26, r26
 a02:	bb 1f       	adc	r27, r27
 a04:	88 0f       	add	r24, r24
 a06:	99 1f       	adc	r25, r25
 a08:	aa 1f       	adc	r26, r26
 a0a:	bb 1f       	adc	r27, r27
 a0c:	88 0f       	add	r24, r24
 a0e:	99 1f       	adc	r25, r25
 a10:	aa 1f       	adc	r26, r26
 a12:	bb 1f       	adc	r27, r27
 a14:	88 0f       	add	r24, r24
 a16:	99 1f       	adc	r25, r25
 a18:	aa 1f       	adc	r26, r26
 a1a:	bb 1f       	adc	r27, r27
 a1c:	9c 01       	movw	r18, r24
 a1e:	ad 01       	movw	r20, r26
 a20:	80 e0       	ldi	r24, 0x00	; 0
 a22:	92 e1       	ldi	r25, 0x12	; 18
 a24:	aa e7       	ldi	r26, 0x7A	; 122
 a26:	b0 e0       	ldi	r27, 0x00	; 0
 a28:	bc 01       	movw	r22, r24
 a2a:	cd 01       	movw	r24, r26
 a2c:	0e 94 b5 06 	call	0xd6a	; 0xd6a <__udivmodsi4>
 a30:	da 01       	movw	r26, r20
 a32:	c9 01       	movw	r24, r18
 a34:	01 97       	sbiw	r24, 0x01	; 1
 a36:	9a 83       	std	Y+2, r25	; 0x02
 a38:	89 83       	std	Y+1, r24	; 0x01
	#elif USART_WORDSIZE == 2
		CLEAR_BIT(USCRC,UCSZ0);
		SET_BIT(USCRC,UCSZ1);
		CLEAR_BIT(USCRB,UCSZ2);
	#elif USART_WORDSIZE == 3
		SET_BIT(USCRC,UCSZ0);
 a3a:	a0 e4       	ldi	r26, 0x40	; 64
 a3c:	b0 e0       	ldi	r27, 0x00	; 0
 a3e:	e0 e4       	ldi	r30, 0x40	; 64
 a40:	f0 e0       	ldi	r31, 0x00	; 0
 a42:	80 81       	ld	r24, Z
 a44:	82 60       	ori	r24, 0x02	; 2
 a46:	8c 93       	st	X, r24
		SET_BIT(USCRC,UCSZ1);
 a48:	a0 e4       	ldi	r26, 0x40	; 64
 a4a:	b0 e0       	ldi	r27, 0x00	; 0
 a4c:	e0 e4       	ldi	r30, 0x40	; 64
 a4e:	f0 e0       	ldi	r31, 0x00	; 0
 a50:	80 81       	ld	r24, Z
 a52:	84 60       	ori	r24, 0x04	; 4
 a54:	8c 93       	st	X, r24
		CLEAR_BIT(USCRB,UCSZ2);
 a56:	aa e2       	ldi	r26, 0x2A	; 42
 a58:	b0 e0       	ldi	r27, 0x00	; 0
 a5a:	ea e2       	ldi	r30, 0x2A	; 42
 a5c:	f0 e0       	ldi	r31, 0x00	; 0
 a5e:	80 81       	ld	r24, Z
 a60:	8b 7f       	andi	r24, 0xFB	; 251
 a62:	8c 93       	st	X, r24
		SET_BIT(USCRC,UCSZ1);
		SET_BIT(USCRB,UCSZ2);
	#endif
	/* Adjust Parity */
	#if   USART_PARITY  == 0
		CLEAR_BIT(USCRC,UPM0);
 a64:	a0 e4       	ldi	r26, 0x40	; 64
 a66:	b0 e0       	ldi	r27, 0x00	; 0
 a68:	e0 e4       	ldi	r30, 0x40	; 64
 a6a:	f0 e0       	ldi	r31, 0x00	; 0
 a6c:	80 81       	ld	r24, Z
 a6e:	8f 7e       	andi	r24, 0xEF	; 239
 a70:	8c 93       	st	X, r24
		CLEAR_BIT(USCRC,UPM1);
 a72:	a0 e4       	ldi	r26, 0x40	; 64
 a74:	b0 e0       	ldi	r27, 0x00	; 0
 a76:	e0 e4       	ldi	r30, 0x40	; 64
 a78:	f0 e0       	ldi	r31, 0x00	; 0
 a7a:	80 81       	ld	r24, Z
 a7c:	8f 7d       	andi	r24, 0xDF	; 223
 a7e:	8c 93       	st	X, r24
	#endif
	/* Adjust Stop bit */
	#if  USART_STOPBIT == 0
		CLEAR_BIT(USCRC,USBS);
	#else 
		SET_BIT(USCRC,USBS);
 a80:	a0 e4       	ldi	r26, 0x40	; 64
 a82:	b0 e0       	ldi	r27, 0x00	; 0
 a84:	e0 e4       	ldi	r30, 0x40	; 64
 a86:	f0 e0       	ldi	r31, 0x00	; 0
 a88:	80 81       	ld	r24, Z
 a8a:	88 60       	ori	r24, 0x08	; 8
 a8c:	8c 93       	st	X, r24
	#endif
	
	/* Enable TX and RX */
	SET_BIT(USCRB,TXEN);
 a8e:	aa e2       	ldi	r26, 0x2A	; 42
 a90:	b0 e0       	ldi	r27, 0x00	; 0
 a92:	ea e2       	ldi	r30, 0x2A	; 42
 a94:	f0 e0       	ldi	r31, 0x00	; 0
 a96:	80 81       	ld	r24, Z
 a98:	88 60       	ori	r24, 0x08	; 8
 a9a:	8c 93       	st	X, r24
	SET_BIT(USCRB,RXEN);
 a9c:	aa e2       	ldi	r26, 0x2A	; 42
 a9e:	b0 e0       	ldi	r27, 0x00	; 0
 aa0:	ea e2       	ldi	r30, 0x2A	; 42
 aa2:	f0 e0       	ldi	r31, 0x00	; 0
 aa4:	80 81       	ld	r24, Z
 aa6:	80 61       	ori	r24, 0x10	; 16
 aa8:	8c 93       	st	X, r24
	
	/* Adjust UBRR */
	SET_BIT(USCRC,URSEL);
 aaa:	a0 e4       	ldi	r26, 0x40	; 64
 aac:	b0 e0       	ldi	r27, 0x00	; 0
 aae:	e0 e4       	ldi	r30, 0x40	; 64
 ab0:	f0 e0       	ldi	r31, 0x00	; 0
 ab2:	80 81       	ld	r24, Z
 ab4:	80 68       	ori	r24, 0x80	; 128
 ab6:	8c 93       	st	X, r24
	UBRRH = (u8)(Local_UBRR >> 8);
 ab8:	e0 e4       	ldi	r30, 0x40	; 64
 aba:	f0 e0       	ldi	r31, 0x00	; 0
 abc:	89 81       	ldd	r24, Y+1	; 0x01
 abe:	9a 81       	ldd	r25, Y+2	; 0x02
 ac0:	89 2f       	mov	r24, r25
 ac2:	99 27       	eor	r25, r25
 ac4:	80 83       	st	Z, r24
	UBRRL = (u8)(Local_UBRR);
 ac6:	e9 e2       	ldi	r30, 0x29	; 41
 ac8:	f0 e0       	ldi	r31, 0x00	; 0
 aca:	89 81       	ldd	r24, Y+1	; 0x01
 acc:	80 83       	st	Z, r24
}
 ace:	26 96       	adiw	r28, 0x06	; 6
 ad0:	0f b6       	in	r0, 0x3f	; 63
 ad2:	f8 94       	cli
 ad4:	de bf       	out	0x3e, r29	; 62
 ad6:	0f be       	out	0x3f, r0	; 63
 ad8:	cd bf       	out	0x3d, r28	; 61
 ada:	cf 91       	pop	r28
 adc:	df 91       	pop	r29
 ade:	08 95       	ret

00000ae0 <USART_voidSendByte>:

void USART_voidSendByte(u8 copy_u8DataSend)
{
 ae0:	df 93       	push	r29
 ae2:	cf 93       	push	r28
 ae4:	0f 92       	push	r0
 ae6:	cd b7       	in	r28, 0x3d	; 61
 ae8:	de b7       	in	r29, 0x3e	; 62
 aea:	89 83       	std	Y+1, r24	; 0x01
	while(GET_BIT(USCRA,UDRE)==0);
 aec:	eb e2       	ldi	r30, 0x2B	; 43
 aee:	f0 e0       	ldi	r31, 0x00	; 0
 af0:	80 81       	ld	r24, Z
 af2:	88 2f       	mov	r24, r24
 af4:	90 e0       	ldi	r25, 0x00	; 0
 af6:	80 72       	andi	r24, 0x20	; 32
 af8:	90 70       	andi	r25, 0x00	; 0
 afa:	95 95       	asr	r25
 afc:	87 95       	ror	r24
 afe:	95 95       	asr	r25
 b00:	87 95       	ror	r24
 b02:	95 95       	asr	r25
 b04:	87 95       	ror	r24
 b06:	95 95       	asr	r25
 b08:	87 95       	ror	r24
 b0a:	95 95       	asr	r25
 b0c:	87 95       	ror	r24
 b0e:	00 97       	sbiw	r24, 0x00	; 0
 b10:	69 f3       	breq	.-38     	; 0xaec <USART_voidSendByte+0xc>
	UDR = copy_u8DataSend ;
 b12:	ec e2       	ldi	r30, 0x2C	; 44
 b14:	f0 e0       	ldi	r31, 0x00	; 0
 b16:	89 81       	ldd	r24, Y+1	; 0x01
 b18:	80 83       	st	Z, r24
}
 b1a:	0f 90       	pop	r0
 b1c:	cf 91       	pop	r28
 b1e:	df 91       	pop	r29
 b20:	08 95       	ret

00000b22 <USART_u8RecieveByte>:

u8 USART_u8RecieveByte(void)
{
 b22:	df 93       	push	r29
 b24:	cf 93       	push	r28
 b26:	cd b7       	in	r28, 0x3d	; 61
 b28:	de b7       	in	r29, 0x3e	; 62
	while(GET_BIT(USCRA,RXC)==0);
 b2a:	eb e2       	ldi	r30, 0x2B	; 43
 b2c:	f0 e0       	ldi	r31, 0x00	; 0
 b2e:	80 81       	ld	r24, Z
 b30:	88 1f       	adc	r24, r24
 b32:	88 27       	eor	r24, r24
 b34:	88 1f       	adc	r24, r24
 b36:	88 2f       	mov	r24, r24
 b38:	90 e0       	ldi	r25, 0x00	; 0
 b3a:	90 70       	andi	r25, 0x00	; 0
 b3c:	00 97       	sbiw	r24, 0x00	; 0
 b3e:	a9 f3       	breq	.-22     	; 0xb2a <USART_u8RecieveByte+0x8>
	return UDR;
 b40:	ec e2       	ldi	r30, 0x2C	; 44
 b42:	f0 e0       	ldi	r31, 0x00	; 0
 b44:	80 81       	ld	r24, Z
}
 b46:	cf 91       	pop	r28
 b48:	df 91       	pop	r29
 b4a:	08 95       	ret

00000b4c <USART_voidEnableTXInterrupt>:

void USART_voidEnableTXInterrupt(void)
{
 b4c:	df 93       	push	r29
 b4e:	cf 93       	push	r28
 b50:	cd b7       	in	r28, 0x3d	; 61
 b52:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(USCRB,TXCIE);
 b54:	aa e2       	ldi	r26, 0x2A	; 42
 b56:	b0 e0       	ldi	r27, 0x00	; 0
 b58:	ea e2       	ldi	r30, 0x2A	; 42
 b5a:	f0 e0       	ldi	r31, 0x00	; 0
 b5c:	80 81       	ld	r24, Z
 b5e:	80 64       	ori	r24, 0x40	; 64
 b60:	8c 93       	st	X, r24
}
 b62:	cf 91       	pop	r28
 b64:	df 91       	pop	r29
 b66:	08 95       	ret

00000b68 <USART_voidEnableRXInterrupt>:

void USART_voidEnableRXInterrupt(void)
{
 b68:	df 93       	push	r29
 b6a:	cf 93       	push	r28
 b6c:	cd b7       	in	r28, 0x3d	; 61
 b6e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(USCRB,RXCIE);
 b70:	aa e2       	ldi	r26, 0x2A	; 42
 b72:	b0 e0       	ldi	r27, 0x00	; 0
 b74:	ea e2       	ldi	r30, 0x2A	; 42
 b76:	f0 e0       	ldi	r31, 0x00	; 0
 b78:	80 81       	ld	r24, Z
 b7a:	80 68       	ori	r24, 0x80	; 128
 b7c:	8c 93       	st	X, r24
}
 b7e:	cf 91       	pop	r28
 b80:	df 91       	pop	r29
 b82:	08 95       	ret

00000b84 <USART_voidEnableUDREInterrupt>:

void USART_voidEnableUDREInterrupt(void)
{
 b84:	df 93       	push	r29
 b86:	cf 93       	push	r28
 b88:	cd b7       	in	r28, 0x3d	; 61
 b8a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(USCRB,UDRIE);
 b8c:	aa e2       	ldi	r26, 0x2A	; 42
 b8e:	b0 e0       	ldi	r27, 0x00	; 0
 b90:	ea e2       	ldi	r30, 0x2A	; 42
 b92:	f0 e0       	ldi	r31, 0x00	; 0
 b94:	80 81       	ld	r24, Z
 b96:	80 62       	ori	r24, 0x20	; 32
 b98:	8c 93       	st	X, r24
}
 b9a:	cf 91       	pop	r28
 b9c:	df 91       	pop	r29
 b9e:	08 95       	ret

00000ba0 <USART_voidSetCBTX>:

void USART_voidSetCBTX(void(*copy_CB)(void))
{
 ba0:	df 93       	push	r29
 ba2:	cf 93       	push	r28
 ba4:	00 d0       	rcall	.+0      	; 0xba6 <USART_voidSetCBTX+0x6>
 ba6:	cd b7       	in	r28, 0x3d	; 61
 ba8:	de b7       	in	r29, 0x3e	; 62
 baa:	9a 83       	std	Y+2, r25	; 0x02
 bac:	89 83       	std	Y+1, r24	; 0x01
	CB_TX = copy_CB;
 bae:	89 81       	ldd	r24, Y+1	; 0x01
 bb0:	9a 81       	ldd	r25, Y+2	; 0x02
 bb2:	90 93 63 00 	sts	0x0063, r25
 bb6:	80 93 62 00 	sts	0x0062, r24
}
 bba:	0f 90       	pop	r0
 bbc:	0f 90       	pop	r0
 bbe:	cf 91       	pop	r28
 bc0:	df 91       	pop	r29
 bc2:	08 95       	ret

00000bc4 <USART_voidSetCBRX>:

void USART_voidSetCBRX(void(*copy_CB)(void))
{
 bc4:	df 93       	push	r29
 bc6:	cf 93       	push	r28
 bc8:	00 d0       	rcall	.+0      	; 0xbca <USART_voidSetCBRX+0x6>
 bca:	cd b7       	in	r28, 0x3d	; 61
 bcc:	de b7       	in	r29, 0x3e	; 62
 bce:	9a 83       	std	Y+2, r25	; 0x02
 bd0:	89 83       	std	Y+1, r24	; 0x01
	CB_RX = copy_CB;
 bd2:	89 81       	ldd	r24, Y+1	; 0x01
 bd4:	9a 81       	ldd	r25, Y+2	; 0x02
 bd6:	90 93 65 00 	sts	0x0065, r25
 bda:	80 93 64 00 	sts	0x0064, r24
}
 bde:	0f 90       	pop	r0
 be0:	0f 90       	pop	r0
 be2:	cf 91       	pop	r28
 be4:	df 91       	pop	r29
 be6:	08 95       	ret

00000be8 <USART_voidSetCBUDRE>:

void USART_voidSetCBUDRE(void(*copy_CB)(void))
{
 be8:	df 93       	push	r29
 bea:	cf 93       	push	r28
 bec:	00 d0       	rcall	.+0      	; 0xbee <USART_voidSetCBUDRE+0x6>
 bee:	cd b7       	in	r28, 0x3d	; 61
 bf0:	de b7       	in	r29, 0x3e	; 62
 bf2:	9a 83       	std	Y+2, r25	; 0x02
 bf4:	89 83       	std	Y+1, r24	; 0x01
	CB_UDR = copy_CB;
 bf6:	89 81       	ldd	r24, Y+1	; 0x01
 bf8:	9a 81       	ldd	r25, Y+2	; 0x02
 bfa:	90 93 61 00 	sts	0x0061, r25
 bfe:	80 93 60 00 	sts	0x0060, r24
}
 c02:	0f 90       	pop	r0
 c04:	0f 90       	pop	r0
 c06:	cf 91       	pop	r28
 c08:	df 91       	pop	r29
 c0a:	08 95       	ret

00000c0c <USART_voidSendString>:

void USART_voidSendString(u8 *copy_ptrString)
{
 c0c:	df 93       	push	r29
 c0e:	cf 93       	push	r28
 c10:	00 d0       	rcall	.+0      	; 0xc12 <USART_voidSendString+0x6>
 c12:	cd b7       	in	r28, 0x3d	; 61
 c14:	de b7       	in	r29, 0x3e	; 62
 c16:	9a 83       	std	Y+2, r25	; 0x02
 c18:	89 83       	std	Y+1, r24	; 0x01
 c1a:	0a c0       	rjmp	.+20     	; 0xc30 <USART_voidSendString+0x24>
	while((*copy_ptrString) != '\0')
	{
		USART_voidSendByte(*copy_ptrString);
 c1c:	e9 81       	ldd	r30, Y+1	; 0x01
 c1e:	fa 81       	ldd	r31, Y+2	; 0x02
 c20:	80 81       	ld	r24, Z
 c22:	0e 94 70 05 	call	0xae0	; 0xae0 <USART_voidSendByte>
		copy_ptrString++;
 c26:	89 81       	ldd	r24, Y+1	; 0x01
 c28:	9a 81       	ldd	r25, Y+2	; 0x02
 c2a:	01 96       	adiw	r24, 0x01	; 1
 c2c:	9a 83       	std	Y+2, r25	; 0x02
 c2e:	89 83       	std	Y+1, r24	; 0x01
	CB_UDR = copy_CB;
}

void USART_voidSendString(u8 *copy_ptrString)
{
	while((*copy_ptrString) != '\0')
 c30:	e9 81       	ldd	r30, Y+1	; 0x01
 c32:	fa 81       	ldd	r31, Y+2	; 0x02
 c34:	80 81       	ld	r24, Z
 c36:	88 23       	and	r24, r24
 c38:	89 f7       	brne	.-30     	; 0xc1c <USART_voidSendString+0x10>
	{
		USART_voidSendByte(*copy_ptrString);
		copy_ptrString++;
	}
}
 c3a:	0f 90       	pop	r0
 c3c:	0f 90       	pop	r0
 c3e:	cf 91       	pop	r28
 c40:	df 91       	pop	r29
 c42:	08 95       	ret

00000c44 <USART_voidSendu32Block>:

void USART_voidSendu32Block(u32 copy_u32DataSend)
{
 c44:	df 93       	push	r29
 c46:	cf 93       	push	r28
 c48:	00 d0       	rcall	.+0      	; 0xc4a <USART_voidSendu32Block+0x6>
 c4a:	00 d0       	rcall	.+0      	; 0xc4c <USART_voidSendu32Block+0x8>
 c4c:	00 d0       	rcall	.+0      	; 0xc4e <USART_voidSendu32Block+0xa>
 c4e:	cd b7       	in	r28, 0x3d	; 61
 c50:	de b7       	in	r29, 0x3e	; 62
 c52:	6b 83       	std	Y+3, r22	; 0x03
 c54:	7c 83       	std	Y+4, r23	; 0x04
 c56:	8d 83       	std	Y+5, r24	; 0x05
 c58:	9e 83       	std	Y+6, r25	; 0x06
	u8 Data;
	u8 counter;
	for(counter = 0; counter <=3 ; counter ++)
 c5a:	19 82       	std	Y+1, r1	; 0x01
 c5c:	1c c0       	rjmp	.+56     	; 0xc96 <USART_voidSendu32Block+0x52>
	{
		Data = (u8)(copy_u32DataSend >> (8*counter));
 c5e:	89 81       	ldd	r24, Y+1	; 0x01
 c60:	88 2f       	mov	r24, r24
 c62:	90 e0       	ldi	r25, 0x00	; 0
 c64:	9c 01       	movw	r18, r24
 c66:	22 0f       	add	r18, r18
 c68:	33 1f       	adc	r19, r19
 c6a:	22 0f       	add	r18, r18
 c6c:	33 1f       	adc	r19, r19
 c6e:	22 0f       	add	r18, r18
 c70:	33 1f       	adc	r19, r19
 c72:	8b 81       	ldd	r24, Y+3	; 0x03
 c74:	9c 81       	ldd	r25, Y+4	; 0x04
 c76:	ad 81       	ldd	r26, Y+5	; 0x05
 c78:	be 81       	ldd	r27, Y+6	; 0x06
 c7a:	04 c0       	rjmp	.+8      	; 0xc84 <USART_voidSendu32Block+0x40>
 c7c:	b6 95       	lsr	r27
 c7e:	a7 95       	ror	r26
 c80:	97 95       	ror	r25
 c82:	87 95       	ror	r24
 c84:	2a 95       	dec	r18
 c86:	d2 f7       	brpl	.-12     	; 0xc7c <USART_voidSendu32Block+0x38>
 c88:	8a 83       	std	Y+2, r24	; 0x02
		USART_voidSendByte(Data);
 c8a:	8a 81       	ldd	r24, Y+2	; 0x02
 c8c:	0e 94 70 05 	call	0xae0	; 0xae0 <USART_voidSendByte>

void USART_voidSendu32Block(u32 copy_u32DataSend)
{
	u8 Data;
	u8 counter;
	for(counter = 0; counter <=3 ; counter ++)
 c90:	89 81       	ldd	r24, Y+1	; 0x01
 c92:	8f 5f       	subi	r24, 0xFF	; 255
 c94:	89 83       	std	Y+1, r24	; 0x01
 c96:	89 81       	ldd	r24, Y+1	; 0x01
 c98:	84 30       	cpi	r24, 0x04	; 4
 c9a:	08 f3       	brcs	.-62     	; 0xc5e <USART_voidSendu32Block+0x1a>
	{
		Data = (u8)(copy_u32DataSend >> (8*counter));
		USART_voidSendByte(Data);
	}
}
 c9c:	26 96       	adiw	r28, 0x06	; 6
 c9e:	0f b6       	in	r0, 0x3f	; 63
 ca0:	f8 94       	cli
 ca2:	de bf       	out	0x3e, r29	; 62
 ca4:	0f be       	out	0x3f, r0	; 63
 ca6:	cd bf       	out	0x3d, r28	; 61
 ca8:	cf 91       	pop	r28
 caa:	df 91       	pop	r29
 cac:	08 95       	ret

00000cae <USART_u32Recieveu32Block>:
u32 USART_u32Recieveu32Block(void)
{
 cae:	df 93       	push	r29
 cb0:	cf 93       	push	r28
 cb2:	00 d0       	rcall	.+0      	; 0xcb4 <USART_u32Recieveu32Block+0x6>
 cb4:	00 d0       	rcall	.+0      	; 0xcb6 <USART_u32Recieveu32Block+0x8>
 cb6:	0f 92       	push	r0
 cb8:	cd b7       	in	r28, 0x3d	; 61
 cba:	de b7       	in	r29, 0x3e	; 62
	u32 Data;
	u8 counter;
	for(counter = 0; counter <=3 ; counter ++)
 cbc:	19 82       	std	Y+1, r1	; 0x01
 cbe:	28 c0       	rjmp	.+80     	; 0xd10 <USART_u32Recieveu32Block+0x62>
	{
		Data |=(USART_u8RecieveByte() << (8* counter)); 
 cc0:	0e 94 91 05 	call	0xb22	; 0xb22 <USART_u8RecieveByte>
 cc4:	28 2f       	mov	r18, r24
 cc6:	30 e0       	ldi	r19, 0x00	; 0
 cc8:	89 81       	ldd	r24, Y+1	; 0x01
 cca:	88 2f       	mov	r24, r24
 ccc:	90 e0       	ldi	r25, 0x00	; 0
 cce:	88 0f       	add	r24, r24
 cd0:	99 1f       	adc	r25, r25
 cd2:	88 0f       	add	r24, r24
 cd4:	99 1f       	adc	r25, r25
 cd6:	88 0f       	add	r24, r24
 cd8:	99 1f       	adc	r25, r25
 cda:	a9 01       	movw	r20, r18
 cdc:	02 c0       	rjmp	.+4      	; 0xce2 <USART_u32Recieveu32Block+0x34>
 cde:	44 0f       	add	r20, r20
 ce0:	55 1f       	adc	r21, r21
 ce2:	8a 95       	dec	r24
 ce4:	e2 f7       	brpl	.-8      	; 0xcde <USART_u32Recieveu32Block+0x30>
 ce6:	ca 01       	movw	r24, r20
 ce8:	9c 01       	movw	r18, r24
 cea:	44 27       	eor	r20, r20
 cec:	37 fd       	sbrc	r19, 7
 cee:	40 95       	com	r20
 cf0:	54 2f       	mov	r21, r20
 cf2:	8a 81       	ldd	r24, Y+2	; 0x02
 cf4:	9b 81       	ldd	r25, Y+3	; 0x03
 cf6:	ac 81       	ldd	r26, Y+4	; 0x04
 cf8:	bd 81       	ldd	r27, Y+5	; 0x05
 cfa:	82 2b       	or	r24, r18
 cfc:	93 2b       	or	r25, r19
 cfe:	a4 2b       	or	r26, r20
 d00:	b5 2b       	or	r27, r21
 d02:	8a 83       	std	Y+2, r24	; 0x02
 d04:	9b 83       	std	Y+3, r25	; 0x03
 d06:	ac 83       	std	Y+4, r26	; 0x04
 d08:	bd 83       	std	Y+5, r27	; 0x05
}
u32 USART_u32Recieveu32Block(void)
{
	u32 Data;
	u8 counter;
	for(counter = 0; counter <=3 ; counter ++)
 d0a:	89 81       	ldd	r24, Y+1	; 0x01
 d0c:	8f 5f       	subi	r24, 0xFF	; 255
 d0e:	89 83       	std	Y+1, r24	; 0x01
 d10:	89 81       	ldd	r24, Y+1	; 0x01
 d12:	84 30       	cpi	r24, 0x04	; 4
 d14:	a8 f2       	brcs	.-86     	; 0xcc0 <USART_u32Recieveu32Block+0x12>
	{
		Data |=(USART_u8RecieveByte() << (8* counter)); 
	} 
	return Data;
 d16:	8a 81       	ldd	r24, Y+2	; 0x02
 d18:	9b 81       	ldd	r25, Y+3	; 0x03
 d1a:	ac 81       	ldd	r26, Y+4	; 0x04
 d1c:	bd 81       	ldd	r27, Y+5	; 0x05
}
 d1e:	bc 01       	movw	r22, r24
 d20:	cd 01       	movw	r24, r26
 d22:	0f 90       	pop	r0
 d24:	0f 90       	pop	r0
 d26:	0f 90       	pop	r0
 d28:	0f 90       	pop	r0
 d2a:	0f 90       	pop	r0
 d2c:	cf 91       	pop	r28
 d2e:	df 91       	pop	r29
 d30:	08 95       	ret

00000d32 <main>:
#include "GPIO_interface.h"
#include "UART_interface.h"


int main ()
{
 d32:	df 93       	push	r29
 d34:	cf 93       	push	r28
 d36:	0f 92       	push	r0
 d38:	cd b7       	in	r28, 0x3d	; 61
 d3a:	de b7       	in	r29, 0x3e	; 62
	u8 x ;
	USART_voidInit(9600);
 d3c:	60 e8       	ldi	r22, 0x80	; 128
 d3e:	75 e2       	ldi	r23, 0x25	; 37
 d40:	80 e0       	ldi	r24, 0x00	; 0
 d42:	90 e0       	ldi	r25, 0x00	; 0
 d44:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <USART_voidInit>
	GPIO_voidSetPinDDR(GPIOA , 0 , OUTPUT);
 d48:	80 e0       	ldi	r24, 0x00	; 0
 d4a:	60 e0       	ldi	r22, 0x00	; 0
 d4c:	41 e0       	ldi	r20, 0x01	; 1
 d4e:	0e 94 3e 00 	call	0x7c	; 0x7c <GPIO_voidSetPinDDR>
	while(1)
	{
	x=	USART_u8RecieveByte();
 d52:	0e 94 91 05 	call	0xb22	; 0xb22 <USART_u8RecieveByte>
 d56:	89 83       	std	Y+1, r24	; 0x01
	if (x == 1 )
 d58:	89 81       	ldd	r24, Y+1	; 0x01
 d5a:	81 30       	cpi	r24, 0x01	; 1
 d5c:	d1 f7       	brne	.-12     	; 0xd52 <main+0x20>
	{
		GPIO_voidTogPin(GPIOA , 0);
 d5e:	80 e0       	ldi	r24, 0x00	; 0
 d60:	60 e0       	ldi	r22, 0x00	; 0
 d62:	0e 94 af 02 	call	0x55e	; 0x55e <GPIO_voidTogPin>
		x = 0 ;
 d66:	19 82       	std	Y+1, r1	; 0x01
 d68:	f4 cf       	rjmp	.-24     	; 0xd52 <main+0x20>

00000d6a <__udivmodsi4>:
 d6a:	a1 e2       	ldi	r26, 0x21	; 33
 d6c:	1a 2e       	mov	r1, r26
 d6e:	aa 1b       	sub	r26, r26
 d70:	bb 1b       	sub	r27, r27
 d72:	fd 01       	movw	r30, r26
 d74:	0d c0       	rjmp	.+26     	; 0xd90 <__udivmodsi4_ep>

00000d76 <__udivmodsi4_loop>:
 d76:	aa 1f       	adc	r26, r26
 d78:	bb 1f       	adc	r27, r27
 d7a:	ee 1f       	adc	r30, r30
 d7c:	ff 1f       	adc	r31, r31
 d7e:	a2 17       	cp	r26, r18
 d80:	b3 07       	cpc	r27, r19
 d82:	e4 07       	cpc	r30, r20
 d84:	f5 07       	cpc	r31, r21
 d86:	20 f0       	brcs	.+8      	; 0xd90 <__udivmodsi4_ep>
 d88:	a2 1b       	sub	r26, r18
 d8a:	b3 0b       	sbc	r27, r19
 d8c:	e4 0b       	sbc	r30, r20
 d8e:	f5 0b       	sbc	r31, r21

00000d90 <__udivmodsi4_ep>:
 d90:	66 1f       	adc	r22, r22
 d92:	77 1f       	adc	r23, r23
 d94:	88 1f       	adc	r24, r24
 d96:	99 1f       	adc	r25, r25
 d98:	1a 94       	dec	r1
 d9a:	69 f7       	brne	.-38     	; 0xd76 <__udivmodsi4_loop>
 d9c:	60 95       	com	r22
 d9e:	70 95       	com	r23
 da0:	80 95       	com	r24
 da2:	90 95       	com	r25
 da4:	9b 01       	movw	r18, r22
 da6:	ac 01       	movw	r20, r24
 da8:	bd 01       	movw	r22, r26
 daa:	cf 01       	movw	r24, r30
 dac:	08 95       	ret

00000dae <_exit>:
 dae:	f8 94       	cli

00000db0 <__stop_program>:
 db0:	ff cf       	rjmp	.-2      	; 0xdb0 <__stop_program>
