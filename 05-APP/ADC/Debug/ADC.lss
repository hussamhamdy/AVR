
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002be4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011a  00800060  00002be4  00002c58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001bd8  00000000  00000000  00002d74  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000ba8  00000000  00000000  0000494c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000180  00000000  00000000  000054f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001d3  00000000  00000000  00005674  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000200f  00000000  00000000  00005847  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001170  00000000  00000000  00007856  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001001  00000000  00000000  000089c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  000099c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c1  00000000  00000000  00009b68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008ae  00000000  00000000  00009e29  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a6d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ee       	ldi	r30, 0xE4	; 228
      68:	fb e2       	ldi	r31, 0x2B	; 43
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 5e 12 	call	0x24bc	; 0x24bc <main>
      7a:	0c 94 f0 15 	jmp	0x2be0	; 0x2be0 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 18 13 	jmp	0x2630	; 0x2630 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a2 e7       	ldi	r26, 0x72	; 114
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 34 13 	jmp	0x2668	; 0x2668 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 40 13 	jmp	0x2680	; 0x2680 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 40 13 	jmp	0x2680	; 0x2680 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 18 13 	jmp	0x2630	; 0x2630 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	82 e7       	ldi	r24, 0x72	; 114
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 34 13 	jmp	0x2668	; 0x2668 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 0a 06 	call	0xc14	; 0xc14 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 40 13 	jmp	0x2680	; 0x2680 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 0a 06 	call	0xc14	; 0xc14 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 40 13 	jmp	0x2680	; 0x2680 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 0a 06 	call	0xc14	; 0xc14 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 40 13 	jmp	0x2680	; 0x2680 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 28 13 	jmp	0x2650	; 0x2650 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 44 13 	jmp	0x2688	; 0x2688 <__epilogue_restores__+0x20>

000007ea <__floatunsisf>:
     7ea:	a8 e0       	ldi	r26, 0x08	; 8
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 20 13 	jmp	0x2640	; 0x2640 <__prologue_saves__+0x10>
     7f6:	7b 01       	movw	r14, r22
     7f8:	8c 01       	movw	r16, r24
     7fa:	61 15       	cp	r22, r1
     7fc:	71 05       	cpc	r23, r1
     7fe:	81 05       	cpc	r24, r1
     800:	91 05       	cpc	r25, r1
     802:	19 f4       	brne	.+6      	; 0x80a <__floatunsisf+0x20>
     804:	82 e0       	ldi	r24, 0x02	; 2
     806:	89 83       	std	Y+1, r24	; 0x01
     808:	60 c0       	rjmp	.+192    	; 0x8ca <__stack+0x6b>
     80a:	83 e0       	ldi	r24, 0x03	; 3
     80c:	89 83       	std	Y+1, r24	; 0x01
     80e:	8e e1       	ldi	r24, 0x1E	; 30
     810:	c8 2e       	mov	r12, r24
     812:	d1 2c       	mov	r13, r1
     814:	dc 82       	std	Y+4, r13	; 0x04
     816:	cb 82       	std	Y+3, r12	; 0x03
     818:	ed 82       	std	Y+5, r14	; 0x05
     81a:	fe 82       	std	Y+6, r15	; 0x06
     81c:	0f 83       	std	Y+7, r16	; 0x07
     81e:	18 87       	std	Y+8, r17	; 0x08
     820:	c8 01       	movw	r24, r16
     822:	b7 01       	movw	r22, r14
     824:	0e 94 6e 04 	call	0x8dc	; 0x8dc <__clzsi2>
     828:	fc 01       	movw	r30, r24
     82a:	31 97       	sbiw	r30, 0x01	; 1
     82c:	f7 ff       	sbrs	r31, 7
     82e:	3b c0       	rjmp	.+118    	; 0x8a6 <__stack+0x47>
     830:	22 27       	eor	r18, r18
     832:	33 27       	eor	r19, r19
     834:	2e 1b       	sub	r18, r30
     836:	3f 0b       	sbc	r19, r31
     838:	57 01       	movw	r10, r14
     83a:	68 01       	movw	r12, r16
     83c:	02 2e       	mov	r0, r18
     83e:	04 c0       	rjmp	.+8      	; 0x848 <__floatunsisf+0x5e>
     840:	d6 94       	lsr	r13
     842:	c7 94       	ror	r12
     844:	b7 94       	ror	r11
     846:	a7 94       	ror	r10
     848:	0a 94       	dec	r0
     84a:	d2 f7       	brpl	.-12     	; 0x840 <__floatunsisf+0x56>
     84c:	40 e0       	ldi	r20, 0x00	; 0
     84e:	50 e0       	ldi	r21, 0x00	; 0
     850:	60 e0       	ldi	r22, 0x00	; 0
     852:	70 e0       	ldi	r23, 0x00	; 0
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	a0 e0       	ldi	r26, 0x00	; 0
     85a:	b0 e0       	ldi	r27, 0x00	; 0
     85c:	04 c0       	rjmp	.+8      	; 0x866 <__stack+0x7>
     85e:	88 0f       	add	r24, r24
     860:	99 1f       	adc	r25, r25
     862:	aa 1f       	adc	r26, r26
     864:	bb 1f       	adc	r27, r27
     866:	2a 95       	dec	r18
     868:	d2 f7       	brpl	.-12     	; 0x85e <__floatunsisf+0x74>
     86a:	01 97       	sbiw	r24, 0x01	; 1
     86c:	a1 09       	sbc	r26, r1
     86e:	b1 09       	sbc	r27, r1
     870:	8e 21       	and	r24, r14
     872:	9f 21       	and	r25, r15
     874:	a0 23       	and	r26, r16
     876:	b1 23       	and	r27, r17
     878:	00 97       	sbiw	r24, 0x00	; 0
     87a:	a1 05       	cpc	r26, r1
     87c:	b1 05       	cpc	r27, r1
     87e:	21 f0       	breq	.+8      	; 0x888 <__stack+0x29>
     880:	41 e0       	ldi	r20, 0x01	; 1
     882:	50 e0       	ldi	r21, 0x00	; 0
     884:	60 e0       	ldi	r22, 0x00	; 0
     886:	70 e0       	ldi	r23, 0x00	; 0
     888:	4a 29       	or	r20, r10
     88a:	5b 29       	or	r21, r11
     88c:	6c 29       	or	r22, r12
     88e:	7d 29       	or	r23, r13
     890:	4d 83       	std	Y+5, r20	; 0x05
     892:	5e 83       	std	Y+6, r21	; 0x06
     894:	6f 83       	std	Y+7, r22	; 0x07
     896:	78 87       	std	Y+8, r23	; 0x08
     898:	8e e1       	ldi	r24, 0x1E	; 30
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	8e 1b       	sub	r24, r30
     89e:	9f 0b       	sbc	r25, r31
     8a0:	9c 83       	std	Y+4, r25	; 0x04
     8a2:	8b 83       	std	Y+3, r24	; 0x03
     8a4:	12 c0       	rjmp	.+36     	; 0x8ca <__stack+0x6b>
     8a6:	30 97       	sbiw	r30, 0x00	; 0
     8a8:	81 f0       	breq	.+32     	; 0x8ca <__stack+0x6b>
     8aa:	0e 2e       	mov	r0, r30
     8ac:	04 c0       	rjmp	.+8      	; 0x8b6 <__stack+0x57>
     8ae:	ee 0c       	add	r14, r14
     8b0:	ff 1c       	adc	r15, r15
     8b2:	00 1f       	adc	r16, r16
     8b4:	11 1f       	adc	r17, r17
     8b6:	0a 94       	dec	r0
     8b8:	d2 f7       	brpl	.-12     	; 0x8ae <__stack+0x4f>
     8ba:	ed 82       	std	Y+5, r14	; 0x05
     8bc:	fe 82       	std	Y+6, r15	; 0x06
     8be:	0f 83       	std	Y+7, r16	; 0x07
     8c0:	18 87       	std	Y+8, r17	; 0x08
     8c2:	ce 1a       	sub	r12, r30
     8c4:	df 0a       	sbc	r13, r31
     8c6:	dc 82       	std	Y+4, r13	; 0x04
     8c8:	cb 82       	std	Y+3, r12	; 0x03
     8ca:	1a 82       	std	Y+2, r1	; 0x02
     8cc:	ce 01       	movw	r24, r28
     8ce:	01 96       	adiw	r24, 0x01	; 1
     8d0:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     8d4:	28 96       	adiw	r28, 0x08	; 8
     8d6:	ea e0       	ldi	r30, 0x0A	; 10
     8d8:	0c 94 3c 13 	jmp	0x2678	; 0x2678 <__epilogue_restores__+0x10>

000008dc <__clzsi2>:
     8dc:	ef 92       	push	r14
     8de:	ff 92       	push	r15
     8e0:	0f 93       	push	r16
     8e2:	1f 93       	push	r17
     8e4:	7b 01       	movw	r14, r22
     8e6:	8c 01       	movw	r16, r24
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	e8 16       	cp	r14, r24
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	f8 06       	cpc	r15, r24
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	08 07       	cpc	r16, r24
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	18 07       	cpc	r17, r24
     8f8:	88 f4       	brcc	.+34     	; 0x91c <__clzsi2+0x40>
     8fa:	8f ef       	ldi	r24, 0xFF	; 255
     8fc:	e8 16       	cp	r14, r24
     8fe:	f1 04       	cpc	r15, r1
     900:	01 05       	cpc	r16, r1
     902:	11 05       	cpc	r17, r1
     904:	31 f0       	breq	.+12     	; 0x912 <__clzsi2+0x36>
     906:	28 f0       	brcs	.+10     	; 0x912 <__clzsi2+0x36>
     908:	88 e0       	ldi	r24, 0x08	; 8
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e0       	ldi	r26, 0x00	; 0
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	17 c0       	rjmp	.+46     	; 0x940 <__clzsi2+0x64>
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a0 e0       	ldi	r26, 0x00	; 0
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	12 c0       	rjmp	.+36     	; 0x940 <__clzsi2+0x64>
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	e8 16       	cp	r14, r24
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	f8 06       	cpc	r15, r24
     924:	80 e0       	ldi	r24, 0x00	; 0
     926:	08 07       	cpc	r16, r24
     928:	81 e0       	ldi	r24, 0x01	; 1
     92a:	18 07       	cpc	r17, r24
     92c:	28 f0       	brcs	.+10     	; 0x938 <__clzsi2+0x5c>
     92e:	88 e1       	ldi	r24, 0x18	; 24
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	04 c0       	rjmp	.+8      	; 0x940 <__clzsi2+0x64>
     938:	80 e1       	ldi	r24, 0x10	; 16
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	a0 e0       	ldi	r26, 0x00	; 0
     93e:	b0 e0       	ldi	r27, 0x00	; 0
     940:	20 e2       	ldi	r18, 0x20	; 32
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	40 e0       	ldi	r20, 0x00	; 0
     946:	50 e0       	ldi	r21, 0x00	; 0
     948:	28 1b       	sub	r18, r24
     94a:	39 0b       	sbc	r19, r25
     94c:	4a 0b       	sbc	r20, r26
     94e:	5b 0b       	sbc	r21, r27
     950:	04 c0       	rjmp	.+8      	; 0x95a <__clzsi2+0x7e>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	8a 95       	dec	r24
     95c:	d2 f7       	brpl	.-12     	; 0x952 <__clzsi2+0x76>
     95e:	f7 01       	movw	r30, r14
     960:	e6 58       	subi	r30, 0x86	; 134
     962:	ff 4f       	sbci	r31, 0xFF	; 255
     964:	80 81       	ld	r24, Z
     966:	28 1b       	sub	r18, r24
     968:	31 09       	sbc	r19, r1
     96a:	41 09       	sbc	r20, r1
     96c:	51 09       	sbc	r21, r1
     96e:	c9 01       	movw	r24, r18
     970:	1f 91       	pop	r17
     972:	0f 91       	pop	r16
     974:	ff 90       	pop	r15
     976:	ef 90       	pop	r14
     978:	08 95       	ret

0000097a <__pack_f>:
     97a:	df 92       	push	r13
     97c:	ef 92       	push	r14
     97e:	ff 92       	push	r15
     980:	0f 93       	push	r16
     982:	1f 93       	push	r17
     984:	fc 01       	movw	r30, r24
     986:	e4 80       	ldd	r14, Z+4	; 0x04
     988:	f5 80       	ldd	r15, Z+5	; 0x05
     98a:	06 81       	ldd	r16, Z+6	; 0x06
     98c:	17 81       	ldd	r17, Z+7	; 0x07
     98e:	d1 80       	ldd	r13, Z+1	; 0x01
     990:	80 81       	ld	r24, Z
     992:	82 30       	cpi	r24, 0x02	; 2
     994:	48 f4       	brcc	.+18     	; 0x9a8 <__pack_f+0x2e>
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	a0 e1       	ldi	r26, 0x10	; 16
     99c:	b0 e0       	ldi	r27, 0x00	; 0
     99e:	e8 2a       	or	r14, r24
     9a0:	f9 2a       	or	r15, r25
     9a2:	0a 2b       	or	r16, r26
     9a4:	1b 2b       	or	r17, r27
     9a6:	a5 c0       	rjmp	.+330    	; 0xaf2 <__pack_f+0x178>
     9a8:	84 30       	cpi	r24, 0x04	; 4
     9aa:	09 f4       	brne	.+2      	; 0x9ae <__pack_f+0x34>
     9ac:	9f c0       	rjmp	.+318    	; 0xaec <__pack_f+0x172>
     9ae:	82 30       	cpi	r24, 0x02	; 2
     9b0:	21 f4       	brne	.+8      	; 0x9ba <__pack_f+0x40>
     9b2:	ee 24       	eor	r14, r14
     9b4:	ff 24       	eor	r15, r15
     9b6:	87 01       	movw	r16, r14
     9b8:	05 c0       	rjmp	.+10     	; 0x9c4 <__pack_f+0x4a>
     9ba:	e1 14       	cp	r14, r1
     9bc:	f1 04       	cpc	r15, r1
     9be:	01 05       	cpc	r16, r1
     9c0:	11 05       	cpc	r17, r1
     9c2:	19 f4       	brne	.+6      	; 0x9ca <__pack_f+0x50>
     9c4:	e0 e0       	ldi	r30, 0x00	; 0
     9c6:	f0 e0       	ldi	r31, 0x00	; 0
     9c8:	96 c0       	rjmp	.+300    	; 0xaf6 <__pack_f+0x17c>
     9ca:	62 81       	ldd	r22, Z+2	; 0x02
     9cc:	73 81       	ldd	r23, Z+3	; 0x03
     9ce:	9f ef       	ldi	r25, 0xFF	; 255
     9d0:	62 38       	cpi	r22, 0x82	; 130
     9d2:	79 07       	cpc	r23, r25
     9d4:	0c f0       	brlt	.+2      	; 0x9d8 <__pack_f+0x5e>
     9d6:	5b c0       	rjmp	.+182    	; 0xa8e <__pack_f+0x114>
     9d8:	22 e8       	ldi	r18, 0x82	; 130
     9da:	3f ef       	ldi	r19, 0xFF	; 255
     9dc:	26 1b       	sub	r18, r22
     9de:	37 0b       	sbc	r19, r23
     9e0:	2a 31       	cpi	r18, 0x1A	; 26
     9e2:	31 05       	cpc	r19, r1
     9e4:	2c f0       	brlt	.+10     	; 0x9f0 <__pack_f+0x76>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	2a c0       	rjmp	.+84     	; 0xa44 <__pack_f+0xca>
     9f0:	b8 01       	movw	r22, r16
     9f2:	a7 01       	movw	r20, r14
     9f4:	02 2e       	mov	r0, r18
     9f6:	04 c0       	rjmp	.+8      	; 0xa00 <__pack_f+0x86>
     9f8:	76 95       	lsr	r23
     9fa:	67 95       	ror	r22
     9fc:	57 95       	ror	r21
     9fe:	47 95       	ror	r20
     a00:	0a 94       	dec	r0
     a02:	d2 f7       	brpl	.-12     	; 0x9f8 <__pack_f+0x7e>
     a04:	81 e0       	ldi	r24, 0x01	; 1
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	a0 e0       	ldi	r26, 0x00	; 0
     a0a:	b0 e0       	ldi	r27, 0x00	; 0
     a0c:	04 c0       	rjmp	.+8      	; 0xa16 <__pack_f+0x9c>
     a0e:	88 0f       	add	r24, r24
     a10:	99 1f       	adc	r25, r25
     a12:	aa 1f       	adc	r26, r26
     a14:	bb 1f       	adc	r27, r27
     a16:	2a 95       	dec	r18
     a18:	d2 f7       	brpl	.-12     	; 0xa0e <__pack_f+0x94>
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	a1 09       	sbc	r26, r1
     a1e:	b1 09       	sbc	r27, r1
     a20:	8e 21       	and	r24, r14
     a22:	9f 21       	and	r25, r15
     a24:	a0 23       	and	r26, r16
     a26:	b1 23       	and	r27, r17
     a28:	00 97       	sbiw	r24, 0x00	; 0
     a2a:	a1 05       	cpc	r26, r1
     a2c:	b1 05       	cpc	r27, r1
     a2e:	21 f0       	breq	.+8      	; 0xa38 <__pack_f+0xbe>
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	a0 e0       	ldi	r26, 0x00	; 0
     a36:	b0 e0       	ldi	r27, 0x00	; 0
     a38:	9a 01       	movw	r18, r20
     a3a:	ab 01       	movw	r20, r22
     a3c:	28 2b       	or	r18, r24
     a3e:	39 2b       	or	r19, r25
     a40:	4a 2b       	or	r20, r26
     a42:	5b 2b       	or	r21, r27
     a44:	da 01       	movw	r26, r20
     a46:	c9 01       	movw	r24, r18
     a48:	8f 77       	andi	r24, 0x7F	; 127
     a4a:	90 70       	andi	r25, 0x00	; 0
     a4c:	a0 70       	andi	r26, 0x00	; 0
     a4e:	b0 70       	andi	r27, 0x00	; 0
     a50:	80 34       	cpi	r24, 0x40	; 64
     a52:	91 05       	cpc	r25, r1
     a54:	a1 05       	cpc	r26, r1
     a56:	b1 05       	cpc	r27, r1
     a58:	39 f4       	brne	.+14     	; 0xa68 <__pack_f+0xee>
     a5a:	27 ff       	sbrs	r18, 7
     a5c:	09 c0       	rjmp	.+18     	; 0xa70 <__pack_f+0xf6>
     a5e:	20 5c       	subi	r18, 0xC0	; 192
     a60:	3f 4f       	sbci	r19, 0xFF	; 255
     a62:	4f 4f       	sbci	r20, 0xFF	; 255
     a64:	5f 4f       	sbci	r21, 0xFF	; 255
     a66:	04 c0       	rjmp	.+8      	; 0xa70 <__pack_f+0xf6>
     a68:	21 5c       	subi	r18, 0xC1	; 193
     a6a:	3f 4f       	sbci	r19, 0xFF	; 255
     a6c:	4f 4f       	sbci	r20, 0xFF	; 255
     a6e:	5f 4f       	sbci	r21, 0xFF	; 255
     a70:	e0 e0       	ldi	r30, 0x00	; 0
     a72:	f0 e0       	ldi	r31, 0x00	; 0
     a74:	20 30       	cpi	r18, 0x00	; 0
     a76:	a0 e0       	ldi	r26, 0x00	; 0
     a78:	3a 07       	cpc	r19, r26
     a7a:	a0 e0       	ldi	r26, 0x00	; 0
     a7c:	4a 07       	cpc	r20, r26
     a7e:	a0 e4       	ldi	r26, 0x40	; 64
     a80:	5a 07       	cpc	r21, r26
     a82:	10 f0       	brcs	.+4      	; 0xa88 <__pack_f+0x10e>
     a84:	e1 e0       	ldi	r30, 0x01	; 1
     a86:	f0 e0       	ldi	r31, 0x00	; 0
     a88:	79 01       	movw	r14, r18
     a8a:	8a 01       	movw	r16, r20
     a8c:	27 c0       	rjmp	.+78     	; 0xadc <__pack_f+0x162>
     a8e:	60 38       	cpi	r22, 0x80	; 128
     a90:	71 05       	cpc	r23, r1
     a92:	64 f5       	brge	.+88     	; 0xaec <__pack_f+0x172>
     a94:	fb 01       	movw	r30, r22
     a96:	e1 58       	subi	r30, 0x81	; 129
     a98:	ff 4f       	sbci	r31, 0xFF	; 255
     a9a:	d8 01       	movw	r26, r16
     a9c:	c7 01       	movw	r24, r14
     a9e:	8f 77       	andi	r24, 0x7F	; 127
     aa0:	90 70       	andi	r25, 0x00	; 0
     aa2:	a0 70       	andi	r26, 0x00	; 0
     aa4:	b0 70       	andi	r27, 0x00	; 0
     aa6:	80 34       	cpi	r24, 0x40	; 64
     aa8:	91 05       	cpc	r25, r1
     aaa:	a1 05       	cpc	r26, r1
     aac:	b1 05       	cpc	r27, r1
     aae:	39 f4       	brne	.+14     	; 0xabe <__pack_f+0x144>
     ab0:	e7 fe       	sbrs	r14, 7
     ab2:	0d c0       	rjmp	.+26     	; 0xace <__pack_f+0x154>
     ab4:	80 e4       	ldi	r24, 0x40	; 64
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	a0 e0       	ldi	r26, 0x00	; 0
     aba:	b0 e0       	ldi	r27, 0x00	; 0
     abc:	04 c0       	rjmp	.+8      	; 0xac6 <__pack_f+0x14c>
     abe:	8f e3       	ldi	r24, 0x3F	; 63
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	a0 e0       	ldi	r26, 0x00	; 0
     ac4:	b0 e0       	ldi	r27, 0x00	; 0
     ac6:	e8 0e       	add	r14, r24
     ac8:	f9 1e       	adc	r15, r25
     aca:	0a 1f       	adc	r16, r26
     acc:	1b 1f       	adc	r17, r27
     ace:	17 ff       	sbrs	r17, 7
     ad0:	05 c0       	rjmp	.+10     	; 0xadc <__pack_f+0x162>
     ad2:	16 95       	lsr	r17
     ad4:	07 95       	ror	r16
     ad6:	f7 94       	ror	r15
     ad8:	e7 94       	ror	r14
     ada:	31 96       	adiw	r30, 0x01	; 1
     adc:	87 e0       	ldi	r24, 0x07	; 7
     ade:	16 95       	lsr	r17
     ae0:	07 95       	ror	r16
     ae2:	f7 94       	ror	r15
     ae4:	e7 94       	ror	r14
     ae6:	8a 95       	dec	r24
     ae8:	d1 f7       	brne	.-12     	; 0xade <__pack_f+0x164>
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x17c>
     aec:	ee 24       	eor	r14, r14
     aee:	ff 24       	eor	r15, r15
     af0:	87 01       	movw	r16, r14
     af2:	ef ef       	ldi	r30, 0xFF	; 255
     af4:	f0 e0       	ldi	r31, 0x00	; 0
     af6:	6e 2f       	mov	r22, r30
     af8:	67 95       	ror	r22
     afa:	66 27       	eor	r22, r22
     afc:	67 95       	ror	r22
     afe:	90 2f       	mov	r25, r16
     b00:	9f 77       	andi	r25, 0x7F	; 127
     b02:	d7 94       	ror	r13
     b04:	dd 24       	eor	r13, r13
     b06:	d7 94       	ror	r13
     b08:	8e 2f       	mov	r24, r30
     b0a:	86 95       	lsr	r24
     b0c:	49 2f       	mov	r20, r25
     b0e:	46 2b       	or	r20, r22
     b10:	58 2f       	mov	r21, r24
     b12:	5d 29       	or	r21, r13
     b14:	b7 01       	movw	r22, r14
     b16:	ca 01       	movw	r24, r20
     b18:	1f 91       	pop	r17
     b1a:	0f 91       	pop	r16
     b1c:	ff 90       	pop	r15
     b1e:	ef 90       	pop	r14
     b20:	df 90       	pop	r13
     b22:	08 95       	ret

00000b24 <__unpack_f>:
     b24:	fc 01       	movw	r30, r24
     b26:	db 01       	movw	r26, r22
     b28:	40 81       	ld	r20, Z
     b2a:	51 81       	ldd	r21, Z+1	; 0x01
     b2c:	22 81       	ldd	r18, Z+2	; 0x02
     b2e:	62 2f       	mov	r22, r18
     b30:	6f 77       	andi	r22, 0x7F	; 127
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	22 1f       	adc	r18, r18
     b36:	22 27       	eor	r18, r18
     b38:	22 1f       	adc	r18, r18
     b3a:	93 81       	ldd	r25, Z+3	; 0x03
     b3c:	89 2f       	mov	r24, r25
     b3e:	88 0f       	add	r24, r24
     b40:	82 2b       	or	r24, r18
     b42:	28 2f       	mov	r18, r24
     b44:	30 e0       	ldi	r19, 0x00	; 0
     b46:	99 1f       	adc	r25, r25
     b48:	99 27       	eor	r25, r25
     b4a:	99 1f       	adc	r25, r25
     b4c:	11 96       	adiw	r26, 0x01	; 1
     b4e:	9c 93       	st	X, r25
     b50:	11 97       	sbiw	r26, 0x01	; 1
     b52:	21 15       	cp	r18, r1
     b54:	31 05       	cpc	r19, r1
     b56:	a9 f5       	brne	.+106    	; 0xbc2 <__unpack_f+0x9e>
     b58:	41 15       	cp	r20, r1
     b5a:	51 05       	cpc	r21, r1
     b5c:	61 05       	cpc	r22, r1
     b5e:	71 05       	cpc	r23, r1
     b60:	11 f4       	brne	.+4      	; 0xb66 <__unpack_f+0x42>
     b62:	82 e0       	ldi	r24, 0x02	; 2
     b64:	37 c0       	rjmp	.+110    	; 0xbd4 <__unpack_f+0xb0>
     b66:	82 e8       	ldi	r24, 0x82	; 130
     b68:	9f ef       	ldi	r25, 0xFF	; 255
     b6a:	13 96       	adiw	r26, 0x03	; 3
     b6c:	9c 93       	st	X, r25
     b6e:	8e 93       	st	-X, r24
     b70:	12 97       	sbiw	r26, 0x02	; 2
     b72:	9a 01       	movw	r18, r20
     b74:	ab 01       	movw	r20, r22
     b76:	67 e0       	ldi	r22, 0x07	; 7
     b78:	22 0f       	add	r18, r18
     b7a:	33 1f       	adc	r19, r19
     b7c:	44 1f       	adc	r20, r20
     b7e:	55 1f       	adc	r21, r21
     b80:	6a 95       	dec	r22
     b82:	d1 f7       	brne	.-12     	; 0xb78 <__unpack_f+0x54>
     b84:	83 e0       	ldi	r24, 0x03	; 3
     b86:	8c 93       	st	X, r24
     b88:	0d c0       	rjmp	.+26     	; 0xba4 <__unpack_f+0x80>
     b8a:	22 0f       	add	r18, r18
     b8c:	33 1f       	adc	r19, r19
     b8e:	44 1f       	adc	r20, r20
     b90:	55 1f       	adc	r21, r21
     b92:	12 96       	adiw	r26, 0x02	; 2
     b94:	8d 91       	ld	r24, X+
     b96:	9c 91       	ld	r25, X
     b98:	13 97       	sbiw	r26, 0x03	; 3
     b9a:	01 97       	sbiw	r24, 0x01	; 1
     b9c:	13 96       	adiw	r26, 0x03	; 3
     b9e:	9c 93       	st	X, r25
     ba0:	8e 93       	st	-X, r24
     ba2:	12 97       	sbiw	r26, 0x02	; 2
     ba4:	20 30       	cpi	r18, 0x00	; 0
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	38 07       	cpc	r19, r24
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	48 07       	cpc	r20, r24
     bae:	80 e4       	ldi	r24, 0x40	; 64
     bb0:	58 07       	cpc	r21, r24
     bb2:	58 f3       	brcs	.-42     	; 0xb8a <__unpack_f+0x66>
     bb4:	14 96       	adiw	r26, 0x04	; 4
     bb6:	2d 93       	st	X+, r18
     bb8:	3d 93       	st	X+, r19
     bba:	4d 93       	st	X+, r20
     bbc:	5c 93       	st	X, r21
     bbe:	17 97       	sbiw	r26, 0x07	; 7
     bc0:	08 95       	ret
     bc2:	2f 3f       	cpi	r18, 0xFF	; 255
     bc4:	31 05       	cpc	r19, r1
     bc6:	79 f4       	brne	.+30     	; 0xbe6 <__unpack_f+0xc2>
     bc8:	41 15       	cp	r20, r1
     bca:	51 05       	cpc	r21, r1
     bcc:	61 05       	cpc	r22, r1
     bce:	71 05       	cpc	r23, r1
     bd0:	19 f4       	brne	.+6      	; 0xbd8 <__unpack_f+0xb4>
     bd2:	84 e0       	ldi	r24, 0x04	; 4
     bd4:	8c 93       	st	X, r24
     bd6:	08 95       	ret
     bd8:	64 ff       	sbrs	r22, 4
     bda:	03 c0       	rjmp	.+6      	; 0xbe2 <__unpack_f+0xbe>
     bdc:	81 e0       	ldi	r24, 0x01	; 1
     bde:	8c 93       	st	X, r24
     be0:	12 c0       	rjmp	.+36     	; 0xc06 <__unpack_f+0xe2>
     be2:	1c 92       	st	X, r1
     be4:	10 c0       	rjmp	.+32     	; 0xc06 <__unpack_f+0xe2>
     be6:	2f 57       	subi	r18, 0x7F	; 127
     be8:	30 40       	sbci	r19, 0x00	; 0
     bea:	13 96       	adiw	r26, 0x03	; 3
     bec:	3c 93       	st	X, r19
     bee:	2e 93       	st	-X, r18
     bf0:	12 97       	sbiw	r26, 0x02	; 2
     bf2:	83 e0       	ldi	r24, 0x03	; 3
     bf4:	8c 93       	st	X, r24
     bf6:	87 e0       	ldi	r24, 0x07	; 7
     bf8:	44 0f       	add	r20, r20
     bfa:	55 1f       	adc	r21, r21
     bfc:	66 1f       	adc	r22, r22
     bfe:	77 1f       	adc	r23, r23
     c00:	8a 95       	dec	r24
     c02:	d1 f7       	brne	.-12     	; 0xbf8 <__unpack_f+0xd4>
     c04:	70 64       	ori	r23, 0x40	; 64
     c06:	14 96       	adiw	r26, 0x04	; 4
     c08:	4d 93       	st	X+, r20
     c0a:	5d 93       	st	X+, r21
     c0c:	6d 93       	st	X+, r22
     c0e:	7c 93       	st	X, r23
     c10:	17 97       	sbiw	r26, 0x07	; 7
     c12:	08 95       	ret

00000c14 <__fpcmp_parts_f>:
     c14:	1f 93       	push	r17
     c16:	dc 01       	movw	r26, r24
     c18:	fb 01       	movw	r30, r22
     c1a:	9c 91       	ld	r25, X
     c1c:	92 30       	cpi	r25, 0x02	; 2
     c1e:	08 f4       	brcc	.+2      	; 0xc22 <__fpcmp_parts_f+0xe>
     c20:	47 c0       	rjmp	.+142    	; 0xcb0 <__fpcmp_parts_f+0x9c>
     c22:	80 81       	ld	r24, Z
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	08 f4       	brcc	.+2      	; 0xc2a <__fpcmp_parts_f+0x16>
     c28:	43 c0       	rjmp	.+134    	; 0xcb0 <__fpcmp_parts_f+0x9c>
     c2a:	94 30       	cpi	r25, 0x04	; 4
     c2c:	51 f4       	brne	.+20     	; 0xc42 <__fpcmp_parts_f+0x2e>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	84 30       	cpi	r24, 0x04	; 4
     c34:	99 f5       	brne	.+102    	; 0xc9c <__fpcmp_parts_f+0x88>
     c36:	81 81       	ldd	r24, Z+1	; 0x01
     c38:	68 2f       	mov	r22, r24
     c3a:	70 e0       	ldi	r23, 0x00	; 0
     c3c:	61 1b       	sub	r22, r17
     c3e:	71 09       	sbc	r23, r1
     c40:	3f c0       	rjmp	.+126    	; 0xcc0 <__fpcmp_parts_f+0xac>
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	21 f0       	breq	.+8      	; 0xc4e <__fpcmp_parts_f+0x3a>
     c46:	92 30       	cpi	r25, 0x02	; 2
     c48:	31 f4       	brne	.+12     	; 0xc56 <__fpcmp_parts_f+0x42>
     c4a:	82 30       	cpi	r24, 0x02	; 2
     c4c:	b9 f1       	breq	.+110    	; 0xcbc <__fpcmp_parts_f+0xa8>
     c4e:	81 81       	ldd	r24, Z+1	; 0x01
     c50:	88 23       	and	r24, r24
     c52:	89 f1       	breq	.+98     	; 0xcb6 <__fpcmp_parts_f+0xa2>
     c54:	2d c0       	rjmp	.+90     	; 0xcb0 <__fpcmp_parts_f+0x9c>
     c56:	11 96       	adiw	r26, 0x01	; 1
     c58:	1c 91       	ld	r17, X
     c5a:	11 97       	sbiw	r26, 0x01	; 1
     c5c:	82 30       	cpi	r24, 0x02	; 2
     c5e:	f1 f0       	breq	.+60     	; 0xc9c <__fpcmp_parts_f+0x88>
     c60:	81 81       	ldd	r24, Z+1	; 0x01
     c62:	18 17       	cp	r17, r24
     c64:	d9 f4       	brne	.+54     	; 0xc9c <__fpcmp_parts_f+0x88>
     c66:	12 96       	adiw	r26, 0x02	; 2
     c68:	2d 91       	ld	r18, X+
     c6a:	3c 91       	ld	r19, X
     c6c:	13 97       	sbiw	r26, 0x03	; 3
     c6e:	82 81       	ldd	r24, Z+2	; 0x02
     c70:	93 81       	ldd	r25, Z+3	; 0x03
     c72:	82 17       	cp	r24, r18
     c74:	93 07       	cpc	r25, r19
     c76:	94 f0       	brlt	.+36     	; 0xc9c <__fpcmp_parts_f+0x88>
     c78:	28 17       	cp	r18, r24
     c7a:	39 07       	cpc	r19, r25
     c7c:	bc f0       	brlt	.+46     	; 0xcac <__fpcmp_parts_f+0x98>
     c7e:	14 96       	adiw	r26, 0x04	; 4
     c80:	8d 91       	ld	r24, X+
     c82:	9d 91       	ld	r25, X+
     c84:	0d 90       	ld	r0, X+
     c86:	bc 91       	ld	r27, X
     c88:	a0 2d       	mov	r26, r0
     c8a:	24 81       	ldd	r18, Z+4	; 0x04
     c8c:	35 81       	ldd	r19, Z+5	; 0x05
     c8e:	46 81       	ldd	r20, Z+6	; 0x06
     c90:	57 81       	ldd	r21, Z+7	; 0x07
     c92:	28 17       	cp	r18, r24
     c94:	39 07       	cpc	r19, r25
     c96:	4a 07       	cpc	r20, r26
     c98:	5b 07       	cpc	r21, r27
     c9a:	18 f4       	brcc	.+6      	; 0xca2 <__fpcmp_parts_f+0x8e>
     c9c:	11 23       	and	r17, r17
     c9e:	41 f0       	breq	.+16     	; 0xcb0 <__fpcmp_parts_f+0x9c>
     ca0:	0a c0       	rjmp	.+20     	; 0xcb6 <__fpcmp_parts_f+0xa2>
     ca2:	82 17       	cp	r24, r18
     ca4:	93 07       	cpc	r25, r19
     ca6:	a4 07       	cpc	r26, r20
     ca8:	b5 07       	cpc	r27, r21
     caa:	40 f4       	brcc	.+16     	; 0xcbc <__fpcmp_parts_f+0xa8>
     cac:	11 23       	and	r17, r17
     cae:	19 f0       	breq	.+6      	; 0xcb6 <__fpcmp_parts_f+0xa2>
     cb0:	61 e0       	ldi	r22, 0x01	; 1
     cb2:	70 e0       	ldi	r23, 0x00	; 0
     cb4:	05 c0       	rjmp	.+10     	; 0xcc0 <__fpcmp_parts_f+0xac>
     cb6:	6f ef       	ldi	r22, 0xFF	; 255
     cb8:	7f ef       	ldi	r23, 0xFF	; 255
     cba:	02 c0       	rjmp	.+4      	; 0xcc0 <__fpcmp_parts_f+0xac>
     cbc:	60 e0       	ldi	r22, 0x00	; 0
     cbe:	70 e0       	ldi	r23, 0x00	; 0
     cc0:	cb 01       	movw	r24, r22
     cc2:	1f 91       	pop	r17
     cc4:	08 95       	ret

00000cc6 <ADC_voidInit>:
#include "ADC_config.h"
#include "ADC_private.h"


void ADC_voidInit(u8 copy_u8Channel)
{
     cc6:	df 93       	push	r29
     cc8:	cf 93       	push	r28
     cca:	0f 92       	push	r0
     ccc:	cd b7       	in	r28, 0x3d	; 61
     cce:	de b7       	in	r29, 0x3e	; 62
     cd0:	89 83       	std	Y+1, r24	; 0x01
	//1- Make Channel selected I/p
	CLEAR_BIT(DDRA,1);
     cd2:	aa e3       	ldi	r26, 0x3A	; 58
     cd4:	b0 e0       	ldi	r27, 0x00	; 0
     cd6:	ea e3       	ldi	r30, 0x3A	; 58
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	80 81       	ld	r24, Z
     cdc:	8d 7f       	andi	r24, 0xFD	; 253
     cde:	8c 93       	st	X, r24
		ADCSRA |= 0x04;
	#elif ADC_PRESCALER == 32
		ADCSRA &= 0xF8;
		ADCSRA |= 0x05;
	#elif ADC_PRESCALER == 64
		ADCSRA &= 0xF8;
     ce0:	a6 e2       	ldi	r26, 0x26	; 38
     ce2:	b0 e0       	ldi	r27, 0x00	; 0
     ce4:	e6 e2       	ldi	r30, 0x26	; 38
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	80 81       	ld	r24, Z
     cea:	88 7f       	andi	r24, 0xF8	; 248
     cec:	8c 93       	st	X, r24
		ADCSRA |= 0x06;
     cee:	a6 e2       	ldi	r26, 0x26	; 38
     cf0:	b0 e0       	ldi	r27, 0x00	; 0
     cf2:	e6 e2       	ldi	r30, 0x26	; 38
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	80 81       	ld	r24, Z
     cf8:	86 60       	ori	r24, 0x06	; 6
     cfa:	8c 93       	st	X, r24
		ADMUX &= 0x3F;
	#elif ADC_VOLT_REF == 1
		CLEAR_BIT(ADMUX, REFS1);
		SET_BIT(ADMUX, REFS0);
	#elif ADC_VOLT_REF == 3
		SET_BIT(ADMUX, REFS1);
     cfc:	a7 e2       	ldi	r26, 0x27	; 39
     cfe:	b0 e0       	ldi	r27, 0x00	; 0
     d00:	e7 e2       	ldi	r30, 0x27	; 39
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	80 81       	ld	r24, Z
     d06:	80 68       	ori	r24, 0x80	; 128
     d08:	8c 93       	st	X, r24
		SET_BIT(ADMUX, REFS0);
     d0a:	a7 e2       	ldi	r26, 0x27	; 39
     d0c:	b0 e0       	ldi	r27, 0x00	; 0
     d0e:	e7 e2       	ldi	r30, 0x27	; 39
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	80 81       	ld	r24, Z
     d14:	80 64       	ori	r24, 0x40	; 64
     d16:	8c 93       	st	X, r24
	#endif
	
	//4- Select Type of Storing of the output
	#if ADC_STORE == 0
		CLEAR_BIT(ADMUX, ADLAR);
     d18:	a7 e2       	ldi	r26, 0x27	; 39
     d1a:	b0 e0       	ldi	r27, 0x00	; 0
     d1c:	e7 e2       	ldi	r30, 0x27	; 39
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	80 81       	ld	r24, Z
     d22:	8f 7d       	andi	r24, 0xDF	; 223
     d24:	8c 93       	st	X, r24
	#else 
		SET_BIT(ADMUX, ADLAR);
	#endif 
	
	//5- Turn on ADC
	SET_BIT(ADCSRA, ADEN);
     d26:	a6 e2       	ldi	r26, 0x26	; 38
     d28:	b0 e0       	ldi	r27, 0x00	; 0
     d2a:	e6 e2       	ldi	r30, 0x26	; 38
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	80 81       	ld	r24, Z
     d30:	80 68       	ori	r24, 0x80	; 128
     d32:	8c 93       	st	X, r24
	
}
     d34:	0f 90       	pop	r0
     d36:	cf 91       	pop	r28
     d38:	df 91       	pop	r29
     d3a:	08 95       	ret

00000d3c <ADC_u16Read>:

u16  ADC_u16Read(void)
{
     d3c:	df 93       	push	r29
     d3e:	cf 93       	push	r28
     d40:	00 d0       	rcall	.+0      	; 0xd42 <ADC_u16Read+0x6>
     d42:	cd b7       	in	r28, 0x3d	; 61
     d44:	de b7       	in	r29, 0x3e	; 62
	u16 Return_val;
	//1- Activate Start of Conversion
	SET_BIT(ADCSRA, ADSC);
     d46:	a6 e2       	ldi	r26, 0x26	; 38
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e6 e2       	ldi	r30, 0x26	; 38
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	80 81       	ld	r24, Z
     d50:	80 64       	ori	r24, 0x40	; 64
     d52:	8c 93       	st	X, r24
	//2- Wait until conversion Ended
	while(GET_BIT(ADCSRA, ADIF)==0);
     d54:	e6 e2       	ldi	r30, 0x26	; 38
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	80 81       	ld	r24, Z
     d5a:	88 2f       	mov	r24, r24
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	80 71       	andi	r24, 0x10	; 16
     d60:	90 70       	andi	r25, 0x00	; 0
     d62:	95 95       	asr	r25
     d64:	87 95       	ror	r24
     d66:	95 95       	asr	r25
     d68:	87 95       	ror	r24
     d6a:	95 95       	asr	r25
     d6c:	87 95       	ror	r24
     d6e:	95 95       	asr	r25
     d70:	87 95       	ror	r24
     d72:	00 97       	sbiw	r24, 0x00	; 0
     d74:	79 f3       	breq	.-34     	; 0xd54 <ADC_u16Read+0x18>
	//3- Clear Interrupt Flag after Ended
	SET_BIT(ADCSRA, ADIF);
     d76:	a6 e2       	ldi	r26, 0x26	; 38
     d78:	b0 e0       	ldi	r27, 0x00	; 0
     d7a:	e6 e2       	ldi	r30, 0x26	; 38
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	80 81       	ld	r24, Z
     d80:	80 61       	ori	r24, 0x10	; 16
     d82:	8c 93       	st	X, r24
	//4- Read ADCL then ADCH in order
	Return_val = ADCL;
     d84:	e4 e2       	ldi	r30, 0x24	; 36
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	80 81       	ld	r24, Z
     d8a:	88 2f       	mov	r24, r24
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	9a 83       	std	Y+2, r25	; 0x02
     d90:	89 83       	std	Y+1, r24	; 0x01
	Return_val |= (ADCH << 8);
     d92:	e5 e2       	ldi	r30, 0x25	; 37
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	80 81       	ld	r24, Z
     d98:	88 2f       	mov	r24, r24
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	98 2f       	mov	r25, r24
     d9e:	88 27       	eor	r24, r24
     da0:	9c 01       	movw	r18, r24
     da2:	89 81       	ldd	r24, Y+1	; 0x01
     da4:	9a 81       	ldd	r25, Y+2	; 0x02
     da6:	82 2b       	or	r24, r18
     da8:	93 2b       	or	r25, r19
     daa:	9a 83       	std	Y+2, r25	; 0x02
     dac:	89 83       	std	Y+1, r24	; 0x01
	return Return_val;
     dae:	89 81       	ldd	r24, Y+1	; 0x01
     db0:	9a 81       	ldd	r25, Y+2	; 0x02
}
     db2:	0f 90       	pop	r0
     db4:	0f 90       	pop	r0
     db6:	cf 91       	pop	r28
     db8:	df 91       	pop	r29
     dba:	08 95       	ret

00000dbc <GPIO_voidSetPinDDR>:




	void GPIO_voidSetPinDDR (u8  copy_u8Port ,u8 copy_u8Pin , u8 copy_u8Mode )
	{
     dbc:	df 93       	push	r29
     dbe:	cf 93       	push	r28
     dc0:	00 d0       	rcall	.+0      	; 0xdc2 <GPIO_voidSetPinDDR+0x6>
     dc2:	00 d0       	rcall	.+0      	; 0xdc4 <GPIO_voidSetPinDDR+0x8>
     dc4:	0f 92       	push	r0
     dc6:	cd b7       	in	r28, 0x3d	; 61
     dc8:	de b7       	in	r29, 0x3e	; 62
     dca:	89 83       	std	Y+1, r24	; 0x01
     dcc:	6a 83       	std	Y+2, r22	; 0x02
     dce:	4b 83       	std	Y+3, r20	; 0x03
		switch(copy_u8Port)
     dd0:	89 81       	ldd	r24, Y+1	; 0x01
     dd2:	28 2f       	mov	r18, r24
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	3d 83       	std	Y+5, r19	; 0x05
     dd8:	2c 83       	std	Y+4, r18	; 0x04
     dda:	8c 81       	ldd	r24, Y+4	; 0x04
     ddc:	9d 81       	ldd	r25, Y+5	; 0x05
     dde:	81 30       	cpi	r24, 0x01	; 1
     de0:	91 05       	cpc	r25, r1
     de2:	09 f4       	brne	.+2      	; 0xde6 <GPIO_voidSetPinDDR+0x2a>
     de4:	43 c0       	rjmp	.+134    	; 0xe6c <GPIO_voidSetPinDDR+0xb0>
     de6:	2c 81       	ldd	r18, Y+4	; 0x04
     de8:	3d 81       	ldd	r19, Y+5	; 0x05
     dea:	22 30       	cpi	r18, 0x02	; 2
     dec:	31 05       	cpc	r19, r1
     dee:	2c f4       	brge	.+10     	; 0xdfa <GPIO_voidSetPinDDR+0x3e>
     df0:	8c 81       	ldd	r24, Y+4	; 0x04
     df2:	9d 81       	ldd	r25, Y+5	; 0x05
     df4:	00 97       	sbiw	r24, 0x00	; 0
     df6:	71 f0       	breq	.+28     	; 0xe14 <GPIO_voidSetPinDDR+0x58>
     df8:	bc c0       	rjmp	.+376    	; 0xf72 <GPIO_voidSetPinDDR+0x1b6>
     dfa:	2c 81       	ldd	r18, Y+4	; 0x04
     dfc:	3d 81       	ldd	r19, Y+5	; 0x05
     dfe:	22 30       	cpi	r18, 0x02	; 2
     e00:	31 05       	cpc	r19, r1
     e02:	09 f4       	brne	.+2      	; 0xe06 <GPIO_voidSetPinDDR+0x4a>
     e04:	5f c0       	rjmp	.+190    	; 0xec4 <GPIO_voidSetPinDDR+0x108>
     e06:	8c 81       	ldd	r24, Y+4	; 0x04
     e08:	9d 81       	ldd	r25, Y+5	; 0x05
     e0a:	83 30       	cpi	r24, 0x03	; 3
     e0c:	91 05       	cpc	r25, r1
     e0e:	09 f4       	brne	.+2      	; 0xe12 <GPIO_voidSetPinDDR+0x56>
     e10:	85 c0       	rjmp	.+266    	; 0xf1c <GPIO_voidSetPinDDR+0x160>
     e12:	af c0       	rjmp	.+350    	; 0xf72 <GPIO_voidSetPinDDR+0x1b6>
		{
			case GPIOA :
				if(copy_u8Mode ==OUTPUT )
     e14:	8b 81       	ldd	r24, Y+3	; 0x03
     e16:	81 30       	cpi	r24, 0x01	; 1
     e18:	a1 f4       	brne	.+40     	; 0xe42 <GPIO_voidSetPinDDR+0x86>
				{
					SET_BIT(DDRA ,copy_u8Pin);
     e1a:	aa e3       	ldi	r26, 0x3A	; 58
     e1c:	b0 e0       	ldi	r27, 0x00	; 0
     e1e:	ea e3       	ldi	r30, 0x3A	; 58
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	80 81       	ld	r24, Z
     e24:	48 2f       	mov	r20, r24
     e26:	8a 81       	ldd	r24, Y+2	; 0x02
     e28:	28 2f       	mov	r18, r24
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	02 2e       	mov	r0, r18
     e32:	02 c0       	rjmp	.+4      	; 0xe38 <GPIO_voidSetPinDDR+0x7c>
     e34:	88 0f       	add	r24, r24
     e36:	99 1f       	adc	r25, r25
     e38:	0a 94       	dec	r0
     e3a:	e2 f7       	brpl	.-8      	; 0xe34 <GPIO_voidSetPinDDR+0x78>
     e3c:	84 2b       	or	r24, r20
     e3e:	8c 93       	st	X, r24
     e40:	98 c0       	rjmp	.+304    	; 0xf72 <GPIO_voidSetPinDDR+0x1b6>
				}
				else {
					CLEAR_BIT(DDRA,copy_u8Pin);
     e42:	aa e3       	ldi	r26, 0x3A	; 58
     e44:	b0 e0       	ldi	r27, 0x00	; 0
     e46:	ea e3       	ldi	r30, 0x3A	; 58
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	80 81       	ld	r24, Z
     e4c:	48 2f       	mov	r20, r24
     e4e:	8a 81       	ldd	r24, Y+2	; 0x02
     e50:	28 2f       	mov	r18, r24
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	02 2e       	mov	r0, r18
     e5a:	02 c0       	rjmp	.+4      	; 0xe60 <GPIO_voidSetPinDDR+0xa4>
     e5c:	88 0f       	add	r24, r24
     e5e:	99 1f       	adc	r25, r25
     e60:	0a 94       	dec	r0
     e62:	e2 f7       	brpl	.-8      	; 0xe5c <GPIO_voidSetPinDDR+0xa0>
     e64:	80 95       	com	r24
     e66:	84 23       	and	r24, r20
     e68:	8c 93       	st	X, r24
     e6a:	83 c0       	rjmp	.+262    	; 0xf72 <GPIO_voidSetPinDDR+0x1b6>
				}
				break;
			case GPIOB :
				if(copy_u8Mode ==OUTPUT )
     e6c:	8b 81       	ldd	r24, Y+3	; 0x03
     e6e:	81 30       	cpi	r24, 0x01	; 1
     e70:	a1 f4       	brne	.+40     	; 0xe9a <GPIO_voidSetPinDDR+0xde>
				{
					SET_BIT(DDRB ,copy_u8Pin);
     e72:	a7 e3       	ldi	r26, 0x37	; 55
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	e7 e3       	ldi	r30, 0x37	; 55
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	48 2f       	mov	r20, r24
     e7e:	8a 81       	ldd	r24, Y+2	; 0x02
     e80:	28 2f       	mov	r18, r24
     e82:	30 e0       	ldi	r19, 0x00	; 0
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	02 2e       	mov	r0, r18
     e8a:	02 c0       	rjmp	.+4      	; 0xe90 <GPIO_voidSetPinDDR+0xd4>
     e8c:	88 0f       	add	r24, r24
     e8e:	99 1f       	adc	r25, r25
     e90:	0a 94       	dec	r0
     e92:	e2 f7       	brpl	.-8      	; 0xe8c <GPIO_voidSetPinDDR+0xd0>
     e94:	84 2b       	or	r24, r20
     e96:	8c 93       	st	X, r24
     e98:	6c c0       	rjmp	.+216    	; 0xf72 <GPIO_voidSetPinDDR+0x1b6>
				}
				else {
					CLEAR_BIT(DDRB,copy_u8Pin);
     e9a:	a7 e3       	ldi	r26, 0x37	; 55
     e9c:	b0 e0       	ldi	r27, 0x00	; 0
     e9e:	e7 e3       	ldi	r30, 0x37	; 55
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	48 2f       	mov	r20, r24
     ea6:	8a 81       	ldd	r24, Y+2	; 0x02
     ea8:	28 2f       	mov	r18, r24
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	02 2e       	mov	r0, r18
     eb2:	02 c0       	rjmp	.+4      	; 0xeb8 <GPIO_voidSetPinDDR+0xfc>
     eb4:	88 0f       	add	r24, r24
     eb6:	99 1f       	adc	r25, r25
     eb8:	0a 94       	dec	r0
     eba:	e2 f7       	brpl	.-8      	; 0xeb4 <GPIO_voidSetPinDDR+0xf8>
     ebc:	80 95       	com	r24
     ebe:	84 23       	and	r24, r20
     ec0:	8c 93       	st	X, r24
     ec2:	57 c0       	rjmp	.+174    	; 0xf72 <GPIO_voidSetPinDDR+0x1b6>
				}
				break;
			case GPIOC :
				if(copy_u8Mode ==OUTPUT )
     ec4:	8b 81       	ldd	r24, Y+3	; 0x03
     ec6:	81 30       	cpi	r24, 0x01	; 1
     ec8:	a1 f4       	brne	.+40     	; 0xef2 <GPIO_voidSetPinDDR+0x136>
				{
					SET_BIT(DDRC ,copy_u8Pin);
     eca:	a4 e3       	ldi	r26, 0x34	; 52
     ecc:	b0 e0       	ldi	r27, 0x00	; 0
     ece:	e4 e3       	ldi	r30, 0x34	; 52
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	48 2f       	mov	r20, r24
     ed6:	8a 81       	ldd	r24, Y+2	; 0x02
     ed8:	28 2f       	mov	r18, r24
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	02 2e       	mov	r0, r18
     ee2:	02 c0       	rjmp	.+4      	; 0xee8 <GPIO_voidSetPinDDR+0x12c>
     ee4:	88 0f       	add	r24, r24
     ee6:	99 1f       	adc	r25, r25
     ee8:	0a 94       	dec	r0
     eea:	e2 f7       	brpl	.-8      	; 0xee4 <GPIO_voidSetPinDDR+0x128>
     eec:	84 2b       	or	r24, r20
     eee:	8c 93       	st	X, r24
     ef0:	40 c0       	rjmp	.+128    	; 0xf72 <GPIO_voidSetPinDDR+0x1b6>
				}
				else {
					CLEAR_BIT(DDRC,copy_u8Pin);
     ef2:	a4 e3       	ldi	r26, 0x34	; 52
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	e4 e3       	ldi	r30, 0x34	; 52
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	48 2f       	mov	r20, r24
     efe:	8a 81       	ldd	r24, Y+2	; 0x02
     f00:	28 2f       	mov	r18, r24
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	02 2e       	mov	r0, r18
     f0a:	02 c0       	rjmp	.+4      	; 0xf10 <GPIO_voidSetPinDDR+0x154>
     f0c:	88 0f       	add	r24, r24
     f0e:	99 1f       	adc	r25, r25
     f10:	0a 94       	dec	r0
     f12:	e2 f7       	brpl	.-8      	; 0xf0c <GPIO_voidSetPinDDR+0x150>
     f14:	80 95       	com	r24
     f16:	84 23       	and	r24, r20
     f18:	8c 93       	st	X, r24
     f1a:	2b c0       	rjmp	.+86     	; 0xf72 <GPIO_voidSetPinDDR+0x1b6>
				}
				break;
			case GPIOD :
				if(copy_u8Mode ==OUTPUT )
     f1c:	8b 81       	ldd	r24, Y+3	; 0x03
     f1e:	81 30       	cpi	r24, 0x01	; 1
     f20:	a1 f4       	brne	.+40     	; 0xf4a <GPIO_voidSetPinDDR+0x18e>
				{
					SET_BIT(DDRD ,copy_u8Pin);
     f22:	a1 e3       	ldi	r26, 0x31	; 49
     f24:	b0 e0       	ldi	r27, 0x00	; 0
     f26:	e1 e3       	ldi	r30, 0x31	; 49
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	80 81       	ld	r24, Z
     f2c:	48 2f       	mov	r20, r24
     f2e:	8a 81       	ldd	r24, Y+2	; 0x02
     f30:	28 2f       	mov	r18, r24
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	02 2e       	mov	r0, r18
     f3a:	02 c0       	rjmp	.+4      	; 0xf40 <GPIO_voidSetPinDDR+0x184>
     f3c:	88 0f       	add	r24, r24
     f3e:	99 1f       	adc	r25, r25
     f40:	0a 94       	dec	r0
     f42:	e2 f7       	brpl	.-8      	; 0xf3c <GPIO_voidSetPinDDR+0x180>
     f44:	84 2b       	or	r24, r20
     f46:	8c 93       	st	X, r24
     f48:	14 c0       	rjmp	.+40     	; 0xf72 <GPIO_voidSetPinDDR+0x1b6>
				}
				else {
					CLEAR_BIT(DDRD,copy_u8Pin);
     f4a:	a1 e3       	ldi	r26, 0x31	; 49
     f4c:	b0 e0       	ldi	r27, 0x00	; 0
     f4e:	e1 e3       	ldi	r30, 0x31	; 49
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	48 2f       	mov	r20, r24
     f56:	8a 81       	ldd	r24, Y+2	; 0x02
     f58:	28 2f       	mov	r18, r24
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	02 2e       	mov	r0, r18
     f62:	02 c0       	rjmp	.+4      	; 0xf68 <GPIO_voidSetPinDDR+0x1ac>
     f64:	88 0f       	add	r24, r24
     f66:	99 1f       	adc	r25, r25
     f68:	0a 94       	dec	r0
     f6a:	e2 f7       	brpl	.-8      	; 0xf64 <GPIO_voidSetPinDDR+0x1a8>
     f6c:	80 95       	com	r24
     f6e:	84 23       	and	r24, r20
     f70:	8c 93       	st	X, r24
				}
				break;	
			default:
				break;
		}
	}
     f72:	0f 90       	pop	r0
     f74:	0f 90       	pop	r0
     f76:	0f 90       	pop	r0
     f78:	0f 90       	pop	r0
     f7a:	0f 90       	pop	r0
     f7c:	cf 91       	pop	r28
     f7e:	df 91       	pop	r29
     f80:	08 95       	ret

00000f82 <GPIO_voidWritePin>:
	
	void GPIO_voidWritePin (u8  copy_u8Port ,u8 copy_u8Pin , u8 copy_u8Value )
	{
     f82:	df 93       	push	r29
     f84:	cf 93       	push	r28
     f86:	00 d0       	rcall	.+0      	; 0xf88 <GPIO_voidWritePin+0x6>
     f88:	00 d0       	rcall	.+0      	; 0xf8a <GPIO_voidWritePin+0x8>
     f8a:	0f 92       	push	r0
     f8c:	cd b7       	in	r28, 0x3d	; 61
     f8e:	de b7       	in	r29, 0x3e	; 62
     f90:	89 83       	std	Y+1, r24	; 0x01
     f92:	6a 83       	std	Y+2, r22	; 0x02
     f94:	4b 83       	std	Y+3, r20	; 0x03
		switch(copy_u8Port)
     f96:	89 81       	ldd	r24, Y+1	; 0x01
     f98:	28 2f       	mov	r18, r24
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	3d 83       	std	Y+5, r19	; 0x05
     f9e:	2c 83       	std	Y+4, r18	; 0x04
     fa0:	8c 81       	ldd	r24, Y+4	; 0x04
     fa2:	9d 81       	ldd	r25, Y+5	; 0x05
     fa4:	81 30       	cpi	r24, 0x01	; 1
     fa6:	91 05       	cpc	r25, r1
     fa8:	09 f4       	brne	.+2      	; 0xfac <GPIO_voidWritePin+0x2a>
     faa:	43 c0       	rjmp	.+134    	; 0x1032 <GPIO_voidWritePin+0xb0>
     fac:	2c 81       	ldd	r18, Y+4	; 0x04
     fae:	3d 81       	ldd	r19, Y+5	; 0x05
     fb0:	22 30       	cpi	r18, 0x02	; 2
     fb2:	31 05       	cpc	r19, r1
     fb4:	2c f4       	brge	.+10     	; 0xfc0 <GPIO_voidWritePin+0x3e>
     fb6:	8c 81       	ldd	r24, Y+4	; 0x04
     fb8:	9d 81       	ldd	r25, Y+5	; 0x05
     fba:	00 97       	sbiw	r24, 0x00	; 0
     fbc:	71 f0       	breq	.+28     	; 0xfda <GPIO_voidWritePin+0x58>
     fbe:	bc c0       	rjmp	.+376    	; 0x1138 <GPIO_voidWritePin+0x1b6>
     fc0:	2c 81       	ldd	r18, Y+4	; 0x04
     fc2:	3d 81       	ldd	r19, Y+5	; 0x05
     fc4:	22 30       	cpi	r18, 0x02	; 2
     fc6:	31 05       	cpc	r19, r1
     fc8:	09 f4       	brne	.+2      	; 0xfcc <GPIO_voidWritePin+0x4a>
     fca:	5f c0       	rjmp	.+190    	; 0x108a <GPIO_voidWritePin+0x108>
     fcc:	8c 81       	ldd	r24, Y+4	; 0x04
     fce:	9d 81       	ldd	r25, Y+5	; 0x05
     fd0:	83 30       	cpi	r24, 0x03	; 3
     fd2:	91 05       	cpc	r25, r1
     fd4:	09 f4       	brne	.+2      	; 0xfd8 <GPIO_voidWritePin+0x56>
     fd6:	85 c0       	rjmp	.+266    	; 0x10e2 <GPIO_voidWritePin+0x160>
     fd8:	af c0       	rjmp	.+350    	; 0x1138 <GPIO_voidWritePin+0x1b6>
		{
			case GPIOA :
				if(copy_u8Value ==HIGH )
     fda:	8b 81       	ldd	r24, Y+3	; 0x03
     fdc:	81 30       	cpi	r24, 0x01	; 1
     fde:	a1 f4       	brne	.+40     	; 0x1008 <GPIO_voidWritePin+0x86>
				{
					SET_BIT(PORTA ,copy_u8Pin);
     fe0:	ab e3       	ldi	r26, 0x3B	; 59
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	eb e3       	ldi	r30, 0x3B	; 59
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	48 2f       	mov	r20, r24
     fec:	8a 81       	ldd	r24, Y+2	; 0x02
     fee:	28 2f       	mov	r18, r24
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	02 2e       	mov	r0, r18
     ff8:	02 c0       	rjmp	.+4      	; 0xffe <GPIO_voidWritePin+0x7c>
     ffa:	88 0f       	add	r24, r24
     ffc:	99 1f       	adc	r25, r25
     ffe:	0a 94       	dec	r0
    1000:	e2 f7       	brpl	.-8      	; 0xffa <GPIO_voidWritePin+0x78>
    1002:	84 2b       	or	r24, r20
    1004:	8c 93       	st	X, r24
    1006:	98 c0       	rjmp	.+304    	; 0x1138 <GPIO_voidWritePin+0x1b6>
				}
				else {
					CLEAR_BIT(PORTA,copy_u8Pin);
    1008:	ab e3       	ldi	r26, 0x3B	; 59
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	eb e3       	ldi	r30, 0x3B	; 59
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	48 2f       	mov	r20, r24
    1014:	8a 81       	ldd	r24, Y+2	; 0x02
    1016:	28 2f       	mov	r18, r24
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	02 2e       	mov	r0, r18
    1020:	02 c0       	rjmp	.+4      	; 0x1026 <GPIO_voidWritePin+0xa4>
    1022:	88 0f       	add	r24, r24
    1024:	99 1f       	adc	r25, r25
    1026:	0a 94       	dec	r0
    1028:	e2 f7       	brpl	.-8      	; 0x1022 <GPIO_voidWritePin+0xa0>
    102a:	80 95       	com	r24
    102c:	84 23       	and	r24, r20
    102e:	8c 93       	st	X, r24
    1030:	83 c0       	rjmp	.+262    	; 0x1138 <GPIO_voidWritePin+0x1b6>
				}
				break;
			case GPIOB :
				if(copy_u8Value ==HIGH )
    1032:	8b 81       	ldd	r24, Y+3	; 0x03
    1034:	81 30       	cpi	r24, 0x01	; 1
    1036:	a1 f4       	brne	.+40     	; 0x1060 <GPIO_voidWritePin+0xde>
				{
					SET_BIT(PORTB ,copy_u8Pin);
    1038:	a8 e3       	ldi	r26, 0x38	; 56
    103a:	b0 e0       	ldi	r27, 0x00	; 0
    103c:	e8 e3       	ldi	r30, 0x38	; 56
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	48 2f       	mov	r20, r24
    1044:	8a 81       	ldd	r24, Y+2	; 0x02
    1046:	28 2f       	mov	r18, r24
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	02 2e       	mov	r0, r18
    1050:	02 c0       	rjmp	.+4      	; 0x1056 <GPIO_voidWritePin+0xd4>
    1052:	88 0f       	add	r24, r24
    1054:	99 1f       	adc	r25, r25
    1056:	0a 94       	dec	r0
    1058:	e2 f7       	brpl	.-8      	; 0x1052 <GPIO_voidWritePin+0xd0>
    105a:	84 2b       	or	r24, r20
    105c:	8c 93       	st	X, r24
    105e:	6c c0       	rjmp	.+216    	; 0x1138 <GPIO_voidWritePin+0x1b6>
				}
				else {
					CLEAR_BIT(PORTB,copy_u8Pin);
    1060:	a8 e3       	ldi	r26, 0x38	; 56
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	e8 e3       	ldi	r30, 0x38	; 56
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	48 2f       	mov	r20, r24
    106c:	8a 81       	ldd	r24, Y+2	; 0x02
    106e:	28 2f       	mov	r18, r24
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	02 2e       	mov	r0, r18
    1078:	02 c0       	rjmp	.+4      	; 0x107e <GPIO_voidWritePin+0xfc>
    107a:	88 0f       	add	r24, r24
    107c:	99 1f       	adc	r25, r25
    107e:	0a 94       	dec	r0
    1080:	e2 f7       	brpl	.-8      	; 0x107a <GPIO_voidWritePin+0xf8>
    1082:	80 95       	com	r24
    1084:	84 23       	and	r24, r20
    1086:	8c 93       	st	X, r24
    1088:	57 c0       	rjmp	.+174    	; 0x1138 <GPIO_voidWritePin+0x1b6>
				}
				break;
			case GPIOC :
				if(copy_u8Value ==HIGH )
    108a:	8b 81       	ldd	r24, Y+3	; 0x03
    108c:	81 30       	cpi	r24, 0x01	; 1
    108e:	a1 f4       	brne	.+40     	; 0x10b8 <GPIO_voidWritePin+0x136>
				{
					SET_BIT(PORTC ,copy_u8Pin);
    1090:	a5 e3       	ldi	r26, 0x35	; 53
    1092:	b0 e0       	ldi	r27, 0x00	; 0
    1094:	e5 e3       	ldi	r30, 0x35	; 53
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	80 81       	ld	r24, Z
    109a:	48 2f       	mov	r20, r24
    109c:	8a 81       	ldd	r24, Y+2	; 0x02
    109e:	28 2f       	mov	r18, r24
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	02 2e       	mov	r0, r18
    10a8:	02 c0       	rjmp	.+4      	; 0x10ae <GPIO_voidWritePin+0x12c>
    10aa:	88 0f       	add	r24, r24
    10ac:	99 1f       	adc	r25, r25
    10ae:	0a 94       	dec	r0
    10b0:	e2 f7       	brpl	.-8      	; 0x10aa <GPIO_voidWritePin+0x128>
    10b2:	84 2b       	or	r24, r20
    10b4:	8c 93       	st	X, r24
    10b6:	40 c0       	rjmp	.+128    	; 0x1138 <GPIO_voidWritePin+0x1b6>
				}
				else {
					CLEAR_BIT(PORTC,copy_u8Pin);
    10b8:	a5 e3       	ldi	r26, 0x35	; 53
    10ba:	b0 e0       	ldi	r27, 0x00	; 0
    10bc:	e5 e3       	ldi	r30, 0x35	; 53
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	80 81       	ld	r24, Z
    10c2:	48 2f       	mov	r20, r24
    10c4:	8a 81       	ldd	r24, Y+2	; 0x02
    10c6:	28 2f       	mov	r18, r24
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	02 2e       	mov	r0, r18
    10d0:	02 c0       	rjmp	.+4      	; 0x10d6 <GPIO_voidWritePin+0x154>
    10d2:	88 0f       	add	r24, r24
    10d4:	99 1f       	adc	r25, r25
    10d6:	0a 94       	dec	r0
    10d8:	e2 f7       	brpl	.-8      	; 0x10d2 <GPIO_voidWritePin+0x150>
    10da:	80 95       	com	r24
    10dc:	84 23       	and	r24, r20
    10de:	8c 93       	st	X, r24
    10e0:	2b c0       	rjmp	.+86     	; 0x1138 <GPIO_voidWritePin+0x1b6>
				}
				break;
			case GPIOD :
				if(copy_u8Value == HIGH )
    10e2:	8b 81       	ldd	r24, Y+3	; 0x03
    10e4:	81 30       	cpi	r24, 0x01	; 1
    10e6:	a1 f4       	brne	.+40     	; 0x1110 <GPIO_voidWritePin+0x18e>
				{
					SET_BIT(PORTD ,copy_u8Pin);
    10e8:	a2 e3       	ldi	r26, 0x32	; 50
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	e2 e3       	ldi	r30, 0x32	; 50
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	48 2f       	mov	r20, r24
    10f4:	8a 81       	ldd	r24, Y+2	; 0x02
    10f6:	28 2f       	mov	r18, r24
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	02 2e       	mov	r0, r18
    1100:	02 c0       	rjmp	.+4      	; 0x1106 <GPIO_voidWritePin+0x184>
    1102:	88 0f       	add	r24, r24
    1104:	99 1f       	adc	r25, r25
    1106:	0a 94       	dec	r0
    1108:	e2 f7       	brpl	.-8      	; 0x1102 <GPIO_voidWritePin+0x180>
    110a:	84 2b       	or	r24, r20
    110c:	8c 93       	st	X, r24
    110e:	14 c0       	rjmp	.+40     	; 0x1138 <GPIO_voidWritePin+0x1b6>
				}
				else {
					CLEAR_BIT(PORTD,copy_u8Pin);
    1110:	a2 e3       	ldi	r26, 0x32	; 50
    1112:	b0 e0       	ldi	r27, 0x00	; 0
    1114:	e2 e3       	ldi	r30, 0x32	; 50
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	80 81       	ld	r24, Z
    111a:	48 2f       	mov	r20, r24
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	28 2f       	mov	r18, r24
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	02 2e       	mov	r0, r18
    1128:	02 c0       	rjmp	.+4      	; 0x112e <GPIO_voidWritePin+0x1ac>
    112a:	88 0f       	add	r24, r24
    112c:	99 1f       	adc	r25, r25
    112e:	0a 94       	dec	r0
    1130:	e2 f7       	brpl	.-8      	; 0x112a <GPIO_voidWritePin+0x1a8>
    1132:	80 95       	com	r24
    1134:	84 23       	and	r24, r20
    1136:	8c 93       	st	X, r24
				break;	
			default:
				break;
		}
		
	}
    1138:	0f 90       	pop	r0
    113a:	0f 90       	pop	r0
    113c:	0f 90       	pop	r0
    113e:	0f 90       	pop	r0
    1140:	0f 90       	pop	r0
    1142:	cf 91       	pop	r28
    1144:	df 91       	pop	r29
    1146:	08 95       	ret

00001148 <GPIO_u8ReadPin>:
	
	u8	GPIO_u8ReadPin(	u8  copy_u8Port ,u8 copy_u8Pin )
	{
    1148:	df 93       	push	r29
    114a:	cf 93       	push	r28
    114c:	00 d0       	rcall	.+0      	; 0x114e <GPIO_u8ReadPin+0x6>
    114e:	00 d0       	rcall	.+0      	; 0x1150 <GPIO_u8ReadPin+0x8>
    1150:	0f 92       	push	r0
    1152:	cd b7       	in	r28, 0x3d	; 61
    1154:	de b7       	in	r29, 0x3e	; 62
    1156:	8a 83       	std	Y+2, r24	; 0x02
    1158:	6b 83       	std	Y+3, r22	; 0x03
		u8 Local_u8ReturnValue ;
		switch(copy_u8Port){
    115a:	8a 81       	ldd	r24, Y+2	; 0x02
    115c:	28 2f       	mov	r18, r24
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	3d 83       	std	Y+5, r19	; 0x05
    1162:	2c 83       	std	Y+4, r18	; 0x04
    1164:	4c 81       	ldd	r20, Y+4	; 0x04
    1166:	5d 81       	ldd	r21, Y+5	; 0x05
    1168:	41 30       	cpi	r20, 0x01	; 1
    116a:	51 05       	cpc	r21, r1
    116c:	b1 f1       	breq	.+108    	; 0x11da <GPIO_u8ReadPin+0x92>
    116e:	8c 81       	ldd	r24, Y+4	; 0x04
    1170:	9d 81       	ldd	r25, Y+5	; 0x05
    1172:	82 30       	cpi	r24, 0x02	; 2
    1174:	91 05       	cpc	r25, r1
    1176:	34 f4       	brge	.+12     	; 0x1184 <GPIO_u8ReadPin+0x3c>
    1178:	2c 81       	ldd	r18, Y+4	; 0x04
    117a:	3d 81       	ldd	r19, Y+5	; 0x05
    117c:	21 15       	cp	r18, r1
    117e:	31 05       	cpc	r19, r1
    1180:	71 f0       	breq	.+28     	; 0x119e <GPIO_u8ReadPin+0x56>
    1182:	84 c0       	rjmp	.+264    	; 0x128c <GPIO_u8ReadPin+0x144>
    1184:	4c 81       	ldd	r20, Y+4	; 0x04
    1186:	5d 81       	ldd	r21, Y+5	; 0x05
    1188:	42 30       	cpi	r20, 0x02	; 2
    118a:	51 05       	cpc	r21, r1
    118c:	09 f4       	brne	.+2      	; 0x1190 <GPIO_u8ReadPin+0x48>
    118e:	43 c0       	rjmp	.+134    	; 0x1216 <GPIO_u8ReadPin+0xce>
    1190:	8c 81       	ldd	r24, Y+4	; 0x04
    1192:	9d 81       	ldd	r25, Y+5	; 0x05
    1194:	83 30       	cpi	r24, 0x03	; 3
    1196:	91 05       	cpc	r25, r1
    1198:	09 f4       	brne	.+2      	; 0x119c <GPIO_u8ReadPin+0x54>
    119a:	5b c0       	rjmp	.+182    	; 0x1252 <GPIO_u8ReadPin+0x10a>
    119c:	77 c0       	rjmp	.+238    	; 0x128c <GPIO_u8ReadPin+0x144>
			case GPIOA :
				Local_u8ReturnValue = GET_BIT(PINA,copy_u8Pin);
    119e:	e9 e3       	ldi	r30, 0x39	; 57
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	80 81       	ld	r24, Z
    11a4:	48 2f       	mov	r20, r24
    11a6:	50 e0       	ldi	r21, 0x00	; 0
    11a8:	8b 81       	ldd	r24, Y+3	; 0x03
    11aa:	28 2f       	mov	r18, r24
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	02 c0       	rjmp	.+4      	; 0x11b8 <GPIO_u8ReadPin+0x70>
    11b4:	88 0f       	add	r24, r24
    11b6:	99 1f       	adc	r25, r25
    11b8:	2a 95       	dec	r18
    11ba:	e2 f7       	brpl	.-8      	; 0x11b4 <GPIO_u8ReadPin+0x6c>
    11bc:	9a 01       	movw	r18, r20
    11be:	28 23       	and	r18, r24
    11c0:	39 23       	and	r19, r25
    11c2:	8b 81       	ldd	r24, Y+3	; 0x03
    11c4:	88 2f       	mov	r24, r24
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	a9 01       	movw	r20, r18
    11ca:	02 c0       	rjmp	.+4      	; 0x11d0 <GPIO_u8ReadPin+0x88>
    11cc:	55 95       	asr	r21
    11ce:	47 95       	ror	r20
    11d0:	8a 95       	dec	r24
    11d2:	e2 f7       	brpl	.-8      	; 0x11cc <GPIO_u8ReadPin+0x84>
    11d4:	ca 01       	movw	r24, r20
    11d6:	89 83       	std	Y+1, r24	; 0x01
    11d8:	59 c0       	rjmp	.+178    	; 0x128c <GPIO_u8ReadPin+0x144>
				break ;
			case GPIOB :
				Local_u8ReturnValue = GET_BIT(PINB,copy_u8Pin);
    11da:	e6 e3       	ldi	r30, 0x36	; 54
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
    11e0:	48 2f       	mov	r20, r24
    11e2:	50 e0       	ldi	r21, 0x00	; 0
    11e4:	8b 81       	ldd	r24, Y+3	; 0x03
    11e6:	28 2f       	mov	r18, r24
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	02 c0       	rjmp	.+4      	; 0x11f4 <GPIO_u8ReadPin+0xac>
    11f0:	88 0f       	add	r24, r24
    11f2:	99 1f       	adc	r25, r25
    11f4:	2a 95       	dec	r18
    11f6:	e2 f7       	brpl	.-8      	; 0x11f0 <GPIO_u8ReadPin+0xa8>
    11f8:	9a 01       	movw	r18, r20
    11fa:	28 23       	and	r18, r24
    11fc:	39 23       	and	r19, r25
    11fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1200:	88 2f       	mov	r24, r24
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	a9 01       	movw	r20, r18
    1206:	02 c0       	rjmp	.+4      	; 0x120c <GPIO_u8ReadPin+0xc4>
    1208:	55 95       	asr	r21
    120a:	47 95       	ror	r20
    120c:	8a 95       	dec	r24
    120e:	e2 f7       	brpl	.-8      	; 0x1208 <GPIO_u8ReadPin+0xc0>
    1210:	ca 01       	movw	r24, r20
    1212:	89 83       	std	Y+1, r24	; 0x01
    1214:	3b c0       	rjmp	.+118    	; 0x128c <GPIO_u8ReadPin+0x144>
				break ;
			case GPIOC :
				Local_u8ReturnValue = GET_BIT(PINC,copy_u8Pin);
    1216:	e3 e3       	ldi	r30, 0x33	; 51
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	80 81       	ld	r24, Z
    121c:	48 2f       	mov	r20, r24
    121e:	50 e0       	ldi	r21, 0x00	; 0
    1220:	8b 81       	ldd	r24, Y+3	; 0x03
    1222:	28 2f       	mov	r18, r24
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	02 c0       	rjmp	.+4      	; 0x1230 <GPIO_u8ReadPin+0xe8>
    122c:	88 0f       	add	r24, r24
    122e:	99 1f       	adc	r25, r25
    1230:	2a 95       	dec	r18
    1232:	e2 f7       	brpl	.-8      	; 0x122c <GPIO_u8ReadPin+0xe4>
    1234:	9a 01       	movw	r18, r20
    1236:	28 23       	and	r18, r24
    1238:	39 23       	and	r19, r25
    123a:	8b 81       	ldd	r24, Y+3	; 0x03
    123c:	88 2f       	mov	r24, r24
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	a9 01       	movw	r20, r18
    1242:	02 c0       	rjmp	.+4      	; 0x1248 <GPIO_u8ReadPin+0x100>
    1244:	55 95       	asr	r21
    1246:	47 95       	ror	r20
    1248:	8a 95       	dec	r24
    124a:	e2 f7       	brpl	.-8      	; 0x1244 <GPIO_u8ReadPin+0xfc>
    124c:	ca 01       	movw	r24, r20
    124e:	89 83       	std	Y+1, r24	; 0x01
    1250:	1d c0       	rjmp	.+58     	; 0x128c <GPIO_u8ReadPin+0x144>
				break ;
			case GPIOD :
				Local_u8ReturnValue = GET_BIT(PIND,copy_u8Pin);
    1252:	e0 e3       	ldi	r30, 0x30	; 48
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	48 2f       	mov	r20, r24
    125a:	50 e0       	ldi	r21, 0x00	; 0
    125c:	8b 81       	ldd	r24, Y+3	; 0x03
    125e:	28 2f       	mov	r18, r24
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	02 c0       	rjmp	.+4      	; 0x126c <GPIO_u8ReadPin+0x124>
    1268:	88 0f       	add	r24, r24
    126a:	99 1f       	adc	r25, r25
    126c:	2a 95       	dec	r18
    126e:	e2 f7       	brpl	.-8      	; 0x1268 <GPIO_u8ReadPin+0x120>
    1270:	9a 01       	movw	r18, r20
    1272:	28 23       	and	r18, r24
    1274:	39 23       	and	r19, r25
    1276:	8b 81       	ldd	r24, Y+3	; 0x03
    1278:	88 2f       	mov	r24, r24
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	a9 01       	movw	r20, r18
    127e:	02 c0       	rjmp	.+4      	; 0x1284 <GPIO_u8ReadPin+0x13c>
    1280:	55 95       	asr	r21
    1282:	47 95       	ror	r20
    1284:	8a 95       	dec	r24
    1286:	e2 f7       	brpl	.-8      	; 0x1280 <GPIO_u8ReadPin+0x138>
    1288:	ca 01       	movw	r24, r20
    128a:	89 83       	std	Y+1, r24	; 0x01
				break ;
			default:
			break;
		}
		return Local_u8ReturnValue ;
    128c:	89 81       	ldd	r24, Y+1	; 0x01
		
	}
    128e:	0f 90       	pop	r0
    1290:	0f 90       	pop	r0
    1292:	0f 90       	pop	r0
    1294:	0f 90       	pop	r0
    1296:	0f 90       	pop	r0
    1298:	cf 91       	pop	r28
    129a:	df 91       	pop	r29
    129c:	08 95       	ret

0000129e <GPIO_voidTogPin>:
	
	void GPIO_voidTogPin 	( u8 copy_u8Port , u8 copy_u8Pin )
	{
    129e:	df 93       	push	r29
    12a0:	cf 93       	push	r28
    12a2:	00 d0       	rcall	.+0      	; 0x12a4 <GPIO_voidTogPin+0x6>
    12a4:	00 d0       	rcall	.+0      	; 0x12a6 <GPIO_voidTogPin+0x8>
    12a6:	cd b7       	in	r28, 0x3d	; 61
    12a8:	de b7       	in	r29, 0x3e	; 62
    12aa:	89 83       	std	Y+1, r24	; 0x01
    12ac:	6a 83       	std	Y+2, r22	; 0x02
		switch(copy_u8Port){
    12ae:	89 81       	ldd	r24, Y+1	; 0x01
    12b0:	28 2f       	mov	r18, r24
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	3c 83       	std	Y+4, r19	; 0x04
    12b6:	2b 83       	std	Y+3, r18	; 0x03
    12b8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ba:	9c 81       	ldd	r25, Y+4	; 0x04
    12bc:	81 30       	cpi	r24, 0x01	; 1
    12be:	91 05       	cpc	r25, r1
    12c0:	49 f1       	breq	.+82     	; 0x1314 <GPIO_voidTogPin+0x76>
    12c2:	2b 81       	ldd	r18, Y+3	; 0x03
    12c4:	3c 81       	ldd	r19, Y+4	; 0x04
    12c6:	22 30       	cpi	r18, 0x02	; 2
    12c8:	31 05       	cpc	r19, r1
    12ca:	2c f4       	brge	.+10     	; 0x12d6 <GPIO_voidTogPin+0x38>
    12cc:	8b 81       	ldd	r24, Y+3	; 0x03
    12ce:	9c 81       	ldd	r25, Y+4	; 0x04
    12d0:	00 97       	sbiw	r24, 0x00	; 0
    12d2:	61 f0       	breq	.+24     	; 0x12ec <GPIO_voidTogPin+0x4e>
    12d4:	5a c0       	rjmp	.+180    	; 0x138a <GPIO_voidTogPin+0xec>
    12d6:	2b 81       	ldd	r18, Y+3	; 0x03
    12d8:	3c 81       	ldd	r19, Y+4	; 0x04
    12da:	22 30       	cpi	r18, 0x02	; 2
    12dc:	31 05       	cpc	r19, r1
    12de:	71 f1       	breq	.+92     	; 0x133c <GPIO_voidTogPin+0x9e>
    12e0:	8b 81       	ldd	r24, Y+3	; 0x03
    12e2:	9c 81       	ldd	r25, Y+4	; 0x04
    12e4:	83 30       	cpi	r24, 0x03	; 3
    12e6:	91 05       	cpc	r25, r1
    12e8:	e9 f1       	breq	.+122    	; 0x1364 <GPIO_voidTogPin+0xc6>
    12ea:	4f c0       	rjmp	.+158    	; 0x138a <GPIO_voidTogPin+0xec>
			case GPIOA :
				TOG_BIT(PORTA,copy_u8Pin);
    12ec:	ab e3       	ldi	r26, 0x3B	; 59
    12ee:	b0 e0       	ldi	r27, 0x00	; 0
    12f0:	eb e3       	ldi	r30, 0x3B	; 59
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	80 81       	ld	r24, Z
    12f6:	48 2f       	mov	r20, r24
    12f8:	8a 81       	ldd	r24, Y+2	; 0x02
    12fa:	28 2f       	mov	r18, r24
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	02 2e       	mov	r0, r18
    1304:	02 c0       	rjmp	.+4      	; 0x130a <GPIO_voidTogPin+0x6c>
    1306:	88 0f       	add	r24, r24
    1308:	99 1f       	adc	r25, r25
    130a:	0a 94       	dec	r0
    130c:	e2 f7       	brpl	.-8      	; 0x1306 <GPIO_voidTogPin+0x68>
    130e:	84 27       	eor	r24, r20
    1310:	8c 93       	st	X, r24
    1312:	3b c0       	rjmp	.+118    	; 0x138a <GPIO_voidTogPin+0xec>
				break ;             
			case GPIOB :            
				TOG_BIT(PORTB,copy_u8Pin);
    1314:	a8 e3       	ldi	r26, 0x38	; 56
    1316:	b0 e0       	ldi	r27, 0x00	; 0
    1318:	e8 e3       	ldi	r30, 0x38	; 56
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	80 81       	ld	r24, Z
    131e:	48 2f       	mov	r20, r24
    1320:	8a 81       	ldd	r24, Y+2	; 0x02
    1322:	28 2f       	mov	r18, r24
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	02 2e       	mov	r0, r18
    132c:	02 c0       	rjmp	.+4      	; 0x1332 <GPIO_voidTogPin+0x94>
    132e:	88 0f       	add	r24, r24
    1330:	99 1f       	adc	r25, r25
    1332:	0a 94       	dec	r0
    1334:	e2 f7       	brpl	.-8      	; 0x132e <GPIO_voidTogPin+0x90>
    1336:	84 27       	eor	r24, r20
    1338:	8c 93       	st	X, r24
    133a:	27 c0       	rjmp	.+78     	; 0x138a <GPIO_voidTogPin+0xec>
				break ;             
			case GPIOC :            
				TOG_BIT(PORTC,copy_u8Pin);
    133c:	a5 e3       	ldi	r26, 0x35	; 53
    133e:	b0 e0       	ldi	r27, 0x00	; 0
    1340:	e5 e3       	ldi	r30, 0x35	; 53
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	80 81       	ld	r24, Z
    1346:	48 2f       	mov	r20, r24
    1348:	8a 81       	ldd	r24, Y+2	; 0x02
    134a:	28 2f       	mov	r18, r24
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	02 2e       	mov	r0, r18
    1354:	02 c0       	rjmp	.+4      	; 0x135a <GPIO_voidTogPin+0xbc>
    1356:	88 0f       	add	r24, r24
    1358:	99 1f       	adc	r25, r25
    135a:	0a 94       	dec	r0
    135c:	e2 f7       	brpl	.-8      	; 0x1356 <GPIO_voidTogPin+0xb8>
    135e:	84 27       	eor	r24, r20
    1360:	8c 93       	st	X, r24
    1362:	13 c0       	rjmp	.+38     	; 0x138a <GPIO_voidTogPin+0xec>
				break ;             
			case GPIOD : 
				TOG_BIT(PORTD,copy_u8Pin);
    1364:	a2 e3       	ldi	r26, 0x32	; 50
    1366:	b0 e0       	ldi	r27, 0x00	; 0
    1368:	e2 e3       	ldi	r30, 0x32	; 50
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	80 81       	ld	r24, Z
    136e:	48 2f       	mov	r20, r24
    1370:	8a 81       	ldd	r24, Y+2	; 0x02
    1372:	28 2f       	mov	r18, r24
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	81 e0       	ldi	r24, 0x01	; 1
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	02 2e       	mov	r0, r18
    137c:	02 c0       	rjmp	.+4      	; 0x1382 <GPIO_voidTogPin+0xe4>
    137e:	88 0f       	add	r24, r24
    1380:	99 1f       	adc	r25, r25
    1382:	0a 94       	dec	r0
    1384:	e2 f7       	brpl	.-8      	; 0x137e <GPIO_voidTogPin+0xe0>
    1386:	84 27       	eor	r24, r20
    1388:	8c 93       	st	X, r24
			default:
			break;
		}
		
		
	}
    138a:	0f 90       	pop	r0
    138c:	0f 90       	pop	r0
    138e:	0f 90       	pop	r0
    1390:	0f 90       	pop	r0
    1392:	cf 91       	pop	r28
    1394:	df 91       	pop	r29
    1396:	08 95       	ret

00001398 <GPIO_voidSetPortDDR>:
	void GPIO_voidSetPortDDR (u8  copy_u8Port , u8 copy_u8Mode )
	{
    1398:	df 93       	push	r29
    139a:	cf 93       	push	r28
    139c:	00 d0       	rcall	.+0      	; 0x139e <GPIO_voidSetPortDDR+0x6>
    139e:	00 d0       	rcall	.+0      	; 0x13a0 <GPIO_voidSetPortDDR+0x8>
    13a0:	cd b7       	in	r28, 0x3d	; 61
    13a2:	de b7       	in	r29, 0x3e	; 62
    13a4:	89 83       	std	Y+1, r24	; 0x01
    13a6:	6a 83       	std	Y+2, r22	; 0x02
		switch(copy_u8Port)
    13a8:	89 81       	ldd	r24, Y+1	; 0x01
    13aa:	28 2f       	mov	r18, r24
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	3c 83       	std	Y+4, r19	; 0x04
    13b0:	2b 83       	std	Y+3, r18	; 0x03
    13b2:	8b 81       	ldd	r24, Y+3	; 0x03
    13b4:	9c 81       	ldd	r25, Y+4	; 0x04
    13b6:	81 30       	cpi	r24, 0x01	; 1
    13b8:	91 05       	cpc	r25, r1
    13ba:	09 f1       	breq	.+66     	; 0x13fe <GPIO_voidSetPortDDR+0x66>
    13bc:	2b 81       	ldd	r18, Y+3	; 0x03
    13be:	3c 81       	ldd	r19, Y+4	; 0x04
    13c0:	22 30       	cpi	r18, 0x02	; 2
    13c2:	31 05       	cpc	r19, r1
    13c4:	2c f4       	brge	.+10     	; 0x13d0 <GPIO_voidSetPortDDR+0x38>
    13c6:	8b 81       	ldd	r24, Y+3	; 0x03
    13c8:	9c 81       	ldd	r25, Y+4	; 0x04
    13ca:	00 97       	sbiw	r24, 0x00	; 0
    13cc:	61 f0       	breq	.+24     	; 0x13e6 <GPIO_voidSetPortDDR+0x4e>
    13ce:	3a c0       	rjmp	.+116    	; 0x1444 <GPIO_voidSetPortDDR+0xac>
    13d0:	2b 81       	ldd	r18, Y+3	; 0x03
    13d2:	3c 81       	ldd	r19, Y+4	; 0x04
    13d4:	22 30       	cpi	r18, 0x02	; 2
    13d6:	31 05       	cpc	r19, r1
    13d8:	f1 f0       	breq	.+60     	; 0x1416 <GPIO_voidSetPortDDR+0x7e>
    13da:	8b 81       	ldd	r24, Y+3	; 0x03
    13dc:	9c 81       	ldd	r25, Y+4	; 0x04
    13de:	83 30       	cpi	r24, 0x03	; 3
    13e0:	91 05       	cpc	r25, r1
    13e2:	29 f1       	breq	.+74     	; 0x142e <GPIO_voidSetPortDDR+0x96>
    13e4:	2f c0       	rjmp	.+94     	; 0x1444 <GPIO_voidSetPortDDR+0xac>
		{
			case GPIOA :
				if(copy_u8Mode ==OUTPUT )
    13e6:	8a 81       	ldd	r24, Y+2	; 0x02
    13e8:	81 30       	cpi	r24, 0x01	; 1
    13ea:	29 f4       	brne	.+10     	; 0x13f6 <GPIO_voidSetPortDDR+0x5e>
				{
					DDRA= 0xFF;
    13ec:	ea e3       	ldi	r30, 0x3A	; 58
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	8f ef       	ldi	r24, 0xFF	; 255
    13f2:	80 83       	st	Z, r24
    13f4:	27 c0       	rjmp	.+78     	; 0x1444 <GPIO_voidSetPortDDR+0xac>
				}
				else {
					DDRA = 0x00 ;
    13f6:	ea e3       	ldi	r30, 0x3A	; 58
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	10 82       	st	Z, r1
    13fc:	23 c0       	rjmp	.+70     	; 0x1444 <GPIO_voidSetPortDDR+0xac>
				}
				break;
			case GPIOB :
				if(copy_u8Mode ==OUTPUT )
    13fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1400:	81 30       	cpi	r24, 0x01	; 1
    1402:	29 f4       	brne	.+10     	; 0x140e <GPIO_voidSetPortDDR+0x76>
				{
					DDRB = 0xFF;
    1404:	e7 e3       	ldi	r30, 0x37	; 55
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	8f ef       	ldi	r24, 0xFF	; 255
    140a:	80 83       	st	Z, r24
    140c:	1b c0       	rjmp	.+54     	; 0x1444 <GPIO_voidSetPortDDR+0xac>
				}
				else {
					DDRB = 0x00;
    140e:	e7 e3       	ldi	r30, 0x37	; 55
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	10 82       	st	Z, r1
    1414:	17 c0       	rjmp	.+46     	; 0x1444 <GPIO_voidSetPortDDR+0xac>
				}
				break;
			case GPIOC :
				if(copy_u8Mode ==OUTPUT )
    1416:	8a 81       	ldd	r24, Y+2	; 0x02
    1418:	81 30       	cpi	r24, 0x01	; 1
    141a:	29 f4       	brne	.+10     	; 0x1426 <GPIO_voidSetPortDDR+0x8e>
				{
					DDRC = 0xFF ;
    141c:	e4 e3       	ldi	r30, 0x34	; 52
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	8f ef       	ldi	r24, 0xFF	; 255
    1422:	80 83       	st	Z, r24
    1424:	0f c0       	rjmp	.+30     	; 0x1444 <GPIO_voidSetPortDDR+0xac>
				}
				else {
					DDRC = 0x00 ;
    1426:	e4 e3       	ldi	r30, 0x34	; 52
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	10 82       	st	Z, r1
    142c:	0b c0       	rjmp	.+22     	; 0x1444 <GPIO_voidSetPortDDR+0xac>
				}
				break;
			case GPIOD :
				if(copy_u8Mode ==OUTPUT )
    142e:	8a 81       	ldd	r24, Y+2	; 0x02
    1430:	81 30       	cpi	r24, 0x01	; 1
    1432:	29 f4       	brne	.+10     	; 0x143e <GPIO_voidSetPortDDR+0xa6>
				{
					DDRD = 0xFF;
    1434:	e1 e3       	ldi	r30, 0x31	; 49
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	8f ef       	ldi	r24, 0xFF	; 255
    143a:	80 83       	st	Z, r24
    143c:	03 c0       	rjmp	.+6      	; 0x1444 <GPIO_voidSetPortDDR+0xac>
				}
				else {
					DDRD = 0x00;
    143e:	e1 e3       	ldi	r30, 0x31	; 49
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	10 82       	st	Z, r1
				}
				break;	
			default:
				break;
		}
	}
    1444:	0f 90       	pop	r0
    1446:	0f 90       	pop	r0
    1448:	0f 90       	pop	r0
    144a:	0f 90       	pop	r0
    144c:	cf 91       	pop	r28
    144e:	df 91       	pop	r29
    1450:	08 95       	ret

00001452 <GPIO_voidWritePort>:
	void	GPIO_voidWritePort (u8 copy_u8Port , u8 copy_u8Value)
	{
    1452:	df 93       	push	r29
    1454:	cf 93       	push	r28
    1456:	00 d0       	rcall	.+0      	; 0x1458 <GPIO_voidWritePort+0x6>
    1458:	00 d0       	rcall	.+0      	; 0x145a <GPIO_voidWritePort+0x8>
    145a:	cd b7       	in	r28, 0x3d	; 61
    145c:	de b7       	in	r29, 0x3e	; 62
    145e:	89 83       	std	Y+1, r24	; 0x01
    1460:	6a 83       	std	Y+2, r22	; 0x02
			switch(copy_u8Port)
    1462:	89 81       	ldd	r24, Y+1	; 0x01
    1464:	28 2f       	mov	r18, r24
    1466:	30 e0       	ldi	r19, 0x00	; 0
    1468:	3c 83       	std	Y+4, r19	; 0x04
    146a:	2b 83       	std	Y+3, r18	; 0x03
    146c:	8b 81       	ldd	r24, Y+3	; 0x03
    146e:	9c 81       	ldd	r25, Y+4	; 0x04
    1470:	81 30       	cpi	r24, 0x01	; 1
    1472:	91 05       	cpc	r25, r1
    1474:	d1 f0       	breq	.+52     	; 0x14aa <GPIO_voidWritePort+0x58>
    1476:	2b 81       	ldd	r18, Y+3	; 0x03
    1478:	3c 81       	ldd	r19, Y+4	; 0x04
    147a:	22 30       	cpi	r18, 0x02	; 2
    147c:	31 05       	cpc	r19, r1
    147e:	2c f4       	brge	.+10     	; 0x148a <GPIO_voidWritePort+0x38>
    1480:	8b 81       	ldd	r24, Y+3	; 0x03
    1482:	9c 81       	ldd	r25, Y+4	; 0x04
    1484:	00 97       	sbiw	r24, 0x00	; 0
    1486:	61 f0       	breq	.+24     	; 0x14a0 <GPIO_voidWritePort+0x4e>
    1488:	1e c0       	rjmp	.+60     	; 0x14c6 <GPIO_voidWritePort+0x74>
    148a:	2b 81       	ldd	r18, Y+3	; 0x03
    148c:	3c 81       	ldd	r19, Y+4	; 0x04
    148e:	22 30       	cpi	r18, 0x02	; 2
    1490:	31 05       	cpc	r19, r1
    1492:	81 f0       	breq	.+32     	; 0x14b4 <GPIO_voidWritePort+0x62>
    1494:	8b 81       	ldd	r24, Y+3	; 0x03
    1496:	9c 81       	ldd	r25, Y+4	; 0x04
    1498:	83 30       	cpi	r24, 0x03	; 3
    149a:	91 05       	cpc	r25, r1
    149c:	81 f0       	breq	.+32     	; 0x14be <GPIO_voidWritePort+0x6c>
    149e:	13 c0       	rjmp	.+38     	; 0x14c6 <GPIO_voidWritePort+0x74>
		{
			case GPIOA :
				PORTA = copy_u8Value ;
    14a0:	eb e3       	ldi	r30, 0x3B	; 59
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	8a 81       	ldd	r24, Y+2	; 0x02
    14a6:	80 83       	st	Z, r24
    14a8:	0e c0       	rjmp	.+28     	; 0x14c6 <GPIO_voidWritePort+0x74>
				break;
			case GPIOB :
				PORTB = copy_u8Value;
    14aa:	e8 e3       	ldi	r30, 0x38	; 56
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	8a 81       	ldd	r24, Y+2	; 0x02
    14b0:	80 83       	st	Z, r24
    14b2:	09 c0       	rjmp	.+18     	; 0x14c6 <GPIO_voidWritePort+0x74>
				break;
			case GPIOC :
				PORTC = copy_u8Value;
    14b4:	e5 e3       	ldi	r30, 0x35	; 53
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ba:	80 83       	st	Z, r24
    14bc:	04 c0       	rjmp	.+8      	; 0x14c6 <GPIO_voidWritePort+0x74>
				break;
			case GPIOD :
				PORTD = copy_u8Value;
    14be:	e2 e3       	ldi	r30, 0x32	; 50
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	8a 81       	ldd	r24, Y+2	; 0x02
    14c4:	80 83       	st	Z, r24
				break;
		}
		
			
			
		}
    14c6:	0f 90       	pop	r0
    14c8:	0f 90       	pop	r0
    14ca:	0f 90       	pop	r0
    14cc:	0f 90       	pop	r0
    14ce:	cf 91       	pop	r28
    14d0:	df 91       	pop	r29
    14d2:	08 95       	ret

000014d4 <GPIO_voidSetLowNippleDDR>:
	void GPIO_voidSetLowNippleDDR(u8 copy_u8Port , u8 copy_u8Mode)
	{
    14d4:	df 93       	push	r29
    14d6:	cf 93       	push	r28
    14d8:	00 d0       	rcall	.+0      	; 0x14da <GPIO_voidSetLowNippleDDR+0x6>
    14da:	0f 92       	push	r0
    14dc:	cd b7       	in	r28, 0x3d	; 61
    14de:	de b7       	in	r29, 0x3e	; 62
    14e0:	8a 83       	std	Y+2, r24	; 0x02
    14e2:	6b 83       	std	Y+3, r22	; 0x03
		u8 i ;
		for (i= 0 ; i<4 ; i++){
    14e4:	19 82       	std	Y+1, r1	; 0x01
    14e6:	08 c0       	rjmp	.+16     	; 0x14f8 <GPIO_voidSetLowNippleDDR+0x24>
			GPIO_voidSetPinDDR(copy_u8Port , i ,copy_u8Mode );
    14e8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ea:	69 81       	ldd	r22, Y+1	; 0x01
    14ec:	4b 81       	ldd	r20, Y+3	; 0x03
    14ee:	0e 94 de 06 	call	0xdbc	; 0xdbc <GPIO_voidSetPinDDR>
			
		}
	void GPIO_voidSetLowNippleDDR(u8 copy_u8Port , u8 copy_u8Mode)
	{
		u8 i ;
		for (i= 0 ; i<4 ; i++){
    14f2:	89 81       	ldd	r24, Y+1	; 0x01
    14f4:	8f 5f       	subi	r24, 0xFF	; 255
    14f6:	89 83       	std	Y+1, r24	; 0x01
    14f8:	89 81       	ldd	r24, Y+1	; 0x01
    14fa:	84 30       	cpi	r24, 0x04	; 4
    14fc:	a8 f3       	brcs	.-22     	; 0x14e8 <GPIO_voidSetLowNippleDDR+0x14>
			GPIO_voidSetPinDDR(copy_u8Port , i ,copy_u8Mode );
		}
	}
    14fe:	0f 90       	pop	r0
    1500:	0f 90       	pop	r0
    1502:	0f 90       	pop	r0
    1504:	cf 91       	pop	r28
    1506:	df 91       	pop	r29
    1508:	08 95       	ret

0000150a <GPIO_voidSetHighNippleDDR>:
	void GPIO_voidSetHighNippleDDR(u8 copy_u8Port , u8 copy_u8Mode)
	{
    150a:	df 93       	push	r29
    150c:	cf 93       	push	r28
    150e:	00 d0       	rcall	.+0      	; 0x1510 <GPIO_voidSetHighNippleDDR+0x6>
    1510:	0f 92       	push	r0
    1512:	cd b7       	in	r28, 0x3d	; 61
    1514:	de b7       	in	r29, 0x3e	; 62
    1516:	8a 83       	std	Y+2, r24	; 0x02
    1518:	6b 83       	std	Y+3, r22	; 0x03
		u8 i ;
		for (i= 4 ; i<8 ; i++){
    151a:	84 e0       	ldi	r24, 0x04	; 4
    151c:	89 83       	std	Y+1, r24	; 0x01
    151e:	08 c0       	rjmp	.+16     	; 0x1530 <GPIO_voidSetHighNippleDDR+0x26>
			GPIO_voidSetPinDDR(copy_u8Port , i ,copy_u8Mode );
    1520:	8a 81       	ldd	r24, Y+2	; 0x02
    1522:	69 81       	ldd	r22, Y+1	; 0x01
    1524:	4b 81       	ldd	r20, Y+3	; 0x03
    1526:	0e 94 de 06 	call	0xdbc	; 0xdbc <GPIO_voidSetPinDDR>
		}
	}
	void GPIO_voidSetHighNippleDDR(u8 copy_u8Port , u8 copy_u8Mode)
	{
		u8 i ;
		for (i= 4 ; i<8 ; i++){
    152a:	89 81       	ldd	r24, Y+1	; 0x01
    152c:	8f 5f       	subi	r24, 0xFF	; 255
    152e:	89 83       	std	Y+1, r24	; 0x01
    1530:	89 81       	ldd	r24, Y+1	; 0x01
    1532:	88 30       	cpi	r24, 0x08	; 8
    1534:	a8 f3       	brcs	.-22     	; 0x1520 <GPIO_voidSetHighNippleDDR+0x16>
			GPIO_voidSetPinDDR(copy_u8Port , i ,copy_u8Mode );
		}
	}
    1536:	0f 90       	pop	r0
    1538:	0f 90       	pop	r0
    153a:	0f 90       	pop	r0
    153c:	cf 91       	pop	r28
    153e:	df 91       	pop	r29
    1540:	08 95       	ret

00001542 <GPIO_voidWriteLowNipple>:
	void GPIO_voidWriteLowNipple (u8 copy_u8Port , u8 copy_u8Value )
	{
    1542:	df 93       	push	r29
    1544:	cf 93       	push	r28
    1546:	00 d0       	rcall	.+0      	; 0x1548 <GPIO_voidWriteLowNipple+0x6>
    1548:	00 d0       	rcall	.+0      	; 0x154a <GPIO_voidWriteLowNipple+0x8>
    154a:	cd b7       	in	r28, 0x3d	; 61
    154c:	de b7       	in	r29, 0x3e	; 62
    154e:	89 83       	std	Y+1, r24	; 0x01
    1550:	6a 83       	std	Y+2, r22	; 0x02
		copy_u8Value &= 0x0F;
    1552:	8a 81       	ldd	r24, Y+2	; 0x02
    1554:	8f 70       	andi	r24, 0x0F	; 15
    1556:	8a 83       	std	Y+2, r24	; 0x02
		switch (copy_u8Port) {
    1558:	89 81       	ldd	r24, Y+1	; 0x01
    155a:	28 2f       	mov	r18, r24
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	3c 83       	std	Y+4, r19	; 0x04
    1560:	2b 83       	std	Y+3, r18	; 0x03
    1562:	8b 81       	ldd	r24, Y+3	; 0x03
    1564:	9c 81       	ldd	r25, Y+4	; 0x04
    1566:	81 30       	cpi	r24, 0x01	; 1
    1568:	91 05       	cpc	r25, r1
    156a:	29 f1       	breq	.+74     	; 0x15b6 <GPIO_voidWriteLowNipple+0x74>
    156c:	2b 81       	ldd	r18, Y+3	; 0x03
    156e:	3c 81       	ldd	r19, Y+4	; 0x04
    1570:	22 30       	cpi	r18, 0x02	; 2
    1572:	31 05       	cpc	r19, r1
    1574:	2c f4       	brge	.+10     	; 0x1580 <GPIO_voidWriteLowNipple+0x3e>
    1576:	8b 81       	ldd	r24, Y+3	; 0x03
    1578:	9c 81       	ldd	r25, Y+4	; 0x04
    157a:	00 97       	sbiw	r24, 0x00	; 0
    157c:	61 f0       	breq	.+24     	; 0x1596 <GPIO_voidWriteLowNipple+0x54>
    157e:	4a c0       	rjmp	.+148    	; 0x1614 <GPIO_voidWriteLowNipple+0xd2>
    1580:	2b 81       	ldd	r18, Y+3	; 0x03
    1582:	3c 81       	ldd	r19, Y+4	; 0x04
    1584:	22 30       	cpi	r18, 0x02	; 2
    1586:	31 05       	cpc	r19, r1
    1588:	31 f1       	breq	.+76     	; 0x15d6 <GPIO_voidWriteLowNipple+0x94>
    158a:	8b 81       	ldd	r24, Y+3	; 0x03
    158c:	9c 81       	ldd	r25, Y+4	; 0x04
    158e:	83 30       	cpi	r24, 0x03	; 3
    1590:	91 05       	cpc	r25, r1
    1592:	89 f1       	breq	.+98     	; 0x15f6 <GPIO_voidWriteLowNipple+0xb4>
    1594:	3f c0       	rjmp	.+126    	; 0x1614 <GPIO_voidWriteLowNipple+0xd2>
			case GPIOA :
				PORTA &= 0xF0 ; 
    1596:	ab e3       	ldi	r26, 0x3B	; 59
    1598:	b0 e0       	ldi	r27, 0x00	; 0
    159a:	eb e3       	ldi	r30, 0x3B	; 59
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	80 81       	ld	r24, Z
    15a0:	80 7f       	andi	r24, 0xF0	; 240
    15a2:	8c 93       	st	X, r24
				PORTA |= copy_u8Value ;
    15a4:	ab e3       	ldi	r26, 0x3B	; 59
    15a6:	b0 e0       	ldi	r27, 0x00	; 0
    15a8:	eb e3       	ldi	r30, 0x3B	; 59
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	90 81       	ld	r25, Z
    15ae:	8a 81       	ldd	r24, Y+2	; 0x02
    15b0:	89 2b       	or	r24, r25
    15b2:	8c 93       	st	X, r24
    15b4:	2f c0       	rjmp	.+94     	; 0x1614 <GPIO_voidWriteLowNipple+0xd2>
				break;
			case GPIOB :
				PORTB &= 0xF0 ; 
    15b6:	a8 e3       	ldi	r26, 0x38	; 56
    15b8:	b0 e0       	ldi	r27, 0x00	; 0
    15ba:	e8 e3       	ldi	r30, 0x38	; 56
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	80 81       	ld	r24, Z
    15c0:	80 7f       	andi	r24, 0xF0	; 240
    15c2:	8c 93       	st	X, r24
				PORTB |= copy_u8Value ;
    15c4:	a8 e3       	ldi	r26, 0x38	; 56
    15c6:	b0 e0       	ldi	r27, 0x00	; 0
    15c8:	e8 e3       	ldi	r30, 0x38	; 56
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	90 81       	ld	r25, Z
    15ce:	8a 81       	ldd	r24, Y+2	; 0x02
    15d0:	89 2b       	or	r24, r25
    15d2:	8c 93       	st	X, r24
    15d4:	1f c0       	rjmp	.+62     	; 0x1614 <GPIO_voidWriteLowNipple+0xd2>
				break;
			case GPIOC :
				PORTC &= 0xF0 ; 
    15d6:	a5 e3       	ldi	r26, 0x35	; 53
    15d8:	b0 e0       	ldi	r27, 0x00	; 0
    15da:	e5 e3       	ldi	r30, 0x35	; 53
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	80 81       	ld	r24, Z
    15e0:	80 7f       	andi	r24, 0xF0	; 240
    15e2:	8c 93       	st	X, r24
				PORTC |= copy_u8Value ;
    15e4:	a5 e3       	ldi	r26, 0x35	; 53
    15e6:	b0 e0       	ldi	r27, 0x00	; 0
    15e8:	e5 e3       	ldi	r30, 0x35	; 53
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	90 81       	ld	r25, Z
    15ee:	8a 81       	ldd	r24, Y+2	; 0x02
    15f0:	89 2b       	or	r24, r25
    15f2:	8c 93       	st	X, r24
    15f4:	0f c0       	rjmp	.+30     	; 0x1614 <GPIO_voidWriteLowNipple+0xd2>
				break;
			case GPIOD :
				PORTD &= 0xF0 ; 
    15f6:	a2 e3       	ldi	r26, 0x32	; 50
    15f8:	b0 e0       	ldi	r27, 0x00	; 0
    15fa:	e2 e3       	ldi	r30, 0x32	; 50
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	80 81       	ld	r24, Z
    1600:	80 7f       	andi	r24, 0xF0	; 240
    1602:	8c 93       	st	X, r24
				PORTD |= copy_u8Value ;
    1604:	a2 e3       	ldi	r26, 0x32	; 50
    1606:	b0 e0       	ldi	r27, 0x00	; 0
    1608:	e2 e3       	ldi	r30, 0x32	; 50
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	90 81       	ld	r25, Z
    160e:	8a 81       	ldd	r24, Y+2	; 0x02
    1610:	89 2b       	or	r24, r25
    1612:	8c 93       	st	X, r24
				break;	
		}
	}
    1614:	0f 90       	pop	r0
    1616:	0f 90       	pop	r0
    1618:	0f 90       	pop	r0
    161a:	0f 90       	pop	r0
    161c:	cf 91       	pop	r28
    161e:	df 91       	pop	r29
    1620:	08 95       	ret

00001622 <GPIO_voidWriteHighNipple>:
	void GPIO_voidWriteHighNipple (u8 copy_u8Port , u8 copy_u8Value )
	{
    1622:	df 93       	push	r29
    1624:	cf 93       	push	r28
    1626:	00 d0       	rcall	.+0      	; 0x1628 <GPIO_voidWriteHighNipple+0x6>
    1628:	00 d0       	rcall	.+0      	; 0x162a <GPIO_voidWriteHighNipple+0x8>
    162a:	cd b7       	in	r28, 0x3d	; 61
    162c:	de b7       	in	r29, 0x3e	; 62
    162e:	89 83       	std	Y+1, r24	; 0x01
    1630:	6a 83       	std	Y+2, r22	; 0x02
		copy_u8Value &= 0xF0;
    1632:	8a 81       	ldd	r24, Y+2	; 0x02
    1634:	80 7f       	andi	r24, 0xF0	; 240
    1636:	8a 83       	std	Y+2, r24	; 0x02
		switch (copy_u8Port) {
    1638:	89 81       	ldd	r24, Y+1	; 0x01
    163a:	28 2f       	mov	r18, r24
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	3c 83       	std	Y+4, r19	; 0x04
    1640:	2b 83       	std	Y+3, r18	; 0x03
    1642:	8b 81       	ldd	r24, Y+3	; 0x03
    1644:	9c 81       	ldd	r25, Y+4	; 0x04
    1646:	81 30       	cpi	r24, 0x01	; 1
    1648:	91 05       	cpc	r25, r1
    164a:	29 f1       	breq	.+74     	; 0x1696 <GPIO_voidWriteHighNipple+0x74>
    164c:	2b 81       	ldd	r18, Y+3	; 0x03
    164e:	3c 81       	ldd	r19, Y+4	; 0x04
    1650:	22 30       	cpi	r18, 0x02	; 2
    1652:	31 05       	cpc	r19, r1
    1654:	2c f4       	brge	.+10     	; 0x1660 <GPIO_voidWriteHighNipple+0x3e>
    1656:	8b 81       	ldd	r24, Y+3	; 0x03
    1658:	9c 81       	ldd	r25, Y+4	; 0x04
    165a:	00 97       	sbiw	r24, 0x00	; 0
    165c:	61 f0       	breq	.+24     	; 0x1676 <GPIO_voidWriteHighNipple+0x54>
    165e:	4a c0       	rjmp	.+148    	; 0x16f4 <GPIO_voidWriteHighNipple+0xd2>
    1660:	2b 81       	ldd	r18, Y+3	; 0x03
    1662:	3c 81       	ldd	r19, Y+4	; 0x04
    1664:	22 30       	cpi	r18, 0x02	; 2
    1666:	31 05       	cpc	r19, r1
    1668:	31 f1       	breq	.+76     	; 0x16b6 <GPIO_voidWriteHighNipple+0x94>
    166a:	8b 81       	ldd	r24, Y+3	; 0x03
    166c:	9c 81       	ldd	r25, Y+4	; 0x04
    166e:	83 30       	cpi	r24, 0x03	; 3
    1670:	91 05       	cpc	r25, r1
    1672:	89 f1       	breq	.+98     	; 0x16d6 <GPIO_voidWriteHighNipple+0xb4>
    1674:	3f c0       	rjmp	.+126    	; 0x16f4 <GPIO_voidWriteHighNipple+0xd2>
			case GPIOA :
				PORTA &= 0x0F ; 
    1676:	ab e3       	ldi	r26, 0x3B	; 59
    1678:	b0 e0       	ldi	r27, 0x00	; 0
    167a:	eb e3       	ldi	r30, 0x3B	; 59
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	80 81       	ld	r24, Z
    1680:	8f 70       	andi	r24, 0x0F	; 15
    1682:	8c 93       	st	X, r24
				PORTA |= copy_u8Value ;
    1684:	ab e3       	ldi	r26, 0x3B	; 59
    1686:	b0 e0       	ldi	r27, 0x00	; 0
    1688:	eb e3       	ldi	r30, 0x3B	; 59
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	90 81       	ld	r25, Z
    168e:	8a 81       	ldd	r24, Y+2	; 0x02
    1690:	89 2b       	or	r24, r25
    1692:	8c 93       	st	X, r24
    1694:	2f c0       	rjmp	.+94     	; 0x16f4 <GPIO_voidWriteHighNipple+0xd2>
				break;
			case GPIOB :
				PORTB &= 0x0F ; 
    1696:	a8 e3       	ldi	r26, 0x38	; 56
    1698:	b0 e0       	ldi	r27, 0x00	; 0
    169a:	e8 e3       	ldi	r30, 0x38	; 56
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	80 81       	ld	r24, Z
    16a0:	8f 70       	andi	r24, 0x0F	; 15
    16a2:	8c 93       	st	X, r24
				PORTB |= copy_u8Value ;
    16a4:	a8 e3       	ldi	r26, 0x38	; 56
    16a6:	b0 e0       	ldi	r27, 0x00	; 0
    16a8:	e8 e3       	ldi	r30, 0x38	; 56
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	90 81       	ld	r25, Z
    16ae:	8a 81       	ldd	r24, Y+2	; 0x02
    16b0:	89 2b       	or	r24, r25
    16b2:	8c 93       	st	X, r24
    16b4:	1f c0       	rjmp	.+62     	; 0x16f4 <GPIO_voidWriteHighNipple+0xd2>
				break;
			case GPIOC :
				PORTC &= 0x0F ; 
    16b6:	a5 e3       	ldi	r26, 0x35	; 53
    16b8:	b0 e0       	ldi	r27, 0x00	; 0
    16ba:	e5 e3       	ldi	r30, 0x35	; 53
    16bc:	f0 e0       	ldi	r31, 0x00	; 0
    16be:	80 81       	ld	r24, Z
    16c0:	8f 70       	andi	r24, 0x0F	; 15
    16c2:	8c 93       	st	X, r24
				PORTC |= copy_u8Value ;
    16c4:	a5 e3       	ldi	r26, 0x35	; 53
    16c6:	b0 e0       	ldi	r27, 0x00	; 0
    16c8:	e5 e3       	ldi	r30, 0x35	; 53
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	90 81       	ld	r25, Z
    16ce:	8a 81       	ldd	r24, Y+2	; 0x02
    16d0:	89 2b       	or	r24, r25
    16d2:	8c 93       	st	X, r24
    16d4:	0f c0       	rjmp	.+30     	; 0x16f4 <GPIO_voidWriteHighNipple+0xd2>
				break;
			case GPIOD :
				PORTD &= 0x0F ; 
    16d6:	a2 e3       	ldi	r26, 0x32	; 50
    16d8:	b0 e0       	ldi	r27, 0x00	; 0
    16da:	e2 e3       	ldi	r30, 0x32	; 50
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	80 81       	ld	r24, Z
    16e0:	8f 70       	andi	r24, 0x0F	; 15
    16e2:	8c 93       	st	X, r24
				PORTD |= copy_u8Value ;
    16e4:	a2 e3       	ldi	r26, 0x32	; 50
    16e6:	b0 e0       	ldi	r27, 0x00	; 0
    16e8:	e2 e3       	ldi	r30, 0x32	; 50
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	90 81       	ld	r25, Z
    16ee:	8a 81       	ldd	r24, Y+2	; 0x02
    16f0:	89 2b       	or	r24, r25
    16f2:	8c 93       	st	X, r24
				break;	
		}
	}
    16f4:	0f 90       	pop	r0
    16f6:	0f 90       	pop	r0
    16f8:	0f 90       	pop	r0
    16fa:	0f 90       	pop	r0
    16fc:	cf 91       	pop	r28
    16fe:	df 91       	pop	r29
    1700:	08 95       	ret

00001702 <LCD_voidInit>:
#include "util/delay.h"



void LCD_voidInit()
{
    1702:	0f 93       	push	r16
    1704:	1f 93       	push	r17
    1706:	df 93       	push	r29
    1708:	cf 93       	push	r28
    170a:	cd b7       	in	r28, 0x3d	; 61
    170c:	de b7       	in	r29, 0x3e	; 62
    170e:	c4 55       	subi	r28, 0x54	; 84
    1710:	d0 40       	sbci	r29, 0x00	; 0
    1712:	0f b6       	in	r0, 0x3f	; 63
    1714:	f8 94       	cli
    1716:	de bf       	out	0x3e, r29	; 62
    1718:	0f be       	out	0x3f, r0	; 63
    171a:	cd bf       	out	0x3d, r28	; 61
    171c:	fe 01       	movw	r30, r28
    171e:	ef 5a       	subi	r30, 0xAF	; 175
    1720:	ff 4f       	sbci	r31, 0xFF	; 255
    1722:	80 e0       	ldi	r24, 0x00	; 0
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	a0 e2       	ldi	r26, 0x20	; 32
    1728:	b2 e4       	ldi	r27, 0x42	; 66
    172a:	80 83       	st	Z, r24
    172c:	91 83       	std	Z+1, r25	; 0x01
    172e:	a2 83       	std	Z+2, r26	; 0x02
    1730:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1732:	8e 01       	movw	r16, r28
    1734:	03 5b       	subi	r16, 0xB3	; 179
    1736:	1f 4f       	sbci	r17, 0xFF	; 255
    1738:	fe 01       	movw	r30, r28
    173a:	ef 5a       	subi	r30, 0xAF	; 175
    173c:	ff 4f       	sbci	r31, 0xFF	; 255
    173e:	60 81       	ld	r22, Z
    1740:	71 81       	ldd	r23, Z+1	; 0x01
    1742:	82 81       	ldd	r24, Z+2	; 0x02
    1744:	93 81       	ldd	r25, Z+3	; 0x03
    1746:	20 e0       	ldi	r18, 0x00	; 0
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	4a ef       	ldi	r20, 0xFA	; 250
    174c:	54 e4       	ldi	r21, 0x44	; 68
    174e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1752:	dc 01       	movw	r26, r24
    1754:	cb 01       	movw	r24, r22
    1756:	f8 01       	movw	r30, r16
    1758:	80 83       	st	Z, r24
    175a:	91 83       	std	Z+1, r25	; 0x01
    175c:	a2 83       	std	Z+2, r26	; 0x02
    175e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1760:	fe 01       	movw	r30, r28
    1762:	e3 5b       	subi	r30, 0xB3	; 179
    1764:	ff 4f       	sbci	r31, 0xFF	; 255
    1766:	60 81       	ld	r22, Z
    1768:	71 81       	ldd	r23, Z+1	; 0x01
    176a:	82 81       	ldd	r24, Z+2	; 0x02
    176c:	93 81       	ldd	r25, Z+3	; 0x03
    176e:	20 e0       	ldi	r18, 0x00	; 0
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	40 e8       	ldi	r20, 0x80	; 128
    1774:	5f e3       	ldi	r21, 0x3F	; 63
    1776:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    177a:	88 23       	and	r24, r24
    177c:	44 f4       	brge	.+16     	; 0x178e <LCD_voidInit+0x8c>
		__ticks = 1;
    177e:	fe 01       	movw	r30, r28
    1780:	e5 5b       	subi	r30, 0xB5	; 181
    1782:	ff 4f       	sbci	r31, 0xFF	; 255
    1784:	81 e0       	ldi	r24, 0x01	; 1
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	91 83       	std	Z+1, r25	; 0x01
    178a:	80 83       	st	Z, r24
    178c:	64 c0       	rjmp	.+200    	; 0x1856 <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    178e:	fe 01       	movw	r30, r28
    1790:	e3 5b       	subi	r30, 0xB3	; 179
    1792:	ff 4f       	sbci	r31, 0xFF	; 255
    1794:	60 81       	ld	r22, Z
    1796:	71 81       	ldd	r23, Z+1	; 0x01
    1798:	82 81       	ldd	r24, Z+2	; 0x02
    179a:	93 81       	ldd	r25, Z+3	; 0x03
    179c:	20 e0       	ldi	r18, 0x00	; 0
    179e:	3f ef       	ldi	r19, 0xFF	; 255
    17a0:	4f e7       	ldi	r20, 0x7F	; 127
    17a2:	57 e4       	ldi	r21, 0x47	; 71
    17a4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    17a8:	18 16       	cp	r1, r24
    17aa:	0c f0       	brlt	.+2      	; 0x17ae <LCD_voidInit+0xac>
    17ac:	43 c0       	rjmp	.+134    	; 0x1834 <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17ae:	fe 01       	movw	r30, r28
    17b0:	ef 5a       	subi	r30, 0xAF	; 175
    17b2:	ff 4f       	sbci	r31, 0xFF	; 255
    17b4:	60 81       	ld	r22, Z
    17b6:	71 81       	ldd	r23, Z+1	; 0x01
    17b8:	82 81       	ldd	r24, Z+2	; 0x02
    17ba:	93 81       	ldd	r25, Z+3	; 0x03
    17bc:	20 e0       	ldi	r18, 0x00	; 0
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	40 e2       	ldi	r20, 0x20	; 32
    17c2:	51 e4       	ldi	r21, 0x41	; 65
    17c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17c8:	dc 01       	movw	r26, r24
    17ca:	cb 01       	movw	r24, r22
    17cc:	8e 01       	movw	r16, r28
    17ce:	05 5b       	subi	r16, 0xB5	; 181
    17d0:	1f 4f       	sbci	r17, 0xFF	; 255
    17d2:	bc 01       	movw	r22, r24
    17d4:	cd 01       	movw	r24, r26
    17d6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17da:	dc 01       	movw	r26, r24
    17dc:	cb 01       	movw	r24, r22
    17de:	f8 01       	movw	r30, r16
    17e0:	91 83       	std	Z+1, r25	; 0x01
    17e2:	80 83       	st	Z, r24
    17e4:	1f c0       	rjmp	.+62     	; 0x1824 <LCD_voidInit+0x122>
    17e6:	fe 01       	movw	r30, r28
    17e8:	e7 5b       	subi	r30, 0xB7	; 183
    17ea:	ff 4f       	sbci	r31, 0xFF	; 255
    17ec:	88 ec       	ldi	r24, 0xC8	; 200
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	91 83       	std	Z+1, r25	; 0x01
    17f2:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    17f4:	fe 01       	movw	r30, r28
    17f6:	e7 5b       	subi	r30, 0xB7	; 183
    17f8:	ff 4f       	sbci	r31, 0xFF	; 255
    17fa:	80 81       	ld	r24, Z
    17fc:	91 81       	ldd	r25, Z+1	; 0x01
    17fe:	01 97       	sbiw	r24, 0x01	; 1
    1800:	f1 f7       	brne	.-4      	; 0x17fe <LCD_voidInit+0xfc>
    1802:	fe 01       	movw	r30, r28
    1804:	e7 5b       	subi	r30, 0xB7	; 183
    1806:	ff 4f       	sbci	r31, 0xFF	; 255
    1808:	91 83       	std	Z+1, r25	; 0x01
    180a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    180c:	de 01       	movw	r26, r28
    180e:	a5 5b       	subi	r26, 0xB5	; 181
    1810:	bf 4f       	sbci	r27, 0xFF	; 255
    1812:	fe 01       	movw	r30, r28
    1814:	e5 5b       	subi	r30, 0xB5	; 181
    1816:	ff 4f       	sbci	r31, 0xFF	; 255
    1818:	80 81       	ld	r24, Z
    181a:	91 81       	ldd	r25, Z+1	; 0x01
    181c:	01 97       	sbiw	r24, 0x01	; 1
    181e:	11 96       	adiw	r26, 0x01	; 1
    1820:	9c 93       	st	X, r25
    1822:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1824:	fe 01       	movw	r30, r28
    1826:	e5 5b       	subi	r30, 0xB5	; 181
    1828:	ff 4f       	sbci	r31, 0xFF	; 255
    182a:	80 81       	ld	r24, Z
    182c:	91 81       	ldd	r25, Z+1	; 0x01
    182e:	00 97       	sbiw	r24, 0x00	; 0
    1830:	d1 f6       	brne	.-76     	; 0x17e6 <LCD_voidInit+0xe4>
    1832:	27 c0       	rjmp	.+78     	; 0x1882 <LCD_voidInit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1834:	8e 01       	movw	r16, r28
    1836:	05 5b       	subi	r16, 0xB5	; 181
    1838:	1f 4f       	sbci	r17, 0xFF	; 255
    183a:	fe 01       	movw	r30, r28
    183c:	e3 5b       	subi	r30, 0xB3	; 179
    183e:	ff 4f       	sbci	r31, 0xFF	; 255
    1840:	60 81       	ld	r22, Z
    1842:	71 81       	ldd	r23, Z+1	; 0x01
    1844:	82 81       	ldd	r24, Z+2	; 0x02
    1846:	93 81       	ldd	r25, Z+3	; 0x03
    1848:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    184c:	dc 01       	movw	r26, r24
    184e:	cb 01       	movw	r24, r22
    1850:	f8 01       	movw	r30, r16
    1852:	91 83       	std	Z+1, r25	; 0x01
    1854:	80 83       	st	Z, r24
    1856:	de 01       	movw	r26, r28
    1858:	a9 5b       	subi	r26, 0xB9	; 185
    185a:	bf 4f       	sbci	r27, 0xFF	; 255
    185c:	fe 01       	movw	r30, r28
    185e:	e5 5b       	subi	r30, 0xB5	; 181
    1860:	ff 4f       	sbci	r31, 0xFF	; 255
    1862:	80 81       	ld	r24, Z
    1864:	91 81       	ldd	r25, Z+1	; 0x01
    1866:	8d 93       	st	X+, r24
    1868:	9c 93       	st	X, r25
    186a:	fe 01       	movw	r30, r28
    186c:	e9 5b       	subi	r30, 0xB9	; 185
    186e:	ff 4f       	sbci	r31, 0xFF	; 255
    1870:	80 81       	ld	r24, Z
    1872:	91 81       	ldd	r25, Z+1	; 0x01
    1874:	01 97       	sbiw	r24, 0x01	; 1
    1876:	f1 f7       	brne	.-4      	; 0x1874 <LCD_voidInit+0x172>
    1878:	fe 01       	movw	r30, r28
    187a:	e9 5b       	subi	r30, 0xB9	; 185
    187c:	ff 4f       	sbci	r31, 0xFF	; 255
    187e:	91 83       	std	Z+1, r25	; 0x01
    1880:	80 83       	st	Z, r24
	_delay_ms(40);
	
	GPIO_voidSetPinDDR(LCD_RSPORT , LCD_RSPIN , OUTPUT);
    1882:	82 e0       	ldi	r24, 0x02	; 2
    1884:	60 e0       	ldi	r22, 0x00	; 0
    1886:	41 e0       	ldi	r20, 0x01	; 1
    1888:	0e 94 de 06 	call	0xdbc	; 0xdbc <GPIO_voidSetPinDDR>
	GPIO_voidSetPinDDR(LCD_RWPORT , LCD_RWPIN , OUTPUT);
    188c:	82 e0       	ldi	r24, 0x02	; 2
    188e:	61 e0       	ldi	r22, 0x01	; 1
    1890:	41 e0       	ldi	r20, 0x01	; 1
    1892:	0e 94 de 06 	call	0xdbc	; 0xdbc <GPIO_voidSetPinDDR>
	GPIO_voidSetPinDDR(LCD_ENPORT , LCD_ENPIN , OUTPUT);
    1896:	82 e0       	ldi	r24, 0x02	; 2
    1898:	62 e0       	ldi	r22, 0x02	; 2
    189a:	41 e0       	ldi	r20, 0x01	; 1
    189c:	0e 94 de 06 	call	0xdbc	; 0xdbc <GPIO_voidSetPinDDR>
		LCD_voidSendCmd(LCD_ENTRY_MODE);
		_delay_ms(1);
		
	#elif LCD_MODE == 1 
		#if LCD_NIBBLE == 0 
			GPIO_voidSetLowNippleDDR(LCD_PORT , OUTPUT);
    18a0:	83 e0       	ldi	r24, 0x03	; 3
    18a2:	61 e0       	ldi	r22, 0x01	; 1
    18a4:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <GPIO_voidSetLowNippleDDR>
			LCD_voidSendCmd(LCD_RETURN_HOME);
    18a8:	82 e0       	ldi	r24, 0x02	; 2
    18aa:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <LCD_voidSendCmd>
    18ae:	fe 01       	movw	r30, r28
    18b0:	ed 5b       	subi	r30, 0xBD	; 189
    18b2:	ff 4f       	sbci	r31, 0xFF	; 255
    18b4:	80 e0       	ldi	r24, 0x00	; 0
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	a0 e7       	ldi	r26, 0x70	; 112
    18ba:	b1 e4       	ldi	r27, 0x41	; 65
    18bc:	80 83       	st	Z, r24
    18be:	91 83       	std	Z+1, r25	; 0x01
    18c0:	a2 83       	std	Z+2, r26	; 0x02
    18c2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18c4:	8e 01       	movw	r16, r28
    18c6:	01 5c       	subi	r16, 0xC1	; 193
    18c8:	1f 4f       	sbci	r17, 0xFF	; 255
    18ca:	fe 01       	movw	r30, r28
    18cc:	ed 5b       	subi	r30, 0xBD	; 189
    18ce:	ff 4f       	sbci	r31, 0xFF	; 255
    18d0:	60 81       	ld	r22, Z
    18d2:	71 81       	ldd	r23, Z+1	; 0x01
    18d4:	82 81       	ldd	r24, Z+2	; 0x02
    18d6:	93 81       	ldd	r25, Z+3	; 0x03
    18d8:	20 e0       	ldi	r18, 0x00	; 0
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	4a ef       	ldi	r20, 0xFA	; 250
    18de:	54 e4       	ldi	r21, 0x44	; 68
    18e0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18e4:	dc 01       	movw	r26, r24
    18e6:	cb 01       	movw	r24, r22
    18e8:	f8 01       	movw	r30, r16
    18ea:	80 83       	st	Z, r24
    18ec:	91 83       	std	Z+1, r25	; 0x01
    18ee:	a2 83       	std	Z+2, r26	; 0x02
    18f0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18f2:	fe 01       	movw	r30, r28
    18f4:	ff 96       	adiw	r30, 0x3f	; 63
    18f6:	60 81       	ld	r22, Z
    18f8:	71 81       	ldd	r23, Z+1	; 0x01
    18fa:	82 81       	ldd	r24, Z+2	; 0x02
    18fc:	93 81       	ldd	r25, Z+3	; 0x03
    18fe:	20 e0       	ldi	r18, 0x00	; 0
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	40 e8       	ldi	r20, 0x80	; 128
    1904:	5f e3       	ldi	r21, 0x3F	; 63
    1906:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    190a:	88 23       	and	r24, r24
    190c:	2c f4       	brge	.+10     	; 0x1918 <LCD_voidInit+0x216>
		__ticks = 1;
    190e:	81 e0       	ldi	r24, 0x01	; 1
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	9e af       	std	Y+62, r25	; 0x3e
    1914:	8d af       	std	Y+61, r24	; 0x3d
    1916:	46 c0       	rjmp	.+140    	; 0x19a4 <LCD_voidInit+0x2a2>
	else if (__tmp > 65535)
    1918:	fe 01       	movw	r30, r28
    191a:	ff 96       	adiw	r30, 0x3f	; 63
    191c:	60 81       	ld	r22, Z
    191e:	71 81       	ldd	r23, Z+1	; 0x01
    1920:	82 81       	ldd	r24, Z+2	; 0x02
    1922:	93 81       	ldd	r25, Z+3	; 0x03
    1924:	20 e0       	ldi	r18, 0x00	; 0
    1926:	3f ef       	ldi	r19, 0xFF	; 255
    1928:	4f e7       	ldi	r20, 0x7F	; 127
    192a:	57 e4       	ldi	r21, 0x47	; 71
    192c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1930:	18 16       	cp	r1, r24
    1932:	64 f5       	brge	.+88     	; 0x198c <LCD_voidInit+0x28a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1934:	fe 01       	movw	r30, r28
    1936:	ed 5b       	subi	r30, 0xBD	; 189
    1938:	ff 4f       	sbci	r31, 0xFF	; 255
    193a:	60 81       	ld	r22, Z
    193c:	71 81       	ldd	r23, Z+1	; 0x01
    193e:	82 81       	ldd	r24, Z+2	; 0x02
    1940:	93 81       	ldd	r25, Z+3	; 0x03
    1942:	20 e0       	ldi	r18, 0x00	; 0
    1944:	30 e0       	ldi	r19, 0x00	; 0
    1946:	40 e2       	ldi	r20, 0x20	; 32
    1948:	51 e4       	ldi	r21, 0x41	; 65
    194a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    194e:	dc 01       	movw	r26, r24
    1950:	cb 01       	movw	r24, r22
    1952:	bc 01       	movw	r22, r24
    1954:	cd 01       	movw	r24, r26
    1956:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    195a:	dc 01       	movw	r26, r24
    195c:	cb 01       	movw	r24, r22
    195e:	9e af       	std	Y+62, r25	; 0x3e
    1960:	8d af       	std	Y+61, r24	; 0x3d
    1962:	0f c0       	rjmp	.+30     	; 0x1982 <LCD_voidInit+0x280>
    1964:	88 ec       	ldi	r24, 0xC8	; 200
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	9c af       	std	Y+60, r25	; 0x3c
    196a:	8b af       	std	Y+59, r24	; 0x3b
    196c:	8b ad       	ldd	r24, Y+59	; 0x3b
    196e:	9c ad       	ldd	r25, Y+60	; 0x3c
    1970:	01 97       	sbiw	r24, 0x01	; 1
    1972:	f1 f7       	brne	.-4      	; 0x1970 <LCD_voidInit+0x26e>
    1974:	9c af       	std	Y+60, r25	; 0x3c
    1976:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1978:	8d ad       	ldd	r24, Y+61	; 0x3d
    197a:	9e ad       	ldd	r25, Y+62	; 0x3e
    197c:	01 97       	sbiw	r24, 0x01	; 1
    197e:	9e af       	std	Y+62, r25	; 0x3e
    1980:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1982:	8d ad       	ldd	r24, Y+61	; 0x3d
    1984:	9e ad       	ldd	r25, Y+62	; 0x3e
    1986:	00 97       	sbiw	r24, 0x00	; 0
    1988:	69 f7       	brne	.-38     	; 0x1964 <LCD_voidInit+0x262>
    198a:	16 c0       	rjmp	.+44     	; 0x19b8 <LCD_voidInit+0x2b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    198c:	fe 01       	movw	r30, r28
    198e:	ff 96       	adiw	r30, 0x3f	; 63
    1990:	60 81       	ld	r22, Z
    1992:	71 81       	ldd	r23, Z+1	; 0x01
    1994:	82 81       	ldd	r24, Z+2	; 0x02
    1996:	93 81       	ldd	r25, Z+3	; 0x03
    1998:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    199c:	dc 01       	movw	r26, r24
    199e:	cb 01       	movw	r24, r22
    19a0:	9e af       	std	Y+62, r25	; 0x3e
    19a2:	8d af       	std	Y+61, r24	; 0x3d
    19a4:	8d ad       	ldd	r24, Y+61	; 0x3d
    19a6:	9e ad       	ldd	r25, Y+62	; 0x3e
    19a8:	9a af       	std	Y+58, r25	; 0x3a
    19aa:	89 af       	std	Y+57, r24	; 0x39
    19ac:	89 ad       	ldd	r24, Y+57	; 0x39
    19ae:	9a ad       	ldd	r25, Y+58	; 0x3a
    19b0:	01 97       	sbiw	r24, 0x01	; 1
    19b2:	f1 f7       	brne	.-4      	; 0x19b0 <LCD_voidInit+0x2ae>
    19b4:	9a af       	std	Y+58, r25	; 0x3a
    19b6:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(15);
			LCD_voidSendCmd(LCD_Function_4BIT_2Lines);
    19b8:	88 e2       	ldi	r24, 0x28	; 40
    19ba:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <LCD_voidSendCmd>
    19be:	80 e0       	ldi	r24, 0x00	; 0
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	a0 e8       	ldi	r26, 0x80	; 128
    19c4:	bf e3       	ldi	r27, 0x3F	; 63
    19c6:	8d ab       	std	Y+53, r24	; 0x35
    19c8:	9e ab       	std	Y+54, r25	; 0x36
    19ca:	af ab       	std	Y+55, r26	; 0x37
    19cc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19ce:	6d a9       	ldd	r22, Y+53	; 0x35
    19d0:	7e a9       	ldd	r23, Y+54	; 0x36
    19d2:	8f a9       	ldd	r24, Y+55	; 0x37
    19d4:	98 ad       	ldd	r25, Y+56	; 0x38
    19d6:	20 e0       	ldi	r18, 0x00	; 0
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	4a ef       	ldi	r20, 0xFA	; 250
    19dc:	54 e4       	ldi	r21, 0x44	; 68
    19de:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19e2:	dc 01       	movw	r26, r24
    19e4:	cb 01       	movw	r24, r22
    19e6:	89 ab       	std	Y+49, r24	; 0x31
    19e8:	9a ab       	std	Y+50, r25	; 0x32
    19ea:	ab ab       	std	Y+51, r26	; 0x33
    19ec:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    19ee:	69 a9       	ldd	r22, Y+49	; 0x31
    19f0:	7a a9       	ldd	r23, Y+50	; 0x32
    19f2:	8b a9       	ldd	r24, Y+51	; 0x33
    19f4:	9c a9       	ldd	r25, Y+52	; 0x34
    19f6:	20 e0       	ldi	r18, 0x00	; 0
    19f8:	30 e0       	ldi	r19, 0x00	; 0
    19fa:	40 e8       	ldi	r20, 0x80	; 128
    19fc:	5f e3       	ldi	r21, 0x3F	; 63
    19fe:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a02:	88 23       	and	r24, r24
    1a04:	2c f4       	brge	.+10     	; 0x1a10 <LCD_voidInit+0x30e>
		__ticks = 1;
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	98 ab       	std	Y+48, r25	; 0x30
    1a0c:	8f a7       	std	Y+47, r24	; 0x2f
    1a0e:	3f c0       	rjmp	.+126    	; 0x1a8e <LCD_voidInit+0x38c>
	else if (__tmp > 65535)
    1a10:	69 a9       	ldd	r22, Y+49	; 0x31
    1a12:	7a a9       	ldd	r23, Y+50	; 0x32
    1a14:	8b a9       	ldd	r24, Y+51	; 0x33
    1a16:	9c a9       	ldd	r25, Y+52	; 0x34
    1a18:	20 e0       	ldi	r18, 0x00	; 0
    1a1a:	3f ef       	ldi	r19, 0xFF	; 255
    1a1c:	4f e7       	ldi	r20, 0x7F	; 127
    1a1e:	57 e4       	ldi	r21, 0x47	; 71
    1a20:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a24:	18 16       	cp	r1, r24
    1a26:	4c f5       	brge	.+82     	; 0x1a7a <LCD_voidInit+0x378>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a28:	6d a9       	ldd	r22, Y+53	; 0x35
    1a2a:	7e a9       	ldd	r23, Y+54	; 0x36
    1a2c:	8f a9       	ldd	r24, Y+55	; 0x37
    1a2e:	98 ad       	ldd	r25, Y+56	; 0x38
    1a30:	20 e0       	ldi	r18, 0x00	; 0
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	40 e2       	ldi	r20, 0x20	; 32
    1a36:	51 e4       	ldi	r21, 0x41	; 65
    1a38:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a3c:	dc 01       	movw	r26, r24
    1a3e:	cb 01       	movw	r24, r22
    1a40:	bc 01       	movw	r22, r24
    1a42:	cd 01       	movw	r24, r26
    1a44:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a48:	dc 01       	movw	r26, r24
    1a4a:	cb 01       	movw	r24, r22
    1a4c:	98 ab       	std	Y+48, r25	; 0x30
    1a4e:	8f a7       	std	Y+47, r24	; 0x2f
    1a50:	0f c0       	rjmp	.+30     	; 0x1a70 <LCD_voidInit+0x36e>
    1a52:	88 ec       	ldi	r24, 0xC8	; 200
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	9e a7       	std	Y+46, r25	; 0x2e
    1a58:	8d a7       	std	Y+45, r24	; 0x2d
    1a5a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a5c:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a5e:	01 97       	sbiw	r24, 0x01	; 1
    1a60:	f1 f7       	brne	.-4      	; 0x1a5e <LCD_voidInit+0x35c>
    1a62:	9e a7       	std	Y+46, r25	; 0x2e
    1a64:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a66:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a68:	98 a9       	ldd	r25, Y+48	; 0x30
    1a6a:	01 97       	sbiw	r24, 0x01	; 1
    1a6c:	98 ab       	std	Y+48, r25	; 0x30
    1a6e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a70:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a72:	98 a9       	ldd	r25, Y+48	; 0x30
    1a74:	00 97       	sbiw	r24, 0x00	; 0
    1a76:	69 f7       	brne	.-38     	; 0x1a52 <LCD_voidInit+0x350>
    1a78:	14 c0       	rjmp	.+40     	; 0x1aa2 <LCD_voidInit+0x3a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a7a:	69 a9       	ldd	r22, Y+49	; 0x31
    1a7c:	7a a9       	ldd	r23, Y+50	; 0x32
    1a7e:	8b a9       	ldd	r24, Y+51	; 0x33
    1a80:	9c a9       	ldd	r25, Y+52	; 0x34
    1a82:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a86:	dc 01       	movw	r26, r24
    1a88:	cb 01       	movw	r24, r22
    1a8a:	98 ab       	std	Y+48, r25	; 0x30
    1a8c:	8f a7       	std	Y+47, r24	; 0x2f
    1a8e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a90:	98 a9       	ldd	r25, Y+48	; 0x30
    1a92:	9c a7       	std	Y+44, r25	; 0x2c
    1a94:	8b a7       	std	Y+43, r24	; 0x2b
    1a96:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a98:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a9a:	01 97       	sbiw	r24, 0x01	; 1
    1a9c:	f1 f7       	brne	.-4      	; 0x1a9a <LCD_voidInit+0x398>
    1a9e:	9c a7       	std	Y+44, r25	; 0x2c
    1aa0:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(1);
		    LCD_voidSendCmd(LCD_DISP_ON_CURSOR_ON);
    1aa2:	8e e0       	ldi	r24, 0x0E	; 14
    1aa4:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <LCD_voidSendCmd>
    1aa8:	80 e0       	ldi	r24, 0x00	; 0
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	a0 e8       	ldi	r26, 0x80	; 128
    1aae:	bf e3       	ldi	r27, 0x3F	; 63
    1ab0:	8f a3       	std	Y+39, r24	; 0x27
    1ab2:	98 a7       	std	Y+40, r25	; 0x28
    1ab4:	a9 a7       	std	Y+41, r26	; 0x29
    1ab6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ab8:	6f a1       	ldd	r22, Y+39	; 0x27
    1aba:	78 a5       	ldd	r23, Y+40	; 0x28
    1abc:	89 a5       	ldd	r24, Y+41	; 0x29
    1abe:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ac0:	20 e0       	ldi	r18, 0x00	; 0
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	4a ef       	ldi	r20, 0xFA	; 250
    1ac6:	54 e4       	ldi	r21, 0x44	; 68
    1ac8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1acc:	dc 01       	movw	r26, r24
    1ace:	cb 01       	movw	r24, r22
    1ad0:	8b a3       	std	Y+35, r24	; 0x23
    1ad2:	9c a3       	std	Y+36, r25	; 0x24
    1ad4:	ad a3       	std	Y+37, r26	; 0x25
    1ad6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ad8:	6b a1       	ldd	r22, Y+35	; 0x23
    1ada:	7c a1       	ldd	r23, Y+36	; 0x24
    1adc:	8d a1       	ldd	r24, Y+37	; 0x25
    1ade:	9e a1       	ldd	r25, Y+38	; 0x26
    1ae0:	20 e0       	ldi	r18, 0x00	; 0
    1ae2:	30 e0       	ldi	r19, 0x00	; 0
    1ae4:	40 e8       	ldi	r20, 0x80	; 128
    1ae6:	5f e3       	ldi	r21, 0x3F	; 63
    1ae8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1aec:	88 23       	and	r24, r24
    1aee:	2c f4       	brge	.+10     	; 0x1afa <LCD_voidInit+0x3f8>
		__ticks = 1;
    1af0:	81 e0       	ldi	r24, 0x01	; 1
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	9a a3       	std	Y+34, r25	; 0x22
    1af6:	89 a3       	std	Y+33, r24	; 0x21
    1af8:	3f c0       	rjmp	.+126    	; 0x1b78 <LCD_voidInit+0x476>
	else if (__tmp > 65535)
    1afa:	6b a1       	ldd	r22, Y+35	; 0x23
    1afc:	7c a1       	ldd	r23, Y+36	; 0x24
    1afe:	8d a1       	ldd	r24, Y+37	; 0x25
    1b00:	9e a1       	ldd	r25, Y+38	; 0x26
    1b02:	20 e0       	ldi	r18, 0x00	; 0
    1b04:	3f ef       	ldi	r19, 0xFF	; 255
    1b06:	4f e7       	ldi	r20, 0x7F	; 127
    1b08:	57 e4       	ldi	r21, 0x47	; 71
    1b0a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b0e:	18 16       	cp	r1, r24
    1b10:	4c f5       	brge	.+82     	; 0x1b64 <LCD_voidInit+0x462>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b12:	6f a1       	ldd	r22, Y+39	; 0x27
    1b14:	78 a5       	ldd	r23, Y+40	; 0x28
    1b16:	89 a5       	ldd	r24, Y+41	; 0x29
    1b18:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b1a:	20 e0       	ldi	r18, 0x00	; 0
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	40 e2       	ldi	r20, 0x20	; 32
    1b20:	51 e4       	ldi	r21, 0x41	; 65
    1b22:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b26:	dc 01       	movw	r26, r24
    1b28:	cb 01       	movw	r24, r22
    1b2a:	bc 01       	movw	r22, r24
    1b2c:	cd 01       	movw	r24, r26
    1b2e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b32:	dc 01       	movw	r26, r24
    1b34:	cb 01       	movw	r24, r22
    1b36:	9a a3       	std	Y+34, r25	; 0x22
    1b38:	89 a3       	std	Y+33, r24	; 0x21
    1b3a:	0f c0       	rjmp	.+30     	; 0x1b5a <LCD_voidInit+0x458>
    1b3c:	88 ec       	ldi	r24, 0xC8	; 200
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	98 a3       	std	Y+32, r25	; 0x20
    1b42:	8f 8f       	std	Y+31, r24	; 0x1f
    1b44:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b46:	98 a1       	ldd	r25, Y+32	; 0x20
    1b48:	01 97       	sbiw	r24, 0x01	; 1
    1b4a:	f1 f7       	brne	.-4      	; 0x1b48 <LCD_voidInit+0x446>
    1b4c:	98 a3       	std	Y+32, r25	; 0x20
    1b4e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b50:	89 a1       	ldd	r24, Y+33	; 0x21
    1b52:	9a a1       	ldd	r25, Y+34	; 0x22
    1b54:	01 97       	sbiw	r24, 0x01	; 1
    1b56:	9a a3       	std	Y+34, r25	; 0x22
    1b58:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b5a:	89 a1       	ldd	r24, Y+33	; 0x21
    1b5c:	9a a1       	ldd	r25, Y+34	; 0x22
    1b5e:	00 97       	sbiw	r24, 0x00	; 0
    1b60:	69 f7       	brne	.-38     	; 0x1b3c <LCD_voidInit+0x43a>
    1b62:	14 c0       	rjmp	.+40     	; 0x1b8c <LCD_voidInit+0x48a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b64:	6b a1       	ldd	r22, Y+35	; 0x23
    1b66:	7c a1       	ldd	r23, Y+36	; 0x24
    1b68:	8d a1       	ldd	r24, Y+37	; 0x25
    1b6a:	9e a1       	ldd	r25, Y+38	; 0x26
    1b6c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b70:	dc 01       	movw	r26, r24
    1b72:	cb 01       	movw	r24, r22
    1b74:	9a a3       	std	Y+34, r25	; 0x22
    1b76:	89 a3       	std	Y+33, r24	; 0x21
    1b78:	89 a1       	ldd	r24, Y+33	; 0x21
    1b7a:	9a a1       	ldd	r25, Y+34	; 0x22
    1b7c:	9e 8f       	std	Y+30, r25	; 0x1e
    1b7e:	8d 8f       	std	Y+29, r24	; 0x1d
    1b80:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b82:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b84:	01 97       	sbiw	r24, 0x01	; 1
    1b86:	f1 f7       	brne	.-4      	; 0x1b84 <LCD_voidInit+0x482>
    1b88:	9e 8f       	std	Y+30, r25	; 0x1e
    1b8a:	8d 8f       	std	Y+29, r24	; 0x1d
		    _delay_ms(1);
		    LCD_voidSendCmd(LCD_CLEAR_SCREEN);
    1b8c:	81 e0       	ldi	r24, 0x01	; 1
    1b8e:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <LCD_voidSendCmd>
    1b92:	80 e0       	ldi	r24, 0x00	; 0
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	a0 e2       	ldi	r26, 0x20	; 32
    1b98:	b1 e4       	ldi	r27, 0x41	; 65
    1b9a:	89 8f       	std	Y+25, r24	; 0x19
    1b9c:	9a 8f       	std	Y+26, r25	; 0x1a
    1b9e:	ab 8f       	std	Y+27, r26	; 0x1b
    1ba0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ba2:	69 8d       	ldd	r22, Y+25	; 0x19
    1ba4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ba6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ba8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1baa:	20 e0       	ldi	r18, 0x00	; 0
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	4a ef       	ldi	r20, 0xFA	; 250
    1bb0:	54 e4       	ldi	r21, 0x44	; 68
    1bb2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bb6:	dc 01       	movw	r26, r24
    1bb8:	cb 01       	movw	r24, r22
    1bba:	8d 8b       	std	Y+21, r24	; 0x15
    1bbc:	9e 8b       	std	Y+22, r25	; 0x16
    1bbe:	af 8b       	std	Y+23, r26	; 0x17
    1bc0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1bc2:	6d 89       	ldd	r22, Y+21	; 0x15
    1bc4:	7e 89       	ldd	r23, Y+22	; 0x16
    1bc6:	8f 89       	ldd	r24, Y+23	; 0x17
    1bc8:	98 8d       	ldd	r25, Y+24	; 0x18
    1bca:	20 e0       	ldi	r18, 0x00	; 0
    1bcc:	30 e0       	ldi	r19, 0x00	; 0
    1bce:	40 e8       	ldi	r20, 0x80	; 128
    1bd0:	5f e3       	ldi	r21, 0x3F	; 63
    1bd2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1bd6:	88 23       	and	r24, r24
    1bd8:	2c f4       	brge	.+10     	; 0x1be4 <LCD_voidInit+0x4e2>
		__ticks = 1;
    1bda:	81 e0       	ldi	r24, 0x01	; 1
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	9c 8b       	std	Y+20, r25	; 0x14
    1be0:	8b 8b       	std	Y+19, r24	; 0x13
    1be2:	3f c0       	rjmp	.+126    	; 0x1c62 <LCD_voidInit+0x560>
	else if (__tmp > 65535)
    1be4:	6d 89       	ldd	r22, Y+21	; 0x15
    1be6:	7e 89       	ldd	r23, Y+22	; 0x16
    1be8:	8f 89       	ldd	r24, Y+23	; 0x17
    1bea:	98 8d       	ldd	r25, Y+24	; 0x18
    1bec:	20 e0       	ldi	r18, 0x00	; 0
    1bee:	3f ef       	ldi	r19, 0xFF	; 255
    1bf0:	4f e7       	ldi	r20, 0x7F	; 127
    1bf2:	57 e4       	ldi	r21, 0x47	; 71
    1bf4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1bf8:	18 16       	cp	r1, r24
    1bfa:	4c f5       	brge	.+82     	; 0x1c4e <LCD_voidInit+0x54c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bfc:	69 8d       	ldd	r22, Y+25	; 0x19
    1bfe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c00:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c02:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c04:	20 e0       	ldi	r18, 0x00	; 0
    1c06:	30 e0       	ldi	r19, 0x00	; 0
    1c08:	40 e2       	ldi	r20, 0x20	; 32
    1c0a:	51 e4       	ldi	r21, 0x41	; 65
    1c0c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c10:	dc 01       	movw	r26, r24
    1c12:	cb 01       	movw	r24, r22
    1c14:	bc 01       	movw	r22, r24
    1c16:	cd 01       	movw	r24, r26
    1c18:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c1c:	dc 01       	movw	r26, r24
    1c1e:	cb 01       	movw	r24, r22
    1c20:	9c 8b       	std	Y+20, r25	; 0x14
    1c22:	8b 8b       	std	Y+19, r24	; 0x13
    1c24:	0f c0       	rjmp	.+30     	; 0x1c44 <LCD_voidInit+0x542>
    1c26:	88 ec       	ldi	r24, 0xC8	; 200
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	9a 8b       	std	Y+18, r25	; 0x12
    1c2c:	89 8b       	std	Y+17, r24	; 0x11
    1c2e:	89 89       	ldd	r24, Y+17	; 0x11
    1c30:	9a 89       	ldd	r25, Y+18	; 0x12
    1c32:	01 97       	sbiw	r24, 0x01	; 1
    1c34:	f1 f7       	brne	.-4      	; 0x1c32 <LCD_voidInit+0x530>
    1c36:	9a 8b       	std	Y+18, r25	; 0x12
    1c38:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c3a:	8b 89       	ldd	r24, Y+19	; 0x13
    1c3c:	9c 89       	ldd	r25, Y+20	; 0x14
    1c3e:	01 97       	sbiw	r24, 0x01	; 1
    1c40:	9c 8b       	std	Y+20, r25	; 0x14
    1c42:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c44:	8b 89       	ldd	r24, Y+19	; 0x13
    1c46:	9c 89       	ldd	r25, Y+20	; 0x14
    1c48:	00 97       	sbiw	r24, 0x00	; 0
    1c4a:	69 f7       	brne	.-38     	; 0x1c26 <LCD_voidInit+0x524>
    1c4c:	14 c0       	rjmp	.+40     	; 0x1c76 <LCD_voidInit+0x574>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c4e:	6d 89       	ldd	r22, Y+21	; 0x15
    1c50:	7e 89       	ldd	r23, Y+22	; 0x16
    1c52:	8f 89       	ldd	r24, Y+23	; 0x17
    1c54:	98 8d       	ldd	r25, Y+24	; 0x18
    1c56:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c5a:	dc 01       	movw	r26, r24
    1c5c:	cb 01       	movw	r24, r22
    1c5e:	9c 8b       	std	Y+20, r25	; 0x14
    1c60:	8b 8b       	std	Y+19, r24	; 0x13
    1c62:	8b 89       	ldd	r24, Y+19	; 0x13
    1c64:	9c 89       	ldd	r25, Y+20	; 0x14
    1c66:	98 8b       	std	Y+16, r25	; 0x10
    1c68:	8f 87       	std	Y+15, r24	; 0x0f
    1c6a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c6c:	98 89       	ldd	r25, Y+16	; 0x10
    1c6e:	01 97       	sbiw	r24, 0x01	; 1
    1c70:	f1 f7       	brne	.-4      	; 0x1c6e <LCD_voidInit+0x56c>
    1c72:	98 8b       	std	Y+16, r25	; 0x10
    1c74:	8f 87       	std	Y+15, r24	; 0x0f
		    _delay_ms(10);
		    LCD_voidSendCmd(LCD_ENTRY_MODE);
    1c76:	86 e0       	ldi	r24, 0x06	; 6
    1c78:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <LCD_voidSendCmd>
    1c7c:	80 e0       	ldi	r24, 0x00	; 0
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	a0 e8       	ldi	r26, 0x80	; 128
    1c82:	bf e3       	ldi	r27, 0x3F	; 63
    1c84:	8b 87       	std	Y+11, r24	; 0x0b
    1c86:	9c 87       	std	Y+12, r25	; 0x0c
    1c88:	ad 87       	std	Y+13, r26	; 0x0d
    1c8a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c8c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c8e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c90:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c92:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c94:	20 e0       	ldi	r18, 0x00	; 0
    1c96:	30 e0       	ldi	r19, 0x00	; 0
    1c98:	4a ef       	ldi	r20, 0xFA	; 250
    1c9a:	54 e4       	ldi	r21, 0x44	; 68
    1c9c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ca0:	dc 01       	movw	r26, r24
    1ca2:	cb 01       	movw	r24, r22
    1ca4:	8f 83       	std	Y+7, r24	; 0x07
    1ca6:	98 87       	std	Y+8, r25	; 0x08
    1ca8:	a9 87       	std	Y+9, r26	; 0x09
    1caa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cac:	6f 81       	ldd	r22, Y+7	; 0x07
    1cae:	78 85       	ldd	r23, Y+8	; 0x08
    1cb0:	89 85       	ldd	r24, Y+9	; 0x09
    1cb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cb4:	20 e0       	ldi	r18, 0x00	; 0
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	40 e8       	ldi	r20, 0x80	; 128
    1cba:	5f e3       	ldi	r21, 0x3F	; 63
    1cbc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1cc0:	88 23       	and	r24, r24
    1cc2:	2c f4       	brge	.+10     	; 0x1cce <LCD_voidInit+0x5cc>
		__ticks = 1;
    1cc4:	81 e0       	ldi	r24, 0x01	; 1
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	9e 83       	std	Y+6, r25	; 0x06
    1cca:	8d 83       	std	Y+5, r24	; 0x05
    1ccc:	3f c0       	rjmp	.+126    	; 0x1d4c <LCD_voidInit+0x64a>
	else if (__tmp > 65535)
    1cce:	6f 81       	ldd	r22, Y+7	; 0x07
    1cd0:	78 85       	ldd	r23, Y+8	; 0x08
    1cd2:	89 85       	ldd	r24, Y+9	; 0x09
    1cd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cd6:	20 e0       	ldi	r18, 0x00	; 0
    1cd8:	3f ef       	ldi	r19, 0xFF	; 255
    1cda:	4f e7       	ldi	r20, 0x7F	; 127
    1cdc:	57 e4       	ldi	r21, 0x47	; 71
    1cde:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ce2:	18 16       	cp	r1, r24
    1ce4:	4c f5       	brge	.+82     	; 0x1d38 <LCD_voidInit+0x636>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ce6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ce8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cea:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cec:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cee:	20 e0       	ldi	r18, 0x00	; 0
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	40 e2       	ldi	r20, 0x20	; 32
    1cf4:	51 e4       	ldi	r21, 0x41	; 65
    1cf6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cfa:	dc 01       	movw	r26, r24
    1cfc:	cb 01       	movw	r24, r22
    1cfe:	bc 01       	movw	r22, r24
    1d00:	cd 01       	movw	r24, r26
    1d02:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d06:	dc 01       	movw	r26, r24
    1d08:	cb 01       	movw	r24, r22
    1d0a:	9e 83       	std	Y+6, r25	; 0x06
    1d0c:	8d 83       	std	Y+5, r24	; 0x05
    1d0e:	0f c0       	rjmp	.+30     	; 0x1d2e <LCD_voidInit+0x62c>
    1d10:	88 ec       	ldi	r24, 0xC8	; 200
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	9c 83       	std	Y+4, r25	; 0x04
    1d16:	8b 83       	std	Y+3, r24	; 0x03
    1d18:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d1c:	01 97       	sbiw	r24, 0x01	; 1
    1d1e:	f1 f7       	brne	.-4      	; 0x1d1c <LCD_voidInit+0x61a>
    1d20:	9c 83       	std	Y+4, r25	; 0x04
    1d22:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d24:	8d 81       	ldd	r24, Y+5	; 0x05
    1d26:	9e 81       	ldd	r25, Y+6	; 0x06
    1d28:	01 97       	sbiw	r24, 0x01	; 1
    1d2a:	9e 83       	std	Y+6, r25	; 0x06
    1d2c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d30:	9e 81       	ldd	r25, Y+6	; 0x06
    1d32:	00 97       	sbiw	r24, 0x00	; 0
    1d34:	69 f7       	brne	.-38     	; 0x1d10 <LCD_voidInit+0x60e>
    1d36:	14 c0       	rjmp	.+40     	; 0x1d60 <LCD_voidInit+0x65e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d38:	6f 81       	ldd	r22, Y+7	; 0x07
    1d3a:	78 85       	ldd	r23, Y+8	; 0x08
    1d3c:	89 85       	ldd	r24, Y+9	; 0x09
    1d3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d40:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d44:	dc 01       	movw	r26, r24
    1d46:	cb 01       	movw	r24, r22
    1d48:	9e 83       	std	Y+6, r25	; 0x06
    1d4a:	8d 83       	std	Y+5, r24	; 0x05
    1d4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d50:	9a 83       	std	Y+2, r25	; 0x02
    1d52:	89 83       	std	Y+1, r24	; 0x01
    1d54:	89 81       	ldd	r24, Y+1	; 0x01
    1d56:	9a 81       	ldd	r25, Y+2	; 0x02
    1d58:	01 97       	sbiw	r24, 0x01	; 1
    1d5a:	f1 f7       	brne	.-4      	; 0x1d58 <LCD_voidInit+0x656>
    1d5c:	9a 83       	std	Y+2, r25	; 0x02
    1d5e:	89 83       	std	Y+1, r24	; 0x01
	#endif
	
	
	

}
    1d60:	cc 5a       	subi	r28, 0xAC	; 172
    1d62:	df 4f       	sbci	r29, 0xFF	; 255
    1d64:	0f b6       	in	r0, 0x3f	; 63
    1d66:	f8 94       	cli
    1d68:	de bf       	out	0x3e, r29	; 62
    1d6a:	0f be       	out	0x3f, r0	; 63
    1d6c:	cd bf       	out	0x3d, r28	; 61
    1d6e:	cf 91       	pop	r28
    1d70:	df 91       	pop	r29
    1d72:	1f 91       	pop	r17
    1d74:	0f 91       	pop	r16
    1d76:	08 95       	ret

00001d78 <LCD_voidSendCmd>:

void LCD_voidSendCmd(u8 copy_u8Cmd)
{
    1d78:	df 93       	push	r29
    1d7a:	cf 93       	push	r28
    1d7c:	cd b7       	in	r28, 0x3d	; 61
    1d7e:	de b7       	in	r29, 0x3e	; 62
    1d80:	2f 97       	sbiw	r28, 0x0f	; 15
    1d82:	0f b6       	in	r0, 0x3f	; 63
    1d84:	f8 94       	cli
    1d86:	de bf       	out	0x3e, r29	; 62
    1d88:	0f be       	out	0x3f, r0	; 63
    1d8a:	cd bf       	out	0x3d, r28	; 61
    1d8c:	8f 87       	std	Y+15, r24	; 0x0f
		GPIO_voidWritePin  (LCD_RWPORT , LCD_RWPIN , 0);
		LCD_voidSendEnPulse();
		
	#elif LCD_MODE == 1 
		#if LCD_NIBBLE == 0 
			GPIO_voidWriteLowNipple(LCD_PORT , copy_u8Cmd>>4);
    1d8e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d90:	98 2f       	mov	r25, r24
    1d92:	92 95       	swap	r25
    1d94:	9f 70       	andi	r25, 0x0F	; 15
    1d96:	83 e0       	ldi	r24, 0x03	; 3
    1d98:	69 2f       	mov	r22, r25
    1d9a:	0e 94 a1 0a 	call	0x1542	; 0x1542 <GPIO_voidWriteLowNipple>
			GPIO_voidWritePin  (LCD_RSPORT , LCD_RSPIN , 0);
    1d9e:	82 e0       	ldi	r24, 0x02	; 2
    1da0:	60 e0       	ldi	r22, 0x00	; 0
    1da2:	40 e0       	ldi	r20, 0x00	; 0
    1da4:	0e 94 c1 07 	call	0xf82	; 0xf82 <GPIO_voidWritePin>
			GPIO_voidWritePin  (LCD_RWPORT , LCD_RWPIN , 0);
    1da8:	82 e0       	ldi	r24, 0x02	; 2
    1daa:	61 e0       	ldi	r22, 0x01	; 1
    1dac:	40 e0       	ldi	r20, 0x00	; 0
    1dae:	0e 94 c1 07 	call	0xf82	; 0xf82 <GPIO_voidWritePin>
			LCD_voidSendEnPulse();
    1db2:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <LCD_voidSendEnPulse>
		
			GPIO_voidWriteLowNipple(LCD_PORT , copy_u8Cmd);
    1db6:	83 e0       	ldi	r24, 0x03	; 3
    1db8:	6f 85       	ldd	r22, Y+15	; 0x0f
    1dba:	0e 94 a1 0a 	call	0x1542	; 0x1542 <GPIO_voidWriteLowNipple>
			GPIO_voidWritePin  (LCD_RSPORT , LCD_RSPIN , 0);
    1dbe:	82 e0       	ldi	r24, 0x02	; 2
    1dc0:	60 e0       	ldi	r22, 0x00	; 0
    1dc2:	40 e0       	ldi	r20, 0x00	; 0
    1dc4:	0e 94 c1 07 	call	0xf82	; 0xf82 <GPIO_voidWritePin>
			GPIO_voidWritePin  (LCD_RWPORT , LCD_RWPIN , 0);
    1dc8:	82 e0       	ldi	r24, 0x02	; 2
    1dca:	61 e0       	ldi	r22, 0x01	; 1
    1dcc:	40 e0       	ldi	r20, 0x00	; 0
    1dce:	0e 94 c1 07 	call	0xf82	; 0xf82 <GPIO_voidWritePin>
			LCD_voidSendEnPulse();
    1dd2:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <LCD_voidSendEnPulse>
    1dd6:	80 e0       	ldi	r24, 0x00	; 0
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	a0 e0       	ldi	r26, 0x00	; 0
    1ddc:	b0 e4       	ldi	r27, 0x40	; 64
    1dde:	8b 87       	std	Y+11, r24	; 0x0b
    1de0:	9c 87       	std	Y+12, r25	; 0x0c
    1de2:	ad 87       	std	Y+13, r26	; 0x0d
    1de4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1de6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1de8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dea:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dec:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dee:	20 e0       	ldi	r18, 0x00	; 0
    1df0:	30 e0       	ldi	r19, 0x00	; 0
    1df2:	4a ef       	ldi	r20, 0xFA	; 250
    1df4:	54 e4       	ldi	r21, 0x44	; 68
    1df6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dfa:	dc 01       	movw	r26, r24
    1dfc:	cb 01       	movw	r24, r22
    1dfe:	8f 83       	std	Y+7, r24	; 0x07
    1e00:	98 87       	std	Y+8, r25	; 0x08
    1e02:	a9 87       	std	Y+9, r26	; 0x09
    1e04:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e06:	6f 81       	ldd	r22, Y+7	; 0x07
    1e08:	78 85       	ldd	r23, Y+8	; 0x08
    1e0a:	89 85       	ldd	r24, Y+9	; 0x09
    1e0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e0e:	20 e0       	ldi	r18, 0x00	; 0
    1e10:	30 e0       	ldi	r19, 0x00	; 0
    1e12:	40 e8       	ldi	r20, 0x80	; 128
    1e14:	5f e3       	ldi	r21, 0x3F	; 63
    1e16:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1e1a:	88 23       	and	r24, r24
    1e1c:	2c f4       	brge	.+10     	; 0x1e28 <LCD_voidSendCmd+0xb0>
		__ticks = 1;
    1e1e:	81 e0       	ldi	r24, 0x01	; 1
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	9e 83       	std	Y+6, r25	; 0x06
    1e24:	8d 83       	std	Y+5, r24	; 0x05
    1e26:	3f c0       	rjmp	.+126    	; 0x1ea6 <LCD_voidSendCmd+0x12e>
	else if (__tmp > 65535)
    1e28:	6f 81       	ldd	r22, Y+7	; 0x07
    1e2a:	78 85       	ldd	r23, Y+8	; 0x08
    1e2c:	89 85       	ldd	r24, Y+9	; 0x09
    1e2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e30:	20 e0       	ldi	r18, 0x00	; 0
    1e32:	3f ef       	ldi	r19, 0xFF	; 255
    1e34:	4f e7       	ldi	r20, 0x7F	; 127
    1e36:	57 e4       	ldi	r21, 0x47	; 71
    1e38:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e3c:	18 16       	cp	r1, r24
    1e3e:	4c f5       	brge	.+82     	; 0x1e92 <LCD_voidSendCmd+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e40:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e42:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e44:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e46:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e48:	20 e0       	ldi	r18, 0x00	; 0
    1e4a:	30 e0       	ldi	r19, 0x00	; 0
    1e4c:	40 e2       	ldi	r20, 0x20	; 32
    1e4e:	51 e4       	ldi	r21, 0x41	; 65
    1e50:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e54:	dc 01       	movw	r26, r24
    1e56:	cb 01       	movw	r24, r22
    1e58:	bc 01       	movw	r22, r24
    1e5a:	cd 01       	movw	r24, r26
    1e5c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e60:	dc 01       	movw	r26, r24
    1e62:	cb 01       	movw	r24, r22
    1e64:	9e 83       	std	Y+6, r25	; 0x06
    1e66:	8d 83       	std	Y+5, r24	; 0x05
    1e68:	0f c0       	rjmp	.+30     	; 0x1e88 <LCD_voidSendCmd+0x110>
    1e6a:	88 ec       	ldi	r24, 0xC8	; 200
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	9c 83       	std	Y+4, r25	; 0x04
    1e70:	8b 83       	std	Y+3, r24	; 0x03
    1e72:	8b 81       	ldd	r24, Y+3	; 0x03
    1e74:	9c 81       	ldd	r25, Y+4	; 0x04
    1e76:	01 97       	sbiw	r24, 0x01	; 1
    1e78:	f1 f7       	brne	.-4      	; 0x1e76 <LCD_voidSendCmd+0xfe>
    1e7a:	9c 83       	std	Y+4, r25	; 0x04
    1e7c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e80:	9e 81       	ldd	r25, Y+6	; 0x06
    1e82:	01 97       	sbiw	r24, 0x01	; 1
    1e84:	9e 83       	std	Y+6, r25	; 0x06
    1e86:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e88:	8d 81       	ldd	r24, Y+5	; 0x05
    1e8a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e8c:	00 97       	sbiw	r24, 0x00	; 0
    1e8e:	69 f7       	brne	.-38     	; 0x1e6a <LCD_voidSendCmd+0xf2>
    1e90:	14 c0       	rjmp	.+40     	; 0x1eba <LCD_voidSendCmd+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e92:	6f 81       	ldd	r22, Y+7	; 0x07
    1e94:	78 85       	ldd	r23, Y+8	; 0x08
    1e96:	89 85       	ldd	r24, Y+9	; 0x09
    1e98:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e9a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e9e:	dc 01       	movw	r26, r24
    1ea0:	cb 01       	movw	r24, r22
    1ea2:	9e 83       	std	Y+6, r25	; 0x06
    1ea4:	8d 83       	std	Y+5, r24	; 0x05
    1ea6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ea8:	9e 81       	ldd	r25, Y+6	; 0x06
    1eaa:	9a 83       	std	Y+2, r25	; 0x02
    1eac:	89 83       	std	Y+1, r24	; 0x01
    1eae:	89 81       	ldd	r24, Y+1	; 0x01
    1eb0:	9a 81       	ldd	r25, Y+2	; 0x02
    1eb2:	01 97       	sbiw	r24, 0x01	; 1
    1eb4:	f1 f7       	brne	.-4      	; 0x1eb2 <LCD_voidSendCmd+0x13a>
    1eb6:	9a 83       	std	Y+2, r25	; 0x02
    1eb8:	89 83       	std	Y+1, r24	; 0x01
			LCD_voidSendEnPulse();
			_delay_ms(2);
		#endif
	#endif
	
}
    1eba:	2f 96       	adiw	r28, 0x0f	; 15
    1ebc:	0f b6       	in	r0, 0x3f	; 63
    1ebe:	f8 94       	cli
    1ec0:	de bf       	out	0x3e, r29	; 62
    1ec2:	0f be       	out	0x3f, r0	; 63
    1ec4:	cd bf       	out	0x3d, r28	; 61
    1ec6:	cf 91       	pop	r28
    1ec8:	df 91       	pop	r29
    1eca:	08 95       	ret

00001ecc <LCD_voidSendEnPulse>:
void LCD_voidSendEnPulse ()
{
    1ecc:	df 93       	push	r29
    1ece:	cf 93       	push	r28
    1ed0:	cd b7       	in	r28, 0x3d	; 61
    1ed2:	de b7       	in	r29, 0x3e	; 62
    1ed4:	2e 97       	sbiw	r28, 0x0e	; 14
    1ed6:	0f b6       	in	r0, 0x3f	; 63
    1ed8:	f8 94       	cli
    1eda:	de bf       	out	0x3e, r29	; 62
    1edc:	0f be       	out	0x3f, r0	; 63
    1ede:	cd bf       	out	0x3d, r28	; 61
	GPIO_voidWritePin  (LCD_ENPORT , LCD_ENPIN , 1);
    1ee0:	82 e0       	ldi	r24, 0x02	; 2
    1ee2:	62 e0       	ldi	r22, 0x02	; 2
    1ee4:	41 e0       	ldi	r20, 0x01	; 1
    1ee6:	0e 94 c1 07 	call	0xf82	; 0xf82 <GPIO_voidWritePin>
    1eea:	80 e0       	ldi	r24, 0x00	; 0
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	a0 e0       	ldi	r26, 0x00	; 0
    1ef0:	b0 e4       	ldi	r27, 0x40	; 64
    1ef2:	8b 87       	std	Y+11, r24	; 0x0b
    1ef4:	9c 87       	std	Y+12, r25	; 0x0c
    1ef6:	ad 87       	std	Y+13, r26	; 0x0d
    1ef8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1efa:	6b 85       	ldd	r22, Y+11	; 0x0b
    1efc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1efe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f00:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f02:	20 e0       	ldi	r18, 0x00	; 0
    1f04:	30 e0       	ldi	r19, 0x00	; 0
    1f06:	4a ef       	ldi	r20, 0xFA	; 250
    1f08:	54 e4       	ldi	r21, 0x44	; 68
    1f0a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f0e:	dc 01       	movw	r26, r24
    1f10:	cb 01       	movw	r24, r22
    1f12:	8f 83       	std	Y+7, r24	; 0x07
    1f14:	98 87       	std	Y+8, r25	; 0x08
    1f16:	a9 87       	std	Y+9, r26	; 0x09
    1f18:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f1a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f1c:	78 85       	ldd	r23, Y+8	; 0x08
    1f1e:	89 85       	ldd	r24, Y+9	; 0x09
    1f20:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f22:	20 e0       	ldi	r18, 0x00	; 0
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	40 e8       	ldi	r20, 0x80	; 128
    1f28:	5f e3       	ldi	r21, 0x3F	; 63
    1f2a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f2e:	88 23       	and	r24, r24
    1f30:	2c f4       	brge	.+10     	; 0x1f3c <LCD_voidSendEnPulse+0x70>
		__ticks = 1;
    1f32:	81 e0       	ldi	r24, 0x01	; 1
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	9e 83       	std	Y+6, r25	; 0x06
    1f38:	8d 83       	std	Y+5, r24	; 0x05
    1f3a:	3f c0       	rjmp	.+126    	; 0x1fba <LCD_voidSendEnPulse+0xee>
	else if (__tmp > 65535)
    1f3c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f3e:	78 85       	ldd	r23, Y+8	; 0x08
    1f40:	89 85       	ldd	r24, Y+9	; 0x09
    1f42:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f44:	20 e0       	ldi	r18, 0x00	; 0
    1f46:	3f ef       	ldi	r19, 0xFF	; 255
    1f48:	4f e7       	ldi	r20, 0x7F	; 127
    1f4a:	57 e4       	ldi	r21, 0x47	; 71
    1f4c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f50:	18 16       	cp	r1, r24
    1f52:	4c f5       	brge	.+82     	; 0x1fa6 <LCD_voidSendEnPulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f54:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f56:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f58:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f5c:	20 e0       	ldi	r18, 0x00	; 0
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	40 e2       	ldi	r20, 0x20	; 32
    1f62:	51 e4       	ldi	r21, 0x41	; 65
    1f64:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f68:	dc 01       	movw	r26, r24
    1f6a:	cb 01       	movw	r24, r22
    1f6c:	bc 01       	movw	r22, r24
    1f6e:	cd 01       	movw	r24, r26
    1f70:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f74:	dc 01       	movw	r26, r24
    1f76:	cb 01       	movw	r24, r22
    1f78:	9e 83       	std	Y+6, r25	; 0x06
    1f7a:	8d 83       	std	Y+5, r24	; 0x05
    1f7c:	0f c0       	rjmp	.+30     	; 0x1f9c <LCD_voidSendEnPulse+0xd0>
    1f7e:	88 ec       	ldi	r24, 0xC8	; 200
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	9c 83       	std	Y+4, r25	; 0x04
    1f84:	8b 83       	std	Y+3, r24	; 0x03
    1f86:	8b 81       	ldd	r24, Y+3	; 0x03
    1f88:	9c 81       	ldd	r25, Y+4	; 0x04
    1f8a:	01 97       	sbiw	r24, 0x01	; 1
    1f8c:	f1 f7       	brne	.-4      	; 0x1f8a <LCD_voidSendEnPulse+0xbe>
    1f8e:	9c 83       	std	Y+4, r25	; 0x04
    1f90:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f92:	8d 81       	ldd	r24, Y+5	; 0x05
    1f94:	9e 81       	ldd	r25, Y+6	; 0x06
    1f96:	01 97       	sbiw	r24, 0x01	; 1
    1f98:	9e 83       	std	Y+6, r25	; 0x06
    1f9a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f9e:	9e 81       	ldd	r25, Y+6	; 0x06
    1fa0:	00 97       	sbiw	r24, 0x00	; 0
    1fa2:	69 f7       	brne	.-38     	; 0x1f7e <LCD_voidSendEnPulse+0xb2>
    1fa4:	14 c0       	rjmp	.+40     	; 0x1fce <LCD_voidSendEnPulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fa6:	6f 81       	ldd	r22, Y+7	; 0x07
    1fa8:	78 85       	ldd	r23, Y+8	; 0x08
    1faa:	89 85       	ldd	r24, Y+9	; 0x09
    1fac:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fb2:	dc 01       	movw	r26, r24
    1fb4:	cb 01       	movw	r24, r22
    1fb6:	9e 83       	std	Y+6, r25	; 0x06
    1fb8:	8d 83       	std	Y+5, r24	; 0x05
    1fba:	8d 81       	ldd	r24, Y+5	; 0x05
    1fbc:	9e 81       	ldd	r25, Y+6	; 0x06
    1fbe:	9a 83       	std	Y+2, r25	; 0x02
    1fc0:	89 83       	std	Y+1, r24	; 0x01
    1fc2:	89 81       	ldd	r24, Y+1	; 0x01
    1fc4:	9a 81       	ldd	r25, Y+2	; 0x02
    1fc6:	01 97       	sbiw	r24, 0x01	; 1
    1fc8:	f1 f7       	brne	.-4      	; 0x1fc6 <LCD_voidSendEnPulse+0xfa>
    1fca:	9a 83       	std	Y+2, r25	; 0x02
    1fcc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	GPIO_voidWritePin  (LCD_ENPORT , LCD_ENPIN , 0);
    1fce:	82 e0       	ldi	r24, 0x02	; 2
    1fd0:	62 e0       	ldi	r22, 0x02	; 2
    1fd2:	40 e0       	ldi	r20, 0x00	; 0
    1fd4:	0e 94 c1 07 	call	0xf82	; 0xf82 <GPIO_voidWritePin>

}
    1fd8:	2e 96       	adiw	r28, 0x0e	; 14
    1fda:	0f b6       	in	r0, 0x3f	; 63
    1fdc:	f8 94       	cli
    1fde:	de bf       	out	0x3e, r29	; 62
    1fe0:	0f be       	out	0x3f, r0	; 63
    1fe2:	cd bf       	out	0x3d, r28	; 61
    1fe4:	cf 91       	pop	r28
    1fe6:	df 91       	pop	r29
    1fe8:	08 95       	ret

00001fea <LCD_voidMoveCrusor>:
void LCD_voidMoveCrusor(u8 copy_u8Line , u8 copy_u8Position)
{
    1fea:	df 93       	push	r29
    1fec:	cf 93       	push	r28
    1fee:	cd b7       	in	r28, 0x3d	; 61
    1ff0:	de b7       	in	r29, 0x3e	; 62
    1ff2:	61 97       	sbiw	r28, 0x11	; 17
    1ff4:	0f b6       	in	r0, 0x3f	; 63
    1ff6:	f8 94       	cli
    1ff8:	de bf       	out	0x3e, r29	; 62
    1ffa:	0f be       	out	0x3f, r0	; 63
    1ffc:	cd bf       	out	0x3d, r28	; 61
    1ffe:	88 8b       	std	Y+16, r24	; 0x10
    2000:	69 8b       	std	Y+17, r22	; 0x11
	u8 data ;
if(copy_u8Line < 1 || copy_u8Line > 2 || copy_u8Position >16 || copy_u8Position <1 )	
    2002:	88 89       	ldd	r24, Y+16	; 0x10
    2004:	88 23       	and	r24, r24
    2006:	49 f0       	breq	.+18     	; 0x201a <LCD_voidMoveCrusor+0x30>
    2008:	88 89       	ldd	r24, Y+16	; 0x10
    200a:	83 30       	cpi	r24, 0x03	; 3
    200c:	30 f4       	brcc	.+12     	; 0x201a <LCD_voidMoveCrusor+0x30>
    200e:	89 89       	ldd	r24, Y+17	; 0x11
    2010:	81 31       	cpi	r24, 0x11	; 17
    2012:	18 f4       	brcc	.+6      	; 0x201a <LCD_voidMoveCrusor+0x30>
    2014:	89 89       	ldd	r24, Y+17	; 0x11
    2016:	88 23       	and	r24, r24
    2018:	19 f4       	brne	.+6      	; 0x2020 <LCD_voidMoveCrusor+0x36>
{
	data = 0x80 ;
    201a:	80 e8       	ldi	r24, 0x80	; 128
    201c:	8f 87       	std	Y+15, r24	; 0x0f
    201e:	0d c0       	rjmp	.+26     	; 0x203a <LCD_voidMoveCrusor+0x50>
}
else if (copy_u8Line ==1)
    2020:	88 89       	ldd	r24, Y+16	; 0x10
    2022:	81 30       	cpi	r24, 0x01	; 1
    2024:	21 f4       	brne	.+8      	; 0x202e <LCD_voidMoveCrusor+0x44>
{
	data = 0x80 +(copy_u8Position -1);
    2026:	89 89       	ldd	r24, Y+17	; 0x11
    2028:	81 58       	subi	r24, 0x81	; 129
    202a:	8f 87       	std	Y+15, r24	; 0x0f
    202c:	06 c0       	rjmp	.+12     	; 0x203a <LCD_voidMoveCrusor+0x50>
}
else if (copy_u8Line==2)
    202e:	88 89       	ldd	r24, Y+16	; 0x10
    2030:	82 30       	cpi	r24, 0x02	; 2
    2032:	19 f4       	brne	.+6      	; 0x203a <LCD_voidMoveCrusor+0x50>
{
	data = 0xC0 + (copy_u8Position -1 );
    2034:	89 89       	ldd	r24, Y+17	; 0x11
    2036:	81 54       	subi	r24, 0x41	; 65
    2038:	8f 87       	std	Y+15, r24	; 0x0f
}
LCD_voidSendCmd(data);
    203a:	8f 85       	ldd	r24, Y+15	; 0x0f
    203c:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <LCD_voidSendCmd>
    2040:	80 e0       	ldi	r24, 0x00	; 0
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	a0 e8       	ldi	r26, 0x80	; 128
    2046:	bf e3       	ldi	r27, 0x3F	; 63
    2048:	8b 87       	std	Y+11, r24	; 0x0b
    204a:	9c 87       	std	Y+12, r25	; 0x0c
    204c:	ad 87       	std	Y+13, r26	; 0x0d
    204e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2050:	6b 85       	ldd	r22, Y+11	; 0x0b
    2052:	7c 85       	ldd	r23, Y+12	; 0x0c
    2054:	8d 85       	ldd	r24, Y+13	; 0x0d
    2056:	9e 85       	ldd	r25, Y+14	; 0x0e
    2058:	20 e0       	ldi	r18, 0x00	; 0
    205a:	30 e0       	ldi	r19, 0x00	; 0
    205c:	4a ef       	ldi	r20, 0xFA	; 250
    205e:	54 e4       	ldi	r21, 0x44	; 68
    2060:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2064:	dc 01       	movw	r26, r24
    2066:	cb 01       	movw	r24, r22
    2068:	8f 83       	std	Y+7, r24	; 0x07
    206a:	98 87       	std	Y+8, r25	; 0x08
    206c:	a9 87       	std	Y+9, r26	; 0x09
    206e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2070:	6f 81       	ldd	r22, Y+7	; 0x07
    2072:	78 85       	ldd	r23, Y+8	; 0x08
    2074:	89 85       	ldd	r24, Y+9	; 0x09
    2076:	9a 85       	ldd	r25, Y+10	; 0x0a
    2078:	20 e0       	ldi	r18, 0x00	; 0
    207a:	30 e0       	ldi	r19, 0x00	; 0
    207c:	40 e8       	ldi	r20, 0x80	; 128
    207e:	5f e3       	ldi	r21, 0x3F	; 63
    2080:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2084:	88 23       	and	r24, r24
    2086:	2c f4       	brge	.+10     	; 0x2092 <LCD_voidMoveCrusor+0xa8>
		__ticks = 1;
    2088:	81 e0       	ldi	r24, 0x01	; 1
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	9e 83       	std	Y+6, r25	; 0x06
    208e:	8d 83       	std	Y+5, r24	; 0x05
    2090:	3f c0       	rjmp	.+126    	; 0x2110 <LCD_voidMoveCrusor+0x126>
	else if (__tmp > 65535)
    2092:	6f 81       	ldd	r22, Y+7	; 0x07
    2094:	78 85       	ldd	r23, Y+8	; 0x08
    2096:	89 85       	ldd	r24, Y+9	; 0x09
    2098:	9a 85       	ldd	r25, Y+10	; 0x0a
    209a:	20 e0       	ldi	r18, 0x00	; 0
    209c:	3f ef       	ldi	r19, 0xFF	; 255
    209e:	4f e7       	ldi	r20, 0x7F	; 127
    20a0:	57 e4       	ldi	r21, 0x47	; 71
    20a2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    20a6:	18 16       	cp	r1, r24
    20a8:	4c f5       	brge	.+82     	; 0x20fc <LCD_voidMoveCrusor+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    20ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    20ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    20b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    20b2:	20 e0       	ldi	r18, 0x00	; 0
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	40 e2       	ldi	r20, 0x20	; 32
    20b8:	51 e4       	ldi	r21, 0x41	; 65
    20ba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20be:	dc 01       	movw	r26, r24
    20c0:	cb 01       	movw	r24, r22
    20c2:	bc 01       	movw	r22, r24
    20c4:	cd 01       	movw	r24, r26
    20c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20ca:	dc 01       	movw	r26, r24
    20cc:	cb 01       	movw	r24, r22
    20ce:	9e 83       	std	Y+6, r25	; 0x06
    20d0:	8d 83       	std	Y+5, r24	; 0x05
    20d2:	0f c0       	rjmp	.+30     	; 0x20f2 <LCD_voidMoveCrusor+0x108>
    20d4:	88 ec       	ldi	r24, 0xC8	; 200
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	9c 83       	std	Y+4, r25	; 0x04
    20da:	8b 83       	std	Y+3, r24	; 0x03
    20dc:	8b 81       	ldd	r24, Y+3	; 0x03
    20de:	9c 81       	ldd	r25, Y+4	; 0x04
    20e0:	01 97       	sbiw	r24, 0x01	; 1
    20e2:	f1 f7       	brne	.-4      	; 0x20e0 <LCD_voidMoveCrusor+0xf6>
    20e4:	9c 83       	std	Y+4, r25	; 0x04
    20e6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20e8:	8d 81       	ldd	r24, Y+5	; 0x05
    20ea:	9e 81       	ldd	r25, Y+6	; 0x06
    20ec:	01 97       	sbiw	r24, 0x01	; 1
    20ee:	9e 83       	std	Y+6, r25	; 0x06
    20f0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20f2:	8d 81       	ldd	r24, Y+5	; 0x05
    20f4:	9e 81       	ldd	r25, Y+6	; 0x06
    20f6:	00 97       	sbiw	r24, 0x00	; 0
    20f8:	69 f7       	brne	.-38     	; 0x20d4 <LCD_voidMoveCrusor+0xea>
    20fa:	14 c0       	rjmp	.+40     	; 0x2124 <LCD_voidMoveCrusor+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20fc:	6f 81       	ldd	r22, Y+7	; 0x07
    20fe:	78 85       	ldd	r23, Y+8	; 0x08
    2100:	89 85       	ldd	r24, Y+9	; 0x09
    2102:	9a 85       	ldd	r25, Y+10	; 0x0a
    2104:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2108:	dc 01       	movw	r26, r24
    210a:	cb 01       	movw	r24, r22
    210c:	9e 83       	std	Y+6, r25	; 0x06
    210e:	8d 83       	std	Y+5, r24	; 0x05
    2110:	8d 81       	ldd	r24, Y+5	; 0x05
    2112:	9e 81       	ldd	r25, Y+6	; 0x06
    2114:	9a 83       	std	Y+2, r25	; 0x02
    2116:	89 83       	std	Y+1, r24	; 0x01
    2118:	89 81       	ldd	r24, Y+1	; 0x01
    211a:	9a 81       	ldd	r25, Y+2	; 0x02
    211c:	01 97       	sbiw	r24, 0x01	; 1
    211e:	f1 f7       	brne	.-4      	; 0x211c <LCD_voidMoveCrusor+0x132>
    2120:	9a 83       	std	Y+2, r25	; 0x02
    2122:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(1);
}
    2124:	61 96       	adiw	r28, 0x11	; 17
    2126:	0f b6       	in	r0, 0x3f	; 63
    2128:	f8 94       	cli
    212a:	de bf       	out	0x3e, r29	; 62
    212c:	0f be       	out	0x3f, r0	; 63
    212e:	cd bf       	out	0x3d, r28	; 61
    2130:	cf 91       	pop	r28
    2132:	df 91       	pop	r29
    2134:	08 95       	ret

00002136 <LCD_voidClearScreen>:
void LCD_voidClearScreen()
{
    2136:	df 93       	push	r29
    2138:	cf 93       	push	r28
    213a:	cd b7       	in	r28, 0x3d	; 61
    213c:	de b7       	in	r29, 0x3e	; 62
    213e:	2e 97       	sbiw	r28, 0x0e	; 14
    2140:	0f b6       	in	r0, 0x3f	; 63
    2142:	f8 94       	cli
    2144:	de bf       	out	0x3e, r29	; 62
    2146:	0f be       	out	0x3f, r0	; 63
    2148:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCmd(LCD_CLEAR_SCREEN);
    214a:	81 e0       	ldi	r24, 0x01	; 1
    214c:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <LCD_voidSendCmd>
    2150:	80 e0       	ldi	r24, 0x00	; 0
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	a0 e2       	ldi	r26, 0x20	; 32
    2156:	b1 e4       	ldi	r27, 0x41	; 65
    2158:	8b 87       	std	Y+11, r24	; 0x0b
    215a:	9c 87       	std	Y+12, r25	; 0x0c
    215c:	ad 87       	std	Y+13, r26	; 0x0d
    215e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2160:	6b 85       	ldd	r22, Y+11	; 0x0b
    2162:	7c 85       	ldd	r23, Y+12	; 0x0c
    2164:	8d 85       	ldd	r24, Y+13	; 0x0d
    2166:	9e 85       	ldd	r25, Y+14	; 0x0e
    2168:	20 e0       	ldi	r18, 0x00	; 0
    216a:	30 e0       	ldi	r19, 0x00	; 0
    216c:	4a ef       	ldi	r20, 0xFA	; 250
    216e:	54 e4       	ldi	r21, 0x44	; 68
    2170:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2174:	dc 01       	movw	r26, r24
    2176:	cb 01       	movw	r24, r22
    2178:	8f 83       	std	Y+7, r24	; 0x07
    217a:	98 87       	std	Y+8, r25	; 0x08
    217c:	a9 87       	std	Y+9, r26	; 0x09
    217e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2180:	6f 81       	ldd	r22, Y+7	; 0x07
    2182:	78 85       	ldd	r23, Y+8	; 0x08
    2184:	89 85       	ldd	r24, Y+9	; 0x09
    2186:	9a 85       	ldd	r25, Y+10	; 0x0a
    2188:	20 e0       	ldi	r18, 0x00	; 0
    218a:	30 e0       	ldi	r19, 0x00	; 0
    218c:	40 e8       	ldi	r20, 0x80	; 128
    218e:	5f e3       	ldi	r21, 0x3F	; 63
    2190:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2194:	88 23       	and	r24, r24
    2196:	2c f4       	brge	.+10     	; 0x21a2 <LCD_voidClearScreen+0x6c>
		__ticks = 1;
    2198:	81 e0       	ldi	r24, 0x01	; 1
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	9e 83       	std	Y+6, r25	; 0x06
    219e:	8d 83       	std	Y+5, r24	; 0x05
    21a0:	3f c0       	rjmp	.+126    	; 0x2220 <LCD_voidClearScreen+0xea>
	else if (__tmp > 65535)
    21a2:	6f 81       	ldd	r22, Y+7	; 0x07
    21a4:	78 85       	ldd	r23, Y+8	; 0x08
    21a6:	89 85       	ldd	r24, Y+9	; 0x09
    21a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    21aa:	20 e0       	ldi	r18, 0x00	; 0
    21ac:	3f ef       	ldi	r19, 0xFF	; 255
    21ae:	4f e7       	ldi	r20, 0x7F	; 127
    21b0:	57 e4       	ldi	r21, 0x47	; 71
    21b2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    21b6:	18 16       	cp	r1, r24
    21b8:	4c f5       	brge	.+82     	; 0x220c <LCD_voidClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    21bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    21be:	8d 85       	ldd	r24, Y+13	; 0x0d
    21c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    21c2:	20 e0       	ldi	r18, 0x00	; 0
    21c4:	30 e0       	ldi	r19, 0x00	; 0
    21c6:	40 e2       	ldi	r20, 0x20	; 32
    21c8:	51 e4       	ldi	r21, 0x41	; 65
    21ca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21ce:	dc 01       	movw	r26, r24
    21d0:	cb 01       	movw	r24, r22
    21d2:	bc 01       	movw	r22, r24
    21d4:	cd 01       	movw	r24, r26
    21d6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21da:	dc 01       	movw	r26, r24
    21dc:	cb 01       	movw	r24, r22
    21de:	9e 83       	std	Y+6, r25	; 0x06
    21e0:	8d 83       	std	Y+5, r24	; 0x05
    21e2:	0f c0       	rjmp	.+30     	; 0x2202 <LCD_voidClearScreen+0xcc>
    21e4:	88 ec       	ldi	r24, 0xC8	; 200
    21e6:	90 e0       	ldi	r25, 0x00	; 0
    21e8:	9c 83       	std	Y+4, r25	; 0x04
    21ea:	8b 83       	std	Y+3, r24	; 0x03
    21ec:	8b 81       	ldd	r24, Y+3	; 0x03
    21ee:	9c 81       	ldd	r25, Y+4	; 0x04
    21f0:	01 97       	sbiw	r24, 0x01	; 1
    21f2:	f1 f7       	brne	.-4      	; 0x21f0 <LCD_voidClearScreen+0xba>
    21f4:	9c 83       	std	Y+4, r25	; 0x04
    21f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21f8:	8d 81       	ldd	r24, Y+5	; 0x05
    21fa:	9e 81       	ldd	r25, Y+6	; 0x06
    21fc:	01 97       	sbiw	r24, 0x01	; 1
    21fe:	9e 83       	std	Y+6, r25	; 0x06
    2200:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2202:	8d 81       	ldd	r24, Y+5	; 0x05
    2204:	9e 81       	ldd	r25, Y+6	; 0x06
    2206:	00 97       	sbiw	r24, 0x00	; 0
    2208:	69 f7       	brne	.-38     	; 0x21e4 <LCD_voidClearScreen+0xae>
    220a:	14 c0       	rjmp	.+40     	; 0x2234 <LCD_voidClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    220c:	6f 81       	ldd	r22, Y+7	; 0x07
    220e:	78 85       	ldd	r23, Y+8	; 0x08
    2210:	89 85       	ldd	r24, Y+9	; 0x09
    2212:	9a 85       	ldd	r25, Y+10	; 0x0a
    2214:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2218:	dc 01       	movw	r26, r24
    221a:	cb 01       	movw	r24, r22
    221c:	9e 83       	std	Y+6, r25	; 0x06
    221e:	8d 83       	std	Y+5, r24	; 0x05
    2220:	8d 81       	ldd	r24, Y+5	; 0x05
    2222:	9e 81       	ldd	r25, Y+6	; 0x06
    2224:	9a 83       	std	Y+2, r25	; 0x02
    2226:	89 83       	std	Y+1, r24	; 0x01
    2228:	89 81       	ldd	r24, Y+1	; 0x01
    222a:	9a 81       	ldd	r25, Y+2	; 0x02
    222c:	01 97       	sbiw	r24, 0x01	; 1
    222e:	f1 f7       	brne	.-4      	; 0x222c <LCD_voidClearScreen+0xf6>
    2230:	9a 83       	std	Y+2, r25	; 0x02
    2232:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    2234:	2e 96       	adiw	r28, 0x0e	; 14
    2236:	0f b6       	in	r0, 0x3f	; 63
    2238:	f8 94       	cli
    223a:	de bf       	out	0x3e, r29	; 62
    223c:	0f be       	out	0x3f, r0	; 63
    223e:	cd bf       	out	0x3d, r28	; 61
    2240:	cf 91       	pop	r28
    2242:	df 91       	pop	r29
    2244:	08 95       	ret

00002246 <LCD_voidDispChar>:
void LCD_voidDispChar(u8 copy_u8char)
{
    2246:	df 93       	push	r29
    2248:	cf 93       	push	r28
    224a:	cd b7       	in	r28, 0x3d	; 61
    224c:	de b7       	in	r29, 0x3e	; 62
    224e:	2f 97       	sbiw	r28, 0x0f	; 15
    2250:	0f b6       	in	r0, 0x3f	; 63
    2252:	f8 94       	cli
    2254:	de bf       	out	0x3e, r29	; 62
    2256:	0f be       	out	0x3f, r0	; 63
    2258:	cd bf       	out	0x3d, r28	; 61
    225a:	8f 87       	std	Y+15, r24	; 0x0f
		GPIO_voidWritePin  (LCD_RWPORT , LCD_RWPIN , 0);
		LCD_voidSendEnPulse();
		
	#elif LCD_MODE == 1 
		#if LCD_NIBBLE == 0 
			GPIO_voidWriteLowNipple(LCD_PORT , copy_u8char>>4);
    225c:	8f 85       	ldd	r24, Y+15	; 0x0f
    225e:	98 2f       	mov	r25, r24
    2260:	92 95       	swap	r25
    2262:	9f 70       	andi	r25, 0x0F	; 15
    2264:	83 e0       	ldi	r24, 0x03	; 3
    2266:	69 2f       	mov	r22, r25
    2268:	0e 94 a1 0a 	call	0x1542	; 0x1542 <GPIO_voidWriteLowNipple>
			GPIO_voidWritePin  (LCD_RSPORT , LCD_RSPIN , 1);
    226c:	82 e0       	ldi	r24, 0x02	; 2
    226e:	60 e0       	ldi	r22, 0x00	; 0
    2270:	41 e0       	ldi	r20, 0x01	; 1
    2272:	0e 94 c1 07 	call	0xf82	; 0xf82 <GPIO_voidWritePin>
			GPIO_voidWritePin  (LCD_RWPORT , LCD_RWPIN , 0);
    2276:	82 e0       	ldi	r24, 0x02	; 2
    2278:	61 e0       	ldi	r22, 0x01	; 1
    227a:	40 e0       	ldi	r20, 0x00	; 0
    227c:	0e 94 c1 07 	call	0xf82	; 0xf82 <GPIO_voidWritePin>
			LCD_voidSendEnPulse();
    2280:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <LCD_voidSendEnPulse>
		
			GPIO_voidWriteLowNipple(LCD_PORT , copy_u8char);
    2284:	83 e0       	ldi	r24, 0x03	; 3
    2286:	6f 85       	ldd	r22, Y+15	; 0x0f
    2288:	0e 94 a1 0a 	call	0x1542	; 0x1542 <GPIO_voidWriteLowNipple>
			GPIO_voidWritePin  (LCD_RSPORT , LCD_RSPIN , 1);
    228c:	82 e0       	ldi	r24, 0x02	; 2
    228e:	60 e0       	ldi	r22, 0x00	; 0
    2290:	41 e0       	ldi	r20, 0x01	; 1
    2292:	0e 94 c1 07 	call	0xf82	; 0xf82 <GPIO_voidWritePin>
			GPIO_voidWritePin  (LCD_RWPORT , LCD_RWPIN , 0);
    2296:	82 e0       	ldi	r24, 0x02	; 2
    2298:	61 e0       	ldi	r22, 0x01	; 1
    229a:	40 e0       	ldi	r20, 0x00	; 0
    229c:	0e 94 c1 07 	call	0xf82	; 0xf82 <GPIO_voidWritePin>
			LCD_voidSendEnPulse();
    22a0:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <LCD_voidSendEnPulse>
    22a4:	80 e0       	ldi	r24, 0x00	; 0
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	a0 e0       	ldi	r26, 0x00	; 0
    22aa:	b0 e4       	ldi	r27, 0x40	; 64
    22ac:	8b 87       	std	Y+11, r24	; 0x0b
    22ae:	9c 87       	std	Y+12, r25	; 0x0c
    22b0:	ad 87       	std	Y+13, r26	; 0x0d
    22b2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    22b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    22b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    22ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    22bc:	20 e0       	ldi	r18, 0x00	; 0
    22be:	30 e0       	ldi	r19, 0x00	; 0
    22c0:	4a ef       	ldi	r20, 0xFA	; 250
    22c2:	54 e4       	ldi	r21, 0x44	; 68
    22c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22c8:	dc 01       	movw	r26, r24
    22ca:	cb 01       	movw	r24, r22
    22cc:	8f 83       	std	Y+7, r24	; 0x07
    22ce:	98 87       	std	Y+8, r25	; 0x08
    22d0:	a9 87       	std	Y+9, r26	; 0x09
    22d2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22d4:	6f 81       	ldd	r22, Y+7	; 0x07
    22d6:	78 85       	ldd	r23, Y+8	; 0x08
    22d8:	89 85       	ldd	r24, Y+9	; 0x09
    22da:	9a 85       	ldd	r25, Y+10	; 0x0a
    22dc:	20 e0       	ldi	r18, 0x00	; 0
    22de:	30 e0       	ldi	r19, 0x00	; 0
    22e0:	40 e8       	ldi	r20, 0x80	; 128
    22e2:	5f e3       	ldi	r21, 0x3F	; 63
    22e4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    22e8:	88 23       	and	r24, r24
    22ea:	2c f4       	brge	.+10     	; 0x22f6 <LCD_voidDispChar+0xb0>
		__ticks = 1;
    22ec:	81 e0       	ldi	r24, 0x01	; 1
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	9e 83       	std	Y+6, r25	; 0x06
    22f2:	8d 83       	std	Y+5, r24	; 0x05
    22f4:	3f c0       	rjmp	.+126    	; 0x2374 <LCD_voidDispChar+0x12e>
	else if (__tmp > 65535)
    22f6:	6f 81       	ldd	r22, Y+7	; 0x07
    22f8:	78 85       	ldd	r23, Y+8	; 0x08
    22fa:	89 85       	ldd	r24, Y+9	; 0x09
    22fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    22fe:	20 e0       	ldi	r18, 0x00	; 0
    2300:	3f ef       	ldi	r19, 0xFF	; 255
    2302:	4f e7       	ldi	r20, 0x7F	; 127
    2304:	57 e4       	ldi	r21, 0x47	; 71
    2306:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    230a:	18 16       	cp	r1, r24
    230c:	4c f5       	brge	.+82     	; 0x2360 <LCD_voidDispChar+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    230e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2310:	7c 85       	ldd	r23, Y+12	; 0x0c
    2312:	8d 85       	ldd	r24, Y+13	; 0x0d
    2314:	9e 85       	ldd	r25, Y+14	; 0x0e
    2316:	20 e0       	ldi	r18, 0x00	; 0
    2318:	30 e0       	ldi	r19, 0x00	; 0
    231a:	40 e2       	ldi	r20, 0x20	; 32
    231c:	51 e4       	ldi	r21, 0x41	; 65
    231e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2322:	dc 01       	movw	r26, r24
    2324:	cb 01       	movw	r24, r22
    2326:	bc 01       	movw	r22, r24
    2328:	cd 01       	movw	r24, r26
    232a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    232e:	dc 01       	movw	r26, r24
    2330:	cb 01       	movw	r24, r22
    2332:	9e 83       	std	Y+6, r25	; 0x06
    2334:	8d 83       	std	Y+5, r24	; 0x05
    2336:	0f c0       	rjmp	.+30     	; 0x2356 <LCD_voidDispChar+0x110>
    2338:	88 ec       	ldi	r24, 0xC8	; 200
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	9c 83       	std	Y+4, r25	; 0x04
    233e:	8b 83       	std	Y+3, r24	; 0x03
    2340:	8b 81       	ldd	r24, Y+3	; 0x03
    2342:	9c 81       	ldd	r25, Y+4	; 0x04
    2344:	01 97       	sbiw	r24, 0x01	; 1
    2346:	f1 f7       	brne	.-4      	; 0x2344 <LCD_voidDispChar+0xfe>
    2348:	9c 83       	std	Y+4, r25	; 0x04
    234a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    234c:	8d 81       	ldd	r24, Y+5	; 0x05
    234e:	9e 81       	ldd	r25, Y+6	; 0x06
    2350:	01 97       	sbiw	r24, 0x01	; 1
    2352:	9e 83       	std	Y+6, r25	; 0x06
    2354:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2356:	8d 81       	ldd	r24, Y+5	; 0x05
    2358:	9e 81       	ldd	r25, Y+6	; 0x06
    235a:	00 97       	sbiw	r24, 0x00	; 0
    235c:	69 f7       	brne	.-38     	; 0x2338 <LCD_voidDispChar+0xf2>
    235e:	14 c0       	rjmp	.+40     	; 0x2388 <LCD_voidDispChar+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2360:	6f 81       	ldd	r22, Y+7	; 0x07
    2362:	78 85       	ldd	r23, Y+8	; 0x08
    2364:	89 85       	ldd	r24, Y+9	; 0x09
    2366:	9a 85       	ldd	r25, Y+10	; 0x0a
    2368:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    236c:	dc 01       	movw	r26, r24
    236e:	cb 01       	movw	r24, r22
    2370:	9e 83       	std	Y+6, r25	; 0x06
    2372:	8d 83       	std	Y+5, r24	; 0x05
    2374:	8d 81       	ldd	r24, Y+5	; 0x05
    2376:	9e 81       	ldd	r25, Y+6	; 0x06
    2378:	9a 83       	std	Y+2, r25	; 0x02
    237a:	89 83       	std	Y+1, r24	; 0x01
    237c:	89 81       	ldd	r24, Y+1	; 0x01
    237e:	9a 81       	ldd	r25, Y+2	; 0x02
    2380:	01 97       	sbiw	r24, 0x01	; 1
    2382:	f1 f7       	brne	.-4      	; 0x2380 <LCD_voidDispChar+0x13a>
    2384:	9a 83       	std	Y+2, r25	; 0x02
    2386:	89 83       	std	Y+1, r24	; 0x01
			LCD_voidSendEnPulse();
			_delay_ms(2);
		#endif
	#endif
		
}
    2388:	2f 96       	adiw	r28, 0x0f	; 15
    238a:	0f b6       	in	r0, 0x3f	; 63
    238c:	f8 94       	cli
    238e:	de bf       	out	0x3e, r29	; 62
    2390:	0f be       	out	0x3f, r0	; 63
    2392:	cd bf       	out	0x3d, r28	; 61
    2394:	cf 91       	pop	r28
    2396:	df 91       	pop	r29
    2398:	08 95       	ret

0000239a <LCD_voidDispString>:
void LCD_voidDispString(u8 *copy_u8String)
{
    239a:	df 93       	push	r29
    239c:	cf 93       	push	r28
    239e:	00 d0       	rcall	.+0      	; 0x23a0 <LCD_voidDispString+0x6>
    23a0:	cd b7       	in	r28, 0x3d	; 61
    23a2:	de b7       	in	r29, 0x3e	; 62
    23a4:	9a 83       	std	Y+2, r25	; 0x02
    23a6:	89 83       	std	Y+1, r24	; 0x01
    23a8:	0a c0       	rjmp	.+20     	; 0x23be <LCD_voidDispString+0x24>
	while ((*copy_u8String) != '\0')
	{
		LCD_voidDispChar (*copy_u8String);
    23aa:	e9 81       	ldd	r30, Y+1	; 0x01
    23ac:	fa 81       	ldd	r31, Y+2	; 0x02
    23ae:	80 81       	ld	r24, Z
    23b0:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_voidDispChar>
		copy_u8String ++ ;
    23b4:	89 81       	ldd	r24, Y+1	; 0x01
    23b6:	9a 81       	ldd	r25, Y+2	; 0x02
    23b8:	01 96       	adiw	r24, 0x01	; 1
    23ba:	9a 83       	std	Y+2, r25	; 0x02
    23bc:	89 83       	std	Y+1, r24	; 0x01
	#endif
		
}
void LCD_voidDispString(u8 *copy_u8String)
{
	while ((*copy_u8String) != '\0')
    23be:	e9 81       	ldd	r30, Y+1	; 0x01
    23c0:	fa 81       	ldd	r31, Y+2	; 0x02
    23c2:	80 81       	ld	r24, Z
    23c4:	88 23       	and	r24, r24
    23c6:	89 f7       	brne	.-30     	; 0x23aa <LCD_voidDispString+0x10>
	{
		LCD_voidDispChar (*copy_u8String);
		copy_u8String ++ ;
	}
}
    23c8:	0f 90       	pop	r0
    23ca:	0f 90       	pop	r0
    23cc:	cf 91       	pop	r28
    23ce:	df 91       	pop	r29
    23d0:	08 95       	ret

000023d2 <LCD_voidDispNumber>:

void LCD_voidDispNumber (f32 copy_f32Num)
{
    23d2:	df 93       	push	r29
    23d4:	cf 93       	push	r28
    23d6:	00 d0       	rcall	.+0      	; 0x23d8 <LCD_voidDispNumber+0x6>
    23d8:	00 d0       	rcall	.+0      	; 0x23da <LCD_voidDispNumber+0x8>
    23da:	0f 92       	push	r0
    23dc:	cd b7       	in	r28, 0x3d	; 61
    23de:	de b7       	in	r29, 0x3e	; 62
    23e0:	6a 83       	std	Y+2, r22	; 0x02
    23e2:	7b 83       	std	Y+3, r23	; 0x03
    23e4:	8c 83       	std	Y+4, r24	; 0x04
    23e6:	9d 83       	std	Y+5, r25	; 0x05
	u8 str[1];
	sprintf(str,"%d",(u8)copy_f32Num);
    23e8:	6a 81       	ldd	r22, Y+2	; 0x02
    23ea:	7b 81       	ldd	r23, Y+3	; 0x03
    23ec:	8c 81       	ldd	r24, Y+4	; 0x04
    23ee:	9d 81       	ldd	r25, Y+5	; 0x05
    23f0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23f4:	dc 01       	movw	r26, r24
    23f6:	cb 01       	movw	r24, r22
    23f8:	28 2f       	mov	r18, r24
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	00 d0       	rcall	.+0      	; 0x23fe <LCD_voidDispNumber+0x2c>
    23fe:	00 d0       	rcall	.+0      	; 0x2400 <LCD_voidDispNumber+0x2e>
    2400:	00 d0       	rcall	.+0      	; 0x2402 <LCD_voidDispNumber+0x30>
    2402:	ed b7       	in	r30, 0x3d	; 61
    2404:	fe b7       	in	r31, 0x3e	; 62
    2406:	31 96       	adiw	r30, 0x01	; 1
    2408:	ce 01       	movw	r24, r28
    240a:	01 96       	adiw	r24, 0x01	; 1
    240c:	91 83       	std	Z+1, r25	; 0x01
    240e:	80 83       	st	Z, r24
    2410:	80 e6       	ldi	r24, 0x60	; 96
    2412:	90 e0       	ldi	r25, 0x00	; 0
    2414:	93 83       	std	Z+3, r25	; 0x03
    2416:	82 83       	std	Z+2, r24	; 0x02
    2418:	35 83       	std	Z+5, r19	; 0x05
    241a:	24 83       	std	Z+4, r18	; 0x04
    241c:	0e 94 4f 13 	call	0x269e	; 0x269e <sprintf>
    2420:	8d b7       	in	r24, 0x3d	; 61
    2422:	9e b7       	in	r25, 0x3e	; 62
    2424:	06 96       	adiw	r24, 0x06	; 6
    2426:	0f b6       	in	r0, 0x3f	; 63
    2428:	f8 94       	cli
    242a:	9e bf       	out	0x3e, r25	; 62
    242c:	0f be       	out	0x3f, r0	; 63
    242e:	8d bf       	out	0x3d, r24	; 61
	LCD_voidDispString(str);
    2430:	ce 01       	movw	r24, r28
    2432:	01 96       	adiw	r24, 0x01	; 1
    2434:	0e 94 cd 11 	call	0x239a	; 0x239a <LCD_voidDispString>
	sprintf(str,"%d",(u8)copy_f32Num);
	LCD_voidDispString(str);
*/


}
    2438:	0f 90       	pop	r0
    243a:	0f 90       	pop	r0
    243c:	0f 90       	pop	r0
    243e:	0f 90       	pop	r0
    2440:	0f 90       	pop	r0
    2442:	cf 91       	pop	r28
    2444:	df 91       	pop	r29
    2446:	08 95       	ret

00002448 <LM35_voidInit>:

#include "ADC_interface.h"


void LM35_voidInit (u8 copy_u8Channel)
{
    2448:	df 93       	push	r29
    244a:	cf 93       	push	r28
    244c:	0f 92       	push	r0
    244e:	cd b7       	in	r28, 0x3d	; 61
    2450:	de b7       	in	r29, 0x3e	; 62
    2452:	89 83       	std	Y+1, r24	; 0x01
	ADC_voidInit(copy_u8Channel);
    2454:	89 81       	ldd	r24, Y+1	; 0x01
    2456:	0e 94 63 06 	call	0xcc6	; 0xcc6 <ADC_voidInit>
}
    245a:	0f 90       	pop	r0
    245c:	cf 91       	pop	r28
    245e:	df 91       	pop	r29
    2460:	08 95       	ret

00002462 <LM35_voidRead>:
u8 LM35_voidRead ()
{
    2462:	df 93       	push	r29
    2464:	cf 93       	push	r28
    2466:	00 d0       	rcall	.+0      	; 0x2468 <LM35_voidRead+0x6>
    2468:	0f 92       	push	r0
    246a:	cd b7       	in	r28, 0x3d	; 61
    246c:	de b7       	in	r29, 0x3e	; 62
	u16 LM35_read;

	u8 Temp ;

	LM35_read = ADC_u16Read() ;
    246e:	0e 94 9e 06 	call	0xd3c	; 0xd3c <ADC_u16Read>
    2472:	9b 83       	std	Y+3, r25	; 0x03
    2474:	8a 83       	std	Y+2, r24	; 0x02
	#if VREF == 2560
	Temp = LM35_read*.25 ;
    2476:	8a 81       	ldd	r24, Y+2	; 0x02
    2478:	9b 81       	ldd	r25, Y+3	; 0x03
    247a:	cc 01       	movw	r24, r24
    247c:	a0 e0       	ldi	r26, 0x00	; 0
    247e:	b0 e0       	ldi	r27, 0x00	; 0
    2480:	bc 01       	movw	r22, r24
    2482:	cd 01       	movw	r24, r26
    2484:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
    2488:	dc 01       	movw	r26, r24
    248a:	cb 01       	movw	r24, r22
    248c:	bc 01       	movw	r22, r24
    248e:	cd 01       	movw	r24, r26
    2490:	20 e0       	ldi	r18, 0x00	; 0
    2492:	30 e0       	ldi	r19, 0x00	; 0
    2494:	40 e8       	ldi	r20, 0x80	; 128
    2496:	5e e3       	ldi	r21, 0x3E	; 62
    2498:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    249c:	dc 01       	movw	r26, r24
    249e:	cb 01       	movw	r24, r22
    24a0:	bc 01       	movw	r22, r24
    24a2:	cd 01       	movw	r24, r26
    24a4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24a8:	dc 01       	movw	r26, r24
    24aa:	cb 01       	movw	r24, r22
    24ac:	89 83       	std	Y+1, r24	; 0x01
	#elif VREF == 5000
	Temp = LM35 * 0.48828125 ;
	#endif
	return Temp;
    24ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    24b0:	0f 90       	pop	r0
    24b2:	0f 90       	pop	r0
    24b4:	0f 90       	pop	r0
    24b6:	cf 91       	pop	r28
    24b8:	df 91       	pop	r29
    24ba:	08 95       	ret

000024bc <main>:
#define F_CPU 8000000UL



int main (void)
{
    24bc:	df 93       	push	r29
    24be:	cf 93       	push	r28
    24c0:	cd b7       	in	r28, 0x3d	; 61
    24c2:	de b7       	in	r29, 0x3e	; 62
    24c4:	61 97       	sbiw	r28, 0x11	; 17
    24c6:	0f b6       	in	r0, 0x3f	; 63
    24c8:	f8 94       	cli
    24ca:	de bf       	out	0x3e, r29	; 62
    24cc:	0f be       	out	0x3f, r0	; 63
    24ce:	cd bf       	out	0x3d, r28	; 61


	LCD_voidInit();
    24d0:	0e 94 81 0b 	call	0x1702	; 0x1702 <LCD_voidInit>

	u8 temp ;
	u16 Volt ;
	while(1)
	{
	ADC_voidInit(ADC1);
    24d4:	81 e0       	ldi	r24, 0x01	; 1
    24d6:	0e 94 63 06 	call	0xcc6	; 0xcc6 <ADC_voidInit>
	Volt = ADC_u16Read();
    24da:	0e 94 9e 06 	call	0xd3c	; 0xd3c <ADC_u16Read>
    24de:	98 8b       	std	Y+16, r25	; 0x10
    24e0:	8f 87       	std	Y+15, r24	; 0x0f
    24e2:	80 e0       	ldi	r24, 0x00	; 0
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	aa e7       	ldi	r26, 0x7A	; 122
    24e8:	b4 e4       	ldi	r27, 0x44	; 68
    24ea:	8b 87       	std	Y+11, r24	; 0x0b
    24ec:	9c 87       	std	Y+12, r25	; 0x0c
    24ee:	ad 87       	std	Y+13, r26	; 0x0d
    24f0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    24f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    24f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    24f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    24fa:	20 e0       	ldi	r18, 0x00	; 0
    24fc:	30 e0       	ldi	r19, 0x00	; 0
    24fe:	4a ef       	ldi	r20, 0xFA	; 250
    2500:	54 e4       	ldi	r21, 0x44	; 68
    2502:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2506:	dc 01       	movw	r26, r24
    2508:	cb 01       	movw	r24, r22
    250a:	8f 83       	std	Y+7, r24	; 0x07
    250c:	98 87       	std	Y+8, r25	; 0x08
    250e:	a9 87       	std	Y+9, r26	; 0x09
    2510:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2512:	6f 81       	ldd	r22, Y+7	; 0x07
    2514:	78 85       	ldd	r23, Y+8	; 0x08
    2516:	89 85       	ldd	r24, Y+9	; 0x09
    2518:	9a 85       	ldd	r25, Y+10	; 0x0a
    251a:	20 e0       	ldi	r18, 0x00	; 0
    251c:	30 e0       	ldi	r19, 0x00	; 0
    251e:	40 e8       	ldi	r20, 0x80	; 128
    2520:	5f e3       	ldi	r21, 0x3F	; 63
    2522:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2526:	88 23       	and	r24, r24
    2528:	2c f4       	brge	.+10     	; 0x2534 <main+0x78>
		__ticks = 1;
    252a:	81 e0       	ldi	r24, 0x01	; 1
    252c:	90 e0       	ldi	r25, 0x00	; 0
    252e:	9e 83       	std	Y+6, r25	; 0x06
    2530:	8d 83       	std	Y+5, r24	; 0x05
    2532:	3f c0       	rjmp	.+126    	; 0x25b2 <main+0xf6>
	else if (__tmp > 65535)
    2534:	6f 81       	ldd	r22, Y+7	; 0x07
    2536:	78 85       	ldd	r23, Y+8	; 0x08
    2538:	89 85       	ldd	r24, Y+9	; 0x09
    253a:	9a 85       	ldd	r25, Y+10	; 0x0a
    253c:	20 e0       	ldi	r18, 0x00	; 0
    253e:	3f ef       	ldi	r19, 0xFF	; 255
    2540:	4f e7       	ldi	r20, 0x7F	; 127
    2542:	57 e4       	ldi	r21, 0x47	; 71
    2544:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2548:	18 16       	cp	r1, r24
    254a:	4c f5       	brge	.+82     	; 0x259e <main+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    254c:	6b 85       	ldd	r22, Y+11	; 0x0b
    254e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2550:	8d 85       	ldd	r24, Y+13	; 0x0d
    2552:	9e 85       	ldd	r25, Y+14	; 0x0e
    2554:	20 e0       	ldi	r18, 0x00	; 0
    2556:	30 e0       	ldi	r19, 0x00	; 0
    2558:	40 e2       	ldi	r20, 0x20	; 32
    255a:	51 e4       	ldi	r21, 0x41	; 65
    255c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2560:	dc 01       	movw	r26, r24
    2562:	cb 01       	movw	r24, r22
    2564:	bc 01       	movw	r22, r24
    2566:	cd 01       	movw	r24, r26
    2568:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    256c:	dc 01       	movw	r26, r24
    256e:	cb 01       	movw	r24, r22
    2570:	9e 83       	std	Y+6, r25	; 0x06
    2572:	8d 83       	std	Y+5, r24	; 0x05
    2574:	0f c0       	rjmp	.+30     	; 0x2594 <main+0xd8>
    2576:	88 ec       	ldi	r24, 0xC8	; 200
    2578:	90 e0       	ldi	r25, 0x00	; 0
    257a:	9c 83       	std	Y+4, r25	; 0x04
    257c:	8b 83       	std	Y+3, r24	; 0x03
    257e:	8b 81       	ldd	r24, Y+3	; 0x03
    2580:	9c 81       	ldd	r25, Y+4	; 0x04
    2582:	01 97       	sbiw	r24, 0x01	; 1
    2584:	f1 f7       	brne	.-4      	; 0x2582 <main+0xc6>
    2586:	9c 83       	std	Y+4, r25	; 0x04
    2588:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    258a:	8d 81       	ldd	r24, Y+5	; 0x05
    258c:	9e 81       	ldd	r25, Y+6	; 0x06
    258e:	01 97       	sbiw	r24, 0x01	; 1
    2590:	9e 83       	std	Y+6, r25	; 0x06
    2592:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2594:	8d 81       	ldd	r24, Y+5	; 0x05
    2596:	9e 81       	ldd	r25, Y+6	; 0x06
    2598:	00 97       	sbiw	r24, 0x00	; 0
    259a:	69 f7       	brne	.-38     	; 0x2576 <main+0xba>
    259c:	14 c0       	rjmp	.+40     	; 0x25c6 <main+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    259e:	6f 81       	ldd	r22, Y+7	; 0x07
    25a0:	78 85       	ldd	r23, Y+8	; 0x08
    25a2:	89 85       	ldd	r24, Y+9	; 0x09
    25a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    25a6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25aa:	dc 01       	movw	r26, r24
    25ac:	cb 01       	movw	r24, r22
    25ae:	9e 83       	std	Y+6, r25	; 0x06
    25b0:	8d 83       	std	Y+5, r24	; 0x05
    25b2:	8d 81       	ldd	r24, Y+5	; 0x05
    25b4:	9e 81       	ldd	r25, Y+6	; 0x06
    25b6:	9a 83       	std	Y+2, r25	; 0x02
    25b8:	89 83       	std	Y+1, r24	; 0x01
    25ba:	89 81       	ldd	r24, Y+1	; 0x01
    25bc:	9a 81       	ldd	r25, Y+2	; 0x02
    25be:	01 97       	sbiw	r24, 0x01	; 1
    25c0:	f1 f7       	brne	.-4      	; 0x25be <main+0x102>
    25c2:	9a 83       	std	Y+2, r25	; 0x02
    25c4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	LM35_voidInit(ADC1);
    25c6:	81 e0       	ldi	r24, 0x01	; 1
    25c8:	0e 94 24 12 	call	0x2448	; 0x2448 <LM35_voidInit>
	temp = LM35_voidRead();
    25cc:	0e 94 31 12 	call	0x2462	; 0x2462 <LM35_voidRead>
    25d0:	89 8b       	std	Y+17, r24	; 0x11
	LCD_voidMoveCrusor(1,1);
    25d2:	81 e0       	ldi	r24, 0x01	; 1
    25d4:	61 e0       	ldi	r22, 0x01	; 1
    25d6:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <LCD_voidMoveCrusor>
	LCD_voidDispString("VOLtage =");
    25da:	83 e6       	ldi	r24, 0x63	; 99
    25dc:	90 e0       	ldi	r25, 0x00	; 0
    25de:	0e 94 cd 11 	call	0x239a	; 0x239a <LCD_voidDispString>
	LCD_voidDispNumber(Volt);
    25e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    25e4:	98 89       	ldd	r25, Y+16	; 0x10
    25e6:	cc 01       	movw	r24, r24
    25e8:	a0 e0       	ldi	r26, 0x00	; 0
    25ea:	b0 e0       	ldi	r27, 0x00	; 0
    25ec:	bc 01       	movw	r22, r24
    25ee:	cd 01       	movw	r24, r26
    25f0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
    25f4:	dc 01       	movw	r26, r24
    25f6:	cb 01       	movw	r24, r22
    25f8:	bc 01       	movw	r22, r24
    25fa:	cd 01       	movw	r24, r26
    25fc:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <LCD_voidDispNumber>
	LCD_voidMoveCrusor(2,1);
    2600:	82 e0       	ldi	r24, 0x02	; 2
    2602:	61 e0       	ldi	r22, 0x01	; 1
    2604:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <LCD_voidMoveCrusor>
	LCD_voidDispNumber(temp);
    2608:	89 89       	ldd	r24, Y+17	; 0x11
    260a:	88 2f       	mov	r24, r24
    260c:	90 e0       	ldi	r25, 0x00	; 0
    260e:	a0 e0       	ldi	r26, 0x00	; 0
    2610:	b0 e0       	ldi	r27, 0x00	; 0
    2612:	bc 01       	movw	r22, r24
    2614:	cd 01       	movw	r24, r26
    2616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
    261a:	dc 01       	movw	r26, r24
    261c:	cb 01       	movw	r24, r22
    261e:	bc 01       	movw	r22, r24
    2620:	cd 01       	movw	r24, r26
    2622:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <LCD_voidDispNumber>
	LCD_voidDispString("  0C");
    2626:	8d e6       	ldi	r24, 0x6D	; 109
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	0e 94 cd 11 	call	0x239a	; 0x239a <LCD_voidDispString>
    262e:	52 cf       	rjmp	.-348    	; 0x24d4 <main+0x18>

00002630 <__prologue_saves__>:
    2630:	2f 92       	push	r2
    2632:	3f 92       	push	r3
    2634:	4f 92       	push	r4
    2636:	5f 92       	push	r5
    2638:	6f 92       	push	r6
    263a:	7f 92       	push	r7
    263c:	8f 92       	push	r8
    263e:	9f 92       	push	r9
    2640:	af 92       	push	r10
    2642:	bf 92       	push	r11
    2644:	cf 92       	push	r12
    2646:	df 92       	push	r13
    2648:	ef 92       	push	r14
    264a:	ff 92       	push	r15
    264c:	0f 93       	push	r16
    264e:	1f 93       	push	r17
    2650:	cf 93       	push	r28
    2652:	df 93       	push	r29
    2654:	cd b7       	in	r28, 0x3d	; 61
    2656:	de b7       	in	r29, 0x3e	; 62
    2658:	ca 1b       	sub	r28, r26
    265a:	db 0b       	sbc	r29, r27
    265c:	0f b6       	in	r0, 0x3f	; 63
    265e:	f8 94       	cli
    2660:	de bf       	out	0x3e, r29	; 62
    2662:	0f be       	out	0x3f, r0	; 63
    2664:	cd bf       	out	0x3d, r28	; 61
    2666:	09 94       	ijmp

00002668 <__epilogue_restores__>:
    2668:	2a 88       	ldd	r2, Y+18	; 0x12
    266a:	39 88       	ldd	r3, Y+17	; 0x11
    266c:	48 88       	ldd	r4, Y+16	; 0x10
    266e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2670:	6e 84       	ldd	r6, Y+14	; 0x0e
    2672:	7d 84       	ldd	r7, Y+13	; 0x0d
    2674:	8c 84       	ldd	r8, Y+12	; 0x0c
    2676:	9b 84       	ldd	r9, Y+11	; 0x0b
    2678:	aa 84       	ldd	r10, Y+10	; 0x0a
    267a:	b9 84       	ldd	r11, Y+9	; 0x09
    267c:	c8 84       	ldd	r12, Y+8	; 0x08
    267e:	df 80       	ldd	r13, Y+7	; 0x07
    2680:	ee 80       	ldd	r14, Y+6	; 0x06
    2682:	fd 80       	ldd	r15, Y+5	; 0x05
    2684:	0c 81       	ldd	r16, Y+4	; 0x04
    2686:	1b 81       	ldd	r17, Y+3	; 0x03
    2688:	aa 81       	ldd	r26, Y+2	; 0x02
    268a:	b9 81       	ldd	r27, Y+1	; 0x01
    268c:	ce 0f       	add	r28, r30
    268e:	d1 1d       	adc	r29, r1
    2690:	0f b6       	in	r0, 0x3f	; 63
    2692:	f8 94       	cli
    2694:	de bf       	out	0x3e, r29	; 62
    2696:	0f be       	out	0x3f, r0	; 63
    2698:	cd bf       	out	0x3d, r28	; 61
    269a:	ed 01       	movw	r28, r26
    269c:	08 95       	ret

0000269e <sprintf>:
    269e:	ae e0       	ldi	r26, 0x0E	; 14
    26a0:	b0 e0       	ldi	r27, 0x00	; 0
    26a2:	e5 e5       	ldi	r30, 0x55	; 85
    26a4:	f3 e1       	ldi	r31, 0x13	; 19
    26a6:	0c 94 26 13 	jmp	0x264c	; 0x264c <__prologue_saves__+0x1c>
    26aa:	0d 89       	ldd	r16, Y+21	; 0x15
    26ac:	1e 89       	ldd	r17, Y+22	; 0x16
    26ae:	86 e0       	ldi	r24, 0x06	; 6
    26b0:	8c 83       	std	Y+4, r24	; 0x04
    26b2:	1a 83       	std	Y+2, r17	; 0x02
    26b4:	09 83       	std	Y+1, r16	; 0x01
    26b6:	8f ef       	ldi	r24, 0xFF	; 255
    26b8:	9f e7       	ldi	r25, 0x7F	; 127
    26ba:	9e 83       	std	Y+6, r25	; 0x06
    26bc:	8d 83       	std	Y+5, r24	; 0x05
    26be:	9e 01       	movw	r18, r28
    26c0:	27 5e       	subi	r18, 0xE7	; 231
    26c2:	3f 4f       	sbci	r19, 0xFF	; 255
    26c4:	ce 01       	movw	r24, r28
    26c6:	01 96       	adiw	r24, 0x01	; 1
    26c8:	6f 89       	ldd	r22, Y+23	; 0x17
    26ca:	78 8d       	ldd	r23, Y+24	; 0x18
    26cc:	a9 01       	movw	r20, r18
    26ce:	0e 94 73 13 	call	0x26e6	; 0x26e6 <vfprintf>
    26d2:	2f 81       	ldd	r18, Y+7	; 0x07
    26d4:	38 85       	ldd	r19, Y+8	; 0x08
    26d6:	02 0f       	add	r16, r18
    26d8:	13 1f       	adc	r17, r19
    26da:	f8 01       	movw	r30, r16
    26dc:	10 82       	st	Z, r1
    26de:	2e 96       	adiw	r28, 0x0e	; 14
    26e0:	e4 e0       	ldi	r30, 0x04	; 4
    26e2:	0c 94 42 13 	jmp	0x2684	; 0x2684 <__epilogue_restores__+0x1c>

000026e6 <vfprintf>:
    26e6:	ab e0       	ldi	r26, 0x0B	; 11
    26e8:	b0 e0       	ldi	r27, 0x00	; 0
    26ea:	e9 e7       	ldi	r30, 0x79	; 121
    26ec:	f3 e1       	ldi	r31, 0x13	; 19
    26ee:	0c 94 18 13 	jmp	0x2630	; 0x2630 <__prologue_saves__>
    26f2:	3c 01       	movw	r6, r24
    26f4:	2b 01       	movw	r4, r22
    26f6:	5a 01       	movw	r10, r20
    26f8:	fc 01       	movw	r30, r24
    26fa:	17 82       	std	Z+7, r1	; 0x07
    26fc:	16 82       	std	Z+6, r1	; 0x06
    26fe:	83 81       	ldd	r24, Z+3	; 0x03
    2700:	81 fd       	sbrc	r24, 1
    2702:	03 c0       	rjmp	.+6      	; 0x270a <vfprintf+0x24>
    2704:	6f ef       	ldi	r22, 0xFF	; 255
    2706:	7f ef       	ldi	r23, 0xFF	; 255
    2708:	c6 c1       	rjmp	.+908    	; 0x2a96 <vfprintf+0x3b0>
    270a:	9a e0       	ldi	r25, 0x0A	; 10
    270c:	89 2e       	mov	r8, r25
    270e:	1e 01       	movw	r2, r28
    2710:	08 94       	sec
    2712:	21 1c       	adc	r2, r1
    2714:	31 1c       	adc	r3, r1
    2716:	f3 01       	movw	r30, r6
    2718:	23 81       	ldd	r18, Z+3	; 0x03
    271a:	f2 01       	movw	r30, r4
    271c:	23 fd       	sbrc	r18, 3
    271e:	85 91       	lpm	r24, Z+
    2720:	23 ff       	sbrs	r18, 3
    2722:	81 91       	ld	r24, Z+
    2724:	2f 01       	movw	r4, r30
    2726:	88 23       	and	r24, r24
    2728:	09 f4       	brne	.+2      	; 0x272c <vfprintf+0x46>
    272a:	b2 c1       	rjmp	.+868    	; 0x2a90 <vfprintf+0x3aa>
    272c:	85 32       	cpi	r24, 0x25	; 37
    272e:	39 f4       	brne	.+14     	; 0x273e <vfprintf+0x58>
    2730:	23 fd       	sbrc	r18, 3
    2732:	85 91       	lpm	r24, Z+
    2734:	23 ff       	sbrs	r18, 3
    2736:	81 91       	ld	r24, Z+
    2738:	2f 01       	movw	r4, r30
    273a:	85 32       	cpi	r24, 0x25	; 37
    273c:	29 f4       	brne	.+10     	; 0x2748 <vfprintf+0x62>
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	b3 01       	movw	r22, r6
    2742:	0e 94 66 15 	call	0x2acc	; 0x2acc <fputc>
    2746:	e7 cf       	rjmp	.-50     	; 0x2716 <vfprintf+0x30>
    2748:	98 2f       	mov	r25, r24
    274a:	ff 24       	eor	r15, r15
    274c:	ee 24       	eor	r14, r14
    274e:	99 24       	eor	r9, r9
    2750:	ff e1       	ldi	r31, 0x1F	; 31
    2752:	ff 15       	cp	r31, r15
    2754:	d0 f0       	brcs	.+52     	; 0x278a <vfprintf+0xa4>
    2756:	9b 32       	cpi	r25, 0x2B	; 43
    2758:	69 f0       	breq	.+26     	; 0x2774 <vfprintf+0x8e>
    275a:	9c 32       	cpi	r25, 0x2C	; 44
    275c:	28 f4       	brcc	.+10     	; 0x2768 <vfprintf+0x82>
    275e:	90 32       	cpi	r25, 0x20	; 32
    2760:	59 f0       	breq	.+22     	; 0x2778 <vfprintf+0x92>
    2762:	93 32       	cpi	r25, 0x23	; 35
    2764:	91 f4       	brne	.+36     	; 0x278a <vfprintf+0xa4>
    2766:	0e c0       	rjmp	.+28     	; 0x2784 <vfprintf+0x9e>
    2768:	9d 32       	cpi	r25, 0x2D	; 45
    276a:	49 f0       	breq	.+18     	; 0x277e <vfprintf+0x98>
    276c:	90 33       	cpi	r25, 0x30	; 48
    276e:	69 f4       	brne	.+26     	; 0x278a <vfprintf+0xa4>
    2770:	41 e0       	ldi	r20, 0x01	; 1
    2772:	24 c0       	rjmp	.+72     	; 0x27bc <vfprintf+0xd6>
    2774:	52 e0       	ldi	r21, 0x02	; 2
    2776:	f5 2a       	or	r15, r21
    2778:	84 e0       	ldi	r24, 0x04	; 4
    277a:	f8 2a       	or	r15, r24
    277c:	28 c0       	rjmp	.+80     	; 0x27ce <vfprintf+0xe8>
    277e:	98 e0       	ldi	r25, 0x08	; 8
    2780:	f9 2a       	or	r15, r25
    2782:	25 c0       	rjmp	.+74     	; 0x27ce <vfprintf+0xe8>
    2784:	e0 e1       	ldi	r30, 0x10	; 16
    2786:	fe 2a       	or	r15, r30
    2788:	22 c0       	rjmp	.+68     	; 0x27ce <vfprintf+0xe8>
    278a:	f7 fc       	sbrc	r15, 7
    278c:	29 c0       	rjmp	.+82     	; 0x27e0 <vfprintf+0xfa>
    278e:	89 2f       	mov	r24, r25
    2790:	80 53       	subi	r24, 0x30	; 48
    2792:	8a 30       	cpi	r24, 0x0A	; 10
    2794:	70 f4       	brcc	.+28     	; 0x27b2 <vfprintf+0xcc>
    2796:	f6 fe       	sbrs	r15, 6
    2798:	05 c0       	rjmp	.+10     	; 0x27a4 <vfprintf+0xbe>
    279a:	98 9c       	mul	r9, r8
    279c:	90 2c       	mov	r9, r0
    279e:	11 24       	eor	r1, r1
    27a0:	98 0e       	add	r9, r24
    27a2:	15 c0       	rjmp	.+42     	; 0x27ce <vfprintf+0xe8>
    27a4:	e8 9c       	mul	r14, r8
    27a6:	e0 2c       	mov	r14, r0
    27a8:	11 24       	eor	r1, r1
    27aa:	e8 0e       	add	r14, r24
    27ac:	f0 e2       	ldi	r31, 0x20	; 32
    27ae:	ff 2a       	or	r15, r31
    27b0:	0e c0       	rjmp	.+28     	; 0x27ce <vfprintf+0xe8>
    27b2:	9e 32       	cpi	r25, 0x2E	; 46
    27b4:	29 f4       	brne	.+10     	; 0x27c0 <vfprintf+0xda>
    27b6:	f6 fc       	sbrc	r15, 6
    27b8:	6b c1       	rjmp	.+726    	; 0x2a90 <vfprintf+0x3aa>
    27ba:	40 e4       	ldi	r20, 0x40	; 64
    27bc:	f4 2a       	or	r15, r20
    27be:	07 c0       	rjmp	.+14     	; 0x27ce <vfprintf+0xe8>
    27c0:	9c 36       	cpi	r25, 0x6C	; 108
    27c2:	19 f4       	brne	.+6      	; 0x27ca <vfprintf+0xe4>
    27c4:	50 e8       	ldi	r21, 0x80	; 128
    27c6:	f5 2a       	or	r15, r21
    27c8:	02 c0       	rjmp	.+4      	; 0x27ce <vfprintf+0xe8>
    27ca:	98 36       	cpi	r25, 0x68	; 104
    27cc:	49 f4       	brne	.+18     	; 0x27e0 <vfprintf+0xfa>
    27ce:	f2 01       	movw	r30, r4
    27d0:	23 fd       	sbrc	r18, 3
    27d2:	95 91       	lpm	r25, Z+
    27d4:	23 ff       	sbrs	r18, 3
    27d6:	91 91       	ld	r25, Z+
    27d8:	2f 01       	movw	r4, r30
    27da:	99 23       	and	r25, r25
    27dc:	09 f0       	breq	.+2      	; 0x27e0 <vfprintf+0xfa>
    27de:	b8 cf       	rjmp	.-144    	; 0x2750 <vfprintf+0x6a>
    27e0:	89 2f       	mov	r24, r25
    27e2:	85 54       	subi	r24, 0x45	; 69
    27e4:	83 30       	cpi	r24, 0x03	; 3
    27e6:	18 f0       	brcs	.+6      	; 0x27ee <vfprintf+0x108>
    27e8:	80 52       	subi	r24, 0x20	; 32
    27ea:	83 30       	cpi	r24, 0x03	; 3
    27ec:	38 f4       	brcc	.+14     	; 0x27fc <vfprintf+0x116>
    27ee:	44 e0       	ldi	r20, 0x04	; 4
    27f0:	50 e0       	ldi	r21, 0x00	; 0
    27f2:	a4 0e       	add	r10, r20
    27f4:	b5 1e       	adc	r11, r21
    27f6:	5f e3       	ldi	r21, 0x3F	; 63
    27f8:	59 83       	std	Y+1, r21	; 0x01
    27fa:	0f c0       	rjmp	.+30     	; 0x281a <vfprintf+0x134>
    27fc:	93 36       	cpi	r25, 0x63	; 99
    27fe:	31 f0       	breq	.+12     	; 0x280c <vfprintf+0x126>
    2800:	93 37       	cpi	r25, 0x73	; 115
    2802:	79 f0       	breq	.+30     	; 0x2822 <vfprintf+0x13c>
    2804:	93 35       	cpi	r25, 0x53	; 83
    2806:	09 f0       	breq	.+2      	; 0x280a <vfprintf+0x124>
    2808:	56 c0       	rjmp	.+172    	; 0x28b6 <vfprintf+0x1d0>
    280a:	20 c0       	rjmp	.+64     	; 0x284c <vfprintf+0x166>
    280c:	f5 01       	movw	r30, r10
    280e:	80 81       	ld	r24, Z
    2810:	89 83       	std	Y+1, r24	; 0x01
    2812:	42 e0       	ldi	r20, 0x02	; 2
    2814:	50 e0       	ldi	r21, 0x00	; 0
    2816:	a4 0e       	add	r10, r20
    2818:	b5 1e       	adc	r11, r21
    281a:	61 01       	movw	r12, r2
    281c:	01 e0       	ldi	r16, 0x01	; 1
    281e:	10 e0       	ldi	r17, 0x00	; 0
    2820:	12 c0       	rjmp	.+36     	; 0x2846 <vfprintf+0x160>
    2822:	f5 01       	movw	r30, r10
    2824:	c0 80       	ld	r12, Z
    2826:	d1 80       	ldd	r13, Z+1	; 0x01
    2828:	f6 fc       	sbrc	r15, 6
    282a:	03 c0       	rjmp	.+6      	; 0x2832 <vfprintf+0x14c>
    282c:	6f ef       	ldi	r22, 0xFF	; 255
    282e:	7f ef       	ldi	r23, 0xFF	; 255
    2830:	02 c0       	rjmp	.+4      	; 0x2836 <vfprintf+0x150>
    2832:	69 2d       	mov	r22, r9
    2834:	70 e0       	ldi	r23, 0x00	; 0
    2836:	42 e0       	ldi	r20, 0x02	; 2
    2838:	50 e0       	ldi	r21, 0x00	; 0
    283a:	a4 0e       	add	r10, r20
    283c:	b5 1e       	adc	r11, r21
    283e:	c6 01       	movw	r24, r12
    2840:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <strnlen>
    2844:	8c 01       	movw	r16, r24
    2846:	5f e7       	ldi	r21, 0x7F	; 127
    2848:	f5 22       	and	r15, r21
    284a:	14 c0       	rjmp	.+40     	; 0x2874 <vfprintf+0x18e>
    284c:	f5 01       	movw	r30, r10
    284e:	c0 80       	ld	r12, Z
    2850:	d1 80       	ldd	r13, Z+1	; 0x01
    2852:	f6 fc       	sbrc	r15, 6
    2854:	03 c0       	rjmp	.+6      	; 0x285c <vfprintf+0x176>
    2856:	6f ef       	ldi	r22, 0xFF	; 255
    2858:	7f ef       	ldi	r23, 0xFF	; 255
    285a:	02 c0       	rjmp	.+4      	; 0x2860 <vfprintf+0x17a>
    285c:	69 2d       	mov	r22, r9
    285e:	70 e0       	ldi	r23, 0x00	; 0
    2860:	42 e0       	ldi	r20, 0x02	; 2
    2862:	50 e0       	ldi	r21, 0x00	; 0
    2864:	a4 0e       	add	r10, r20
    2866:	b5 1e       	adc	r11, r21
    2868:	c6 01       	movw	r24, r12
    286a:	0e 94 50 15 	call	0x2aa0	; 0x2aa0 <strnlen_P>
    286e:	8c 01       	movw	r16, r24
    2870:	50 e8       	ldi	r21, 0x80	; 128
    2872:	f5 2a       	or	r15, r21
    2874:	f3 fe       	sbrs	r15, 3
    2876:	07 c0       	rjmp	.+14     	; 0x2886 <vfprintf+0x1a0>
    2878:	1a c0       	rjmp	.+52     	; 0x28ae <vfprintf+0x1c8>
    287a:	80 e2       	ldi	r24, 0x20	; 32
    287c:	90 e0       	ldi	r25, 0x00	; 0
    287e:	b3 01       	movw	r22, r6
    2880:	0e 94 66 15 	call	0x2acc	; 0x2acc <fputc>
    2884:	ea 94       	dec	r14
    2886:	8e 2d       	mov	r24, r14
    2888:	90 e0       	ldi	r25, 0x00	; 0
    288a:	08 17       	cp	r16, r24
    288c:	19 07       	cpc	r17, r25
    288e:	a8 f3       	brcs	.-22     	; 0x287a <vfprintf+0x194>
    2890:	0e c0       	rjmp	.+28     	; 0x28ae <vfprintf+0x1c8>
    2892:	f6 01       	movw	r30, r12
    2894:	f7 fc       	sbrc	r15, 7
    2896:	85 91       	lpm	r24, Z+
    2898:	f7 fe       	sbrs	r15, 7
    289a:	81 91       	ld	r24, Z+
    289c:	6f 01       	movw	r12, r30
    289e:	90 e0       	ldi	r25, 0x00	; 0
    28a0:	b3 01       	movw	r22, r6
    28a2:	0e 94 66 15 	call	0x2acc	; 0x2acc <fputc>
    28a6:	e1 10       	cpse	r14, r1
    28a8:	ea 94       	dec	r14
    28aa:	01 50       	subi	r16, 0x01	; 1
    28ac:	10 40       	sbci	r17, 0x00	; 0
    28ae:	01 15       	cp	r16, r1
    28b0:	11 05       	cpc	r17, r1
    28b2:	79 f7       	brne	.-34     	; 0x2892 <vfprintf+0x1ac>
    28b4:	ea c0       	rjmp	.+468    	; 0x2a8a <vfprintf+0x3a4>
    28b6:	94 36       	cpi	r25, 0x64	; 100
    28b8:	11 f0       	breq	.+4      	; 0x28be <vfprintf+0x1d8>
    28ba:	99 36       	cpi	r25, 0x69	; 105
    28bc:	69 f5       	brne	.+90     	; 0x2918 <vfprintf+0x232>
    28be:	f7 fe       	sbrs	r15, 7
    28c0:	08 c0       	rjmp	.+16     	; 0x28d2 <vfprintf+0x1ec>
    28c2:	f5 01       	movw	r30, r10
    28c4:	20 81       	ld	r18, Z
    28c6:	31 81       	ldd	r19, Z+1	; 0x01
    28c8:	42 81       	ldd	r20, Z+2	; 0x02
    28ca:	53 81       	ldd	r21, Z+3	; 0x03
    28cc:	84 e0       	ldi	r24, 0x04	; 4
    28ce:	90 e0       	ldi	r25, 0x00	; 0
    28d0:	0a c0       	rjmp	.+20     	; 0x28e6 <vfprintf+0x200>
    28d2:	f5 01       	movw	r30, r10
    28d4:	80 81       	ld	r24, Z
    28d6:	91 81       	ldd	r25, Z+1	; 0x01
    28d8:	9c 01       	movw	r18, r24
    28da:	44 27       	eor	r20, r20
    28dc:	37 fd       	sbrc	r19, 7
    28de:	40 95       	com	r20
    28e0:	54 2f       	mov	r21, r20
    28e2:	82 e0       	ldi	r24, 0x02	; 2
    28e4:	90 e0       	ldi	r25, 0x00	; 0
    28e6:	a8 0e       	add	r10, r24
    28e8:	b9 1e       	adc	r11, r25
    28ea:	9f e6       	ldi	r25, 0x6F	; 111
    28ec:	f9 22       	and	r15, r25
    28ee:	57 ff       	sbrs	r21, 7
    28f0:	09 c0       	rjmp	.+18     	; 0x2904 <vfprintf+0x21e>
    28f2:	50 95       	com	r21
    28f4:	40 95       	com	r20
    28f6:	30 95       	com	r19
    28f8:	21 95       	neg	r18
    28fa:	3f 4f       	sbci	r19, 0xFF	; 255
    28fc:	4f 4f       	sbci	r20, 0xFF	; 255
    28fe:	5f 4f       	sbci	r21, 0xFF	; 255
    2900:	e0 e8       	ldi	r30, 0x80	; 128
    2902:	fe 2a       	or	r15, r30
    2904:	ca 01       	movw	r24, r20
    2906:	b9 01       	movw	r22, r18
    2908:	a1 01       	movw	r20, r2
    290a:	2a e0       	ldi	r18, 0x0A	; 10
    290c:	30 e0       	ldi	r19, 0x00	; 0
    290e:	0e 94 92 15 	call	0x2b24	; 0x2b24 <__ultoa_invert>
    2912:	d8 2e       	mov	r13, r24
    2914:	d2 18       	sub	r13, r2
    2916:	40 c0       	rjmp	.+128    	; 0x2998 <vfprintf+0x2b2>
    2918:	95 37       	cpi	r25, 0x75	; 117
    291a:	29 f4       	brne	.+10     	; 0x2926 <vfprintf+0x240>
    291c:	1f 2d       	mov	r17, r15
    291e:	1f 7e       	andi	r17, 0xEF	; 239
    2920:	2a e0       	ldi	r18, 0x0A	; 10
    2922:	30 e0       	ldi	r19, 0x00	; 0
    2924:	1d c0       	rjmp	.+58     	; 0x2960 <vfprintf+0x27a>
    2926:	1f 2d       	mov	r17, r15
    2928:	19 7f       	andi	r17, 0xF9	; 249
    292a:	9f 36       	cpi	r25, 0x6F	; 111
    292c:	61 f0       	breq	.+24     	; 0x2946 <vfprintf+0x260>
    292e:	90 37       	cpi	r25, 0x70	; 112
    2930:	20 f4       	brcc	.+8      	; 0x293a <vfprintf+0x254>
    2932:	98 35       	cpi	r25, 0x58	; 88
    2934:	09 f0       	breq	.+2      	; 0x2938 <vfprintf+0x252>
    2936:	ac c0       	rjmp	.+344    	; 0x2a90 <vfprintf+0x3aa>
    2938:	0f c0       	rjmp	.+30     	; 0x2958 <vfprintf+0x272>
    293a:	90 37       	cpi	r25, 0x70	; 112
    293c:	39 f0       	breq	.+14     	; 0x294c <vfprintf+0x266>
    293e:	98 37       	cpi	r25, 0x78	; 120
    2940:	09 f0       	breq	.+2      	; 0x2944 <vfprintf+0x25e>
    2942:	a6 c0       	rjmp	.+332    	; 0x2a90 <vfprintf+0x3aa>
    2944:	04 c0       	rjmp	.+8      	; 0x294e <vfprintf+0x268>
    2946:	28 e0       	ldi	r18, 0x08	; 8
    2948:	30 e0       	ldi	r19, 0x00	; 0
    294a:	0a c0       	rjmp	.+20     	; 0x2960 <vfprintf+0x27a>
    294c:	10 61       	ori	r17, 0x10	; 16
    294e:	14 fd       	sbrc	r17, 4
    2950:	14 60       	ori	r17, 0x04	; 4
    2952:	20 e1       	ldi	r18, 0x10	; 16
    2954:	30 e0       	ldi	r19, 0x00	; 0
    2956:	04 c0       	rjmp	.+8      	; 0x2960 <vfprintf+0x27a>
    2958:	14 fd       	sbrc	r17, 4
    295a:	16 60       	ori	r17, 0x06	; 6
    295c:	20 e1       	ldi	r18, 0x10	; 16
    295e:	32 e0       	ldi	r19, 0x02	; 2
    2960:	17 ff       	sbrs	r17, 7
    2962:	08 c0       	rjmp	.+16     	; 0x2974 <vfprintf+0x28e>
    2964:	f5 01       	movw	r30, r10
    2966:	60 81       	ld	r22, Z
    2968:	71 81       	ldd	r23, Z+1	; 0x01
    296a:	82 81       	ldd	r24, Z+2	; 0x02
    296c:	93 81       	ldd	r25, Z+3	; 0x03
    296e:	44 e0       	ldi	r20, 0x04	; 4
    2970:	50 e0       	ldi	r21, 0x00	; 0
    2972:	08 c0       	rjmp	.+16     	; 0x2984 <vfprintf+0x29e>
    2974:	f5 01       	movw	r30, r10
    2976:	80 81       	ld	r24, Z
    2978:	91 81       	ldd	r25, Z+1	; 0x01
    297a:	bc 01       	movw	r22, r24
    297c:	80 e0       	ldi	r24, 0x00	; 0
    297e:	90 e0       	ldi	r25, 0x00	; 0
    2980:	42 e0       	ldi	r20, 0x02	; 2
    2982:	50 e0       	ldi	r21, 0x00	; 0
    2984:	a4 0e       	add	r10, r20
    2986:	b5 1e       	adc	r11, r21
    2988:	a1 01       	movw	r20, r2
    298a:	0e 94 92 15 	call	0x2b24	; 0x2b24 <__ultoa_invert>
    298e:	d8 2e       	mov	r13, r24
    2990:	d2 18       	sub	r13, r2
    2992:	8f e7       	ldi	r24, 0x7F	; 127
    2994:	f8 2e       	mov	r15, r24
    2996:	f1 22       	and	r15, r17
    2998:	f6 fe       	sbrs	r15, 6
    299a:	0b c0       	rjmp	.+22     	; 0x29b2 <vfprintf+0x2cc>
    299c:	5e ef       	ldi	r21, 0xFE	; 254
    299e:	f5 22       	and	r15, r21
    29a0:	d9 14       	cp	r13, r9
    29a2:	38 f4       	brcc	.+14     	; 0x29b2 <vfprintf+0x2cc>
    29a4:	f4 fe       	sbrs	r15, 4
    29a6:	07 c0       	rjmp	.+14     	; 0x29b6 <vfprintf+0x2d0>
    29a8:	f2 fc       	sbrc	r15, 2
    29aa:	05 c0       	rjmp	.+10     	; 0x29b6 <vfprintf+0x2d0>
    29ac:	8f ee       	ldi	r24, 0xEF	; 239
    29ae:	f8 22       	and	r15, r24
    29b0:	02 c0       	rjmp	.+4      	; 0x29b6 <vfprintf+0x2d0>
    29b2:	1d 2d       	mov	r17, r13
    29b4:	01 c0       	rjmp	.+2      	; 0x29b8 <vfprintf+0x2d2>
    29b6:	19 2d       	mov	r17, r9
    29b8:	f4 fe       	sbrs	r15, 4
    29ba:	0d c0       	rjmp	.+26     	; 0x29d6 <vfprintf+0x2f0>
    29bc:	fe 01       	movw	r30, r28
    29be:	ed 0d       	add	r30, r13
    29c0:	f1 1d       	adc	r31, r1
    29c2:	80 81       	ld	r24, Z
    29c4:	80 33       	cpi	r24, 0x30	; 48
    29c6:	19 f4       	brne	.+6      	; 0x29ce <vfprintf+0x2e8>
    29c8:	99 ee       	ldi	r25, 0xE9	; 233
    29ca:	f9 22       	and	r15, r25
    29cc:	08 c0       	rjmp	.+16     	; 0x29de <vfprintf+0x2f8>
    29ce:	1f 5f       	subi	r17, 0xFF	; 255
    29d0:	f2 fe       	sbrs	r15, 2
    29d2:	05 c0       	rjmp	.+10     	; 0x29de <vfprintf+0x2f8>
    29d4:	03 c0       	rjmp	.+6      	; 0x29dc <vfprintf+0x2f6>
    29d6:	8f 2d       	mov	r24, r15
    29d8:	86 78       	andi	r24, 0x86	; 134
    29da:	09 f0       	breq	.+2      	; 0x29de <vfprintf+0x2f8>
    29dc:	1f 5f       	subi	r17, 0xFF	; 255
    29de:	0f 2d       	mov	r16, r15
    29e0:	f3 fc       	sbrc	r15, 3
    29e2:	14 c0       	rjmp	.+40     	; 0x2a0c <vfprintf+0x326>
    29e4:	f0 fe       	sbrs	r15, 0
    29e6:	0f c0       	rjmp	.+30     	; 0x2a06 <vfprintf+0x320>
    29e8:	1e 15       	cp	r17, r14
    29ea:	10 f0       	brcs	.+4      	; 0x29f0 <vfprintf+0x30a>
    29ec:	9d 2c       	mov	r9, r13
    29ee:	0b c0       	rjmp	.+22     	; 0x2a06 <vfprintf+0x320>
    29f0:	9d 2c       	mov	r9, r13
    29f2:	9e 0c       	add	r9, r14
    29f4:	91 1a       	sub	r9, r17
    29f6:	1e 2d       	mov	r17, r14
    29f8:	06 c0       	rjmp	.+12     	; 0x2a06 <vfprintf+0x320>
    29fa:	80 e2       	ldi	r24, 0x20	; 32
    29fc:	90 e0       	ldi	r25, 0x00	; 0
    29fe:	b3 01       	movw	r22, r6
    2a00:	0e 94 66 15 	call	0x2acc	; 0x2acc <fputc>
    2a04:	1f 5f       	subi	r17, 0xFF	; 255
    2a06:	1e 15       	cp	r17, r14
    2a08:	c0 f3       	brcs	.-16     	; 0x29fa <vfprintf+0x314>
    2a0a:	04 c0       	rjmp	.+8      	; 0x2a14 <vfprintf+0x32e>
    2a0c:	1e 15       	cp	r17, r14
    2a0e:	10 f4       	brcc	.+4      	; 0x2a14 <vfprintf+0x32e>
    2a10:	e1 1a       	sub	r14, r17
    2a12:	01 c0       	rjmp	.+2      	; 0x2a16 <vfprintf+0x330>
    2a14:	ee 24       	eor	r14, r14
    2a16:	04 ff       	sbrs	r16, 4
    2a18:	0f c0       	rjmp	.+30     	; 0x2a38 <vfprintf+0x352>
    2a1a:	80 e3       	ldi	r24, 0x30	; 48
    2a1c:	90 e0       	ldi	r25, 0x00	; 0
    2a1e:	b3 01       	movw	r22, r6
    2a20:	0e 94 66 15 	call	0x2acc	; 0x2acc <fputc>
    2a24:	02 ff       	sbrs	r16, 2
    2a26:	1d c0       	rjmp	.+58     	; 0x2a62 <vfprintf+0x37c>
    2a28:	01 fd       	sbrc	r16, 1
    2a2a:	03 c0       	rjmp	.+6      	; 0x2a32 <vfprintf+0x34c>
    2a2c:	88 e7       	ldi	r24, 0x78	; 120
    2a2e:	90 e0       	ldi	r25, 0x00	; 0
    2a30:	0e c0       	rjmp	.+28     	; 0x2a4e <vfprintf+0x368>
    2a32:	88 e5       	ldi	r24, 0x58	; 88
    2a34:	90 e0       	ldi	r25, 0x00	; 0
    2a36:	0b c0       	rjmp	.+22     	; 0x2a4e <vfprintf+0x368>
    2a38:	80 2f       	mov	r24, r16
    2a3a:	86 78       	andi	r24, 0x86	; 134
    2a3c:	91 f0       	breq	.+36     	; 0x2a62 <vfprintf+0x37c>
    2a3e:	01 ff       	sbrs	r16, 1
    2a40:	02 c0       	rjmp	.+4      	; 0x2a46 <vfprintf+0x360>
    2a42:	8b e2       	ldi	r24, 0x2B	; 43
    2a44:	01 c0       	rjmp	.+2      	; 0x2a48 <vfprintf+0x362>
    2a46:	80 e2       	ldi	r24, 0x20	; 32
    2a48:	f7 fc       	sbrc	r15, 7
    2a4a:	8d e2       	ldi	r24, 0x2D	; 45
    2a4c:	90 e0       	ldi	r25, 0x00	; 0
    2a4e:	b3 01       	movw	r22, r6
    2a50:	0e 94 66 15 	call	0x2acc	; 0x2acc <fputc>
    2a54:	06 c0       	rjmp	.+12     	; 0x2a62 <vfprintf+0x37c>
    2a56:	80 e3       	ldi	r24, 0x30	; 48
    2a58:	90 e0       	ldi	r25, 0x00	; 0
    2a5a:	b3 01       	movw	r22, r6
    2a5c:	0e 94 66 15 	call	0x2acc	; 0x2acc <fputc>
    2a60:	9a 94       	dec	r9
    2a62:	d9 14       	cp	r13, r9
    2a64:	c0 f3       	brcs	.-16     	; 0x2a56 <vfprintf+0x370>
    2a66:	da 94       	dec	r13
    2a68:	f1 01       	movw	r30, r2
    2a6a:	ed 0d       	add	r30, r13
    2a6c:	f1 1d       	adc	r31, r1
    2a6e:	80 81       	ld	r24, Z
    2a70:	90 e0       	ldi	r25, 0x00	; 0
    2a72:	b3 01       	movw	r22, r6
    2a74:	0e 94 66 15 	call	0x2acc	; 0x2acc <fputc>
    2a78:	dd 20       	and	r13, r13
    2a7a:	a9 f7       	brne	.-22     	; 0x2a66 <vfprintf+0x380>
    2a7c:	06 c0       	rjmp	.+12     	; 0x2a8a <vfprintf+0x3a4>
    2a7e:	80 e2       	ldi	r24, 0x20	; 32
    2a80:	90 e0       	ldi	r25, 0x00	; 0
    2a82:	b3 01       	movw	r22, r6
    2a84:	0e 94 66 15 	call	0x2acc	; 0x2acc <fputc>
    2a88:	ea 94       	dec	r14
    2a8a:	ee 20       	and	r14, r14
    2a8c:	c1 f7       	brne	.-16     	; 0x2a7e <vfprintf+0x398>
    2a8e:	43 ce       	rjmp	.-890    	; 0x2716 <vfprintf+0x30>
    2a90:	f3 01       	movw	r30, r6
    2a92:	66 81       	ldd	r22, Z+6	; 0x06
    2a94:	77 81       	ldd	r23, Z+7	; 0x07
    2a96:	cb 01       	movw	r24, r22
    2a98:	2b 96       	adiw	r28, 0x0b	; 11
    2a9a:	e2 e1       	ldi	r30, 0x12	; 18
    2a9c:	0c 94 34 13 	jmp	0x2668	; 0x2668 <__epilogue_restores__>

00002aa0 <strnlen_P>:
    2aa0:	fc 01       	movw	r30, r24
    2aa2:	05 90       	lpm	r0, Z+
    2aa4:	61 50       	subi	r22, 0x01	; 1
    2aa6:	70 40       	sbci	r23, 0x00	; 0
    2aa8:	01 10       	cpse	r0, r1
    2aaa:	d8 f7       	brcc	.-10     	; 0x2aa2 <strnlen_P+0x2>
    2aac:	80 95       	com	r24
    2aae:	90 95       	com	r25
    2ab0:	8e 0f       	add	r24, r30
    2ab2:	9f 1f       	adc	r25, r31
    2ab4:	08 95       	ret

00002ab6 <strnlen>:
    2ab6:	fc 01       	movw	r30, r24
    2ab8:	61 50       	subi	r22, 0x01	; 1
    2aba:	70 40       	sbci	r23, 0x00	; 0
    2abc:	01 90       	ld	r0, Z+
    2abe:	01 10       	cpse	r0, r1
    2ac0:	d8 f7       	brcc	.-10     	; 0x2ab8 <strnlen+0x2>
    2ac2:	80 95       	com	r24
    2ac4:	90 95       	com	r25
    2ac6:	8e 0f       	add	r24, r30
    2ac8:	9f 1f       	adc	r25, r31
    2aca:	08 95       	ret

00002acc <fputc>:
    2acc:	0f 93       	push	r16
    2ace:	1f 93       	push	r17
    2ad0:	cf 93       	push	r28
    2ad2:	df 93       	push	r29
    2ad4:	8c 01       	movw	r16, r24
    2ad6:	eb 01       	movw	r28, r22
    2ad8:	8b 81       	ldd	r24, Y+3	; 0x03
    2ada:	81 ff       	sbrs	r24, 1
    2adc:	1b c0       	rjmp	.+54     	; 0x2b14 <fputc+0x48>
    2ade:	82 ff       	sbrs	r24, 2
    2ae0:	0d c0       	rjmp	.+26     	; 0x2afc <fputc+0x30>
    2ae2:	2e 81       	ldd	r18, Y+6	; 0x06
    2ae4:	3f 81       	ldd	r19, Y+7	; 0x07
    2ae6:	8c 81       	ldd	r24, Y+4	; 0x04
    2ae8:	9d 81       	ldd	r25, Y+5	; 0x05
    2aea:	28 17       	cp	r18, r24
    2aec:	39 07       	cpc	r19, r25
    2aee:	64 f4       	brge	.+24     	; 0x2b08 <fputc+0x3c>
    2af0:	e8 81       	ld	r30, Y
    2af2:	f9 81       	ldd	r31, Y+1	; 0x01
    2af4:	01 93       	st	Z+, r16
    2af6:	f9 83       	std	Y+1, r31	; 0x01
    2af8:	e8 83       	st	Y, r30
    2afa:	06 c0       	rjmp	.+12     	; 0x2b08 <fputc+0x3c>
    2afc:	e8 85       	ldd	r30, Y+8	; 0x08
    2afe:	f9 85       	ldd	r31, Y+9	; 0x09
    2b00:	80 2f       	mov	r24, r16
    2b02:	09 95       	icall
    2b04:	89 2b       	or	r24, r25
    2b06:	31 f4       	brne	.+12     	; 0x2b14 <fputc+0x48>
    2b08:	8e 81       	ldd	r24, Y+6	; 0x06
    2b0a:	9f 81       	ldd	r25, Y+7	; 0x07
    2b0c:	01 96       	adiw	r24, 0x01	; 1
    2b0e:	9f 83       	std	Y+7, r25	; 0x07
    2b10:	8e 83       	std	Y+6, r24	; 0x06
    2b12:	02 c0       	rjmp	.+4      	; 0x2b18 <fputc+0x4c>
    2b14:	0f ef       	ldi	r16, 0xFF	; 255
    2b16:	1f ef       	ldi	r17, 0xFF	; 255
    2b18:	c8 01       	movw	r24, r16
    2b1a:	df 91       	pop	r29
    2b1c:	cf 91       	pop	r28
    2b1e:	1f 91       	pop	r17
    2b20:	0f 91       	pop	r16
    2b22:	08 95       	ret

00002b24 <__ultoa_invert>:
    2b24:	fa 01       	movw	r30, r20
    2b26:	aa 27       	eor	r26, r26
    2b28:	28 30       	cpi	r18, 0x08	; 8
    2b2a:	51 f1       	breq	.+84     	; 0x2b80 <__ultoa_invert+0x5c>
    2b2c:	20 31       	cpi	r18, 0x10	; 16
    2b2e:	81 f1       	breq	.+96     	; 0x2b90 <__ultoa_invert+0x6c>
    2b30:	e8 94       	clt
    2b32:	6f 93       	push	r22
    2b34:	6e 7f       	andi	r22, 0xFE	; 254
    2b36:	6e 5f       	subi	r22, 0xFE	; 254
    2b38:	7f 4f       	sbci	r23, 0xFF	; 255
    2b3a:	8f 4f       	sbci	r24, 0xFF	; 255
    2b3c:	9f 4f       	sbci	r25, 0xFF	; 255
    2b3e:	af 4f       	sbci	r26, 0xFF	; 255
    2b40:	b1 e0       	ldi	r27, 0x01	; 1
    2b42:	3e d0       	rcall	.+124    	; 0x2bc0 <__ultoa_invert+0x9c>
    2b44:	b4 e0       	ldi	r27, 0x04	; 4
    2b46:	3c d0       	rcall	.+120    	; 0x2bc0 <__ultoa_invert+0x9c>
    2b48:	67 0f       	add	r22, r23
    2b4a:	78 1f       	adc	r23, r24
    2b4c:	89 1f       	adc	r24, r25
    2b4e:	9a 1f       	adc	r25, r26
    2b50:	a1 1d       	adc	r26, r1
    2b52:	68 0f       	add	r22, r24
    2b54:	79 1f       	adc	r23, r25
    2b56:	8a 1f       	adc	r24, r26
    2b58:	91 1d       	adc	r25, r1
    2b5a:	a1 1d       	adc	r26, r1
    2b5c:	6a 0f       	add	r22, r26
    2b5e:	71 1d       	adc	r23, r1
    2b60:	81 1d       	adc	r24, r1
    2b62:	91 1d       	adc	r25, r1
    2b64:	a1 1d       	adc	r26, r1
    2b66:	20 d0       	rcall	.+64     	; 0x2ba8 <__ultoa_invert+0x84>
    2b68:	09 f4       	brne	.+2      	; 0x2b6c <__ultoa_invert+0x48>
    2b6a:	68 94       	set
    2b6c:	3f 91       	pop	r19
    2b6e:	2a e0       	ldi	r18, 0x0A	; 10
    2b70:	26 9f       	mul	r18, r22
    2b72:	11 24       	eor	r1, r1
    2b74:	30 19       	sub	r19, r0
    2b76:	30 5d       	subi	r19, 0xD0	; 208
    2b78:	31 93       	st	Z+, r19
    2b7a:	de f6       	brtc	.-74     	; 0x2b32 <__ultoa_invert+0xe>
    2b7c:	cf 01       	movw	r24, r30
    2b7e:	08 95       	ret
    2b80:	46 2f       	mov	r20, r22
    2b82:	47 70       	andi	r20, 0x07	; 7
    2b84:	40 5d       	subi	r20, 0xD0	; 208
    2b86:	41 93       	st	Z+, r20
    2b88:	b3 e0       	ldi	r27, 0x03	; 3
    2b8a:	0f d0       	rcall	.+30     	; 0x2baa <__ultoa_invert+0x86>
    2b8c:	c9 f7       	brne	.-14     	; 0x2b80 <__ultoa_invert+0x5c>
    2b8e:	f6 cf       	rjmp	.-20     	; 0x2b7c <__ultoa_invert+0x58>
    2b90:	46 2f       	mov	r20, r22
    2b92:	4f 70       	andi	r20, 0x0F	; 15
    2b94:	40 5d       	subi	r20, 0xD0	; 208
    2b96:	4a 33       	cpi	r20, 0x3A	; 58
    2b98:	18 f0       	brcs	.+6      	; 0x2ba0 <__ultoa_invert+0x7c>
    2b9a:	49 5d       	subi	r20, 0xD9	; 217
    2b9c:	31 fd       	sbrc	r19, 1
    2b9e:	40 52       	subi	r20, 0x20	; 32
    2ba0:	41 93       	st	Z+, r20
    2ba2:	02 d0       	rcall	.+4      	; 0x2ba8 <__ultoa_invert+0x84>
    2ba4:	a9 f7       	brne	.-22     	; 0x2b90 <__ultoa_invert+0x6c>
    2ba6:	ea cf       	rjmp	.-44     	; 0x2b7c <__ultoa_invert+0x58>
    2ba8:	b4 e0       	ldi	r27, 0x04	; 4
    2baa:	a6 95       	lsr	r26
    2bac:	97 95       	ror	r25
    2bae:	87 95       	ror	r24
    2bb0:	77 95       	ror	r23
    2bb2:	67 95       	ror	r22
    2bb4:	ba 95       	dec	r27
    2bb6:	c9 f7       	brne	.-14     	; 0x2baa <__ultoa_invert+0x86>
    2bb8:	00 97       	sbiw	r24, 0x00	; 0
    2bba:	61 05       	cpc	r22, r1
    2bbc:	71 05       	cpc	r23, r1
    2bbe:	08 95       	ret
    2bc0:	9b 01       	movw	r18, r22
    2bc2:	ac 01       	movw	r20, r24
    2bc4:	0a 2e       	mov	r0, r26
    2bc6:	06 94       	lsr	r0
    2bc8:	57 95       	ror	r21
    2bca:	47 95       	ror	r20
    2bcc:	37 95       	ror	r19
    2bce:	27 95       	ror	r18
    2bd0:	ba 95       	dec	r27
    2bd2:	c9 f7       	brne	.-14     	; 0x2bc6 <__ultoa_invert+0xa2>
    2bd4:	62 0f       	add	r22, r18
    2bd6:	73 1f       	adc	r23, r19
    2bd8:	84 1f       	adc	r24, r20
    2bda:	95 1f       	adc	r25, r21
    2bdc:	a0 1d       	adc	r26, r0
    2bde:	08 95       	ret

00002be0 <_exit>:
    2be0:	f8 94       	cli

00002be2 <__stop_program>:
    2be2:	ff cf       	rjmp	.-2      	; 0x2be2 <__stop_program>
