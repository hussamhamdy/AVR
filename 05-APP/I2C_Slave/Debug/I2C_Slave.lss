
I2C_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e8e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010c  00800060  00002e8e  00002f02  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001d64  00000000  00000000  00003010  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c71  00000000  00000000  00004d74  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000180  00000000  00000000  000059e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001d1  00000000  00000000  00005b65  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002010  00000000  00000000  00005d36  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001161  00000000  00000000  00007d46  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001003  00000000  00000000  00008ea7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  00009eac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002be  00000000  00000000  0000a04c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000090e  00000000  00000000  0000a30a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000ac18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e8       	ldi	r30, 0x8E	; 142
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 36       	cpi	r26, 0x6C	; 108
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 9a 13 	call	0x2734	; 0x2734 <main>
      7a:	0c 94 45 17 	jmp	0x2e8a	; 0x2e8a <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a3 e6       	ldi	r26, 0x63	; 99
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 89 14 	jmp	0x2912	; 0x2912 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 79 14 	jmp	0x28f2	; 0x28f2 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a2 04 	call	0x944	; 0x944 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 95 14 	jmp	0x292a	; 0x292a <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 79 14 	jmp	0x28f2	; 0x28f2 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a2 04 	call	0x944	; 0x944 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 95 14 	jmp	0x292a	; 0x292a <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	83 e6       	ldi	r24, 0x63	; 99
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a2 04 	call	0x944	; 0x944 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 89 14 	jmp	0x2912	; 0x2912 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 79 14 	jmp	0x28f2	; 0x28f2 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 ef 05 	call	0xbde	; 0xbde <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 95 14 	jmp	0x292a	; 0x292a <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 79 14 	jmp	0x28f2	; 0x28f2 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 ef 05 	call	0xbde	; 0xbde <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 95 14 	jmp	0x292a	; 0x292a <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 79 14 	jmp	0x28f2	; 0x28f2 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 ef 05 	call	0xbde	; 0xbde <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 95 14 	jmp	0x292a	; 0x292a <__epilogue_restores__+0x18>

00000742 <__floatsisf>:
     742:	a8 e0       	ldi	r26, 0x08	; 8
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 76 14 	jmp	0x28ec	; 0x28ec <__prologue_saves__+0x12>
     74e:	9b 01       	movw	r18, r22
     750:	ac 01       	movw	r20, r24
     752:	83 e0       	ldi	r24, 0x03	; 3
     754:	89 83       	std	Y+1, r24	; 0x01
     756:	da 01       	movw	r26, r20
     758:	c9 01       	movw	r24, r18
     75a:	88 27       	eor	r24, r24
     75c:	b7 fd       	sbrc	r27, 7
     75e:	83 95       	inc	r24
     760:	99 27       	eor	r25, r25
     762:	aa 27       	eor	r26, r26
     764:	bb 27       	eor	r27, r27
     766:	b8 2e       	mov	r11, r24
     768:	21 15       	cp	r18, r1
     76a:	31 05       	cpc	r19, r1
     76c:	41 05       	cpc	r20, r1
     76e:	51 05       	cpc	r21, r1
     770:	19 f4       	brne	.+6      	; 0x778 <__floatsisf+0x36>
     772:	82 e0       	ldi	r24, 0x02	; 2
     774:	89 83       	std	Y+1, r24	; 0x01
     776:	3a c0       	rjmp	.+116    	; 0x7ec <__floatsisf+0xaa>
     778:	88 23       	and	r24, r24
     77a:	a9 f0       	breq	.+42     	; 0x7a6 <__floatsisf+0x64>
     77c:	20 30       	cpi	r18, 0x00	; 0
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	38 07       	cpc	r19, r24
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	48 07       	cpc	r20, r24
     786:	80 e8       	ldi	r24, 0x80	; 128
     788:	58 07       	cpc	r21, r24
     78a:	29 f4       	brne	.+10     	; 0x796 <__floatsisf+0x54>
     78c:	60 e0       	ldi	r22, 0x00	; 0
     78e:	70 e0       	ldi	r23, 0x00	; 0
     790:	80 e0       	ldi	r24, 0x00	; 0
     792:	9f ec       	ldi	r25, 0xCF	; 207
     794:	30 c0       	rjmp	.+96     	; 0x7f6 <__floatsisf+0xb4>
     796:	ee 24       	eor	r14, r14
     798:	ff 24       	eor	r15, r15
     79a:	87 01       	movw	r16, r14
     79c:	e2 1a       	sub	r14, r18
     79e:	f3 0a       	sbc	r15, r19
     7a0:	04 0b       	sbc	r16, r20
     7a2:	15 0b       	sbc	r17, r21
     7a4:	02 c0       	rjmp	.+4      	; 0x7aa <__floatsisf+0x68>
     7a6:	79 01       	movw	r14, r18
     7a8:	8a 01       	movw	r16, r20
     7aa:	8e e1       	ldi	r24, 0x1E	; 30
     7ac:	c8 2e       	mov	r12, r24
     7ae:	d1 2c       	mov	r13, r1
     7b0:	dc 82       	std	Y+4, r13	; 0x04
     7b2:	cb 82       	std	Y+3, r12	; 0x03
     7b4:	ed 82       	std	Y+5, r14	; 0x05
     7b6:	fe 82       	std	Y+6, r15	; 0x06
     7b8:	0f 83       	std	Y+7, r16	; 0x07
     7ba:	18 87       	std	Y+8, r17	; 0x08
     7bc:	c8 01       	movw	r24, r16
     7be:	b7 01       	movw	r22, r14
     7c0:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__clzsi2>
     7c4:	01 97       	sbiw	r24, 0x01	; 1
     7c6:	18 16       	cp	r1, r24
     7c8:	19 06       	cpc	r1, r25
     7ca:	84 f4       	brge	.+32     	; 0x7ec <__floatsisf+0xaa>
     7cc:	08 2e       	mov	r0, r24
     7ce:	04 c0       	rjmp	.+8      	; 0x7d8 <__floatsisf+0x96>
     7d0:	ee 0c       	add	r14, r14
     7d2:	ff 1c       	adc	r15, r15
     7d4:	00 1f       	adc	r16, r16
     7d6:	11 1f       	adc	r17, r17
     7d8:	0a 94       	dec	r0
     7da:	d2 f7       	brpl	.-12     	; 0x7d0 <__floatsisf+0x8e>
     7dc:	ed 82       	std	Y+5, r14	; 0x05
     7de:	fe 82       	std	Y+6, r15	; 0x06
     7e0:	0f 83       	std	Y+7, r16	; 0x07
     7e2:	18 87       	std	Y+8, r17	; 0x08
     7e4:	c8 1a       	sub	r12, r24
     7e6:	d9 0a       	sbc	r13, r25
     7e8:	dc 82       	std	Y+4, r13	; 0x04
     7ea:	cb 82       	std	Y+3, r12	; 0x03
     7ec:	ba 82       	std	Y+2, r11	; 0x02
     7ee:	ce 01       	movw	r24, r28
     7f0:	01 96       	adiw	r24, 0x01	; 1
     7f2:	0e 94 a2 04 	call	0x944	; 0x944 <__pack_f>
     7f6:	28 96       	adiw	r28, 0x08	; 8
     7f8:	e9 e0       	ldi	r30, 0x09	; 9
     7fa:	0c 94 92 14 	jmp	0x2924	; 0x2924 <__epilogue_restores__+0x12>

000007fe <__fixsfsi>:
     7fe:	ac e0       	ldi	r26, 0x0C	; 12
     800:	b0 e0       	ldi	r27, 0x00	; 0
     802:	e5 e0       	ldi	r30, 0x05	; 5
     804:	f4 e0       	ldi	r31, 0x04	; 4
     806:	0c 94 7d 14 	jmp	0x28fa	; 0x28fa <__prologue_saves__+0x20>
     80a:	69 83       	std	Y+1, r22	; 0x01
     80c:	7a 83       	std	Y+2, r23	; 0x02
     80e:	8b 83       	std	Y+3, r24	; 0x03
     810:	9c 83       	std	Y+4, r25	; 0x04
     812:	ce 01       	movw	r24, r28
     814:	01 96       	adiw	r24, 0x01	; 1
     816:	be 01       	movw	r22, r28
     818:	6b 5f       	subi	r22, 0xFB	; 251
     81a:	7f 4f       	sbci	r23, 0xFF	; 255
     81c:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     820:	8d 81       	ldd	r24, Y+5	; 0x05
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	61 f1       	breq	.+88     	; 0x87e <__stack+0x1f>
     826:	82 30       	cpi	r24, 0x02	; 2
     828:	50 f1       	brcs	.+84     	; 0x87e <__stack+0x1f>
     82a:	84 30       	cpi	r24, 0x04	; 4
     82c:	21 f4       	brne	.+8      	; 0x836 <__fixsfsi+0x38>
     82e:	8e 81       	ldd	r24, Y+6	; 0x06
     830:	88 23       	and	r24, r24
     832:	51 f1       	breq	.+84     	; 0x888 <__stack+0x29>
     834:	2e c0       	rjmp	.+92     	; 0x892 <__stack+0x33>
     836:	2f 81       	ldd	r18, Y+7	; 0x07
     838:	38 85       	ldd	r19, Y+8	; 0x08
     83a:	37 fd       	sbrc	r19, 7
     83c:	20 c0       	rjmp	.+64     	; 0x87e <__stack+0x1f>
     83e:	6e 81       	ldd	r22, Y+6	; 0x06
     840:	2f 31       	cpi	r18, 0x1F	; 31
     842:	31 05       	cpc	r19, r1
     844:	1c f0       	brlt	.+6      	; 0x84c <__fixsfsi+0x4e>
     846:	66 23       	and	r22, r22
     848:	f9 f0       	breq	.+62     	; 0x888 <__stack+0x29>
     84a:	23 c0       	rjmp	.+70     	; 0x892 <__stack+0x33>
     84c:	8e e1       	ldi	r24, 0x1E	; 30
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	82 1b       	sub	r24, r18
     852:	93 0b       	sbc	r25, r19
     854:	29 85       	ldd	r18, Y+9	; 0x09
     856:	3a 85       	ldd	r19, Y+10	; 0x0a
     858:	4b 85       	ldd	r20, Y+11	; 0x0b
     85a:	5c 85       	ldd	r21, Y+12	; 0x0c
     85c:	04 c0       	rjmp	.+8      	; 0x866 <__stack+0x7>
     85e:	56 95       	lsr	r21
     860:	47 95       	ror	r20
     862:	37 95       	ror	r19
     864:	27 95       	ror	r18
     866:	8a 95       	dec	r24
     868:	d2 f7       	brpl	.-12     	; 0x85e <__fixsfsi+0x60>
     86a:	66 23       	and	r22, r22
     86c:	b1 f0       	breq	.+44     	; 0x89a <__stack+0x3b>
     86e:	50 95       	com	r21
     870:	40 95       	com	r20
     872:	30 95       	com	r19
     874:	21 95       	neg	r18
     876:	3f 4f       	sbci	r19, 0xFF	; 255
     878:	4f 4f       	sbci	r20, 0xFF	; 255
     87a:	5f 4f       	sbci	r21, 0xFF	; 255
     87c:	0e c0       	rjmp	.+28     	; 0x89a <__stack+0x3b>
     87e:	20 e0       	ldi	r18, 0x00	; 0
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	40 e0       	ldi	r20, 0x00	; 0
     884:	50 e0       	ldi	r21, 0x00	; 0
     886:	09 c0       	rjmp	.+18     	; 0x89a <__stack+0x3b>
     888:	2f ef       	ldi	r18, 0xFF	; 255
     88a:	3f ef       	ldi	r19, 0xFF	; 255
     88c:	4f ef       	ldi	r20, 0xFF	; 255
     88e:	5f e7       	ldi	r21, 0x7F	; 127
     890:	04 c0       	rjmp	.+8      	; 0x89a <__stack+0x3b>
     892:	20 e0       	ldi	r18, 0x00	; 0
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	40 e0       	ldi	r20, 0x00	; 0
     898:	50 e8       	ldi	r21, 0x80	; 128
     89a:	b9 01       	movw	r22, r18
     89c:	ca 01       	movw	r24, r20
     89e:	2c 96       	adiw	r28, 0x0c	; 12
     8a0:	e2 e0       	ldi	r30, 0x02	; 2
     8a2:	0c 94 99 14 	jmp	0x2932	; 0x2932 <__epilogue_restores__+0x20>

000008a6 <__clzsi2>:
     8a6:	ef 92       	push	r14
     8a8:	ff 92       	push	r15
     8aa:	0f 93       	push	r16
     8ac:	1f 93       	push	r17
     8ae:	7b 01       	movw	r14, r22
     8b0:	8c 01       	movw	r16, r24
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	e8 16       	cp	r14, r24
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	f8 06       	cpc	r15, r24
     8ba:	81 e0       	ldi	r24, 0x01	; 1
     8bc:	08 07       	cpc	r16, r24
     8be:	80 e0       	ldi	r24, 0x00	; 0
     8c0:	18 07       	cpc	r17, r24
     8c2:	88 f4       	brcc	.+34     	; 0x8e6 <__clzsi2+0x40>
     8c4:	8f ef       	ldi	r24, 0xFF	; 255
     8c6:	e8 16       	cp	r14, r24
     8c8:	f1 04       	cpc	r15, r1
     8ca:	01 05       	cpc	r16, r1
     8cc:	11 05       	cpc	r17, r1
     8ce:	31 f0       	breq	.+12     	; 0x8dc <__clzsi2+0x36>
     8d0:	28 f0       	brcs	.+10     	; 0x8dc <__clzsi2+0x36>
     8d2:	88 e0       	ldi	r24, 0x08	; 8
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	a0 e0       	ldi	r26, 0x00	; 0
     8d8:	b0 e0       	ldi	r27, 0x00	; 0
     8da:	17 c0       	rjmp	.+46     	; 0x90a <__clzsi2+0x64>
     8dc:	80 e0       	ldi	r24, 0x00	; 0
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	a0 e0       	ldi	r26, 0x00	; 0
     8e2:	b0 e0       	ldi	r27, 0x00	; 0
     8e4:	12 c0       	rjmp	.+36     	; 0x90a <__clzsi2+0x64>
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	e8 16       	cp	r14, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	f8 06       	cpc	r15, r24
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	08 07       	cpc	r16, r24
     8f2:	81 e0       	ldi	r24, 0x01	; 1
     8f4:	18 07       	cpc	r17, r24
     8f6:	28 f0       	brcs	.+10     	; 0x902 <__clzsi2+0x5c>
     8f8:	88 e1       	ldi	r24, 0x18	; 24
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	a0 e0       	ldi	r26, 0x00	; 0
     8fe:	b0 e0       	ldi	r27, 0x00	; 0
     900:	04 c0       	rjmp	.+8      	; 0x90a <__clzsi2+0x64>
     902:	80 e1       	ldi	r24, 0x10	; 16
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	a0 e0       	ldi	r26, 0x00	; 0
     908:	b0 e0       	ldi	r27, 0x00	; 0
     90a:	20 e2       	ldi	r18, 0x20	; 32
     90c:	30 e0       	ldi	r19, 0x00	; 0
     90e:	40 e0       	ldi	r20, 0x00	; 0
     910:	50 e0       	ldi	r21, 0x00	; 0
     912:	28 1b       	sub	r18, r24
     914:	39 0b       	sbc	r19, r25
     916:	4a 0b       	sbc	r20, r26
     918:	5b 0b       	sbc	r21, r27
     91a:	04 c0       	rjmp	.+8      	; 0x924 <__clzsi2+0x7e>
     91c:	16 95       	lsr	r17
     91e:	07 95       	ror	r16
     920:	f7 94       	ror	r15
     922:	e7 94       	ror	r14
     924:	8a 95       	dec	r24
     926:	d2 f7       	brpl	.-12     	; 0x91c <__clzsi2+0x76>
     928:	f7 01       	movw	r30, r14
     92a:	e5 59       	subi	r30, 0x95	; 149
     92c:	ff 4f       	sbci	r31, 0xFF	; 255
     92e:	80 81       	ld	r24, Z
     930:	28 1b       	sub	r18, r24
     932:	31 09       	sbc	r19, r1
     934:	41 09       	sbc	r20, r1
     936:	51 09       	sbc	r21, r1
     938:	c9 01       	movw	r24, r18
     93a:	1f 91       	pop	r17
     93c:	0f 91       	pop	r16
     93e:	ff 90       	pop	r15
     940:	ef 90       	pop	r14
     942:	08 95       	ret

00000944 <__pack_f>:
     944:	df 92       	push	r13
     946:	ef 92       	push	r14
     948:	ff 92       	push	r15
     94a:	0f 93       	push	r16
     94c:	1f 93       	push	r17
     94e:	fc 01       	movw	r30, r24
     950:	e4 80       	ldd	r14, Z+4	; 0x04
     952:	f5 80       	ldd	r15, Z+5	; 0x05
     954:	06 81       	ldd	r16, Z+6	; 0x06
     956:	17 81       	ldd	r17, Z+7	; 0x07
     958:	d1 80       	ldd	r13, Z+1	; 0x01
     95a:	80 81       	ld	r24, Z
     95c:	82 30       	cpi	r24, 0x02	; 2
     95e:	48 f4       	brcc	.+18     	; 0x972 <__pack_f+0x2e>
     960:	80 e0       	ldi	r24, 0x00	; 0
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	a0 e1       	ldi	r26, 0x10	; 16
     966:	b0 e0       	ldi	r27, 0x00	; 0
     968:	e8 2a       	or	r14, r24
     96a:	f9 2a       	or	r15, r25
     96c:	0a 2b       	or	r16, r26
     96e:	1b 2b       	or	r17, r27
     970:	a5 c0       	rjmp	.+330    	; 0xabc <__pack_f+0x178>
     972:	84 30       	cpi	r24, 0x04	; 4
     974:	09 f4       	brne	.+2      	; 0x978 <__pack_f+0x34>
     976:	9f c0       	rjmp	.+318    	; 0xab6 <__pack_f+0x172>
     978:	82 30       	cpi	r24, 0x02	; 2
     97a:	21 f4       	brne	.+8      	; 0x984 <__pack_f+0x40>
     97c:	ee 24       	eor	r14, r14
     97e:	ff 24       	eor	r15, r15
     980:	87 01       	movw	r16, r14
     982:	05 c0       	rjmp	.+10     	; 0x98e <__pack_f+0x4a>
     984:	e1 14       	cp	r14, r1
     986:	f1 04       	cpc	r15, r1
     988:	01 05       	cpc	r16, r1
     98a:	11 05       	cpc	r17, r1
     98c:	19 f4       	brne	.+6      	; 0x994 <__pack_f+0x50>
     98e:	e0 e0       	ldi	r30, 0x00	; 0
     990:	f0 e0       	ldi	r31, 0x00	; 0
     992:	96 c0       	rjmp	.+300    	; 0xac0 <__pack_f+0x17c>
     994:	62 81       	ldd	r22, Z+2	; 0x02
     996:	73 81       	ldd	r23, Z+3	; 0x03
     998:	9f ef       	ldi	r25, 0xFF	; 255
     99a:	62 38       	cpi	r22, 0x82	; 130
     99c:	79 07       	cpc	r23, r25
     99e:	0c f0       	brlt	.+2      	; 0x9a2 <__pack_f+0x5e>
     9a0:	5b c0       	rjmp	.+182    	; 0xa58 <__pack_f+0x114>
     9a2:	22 e8       	ldi	r18, 0x82	; 130
     9a4:	3f ef       	ldi	r19, 0xFF	; 255
     9a6:	26 1b       	sub	r18, r22
     9a8:	37 0b       	sbc	r19, r23
     9aa:	2a 31       	cpi	r18, 0x1A	; 26
     9ac:	31 05       	cpc	r19, r1
     9ae:	2c f0       	brlt	.+10     	; 0x9ba <__pack_f+0x76>
     9b0:	20 e0       	ldi	r18, 0x00	; 0
     9b2:	30 e0       	ldi	r19, 0x00	; 0
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	2a c0       	rjmp	.+84     	; 0xa0e <__pack_f+0xca>
     9ba:	b8 01       	movw	r22, r16
     9bc:	a7 01       	movw	r20, r14
     9be:	02 2e       	mov	r0, r18
     9c0:	04 c0       	rjmp	.+8      	; 0x9ca <__pack_f+0x86>
     9c2:	76 95       	lsr	r23
     9c4:	67 95       	ror	r22
     9c6:	57 95       	ror	r21
     9c8:	47 95       	ror	r20
     9ca:	0a 94       	dec	r0
     9cc:	d2 f7       	brpl	.-12     	; 0x9c2 <__pack_f+0x7e>
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	a0 e0       	ldi	r26, 0x00	; 0
     9d4:	b0 e0       	ldi	r27, 0x00	; 0
     9d6:	04 c0       	rjmp	.+8      	; 0x9e0 <__pack_f+0x9c>
     9d8:	88 0f       	add	r24, r24
     9da:	99 1f       	adc	r25, r25
     9dc:	aa 1f       	adc	r26, r26
     9de:	bb 1f       	adc	r27, r27
     9e0:	2a 95       	dec	r18
     9e2:	d2 f7       	brpl	.-12     	; 0x9d8 <__pack_f+0x94>
     9e4:	01 97       	sbiw	r24, 0x01	; 1
     9e6:	a1 09       	sbc	r26, r1
     9e8:	b1 09       	sbc	r27, r1
     9ea:	8e 21       	and	r24, r14
     9ec:	9f 21       	and	r25, r15
     9ee:	a0 23       	and	r26, r16
     9f0:	b1 23       	and	r27, r17
     9f2:	00 97       	sbiw	r24, 0x00	; 0
     9f4:	a1 05       	cpc	r26, r1
     9f6:	b1 05       	cpc	r27, r1
     9f8:	21 f0       	breq	.+8      	; 0xa02 <__pack_f+0xbe>
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	a0 e0       	ldi	r26, 0x00	; 0
     a00:	b0 e0       	ldi	r27, 0x00	; 0
     a02:	9a 01       	movw	r18, r20
     a04:	ab 01       	movw	r20, r22
     a06:	28 2b       	or	r18, r24
     a08:	39 2b       	or	r19, r25
     a0a:	4a 2b       	or	r20, r26
     a0c:	5b 2b       	or	r21, r27
     a0e:	da 01       	movw	r26, r20
     a10:	c9 01       	movw	r24, r18
     a12:	8f 77       	andi	r24, 0x7F	; 127
     a14:	90 70       	andi	r25, 0x00	; 0
     a16:	a0 70       	andi	r26, 0x00	; 0
     a18:	b0 70       	andi	r27, 0x00	; 0
     a1a:	80 34       	cpi	r24, 0x40	; 64
     a1c:	91 05       	cpc	r25, r1
     a1e:	a1 05       	cpc	r26, r1
     a20:	b1 05       	cpc	r27, r1
     a22:	39 f4       	brne	.+14     	; 0xa32 <__pack_f+0xee>
     a24:	27 ff       	sbrs	r18, 7
     a26:	09 c0       	rjmp	.+18     	; 0xa3a <__pack_f+0xf6>
     a28:	20 5c       	subi	r18, 0xC0	; 192
     a2a:	3f 4f       	sbci	r19, 0xFF	; 255
     a2c:	4f 4f       	sbci	r20, 0xFF	; 255
     a2e:	5f 4f       	sbci	r21, 0xFF	; 255
     a30:	04 c0       	rjmp	.+8      	; 0xa3a <__pack_f+0xf6>
     a32:	21 5c       	subi	r18, 0xC1	; 193
     a34:	3f 4f       	sbci	r19, 0xFF	; 255
     a36:	4f 4f       	sbci	r20, 0xFF	; 255
     a38:	5f 4f       	sbci	r21, 0xFF	; 255
     a3a:	e0 e0       	ldi	r30, 0x00	; 0
     a3c:	f0 e0       	ldi	r31, 0x00	; 0
     a3e:	20 30       	cpi	r18, 0x00	; 0
     a40:	a0 e0       	ldi	r26, 0x00	; 0
     a42:	3a 07       	cpc	r19, r26
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	4a 07       	cpc	r20, r26
     a48:	a0 e4       	ldi	r26, 0x40	; 64
     a4a:	5a 07       	cpc	r21, r26
     a4c:	10 f0       	brcs	.+4      	; 0xa52 <__pack_f+0x10e>
     a4e:	e1 e0       	ldi	r30, 0x01	; 1
     a50:	f0 e0       	ldi	r31, 0x00	; 0
     a52:	79 01       	movw	r14, r18
     a54:	8a 01       	movw	r16, r20
     a56:	27 c0       	rjmp	.+78     	; 0xaa6 <__pack_f+0x162>
     a58:	60 38       	cpi	r22, 0x80	; 128
     a5a:	71 05       	cpc	r23, r1
     a5c:	64 f5       	brge	.+88     	; 0xab6 <__pack_f+0x172>
     a5e:	fb 01       	movw	r30, r22
     a60:	e1 58       	subi	r30, 0x81	; 129
     a62:	ff 4f       	sbci	r31, 0xFF	; 255
     a64:	d8 01       	movw	r26, r16
     a66:	c7 01       	movw	r24, r14
     a68:	8f 77       	andi	r24, 0x7F	; 127
     a6a:	90 70       	andi	r25, 0x00	; 0
     a6c:	a0 70       	andi	r26, 0x00	; 0
     a6e:	b0 70       	andi	r27, 0x00	; 0
     a70:	80 34       	cpi	r24, 0x40	; 64
     a72:	91 05       	cpc	r25, r1
     a74:	a1 05       	cpc	r26, r1
     a76:	b1 05       	cpc	r27, r1
     a78:	39 f4       	brne	.+14     	; 0xa88 <__pack_f+0x144>
     a7a:	e7 fe       	sbrs	r14, 7
     a7c:	0d c0       	rjmp	.+26     	; 0xa98 <__pack_f+0x154>
     a7e:	80 e4       	ldi	r24, 0x40	; 64
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	a0 e0       	ldi	r26, 0x00	; 0
     a84:	b0 e0       	ldi	r27, 0x00	; 0
     a86:	04 c0       	rjmp	.+8      	; 0xa90 <__pack_f+0x14c>
     a88:	8f e3       	ldi	r24, 0x3F	; 63
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	a0 e0       	ldi	r26, 0x00	; 0
     a8e:	b0 e0       	ldi	r27, 0x00	; 0
     a90:	e8 0e       	add	r14, r24
     a92:	f9 1e       	adc	r15, r25
     a94:	0a 1f       	adc	r16, r26
     a96:	1b 1f       	adc	r17, r27
     a98:	17 ff       	sbrs	r17, 7
     a9a:	05 c0       	rjmp	.+10     	; 0xaa6 <__pack_f+0x162>
     a9c:	16 95       	lsr	r17
     a9e:	07 95       	ror	r16
     aa0:	f7 94       	ror	r15
     aa2:	e7 94       	ror	r14
     aa4:	31 96       	adiw	r30, 0x01	; 1
     aa6:	87 e0       	ldi	r24, 0x07	; 7
     aa8:	16 95       	lsr	r17
     aaa:	07 95       	ror	r16
     aac:	f7 94       	ror	r15
     aae:	e7 94       	ror	r14
     ab0:	8a 95       	dec	r24
     ab2:	d1 f7       	brne	.-12     	; 0xaa8 <__pack_f+0x164>
     ab4:	05 c0       	rjmp	.+10     	; 0xac0 <__pack_f+0x17c>
     ab6:	ee 24       	eor	r14, r14
     ab8:	ff 24       	eor	r15, r15
     aba:	87 01       	movw	r16, r14
     abc:	ef ef       	ldi	r30, 0xFF	; 255
     abe:	f0 e0       	ldi	r31, 0x00	; 0
     ac0:	6e 2f       	mov	r22, r30
     ac2:	67 95       	ror	r22
     ac4:	66 27       	eor	r22, r22
     ac6:	67 95       	ror	r22
     ac8:	90 2f       	mov	r25, r16
     aca:	9f 77       	andi	r25, 0x7F	; 127
     acc:	d7 94       	ror	r13
     ace:	dd 24       	eor	r13, r13
     ad0:	d7 94       	ror	r13
     ad2:	8e 2f       	mov	r24, r30
     ad4:	86 95       	lsr	r24
     ad6:	49 2f       	mov	r20, r25
     ad8:	46 2b       	or	r20, r22
     ada:	58 2f       	mov	r21, r24
     adc:	5d 29       	or	r21, r13
     ade:	b7 01       	movw	r22, r14
     ae0:	ca 01       	movw	r24, r20
     ae2:	1f 91       	pop	r17
     ae4:	0f 91       	pop	r16
     ae6:	ff 90       	pop	r15
     ae8:	ef 90       	pop	r14
     aea:	df 90       	pop	r13
     aec:	08 95       	ret

00000aee <__unpack_f>:
     aee:	fc 01       	movw	r30, r24
     af0:	db 01       	movw	r26, r22
     af2:	40 81       	ld	r20, Z
     af4:	51 81       	ldd	r21, Z+1	; 0x01
     af6:	22 81       	ldd	r18, Z+2	; 0x02
     af8:	62 2f       	mov	r22, r18
     afa:	6f 77       	andi	r22, 0x7F	; 127
     afc:	70 e0       	ldi	r23, 0x00	; 0
     afe:	22 1f       	adc	r18, r18
     b00:	22 27       	eor	r18, r18
     b02:	22 1f       	adc	r18, r18
     b04:	93 81       	ldd	r25, Z+3	; 0x03
     b06:	89 2f       	mov	r24, r25
     b08:	88 0f       	add	r24, r24
     b0a:	82 2b       	or	r24, r18
     b0c:	28 2f       	mov	r18, r24
     b0e:	30 e0       	ldi	r19, 0x00	; 0
     b10:	99 1f       	adc	r25, r25
     b12:	99 27       	eor	r25, r25
     b14:	99 1f       	adc	r25, r25
     b16:	11 96       	adiw	r26, 0x01	; 1
     b18:	9c 93       	st	X, r25
     b1a:	11 97       	sbiw	r26, 0x01	; 1
     b1c:	21 15       	cp	r18, r1
     b1e:	31 05       	cpc	r19, r1
     b20:	a9 f5       	brne	.+106    	; 0xb8c <__unpack_f+0x9e>
     b22:	41 15       	cp	r20, r1
     b24:	51 05       	cpc	r21, r1
     b26:	61 05       	cpc	r22, r1
     b28:	71 05       	cpc	r23, r1
     b2a:	11 f4       	brne	.+4      	; 0xb30 <__unpack_f+0x42>
     b2c:	82 e0       	ldi	r24, 0x02	; 2
     b2e:	37 c0       	rjmp	.+110    	; 0xb9e <__unpack_f+0xb0>
     b30:	82 e8       	ldi	r24, 0x82	; 130
     b32:	9f ef       	ldi	r25, 0xFF	; 255
     b34:	13 96       	adiw	r26, 0x03	; 3
     b36:	9c 93       	st	X, r25
     b38:	8e 93       	st	-X, r24
     b3a:	12 97       	sbiw	r26, 0x02	; 2
     b3c:	9a 01       	movw	r18, r20
     b3e:	ab 01       	movw	r20, r22
     b40:	67 e0       	ldi	r22, 0x07	; 7
     b42:	22 0f       	add	r18, r18
     b44:	33 1f       	adc	r19, r19
     b46:	44 1f       	adc	r20, r20
     b48:	55 1f       	adc	r21, r21
     b4a:	6a 95       	dec	r22
     b4c:	d1 f7       	brne	.-12     	; 0xb42 <__unpack_f+0x54>
     b4e:	83 e0       	ldi	r24, 0x03	; 3
     b50:	8c 93       	st	X, r24
     b52:	0d c0       	rjmp	.+26     	; 0xb6e <__unpack_f+0x80>
     b54:	22 0f       	add	r18, r18
     b56:	33 1f       	adc	r19, r19
     b58:	44 1f       	adc	r20, r20
     b5a:	55 1f       	adc	r21, r21
     b5c:	12 96       	adiw	r26, 0x02	; 2
     b5e:	8d 91       	ld	r24, X+
     b60:	9c 91       	ld	r25, X
     b62:	13 97       	sbiw	r26, 0x03	; 3
     b64:	01 97       	sbiw	r24, 0x01	; 1
     b66:	13 96       	adiw	r26, 0x03	; 3
     b68:	9c 93       	st	X, r25
     b6a:	8e 93       	st	-X, r24
     b6c:	12 97       	sbiw	r26, 0x02	; 2
     b6e:	20 30       	cpi	r18, 0x00	; 0
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	38 07       	cpc	r19, r24
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	48 07       	cpc	r20, r24
     b78:	80 e4       	ldi	r24, 0x40	; 64
     b7a:	58 07       	cpc	r21, r24
     b7c:	58 f3       	brcs	.-42     	; 0xb54 <__unpack_f+0x66>
     b7e:	14 96       	adiw	r26, 0x04	; 4
     b80:	2d 93       	st	X+, r18
     b82:	3d 93       	st	X+, r19
     b84:	4d 93       	st	X+, r20
     b86:	5c 93       	st	X, r21
     b88:	17 97       	sbiw	r26, 0x07	; 7
     b8a:	08 95       	ret
     b8c:	2f 3f       	cpi	r18, 0xFF	; 255
     b8e:	31 05       	cpc	r19, r1
     b90:	79 f4       	brne	.+30     	; 0xbb0 <__unpack_f+0xc2>
     b92:	41 15       	cp	r20, r1
     b94:	51 05       	cpc	r21, r1
     b96:	61 05       	cpc	r22, r1
     b98:	71 05       	cpc	r23, r1
     b9a:	19 f4       	brne	.+6      	; 0xba2 <__unpack_f+0xb4>
     b9c:	84 e0       	ldi	r24, 0x04	; 4
     b9e:	8c 93       	st	X, r24
     ba0:	08 95       	ret
     ba2:	64 ff       	sbrs	r22, 4
     ba4:	03 c0       	rjmp	.+6      	; 0xbac <__unpack_f+0xbe>
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	8c 93       	st	X, r24
     baa:	12 c0       	rjmp	.+36     	; 0xbd0 <__unpack_f+0xe2>
     bac:	1c 92       	st	X, r1
     bae:	10 c0       	rjmp	.+32     	; 0xbd0 <__unpack_f+0xe2>
     bb0:	2f 57       	subi	r18, 0x7F	; 127
     bb2:	30 40       	sbci	r19, 0x00	; 0
     bb4:	13 96       	adiw	r26, 0x03	; 3
     bb6:	3c 93       	st	X, r19
     bb8:	2e 93       	st	-X, r18
     bba:	12 97       	sbiw	r26, 0x02	; 2
     bbc:	83 e0       	ldi	r24, 0x03	; 3
     bbe:	8c 93       	st	X, r24
     bc0:	87 e0       	ldi	r24, 0x07	; 7
     bc2:	44 0f       	add	r20, r20
     bc4:	55 1f       	adc	r21, r21
     bc6:	66 1f       	adc	r22, r22
     bc8:	77 1f       	adc	r23, r23
     bca:	8a 95       	dec	r24
     bcc:	d1 f7       	brne	.-12     	; 0xbc2 <__unpack_f+0xd4>
     bce:	70 64       	ori	r23, 0x40	; 64
     bd0:	14 96       	adiw	r26, 0x04	; 4
     bd2:	4d 93       	st	X+, r20
     bd4:	5d 93       	st	X+, r21
     bd6:	6d 93       	st	X+, r22
     bd8:	7c 93       	st	X, r23
     bda:	17 97       	sbiw	r26, 0x07	; 7
     bdc:	08 95       	ret

00000bde <__fpcmp_parts_f>:
     bde:	1f 93       	push	r17
     be0:	dc 01       	movw	r26, r24
     be2:	fb 01       	movw	r30, r22
     be4:	9c 91       	ld	r25, X
     be6:	92 30       	cpi	r25, 0x02	; 2
     be8:	08 f4       	brcc	.+2      	; 0xbec <__fpcmp_parts_f+0xe>
     bea:	47 c0       	rjmp	.+142    	; 0xc7a <__fpcmp_parts_f+0x9c>
     bec:	80 81       	ld	r24, Z
     bee:	82 30       	cpi	r24, 0x02	; 2
     bf0:	08 f4       	brcc	.+2      	; 0xbf4 <__fpcmp_parts_f+0x16>
     bf2:	43 c0       	rjmp	.+134    	; 0xc7a <__fpcmp_parts_f+0x9c>
     bf4:	94 30       	cpi	r25, 0x04	; 4
     bf6:	51 f4       	brne	.+20     	; 0xc0c <__fpcmp_parts_f+0x2e>
     bf8:	11 96       	adiw	r26, 0x01	; 1
     bfa:	1c 91       	ld	r17, X
     bfc:	84 30       	cpi	r24, 0x04	; 4
     bfe:	99 f5       	brne	.+102    	; 0xc66 <__fpcmp_parts_f+0x88>
     c00:	81 81       	ldd	r24, Z+1	; 0x01
     c02:	68 2f       	mov	r22, r24
     c04:	70 e0       	ldi	r23, 0x00	; 0
     c06:	61 1b       	sub	r22, r17
     c08:	71 09       	sbc	r23, r1
     c0a:	3f c0       	rjmp	.+126    	; 0xc8a <__fpcmp_parts_f+0xac>
     c0c:	84 30       	cpi	r24, 0x04	; 4
     c0e:	21 f0       	breq	.+8      	; 0xc18 <__fpcmp_parts_f+0x3a>
     c10:	92 30       	cpi	r25, 0x02	; 2
     c12:	31 f4       	brne	.+12     	; 0xc20 <__fpcmp_parts_f+0x42>
     c14:	82 30       	cpi	r24, 0x02	; 2
     c16:	b9 f1       	breq	.+110    	; 0xc86 <__fpcmp_parts_f+0xa8>
     c18:	81 81       	ldd	r24, Z+1	; 0x01
     c1a:	88 23       	and	r24, r24
     c1c:	89 f1       	breq	.+98     	; 0xc80 <__fpcmp_parts_f+0xa2>
     c1e:	2d c0       	rjmp	.+90     	; 0xc7a <__fpcmp_parts_f+0x9c>
     c20:	11 96       	adiw	r26, 0x01	; 1
     c22:	1c 91       	ld	r17, X
     c24:	11 97       	sbiw	r26, 0x01	; 1
     c26:	82 30       	cpi	r24, 0x02	; 2
     c28:	f1 f0       	breq	.+60     	; 0xc66 <__fpcmp_parts_f+0x88>
     c2a:	81 81       	ldd	r24, Z+1	; 0x01
     c2c:	18 17       	cp	r17, r24
     c2e:	d9 f4       	brne	.+54     	; 0xc66 <__fpcmp_parts_f+0x88>
     c30:	12 96       	adiw	r26, 0x02	; 2
     c32:	2d 91       	ld	r18, X+
     c34:	3c 91       	ld	r19, X
     c36:	13 97       	sbiw	r26, 0x03	; 3
     c38:	82 81       	ldd	r24, Z+2	; 0x02
     c3a:	93 81       	ldd	r25, Z+3	; 0x03
     c3c:	82 17       	cp	r24, r18
     c3e:	93 07       	cpc	r25, r19
     c40:	94 f0       	brlt	.+36     	; 0xc66 <__fpcmp_parts_f+0x88>
     c42:	28 17       	cp	r18, r24
     c44:	39 07       	cpc	r19, r25
     c46:	bc f0       	brlt	.+46     	; 0xc76 <__fpcmp_parts_f+0x98>
     c48:	14 96       	adiw	r26, 0x04	; 4
     c4a:	8d 91       	ld	r24, X+
     c4c:	9d 91       	ld	r25, X+
     c4e:	0d 90       	ld	r0, X+
     c50:	bc 91       	ld	r27, X
     c52:	a0 2d       	mov	r26, r0
     c54:	24 81       	ldd	r18, Z+4	; 0x04
     c56:	35 81       	ldd	r19, Z+5	; 0x05
     c58:	46 81       	ldd	r20, Z+6	; 0x06
     c5a:	57 81       	ldd	r21, Z+7	; 0x07
     c5c:	28 17       	cp	r18, r24
     c5e:	39 07       	cpc	r19, r25
     c60:	4a 07       	cpc	r20, r26
     c62:	5b 07       	cpc	r21, r27
     c64:	18 f4       	brcc	.+6      	; 0xc6c <__fpcmp_parts_f+0x8e>
     c66:	11 23       	and	r17, r17
     c68:	41 f0       	breq	.+16     	; 0xc7a <__fpcmp_parts_f+0x9c>
     c6a:	0a c0       	rjmp	.+20     	; 0xc80 <__fpcmp_parts_f+0xa2>
     c6c:	82 17       	cp	r24, r18
     c6e:	93 07       	cpc	r25, r19
     c70:	a4 07       	cpc	r26, r20
     c72:	b5 07       	cpc	r27, r21
     c74:	40 f4       	brcc	.+16     	; 0xc86 <__fpcmp_parts_f+0xa8>
     c76:	11 23       	and	r17, r17
     c78:	19 f0       	breq	.+6      	; 0xc80 <__fpcmp_parts_f+0xa2>
     c7a:	61 e0       	ldi	r22, 0x01	; 1
     c7c:	70 e0       	ldi	r23, 0x00	; 0
     c7e:	05 c0       	rjmp	.+10     	; 0xc8a <__fpcmp_parts_f+0xac>
     c80:	6f ef       	ldi	r22, 0xFF	; 255
     c82:	7f ef       	ldi	r23, 0xFF	; 255
     c84:	02 c0       	rjmp	.+4      	; 0xc8a <__fpcmp_parts_f+0xac>
     c86:	60 e0       	ldi	r22, 0x00	; 0
     c88:	70 e0       	ldi	r23, 0x00	; 0
     c8a:	cb 01       	movw	r24, r22
     c8c:	1f 91       	pop	r17
     c8e:	08 95       	ret

00000c90 <GPIO_voidSetPinDDR>:




	void GPIO_voidSetPinDDR (u8  copy_u8Port ,u8 copy_u8Pin , u8 copy_u8Mode )
	{
     c90:	df 93       	push	r29
     c92:	cf 93       	push	r28
     c94:	00 d0       	rcall	.+0      	; 0xc96 <GPIO_voidSetPinDDR+0x6>
     c96:	00 d0       	rcall	.+0      	; 0xc98 <GPIO_voidSetPinDDR+0x8>
     c98:	0f 92       	push	r0
     c9a:	cd b7       	in	r28, 0x3d	; 61
     c9c:	de b7       	in	r29, 0x3e	; 62
     c9e:	89 83       	std	Y+1, r24	; 0x01
     ca0:	6a 83       	std	Y+2, r22	; 0x02
     ca2:	4b 83       	std	Y+3, r20	; 0x03
		switch(copy_u8Port)
     ca4:	89 81       	ldd	r24, Y+1	; 0x01
     ca6:	28 2f       	mov	r18, r24
     ca8:	30 e0       	ldi	r19, 0x00	; 0
     caa:	3d 83       	std	Y+5, r19	; 0x05
     cac:	2c 83       	std	Y+4, r18	; 0x04
     cae:	8c 81       	ldd	r24, Y+4	; 0x04
     cb0:	9d 81       	ldd	r25, Y+5	; 0x05
     cb2:	81 30       	cpi	r24, 0x01	; 1
     cb4:	91 05       	cpc	r25, r1
     cb6:	09 f4       	brne	.+2      	; 0xcba <GPIO_voidSetPinDDR+0x2a>
     cb8:	43 c0       	rjmp	.+134    	; 0xd40 <GPIO_voidSetPinDDR+0xb0>
     cba:	2c 81       	ldd	r18, Y+4	; 0x04
     cbc:	3d 81       	ldd	r19, Y+5	; 0x05
     cbe:	22 30       	cpi	r18, 0x02	; 2
     cc0:	31 05       	cpc	r19, r1
     cc2:	2c f4       	brge	.+10     	; 0xcce <GPIO_voidSetPinDDR+0x3e>
     cc4:	8c 81       	ldd	r24, Y+4	; 0x04
     cc6:	9d 81       	ldd	r25, Y+5	; 0x05
     cc8:	00 97       	sbiw	r24, 0x00	; 0
     cca:	71 f0       	breq	.+28     	; 0xce8 <GPIO_voidSetPinDDR+0x58>
     ccc:	bc c0       	rjmp	.+376    	; 0xe46 <GPIO_voidSetPinDDR+0x1b6>
     cce:	2c 81       	ldd	r18, Y+4	; 0x04
     cd0:	3d 81       	ldd	r19, Y+5	; 0x05
     cd2:	22 30       	cpi	r18, 0x02	; 2
     cd4:	31 05       	cpc	r19, r1
     cd6:	09 f4       	brne	.+2      	; 0xcda <GPIO_voidSetPinDDR+0x4a>
     cd8:	5f c0       	rjmp	.+190    	; 0xd98 <GPIO_voidSetPinDDR+0x108>
     cda:	8c 81       	ldd	r24, Y+4	; 0x04
     cdc:	9d 81       	ldd	r25, Y+5	; 0x05
     cde:	83 30       	cpi	r24, 0x03	; 3
     ce0:	91 05       	cpc	r25, r1
     ce2:	09 f4       	brne	.+2      	; 0xce6 <GPIO_voidSetPinDDR+0x56>
     ce4:	85 c0       	rjmp	.+266    	; 0xdf0 <GPIO_voidSetPinDDR+0x160>
     ce6:	af c0       	rjmp	.+350    	; 0xe46 <GPIO_voidSetPinDDR+0x1b6>
		{
			case GPIOA :
				if(copy_u8Mode ==OUTPUT )
     ce8:	8b 81       	ldd	r24, Y+3	; 0x03
     cea:	81 30       	cpi	r24, 0x01	; 1
     cec:	a1 f4       	brne	.+40     	; 0xd16 <GPIO_voidSetPinDDR+0x86>
				{
					SET_BIT(DDRA ,copy_u8Pin);
     cee:	aa e3       	ldi	r26, 0x3A	; 58
     cf0:	b0 e0       	ldi	r27, 0x00	; 0
     cf2:	ea e3       	ldi	r30, 0x3A	; 58
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	80 81       	ld	r24, Z
     cf8:	48 2f       	mov	r20, r24
     cfa:	8a 81       	ldd	r24, Y+2	; 0x02
     cfc:	28 2f       	mov	r18, r24
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	02 2e       	mov	r0, r18
     d06:	02 c0       	rjmp	.+4      	; 0xd0c <GPIO_voidSetPinDDR+0x7c>
     d08:	88 0f       	add	r24, r24
     d0a:	99 1f       	adc	r25, r25
     d0c:	0a 94       	dec	r0
     d0e:	e2 f7       	brpl	.-8      	; 0xd08 <GPIO_voidSetPinDDR+0x78>
     d10:	84 2b       	or	r24, r20
     d12:	8c 93       	st	X, r24
     d14:	98 c0       	rjmp	.+304    	; 0xe46 <GPIO_voidSetPinDDR+0x1b6>
				}
				else {
					CLEAR_BIT(DDRA,copy_u8Pin);
     d16:	aa e3       	ldi	r26, 0x3A	; 58
     d18:	b0 e0       	ldi	r27, 0x00	; 0
     d1a:	ea e3       	ldi	r30, 0x3A	; 58
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	80 81       	ld	r24, Z
     d20:	48 2f       	mov	r20, r24
     d22:	8a 81       	ldd	r24, Y+2	; 0x02
     d24:	28 2f       	mov	r18, r24
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	02 2e       	mov	r0, r18
     d2e:	02 c0       	rjmp	.+4      	; 0xd34 <GPIO_voidSetPinDDR+0xa4>
     d30:	88 0f       	add	r24, r24
     d32:	99 1f       	adc	r25, r25
     d34:	0a 94       	dec	r0
     d36:	e2 f7       	brpl	.-8      	; 0xd30 <GPIO_voidSetPinDDR+0xa0>
     d38:	80 95       	com	r24
     d3a:	84 23       	and	r24, r20
     d3c:	8c 93       	st	X, r24
     d3e:	83 c0       	rjmp	.+262    	; 0xe46 <GPIO_voidSetPinDDR+0x1b6>
				}
				break;
			case GPIOB :
				if(copy_u8Mode ==OUTPUT )
     d40:	8b 81       	ldd	r24, Y+3	; 0x03
     d42:	81 30       	cpi	r24, 0x01	; 1
     d44:	a1 f4       	brne	.+40     	; 0xd6e <GPIO_voidSetPinDDR+0xde>
				{
					SET_BIT(DDRB ,copy_u8Pin);
     d46:	a7 e3       	ldi	r26, 0x37	; 55
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e7 e3       	ldi	r30, 0x37	; 55
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	80 81       	ld	r24, Z
     d50:	48 2f       	mov	r20, r24
     d52:	8a 81       	ldd	r24, Y+2	; 0x02
     d54:	28 2f       	mov	r18, r24
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	81 e0       	ldi	r24, 0x01	; 1
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	02 2e       	mov	r0, r18
     d5e:	02 c0       	rjmp	.+4      	; 0xd64 <GPIO_voidSetPinDDR+0xd4>
     d60:	88 0f       	add	r24, r24
     d62:	99 1f       	adc	r25, r25
     d64:	0a 94       	dec	r0
     d66:	e2 f7       	brpl	.-8      	; 0xd60 <GPIO_voidSetPinDDR+0xd0>
     d68:	84 2b       	or	r24, r20
     d6a:	8c 93       	st	X, r24
     d6c:	6c c0       	rjmp	.+216    	; 0xe46 <GPIO_voidSetPinDDR+0x1b6>
				}
				else {
					CLEAR_BIT(DDRB,copy_u8Pin);
     d6e:	a7 e3       	ldi	r26, 0x37	; 55
     d70:	b0 e0       	ldi	r27, 0x00	; 0
     d72:	e7 e3       	ldi	r30, 0x37	; 55
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	80 81       	ld	r24, Z
     d78:	48 2f       	mov	r20, r24
     d7a:	8a 81       	ldd	r24, Y+2	; 0x02
     d7c:	28 2f       	mov	r18, r24
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	02 2e       	mov	r0, r18
     d86:	02 c0       	rjmp	.+4      	; 0xd8c <GPIO_voidSetPinDDR+0xfc>
     d88:	88 0f       	add	r24, r24
     d8a:	99 1f       	adc	r25, r25
     d8c:	0a 94       	dec	r0
     d8e:	e2 f7       	brpl	.-8      	; 0xd88 <GPIO_voidSetPinDDR+0xf8>
     d90:	80 95       	com	r24
     d92:	84 23       	and	r24, r20
     d94:	8c 93       	st	X, r24
     d96:	57 c0       	rjmp	.+174    	; 0xe46 <GPIO_voidSetPinDDR+0x1b6>
				}
				break;
			case GPIOC :
				if(copy_u8Mode ==OUTPUT )
     d98:	8b 81       	ldd	r24, Y+3	; 0x03
     d9a:	81 30       	cpi	r24, 0x01	; 1
     d9c:	a1 f4       	brne	.+40     	; 0xdc6 <GPIO_voidSetPinDDR+0x136>
				{
					SET_BIT(DDRC ,copy_u8Pin);
     d9e:	a4 e3       	ldi	r26, 0x34	; 52
     da0:	b0 e0       	ldi	r27, 0x00	; 0
     da2:	e4 e3       	ldi	r30, 0x34	; 52
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	80 81       	ld	r24, Z
     da8:	48 2f       	mov	r20, r24
     daa:	8a 81       	ldd	r24, Y+2	; 0x02
     dac:	28 2f       	mov	r18, r24
     dae:	30 e0       	ldi	r19, 0x00	; 0
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	02 2e       	mov	r0, r18
     db6:	02 c0       	rjmp	.+4      	; 0xdbc <GPIO_voidSetPinDDR+0x12c>
     db8:	88 0f       	add	r24, r24
     dba:	99 1f       	adc	r25, r25
     dbc:	0a 94       	dec	r0
     dbe:	e2 f7       	brpl	.-8      	; 0xdb8 <GPIO_voidSetPinDDR+0x128>
     dc0:	84 2b       	or	r24, r20
     dc2:	8c 93       	st	X, r24
     dc4:	40 c0       	rjmp	.+128    	; 0xe46 <GPIO_voidSetPinDDR+0x1b6>
				}
				else {
					CLEAR_BIT(DDRC,copy_u8Pin);
     dc6:	a4 e3       	ldi	r26, 0x34	; 52
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	e4 e3       	ldi	r30, 0x34	; 52
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	80 81       	ld	r24, Z
     dd0:	48 2f       	mov	r20, r24
     dd2:	8a 81       	ldd	r24, Y+2	; 0x02
     dd4:	28 2f       	mov	r18, r24
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	02 2e       	mov	r0, r18
     dde:	02 c0       	rjmp	.+4      	; 0xde4 <GPIO_voidSetPinDDR+0x154>
     de0:	88 0f       	add	r24, r24
     de2:	99 1f       	adc	r25, r25
     de4:	0a 94       	dec	r0
     de6:	e2 f7       	brpl	.-8      	; 0xde0 <GPIO_voidSetPinDDR+0x150>
     de8:	80 95       	com	r24
     dea:	84 23       	and	r24, r20
     dec:	8c 93       	st	X, r24
     dee:	2b c0       	rjmp	.+86     	; 0xe46 <GPIO_voidSetPinDDR+0x1b6>
				}
				break;
			case GPIOD :
				if(copy_u8Mode ==OUTPUT )
     df0:	8b 81       	ldd	r24, Y+3	; 0x03
     df2:	81 30       	cpi	r24, 0x01	; 1
     df4:	a1 f4       	brne	.+40     	; 0xe1e <GPIO_voidSetPinDDR+0x18e>
				{
					SET_BIT(DDRD ,copy_u8Pin);
     df6:	a1 e3       	ldi	r26, 0x31	; 49
     df8:	b0 e0       	ldi	r27, 0x00	; 0
     dfa:	e1 e3       	ldi	r30, 0x31	; 49
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	80 81       	ld	r24, Z
     e00:	48 2f       	mov	r20, r24
     e02:	8a 81       	ldd	r24, Y+2	; 0x02
     e04:	28 2f       	mov	r18, r24
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	02 2e       	mov	r0, r18
     e0e:	02 c0       	rjmp	.+4      	; 0xe14 <GPIO_voidSetPinDDR+0x184>
     e10:	88 0f       	add	r24, r24
     e12:	99 1f       	adc	r25, r25
     e14:	0a 94       	dec	r0
     e16:	e2 f7       	brpl	.-8      	; 0xe10 <GPIO_voidSetPinDDR+0x180>
     e18:	84 2b       	or	r24, r20
     e1a:	8c 93       	st	X, r24
     e1c:	14 c0       	rjmp	.+40     	; 0xe46 <GPIO_voidSetPinDDR+0x1b6>
				}
				else {
					CLEAR_BIT(DDRD,copy_u8Pin);
     e1e:	a1 e3       	ldi	r26, 0x31	; 49
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	e1 e3       	ldi	r30, 0x31	; 49
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
     e28:	48 2f       	mov	r20, r24
     e2a:	8a 81       	ldd	r24, Y+2	; 0x02
     e2c:	28 2f       	mov	r18, r24
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	02 2e       	mov	r0, r18
     e36:	02 c0       	rjmp	.+4      	; 0xe3c <GPIO_voidSetPinDDR+0x1ac>
     e38:	88 0f       	add	r24, r24
     e3a:	99 1f       	adc	r25, r25
     e3c:	0a 94       	dec	r0
     e3e:	e2 f7       	brpl	.-8      	; 0xe38 <GPIO_voidSetPinDDR+0x1a8>
     e40:	80 95       	com	r24
     e42:	84 23       	and	r24, r20
     e44:	8c 93       	st	X, r24
				}
				break;	
			default:
				break;
		}
	}
     e46:	0f 90       	pop	r0
     e48:	0f 90       	pop	r0
     e4a:	0f 90       	pop	r0
     e4c:	0f 90       	pop	r0
     e4e:	0f 90       	pop	r0
     e50:	cf 91       	pop	r28
     e52:	df 91       	pop	r29
     e54:	08 95       	ret

00000e56 <GPIO_voidWritePin>:
	
	void GPIO_voidWritePin (u8  copy_u8Port ,u8 copy_u8Pin , u8 copy_u8Value )
	{
     e56:	df 93       	push	r29
     e58:	cf 93       	push	r28
     e5a:	00 d0       	rcall	.+0      	; 0xe5c <GPIO_voidWritePin+0x6>
     e5c:	00 d0       	rcall	.+0      	; 0xe5e <GPIO_voidWritePin+0x8>
     e5e:	0f 92       	push	r0
     e60:	cd b7       	in	r28, 0x3d	; 61
     e62:	de b7       	in	r29, 0x3e	; 62
     e64:	89 83       	std	Y+1, r24	; 0x01
     e66:	6a 83       	std	Y+2, r22	; 0x02
     e68:	4b 83       	std	Y+3, r20	; 0x03
		switch(copy_u8Port)
     e6a:	89 81       	ldd	r24, Y+1	; 0x01
     e6c:	28 2f       	mov	r18, r24
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	3d 83       	std	Y+5, r19	; 0x05
     e72:	2c 83       	std	Y+4, r18	; 0x04
     e74:	8c 81       	ldd	r24, Y+4	; 0x04
     e76:	9d 81       	ldd	r25, Y+5	; 0x05
     e78:	81 30       	cpi	r24, 0x01	; 1
     e7a:	91 05       	cpc	r25, r1
     e7c:	09 f4       	brne	.+2      	; 0xe80 <GPIO_voidWritePin+0x2a>
     e7e:	43 c0       	rjmp	.+134    	; 0xf06 <GPIO_voidWritePin+0xb0>
     e80:	2c 81       	ldd	r18, Y+4	; 0x04
     e82:	3d 81       	ldd	r19, Y+5	; 0x05
     e84:	22 30       	cpi	r18, 0x02	; 2
     e86:	31 05       	cpc	r19, r1
     e88:	2c f4       	brge	.+10     	; 0xe94 <GPIO_voidWritePin+0x3e>
     e8a:	8c 81       	ldd	r24, Y+4	; 0x04
     e8c:	9d 81       	ldd	r25, Y+5	; 0x05
     e8e:	00 97       	sbiw	r24, 0x00	; 0
     e90:	71 f0       	breq	.+28     	; 0xeae <GPIO_voidWritePin+0x58>
     e92:	bc c0       	rjmp	.+376    	; 0x100c <GPIO_voidWritePin+0x1b6>
     e94:	2c 81       	ldd	r18, Y+4	; 0x04
     e96:	3d 81       	ldd	r19, Y+5	; 0x05
     e98:	22 30       	cpi	r18, 0x02	; 2
     e9a:	31 05       	cpc	r19, r1
     e9c:	09 f4       	brne	.+2      	; 0xea0 <GPIO_voidWritePin+0x4a>
     e9e:	5f c0       	rjmp	.+190    	; 0xf5e <GPIO_voidWritePin+0x108>
     ea0:	8c 81       	ldd	r24, Y+4	; 0x04
     ea2:	9d 81       	ldd	r25, Y+5	; 0x05
     ea4:	83 30       	cpi	r24, 0x03	; 3
     ea6:	91 05       	cpc	r25, r1
     ea8:	09 f4       	brne	.+2      	; 0xeac <GPIO_voidWritePin+0x56>
     eaa:	85 c0       	rjmp	.+266    	; 0xfb6 <GPIO_voidWritePin+0x160>
     eac:	af c0       	rjmp	.+350    	; 0x100c <GPIO_voidWritePin+0x1b6>
		{
			case GPIOA :
				if(copy_u8Value ==HIGH )
     eae:	8b 81       	ldd	r24, Y+3	; 0x03
     eb0:	81 30       	cpi	r24, 0x01	; 1
     eb2:	a1 f4       	brne	.+40     	; 0xedc <GPIO_voidWritePin+0x86>
				{
					SET_BIT(PORTA ,copy_u8Pin);
     eb4:	ab e3       	ldi	r26, 0x3B	; 59
     eb6:	b0 e0       	ldi	r27, 0x00	; 0
     eb8:	eb e3       	ldi	r30, 0x3B	; 59
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	48 2f       	mov	r20, r24
     ec0:	8a 81       	ldd	r24, Y+2	; 0x02
     ec2:	28 2f       	mov	r18, r24
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	02 2e       	mov	r0, r18
     ecc:	02 c0       	rjmp	.+4      	; 0xed2 <GPIO_voidWritePin+0x7c>
     ece:	88 0f       	add	r24, r24
     ed0:	99 1f       	adc	r25, r25
     ed2:	0a 94       	dec	r0
     ed4:	e2 f7       	brpl	.-8      	; 0xece <GPIO_voidWritePin+0x78>
     ed6:	84 2b       	or	r24, r20
     ed8:	8c 93       	st	X, r24
     eda:	98 c0       	rjmp	.+304    	; 0x100c <GPIO_voidWritePin+0x1b6>
				}
				else {
					CLEAR_BIT(PORTA,copy_u8Pin);
     edc:	ab e3       	ldi	r26, 0x3B	; 59
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	eb e3       	ldi	r30, 0x3B	; 59
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	48 2f       	mov	r20, r24
     ee8:	8a 81       	ldd	r24, Y+2	; 0x02
     eea:	28 2f       	mov	r18, r24
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	02 2e       	mov	r0, r18
     ef4:	02 c0       	rjmp	.+4      	; 0xefa <GPIO_voidWritePin+0xa4>
     ef6:	88 0f       	add	r24, r24
     ef8:	99 1f       	adc	r25, r25
     efa:	0a 94       	dec	r0
     efc:	e2 f7       	brpl	.-8      	; 0xef6 <GPIO_voidWritePin+0xa0>
     efe:	80 95       	com	r24
     f00:	84 23       	and	r24, r20
     f02:	8c 93       	st	X, r24
     f04:	83 c0       	rjmp	.+262    	; 0x100c <GPIO_voidWritePin+0x1b6>
				}
				break;
			case GPIOB :
				if(copy_u8Value ==HIGH )
     f06:	8b 81       	ldd	r24, Y+3	; 0x03
     f08:	81 30       	cpi	r24, 0x01	; 1
     f0a:	a1 f4       	brne	.+40     	; 0xf34 <GPIO_voidWritePin+0xde>
				{
					SET_BIT(PORTB ,copy_u8Pin);
     f0c:	a8 e3       	ldi	r26, 0x38	; 56
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	e8 e3       	ldi	r30, 0x38	; 56
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	48 2f       	mov	r20, r24
     f18:	8a 81       	ldd	r24, Y+2	; 0x02
     f1a:	28 2f       	mov	r18, r24
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	02 2e       	mov	r0, r18
     f24:	02 c0       	rjmp	.+4      	; 0xf2a <GPIO_voidWritePin+0xd4>
     f26:	88 0f       	add	r24, r24
     f28:	99 1f       	adc	r25, r25
     f2a:	0a 94       	dec	r0
     f2c:	e2 f7       	brpl	.-8      	; 0xf26 <GPIO_voidWritePin+0xd0>
     f2e:	84 2b       	or	r24, r20
     f30:	8c 93       	st	X, r24
     f32:	6c c0       	rjmp	.+216    	; 0x100c <GPIO_voidWritePin+0x1b6>
				}
				else {
					CLEAR_BIT(PORTB,copy_u8Pin);
     f34:	a8 e3       	ldi	r26, 0x38	; 56
     f36:	b0 e0       	ldi	r27, 0x00	; 0
     f38:	e8 e3       	ldi	r30, 0x38	; 56
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	80 81       	ld	r24, Z
     f3e:	48 2f       	mov	r20, r24
     f40:	8a 81       	ldd	r24, Y+2	; 0x02
     f42:	28 2f       	mov	r18, r24
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	02 2e       	mov	r0, r18
     f4c:	02 c0       	rjmp	.+4      	; 0xf52 <GPIO_voidWritePin+0xfc>
     f4e:	88 0f       	add	r24, r24
     f50:	99 1f       	adc	r25, r25
     f52:	0a 94       	dec	r0
     f54:	e2 f7       	brpl	.-8      	; 0xf4e <GPIO_voidWritePin+0xf8>
     f56:	80 95       	com	r24
     f58:	84 23       	and	r24, r20
     f5a:	8c 93       	st	X, r24
     f5c:	57 c0       	rjmp	.+174    	; 0x100c <GPIO_voidWritePin+0x1b6>
				}
				break;
			case GPIOC :
				if(copy_u8Value ==HIGH )
     f5e:	8b 81       	ldd	r24, Y+3	; 0x03
     f60:	81 30       	cpi	r24, 0x01	; 1
     f62:	a1 f4       	brne	.+40     	; 0xf8c <GPIO_voidWritePin+0x136>
				{
					SET_BIT(PORTC ,copy_u8Pin);
     f64:	a5 e3       	ldi	r26, 0x35	; 53
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	e5 e3       	ldi	r30, 0x35	; 53
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	48 2f       	mov	r20, r24
     f70:	8a 81       	ldd	r24, Y+2	; 0x02
     f72:	28 2f       	mov	r18, r24
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	02 2e       	mov	r0, r18
     f7c:	02 c0       	rjmp	.+4      	; 0xf82 <GPIO_voidWritePin+0x12c>
     f7e:	88 0f       	add	r24, r24
     f80:	99 1f       	adc	r25, r25
     f82:	0a 94       	dec	r0
     f84:	e2 f7       	brpl	.-8      	; 0xf7e <GPIO_voidWritePin+0x128>
     f86:	84 2b       	or	r24, r20
     f88:	8c 93       	st	X, r24
     f8a:	40 c0       	rjmp	.+128    	; 0x100c <GPIO_voidWritePin+0x1b6>
				}
				else {
					CLEAR_BIT(PORTC,copy_u8Pin);
     f8c:	a5 e3       	ldi	r26, 0x35	; 53
     f8e:	b0 e0       	ldi	r27, 0x00	; 0
     f90:	e5 e3       	ldi	r30, 0x35	; 53
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	48 2f       	mov	r20, r24
     f98:	8a 81       	ldd	r24, Y+2	; 0x02
     f9a:	28 2f       	mov	r18, r24
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	02 2e       	mov	r0, r18
     fa4:	02 c0       	rjmp	.+4      	; 0xfaa <GPIO_voidWritePin+0x154>
     fa6:	88 0f       	add	r24, r24
     fa8:	99 1f       	adc	r25, r25
     faa:	0a 94       	dec	r0
     fac:	e2 f7       	brpl	.-8      	; 0xfa6 <GPIO_voidWritePin+0x150>
     fae:	80 95       	com	r24
     fb0:	84 23       	and	r24, r20
     fb2:	8c 93       	st	X, r24
     fb4:	2b c0       	rjmp	.+86     	; 0x100c <GPIO_voidWritePin+0x1b6>
				}
				break;
			case GPIOD :
				if(copy_u8Value == HIGH )
     fb6:	8b 81       	ldd	r24, Y+3	; 0x03
     fb8:	81 30       	cpi	r24, 0x01	; 1
     fba:	a1 f4       	brne	.+40     	; 0xfe4 <GPIO_voidWritePin+0x18e>
				{
					SET_BIT(PORTD ,copy_u8Pin);
     fbc:	a2 e3       	ldi	r26, 0x32	; 50
     fbe:	b0 e0       	ldi	r27, 0x00	; 0
     fc0:	e2 e3       	ldi	r30, 0x32	; 50
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	80 81       	ld	r24, Z
     fc6:	48 2f       	mov	r20, r24
     fc8:	8a 81       	ldd	r24, Y+2	; 0x02
     fca:	28 2f       	mov	r18, r24
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	02 2e       	mov	r0, r18
     fd4:	02 c0       	rjmp	.+4      	; 0xfda <GPIO_voidWritePin+0x184>
     fd6:	88 0f       	add	r24, r24
     fd8:	99 1f       	adc	r25, r25
     fda:	0a 94       	dec	r0
     fdc:	e2 f7       	brpl	.-8      	; 0xfd6 <GPIO_voidWritePin+0x180>
     fde:	84 2b       	or	r24, r20
     fe0:	8c 93       	st	X, r24
     fe2:	14 c0       	rjmp	.+40     	; 0x100c <GPIO_voidWritePin+0x1b6>
				}
				else {
					CLEAR_BIT(PORTD,copy_u8Pin);
     fe4:	a2 e3       	ldi	r26, 0x32	; 50
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	e2 e3       	ldi	r30, 0x32	; 50
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	48 2f       	mov	r20, r24
     ff0:	8a 81       	ldd	r24, Y+2	; 0x02
     ff2:	28 2f       	mov	r18, r24
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	02 2e       	mov	r0, r18
     ffc:	02 c0       	rjmp	.+4      	; 0x1002 <GPIO_voidWritePin+0x1ac>
     ffe:	88 0f       	add	r24, r24
    1000:	99 1f       	adc	r25, r25
    1002:	0a 94       	dec	r0
    1004:	e2 f7       	brpl	.-8      	; 0xffe <GPIO_voidWritePin+0x1a8>
    1006:	80 95       	com	r24
    1008:	84 23       	and	r24, r20
    100a:	8c 93       	st	X, r24
				break;	
			default:
				break;
		}
		
	}
    100c:	0f 90       	pop	r0
    100e:	0f 90       	pop	r0
    1010:	0f 90       	pop	r0
    1012:	0f 90       	pop	r0
    1014:	0f 90       	pop	r0
    1016:	cf 91       	pop	r28
    1018:	df 91       	pop	r29
    101a:	08 95       	ret

0000101c <GPIO_u8ReadPin>:
	
	u8	GPIO_u8ReadPin(	u8  copy_u8Port ,u8 copy_u8Pin )
	{
    101c:	df 93       	push	r29
    101e:	cf 93       	push	r28
    1020:	00 d0       	rcall	.+0      	; 0x1022 <GPIO_u8ReadPin+0x6>
    1022:	00 d0       	rcall	.+0      	; 0x1024 <GPIO_u8ReadPin+0x8>
    1024:	0f 92       	push	r0
    1026:	cd b7       	in	r28, 0x3d	; 61
    1028:	de b7       	in	r29, 0x3e	; 62
    102a:	8a 83       	std	Y+2, r24	; 0x02
    102c:	6b 83       	std	Y+3, r22	; 0x03
		u8 Local_u8ReturnValue ;
		switch(copy_u8Port){
    102e:	8a 81       	ldd	r24, Y+2	; 0x02
    1030:	28 2f       	mov	r18, r24
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	3d 83       	std	Y+5, r19	; 0x05
    1036:	2c 83       	std	Y+4, r18	; 0x04
    1038:	4c 81       	ldd	r20, Y+4	; 0x04
    103a:	5d 81       	ldd	r21, Y+5	; 0x05
    103c:	41 30       	cpi	r20, 0x01	; 1
    103e:	51 05       	cpc	r21, r1
    1040:	b1 f1       	breq	.+108    	; 0x10ae <GPIO_u8ReadPin+0x92>
    1042:	8c 81       	ldd	r24, Y+4	; 0x04
    1044:	9d 81       	ldd	r25, Y+5	; 0x05
    1046:	82 30       	cpi	r24, 0x02	; 2
    1048:	91 05       	cpc	r25, r1
    104a:	34 f4       	brge	.+12     	; 0x1058 <GPIO_u8ReadPin+0x3c>
    104c:	2c 81       	ldd	r18, Y+4	; 0x04
    104e:	3d 81       	ldd	r19, Y+5	; 0x05
    1050:	21 15       	cp	r18, r1
    1052:	31 05       	cpc	r19, r1
    1054:	71 f0       	breq	.+28     	; 0x1072 <GPIO_u8ReadPin+0x56>
    1056:	84 c0       	rjmp	.+264    	; 0x1160 <GPIO_u8ReadPin+0x144>
    1058:	4c 81       	ldd	r20, Y+4	; 0x04
    105a:	5d 81       	ldd	r21, Y+5	; 0x05
    105c:	42 30       	cpi	r20, 0x02	; 2
    105e:	51 05       	cpc	r21, r1
    1060:	09 f4       	brne	.+2      	; 0x1064 <GPIO_u8ReadPin+0x48>
    1062:	43 c0       	rjmp	.+134    	; 0x10ea <GPIO_u8ReadPin+0xce>
    1064:	8c 81       	ldd	r24, Y+4	; 0x04
    1066:	9d 81       	ldd	r25, Y+5	; 0x05
    1068:	83 30       	cpi	r24, 0x03	; 3
    106a:	91 05       	cpc	r25, r1
    106c:	09 f4       	brne	.+2      	; 0x1070 <GPIO_u8ReadPin+0x54>
    106e:	5b c0       	rjmp	.+182    	; 0x1126 <GPIO_u8ReadPin+0x10a>
    1070:	77 c0       	rjmp	.+238    	; 0x1160 <GPIO_u8ReadPin+0x144>
			case GPIOA :
				Local_u8ReturnValue = GET_BIT(PINA,copy_u8Pin);
    1072:	e9 e3       	ldi	r30, 0x39	; 57
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	48 2f       	mov	r20, r24
    107a:	50 e0       	ldi	r21, 0x00	; 0
    107c:	8b 81       	ldd	r24, Y+3	; 0x03
    107e:	28 2f       	mov	r18, r24
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	02 c0       	rjmp	.+4      	; 0x108c <GPIO_u8ReadPin+0x70>
    1088:	88 0f       	add	r24, r24
    108a:	99 1f       	adc	r25, r25
    108c:	2a 95       	dec	r18
    108e:	e2 f7       	brpl	.-8      	; 0x1088 <GPIO_u8ReadPin+0x6c>
    1090:	9a 01       	movw	r18, r20
    1092:	28 23       	and	r18, r24
    1094:	39 23       	and	r19, r25
    1096:	8b 81       	ldd	r24, Y+3	; 0x03
    1098:	88 2f       	mov	r24, r24
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	a9 01       	movw	r20, r18
    109e:	02 c0       	rjmp	.+4      	; 0x10a4 <GPIO_u8ReadPin+0x88>
    10a0:	55 95       	asr	r21
    10a2:	47 95       	ror	r20
    10a4:	8a 95       	dec	r24
    10a6:	e2 f7       	brpl	.-8      	; 0x10a0 <GPIO_u8ReadPin+0x84>
    10a8:	ca 01       	movw	r24, r20
    10aa:	89 83       	std	Y+1, r24	; 0x01
    10ac:	59 c0       	rjmp	.+178    	; 0x1160 <GPIO_u8ReadPin+0x144>
				break ;
			case GPIOB :
				Local_u8ReturnValue = GET_BIT(PINB,copy_u8Pin);
    10ae:	e6 e3       	ldi	r30, 0x36	; 54
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	48 2f       	mov	r20, r24
    10b6:	50 e0       	ldi	r21, 0x00	; 0
    10b8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ba:	28 2f       	mov	r18, r24
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	02 c0       	rjmp	.+4      	; 0x10c8 <GPIO_u8ReadPin+0xac>
    10c4:	88 0f       	add	r24, r24
    10c6:	99 1f       	adc	r25, r25
    10c8:	2a 95       	dec	r18
    10ca:	e2 f7       	brpl	.-8      	; 0x10c4 <GPIO_u8ReadPin+0xa8>
    10cc:	9a 01       	movw	r18, r20
    10ce:	28 23       	and	r18, r24
    10d0:	39 23       	and	r19, r25
    10d2:	8b 81       	ldd	r24, Y+3	; 0x03
    10d4:	88 2f       	mov	r24, r24
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	a9 01       	movw	r20, r18
    10da:	02 c0       	rjmp	.+4      	; 0x10e0 <GPIO_u8ReadPin+0xc4>
    10dc:	55 95       	asr	r21
    10de:	47 95       	ror	r20
    10e0:	8a 95       	dec	r24
    10e2:	e2 f7       	brpl	.-8      	; 0x10dc <GPIO_u8ReadPin+0xc0>
    10e4:	ca 01       	movw	r24, r20
    10e6:	89 83       	std	Y+1, r24	; 0x01
    10e8:	3b c0       	rjmp	.+118    	; 0x1160 <GPIO_u8ReadPin+0x144>
				break ;
			case GPIOC :
				Local_u8ReturnValue = GET_BIT(PINC,copy_u8Pin);
    10ea:	e3 e3       	ldi	r30, 0x33	; 51
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	80 81       	ld	r24, Z
    10f0:	48 2f       	mov	r20, r24
    10f2:	50 e0       	ldi	r21, 0x00	; 0
    10f4:	8b 81       	ldd	r24, Y+3	; 0x03
    10f6:	28 2f       	mov	r18, r24
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	02 c0       	rjmp	.+4      	; 0x1104 <GPIO_u8ReadPin+0xe8>
    1100:	88 0f       	add	r24, r24
    1102:	99 1f       	adc	r25, r25
    1104:	2a 95       	dec	r18
    1106:	e2 f7       	brpl	.-8      	; 0x1100 <GPIO_u8ReadPin+0xe4>
    1108:	9a 01       	movw	r18, r20
    110a:	28 23       	and	r18, r24
    110c:	39 23       	and	r19, r25
    110e:	8b 81       	ldd	r24, Y+3	; 0x03
    1110:	88 2f       	mov	r24, r24
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	a9 01       	movw	r20, r18
    1116:	02 c0       	rjmp	.+4      	; 0x111c <GPIO_u8ReadPin+0x100>
    1118:	55 95       	asr	r21
    111a:	47 95       	ror	r20
    111c:	8a 95       	dec	r24
    111e:	e2 f7       	brpl	.-8      	; 0x1118 <GPIO_u8ReadPin+0xfc>
    1120:	ca 01       	movw	r24, r20
    1122:	89 83       	std	Y+1, r24	; 0x01
    1124:	1d c0       	rjmp	.+58     	; 0x1160 <GPIO_u8ReadPin+0x144>
				break ;
			case GPIOD :
				Local_u8ReturnValue = GET_BIT(PIND,copy_u8Pin);
    1126:	e0 e3       	ldi	r30, 0x30	; 48
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	48 2f       	mov	r20, r24
    112e:	50 e0       	ldi	r21, 0x00	; 0
    1130:	8b 81       	ldd	r24, Y+3	; 0x03
    1132:	28 2f       	mov	r18, r24
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	02 c0       	rjmp	.+4      	; 0x1140 <GPIO_u8ReadPin+0x124>
    113c:	88 0f       	add	r24, r24
    113e:	99 1f       	adc	r25, r25
    1140:	2a 95       	dec	r18
    1142:	e2 f7       	brpl	.-8      	; 0x113c <GPIO_u8ReadPin+0x120>
    1144:	9a 01       	movw	r18, r20
    1146:	28 23       	and	r18, r24
    1148:	39 23       	and	r19, r25
    114a:	8b 81       	ldd	r24, Y+3	; 0x03
    114c:	88 2f       	mov	r24, r24
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	a9 01       	movw	r20, r18
    1152:	02 c0       	rjmp	.+4      	; 0x1158 <GPIO_u8ReadPin+0x13c>
    1154:	55 95       	asr	r21
    1156:	47 95       	ror	r20
    1158:	8a 95       	dec	r24
    115a:	e2 f7       	brpl	.-8      	; 0x1154 <GPIO_u8ReadPin+0x138>
    115c:	ca 01       	movw	r24, r20
    115e:	89 83       	std	Y+1, r24	; 0x01
				break ;
			default:
			break;
		}
		return Local_u8ReturnValue ;
    1160:	89 81       	ldd	r24, Y+1	; 0x01
		
	}
    1162:	0f 90       	pop	r0
    1164:	0f 90       	pop	r0
    1166:	0f 90       	pop	r0
    1168:	0f 90       	pop	r0
    116a:	0f 90       	pop	r0
    116c:	cf 91       	pop	r28
    116e:	df 91       	pop	r29
    1170:	08 95       	ret

00001172 <GPIO_voidTogPin>:
	
	void GPIO_voidTogPin 	( u8 copy_u8Port , u8 copy_u8Pin )
	{
    1172:	df 93       	push	r29
    1174:	cf 93       	push	r28
    1176:	00 d0       	rcall	.+0      	; 0x1178 <GPIO_voidTogPin+0x6>
    1178:	00 d0       	rcall	.+0      	; 0x117a <GPIO_voidTogPin+0x8>
    117a:	cd b7       	in	r28, 0x3d	; 61
    117c:	de b7       	in	r29, 0x3e	; 62
    117e:	89 83       	std	Y+1, r24	; 0x01
    1180:	6a 83       	std	Y+2, r22	; 0x02
		switch(copy_u8Port){
    1182:	89 81       	ldd	r24, Y+1	; 0x01
    1184:	28 2f       	mov	r18, r24
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	3c 83       	std	Y+4, r19	; 0x04
    118a:	2b 83       	std	Y+3, r18	; 0x03
    118c:	8b 81       	ldd	r24, Y+3	; 0x03
    118e:	9c 81       	ldd	r25, Y+4	; 0x04
    1190:	81 30       	cpi	r24, 0x01	; 1
    1192:	91 05       	cpc	r25, r1
    1194:	49 f1       	breq	.+82     	; 0x11e8 <GPIO_voidTogPin+0x76>
    1196:	2b 81       	ldd	r18, Y+3	; 0x03
    1198:	3c 81       	ldd	r19, Y+4	; 0x04
    119a:	22 30       	cpi	r18, 0x02	; 2
    119c:	31 05       	cpc	r19, r1
    119e:	2c f4       	brge	.+10     	; 0x11aa <GPIO_voidTogPin+0x38>
    11a0:	8b 81       	ldd	r24, Y+3	; 0x03
    11a2:	9c 81       	ldd	r25, Y+4	; 0x04
    11a4:	00 97       	sbiw	r24, 0x00	; 0
    11a6:	61 f0       	breq	.+24     	; 0x11c0 <GPIO_voidTogPin+0x4e>
    11a8:	5a c0       	rjmp	.+180    	; 0x125e <GPIO_voidTogPin+0xec>
    11aa:	2b 81       	ldd	r18, Y+3	; 0x03
    11ac:	3c 81       	ldd	r19, Y+4	; 0x04
    11ae:	22 30       	cpi	r18, 0x02	; 2
    11b0:	31 05       	cpc	r19, r1
    11b2:	71 f1       	breq	.+92     	; 0x1210 <GPIO_voidTogPin+0x9e>
    11b4:	8b 81       	ldd	r24, Y+3	; 0x03
    11b6:	9c 81       	ldd	r25, Y+4	; 0x04
    11b8:	83 30       	cpi	r24, 0x03	; 3
    11ba:	91 05       	cpc	r25, r1
    11bc:	e9 f1       	breq	.+122    	; 0x1238 <GPIO_voidTogPin+0xc6>
    11be:	4f c0       	rjmp	.+158    	; 0x125e <GPIO_voidTogPin+0xec>
			case GPIOA :
				TOG_BIT(PORTA,copy_u8Pin);
    11c0:	ab e3       	ldi	r26, 0x3B	; 59
    11c2:	b0 e0       	ldi	r27, 0x00	; 0
    11c4:	eb e3       	ldi	r30, 0x3B	; 59
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	80 81       	ld	r24, Z
    11ca:	48 2f       	mov	r20, r24
    11cc:	8a 81       	ldd	r24, Y+2	; 0x02
    11ce:	28 2f       	mov	r18, r24
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	02 2e       	mov	r0, r18
    11d8:	02 c0       	rjmp	.+4      	; 0x11de <GPIO_voidTogPin+0x6c>
    11da:	88 0f       	add	r24, r24
    11dc:	99 1f       	adc	r25, r25
    11de:	0a 94       	dec	r0
    11e0:	e2 f7       	brpl	.-8      	; 0x11da <GPIO_voidTogPin+0x68>
    11e2:	84 27       	eor	r24, r20
    11e4:	8c 93       	st	X, r24
    11e6:	3b c0       	rjmp	.+118    	; 0x125e <GPIO_voidTogPin+0xec>
				break ;             
			case GPIOB :            
				TOG_BIT(PORTB,copy_u8Pin);
    11e8:	a8 e3       	ldi	r26, 0x38	; 56
    11ea:	b0 e0       	ldi	r27, 0x00	; 0
    11ec:	e8 e3       	ldi	r30, 0x38	; 56
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	48 2f       	mov	r20, r24
    11f4:	8a 81       	ldd	r24, Y+2	; 0x02
    11f6:	28 2f       	mov	r18, r24
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	02 2e       	mov	r0, r18
    1200:	02 c0       	rjmp	.+4      	; 0x1206 <GPIO_voidTogPin+0x94>
    1202:	88 0f       	add	r24, r24
    1204:	99 1f       	adc	r25, r25
    1206:	0a 94       	dec	r0
    1208:	e2 f7       	brpl	.-8      	; 0x1202 <GPIO_voidTogPin+0x90>
    120a:	84 27       	eor	r24, r20
    120c:	8c 93       	st	X, r24
    120e:	27 c0       	rjmp	.+78     	; 0x125e <GPIO_voidTogPin+0xec>
				break ;             
			case GPIOC :            
				TOG_BIT(PORTC,copy_u8Pin);
    1210:	a5 e3       	ldi	r26, 0x35	; 53
    1212:	b0 e0       	ldi	r27, 0x00	; 0
    1214:	e5 e3       	ldi	r30, 0x35	; 53
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	48 2f       	mov	r20, r24
    121c:	8a 81       	ldd	r24, Y+2	; 0x02
    121e:	28 2f       	mov	r18, r24
    1220:	30 e0       	ldi	r19, 0x00	; 0
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	02 2e       	mov	r0, r18
    1228:	02 c0       	rjmp	.+4      	; 0x122e <GPIO_voidTogPin+0xbc>
    122a:	88 0f       	add	r24, r24
    122c:	99 1f       	adc	r25, r25
    122e:	0a 94       	dec	r0
    1230:	e2 f7       	brpl	.-8      	; 0x122a <GPIO_voidTogPin+0xb8>
    1232:	84 27       	eor	r24, r20
    1234:	8c 93       	st	X, r24
    1236:	13 c0       	rjmp	.+38     	; 0x125e <GPIO_voidTogPin+0xec>
				break ;             
			case GPIOD : 
				TOG_BIT(PORTD,copy_u8Pin);
    1238:	a2 e3       	ldi	r26, 0x32	; 50
    123a:	b0 e0       	ldi	r27, 0x00	; 0
    123c:	e2 e3       	ldi	r30, 0x32	; 50
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	80 81       	ld	r24, Z
    1242:	48 2f       	mov	r20, r24
    1244:	8a 81       	ldd	r24, Y+2	; 0x02
    1246:	28 2f       	mov	r18, r24
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	02 2e       	mov	r0, r18
    1250:	02 c0       	rjmp	.+4      	; 0x1256 <GPIO_voidTogPin+0xe4>
    1252:	88 0f       	add	r24, r24
    1254:	99 1f       	adc	r25, r25
    1256:	0a 94       	dec	r0
    1258:	e2 f7       	brpl	.-8      	; 0x1252 <GPIO_voidTogPin+0xe0>
    125a:	84 27       	eor	r24, r20
    125c:	8c 93       	st	X, r24
			default:
			break;
		}
		
		
	}
    125e:	0f 90       	pop	r0
    1260:	0f 90       	pop	r0
    1262:	0f 90       	pop	r0
    1264:	0f 90       	pop	r0
    1266:	cf 91       	pop	r28
    1268:	df 91       	pop	r29
    126a:	08 95       	ret

0000126c <GPIO_voidSetPortDDR>:
	void GPIO_voidSetPortDDR (u8  copy_u8Port , u8 copy_u8Mode )
	{
    126c:	df 93       	push	r29
    126e:	cf 93       	push	r28
    1270:	00 d0       	rcall	.+0      	; 0x1272 <GPIO_voidSetPortDDR+0x6>
    1272:	00 d0       	rcall	.+0      	; 0x1274 <GPIO_voidSetPortDDR+0x8>
    1274:	cd b7       	in	r28, 0x3d	; 61
    1276:	de b7       	in	r29, 0x3e	; 62
    1278:	89 83       	std	Y+1, r24	; 0x01
    127a:	6a 83       	std	Y+2, r22	; 0x02
		switch(copy_u8Port)
    127c:	89 81       	ldd	r24, Y+1	; 0x01
    127e:	28 2f       	mov	r18, r24
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	3c 83       	std	Y+4, r19	; 0x04
    1284:	2b 83       	std	Y+3, r18	; 0x03
    1286:	8b 81       	ldd	r24, Y+3	; 0x03
    1288:	9c 81       	ldd	r25, Y+4	; 0x04
    128a:	81 30       	cpi	r24, 0x01	; 1
    128c:	91 05       	cpc	r25, r1
    128e:	09 f1       	breq	.+66     	; 0x12d2 <GPIO_voidSetPortDDR+0x66>
    1290:	2b 81       	ldd	r18, Y+3	; 0x03
    1292:	3c 81       	ldd	r19, Y+4	; 0x04
    1294:	22 30       	cpi	r18, 0x02	; 2
    1296:	31 05       	cpc	r19, r1
    1298:	2c f4       	brge	.+10     	; 0x12a4 <GPIO_voidSetPortDDR+0x38>
    129a:	8b 81       	ldd	r24, Y+3	; 0x03
    129c:	9c 81       	ldd	r25, Y+4	; 0x04
    129e:	00 97       	sbiw	r24, 0x00	; 0
    12a0:	61 f0       	breq	.+24     	; 0x12ba <GPIO_voidSetPortDDR+0x4e>
    12a2:	3a c0       	rjmp	.+116    	; 0x1318 <GPIO_voidSetPortDDR+0xac>
    12a4:	2b 81       	ldd	r18, Y+3	; 0x03
    12a6:	3c 81       	ldd	r19, Y+4	; 0x04
    12a8:	22 30       	cpi	r18, 0x02	; 2
    12aa:	31 05       	cpc	r19, r1
    12ac:	f1 f0       	breq	.+60     	; 0x12ea <GPIO_voidSetPortDDR+0x7e>
    12ae:	8b 81       	ldd	r24, Y+3	; 0x03
    12b0:	9c 81       	ldd	r25, Y+4	; 0x04
    12b2:	83 30       	cpi	r24, 0x03	; 3
    12b4:	91 05       	cpc	r25, r1
    12b6:	29 f1       	breq	.+74     	; 0x1302 <GPIO_voidSetPortDDR+0x96>
    12b8:	2f c0       	rjmp	.+94     	; 0x1318 <GPIO_voidSetPortDDR+0xac>
		{
			case GPIOA :
				if(copy_u8Mode ==OUTPUT )
    12ba:	8a 81       	ldd	r24, Y+2	; 0x02
    12bc:	81 30       	cpi	r24, 0x01	; 1
    12be:	29 f4       	brne	.+10     	; 0x12ca <GPIO_voidSetPortDDR+0x5e>
				{
					DDRA= 0xFF;
    12c0:	ea e3       	ldi	r30, 0x3A	; 58
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	8f ef       	ldi	r24, 0xFF	; 255
    12c6:	80 83       	st	Z, r24
    12c8:	27 c0       	rjmp	.+78     	; 0x1318 <GPIO_voidSetPortDDR+0xac>
				}
				else {
					DDRA = 0x00 ;
    12ca:	ea e3       	ldi	r30, 0x3A	; 58
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	10 82       	st	Z, r1
    12d0:	23 c0       	rjmp	.+70     	; 0x1318 <GPIO_voidSetPortDDR+0xac>
				}
				break;
			case GPIOB :
				if(copy_u8Mode ==OUTPUT )
    12d2:	8a 81       	ldd	r24, Y+2	; 0x02
    12d4:	81 30       	cpi	r24, 0x01	; 1
    12d6:	29 f4       	brne	.+10     	; 0x12e2 <GPIO_voidSetPortDDR+0x76>
				{
					DDRB = 0xFF;
    12d8:	e7 e3       	ldi	r30, 0x37	; 55
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	8f ef       	ldi	r24, 0xFF	; 255
    12de:	80 83       	st	Z, r24
    12e0:	1b c0       	rjmp	.+54     	; 0x1318 <GPIO_voidSetPortDDR+0xac>
				}
				else {
					DDRB = 0x00;
    12e2:	e7 e3       	ldi	r30, 0x37	; 55
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	10 82       	st	Z, r1
    12e8:	17 c0       	rjmp	.+46     	; 0x1318 <GPIO_voidSetPortDDR+0xac>
				}
				break;
			case GPIOC :
				if(copy_u8Mode ==OUTPUT )
    12ea:	8a 81       	ldd	r24, Y+2	; 0x02
    12ec:	81 30       	cpi	r24, 0x01	; 1
    12ee:	29 f4       	brne	.+10     	; 0x12fa <GPIO_voidSetPortDDR+0x8e>
				{
					DDRC = 0xFF ;
    12f0:	e4 e3       	ldi	r30, 0x34	; 52
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	8f ef       	ldi	r24, 0xFF	; 255
    12f6:	80 83       	st	Z, r24
    12f8:	0f c0       	rjmp	.+30     	; 0x1318 <GPIO_voidSetPortDDR+0xac>
				}
				else {
					DDRC = 0x00 ;
    12fa:	e4 e3       	ldi	r30, 0x34	; 52
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	10 82       	st	Z, r1
    1300:	0b c0       	rjmp	.+22     	; 0x1318 <GPIO_voidSetPortDDR+0xac>
				}
				break;
			case GPIOD :
				if(copy_u8Mode ==OUTPUT )
    1302:	8a 81       	ldd	r24, Y+2	; 0x02
    1304:	81 30       	cpi	r24, 0x01	; 1
    1306:	29 f4       	brne	.+10     	; 0x1312 <GPIO_voidSetPortDDR+0xa6>
				{
					DDRD = 0xFF;
    1308:	e1 e3       	ldi	r30, 0x31	; 49
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	8f ef       	ldi	r24, 0xFF	; 255
    130e:	80 83       	st	Z, r24
    1310:	03 c0       	rjmp	.+6      	; 0x1318 <GPIO_voidSetPortDDR+0xac>
				}
				else {
					DDRD = 0x00;
    1312:	e1 e3       	ldi	r30, 0x31	; 49
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	10 82       	st	Z, r1
				}
				break;	
			default:
				break;
		}
	}
    1318:	0f 90       	pop	r0
    131a:	0f 90       	pop	r0
    131c:	0f 90       	pop	r0
    131e:	0f 90       	pop	r0
    1320:	cf 91       	pop	r28
    1322:	df 91       	pop	r29
    1324:	08 95       	ret

00001326 <GPIO_voidWritePort>:
	void	GPIO_voidWritePort (u8 copy_u8Port , u8 copy_u8Value)
	{
    1326:	df 93       	push	r29
    1328:	cf 93       	push	r28
    132a:	00 d0       	rcall	.+0      	; 0x132c <GPIO_voidWritePort+0x6>
    132c:	00 d0       	rcall	.+0      	; 0x132e <GPIO_voidWritePort+0x8>
    132e:	cd b7       	in	r28, 0x3d	; 61
    1330:	de b7       	in	r29, 0x3e	; 62
    1332:	89 83       	std	Y+1, r24	; 0x01
    1334:	6a 83       	std	Y+2, r22	; 0x02
			switch(copy_u8Port)
    1336:	89 81       	ldd	r24, Y+1	; 0x01
    1338:	28 2f       	mov	r18, r24
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	3c 83       	std	Y+4, r19	; 0x04
    133e:	2b 83       	std	Y+3, r18	; 0x03
    1340:	8b 81       	ldd	r24, Y+3	; 0x03
    1342:	9c 81       	ldd	r25, Y+4	; 0x04
    1344:	81 30       	cpi	r24, 0x01	; 1
    1346:	91 05       	cpc	r25, r1
    1348:	d1 f0       	breq	.+52     	; 0x137e <GPIO_voidWritePort+0x58>
    134a:	2b 81       	ldd	r18, Y+3	; 0x03
    134c:	3c 81       	ldd	r19, Y+4	; 0x04
    134e:	22 30       	cpi	r18, 0x02	; 2
    1350:	31 05       	cpc	r19, r1
    1352:	2c f4       	brge	.+10     	; 0x135e <GPIO_voidWritePort+0x38>
    1354:	8b 81       	ldd	r24, Y+3	; 0x03
    1356:	9c 81       	ldd	r25, Y+4	; 0x04
    1358:	00 97       	sbiw	r24, 0x00	; 0
    135a:	61 f0       	breq	.+24     	; 0x1374 <GPIO_voidWritePort+0x4e>
    135c:	1e c0       	rjmp	.+60     	; 0x139a <GPIO_voidWritePort+0x74>
    135e:	2b 81       	ldd	r18, Y+3	; 0x03
    1360:	3c 81       	ldd	r19, Y+4	; 0x04
    1362:	22 30       	cpi	r18, 0x02	; 2
    1364:	31 05       	cpc	r19, r1
    1366:	81 f0       	breq	.+32     	; 0x1388 <GPIO_voidWritePort+0x62>
    1368:	8b 81       	ldd	r24, Y+3	; 0x03
    136a:	9c 81       	ldd	r25, Y+4	; 0x04
    136c:	83 30       	cpi	r24, 0x03	; 3
    136e:	91 05       	cpc	r25, r1
    1370:	81 f0       	breq	.+32     	; 0x1392 <GPIO_voidWritePort+0x6c>
    1372:	13 c0       	rjmp	.+38     	; 0x139a <GPIO_voidWritePort+0x74>
		{
			case GPIOA :
				PORTA = copy_u8Value ;
    1374:	eb e3       	ldi	r30, 0x3B	; 59
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	8a 81       	ldd	r24, Y+2	; 0x02
    137a:	80 83       	st	Z, r24
    137c:	0e c0       	rjmp	.+28     	; 0x139a <GPIO_voidWritePort+0x74>
				break;
			case GPIOB :
				PORTB = copy_u8Value;
    137e:	e8 e3       	ldi	r30, 0x38	; 56
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	8a 81       	ldd	r24, Y+2	; 0x02
    1384:	80 83       	st	Z, r24
    1386:	09 c0       	rjmp	.+18     	; 0x139a <GPIO_voidWritePort+0x74>
				break;
			case GPIOC :
				PORTC = copy_u8Value;
    1388:	e5 e3       	ldi	r30, 0x35	; 53
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	8a 81       	ldd	r24, Y+2	; 0x02
    138e:	80 83       	st	Z, r24
    1390:	04 c0       	rjmp	.+8      	; 0x139a <GPIO_voidWritePort+0x74>
				break;
			case GPIOD :
				PORTD = copy_u8Value;
    1392:	e2 e3       	ldi	r30, 0x32	; 50
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	8a 81       	ldd	r24, Y+2	; 0x02
    1398:	80 83       	st	Z, r24
				break;
		}
		
			
			
		}
    139a:	0f 90       	pop	r0
    139c:	0f 90       	pop	r0
    139e:	0f 90       	pop	r0
    13a0:	0f 90       	pop	r0
    13a2:	cf 91       	pop	r28
    13a4:	df 91       	pop	r29
    13a6:	08 95       	ret

000013a8 <GPIO_voidSetLowNippleDDR>:
	void GPIO_voidSetLowNippleDDR(u8 copy_u8Port , u8 copy_u8Mode)
	{
    13a8:	df 93       	push	r29
    13aa:	cf 93       	push	r28
    13ac:	00 d0       	rcall	.+0      	; 0x13ae <GPIO_voidSetLowNippleDDR+0x6>
    13ae:	0f 92       	push	r0
    13b0:	cd b7       	in	r28, 0x3d	; 61
    13b2:	de b7       	in	r29, 0x3e	; 62
    13b4:	8a 83       	std	Y+2, r24	; 0x02
    13b6:	6b 83       	std	Y+3, r22	; 0x03
		u8 i ;
		for (i= 0 ; i<4 ; i++){
    13b8:	19 82       	std	Y+1, r1	; 0x01
    13ba:	08 c0       	rjmp	.+16     	; 0x13cc <GPIO_voidSetLowNippleDDR+0x24>
			GPIO_voidSetPinDDR(copy_u8Port , i ,copy_u8Mode );
    13bc:	8a 81       	ldd	r24, Y+2	; 0x02
    13be:	69 81       	ldd	r22, Y+1	; 0x01
    13c0:	4b 81       	ldd	r20, Y+3	; 0x03
    13c2:	0e 94 48 06 	call	0xc90	; 0xc90 <GPIO_voidSetPinDDR>
			
		}
	void GPIO_voidSetLowNippleDDR(u8 copy_u8Port , u8 copy_u8Mode)
	{
		u8 i ;
		for (i= 0 ; i<4 ; i++){
    13c6:	89 81       	ldd	r24, Y+1	; 0x01
    13c8:	8f 5f       	subi	r24, 0xFF	; 255
    13ca:	89 83       	std	Y+1, r24	; 0x01
    13cc:	89 81       	ldd	r24, Y+1	; 0x01
    13ce:	84 30       	cpi	r24, 0x04	; 4
    13d0:	a8 f3       	brcs	.-22     	; 0x13bc <GPIO_voidSetLowNippleDDR+0x14>
			GPIO_voidSetPinDDR(copy_u8Port , i ,copy_u8Mode );
		}
	}
    13d2:	0f 90       	pop	r0
    13d4:	0f 90       	pop	r0
    13d6:	0f 90       	pop	r0
    13d8:	cf 91       	pop	r28
    13da:	df 91       	pop	r29
    13dc:	08 95       	ret

000013de <GPIO_voidSetHighNippleDDR>:
	void GPIO_voidSetHighNippleDDR(u8 copy_u8Port , u8 copy_u8Mode)
	{
    13de:	df 93       	push	r29
    13e0:	cf 93       	push	r28
    13e2:	00 d0       	rcall	.+0      	; 0x13e4 <GPIO_voidSetHighNippleDDR+0x6>
    13e4:	0f 92       	push	r0
    13e6:	cd b7       	in	r28, 0x3d	; 61
    13e8:	de b7       	in	r29, 0x3e	; 62
    13ea:	8a 83       	std	Y+2, r24	; 0x02
    13ec:	6b 83       	std	Y+3, r22	; 0x03
		u8 i ;
		for (i= 4 ; i<8 ; i++){
    13ee:	84 e0       	ldi	r24, 0x04	; 4
    13f0:	89 83       	std	Y+1, r24	; 0x01
    13f2:	08 c0       	rjmp	.+16     	; 0x1404 <GPIO_voidSetHighNippleDDR+0x26>
			GPIO_voidSetPinDDR(copy_u8Port , i ,copy_u8Mode );
    13f4:	8a 81       	ldd	r24, Y+2	; 0x02
    13f6:	69 81       	ldd	r22, Y+1	; 0x01
    13f8:	4b 81       	ldd	r20, Y+3	; 0x03
    13fa:	0e 94 48 06 	call	0xc90	; 0xc90 <GPIO_voidSetPinDDR>
		}
	}
	void GPIO_voidSetHighNippleDDR(u8 copy_u8Port , u8 copy_u8Mode)
	{
		u8 i ;
		for (i= 4 ; i<8 ; i++){
    13fe:	89 81       	ldd	r24, Y+1	; 0x01
    1400:	8f 5f       	subi	r24, 0xFF	; 255
    1402:	89 83       	std	Y+1, r24	; 0x01
    1404:	89 81       	ldd	r24, Y+1	; 0x01
    1406:	88 30       	cpi	r24, 0x08	; 8
    1408:	a8 f3       	brcs	.-22     	; 0x13f4 <GPIO_voidSetHighNippleDDR+0x16>
			GPIO_voidSetPinDDR(copy_u8Port , i ,copy_u8Mode );
		}
	}
    140a:	0f 90       	pop	r0
    140c:	0f 90       	pop	r0
    140e:	0f 90       	pop	r0
    1410:	cf 91       	pop	r28
    1412:	df 91       	pop	r29
    1414:	08 95       	ret

00001416 <GPIO_voidWriteLowNipple>:
	void GPIO_voidWriteLowNipple (u8 copy_u8Port , u8 copy_u8Value )
	{
    1416:	df 93       	push	r29
    1418:	cf 93       	push	r28
    141a:	00 d0       	rcall	.+0      	; 0x141c <GPIO_voidWriteLowNipple+0x6>
    141c:	00 d0       	rcall	.+0      	; 0x141e <GPIO_voidWriteLowNipple+0x8>
    141e:	cd b7       	in	r28, 0x3d	; 61
    1420:	de b7       	in	r29, 0x3e	; 62
    1422:	89 83       	std	Y+1, r24	; 0x01
    1424:	6a 83       	std	Y+2, r22	; 0x02
		copy_u8Value &= 0x0F;
    1426:	8a 81       	ldd	r24, Y+2	; 0x02
    1428:	8f 70       	andi	r24, 0x0F	; 15
    142a:	8a 83       	std	Y+2, r24	; 0x02
		switch (copy_u8Port) {
    142c:	89 81       	ldd	r24, Y+1	; 0x01
    142e:	28 2f       	mov	r18, r24
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	3c 83       	std	Y+4, r19	; 0x04
    1434:	2b 83       	std	Y+3, r18	; 0x03
    1436:	8b 81       	ldd	r24, Y+3	; 0x03
    1438:	9c 81       	ldd	r25, Y+4	; 0x04
    143a:	81 30       	cpi	r24, 0x01	; 1
    143c:	91 05       	cpc	r25, r1
    143e:	29 f1       	breq	.+74     	; 0x148a <GPIO_voidWriteLowNipple+0x74>
    1440:	2b 81       	ldd	r18, Y+3	; 0x03
    1442:	3c 81       	ldd	r19, Y+4	; 0x04
    1444:	22 30       	cpi	r18, 0x02	; 2
    1446:	31 05       	cpc	r19, r1
    1448:	2c f4       	brge	.+10     	; 0x1454 <GPIO_voidWriteLowNipple+0x3e>
    144a:	8b 81       	ldd	r24, Y+3	; 0x03
    144c:	9c 81       	ldd	r25, Y+4	; 0x04
    144e:	00 97       	sbiw	r24, 0x00	; 0
    1450:	61 f0       	breq	.+24     	; 0x146a <GPIO_voidWriteLowNipple+0x54>
    1452:	4a c0       	rjmp	.+148    	; 0x14e8 <GPIO_voidWriteLowNipple+0xd2>
    1454:	2b 81       	ldd	r18, Y+3	; 0x03
    1456:	3c 81       	ldd	r19, Y+4	; 0x04
    1458:	22 30       	cpi	r18, 0x02	; 2
    145a:	31 05       	cpc	r19, r1
    145c:	31 f1       	breq	.+76     	; 0x14aa <GPIO_voidWriteLowNipple+0x94>
    145e:	8b 81       	ldd	r24, Y+3	; 0x03
    1460:	9c 81       	ldd	r25, Y+4	; 0x04
    1462:	83 30       	cpi	r24, 0x03	; 3
    1464:	91 05       	cpc	r25, r1
    1466:	89 f1       	breq	.+98     	; 0x14ca <GPIO_voidWriteLowNipple+0xb4>
    1468:	3f c0       	rjmp	.+126    	; 0x14e8 <GPIO_voidWriteLowNipple+0xd2>
			case GPIOA :
				PORTA &= 0xF0 ; 
    146a:	ab e3       	ldi	r26, 0x3B	; 59
    146c:	b0 e0       	ldi	r27, 0x00	; 0
    146e:	eb e3       	ldi	r30, 0x3B	; 59
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	80 81       	ld	r24, Z
    1474:	80 7f       	andi	r24, 0xF0	; 240
    1476:	8c 93       	st	X, r24
				PORTA |= copy_u8Value ;
    1478:	ab e3       	ldi	r26, 0x3B	; 59
    147a:	b0 e0       	ldi	r27, 0x00	; 0
    147c:	eb e3       	ldi	r30, 0x3B	; 59
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	90 81       	ld	r25, Z
    1482:	8a 81       	ldd	r24, Y+2	; 0x02
    1484:	89 2b       	or	r24, r25
    1486:	8c 93       	st	X, r24
    1488:	2f c0       	rjmp	.+94     	; 0x14e8 <GPIO_voidWriteLowNipple+0xd2>
				break;
			case GPIOB :
				PORTB &= 0xF0 ; 
    148a:	a8 e3       	ldi	r26, 0x38	; 56
    148c:	b0 e0       	ldi	r27, 0x00	; 0
    148e:	e8 e3       	ldi	r30, 0x38	; 56
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	80 81       	ld	r24, Z
    1494:	80 7f       	andi	r24, 0xF0	; 240
    1496:	8c 93       	st	X, r24
				PORTB |= copy_u8Value ;
    1498:	a8 e3       	ldi	r26, 0x38	; 56
    149a:	b0 e0       	ldi	r27, 0x00	; 0
    149c:	e8 e3       	ldi	r30, 0x38	; 56
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	90 81       	ld	r25, Z
    14a2:	8a 81       	ldd	r24, Y+2	; 0x02
    14a4:	89 2b       	or	r24, r25
    14a6:	8c 93       	st	X, r24
    14a8:	1f c0       	rjmp	.+62     	; 0x14e8 <GPIO_voidWriteLowNipple+0xd2>
				break;
			case GPIOC :
				PORTC &= 0xF0 ; 
    14aa:	a5 e3       	ldi	r26, 0x35	; 53
    14ac:	b0 e0       	ldi	r27, 0x00	; 0
    14ae:	e5 e3       	ldi	r30, 0x35	; 53
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	80 81       	ld	r24, Z
    14b4:	80 7f       	andi	r24, 0xF0	; 240
    14b6:	8c 93       	st	X, r24
				PORTC |= copy_u8Value ;
    14b8:	a5 e3       	ldi	r26, 0x35	; 53
    14ba:	b0 e0       	ldi	r27, 0x00	; 0
    14bc:	e5 e3       	ldi	r30, 0x35	; 53
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	90 81       	ld	r25, Z
    14c2:	8a 81       	ldd	r24, Y+2	; 0x02
    14c4:	89 2b       	or	r24, r25
    14c6:	8c 93       	st	X, r24
    14c8:	0f c0       	rjmp	.+30     	; 0x14e8 <GPIO_voidWriteLowNipple+0xd2>
				break;
			case GPIOD :
				PORTD &= 0xF0 ; 
    14ca:	a2 e3       	ldi	r26, 0x32	; 50
    14cc:	b0 e0       	ldi	r27, 0x00	; 0
    14ce:	e2 e3       	ldi	r30, 0x32	; 50
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	80 81       	ld	r24, Z
    14d4:	80 7f       	andi	r24, 0xF0	; 240
    14d6:	8c 93       	st	X, r24
				PORTD |= copy_u8Value ;
    14d8:	a2 e3       	ldi	r26, 0x32	; 50
    14da:	b0 e0       	ldi	r27, 0x00	; 0
    14dc:	e2 e3       	ldi	r30, 0x32	; 50
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	90 81       	ld	r25, Z
    14e2:	8a 81       	ldd	r24, Y+2	; 0x02
    14e4:	89 2b       	or	r24, r25
    14e6:	8c 93       	st	X, r24
				break;	
		}
	}
    14e8:	0f 90       	pop	r0
    14ea:	0f 90       	pop	r0
    14ec:	0f 90       	pop	r0
    14ee:	0f 90       	pop	r0
    14f0:	cf 91       	pop	r28
    14f2:	df 91       	pop	r29
    14f4:	08 95       	ret

000014f6 <GPIO_voidWriteHighNipple>:
	void GPIO_voidWriteHighNipple (u8 copy_u8Port , u8 copy_u8Value )
	{
    14f6:	df 93       	push	r29
    14f8:	cf 93       	push	r28
    14fa:	00 d0       	rcall	.+0      	; 0x14fc <GPIO_voidWriteHighNipple+0x6>
    14fc:	00 d0       	rcall	.+0      	; 0x14fe <GPIO_voidWriteHighNipple+0x8>
    14fe:	cd b7       	in	r28, 0x3d	; 61
    1500:	de b7       	in	r29, 0x3e	; 62
    1502:	89 83       	std	Y+1, r24	; 0x01
    1504:	6a 83       	std	Y+2, r22	; 0x02
		copy_u8Value &= 0xF0;
    1506:	8a 81       	ldd	r24, Y+2	; 0x02
    1508:	80 7f       	andi	r24, 0xF0	; 240
    150a:	8a 83       	std	Y+2, r24	; 0x02
		switch (copy_u8Port) {
    150c:	89 81       	ldd	r24, Y+1	; 0x01
    150e:	28 2f       	mov	r18, r24
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	3c 83       	std	Y+4, r19	; 0x04
    1514:	2b 83       	std	Y+3, r18	; 0x03
    1516:	8b 81       	ldd	r24, Y+3	; 0x03
    1518:	9c 81       	ldd	r25, Y+4	; 0x04
    151a:	81 30       	cpi	r24, 0x01	; 1
    151c:	91 05       	cpc	r25, r1
    151e:	29 f1       	breq	.+74     	; 0x156a <GPIO_voidWriteHighNipple+0x74>
    1520:	2b 81       	ldd	r18, Y+3	; 0x03
    1522:	3c 81       	ldd	r19, Y+4	; 0x04
    1524:	22 30       	cpi	r18, 0x02	; 2
    1526:	31 05       	cpc	r19, r1
    1528:	2c f4       	brge	.+10     	; 0x1534 <GPIO_voidWriteHighNipple+0x3e>
    152a:	8b 81       	ldd	r24, Y+3	; 0x03
    152c:	9c 81       	ldd	r25, Y+4	; 0x04
    152e:	00 97       	sbiw	r24, 0x00	; 0
    1530:	61 f0       	breq	.+24     	; 0x154a <GPIO_voidWriteHighNipple+0x54>
    1532:	4a c0       	rjmp	.+148    	; 0x15c8 <GPIO_voidWriteHighNipple+0xd2>
    1534:	2b 81       	ldd	r18, Y+3	; 0x03
    1536:	3c 81       	ldd	r19, Y+4	; 0x04
    1538:	22 30       	cpi	r18, 0x02	; 2
    153a:	31 05       	cpc	r19, r1
    153c:	31 f1       	breq	.+76     	; 0x158a <GPIO_voidWriteHighNipple+0x94>
    153e:	8b 81       	ldd	r24, Y+3	; 0x03
    1540:	9c 81       	ldd	r25, Y+4	; 0x04
    1542:	83 30       	cpi	r24, 0x03	; 3
    1544:	91 05       	cpc	r25, r1
    1546:	89 f1       	breq	.+98     	; 0x15aa <GPIO_voidWriteHighNipple+0xb4>
    1548:	3f c0       	rjmp	.+126    	; 0x15c8 <GPIO_voidWriteHighNipple+0xd2>
			case GPIOA :
				PORTA &= 0x0F ; 
    154a:	ab e3       	ldi	r26, 0x3B	; 59
    154c:	b0 e0       	ldi	r27, 0x00	; 0
    154e:	eb e3       	ldi	r30, 0x3B	; 59
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 81       	ld	r24, Z
    1554:	8f 70       	andi	r24, 0x0F	; 15
    1556:	8c 93       	st	X, r24
				PORTA |= copy_u8Value ;
    1558:	ab e3       	ldi	r26, 0x3B	; 59
    155a:	b0 e0       	ldi	r27, 0x00	; 0
    155c:	eb e3       	ldi	r30, 0x3B	; 59
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	90 81       	ld	r25, Z
    1562:	8a 81       	ldd	r24, Y+2	; 0x02
    1564:	89 2b       	or	r24, r25
    1566:	8c 93       	st	X, r24
    1568:	2f c0       	rjmp	.+94     	; 0x15c8 <GPIO_voidWriteHighNipple+0xd2>
				break;
			case GPIOB :
				PORTB &= 0x0F ; 
    156a:	a8 e3       	ldi	r26, 0x38	; 56
    156c:	b0 e0       	ldi	r27, 0x00	; 0
    156e:	e8 e3       	ldi	r30, 0x38	; 56
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	80 81       	ld	r24, Z
    1574:	8f 70       	andi	r24, 0x0F	; 15
    1576:	8c 93       	st	X, r24
				PORTB |= copy_u8Value ;
    1578:	a8 e3       	ldi	r26, 0x38	; 56
    157a:	b0 e0       	ldi	r27, 0x00	; 0
    157c:	e8 e3       	ldi	r30, 0x38	; 56
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	90 81       	ld	r25, Z
    1582:	8a 81       	ldd	r24, Y+2	; 0x02
    1584:	89 2b       	or	r24, r25
    1586:	8c 93       	st	X, r24
    1588:	1f c0       	rjmp	.+62     	; 0x15c8 <GPIO_voidWriteHighNipple+0xd2>
				break;
			case GPIOC :
				PORTC &= 0x0F ; 
    158a:	a5 e3       	ldi	r26, 0x35	; 53
    158c:	b0 e0       	ldi	r27, 0x00	; 0
    158e:	e5 e3       	ldi	r30, 0x35	; 53
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	80 81       	ld	r24, Z
    1594:	8f 70       	andi	r24, 0x0F	; 15
    1596:	8c 93       	st	X, r24
				PORTC |= copy_u8Value ;
    1598:	a5 e3       	ldi	r26, 0x35	; 53
    159a:	b0 e0       	ldi	r27, 0x00	; 0
    159c:	e5 e3       	ldi	r30, 0x35	; 53
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	90 81       	ld	r25, Z
    15a2:	8a 81       	ldd	r24, Y+2	; 0x02
    15a4:	89 2b       	or	r24, r25
    15a6:	8c 93       	st	X, r24
    15a8:	0f c0       	rjmp	.+30     	; 0x15c8 <GPIO_voidWriteHighNipple+0xd2>
				break;
			case GPIOD :
				PORTD &= 0x0F ; 
    15aa:	a2 e3       	ldi	r26, 0x32	; 50
    15ac:	b0 e0       	ldi	r27, 0x00	; 0
    15ae:	e2 e3       	ldi	r30, 0x32	; 50
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	80 81       	ld	r24, Z
    15b4:	8f 70       	andi	r24, 0x0F	; 15
    15b6:	8c 93       	st	X, r24
				PORTD |= copy_u8Value ;
    15b8:	a2 e3       	ldi	r26, 0x32	; 50
    15ba:	b0 e0       	ldi	r27, 0x00	; 0
    15bc:	e2 e3       	ldi	r30, 0x32	; 50
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	90 81       	ld	r25, Z
    15c2:	8a 81       	ldd	r24, Y+2	; 0x02
    15c4:	89 2b       	or	r24, r25
    15c6:	8c 93       	st	X, r24
				break;	
		}
	}
    15c8:	0f 90       	pop	r0
    15ca:	0f 90       	pop	r0
    15cc:	0f 90       	pop	r0
    15ce:	0f 90       	pop	r0
    15d0:	cf 91       	pop	r28
    15d2:	df 91       	pop	r29
    15d4:	08 95       	ret

000015d6 <I2C_voidInit>:

#define F_CPU 8000000UL


void I2C_voidInit (u32 copy_u32Scl)
{
    15d6:	0f 93       	push	r16
    15d8:	1f 93       	push	r17
    15da:	df 93       	push	r29
    15dc:	cf 93       	push	r28
    15de:	00 d0       	rcall	.+0      	; 0x15e0 <I2C_voidInit+0xa>
    15e0:	00 d0       	rcall	.+0      	; 0x15e2 <I2C_voidInit+0xc>
    15e2:	cd b7       	in	r28, 0x3d	; 61
    15e4:	de b7       	in	r29, 0x3e	; 62
    15e6:	69 83       	std	Y+1, r22	; 0x01
    15e8:	7a 83       	std	Y+2, r23	; 0x02
    15ea:	8b 83       	std	Y+3, r24	; 0x03
    15ec:	9c 83       	std	Y+4, r25	; 0x04
	#if I2C_PreScaler ==1
		CLEAR_BIT(TWSR , TWS1);
    15ee:	a1 e2       	ldi	r26, 0x21	; 33
    15f0:	b0 e0       	ldi	r27, 0x00	; 0
    15f2:	e1 e2       	ldi	r30, 0x21	; 33
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	80 81       	ld	r24, Z
    15f8:	8d 7f       	andi	r24, 0xFD	; 253
    15fa:	8c 93       	st	X, r24
		CLEAR_BIT(TWSR , TWS0);
    15fc:	a1 e2       	ldi	r26, 0x21	; 33
    15fe:	b0 e0       	ldi	r27, 0x00	; 0
    1600:	e1 e2       	ldi	r30, 0x21	; 33
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	80 81       	ld	r24, Z
    1606:	8e 7f       	andi	r24, 0xFE	; 254
    1608:	8c 93       	st	X, r24
		SET_BIT(TWSR , TWS1);
	#else
		SET_BIT(TWSR , TWS1);
		SET_BIT(TWSR , TWS0);
	#endif
TWBR = (((F_CPU/copy_u32Scl)-16 )/2*(4^I2C_PreScaler));
    160a:	00 e2       	ldi	r16, 0x20	; 32
    160c:	10 e0       	ldi	r17, 0x00	; 0
    160e:	80 e0       	ldi	r24, 0x00	; 0
    1610:	92 e1       	ldi	r25, 0x12	; 18
    1612:	aa e7       	ldi	r26, 0x7A	; 122
    1614:	b0 e0       	ldi	r27, 0x00	; 0
    1616:	29 81       	ldd	r18, Y+1	; 0x01
    1618:	3a 81       	ldd	r19, Y+2	; 0x02
    161a:	4b 81       	ldd	r20, Y+3	; 0x03
    161c:	5c 81       	ldd	r21, Y+4	; 0x04
    161e:	bc 01       	movw	r22, r24
    1620:	cd 01       	movw	r24, r26
    1622:	0e 94 4b 14 	call	0x2896	; 0x2896 <__udivmodsi4>
    1626:	da 01       	movw	r26, r20
    1628:	c9 01       	movw	r24, r18
    162a:	40 97       	sbiw	r24, 0x10	; 16
    162c:	a1 09       	sbc	r26, r1
    162e:	b1 09       	sbc	r27, r1
    1630:	9c 01       	movw	r18, r24
    1632:	ad 01       	movw	r20, r26
    1634:	56 95       	lsr	r21
    1636:	47 95       	ror	r20
    1638:	37 95       	ror	r19
    163a:	27 95       	ror	r18
    163c:	da 01       	movw	r26, r20
    163e:	c9 01       	movw	r24, r18
    1640:	88 0f       	add	r24, r24
    1642:	99 1f       	adc	r25, r25
    1644:	aa 1f       	adc	r26, r26
    1646:	bb 1f       	adc	r27, r27
    1648:	88 0f       	add	r24, r24
    164a:	99 1f       	adc	r25, r25
    164c:	aa 1f       	adc	r26, r26
    164e:	bb 1f       	adc	r27, r27
    1650:	82 0f       	add	r24, r18
    1652:	93 1f       	adc	r25, r19
    1654:	a4 1f       	adc	r26, r20
    1656:	b5 1f       	adc	r27, r21
    1658:	f8 01       	movw	r30, r16
    165a:	80 83       	st	Z, r24

}
    165c:	0f 90       	pop	r0
    165e:	0f 90       	pop	r0
    1660:	0f 90       	pop	r0
    1662:	0f 90       	pop	r0
    1664:	cf 91       	pop	r28
    1666:	df 91       	pop	r29
    1668:	1f 91       	pop	r17
    166a:	0f 91       	pop	r16
    166c:	08 95       	ret

0000166e <I2C_voidStart>:
void I2C_voidStart (void)
{
    166e:	df 93       	push	r29
    1670:	cf 93       	push	r28
    1672:	cd b7       	in	r28, 0x3d	; 61
    1674:	de b7       	in	r29, 0x3e	; 62
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTA);
    1676:	e6 e5       	ldi	r30, 0x56	; 86
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	84 ea       	ldi	r24, 0xA4	; 164
    167c:	80 83       	st	Z, r24
	while (GET_BIT(TWCR , TWINT) == 0);
    167e:	e6 e5       	ldi	r30, 0x56	; 86
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	80 81       	ld	r24, Z
    1684:	88 1f       	adc	r24, r24
    1686:	88 27       	eor	r24, r24
    1688:	88 1f       	adc	r24, r24
    168a:	88 2f       	mov	r24, r24
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	90 70       	andi	r25, 0x00	; 0
    1690:	00 97       	sbiw	r24, 0x00	; 0
    1692:	a9 f3       	breq	.-22     	; 0x167e <I2C_voidStart+0x10>
	while ((TWSR&=0xF8) != StartHasBeenSent);
    1694:	a1 e2       	ldi	r26, 0x21	; 33
    1696:	b0 e0       	ldi	r27, 0x00	; 0
    1698:	e1 e2       	ldi	r30, 0x21	; 33
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	80 81       	ld	r24, Z
    169e:	88 7f       	andi	r24, 0xF8	; 248
    16a0:	8c 93       	st	X, r24
    16a2:	8c 91       	ld	r24, X
    16a4:	88 30       	cpi	r24, 0x08	; 8
    16a6:	b1 f7       	brne	.-20     	; 0x1694 <I2C_voidStart+0x26>

}
    16a8:	cf 91       	pop	r28
    16aa:	df 91       	pop	r29
    16ac:	08 95       	ret

000016ae <I2C_voidWriteAddress>:
void I2C_voidWriteAddress (u8 copy_u8Address)
{
    16ae:	df 93       	push	r29
    16b0:	cf 93       	push	r28
    16b2:	0f 92       	push	r0
    16b4:	cd b7       	in	r28, 0x3d	; 61
    16b6:	de b7       	in	r29, 0x3e	; 62
    16b8:	89 83       	std	Y+1, r24	; 0x01
	TWDR = copy_u8Address ;
    16ba:	e3 e2       	ldi	r30, 0x23	; 35
    16bc:	f0 e0       	ldi	r31, 0x00	; 0
    16be:	89 81       	ldd	r24, Y+1	; 0x01
    16c0:	80 83       	st	Z, r24
	TWCR=(1<<TWINT)|(1<<TWEN);
    16c2:	e6 e5       	ldi	r30, 0x56	; 86
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	84 e8       	ldi	r24, 0x84	; 132
    16c8:	80 83       	st	Z, r24
	while (GET_BIT(TWCR , TWINT) == 0);
    16ca:	e6 e5       	ldi	r30, 0x56	; 86
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	80 81       	ld	r24, Z
    16d0:	88 1f       	adc	r24, r24
    16d2:	88 27       	eor	r24, r24
    16d4:	88 1f       	adc	r24, r24
    16d6:	88 2f       	mov	r24, r24
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	90 70       	andi	r25, 0x00	; 0
    16dc:	00 97       	sbiw	r24, 0x00	; 0
    16de:	a9 f3       	breq	.-22     	; 0x16ca <I2C_voidWriteAddress+0x1c>
	while ((TWSR&=0xF8) != AddressSentAckRes);
    16e0:	a1 e2       	ldi	r26, 0x21	; 33
    16e2:	b0 e0       	ldi	r27, 0x00	; 0
    16e4:	e1 e2       	ldi	r30, 0x21	; 33
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
    16e8:	80 81       	ld	r24, Z
    16ea:	88 7f       	andi	r24, 0xF8	; 248
    16ec:	8c 93       	st	X, r24
    16ee:	8c 91       	ld	r24, X
    16f0:	88 31       	cpi	r24, 0x18	; 24
    16f2:	b1 f7       	brne	.-20     	; 0x16e0 <I2C_voidWriteAddress+0x32>
}
    16f4:	0f 90       	pop	r0
    16f6:	cf 91       	pop	r28
    16f8:	df 91       	pop	r29
    16fa:	08 95       	ret

000016fc <I2C_voidWriteData>:
void I2C_voidWriteData (u8 copy_u8Data)
{
    16fc:	df 93       	push	r29
    16fe:	cf 93       	push	r28
    1700:	0f 92       	push	r0
    1702:	cd b7       	in	r28, 0x3d	; 61
    1704:	de b7       	in	r29, 0x3e	; 62
    1706:	89 83       	std	Y+1, r24	; 0x01
	TWDR = copy_u8Data ;
    1708:	e3 e2       	ldi	r30, 0x23	; 35
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	89 81       	ldd	r24, Y+1	; 0x01
    170e:	80 83       	st	Z, r24
	TWCR=(1<<TWINT)|(1<<TWEN);
    1710:	e6 e5       	ldi	r30, 0x56	; 86
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	84 e8       	ldi	r24, 0x84	; 132
    1716:	80 83       	st	Z, r24
	while (GET_BIT(TWCR , TWINT) == 0);
    1718:	e6 e5       	ldi	r30, 0x56	; 86
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	80 81       	ld	r24, Z
    171e:	88 1f       	adc	r24, r24
    1720:	88 27       	eor	r24, r24
    1722:	88 1f       	adc	r24, r24
    1724:	88 2f       	mov	r24, r24
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	90 70       	andi	r25, 0x00	; 0
    172a:	00 97       	sbiw	r24, 0x00	; 0
    172c:	a9 f3       	breq	.-22     	; 0x1718 <I2C_voidWriteData+0x1c>
	while ((TWSR&=0xF8) != DataSentAckRes);
    172e:	a1 e2       	ldi	r26, 0x21	; 33
    1730:	b0 e0       	ldi	r27, 0x00	; 0
    1732:	e1 e2       	ldi	r30, 0x21	; 33
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	80 81       	ld	r24, Z
    1738:	88 7f       	andi	r24, 0xF8	; 248
    173a:	8c 93       	st	X, r24
    173c:	8c 91       	ld	r24, X
    173e:	88 32       	cpi	r24, 0x28	; 40
    1740:	b1 f7       	brne	.-20     	; 0x172e <I2C_voidWriteData+0x32>
}
    1742:	0f 90       	pop	r0
    1744:	cf 91       	pop	r28
    1746:	df 91       	pop	r29
    1748:	08 95       	ret

0000174a <I2C_voidStop>:
void I2C_voidStop	(void)
{
    174a:	df 93       	push	r29
    174c:	cf 93       	push	r28
    174e:	cd b7       	in	r28, 0x3d	; 61
    1750:	de b7       	in	r29, 0x3e	; 62
	
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
    1752:	e6 e5       	ldi	r30, 0x56	; 86
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	84 e9       	ldi	r24, 0x94	; 148
    1758:	80 83       	st	Z, r24
	
}
    175a:	cf 91       	pop	r28
    175c:	df 91       	pop	r29
    175e:	08 95       	ret

00001760 <I2C_voidSetAddress>:
void I2C_voidSetAddress(u8 copy_u8Address)
{
    1760:	df 93       	push	r29
    1762:	cf 93       	push	r28
    1764:	0f 92       	push	r0
    1766:	cd b7       	in	r28, 0x3d	; 61
    1768:	de b7       	in	r29, 0x3e	; 62
    176a:	89 83       	std	Y+1, r24	; 0x01
	TWAR = copy_u8Address ;
    176c:	e2 e2       	ldi	r30, 0x22	; 34
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	89 81       	ldd	r24, Y+1	; 0x01
    1772:	80 83       	st	Z, r24
}
    1774:	0f 90       	pop	r0
    1776:	cf 91       	pop	r28
    1778:	df 91       	pop	r29
    177a:	08 95       	ret

0000177c <I2C_u8SlaveRead>:
u8 I2C_u8SlaveRead (void)
{
    177c:	df 93       	push	r29
    177e:	cf 93       	push	r28
    1780:	cd b7       	in	r28, 0x3d	; 61
    1782:	de b7       	in	r29, 0x3e	; 62
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
    1784:	e6 e5       	ldi	r30, 0x56	; 86
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	84 ec       	ldi	r24, 0xC4	; 196
    178a:	80 83       	st	Z, r24
	while (GET_BIT(TWCR , TWINT) == 0);
    178c:	e6 e5       	ldi	r30, 0x56	; 86
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	80 81       	ld	r24, Z
    1792:	88 1f       	adc	r24, r24
    1794:	88 27       	eor	r24, r24
    1796:	88 1f       	adc	r24, r24
    1798:	88 2f       	mov	r24, r24
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	90 70       	andi	r25, 0x00	; 0
    179e:	00 97       	sbiw	r24, 0x00	; 0
    17a0:	a9 f3       	breq	.-22     	; 0x178c <I2C_u8SlaveRead+0x10>
	while ((TWSR&=0xF8) != SlaWResAckReturn);
    17a2:	a1 e2       	ldi	r26, 0x21	; 33
    17a4:	b0 e0       	ldi	r27, 0x00	; 0
    17a6:	e1 e2       	ldi	r30, 0x21	; 33
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	80 81       	ld	r24, Z
    17ac:	88 7f       	andi	r24, 0xF8	; 248
    17ae:	8c 93       	st	X, r24
    17b0:	8c 91       	ld	r24, X
    17b2:	80 36       	cpi	r24, 0x60	; 96
    17b4:	b1 f7       	brne	.-20     	; 0x17a2 <I2C_u8SlaveRead+0x26>
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
    17b6:	e6 e5       	ldi	r30, 0x56	; 86
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	84 ec       	ldi	r24, 0xC4	; 196
    17bc:	80 83       	st	Z, r24
	while (GET_BIT(TWCR , TWINT) == 0);
    17be:	e6 e5       	ldi	r30, 0x56	; 86
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	80 81       	ld	r24, Z
    17c4:	88 1f       	adc	r24, r24
    17c6:	88 27       	eor	r24, r24
    17c8:	88 1f       	adc	r24, r24
    17ca:	88 2f       	mov	r24, r24
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	90 70       	andi	r25, 0x00	; 0
    17d0:	00 97       	sbiw	r24, 0x00	; 0
    17d2:	a9 f3       	breq	.-22     	; 0x17be <I2C_u8SlaveRead+0x42>
	while ((TWSR&=0xF8) != SLADataSentAckRes);
    17d4:	a1 e2       	ldi	r26, 0x21	; 33
    17d6:	b0 e0       	ldi	r27, 0x00	; 0
    17d8:	e1 e2       	ldi	r30, 0x21	; 33
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	80 81       	ld	r24, Z
    17de:	88 7f       	andi	r24, 0xF8	; 248
    17e0:	8c 93       	st	X, r24
    17e2:	8c 91       	ld	r24, X
    17e4:	80 38       	cpi	r24, 0x80	; 128
    17e6:	b1 f7       	brne	.-20     	; 0x17d4 <I2C_u8SlaveRead+0x58>
	return TWDR ;
    17e8:	e3 e2       	ldi	r30, 0x23	; 35
    17ea:	f0 e0       	ldi	r31, 0x00	; 0
    17ec:	80 81       	ld	r24, Z
	
}
    17ee:	cf 91       	pop	r28
    17f0:	df 91       	pop	r29
    17f2:	08 95       	ret

000017f4 <I2C_u8MasterRead>:

u8 I2C_u8MasterRead (void)
{
    17f4:	df 93       	push	r29
    17f6:	cf 93       	push	r28
    17f8:	cd b7       	in	r28, 0x3d	; 61
    17fa:	de b7       	in	r29, 0x3e	; 62
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
    17fc:	e6 e5       	ldi	r30, 0x56	; 86
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	84 ec       	ldi	r24, 0xC4	; 196
    1802:	80 83       	st	Z, r24
	while (GET_BIT(TWCR , TWINT) == 0);
    1804:	e6 e5       	ldi	r30, 0x56	; 86
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	80 81       	ld	r24, Z
    180a:	88 1f       	adc	r24, r24
    180c:	88 27       	eor	r24, r24
    180e:	88 1f       	adc	r24, r24
    1810:	88 2f       	mov	r24, r24
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	90 70       	andi	r25, 0x00	; 0
    1816:	00 97       	sbiw	r24, 0x00	; 0
    1818:	a9 f3       	breq	.-22     	; 0x1804 <I2C_u8MasterRead+0x10>
	while ((TWSR&=0xF8) != 0x40);
    181a:	a1 e2       	ldi	r26, 0x21	; 33
    181c:	b0 e0       	ldi	r27, 0x00	; 0
    181e:	e1 e2       	ldi	r30, 0x21	; 33
    1820:	f0 e0       	ldi	r31, 0x00	; 0
    1822:	80 81       	ld	r24, Z
    1824:	88 7f       	andi	r24, 0xF8	; 248
    1826:	8c 93       	st	X, r24
    1828:	8c 91       	ld	r24, X
    182a:	80 34       	cpi	r24, 0x40	; 64
    182c:	b1 f7       	brne	.-20     	; 0x181a <I2C_u8MasterRead+0x26>
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
    182e:	e6 e5       	ldi	r30, 0x56	; 86
    1830:	f0 e0       	ldi	r31, 0x00	; 0
    1832:	84 ec       	ldi	r24, 0xC4	; 196
    1834:	80 83       	st	Z, r24
	while (GET_BIT(TWCR , TWINT) == 0);
    1836:	e6 e5       	ldi	r30, 0x56	; 86
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	80 81       	ld	r24, Z
    183c:	88 1f       	adc	r24, r24
    183e:	88 27       	eor	r24, r24
    1840:	88 1f       	adc	r24, r24
    1842:	88 2f       	mov	r24, r24
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	90 70       	andi	r25, 0x00	; 0
    1848:	00 97       	sbiw	r24, 0x00	; 0
    184a:	a9 f3       	breq	.-22     	; 0x1836 <I2C_u8MasterRead+0x42>
	while ((TWSR&=0xF8) != 0x50);
    184c:	a1 e2       	ldi	r26, 0x21	; 33
    184e:	b0 e0       	ldi	r27, 0x00	; 0
    1850:	e1 e2       	ldi	r30, 0x21	; 33
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	80 81       	ld	r24, Z
    1856:	88 7f       	andi	r24, 0xF8	; 248
    1858:	8c 93       	st	X, r24
    185a:	8c 91       	ld	r24, X
    185c:	80 35       	cpi	r24, 0x50	; 80
    185e:	b1 f7       	brne	.-20     	; 0x184c <I2C_u8MasterRead+0x58>
	return TWDR ;
    1860:	e3 e2       	ldi	r30, 0x23	; 35
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	80 81       	ld	r24, Z

}
    1866:	cf 91       	pop	r28
    1868:	df 91       	pop	r29
    186a:	08 95       	ret

0000186c <I2C_repeated_start>:



u8 I2C_repeated_start(void)
	{
    186c:	df 93       	push	r29
    186e:	cf 93       	push	r28
    1870:	0f 92       	push	r0
    1872:	cd b7       	in	r28, 0x3d	; 61
    1874:	de b7       	in	r29, 0x3e	; 62
		TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTA);
    1876:	e6 e5       	ldi	r30, 0x56	; 86
    1878:	f0 e0       	ldi	r31, 0x00	; 0
    187a:	84 ea       	ldi	r24, 0xA4	; 164
    187c:	80 83       	st	Z, r24
		while(GET_BIT(TWCR,TWINT)==0); //wait to finish
    187e:	e6 e5       	ldi	r30, 0x56	; 86
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	80 81       	ld	r24, Z
    1884:	88 1f       	adc	r24, r24
    1886:	88 27       	eor	r24, r24
    1888:	88 1f       	adc	r24, r24
    188a:	88 2f       	mov	r24, r24
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	90 70       	andi	r25, 0x00	; 0
    1890:	00 97       	sbiw	r24, 0x00	; 0
    1892:	a9 f3       	breq	.-22     	; 0x187e <I2C_repeated_start+0x12>
		while ((TWSR & 0XF8) != 0x10); // repeated start condition has been transmitted
    1894:	e1 e2       	ldi	r30, 0x21	; 33
    1896:	f0 e0       	ldi	r31, 0x00	; 0
    1898:	80 81       	ld	r24, Z
    189a:	88 2f       	mov	r24, r24
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	88 7f       	andi	r24, 0xF8	; 248
    18a0:	90 70       	andi	r25, 0x00	; 0
    18a2:	80 31       	cpi	r24, 0x10	; 16
    18a4:	91 05       	cpc	r25, r1
    18a6:	b1 f7       	brne	.-20     	; 0x1894 <I2C_repeated_start+0x28>
	}
    18a8:	0f 90       	pop	r0
    18aa:	cf 91       	pop	r28
    18ac:	df 91       	pop	r29
    18ae:	08 95       	ret

000018b0 <I2C_read_with_NACK>:

u8 I2C_read_with_NACK(void)
	{
    18b0:	df 93       	push	r29
    18b2:	cf 93       	push	r28
    18b4:	cd b7       	in	r28, 0x3d	; 61
    18b6:	de b7       	in	r29, 0x3e	; 62
		TWCR=(1<<TWINT)|(1<<TWEN);
    18b8:	e6 e5       	ldi	r30, 0x56	; 86
    18ba:	f0 e0       	ldi	r31, 0x00	; 0
    18bc:	84 e8       	ldi	r24, 0x84	; 132
    18be:	80 83       	st	Z, r24
		while(GET_BIT(TWCR,TWINT)==0);
    18c0:	e6 e5       	ldi	r30, 0x56	; 86
    18c2:	f0 e0       	ldi	r31, 0x00	; 0
    18c4:	80 81       	ld	r24, Z
    18c6:	88 1f       	adc	r24, r24
    18c8:	88 27       	eor	r24, r24
    18ca:	88 1f       	adc	r24, r24
    18cc:	88 2f       	mov	r24, r24
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	90 70       	andi	r25, 0x00	; 0
    18d2:	00 97       	sbiw	r24, 0x00	; 0
    18d4:	a9 f3       	breq	.-22     	; 0x18c0 <I2C_read_with_NACK+0x10>
		while ((TWSR & 0XF8) != 0x58); // data byte has been received and Not ACK has been returned
    18d6:	e1 e2       	ldi	r30, 0x21	; 33
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	80 81       	ld	r24, Z
    18dc:	88 2f       	mov	r24, r24
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	88 7f       	andi	r24, 0xF8	; 248
    18e2:	90 70       	andi	r25, 0x00	; 0
    18e4:	88 35       	cpi	r24, 0x58	; 88
    18e6:	91 05       	cpc	r25, r1
    18e8:	b1 f7       	brne	.-20     	; 0x18d6 <I2C_read_with_NACK+0x26>
		return TWDR ;
    18ea:	e3 e2       	ldi	r30, 0x23	; 35
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	80 81       	ld	r24, Z
	}
    18f0:	cf 91       	pop	r28
    18f2:	df 91       	pop	r29
    18f4:	08 95       	ret

000018f6 <I2C_write_address_and_read>:
void I2C_write_address_and_read(unsigned char address)
	{
    18f6:	df 93       	push	r29
    18f8:	cf 93       	push	r28
    18fa:	0f 92       	push	r0
    18fc:	cd b7       	in	r28, 0x3d	; 61
    18fe:	de b7       	in	r29, 0x3e	; 62
    1900:	89 83       	std	Y+1, r24	; 0x01
		TWDR=address;
    1902:	e3 e2       	ldi	r30, 0x23	; 35
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	89 81       	ldd	r24, Y+1	; 0x01
    1908:	80 83       	st	Z, r24
		TWCR=(1<<TWINT)|(1<<TWEN);
    190a:	e6 e5       	ldi	r30, 0x56	; 86
    190c:	f0 e0       	ldi	r31, 0x00	; 0
    190e:	84 e8       	ldi	r24, 0x84	; 132
    1910:	80 83       	st	Z, r24
		while(GET_BIT(TWCR,TWINT)==0); //wait to finish
    1912:	e6 e5       	ldi	r30, 0x56	; 86
    1914:	f0 e0       	ldi	r31, 0x00	; 0
    1916:	80 81       	ld	r24, Z
    1918:	88 1f       	adc	r24, r24
    191a:	88 27       	eor	r24, r24
    191c:	88 1f       	adc	r24, r24
    191e:	88 2f       	mov	r24, r24
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	90 70       	andi	r25, 0x00	; 0
    1924:	00 97       	sbiw	r24, 0x00	; 0
    1926:	a9 f3       	breq	.-22     	; 0x1912 <I2C_write_address_and_read+0x1c>
		while ((TWSR & 0XF8) != 0x40); // SLA+read has been transmitted and ACK has been received
    1928:	e1 e2       	ldi	r30, 0x21	; 33
    192a:	f0 e0       	ldi	r31, 0x00	; 0
    192c:	80 81       	ld	r24, Z
    192e:	88 2f       	mov	r24, r24
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	88 7f       	andi	r24, 0xF8	; 248
    1934:	90 70       	andi	r25, 0x00	; 0
    1936:	80 34       	cpi	r24, 0x40	; 64
    1938:	91 05       	cpc	r25, r1
    193a:	b1 f7       	brne	.-20     	; 0x1928 <I2C_write_address_and_read+0x32>
	}
    193c:	0f 90       	pop	r0
    193e:	cf 91       	pop	r28
    1940:	df 91       	pop	r29
    1942:	08 95       	ret

00001944 <LCD_voidInit>:
#include "util/delay.h"



void LCD_voidInit()
{
    1944:	0f 93       	push	r16
    1946:	1f 93       	push	r17
    1948:	df 93       	push	r29
    194a:	cf 93       	push	r28
    194c:	cd b7       	in	r28, 0x3d	; 61
    194e:	de b7       	in	r29, 0x3e	; 62
    1950:	c4 55       	subi	r28, 0x54	; 84
    1952:	d0 40       	sbci	r29, 0x00	; 0
    1954:	0f b6       	in	r0, 0x3f	; 63
    1956:	f8 94       	cli
    1958:	de bf       	out	0x3e, r29	; 62
    195a:	0f be       	out	0x3f, r0	; 63
    195c:	cd bf       	out	0x3d, r28	; 61
    195e:	fe 01       	movw	r30, r28
    1960:	ef 5a       	subi	r30, 0xAF	; 175
    1962:	ff 4f       	sbci	r31, 0xFF	; 255
    1964:	80 e0       	ldi	r24, 0x00	; 0
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	a0 e2       	ldi	r26, 0x20	; 32
    196a:	b2 e4       	ldi	r27, 0x42	; 66
    196c:	80 83       	st	Z, r24
    196e:	91 83       	std	Z+1, r25	; 0x01
    1970:	a2 83       	std	Z+2, r26	; 0x02
    1972:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1974:	8e 01       	movw	r16, r28
    1976:	03 5b       	subi	r16, 0xB3	; 179
    1978:	1f 4f       	sbci	r17, 0xFF	; 255
    197a:	fe 01       	movw	r30, r28
    197c:	ef 5a       	subi	r30, 0xAF	; 175
    197e:	ff 4f       	sbci	r31, 0xFF	; 255
    1980:	60 81       	ld	r22, Z
    1982:	71 81       	ldd	r23, Z+1	; 0x01
    1984:	82 81       	ldd	r24, Z+2	; 0x02
    1986:	93 81       	ldd	r25, Z+3	; 0x03
    1988:	20 e0       	ldi	r18, 0x00	; 0
    198a:	30 e0       	ldi	r19, 0x00	; 0
    198c:	4a ef       	ldi	r20, 0xFA	; 250
    198e:	54 e4       	ldi	r21, 0x44	; 68
    1990:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1994:	dc 01       	movw	r26, r24
    1996:	cb 01       	movw	r24, r22
    1998:	f8 01       	movw	r30, r16
    199a:	80 83       	st	Z, r24
    199c:	91 83       	std	Z+1, r25	; 0x01
    199e:	a2 83       	std	Z+2, r26	; 0x02
    19a0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19a2:	fe 01       	movw	r30, r28
    19a4:	e3 5b       	subi	r30, 0xB3	; 179
    19a6:	ff 4f       	sbci	r31, 0xFF	; 255
    19a8:	60 81       	ld	r22, Z
    19aa:	71 81       	ldd	r23, Z+1	; 0x01
    19ac:	82 81       	ldd	r24, Z+2	; 0x02
    19ae:	93 81       	ldd	r25, Z+3	; 0x03
    19b0:	20 e0       	ldi	r18, 0x00	; 0
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	40 e8       	ldi	r20, 0x80	; 128
    19b6:	5f e3       	ldi	r21, 0x3F	; 63
    19b8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    19bc:	88 23       	and	r24, r24
    19be:	44 f4       	brge	.+16     	; 0x19d0 <LCD_voidInit+0x8c>
		__ticks = 1;
    19c0:	fe 01       	movw	r30, r28
    19c2:	e5 5b       	subi	r30, 0xB5	; 181
    19c4:	ff 4f       	sbci	r31, 0xFF	; 255
    19c6:	81 e0       	ldi	r24, 0x01	; 1
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	91 83       	std	Z+1, r25	; 0x01
    19cc:	80 83       	st	Z, r24
    19ce:	64 c0       	rjmp	.+200    	; 0x1a98 <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    19d0:	fe 01       	movw	r30, r28
    19d2:	e3 5b       	subi	r30, 0xB3	; 179
    19d4:	ff 4f       	sbci	r31, 0xFF	; 255
    19d6:	60 81       	ld	r22, Z
    19d8:	71 81       	ldd	r23, Z+1	; 0x01
    19da:	82 81       	ldd	r24, Z+2	; 0x02
    19dc:	93 81       	ldd	r25, Z+3	; 0x03
    19de:	20 e0       	ldi	r18, 0x00	; 0
    19e0:	3f ef       	ldi	r19, 0xFF	; 255
    19e2:	4f e7       	ldi	r20, 0x7F	; 127
    19e4:	57 e4       	ldi	r21, 0x47	; 71
    19e6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    19ea:	18 16       	cp	r1, r24
    19ec:	0c f0       	brlt	.+2      	; 0x19f0 <LCD_voidInit+0xac>
    19ee:	43 c0       	rjmp	.+134    	; 0x1a76 <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19f0:	fe 01       	movw	r30, r28
    19f2:	ef 5a       	subi	r30, 0xAF	; 175
    19f4:	ff 4f       	sbci	r31, 0xFF	; 255
    19f6:	60 81       	ld	r22, Z
    19f8:	71 81       	ldd	r23, Z+1	; 0x01
    19fa:	82 81       	ldd	r24, Z+2	; 0x02
    19fc:	93 81       	ldd	r25, Z+3	; 0x03
    19fe:	20 e0       	ldi	r18, 0x00	; 0
    1a00:	30 e0       	ldi	r19, 0x00	; 0
    1a02:	40 e2       	ldi	r20, 0x20	; 32
    1a04:	51 e4       	ldi	r21, 0x41	; 65
    1a06:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a0a:	dc 01       	movw	r26, r24
    1a0c:	cb 01       	movw	r24, r22
    1a0e:	8e 01       	movw	r16, r28
    1a10:	05 5b       	subi	r16, 0xB5	; 181
    1a12:	1f 4f       	sbci	r17, 0xFF	; 255
    1a14:	bc 01       	movw	r22, r24
    1a16:	cd 01       	movw	r24, r26
    1a18:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a1c:	dc 01       	movw	r26, r24
    1a1e:	cb 01       	movw	r24, r22
    1a20:	f8 01       	movw	r30, r16
    1a22:	91 83       	std	Z+1, r25	; 0x01
    1a24:	80 83       	st	Z, r24
    1a26:	1f c0       	rjmp	.+62     	; 0x1a66 <LCD_voidInit+0x122>
    1a28:	fe 01       	movw	r30, r28
    1a2a:	e7 5b       	subi	r30, 0xB7	; 183
    1a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a2e:	88 ec       	ldi	r24, 0xC8	; 200
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	91 83       	std	Z+1, r25	; 0x01
    1a34:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a36:	fe 01       	movw	r30, r28
    1a38:	e7 5b       	subi	r30, 0xB7	; 183
    1a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3c:	80 81       	ld	r24, Z
    1a3e:	91 81       	ldd	r25, Z+1	; 0x01
    1a40:	01 97       	sbiw	r24, 0x01	; 1
    1a42:	f1 f7       	brne	.-4      	; 0x1a40 <LCD_voidInit+0xfc>
    1a44:	fe 01       	movw	r30, r28
    1a46:	e7 5b       	subi	r30, 0xB7	; 183
    1a48:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4a:	91 83       	std	Z+1, r25	; 0x01
    1a4c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a4e:	de 01       	movw	r26, r28
    1a50:	a5 5b       	subi	r26, 0xB5	; 181
    1a52:	bf 4f       	sbci	r27, 0xFF	; 255
    1a54:	fe 01       	movw	r30, r28
    1a56:	e5 5b       	subi	r30, 0xB5	; 181
    1a58:	ff 4f       	sbci	r31, 0xFF	; 255
    1a5a:	80 81       	ld	r24, Z
    1a5c:	91 81       	ldd	r25, Z+1	; 0x01
    1a5e:	01 97       	sbiw	r24, 0x01	; 1
    1a60:	11 96       	adiw	r26, 0x01	; 1
    1a62:	9c 93       	st	X, r25
    1a64:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a66:	fe 01       	movw	r30, r28
    1a68:	e5 5b       	subi	r30, 0xB5	; 181
    1a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6c:	80 81       	ld	r24, Z
    1a6e:	91 81       	ldd	r25, Z+1	; 0x01
    1a70:	00 97       	sbiw	r24, 0x00	; 0
    1a72:	d1 f6       	brne	.-76     	; 0x1a28 <LCD_voidInit+0xe4>
    1a74:	27 c0       	rjmp	.+78     	; 0x1ac4 <LCD_voidInit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a76:	8e 01       	movw	r16, r28
    1a78:	05 5b       	subi	r16, 0xB5	; 181
    1a7a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a7c:	fe 01       	movw	r30, r28
    1a7e:	e3 5b       	subi	r30, 0xB3	; 179
    1a80:	ff 4f       	sbci	r31, 0xFF	; 255
    1a82:	60 81       	ld	r22, Z
    1a84:	71 81       	ldd	r23, Z+1	; 0x01
    1a86:	82 81       	ldd	r24, Z+2	; 0x02
    1a88:	93 81       	ldd	r25, Z+3	; 0x03
    1a8a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a8e:	dc 01       	movw	r26, r24
    1a90:	cb 01       	movw	r24, r22
    1a92:	f8 01       	movw	r30, r16
    1a94:	91 83       	std	Z+1, r25	; 0x01
    1a96:	80 83       	st	Z, r24
    1a98:	de 01       	movw	r26, r28
    1a9a:	a9 5b       	subi	r26, 0xB9	; 185
    1a9c:	bf 4f       	sbci	r27, 0xFF	; 255
    1a9e:	fe 01       	movw	r30, r28
    1aa0:	e5 5b       	subi	r30, 0xB5	; 181
    1aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa4:	80 81       	ld	r24, Z
    1aa6:	91 81       	ldd	r25, Z+1	; 0x01
    1aa8:	8d 93       	st	X+, r24
    1aaa:	9c 93       	st	X, r25
    1aac:	fe 01       	movw	r30, r28
    1aae:	e9 5b       	subi	r30, 0xB9	; 185
    1ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab2:	80 81       	ld	r24, Z
    1ab4:	91 81       	ldd	r25, Z+1	; 0x01
    1ab6:	01 97       	sbiw	r24, 0x01	; 1
    1ab8:	f1 f7       	brne	.-4      	; 0x1ab6 <LCD_voidInit+0x172>
    1aba:	fe 01       	movw	r30, r28
    1abc:	e9 5b       	subi	r30, 0xB9	; 185
    1abe:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac0:	91 83       	std	Z+1, r25	; 0x01
    1ac2:	80 83       	st	Z, r24
	_delay_ms(40);
	
	GPIO_voidSetPinDDR(LCD_RSPORT , LCD_RSPIN , OUTPUT);
    1ac4:	80 e0       	ldi	r24, 0x00	; 0
    1ac6:	64 e0       	ldi	r22, 0x04	; 4
    1ac8:	41 e0       	ldi	r20, 0x01	; 1
    1aca:	0e 94 48 06 	call	0xc90	; 0xc90 <GPIO_voidSetPinDDR>
	GPIO_voidSetPinDDR(LCD_RWPORT , LCD_RWPIN , OUTPUT);
    1ace:	80 e0       	ldi	r24, 0x00	; 0
    1ad0:	65 e0       	ldi	r22, 0x05	; 5
    1ad2:	41 e0       	ldi	r20, 0x01	; 1
    1ad4:	0e 94 48 06 	call	0xc90	; 0xc90 <GPIO_voidSetPinDDR>
	GPIO_voidSetPinDDR(LCD_ENPORT , LCD_ENPIN , OUTPUT);
    1ad8:	80 e0       	ldi	r24, 0x00	; 0
    1ada:	66 e0       	ldi	r22, 0x06	; 6
    1adc:	41 e0       	ldi	r20, 0x01	; 1
    1ade:	0e 94 48 06 	call	0xc90	; 0xc90 <GPIO_voidSetPinDDR>
		LCD_voidSendCmd(LCD_ENTRY_MODE);
		_delay_ms(1);
		
	#elif LCD_MODE == 1 
		#if LCD_NIBBLE == 0 
			GPIO_voidSetLowNippleDDR(LCD_PORT , OUTPUT);
    1ae2:	80 e0       	ldi	r24, 0x00	; 0
    1ae4:	61 e0       	ldi	r22, 0x01	; 1
    1ae6:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <GPIO_voidSetLowNippleDDR>
			LCD_voidSendCmd(LCD_RETURN_HOME);
    1aea:	82 e0       	ldi	r24, 0x02	; 2
    1aec:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <LCD_voidSendCmd>
    1af0:	fe 01       	movw	r30, r28
    1af2:	ed 5b       	subi	r30, 0xBD	; 189
    1af4:	ff 4f       	sbci	r31, 0xFF	; 255
    1af6:	80 e0       	ldi	r24, 0x00	; 0
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	a0 e7       	ldi	r26, 0x70	; 112
    1afc:	b1 e4       	ldi	r27, 0x41	; 65
    1afe:	80 83       	st	Z, r24
    1b00:	91 83       	std	Z+1, r25	; 0x01
    1b02:	a2 83       	std	Z+2, r26	; 0x02
    1b04:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b06:	8e 01       	movw	r16, r28
    1b08:	01 5c       	subi	r16, 0xC1	; 193
    1b0a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b0c:	fe 01       	movw	r30, r28
    1b0e:	ed 5b       	subi	r30, 0xBD	; 189
    1b10:	ff 4f       	sbci	r31, 0xFF	; 255
    1b12:	60 81       	ld	r22, Z
    1b14:	71 81       	ldd	r23, Z+1	; 0x01
    1b16:	82 81       	ldd	r24, Z+2	; 0x02
    1b18:	93 81       	ldd	r25, Z+3	; 0x03
    1b1a:	20 e0       	ldi	r18, 0x00	; 0
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	4a ef       	ldi	r20, 0xFA	; 250
    1b20:	54 e4       	ldi	r21, 0x44	; 68
    1b22:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b26:	dc 01       	movw	r26, r24
    1b28:	cb 01       	movw	r24, r22
    1b2a:	f8 01       	movw	r30, r16
    1b2c:	80 83       	st	Z, r24
    1b2e:	91 83       	std	Z+1, r25	; 0x01
    1b30:	a2 83       	std	Z+2, r26	; 0x02
    1b32:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b34:	fe 01       	movw	r30, r28
    1b36:	ff 96       	adiw	r30, 0x3f	; 63
    1b38:	60 81       	ld	r22, Z
    1b3a:	71 81       	ldd	r23, Z+1	; 0x01
    1b3c:	82 81       	ldd	r24, Z+2	; 0x02
    1b3e:	93 81       	ldd	r25, Z+3	; 0x03
    1b40:	20 e0       	ldi	r18, 0x00	; 0
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	40 e8       	ldi	r20, 0x80	; 128
    1b46:	5f e3       	ldi	r21, 0x3F	; 63
    1b48:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b4c:	88 23       	and	r24, r24
    1b4e:	2c f4       	brge	.+10     	; 0x1b5a <LCD_voidInit+0x216>
		__ticks = 1;
    1b50:	81 e0       	ldi	r24, 0x01	; 1
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	9e af       	std	Y+62, r25	; 0x3e
    1b56:	8d af       	std	Y+61, r24	; 0x3d
    1b58:	46 c0       	rjmp	.+140    	; 0x1be6 <LCD_voidInit+0x2a2>
	else if (__tmp > 65535)
    1b5a:	fe 01       	movw	r30, r28
    1b5c:	ff 96       	adiw	r30, 0x3f	; 63
    1b5e:	60 81       	ld	r22, Z
    1b60:	71 81       	ldd	r23, Z+1	; 0x01
    1b62:	82 81       	ldd	r24, Z+2	; 0x02
    1b64:	93 81       	ldd	r25, Z+3	; 0x03
    1b66:	20 e0       	ldi	r18, 0x00	; 0
    1b68:	3f ef       	ldi	r19, 0xFF	; 255
    1b6a:	4f e7       	ldi	r20, 0x7F	; 127
    1b6c:	57 e4       	ldi	r21, 0x47	; 71
    1b6e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b72:	18 16       	cp	r1, r24
    1b74:	64 f5       	brge	.+88     	; 0x1bce <LCD_voidInit+0x28a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b76:	fe 01       	movw	r30, r28
    1b78:	ed 5b       	subi	r30, 0xBD	; 189
    1b7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7c:	60 81       	ld	r22, Z
    1b7e:	71 81       	ldd	r23, Z+1	; 0x01
    1b80:	82 81       	ldd	r24, Z+2	; 0x02
    1b82:	93 81       	ldd	r25, Z+3	; 0x03
    1b84:	20 e0       	ldi	r18, 0x00	; 0
    1b86:	30 e0       	ldi	r19, 0x00	; 0
    1b88:	40 e2       	ldi	r20, 0x20	; 32
    1b8a:	51 e4       	ldi	r21, 0x41	; 65
    1b8c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b90:	dc 01       	movw	r26, r24
    1b92:	cb 01       	movw	r24, r22
    1b94:	bc 01       	movw	r22, r24
    1b96:	cd 01       	movw	r24, r26
    1b98:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b9c:	dc 01       	movw	r26, r24
    1b9e:	cb 01       	movw	r24, r22
    1ba0:	9e af       	std	Y+62, r25	; 0x3e
    1ba2:	8d af       	std	Y+61, r24	; 0x3d
    1ba4:	0f c0       	rjmp	.+30     	; 0x1bc4 <LCD_voidInit+0x280>
    1ba6:	88 ec       	ldi	r24, 0xC8	; 200
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	9c af       	std	Y+60, r25	; 0x3c
    1bac:	8b af       	std	Y+59, r24	; 0x3b
    1bae:	8b ad       	ldd	r24, Y+59	; 0x3b
    1bb0:	9c ad       	ldd	r25, Y+60	; 0x3c
    1bb2:	01 97       	sbiw	r24, 0x01	; 1
    1bb4:	f1 f7       	brne	.-4      	; 0x1bb2 <LCD_voidInit+0x26e>
    1bb6:	9c af       	std	Y+60, r25	; 0x3c
    1bb8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bba:	8d ad       	ldd	r24, Y+61	; 0x3d
    1bbc:	9e ad       	ldd	r25, Y+62	; 0x3e
    1bbe:	01 97       	sbiw	r24, 0x01	; 1
    1bc0:	9e af       	std	Y+62, r25	; 0x3e
    1bc2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bc4:	8d ad       	ldd	r24, Y+61	; 0x3d
    1bc6:	9e ad       	ldd	r25, Y+62	; 0x3e
    1bc8:	00 97       	sbiw	r24, 0x00	; 0
    1bca:	69 f7       	brne	.-38     	; 0x1ba6 <LCD_voidInit+0x262>
    1bcc:	16 c0       	rjmp	.+44     	; 0x1bfa <LCD_voidInit+0x2b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bce:	fe 01       	movw	r30, r28
    1bd0:	ff 96       	adiw	r30, 0x3f	; 63
    1bd2:	60 81       	ld	r22, Z
    1bd4:	71 81       	ldd	r23, Z+1	; 0x01
    1bd6:	82 81       	ldd	r24, Z+2	; 0x02
    1bd8:	93 81       	ldd	r25, Z+3	; 0x03
    1bda:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bde:	dc 01       	movw	r26, r24
    1be0:	cb 01       	movw	r24, r22
    1be2:	9e af       	std	Y+62, r25	; 0x3e
    1be4:	8d af       	std	Y+61, r24	; 0x3d
    1be6:	8d ad       	ldd	r24, Y+61	; 0x3d
    1be8:	9e ad       	ldd	r25, Y+62	; 0x3e
    1bea:	9a af       	std	Y+58, r25	; 0x3a
    1bec:	89 af       	std	Y+57, r24	; 0x39
    1bee:	89 ad       	ldd	r24, Y+57	; 0x39
    1bf0:	9a ad       	ldd	r25, Y+58	; 0x3a
    1bf2:	01 97       	sbiw	r24, 0x01	; 1
    1bf4:	f1 f7       	brne	.-4      	; 0x1bf2 <LCD_voidInit+0x2ae>
    1bf6:	9a af       	std	Y+58, r25	; 0x3a
    1bf8:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(15);
			LCD_voidSendCmd(LCD_Function_4BIT_2Lines);
    1bfa:	88 e2       	ldi	r24, 0x28	; 40
    1bfc:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <LCD_voidSendCmd>
    1c00:	80 e0       	ldi	r24, 0x00	; 0
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	a0 e8       	ldi	r26, 0x80	; 128
    1c06:	bf e3       	ldi	r27, 0x3F	; 63
    1c08:	8d ab       	std	Y+53, r24	; 0x35
    1c0a:	9e ab       	std	Y+54, r25	; 0x36
    1c0c:	af ab       	std	Y+55, r26	; 0x37
    1c0e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c10:	6d a9       	ldd	r22, Y+53	; 0x35
    1c12:	7e a9       	ldd	r23, Y+54	; 0x36
    1c14:	8f a9       	ldd	r24, Y+55	; 0x37
    1c16:	98 ad       	ldd	r25, Y+56	; 0x38
    1c18:	20 e0       	ldi	r18, 0x00	; 0
    1c1a:	30 e0       	ldi	r19, 0x00	; 0
    1c1c:	4a ef       	ldi	r20, 0xFA	; 250
    1c1e:	54 e4       	ldi	r21, 0x44	; 68
    1c20:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c24:	dc 01       	movw	r26, r24
    1c26:	cb 01       	movw	r24, r22
    1c28:	89 ab       	std	Y+49, r24	; 0x31
    1c2a:	9a ab       	std	Y+50, r25	; 0x32
    1c2c:	ab ab       	std	Y+51, r26	; 0x33
    1c2e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c30:	69 a9       	ldd	r22, Y+49	; 0x31
    1c32:	7a a9       	ldd	r23, Y+50	; 0x32
    1c34:	8b a9       	ldd	r24, Y+51	; 0x33
    1c36:	9c a9       	ldd	r25, Y+52	; 0x34
    1c38:	20 e0       	ldi	r18, 0x00	; 0
    1c3a:	30 e0       	ldi	r19, 0x00	; 0
    1c3c:	40 e8       	ldi	r20, 0x80	; 128
    1c3e:	5f e3       	ldi	r21, 0x3F	; 63
    1c40:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c44:	88 23       	and	r24, r24
    1c46:	2c f4       	brge	.+10     	; 0x1c52 <LCD_voidInit+0x30e>
		__ticks = 1;
    1c48:	81 e0       	ldi	r24, 0x01	; 1
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	98 ab       	std	Y+48, r25	; 0x30
    1c4e:	8f a7       	std	Y+47, r24	; 0x2f
    1c50:	3f c0       	rjmp	.+126    	; 0x1cd0 <LCD_voidInit+0x38c>
	else if (__tmp > 65535)
    1c52:	69 a9       	ldd	r22, Y+49	; 0x31
    1c54:	7a a9       	ldd	r23, Y+50	; 0x32
    1c56:	8b a9       	ldd	r24, Y+51	; 0x33
    1c58:	9c a9       	ldd	r25, Y+52	; 0x34
    1c5a:	20 e0       	ldi	r18, 0x00	; 0
    1c5c:	3f ef       	ldi	r19, 0xFF	; 255
    1c5e:	4f e7       	ldi	r20, 0x7F	; 127
    1c60:	57 e4       	ldi	r21, 0x47	; 71
    1c62:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c66:	18 16       	cp	r1, r24
    1c68:	4c f5       	brge	.+82     	; 0x1cbc <LCD_voidInit+0x378>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c6a:	6d a9       	ldd	r22, Y+53	; 0x35
    1c6c:	7e a9       	ldd	r23, Y+54	; 0x36
    1c6e:	8f a9       	ldd	r24, Y+55	; 0x37
    1c70:	98 ad       	ldd	r25, Y+56	; 0x38
    1c72:	20 e0       	ldi	r18, 0x00	; 0
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	40 e2       	ldi	r20, 0x20	; 32
    1c78:	51 e4       	ldi	r21, 0x41	; 65
    1c7a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c7e:	dc 01       	movw	r26, r24
    1c80:	cb 01       	movw	r24, r22
    1c82:	bc 01       	movw	r22, r24
    1c84:	cd 01       	movw	r24, r26
    1c86:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c8a:	dc 01       	movw	r26, r24
    1c8c:	cb 01       	movw	r24, r22
    1c8e:	98 ab       	std	Y+48, r25	; 0x30
    1c90:	8f a7       	std	Y+47, r24	; 0x2f
    1c92:	0f c0       	rjmp	.+30     	; 0x1cb2 <LCD_voidInit+0x36e>
    1c94:	88 ec       	ldi	r24, 0xC8	; 200
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	9e a7       	std	Y+46, r25	; 0x2e
    1c9a:	8d a7       	std	Y+45, r24	; 0x2d
    1c9c:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c9e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ca0:	01 97       	sbiw	r24, 0x01	; 1
    1ca2:	f1 f7       	brne	.-4      	; 0x1ca0 <LCD_voidInit+0x35c>
    1ca4:	9e a7       	std	Y+46, r25	; 0x2e
    1ca6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ca8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1caa:	98 a9       	ldd	r25, Y+48	; 0x30
    1cac:	01 97       	sbiw	r24, 0x01	; 1
    1cae:	98 ab       	std	Y+48, r25	; 0x30
    1cb0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cb2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cb4:	98 a9       	ldd	r25, Y+48	; 0x30
    1cb6:	00 97       	sbiw	r24, 0x00	; 0
    1cb8:	69 f7       	brne	.-38     	; 0x1c94 <LCD_voidInit+0x350>
    1cba:	14 c0       	rjmp	.+40     	; 0x1ce4 <LCD_voidInit+0x3a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cbc:	69 a9       	ldd	r22, Y+49	; 0x31
    1cbe:	7a a9       	ldd	r23, Y+50	; 0x32
    1cc0:	8b a9       	ldd	r24, Y+51	; 0x33
    1cc2:	9c a9       	ldd	r25, Y+52	; 0x34
    1cc4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cc8:	dc 01       	movw	r26, r24
    1cca:	cb 01       	movw	r24, r22
    1ccc:	98 ab       	std	Y+48, r25	; 0x30
    1cce:	8f a7       	std	Y+47, r24	; 0x2f
    1cd0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cd2:	98 a9       	ldd	r25, Y+48	; 0x30
    1cd4:	9c a7       	std	Y+44, r25	; 0x2c
    1cd6:	8b a7       	std	Y+43, r24	; 0x2b
    1cd8:	8b a5       	ldd	r24, Y+43	; 0x2b
    1cda:	9c a5       	ldd	r25, Y+44	; 0x2c
    1cdc:	01 97       	sbiw	r24, 0x01	; 1
    1cde:	f1 f7       	brne	.-4      	; 0x1cdc <LCD_voidInit+0x398>
    1ce0:	9c a7       	std	Y+44, r25	; 0x2c
    1ce2:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(1);
		    LCD_voidSendCmd(LCD_DISP_ON_CURSOR_ON);
    1ce4:	8e e0       	ldi	r24, 0x0E	; 14
    1ce6:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <LCD_voidSendCmd>
    1cea:	80 e0       	ldi	r24, 0x00	; 0
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	a0 e8       	ldi	r26, 0x80	; 128
    1cf0:	bf e3       	ldi	r27, 0x3F	; 63
    1cf2:	8f a3       	std	Y+39, r24	; 0x27
    1cf4:	98 a7       	std	Y+40, r25	; 0x28
    1cf6:	a9 a7       	std	Y+41, r26	; 0x29
    1cf8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cfa:	6f a1       	ldd	r22, Y+39	; 0x27
    1cfc:	78 a5       	ldd	r23, Y+40	; 0x28
    1cfe:	89 a5       	ldd	r24, Y+41	; 0x29
    1d00:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d02:	20 e0       	ldi	r18, 0x00	; 0
    1d04:	30 e0       	ldi	r19, 0x00	; 0
    1d06:	4a ef       	ldi	r20, 0xFA	; 250
    1d08:	54 e4       	ldi	r21, 0x44	; 68
    1d0a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d0e:	dc 01       	movw	r26, r24
    1d10:	cb 01       	movw	r24, r22
    1d12:	8b a3       	std	Y+35, r24	; 0x23
    1d14:	9c a3       	std	Y+36, r25	; 0x24
    1d16:	ad a3       	std	Y+37, r26	; 0x25
    1d18:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d1a:	6b a1       	ldd	r22, Y+35	; 0x23
    1d1c:	7c a1       	ldd	r23, Y+36	; 0x24
    1d1e:	8d a1       	ldd	r24, Y+37	; 0x25
    1d20:	9e a1       	ldd	r25, Y+38	; 0x26
    1d22:	20 e0       	ldi	r18, 0x00	; 0
    1d24:	30 e0       	ldi	r19, 0x00	; 0
    1d26:	40 e8       	ldi	r20, 0x80	; 128
    1d28:	5f e3       	ldi	r21, 0x3F	; 63
    1d2a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d2e:	88 23       	and	r24, r24
    1d30:	2c f4       	brge	.+10     	; 0x1d3c <LCD_voidInit+0x3f8>
		__ticks = 1;
    1d32:	81 e0       	ldi	r24, 0x01	; 1
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	9a a3       	std	Y+34, r25	; 0x22
    1d38:	89 a3       	std	Y+33, r24	; 0x21
    1d3a:	3f c0       	rjmp	.+126    	; 0x1dba <LCD_voidInit+0x476>
	else if (__tmp > 65535)
    1d3c:	6b a1       	ldd	r22, Y+35	; 0x23
    1d3e:	7c a1       	ldd	r23, Y+36	; 0x24
    1d40:	8d a1       	ldd	r24, Y+37	; 0x25
    1d42:	9e a1       	ldd	r25, Y+38	; 0x26
    1d44:	20 e0       	ldi	r18, 0x00	; 0
    1d46:	3f ef       	ldi	r19, 0xFF	; 255
    1d48:	4f e7       	ldi	r20, 0x7F	; 127
    1d4a:	57 e4       	ldi	r21, 0x47	; 71
    1d4c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d50:	18 16       	cp	r1, r24
    1d52:	4c f5       	brge	.+82     	; 0x1da6 <LCD_voidInit+0x462>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d54:	6f a1       	ldd	r22, Y+39	; 0x27
    1d56:	78 a5       	ldd	r23, Y+40	; 0x28
    1d58:	89 a5       	ldd	r24, Y+41	; 0x29
    1d5a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d5c:	20 e0       	ldi	r18, 0x00	; 0
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	40 e2       	ldi	r20, 0x20	; 32
    1d62:	51 e4       	ldi	r21, 0x41	; 65
    1d64:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d68:	dc 01       	movw	r26, r24
    1d6a:	cb 01       	movw	r24, r22
    1d6c:	bc 01       	movw	r22, r24
    1d6e:	cd 01       	movw	r24, r26
    1d70:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d74:	dc 01       	movw	r26, r24
    1d76:	cb 01       	movw	r24, r22
    1d78:	9a a3       	std	Y+34, r25	; 0x22
    1d7a:	89 a3       	std	Y+33, r24	; 0x21
    1d7c:	0f c0       	rjmp	.+30     	; 0x1d9c <LCD_voidInit+0x458>
    1d7e:	88 ec       	ldi	r24, 0xC8	; 200
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	98 a3       	std	Y+32, r25	; 0x20
    1d84:	8f 8f       	std	Y+31, r24	; 0x1f
    1d86:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d88:	98 a1       	ldd	r25, Y+32	; 0x20
    1d8a:	01 97       	sbiw	r24, 0x01	; 1
    1d8c:	f1 f7       	brne	.-4      	; 0x1d8a <LCD_voidInit+0x446>
    1d8e:	98 a3       	std	Y+32, r25	; 0x20
    1d90:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d92:	89 a1       	ldd	r24, Y+33	; 0x21
    1d94:	9a a1       	ldd	r25, Y+34	; 0x22
    1d96:	01 97       	sbiw	r24, 0x01	; 1
    1d98:	9a a3       	std	Y+34, r25	; 0x22
    1d9a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d9c:	89 a1       	ldd	r24, Y+33	; 0x21
    1d9e:	9a a1       	ldd	r25, Y+34	; 0x22
    1da0:	00 97       	sbiw	r24, 0x00	; 0
    1da2:	69 f7       	brne	.-38     	; 0x1d7e <LCD_voidInit+0x43a>
    1da4:	14 c0       	rjmp	.+40     	; 0x1dce <LCD_voidInit+0x48a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1da6:	6b a1       	ldd	r22, Y+35	; 0x23
    1da8:	7c a1       	ldd	r23, Y+36	; 0x24
    1daa:	8d a1       	ldd	r24, Y+37	; 0x25
    1dac:	9e a1       	ldd	r25, Y+38	; 0x26
    1dae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1db2:	dc 01       	movw	r26, r24
    1db4:	cb 01       	movw	r24, r22
    1db6:	9a a3       	std	Y+34, r25	; 0x22
    1db8:	89 a3       	std	Y+33, r24	; 0x21
    1dba:	89 a1       	ldd	r24, Y+33	; 0x21
    1dbc:	9a a1       	ldd	r25, Y+34	; 0x22
    1dbe:	9e 8f       	std	Y+30, r25	; 0x1e
    1dc0:	8d 8f       	std	Y+29, r24	; 0x1d
    1dc2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1dc4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1dc6:	01 97       	sbiw	r24, 0x01	; 1
    1dc8:	f1 f7       	brne	.-4      	; 0x1dc6 <LCD_voidInit+0x482>
    1dca:	9e 8f       	std	Y+30, r25	; 0x1e
    1dcc:	8d 8f       	std	Y+29, r24	; 0x1d
		    _delay_ms(1);
		    LCD_voidSendCmd(LCD_CLEAR_SCREEN);
    1dce:	81 e0       	ldi	r24, 0x01	; 1
    1dd0:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <LCD_voidSendCmd>
    1dd4:	80 e0       	ldi	r24, 0x00	; 0
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	a0 e2       	ldi	r26, 0x20	; 32
    1dda:	b1 e4       	ldi	r27, 0x41	; 65
    1ddc:	89 8f       	std	Y+25, r24	; 0x19
    1dde:	9a 8f       	std	Y+26, r25	; 0x1a
    1de0:	ab 8f       	std	Y+27, r26	; 0x1b
    1de2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1de4:	69 8d       	ldd	r22, Y+25	; 0x19
    1de6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1de8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dec:	20 e0       	ldi	r18, 0x00	; 0
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	4a ef       	ldi	r20, 0xFA	; 250
    1df2:	54 e4       	ldi	r21, 0x44	; 68
    1df4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1df8:	dc 01       	movw	r26, r24
    1dfa:	cb 01       	movw	r24, r22
    1dfc:	8d 8b       	std	Y+21, r24	; 0x15
    1dfe:	9e 8b       	std	Y+22, r25	; 0x16
    1e00:	af 8b       	std	Y+23, r26	; 0x17
    1e02:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e04:	6d 89       	ldd	r22, Y+21	; 0x15
    1e06:	7e 89       	ldd	r23, Y+22	; 0x16
    1e08:	8f 89       	ldd	r24, Y+23	; 0x17
    1e0a:	98 8d       	ldd	r25, Y+24	; 0x18
    1e0c:	20 e0       	ldi	r18, 0x00	; 0
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	40 e8       	ldi	r20, 0x80	; 128
    1e12:	5f e3       	ldi	r21, 0x3F	; 63
    1e14:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1e18:	88 23       	and	r24, r24
    1e1a:	2c f4       	brge	.+10     	; 0x1e26 <LCD_voidInit+0x4e2>
		__ticks = 1;
    1e1c:	81 e0       	ldi	r24, 0x01	; 1
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	9c 8b       	std	Y+20, r25	; 0x14
    1e22:	8b 8b       	std	Y+19, r24	; 0x13
    1e24:	3f c0       	rjmp	.+126    	; 0x1ea4 <LCD_voidInit+0x560>
	else if (__tmp > 65535)
    1e26:	6d 89       	ldd	r22, Y+21	; 0x15
    1e28:	7e 89       	ldd	r23, Y+22	; 0x16
    1e2a:	8f 89       	ldd	r24, Y+23	; 0x17
    1e2c:	98 8d       	ldd	r25, Y+24	; 0x18
    1e2e:	20 e0       	ldi	r18, 0x00	; 0
    1e30:	3f ef       	ldi	r19, 0xFF	; 255
    1e32:	4f e7       	ldi	r20, 0x7F	; 127
    1e34:	57 e4       	ldi	r21, 0x47	; 71
    1e36:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e3a:	18 16       	cp	r1, r24
    1e3c:	4c f5       	brge	.+82     	; 0x1e90 <LCD_voidInit+0x54c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e3e:	69 8d       	ldd	r22, Y+25	; 0x19
    1e40:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e42:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e44:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e46:	20 e0       	ldi	r18, 0x00	; 0
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	40 e2       	ldi	r20, 0x20	; 32
    1e4c:	51 e4       	ldi	r21, 0x41	; 65
    1e4e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e52:	dc 01       	movw	r26, r24
    1e54:	cb 01       	movw	r24, r22
    1e56:	bc 01       	movw	r22, r24
    1e58:	cd 01       	movw	r24, r26
    1e5a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e5e:	dc 01       	movw	r26, r24
    1e60:	cb 01       	movw	r24, r22
    1e62:	9c 8b       	std	Y+20, r25	; 0x14
    1e64:	8b 8b       	std	Y+19, r24	; 0x13
    1e66:	0f c0       	rjmp	.+30     	; 0x1e86 <LCD_voidInit+0x542>
    1e68:	88 ec       	ldi	r24, 0xC8	; 200
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	9a 8b       	std	Y+18, r25	; 0x12
    1e6e:	89 8b       	std	Y+17, r24	; 0x11
    1e70:	89 89       	ldd	r24, Y+17	; 0x11
    1e72:	9a 89       	ldd	r25, Y+18	; 0x12
    1e74:	01 97       	sbiw	r24, 0x01	; 1
    1e76:	f1 f7       	brne	.-4      	; 0x1e74 <LCD_voidInit+0x530>
    1e78:	9a 8b       	std	Y+18, r25	; 0x12
    1e7a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e7c:	8b 89       	ldd	r24, Y+19	; 0x13
    1e7e:	9c 89       	ldd	r25, Y+20	; 0x14
    1e80:	01 97       	sbiw	r24, 0x01	; 1
    1e82:	9c 8b       	std	Y+20, r25	; 0x14
    1e84:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e86:	8b 89       	ldd	r24, Y+19	; 0x13
    1e88:	9c 89       	ldd	r25, Y+20	; 0x14
    1e8a:	00 97       	sbiw	r24, 0x00	; 0
    1e8c:	69 f7       	brne	.-38     	; 0x1e68 <LCD_voidInit+0x524>
    1e8e:	14 c0       	rjmp	.+40     	; 0x1eb8 <LCD_voidInit+0x574>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e90:	6d 89       	ldd	r22, Y+21	; 0x15
    1e92:	7e 89       	ldd	r23, Y+22	; 0x16
    1e94:	8f 89       	ldd	r24, Y+23	; 0x17
    1e96:	98 8d       	ldd	r25, Y+24	; 0x18
    1e98:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e9c:	dc 01       	movw	r26, r24
    1e9e:	cb 01       	movw	r24, r22
    1ea0:	9c 8b       	std	Y+20, r25	; 0x14
    1ea2:	8b 8b       	std	Y+19, r24	; 0x13
    1ea4:	8b 89       	ldd	r24, Y+19	; 0x13
    1ea6:	9c 89       	ldd	r25, Y+20	; 0x14
    1ea8:	98 8b       	std	Y+16, r25	; 0x10
    1eaa:	8f 87       	std	Y+15, r24	; 0x0f
    1eac:	8f 85       	ldd	r24, Y+15	; 0x0f
    1eae:	98 89       	ldd	r25, Y+16	; 0x10
    1eb0:	01 97       	sbiw	r24, 0x01	; 1
    1eb2:	f1 f7       	brne	.-4      	; 0x1eb0 <LCD_voidInit+0x56c>
    1eb4:	98 8b       	std	Y+16, r25	; 0x10
    1eb6:	8f 87       	std	Y+15, r24	; 0x0f
		    _delay_ms(10);
		    LCD_voidSendCmd(LCD_ENTRY_MODE);
    1eb8:	86 e0       	ldi	r24, 0x06	; 6
    1eba:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <LCD_voidSendCmd>
    1ebe:	80 e0       	ldi	r24, 0x00	; 0
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	a0 e8       	ldi	r26, 0x80	; 128
    1ec4:	bf e3       	ldi	r27, 0x3F	; 63
    1ec6:	8b 87       	std	Y+11, r24	; 0x0b
    1ec8:	9c 87       	std	Y+12, r25	; 0x0c
    1eca:	ad 87       	std	Y+13, r26	; 0x0d
    1ecc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ece:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ed0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ed2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ed4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ed6:	20 e0       	ldi	r18, 0x00	; 0
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	4a ef       	ldi	r20, 0xFA	; 250
    1edc:	54 e4       	ldi	r21, 0x44	; 68
    1ede:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ee2:	dc 01       	movw	r26, r24
    1ee4:	cb 01       	movw	r24, r22
    1ee6:	8f 83       	std	Y+7, r24	; 0x07
    1ee8:	98 87       	std	Y+8, r25	; 0x08
    1eea:	a9 87       	std	Y+9, r26	; 0x09
    1eec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1eee:	6f 81       	ldd	r22, Y+7	; 0x07
    1ef0:	78 85       	ldd	r23, Y+8	; 0x08
    1ef2:	89 85       	ldd	r24, Y+9	; 0x09
    1ef4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ef6:	20 e0       	ldi	r18, 0x00	; 0
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	40 e8       	ldi	r20, 0x80	; 128
    1efc:	5f e3       	ldi	r21, 0x3F	; 63
    1efe:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f02:	88 23       	and	r24, r24
    1f04:	2c f4       	brge	.+10     	; 0x1f10 <LCD_voidInit+0x5cc>
		__ticks = 1;
    1f06:	81 e0       	ldi	r24, 0x01	; 1
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	9e 83       	std	Y+6, r25	; 0x06
    1f0c:	8d 83       	std	Y+5, r24	; 0x05
    1f0e:	3f c0       	rjmp	.+126    	; 0x1f8e <LCD_voidInit+0x64a>
	else if (__tmp > 65535)
    1f10:	6f 81       	ldd	r22, Y+7	; 0x07
    1f12:	78 85       	ldd	r23, Y+8	; 0x08
    1f14:	89 85       	ldd	r24, Y+9	; 0x09
    1f16:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f18:	20 e0       	ldi	r18, 0x00	; 0
    1f1a:	3f ef       	ldi	r19, 0xFF	; 255
    1f1c:	4f e7       	ldi	r20, 0x7F	; 127
    1f1e:	57 e4       	ldi	r21, 0x47	; 71
    1f20:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f24:	18 16       	cp	r1, r24
    1f26:	4c f5       	brge	.+82     	; 0x1f7a <LCD_voidInit+0x636>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f28:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f30:	20 e0       	ldi	r18, 0x00	; 0
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	40 e2       	ldi	r20, 0x20	; 32
    1f36:	51 e4       	ldi	r21, 0x41	; 65
    1f38:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f3c:	dc 01       	movw	r26, r24
    1f3e:	cb 01       	movw	r24, r22
    1f40:	bc 01       	movw	r22, r24
    1f42:	cd 01       	movw	r24, r26
    1f44:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f48:	dc 01       	movw	r26, r24
    1f4a:	cb 01       	movw	r24, r22
    1f4c:	9e 83       	std	Y+6, r25	; 0x06
    1f4e:	8d 83       	std	Y+5, r24	; 0x05
    1f50:	0f c0       	rjmp	.+30     	; 0x1f70 <LCD_voidInit+0x62c>
    1f52:	88 ec       	ldi	r24, 0xC8	; 200
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	9c 83       	std	Y+4, r25	; 0x04
    1f58:	8b 83       	std	Y+3, r24	; 0x03
    1f5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f5e:	01 97       	sbiw	r24, 0x01	; 1
    1f60:	f1 f7       	brne	.-4      	; 0x1f5e <LCD_voidInit+0x61a>
    1f62:	9c 83       	std	Y+4, r25	; 0x04
    1f64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f66:	8d 81       	ldd	r24, Y+5	; 0x05
    1f68:	9e 81       	ldd	r25, Y+6	; 0x06
    1f6a:	01 97       	sbiw	r24, 0x01	; 1
    1f6c:	9e 83       	std	Y+6, r25	; 0x06
    1f6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f70:	8d 81       	ldd	r24, Y+5	; 0x05
    1f72:	9e 81       	ldd	r25, Y+6	; 0x06
    1f74:	00 97       	sbiw	r24, 0x00	; 0
    1f76:	69 f7       	brne	.-38     	; 0x1f52 <LCD_voidInit+0x60e>
    1f78:	14 c0       	rjmp	.+40     	; 0x1fa2 <LCD_voidInit+0x65e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f7a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f7c:	78 85       	ldd	r23, Y+8	; 0x08
    1f7e:	89 85       	ldd	r24, Y+9	; 0x09
    1f80:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f82:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f86:	dc 01       	movw	r26, r24
    1f88:	cb 01       	movw	r24, r22
    1f8a:	9e 83       	std	Y+6, r25	; 0x06
    1f8c:	8d 83       	std	Y+5, r24	; 0x05
    1f8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f90:	9e 81       	ldd	r25, Y+6	; 0x06
    1f92:	9a 83       	std	Y+2, r25	; 0x02
    1f94:	89 83       	std	Y+1, r24	; 0x01
    1f96:	89 81       	ldd	r24, Y+1	; 0x01
    1f98:	9a 81       	ldd	r25, Y+2	; 0x02
    1f9a:	01 97       	sbiw	r24, 0x01	; 1
    1f9c:	f1 f7       	brne	.-4      	; 0x1f9a <LCD_voidInit+0x656>
    1f9e:	9a 83       	std	Y+2, r25	; 0x02
    1fa0:	89 83       	std	Y+1, r24	; 0x01
	#endif
	
	
	

}
    1fa2:	cc 5a       	subi	r28, 0xAC	; 172
    1fa4:	df 4f       	sbci	r29, 0xFF	; 255
    1fa6:	0f b6       	in	r0, 0x3f	; 63
    1fa8:	f8 94       	cli
    1faa:	de bf       	out	0x3e, r29	; 62
    1fac:	0f be       	out	0x3f, r0	; 63
    1fae:	cd bf       	out	0x3d, r28	; 61
    1fb0:	cf 91       	pop	r28
    1fb2:	df 91       	pop	r29
    1fb4:	1f 91       	pop	r17
    1fb6:	0f 91       	pop	r16
    1fb8:	08 95       	ret

00001fba <LCD_voidSendCmd>:

void LCD_voidSendCmd(u8 copy_u8Cmd)
{
    1fba:	df 93       	push	r29
    1fbc:	cf 93       	push	r28
    1fbe:	cd b7       	in	r28, 0x3d	; 61
    1fc0:	de b7       	in	r29, 0x3e	; 62
    1fc2:	2f 97       	sbiw	r28, 0x0f	; 15
    1fc4:	0f b6       	in	r0, 0x3f	; 63
    1fc6:	f8 94       	cli
    1fc8:	de bf       	out	0x3e, r29	; 62
    1fca:	0f be       	out	0x3f, r0	; 63
    1fcc:	cd bf       	out	0x3d, r28	; 61
    1fce:	8f 87       	std	Y+15, r24	; 0x0f
		GPIO_voidWritePin  (LCD_RWPORT , LCD_RWPIN , 0);
		LCD_voidSendEnPulse();
		
	#elif LCD_MODE == 1 
		#if LCD_NIBBLE == 0 
			GPIO_voidWriteLowNipple(LCD_PORT , copy_u8Cmd>>4);
    1fd0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fd2:	98 2f       	mov	r25, r24
    1fd4:	92 95       	swap	r25
    1fd6:	9f 70       	andi	r25, 0x0F	; 15
    1fd8:	80 e0       	ldi	r24, 0x00	; 0
    1fda:	69 2f       	mov	r22, r25
    1fdc:	0e 94 0b 0a 	call	0x1416	; 0x1416 <GPIO_voidWriteLowNipple>
			GPIO_voidWritePin  (LCD_RSPORT , LCD_RSPIN , 0);
    1fe0:	80 e0       	ldi	r24, 0x00	; 0
    1fe2:	64 e0       	ldi	r22, 0x04	; 4
    1fe4:	40 e0       	ldi	r20, 0x00	; 0
    1fe6:	0e 94 2b 07 	call	0xe56	; 0xe56 <GPIO_voidWritePin>
			GPIO_voidWritePin  (LCD_RWPORT , LCD_RWPIN , 0);
    1fea:	80 e0       	ldi	r24, 0x00	; 0
    1fec:	65 e0       	ldi	r22, 0x05	; 5
    1fee:	40 e0       	ldi	r20, 0x00	; 0
    1ff0:	0e 94 2b 07 	call	0xe56	; 0xe56 <GPIO_voidWritePin>
			LCD_voidSendEnPulse();
    1ff4:	0e 94 87 10 	call	0x210e	; 0x210e <LCD_voidSendEnPulse>
		
			GPIO_voidWriteLowNipple(LCD_PORT , copy_u8Cmd);
    1ff8:	80 e0       	ldi	r24, 0x00	; 0
    1ffa:	6f 85       	ldd	r22, Y+15	; 0x0f
    1ffc:	0e 94 0b 0a 	call	0x1416	; 0x1416 <GPIO_voidWriteLowNipple>
			GPIO_voidWritePin  (LCD_RSPORT , LCD_RSPIN , 0);
    2000:	80 e0       	ldi	r24, 0x00	; 0
    2002:	64 e0       	ldi	r22, 0x04	; 4
    2004:	40 e0       	ldi	r20, 0x00	; 0
    2006:	0e 94 2b 07 	call	0xe56	; 0xe56 <GPIO_voidWritePin>
			GPIO_voidWritePin  (LCD_RWPORT , LCD_RWPIN , 0);
    200a:	80 e0       	ldi	r24, 0x00	; 0
    200c:	65 e0       	ldi	r22, 0x05	; 5
    200e:	40 e0       	ldi	r20, 0x00	; 0
    2010:	0e 94 2b 07 	call	0xe56	; 0xe56 <GPIO_voidWritePin>
			LCD_voidSendEnPulse();
    2014:	0e 94 87 10 	call	0x210e	; 0x210e <LCD_voidSendEnPulse>
    2018:	80 e0       	ldi	r24, 0x00	; 0
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	a0 e0       	ldi	r26, 0x00	; 0
    201e:	b0 e4       	ldi	r27, 0x40	; 64
    2020:	8b 87       	std	Y+11, r24	; 0x0b
    2022:	9c 87       	std	Y+12, r25	; 0x0c
    2024:	ad 87       	std	Y+13, r26	; 0x0d
    2026:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2028:	6b 85       	ldd	r22, Y+11	; 0x0b
    202a:	7c 85       	ldd	r23, Y+12	; 0x0c
    202c:	8d 85       	ldd	r24, Y+13	; 0x0d
    202e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2030:	20 e0       	ldi	r18, 0x00	; 0
    2032:	30 e0       	ldi	r19, 0x00	; 0
    2034:	4a ef       	ldi	r20, 0xFA	; 250
    2036:	54 e4       	ldi	r21, 0x44	; 68
    2038:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    203c:	dc 01       	movw	r26, r24
    203e:	cb 01       	movw	r24, r22
    2040:	8f 83       	std	Y+7, r24	; 0x07
    2042:	98 87       	std	Y+8, r25	; 0x08
    2044:	a9 87       	std	Y+9, r26	; 0x09
    2046:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2048:	6f 81       	ldd	r22, Y+7	; 0x07
    204a:	78 85       	ldd	r23, Y+8	; 0x08
    204c:	89 85       	ldd	r24, Y+9	; 0x09
    204e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2050:	20 e0       	ldi	r18, 0x00	; 0
    2052:	30 e0       	ldi	r19, 0x00	; 0
    2054:	40 e8       	ldi	r20, 0x80	; 128
    2056:	5f e3       	ldi	r21, 0x3F	; 63
    2058:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    205c:	88 23       	and	r24, r24
    205e:	2c f4       	brge	.+10     	; 0x206a <LCD_voidSendCmd+0xb0>
		__ticks = 1;
    2060:	81 e0       	ldi	r24, 0x01	; 1
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	9e 83       	std	Y+6, r25	; 0x06
    2066:	8d 83       	std	Y+5, r24	; 0x05
    2068:	3f c0       	rjmp	.+126    	; 0x20e8 <LCD_voidSendCmd+0x12e>
	else if (__tmp > 65535)
    206a:	6f 81       	ldd	r22, Y+7	; 0x07
    206c:	78 85       	ldd	r23, Y+8	; 0x08
    206e:	89 85       	ldd	r24, Y+9	; 0x09
    2070:	9a 85       	ldd	r25, Y+10	; 0x0a
    2072:	20 e0       	ldi	r18, 0x00	; 0
    2074:	3f ef       	ldi	r19, 0xFF	; 255
    2076:	4f e7       	ldi	r20, 0x7F	; 127
    2078:	57 e4       	ldi	r21, 0x47	; 71
    207a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    207e:	18 16       	cp	r1, r24
    2080:	4c f5       	brge	.+82     	; 0x20d4 <LCD_voidSendCmd+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2082:	6b 85       	ldd	r22, Y+11	; 0x0b
    2084:	7c 85       	ldd	r23, Y+12	; 0x0c
    2086:	8d 85       	ldd	r24, Y+13	; 0x0d
    2088:	9e 85       	ldd	r25, Y+14	; 0x0e
    208a:	20 e0       	ldi	r18, 0x00	; 0
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	40 e2       	ldi	r20, 0x20	; 32
    2090:	51 e4       	ldi	r21, 0x41	; 65
    2092:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2096:	dc 01       	movw	r26, r24
    2098:	cb 01       	movw	r24, r22
    209a:	bc 01       	movw	r22, r24
    209c:	cd 01       	movw	r24, r26
    209e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20a2:	dc 01       	movw	r26, r24
    20a4:	cb 01       	movw	r24, r22
    20a6:	9e 83       	std	Y+6, r25	; 0x06
    20a8:	8d 83       	std	Y+5, r24	; 0x05
    20aa:	0f c0       	rjmp	.+30     	; 0x20ca <LCD_voidSendCmd+0x110>
    20ac:	88 ec       	ldi	r24, 0xC8	; 200
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	9c 83       	std	Y+4, r25	; 0x04
    20b2:	8b 83       	std	Y+3, r24	; 0x03
    20b4:	8b 81       	ldd	r24, Y+3	; 0x03
    20b6:	9c 81       	ldd	r25, Y+4	; 0x04
    20b8:	01 97       	sbiw	r24, 0x01	; 1
    20ba:	f1 f7       	brne	.-4      	; 0x20b8 <LCD_voidSendCmd+0xfe>
    20bc:	9c 83       	std	Y+4, r25	; 0x04
    20be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20c0:	8d 81       	ldd	r24, Y+5	; 0x05
    20c2:	9e 81       	ldd	r25, Y+6	; 0x06
    20c4:	01 97       	sbiw	r24, 0x01	; 1
    20c6:	9e 83       	std	Y+6, r25	; 0x06
    20c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ca:	8d 81       	ldd	r24, Y+5	; 0x05
    20cc:	9e 81       	ldd	r25, Y+6	; 0x06
    20ce:	00 97       	sbiw	r24, 0x00	; 0
    20d0:	69 f7       	brne	.-38     	; 0x20ac <LCD_voidSendCmd+0xf2>
    20d2:	14 c0       	rjmp	.+40     	; 0x20fc <LCD_voidSendCmd+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20d4:	6f 81       	ldd	r22, Y+7	; 0x07
    20d6:	78 85       	ldd	r23, Y+8	; 0x08
    20d8:	89 85       	ldd	r24, Y+9	; 0x09
    20da:	9a 85       	ldd	r25, Y+10	; 0x0a
    20dc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20e0:	dc 01       	movw	r26, r24
    20e2:	cb 01       	movw	r24, r22
    20e4:	9e 83       	std	Y+6, r25	; 0x06
    20e6:	8d 83       	std	Y+5, r24	; 0x05
    20e8:	8d 81       	ldd	r24, Y+5	; 0x05
    20ea:	9e 81       	ldd	r25, Y+6	; 0x06
    20ec:	9a 83       	std	Y+2, r25	; 0x02
    20ee:	89 83       	std	Y+1, r24	; 0x01
    20f0:	89 81       	ldd	r24, Y+1	; 0x01
    20f2:	9a 81       	ldd	r25, Y+2	; 0x02
    20f4:	01 97       	sbiw	r24, 0x01	; 1
    20f6:	f1 f7       	brne	.-4      	; 0x20f4 <LCD_voidSendCmd+0x13a>
    20f8:	9a 83       	std	Y+2, r25	; 0x02
    20fa:	89 83       	std	Y+1, r24	; 0x01
			LCD_voidSendEnPulse();
			_delay_ms(2);
		#endif
	#endif
	
}
    20fc:	2f 96       	adiw	r28, 0x0f	; 15
    20fe:	0f b6       	in	r0, 0x3f	; 63
    2100:	f8 94       	cli
    2102:	de bf       	out	0x3e, r29	; 62
    2104:	0f be       	out	0x3f, r0	; 63
    2106:	cd bf       	out	0x3d, r28	; 61
    2108:	cf 91       	pop	r28
    210a:	df 91       	pop	r29
    210c:	08 95       	ret

0000210e <LCD_voidSendEnPulse>:
void LCD_voidSendEnPulse ()
{
    210e:	df 93       	push	r29
    2110:	cf 93       	push	r28
    2112:	cd b7       	in	r28, 0x3d	; 61
    2114:	de b7       	in	r29, 0x3e	; 62
    2116:	2e 97       	sbiw	r28, 0x0e	; 14
    2118:	0f b6       	in	r0, 0x3f	; 63
    211a:	f8 94       	cli
    211c:	de bf       	out	0x3e, r29	; 62
    211e:	0f be       	out	0x3f, r0	; 63
    2120:	cd bf       	out	0x3d, r28	; 61
	GPIO_voidWritePin  (LCD_ENPORT , LCD_ENPIN , 1);
    2122:	80 e0       	ldi	r24, 0x00	; 0
    2124:	66 e0       	ldi	r22, 0x06	; 6
    2126:	41 e0       	ldi	r20, 0x01	; 1
    2128:	0e 94 2b 07 	call	0xe56	; 0xe56 <GPIO_voidWritePin>
    212c:	80 e0       	ldi	r24, 0x00	; 0
    212e:	90 e0       	ldi	r25, 0x00	; 0
    2130:	a0 e0       	ldi	r26, 0x00	; 0
    2132:	b0 e4       	ldi	r27, 0x40	; 64
    2134:	8b 87       	std	Y+11, r24	; 0x0b
    2136:	9c 87       	std	Y+12, r25	; 0x0c
    2138:	ad 87       	std	Y+13, r26	; 0x0d
    213a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    213c:	6b 85       	ldd	r22, Y+11	; 0x0b
    213e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2140:	8d 85       	ldd	r24, Y+13	; 0x0d
    2142:	9e 85       	ldd	r25, Y+14	; 0x0e
    2144:	20 e0       	ldi	r18, 0x00	; 0
    2146:	30 e0       	ldi	r19, 0x00	; 0
    2148:	4a ef       	ldi	r20, 0xFA	; 250
    214a:	54 e4       	ldi	r21, 0x44	; 68
    214c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2150:	dc 01       	movw	r26, r24
    2152:	cb 01       	movw	r24, r22
    2154:	8f 83       	std	Y+7, r24	; 0x07
    2156:	98 87       	std	Y+8, r25	; 0x08
    2158:	a9 87       	std	Y+9, r26	; 0x09
    215a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    215c:	6f 81       	ldd	r22, Y+7	; 0x07
    215e:	78 85       	ldd	r23, Y+8	; 0x08
    2160:	89 85       	ldd	r24, Y+9	; 0x09
    2162:	9a 85       	ldd	r25, Y+10	; 0x0a
    2164:	20 e0       	ldi	r18, 0x00	; 0
    2166:	30 e0       	ldi	r19, 0x00	; 0
    2168:	40 e8       	ldi	r20, 0x80	; 128
    216a:	5f e3       	ldi	r21, 0x3F	; 63
    216c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2170:	88 23       	and	r24, r24
    2172:	2c f4       	brge	.+10     	; 0x217e <LCD_voidSendEnPulse+0x70>
		__ticks = 1;
    2174:	81 e0       	ldi	r24, 0x01	; 1
    2176:	90 e0       	ldi	r25, 0x00	; 0
    2178:	9e 83       	std	Y+6, r25	; 0x06
    217a:	8d 83       	std	Y+5, r24	; 0x05
    217c:	3f c0       	rjmp	.+126    	; 0x21fc <LCD_voidSendEnPulse+0xee>
	else if (__tmp > 65535)
    217e:	6f 81       	ldd	r22, Y+7	; 0x07
    2180:	78 85       	ldd	r23, Y+8	; 0x08
    2182:	89 85       	ldd	r24, Y+9	; 0x09
    2184:	9a 85       	ldd	r25, Y+10	; 0x0a
    2186:	20 e0       	ldi	r18, 0x00	; 0
    2188:	3f ef       	ldi	r19, 0xFF	; 255
    218a:	4f e7       	ldi	r20, 0x7F	; 127
    218c:	57 e4       	ldi	r21, 0x47	; 71
    218e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2192:	18 16       	cp	r1, r24
    2194:	4c f5       	brge	.+82     	; 0x21e8 <LCD_voidSendEnPulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2196:	6b 85       	ldd	r22, Y+11	; 0x0b
    2198:	7c 85       	ldd	r23, Y+12	; 0x0c
    219a:	8d 85       	ldd	r24, Y+13	; 0x0d
    219c:	9e 85       	ldd	r25, Y+14	; 0x0e
    219e:	20 e0       	ldi	r18, 0x00	; 0
    21a0:	30 e0       	ldi	r19, 0x00	; 0
    21a2:	40 e2       	ldi	r20, 0x20	; 32
    21a4:	51 e4       	ldi	r21, 0x41	; 65
    21a6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21aa:	dc 01       	movw	r26, r24
    21ac:	cb 01       	movw	r24, r22
    21ae:	bc 01       	movw	r22, r24
    21b0:	cd 01       	movw	r24, r26
    21b2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21b6:	dc 01       	movw	r26, r24
    21b8:	cb 01       	movw	r24, r22
    21ba:	9e 83       	std	Y+6, r25	; 0x06
    21bc:	8d 83       	std	Y+5, r24	; 0x05
    21be:	0f c0       	rjmp	.+30     	; 0x21de <LCD_voidSendEnPulse+0xd0>
    21c0:	88 ec       	ldi	r24, 0xC8	; 200
    21c2:	90 e0       	ldi	r25, 0x00	; 0
    21c4:	9c 83       	std	Y+4, r25	; 0x04
    21c6:	8b 83       	std	Y+3, r24	; 0x03
    21c8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ca:	9c 81       	ldd	r25, Y+4	; 0x04
    21cc:	01 97       	sbiw	r24, 0x01	; 1
    21ce:	f1 f7       	brne	.-4      	; 0x21cc <LCD_voidSendEnPulse+0xbe>
    21d0:	9c 83       	std	Y+4, r25	; 0x04
    21d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21d4:	8d 81       	ldd	r24, Y+5	; 0x05
    21d6:	9e 81       	ldd	r25, Y+6	; 0x06
    21d8:	01 97       	sbiw	r24, 0x01	; 1
    21da:	9e 83       	std	Y+6, r25	; 0x06
    21dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21de:	8d 81       	ldd	r24, Y+5	; 0x05
    21e0:	9e 81       	ldd	r25, Y+6	; 0x06
    21e2:	00 97       	sbiw	r24, 0x00	; 0
    21e4:	69 f7       	brne	.-38     	; 0x21c0 <LCD_voidSendEnPulse+0xb2>
    21e6:	14 c0       	rjmp	.+40     	; 0x2210 <LCD_voidSendEnPulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21e8:	6f 81       	ldd	r22, Y+7	; 0x07
    21ea:	78 85       	ldd	r23, Y+8	; 0x08
    21ec:	89 85       	ldd	r24, Y+9	; 0x09
    21ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    21f0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21f4:	dc 01       	movw	r26, r24
    21f6:	cb 01       	movw	r24, r22
    21f8:	9e 83       	std	Y+6, r25	; 0x06
    21fa:	8d 83       	std	Y+5, r24	; 0x05
    21fc:	8d 81       	ldd	r24, Y+5	; 0x05
    21fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2200:	9a 83       	std	Y+2, r25	; 0x02
    2202:	89 83       	std	Y+1, r24	; 0x01
    2204:	89 81       	ldd	r24, Y+1	; 0x01
    2206:	9a 81       	ldd	r25, Y+2	; 0x02
    2208:	01 97       	sbiw	r24, 0x01	; 1
    220a:	f1 f7       	brne	.-4      	; 0x2208 <LCD_voidSendEnPulse+0xfa>
    220c:	9a 83       	std	Y+2, r25	; 0x02
    220e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	GPIO_voidWritePin  (LCD_ENPORT , LCD_ENPIN , 0);
    2210:	80 e0       	ldi	r24, 0x00	; 0
    2212:	66 e0       	ldi	r22, 0x06	; 6
    2214:	40 e0       	ldi	r20, 0x00	; 0
    2216:	0e 94 2b 07 	call	0xe56	; 0xe56 <GPIO_voidWritePin>

}
    221a:	2e 96       	adiw	r28, 0x0e	; 14
    221c:	0f b6       	in	r0, 0x3f	; 63
    221e:	f8 94       	cli
    2220:	de bf       	out	0x3e, r29	; 62
    2222:	0f be       	out	0x3f, r0	; 63
    2224:	cd bf       	out	0x3d, r28	; 61
    2226:	cf 91       	pop	r28
    2228:	df 91       	pop	r29
    222a:	08 95       	ret

0000222c <LCD_voidMoveCrusor>:
void LCD_voidMoveCrusor(u8 copy_u8Line , u8 copy_u8Position)
{
    222c:	df 93       	push	r29
    222e:	cf 93       	push	r28
    2230:	cd b7       	in	r28, 0x3d	; 61
    2232:	de b7       	in	r29, 0x3e	; 62
    2234:	61 97       	sbiw	r28, 0x11	; 17
    2236:	0f b6       	in	r0, 0x3f	; 63
    2238:	f8 94       	cli
    223a:	de bf       	out	0x3e, r29	; 62
    223c:	0f be       	out	0x3f, r0	; 63
    223e:	cd bf       	out	0x3d, r28	; 61
    2240:	88 8b       	std	Y+16, r24	; 0x10
    2242:	69 8b       	std	Y+17, r22	; 0x11
	u8 data ;
if(copy_u8Line < 1 || copy_u8Line > 2 || copy_u8Position >16 || copy_u8Position <1 )	
    2244:	88 89       	ldd	r24, Y+16	; 0x10
    2246:	88 23       	and	r24, r24
    2248:	49 f0       	breq	.+18     	; 0x225c <LCD_voidMoveCrusor+0x30>
    224a:	88 89       	ldd	r24, Y+16	; 0x10
    224c:	83 30       	cpi	r24, 0x03	; 3
    224e:	30 f4       	brcc	.+12     	; 0x225c <LCD_voidMoveCrusor+0x30>
    2250:	89 89       	ldd	r24, Y+17	; 0x11
    2252:	81 31       	cpi	r24, 0x11	; 17
    2254:	18 f4       	brcc	.+6      	; 0x225c <LCD_voidMoveCrusor+0x30>
    2256:	89 89       	ldd	r24, Y+17	; 0x11
    2258:	88 23       	and	r24, r24
    225a:	19 f4       	brne	.+6      	; 0x2262 <LCD_voidMoveCrusor+0x36>
{
	data = 0x80 ;
    225c:	80 e8       	ldi	r24, 0x80	; 128
    225e:	8f 87       	std	Y+15, r24	; 0x0f
    2260:	0d c0       	rjmp	.+26     	; 0x227c <LCD_voidMoveCrusor+0x50>
}
else if (copy_u8Line ==1)
    2262:	88 89       	ldd	r24, Y+16	; 0x10
    2264:	81 30       	cpi	r24, 0x01	; 1
    2266:	21 f4       	brne	.+8      	; 0x2270 <LCD_voidMoveCrusor+0x44>
{
	data = 0x80 +(copy_u8Position -1);
    2268:	89 89       	ldd	r24, Y+17	; 0x11
    226a:	81 58       	subi	r24, 0x81	; 129
    226c:	8f 87       	std	Y+15, r24	; 0x0f
    226e:	06 c0       	rjmp	.+12     	; 0x227c <LCD_voidMoveCrusor+0x50>
}
else if (copy_u8Line==2)
    2270:	88 89       	ldd	r24, Y+16	; 0x10
    2272:	82 30       	cpi	r24, 0x02	; 2
    2274:	19 f4       	brne	.+6      	; 0x227c <LCD_voidMoveCrusor+0x50>
{
	data = 0xC0 + (copy_u8Position -1 );
    2276:	89 89       	ldd	r24, Y+17	; 0x11
    2278:	81 54       	subi	r24, 0x41	; 65
    227a:	8f 87       	std	Y+15, r24	; 0x0f
}
LCD_voidSendCmd(data);
    227c:	8f 85       	ldd	r24, Y+15	; 0x0f
    227e:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <LCD_voidSendCmd>
    2282:	80 e0       	ldi	r24, 0x00	; 0
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	a0 e8       	ldi	r26, 0x80	; 128
    2288:	bf e3       	ldi	r27, 0x3F	; 63
    228a:	8b 87       	std	Y+11, r24	; 0x0b
    228c:	9c 87       	std	Y+12, r25	; 0x0c
    228e:	ad 87       	std	Y+13, r26	; 0x0d
    2290:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2292:	6b 85       	ldd	r22, Y+11	; 0x0b
    2294:	7c 85       	ldd	r23, Y+12	; 0x0c
    2296:	8d 85       	ldd	r24, Y+13	; 0x0d
    2298:	9e 85       	ldd	r25, Y+14	; 0x0e
    229a:	20 e0       	ldi	r18, 0x00	; 0
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	4a ef       	ldi	r20, 0xFA	; 250
    22a0:	54 e4       	ldi	r21, 0x44	; 68
    22a2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22a6:	dc 01       	movw	r26, r24
    22a8:	cb 01       	movw	r24, r22
    22aa:	8f 83       	std	Y+7, r24	; 0x07
    22ac:	98 87       	std	Y+8, r25	; 0x08
    22ae:	a9 87       	std	Y+9, r26	; 0x09
    22b0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22b2:	6f 81       	ldd	r22, Y+7	; 0x07
    22b4:	78 85       	ldd	r23, Y+8	; 0x08
    22b6:	89 85       	ldd	r24, Y+9	; 0x09
    22b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ba:	20 e0       	ldi	r18, 0x00	; 0
    22bc:	30 e0       	ldi	r19, 0x00	; 0
    22be:	40 e8       	ldi	r20, 0x80	; 128
    22c0:	5f e3       	ldi	r21, 0x3F	; 63
    22c2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    22c6:	88 23       	and	r24, r24
    22c8:	2c f4       	brge	.+10     	; 0x22d4 <LCD_voidMoveCrusor+0xa8>
		__ticks = 1;
    22ca:	81 e0       	ldi	r24, 0x01	; 1
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	9e 83       	std	Y+6, r25	; 0x06
    22d0:	8d 83       	std	Y+5, r24	; 0x05
    22d2:	3f c0       	rjmp	.+126    	; 0x2352 <LCD_voidMoveCrusor+0x126>
	else if (__tmp > 65535)
    22d4:	6f 81       	ldd	r22, Y+7	; 0x07
    22d6:	78 85       	ldd	r23, Y+8	; 0x08
    22d8:	89 85       	ldd	r24, Y+9	; 0x09
    22da:	9a 85       	ldd	r25, Y+10	; 0x0a
    22dc:	20 e0       	ldi	r18, 0x00	; 0
    22de:	3f ef       	ldi	r19, 0xFF	; 255
    22e0:	4f e7       	ldi	r20, 0x7F	; 127
    22e2:	57 e4       	ldi	r21, 0x47	; 71
    22e4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    22e8:	18 16       	cp	r1, r24
    22ea:	4c f5       	brge	.+82     	; 0x233e <LCD_voidMoveCrusor+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    22ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    22f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    22f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    22f4:	20 e0       	ldi	r18, 0x00	; 0
    22f6:	30 e0       	ldi	r19, 0x00	; 0
    22f8:	40 e2       	ldi	r20, 0x20	; 32
    22fa:	51 e4       	ldi	r21, 0x41	; 65
    22fc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2300:	dc 01       	movw	r26, r24
    2302:	cb 01       	movw	r24, r22
    2304:	bc 01       	movw	r22, r24
    2306:	cd 01       	movw	r24, r26
    2308:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    230c:	dc 01       	movw	r26, r24
    230e:	cb 01       	movw	r24, r22
    2310:	9e 83       	std	Y+6, r25	; 0x06
    2312:	8d 83       	std	Y+5, r24	; 0x05
    2314:	0f c0       	rjmp	.+30     	; 0x2334 <LCD_voidMoveCrusor+0x108>
    2316:	88 ec       	ldi	r24, 0xC8	; 200
    2318:	90 e0       	ldi	r25, 0x00	; 0
    231a:	9c 83       	std	Y+4, r25	; 0x04
    231c:	8b 83       	std	Y+3, r24	; 0x03
    231e:	8b 81       	ldd	r24, Y+3	; 0x03
    2320:	9c 81       	ldd	r25, Y+4	; 0x04
    2322:	01 97       	sbiw	r24, 0x01	; 1
    2324:	f1 f7       	brne	.-4      	; 0x2322 <LCD_voidMoveCrusor+0xf6>
    2326:	9c 83       	std	Y+4, r25	; 0x04
    2328:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    232a:	8d 81       	ldd	r24, Y+5	; 0x05
    232c:	9e 81       	ldd	r25, Y+6	; 0x06
    232e:	01 97       	sbiw	r24, 0x01	; 1
    2330:	9e 83       	std	Y+6, r25	; 0x06
    2332:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2334:	8d 81       	ldd	r24, Y+5	; 0x05
    2336:	9e 81       	ldd	r25, Y+6	; 0x06
    2338:	00 97       	sbiw	r24, 0x00	; 0
    233a:	69 f7       	brne	.-38     	; 0x2316 <LCD_voidMoveCrusor+0xea>
    233c:	14 c0       	rjmp	.+40     	; 0x2366 <LCD_voidMoveCrusor+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    233e:	6f 81       	ldd	r22, Y+7	; 0x07
    2340:	78 85       	ldd	r23, Y+8	; 0x08
    2342:	89 85       	ldd	r24, Y+9	; 0x09
    2344:	9a 85       	ldd	r25, Y+10	; 0x0a
    2346:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    234a:	dc 01       	movw	r26, r24
    234c:	cb 01       	movw	r24, r22
    234e:	9e 83       	std	Y+6, r25	; 0x06
    2350:	8d 83       	std	Y+5, r24	; 0x05
    2352:	8d 81       	ldd	r24, Y+5	; 0x05
    2354:	9e 81       	ldd	r25, Y+6	; 0x06
    2356:	9a 83       	std	Y+2, r25	; 0x02
    2358:	89 83       	std	Y+1, r24	; 0x01
    235a:	89 81       	ldd	r24, Y+1	; 0x01
    235c:	9a 81       	ldd	r25, Y+2	; 0x02
    235e:	01 97       	sbiw	r24, 0x01	; 1
    2360:	f1 f7       	brne	.-4      	; 0x235e <LCD_voidMoveCrusor+0x132>
    2362:	9a 83       	std	Y+2, r25	; 0x02
    2364:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(1);
}
    2366:	61 96       	adiw	r28, 0x11	; 17
    2368:	0f b6       	in	r0, 0x3f	; 63
    236a:	f8 94       	cli
    236c:	de bf       	out	0x3e, r29	; 62
    236e:	0f be       	out	0x3f, r0	; 63
    2370:	cd bf       	out	0x3d, r28	; 61
    2372:	cf 91       	pop	r28
    2374:	df 91       	pop	r29
    2376:	08 95       	ret

00002378 <LCD_voidClearScreen>:
void LCD_voidClearScreen()
{
    2378:	df 93       	push	r29
    237a:	cf 93       	push	r28
    237c:	cd b7       	in	r28, 0x3d	; 61
    237e:	de b7       	in	r29, 0x3e	; 62
    2380:	2e 97       	sbiw	r28, 0x0e	; 14
    2382:	0f b6       	in	r0, 0x3f	; 63
    2384:	f8 94       	cli
    2386:	de bf       	out	0x3e, r29	; 62
    2388:	0f be       	out	0x3f, r0	; 63
    238a:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCmd(LCD_CLEAR_SCREEN);
    238c:	81 e0       	ldi	r24, 0x01	; 1
    238e:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <LCD_voidSendCmd>
    2392:	80 e0       	ldi	r24, 0x00	; 0
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	a0 e2       	ldi	r26, 0x20	; 32
    2398:	b1 e4       	ldi	r27, 0x41	; 65
    239a:	8b 87       	std	Y+11, r24	; 0x0b
    239c:	9c 87       	std	Y+12, r25	; 0x0c
    239e:	ad 87       	std	Y+13, r26	; 0x0d
    23a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    23a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    23a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    23a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    23aa:	20 e0       	ldi	r18, 0x00	; 0
    23ac:	30 e0       	ldi	r19, 0x00	; 0
    23ae:	4a ef       	ldi	r20, 0xFA	; 250
    23b0:	54 e4       	ldi	r21, 0x44	; 68
    23b2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23b6:	dc 01       	movw	r26, r24
    23b8:	cb 01       	movw	r24, r22
    23ba:	8f 83       	std	Y+7, r24	; 0x07
    23bc:	98 87       	std	Y+8, r25	; 0x08
    23be:	a9 87       	std	Y+9, r26	; 0x09
    23c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23c2:	6f 81       	ldd	r22, Y+7	; 0x07
    23c4:	78 85       	ldd	r23, Y+8	; 0x08
    23c6:	89 85       	ldd	r24, Y+9	; 0x09
    23c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ca:	20 e0       	ldi	r18, 0x00	; 0
    23cc:	30 e0       	ldi	r19, 0x00	; 0
    23ce:	40 e8       	ldi	r20, 0x80	; 128
    23d0:	5f e3       	ldi	r21, 0x3F	; 63
    23d2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    23d6:	88 23       	and	r24, r24
    23d8:	2c f4       	brge	.+10     	; 0x23e4 <LCD_voidClearScreen+0x6c>
		__ticks = 1;
    23da:	81 e0       	ldi	r24, 0x01	; 1
    23dc:	90 e0       	ldi	r25, 0x00	; 0
    23de:	9e 83       	std	Y+6, r25	; 0x06
    23e0:	8d 83       	std	Y+5, r24	; 0x05
    23e2:	3f c0       	rjmp	.+126    	; 0x2462 <LCD_voidClearScreen+0xea>
	else if (__tmp > 65535)
    23e4:	6f 81       	ldd	r22, Y+7	; 0x07
    23e6:	78 85       	ldd	r23, Y+8	; 0x08
    23e8:	89 85       	ldd	r24, Y+9	; 0x09
    23ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ec:	20 e0       	ldi	r18, 0x00	; 0
    23ee:	3f ef       	ldi	r19, 0xFF	; 255
    23f0:	4f e7       	ldi	r20, 0x7F	; 127
    23f2:	57 e4       	ldi	r21, 0x47	; 71
    23f4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    23f8:	18 16       	cp	r1, r24
    23fa:	4c f5       	brge	.+82     	; 0x244e <LCD_voidClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    23fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2400:	8d 85       	ldd	r24, Y+13	; 0x0d
    2402:	9e 85       	ldd	r25, Y+14	; 0x0e
    2404:	20 e0       	ldi	r18, 0x00	; 0
    2406:	30 e0       	ldi	r19, 0x00	; 0
    2408:	40 e2       	ldi	r20, 0x20	; 32
    240a:	51 e4       	ldi	r21, 0x41	; 65
    240c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2410:	dc 01       	movw	r26, r24
    2412:	cb 01       	movw	r24, r22
    2414:	bc 01       	movw	r22, r24
    2416:	cd 01       	movw	r24, r26
    2418:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    241c:	dc 01       	movw	r26, r24
    241e:	cb 01       	movw	r24, r22
    2420:	9e 83       	std	Y+6, r25	; 0x06
    2422:	8d 83       	std	Y+5, r24	; 0x05
    2424:	0f c0       	rjmp	.+30     	; 0x2444 <LCD_voidClearScreen+0xcc>
    2426:	88 ec       	ldi	r24, 0xC8	; 200
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	9c 83       	std	Y+4, r25	; 0x04
    242c:	8b 83       	std	Y+3, r24	; 0x03
    242e:	8b 81       	ldd	r24, Y+3	; 0x03
    2430:	9c 81       	ldd	r25, Y+4	; 0x04
    2432:	01 97       	sbiw	r24, 0x01	; 1
    2434:	f1 f7       	brne	.-4      	; 0x2432 <LCD_voidClearScreen+0xba>
    2436:	9c 83       	std	Y+4, r25	; 0x04
    2438:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    243a:	8d 81       	ldd	r24, Y+5	; 0x05
    243c:	9e 81       	ldd	r25, Y+6	; 0x06
    243e:	01 97       	sbiw	r24, 0x01	; 1
    2440:	9e 83       	std	Y+6, r25	; 0x06
    2442:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2444:	8d 81       	ldd	r24, Y+5	; 0x05
    2446:	9e 81       	ldd	r25, Y+6	; 0x06
    2448:	00 97       	sbiw	r24, 0x00	; 0
    244a:	69 f7       	brne	.-38     	; 0x2426 <LCD_voidClearScreen+0xae>
    244c:	14 c0       	rjmp	.+40     	; 0x2476 <LCD_voidClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    244e:	6f 81       	ldd	r22, Y+7	; 0x07
    2450:	78 85       	ldd	r23, Y+8	; 0x08
    2452:	89 85       	ldd	r24, Y+9	; 0x09
    2454:	9a 85       	ldd	r25, Y+10	; 0x0a
    2456:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    245a:	dc 01       	movw	r26, r24
    245c:	cb 01       	movw	r24, r22
    245e:	9e 83       	std	Y+6, r25	; 0x06
    2460:	8d 83       	std	Y+5, r24	; 0x05
    2462:	8d 81       	ldd	r24, Y+5	; 0x05
    2464:	9e 81       	ldd	r25, Y+6	; 0x06
    2466:	9a 83       	std	Y+2, r25	; 0x02
    2468:	89 83       	std	Y+1, r24	; 0x01
    246a:	89 81       	ldd	r24, Y+1	; 0x01
    246c:	9a 81       	ldd	r25, Y+2	; 0x02
    246e:	01 97       	sbiw	r24, 0x01	; 1
    2470:	f1 f7       	brne	.-4      	; 0x246e <LCD_voidClearScreen+0xf6>
    2472:	9a 83       	std	Y+2, r25	; 0x02
    2474:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    2476:	2e 96       	adiw	r28, 0x0e	; 14
    2478:	0f b6       	in	r0, 0x3f	; 63
    247a:	f8 94       	cli
    247c:	de bf       	out	0x3e, r29	; 62
    247e:	0f be       	out	0x3f, r0	; 63
    2480:	cd bf       	out	0x3d, r28	; 61
    2482:	cf 91       	pop	r28
    2484:	df 91       	pop	r29
    2486:	08 95       	ret

00002488 <LCD_voidDispChar>:
void LCD_voidDispChar(u8 copy_u8char)
{
    2488:	df 93       	push	r29
    248a:	cf 93       	push	r28
    248c:	cd b7       	in	r28, 0x3d	; 61
    248e:	de b7       	in	r29, 0x3e	; 62
    2490:	2f 97       	sbiw	r28, 0x0f	; 15
    2492:	0f b6       	in	r0, 0x3f	; 63
    2494:	f8 94       	cli
    2496:	de bf       	out	0x3e, r29	; 62
    2498:	0f be       	out	0x3f, r0	; 63
    249a:	cd bf       	out	0x3d, r28	; 61
    249c:	8f 87       	std	Y+15, r24	; 0x0f
		GPIO_voidWritePin  (LCD_RWPORT , LCD_RWPIN , 0);
		LCD_voidSendEnPulse();
		
	#elif LCD_MODE == 1 
		#if LCD_NIBBLE == 0 
			GPIO_voidWriteLowNipple(LCD_PORT , copy_u8char>>4);
    249e:	8f 85       	ldd	r24, Y+15	; 0x0f
    24a0:	98 2f       	mov	r25, r24
    24a2:	92 95       	swap	r25
    24a4:	9f 70       	andi	r25, 0x0F	; 15
    24a6:	80 e0       	ldi	r24, 0x00	; 0
    24a8:	69 2f       	mov	r22, r25
    24aa:	0e 94 0b 0a 	call	0x1416	; 0x1416 <GPIO_voidWriteLowNipple>
			GPIO_voidWritePin  (LCD_RSPORT , LCD_RSPIN , 1);
    24ae:	80 e0       	ldi	r24, 0x00	; 0
    24b0:	64 e0       	ldi	r22, 0x04	; 4
    24b2:	41 e0       	ldi	r20, 0x01	; 1
    24b4:	0e 94 2b 07 	call	0xe56	; 0xe56 <GPIO_voidWritePin>
			GPIO_voidWritePin  (LCD_RWPORT , LCD_RWPIN , 0);
    24b8:	80 e0       	ldi	r24, 0x00	; 0
    24ba:	65 e0       	ldi	r22, 0x05	; 5
    24bc:	40 e0       	ldi	r20, 0x00	; 0
    24be:	0e 94 2b 07 	call	0xe56	; 0xe56 <GPIO_voidWritePin>
			LCD_voidSendEnPulse();
    24c2:	0e 94 87 10 	call	0x210e	; 0x210e <LCD_voidSendEnPulse>
		
			GPIO_voidWriteLowNipple(LCD_PORT , copy_u8char);
    24c6:	80 e0       	ldi	r24, 0x00	; 0
    24c8:	6f 85       	ldd	r22, Y+15	; 0x0f
    24ca:	0e 94 0b 0a 	call	0x1416	; 0x1416 <GPIO_voidWriteLowNipple>
			GPIO_voidWritePin  (LCD_RSPORT , LCD_RSPIN , 1);
    24ce:	80 e0       	ldi	r24, 0x00	; 0
    24d0:	64 e0       	ldi	r22, 0x04	; 4
    24d2:	41 e0       	ldi	r20, 0x01	; 1
    24d4:	0e 94 2b 07 	call	0xe56	; 0xe56 <GPIO_voidWritePin>
			GPIO_voidWritePin  (LCD_RWPORT , LCD_RWPIN , 0);
    24d8:	80 e0       	ldi	r24, 0x00	; 0
    24da:	65 e0       	ldi	r22, 0x05	; 5
    24dc:	40 e0       	ldi	r20, 0x00	; 0
    24de:	0e 94 2b 07 	call	0xe56	; 0xe56 <GPIO_voidWritePin>
			LCD_voidSendEnPulse();
    24e2:	0e 94 87 10 	call	0x210e	; 0x210e <LCD_voidSendEnPulse>
    24e6:	80 e0       	ldi	r24, 0x00	; 0
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	a0 e0       	ldi	r26, 0x00	; 0
    24ec:	b0 e4       	ldi	r27, 0x40	; 64
    24ee:	8b 87       	std	Y+11, r24	; 0x0b
    24f0:	9c 87       	std	Y+12, r25	; 0x0c
    24f2:	ad 87       	std	Y+13, r26	; 0x0d
    24f4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    24f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    24fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    24fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    24fe:	20 e0       	ldi	r18, 0x00	; 0
    2500:	30 e0       	ldi	r19, 0x00	; 0
    2502:	4a ef       	ldi	r20, 0xFA	; 250
    2504:	54 e4       	ldi	r21, 0x44	; 68
    2506:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    250a:	dc 01       	movw	r26, r24
    250c:	cb 01       	movw	r24, r22
    250e:	8f 83       	std	Y+7, r24	; 0x07
    2510:	98 87       	std	Y+8, r25	; 0x08
    2512:	a9 87       	std	Y+9, r26	; 0x09
    2514:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2516:	6f 81       	ldd	r22, Y+7	; 0x07
    2518:	78 85       	ldd	r23, Y+8	; 0x08
    251a:	89 85       	ldd	r24, Y+9	; 0x09
    251c:	9a 85       	ldd	r25, Y+10	; 0x0a
    251e:	20 e0       	ldi	r18, 0x00	; 0
    2520:	30 e0       	ldi	r19, 0x00	; 0
    2522:	40 e8       	ldi	r20, 0x80	; 128
    2524:	5f e3       	ldi	r21, 0x3F	; 63
    2526:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    252a:	88 23       	and	r24, r24
    252c:	2c f4       	brge	.+10     	; 0x2538 <LCD_voidDispChar+0xb0>
		__ticks = 1;
    252e:	81 e0       	ldi	r24, 0x01	; 1
    2530:	90 e0       	ldi	r25, 0x00	; 0
    2532:	9e 83       	std	Y+6, r25	; 0x06
    2534:	8d 83       	std	Y+5, r24	; 0x05
    2536:	3f c0       	rjmp	.+126    	; 0x25b6 <LCD_voidDispChar+0x12e>
	else if (__tmp > 65535)
    2538:	6f 81       	ldd	r22, Y+7	; 0x07
    253a:	78 85       	ldd	r23, Y+8	; 0x08
    253c:	89 85       	ldd	r24, Y+9	; 0x09
    253e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2540:	20 e0       	ldi	r18, 0x00	; 0
    2542:	3f ef       	ldi	r19, 0xFF	; 255
    2544:	4f e7       	ldi	r20, 0x7F	; 127
    2546:	57 e4       	ldi	r21, 0x47	; 71
    2548:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    254c:	18 16       	cp	r1, r24
    254e:	4c f5       	brge	.+82     	; 0x25a2 <LCD_voidDispChar+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2550:	6b 85       	ldd	r22, Y+11	; 0x0b
    2552:	7c 85       	ldd	r23, Y+12	; 0x0c
    2554:	8d 85       	ldd	r24, Y+13	; 0x0d
    2556:	9e 85       	ldd	r25, Y+14	; 0x0e
    2558:	20 e0       	ldi	r18, 0x00	; 0
    255a:	30 e0       	ldi	r19, 0x00	; 0
    255c:	40 e2       	ldi	r20, 0x20	; 32
    255e:	51 e4       	ldi	r21, 0x41	; 65
    2560:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2564:	dc 01       	movw	r26, r24
    2566:	cb 01       	movw	r24, r22
    2568:	bc 01       	movw	r22, r24
    256a:	cd 01       	movw	r24, r26
    256c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2570:	dc 01       	movw	r26, r24
    2572:	cb 01       	movw	r24, r22
    2574:	9e 83       	std	Y+6, r25	; 0x06
    2576:	8d 83       	std	Y+5, r24	; 0x05
    2578:	0f c0       	rjmp	.+30     	; 0x2598 <LCD_voidDispChar+0x110>
    257a:	88 ec       	ldi	r24, 0xC8	; 200
    257c:	90 e0       	ldi	r25, 0x00	; 0
    257e:	9c 83       	std	Y+4, r25	; 0x04
    2580:	8b 83       	std	Y+3, r24	; 0x03
    2582:	8b 81       	ldd	r24, Y+3	; 0x03
    2584:	9c 81       	ldd	r25, Y+4	; 0x04
    2586:	01 97       	sbiw	r24, 0x01	; 1
    2588:	f1 f7       	brne	.-4      	; 0x2586 <LCD_voidDispChar+0xfe>
    258a:	9c 83       	std	Y+4, r25	; 0x04
    258c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    258e:	8d 81       	ldd	r24, Y+5	; 0x05
    2590:	9e 81       	ldd	r25, Y+6	; 0x06
    2592:	01 97       	sbiw	r24, 0x01	; 1
    2594:	9e 83       	std	Y+6, r25	; 0x06
    2596:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2598:	8d 81       	ldd	r24, Y+5	; 0x05
    259a:	9e 81       	ldd	r25, Y+6	; 0x06
    259c:	00 97       	sbiw	r24, 0x00	; 0
    259e:	69 f7       	brne	.-38     	; 0x257a <LCD_voidDispChar+0xf2>
    25a0:	14 c0       	rjmp	.+40     	; 0x25ca <LCD_voidDispChar+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25a2:	6f 81       	ldd	r22, Y+7	; 0x07
    25a4:	78 85       	ldd	r23, Y+8	; 0x08
    25a6:	89 85       	ldd	r24, Y+9	; 0x09
    25a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    25aa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25ae:	dc 01       	movw	r26, r24
    25b0:	cb 01       	movw	r24, r22
    25b2:	9e 83       	std	Y+6, r25	; 0x06
    25b4:	8d 83       	std	Y+5, r24	; 0x05
    25b6:	8d 81       	ldd	r24, Y+5	; 0x05
    25b8:	9e 81       	ldd	r25, Y+6	; 0x06
    25ba:	9a 83       	std	Y+2, r25	; 0x02
    25bc:	89 83       	std	Y+1, r24	; 0x01
    25be:	89 81       	ldd	r24, Y+1	; 0x01
    25c0:	9a 81       	ldd	r25, Y+2	; 0x02
    25c2:	01 97       	sbiw	r24, 0x01	; 1
    25c4:	f1 f7       	brne	.-4      	; 0x25c2 <LCD_voidDispChar+0x13a>
    25c6:	9a 83       	std	Y+2, r25	; 0x02
    25c8:	89 83       	std	Y+1, r24	; 0x01
			LCD_voidSendEnPulse();
			_delay_ms(2);
		#endif
	#endif
		
}
    25ca:	2f 96       	adiw	r28, 0x0f	; 15
    25cc:	0f b6       	in	r0, 0x3f	; 63
    25ce:	f8 94       	cli
    25d0:	de bf       	out	0x3e, r29	; 62
    25d2:	0f be       	out	0x3f, r0	; 63
    25d4:	cd bf       	out	0x3d, r28	; 61
    25d6:	cf 91       	pop	r28
    25d8:	df 91       	pop	r29
    25da:	08 95       	ret

000025dc <LCD_voidDispString>:
void LCD_voidDispString(u8 *copy_u8String)
{
    25dc:	df 93       	push	r29
    25de:	cf 93       	push	r28
    25e0:	00 d0       	rcall	.+0      	; 0x25e2 <LCD_voidDispString+0x6>
    25e2:	cd b7       	in	r28, 0x3d	; 61
    25e4:	de b7       	in	r29, 0x3e	; 62
    25e6:	9a 83       	std	Y+2, r25	; 0x02
    25e8:	89 83       	std	Y+1, r24	; 0x01
    25ea:	0a c0       	rjmp	.+20     	; 0x2600 <LCD_voidDispString+0x24>
	while ((*copy_u8String) != '\0')
	{
		LCD_voidDispChar (*copy_u8String);
    25ec:	e9 81       	ldd	r30, Y+1	; 0x01
    25ee:	fa 81       	ldd	r31, Y+2	; 0x02
    25f0:	80 81       	ld	r24, Z
    25f2:	0e 94 44 12 	call	0x2488	; 0x2488 <LCD_voidDispChar>
		copy_u8String ++ ;
    25f6:	89 81       	ldd	r24, Y+1	; 0x01
    25f8:	9a 81       	ldd	r25, Y+2	; 0x02
    25fa:	01 96       	adiw	r24, 0x01	; 1
    25fc:	9a 83       	std	Y+2, r25	; 0x02
    25fe:	89 83       	std	Y+1, r24	; 0x01
	#endif
		
}
void LCD_voidDispString(u8 *copy_u8String)
{
	while ((*copy_u8String) != '\0')
    2600:	e9 81       	ldd	r30, Y+1	; 0x01
    2602:	fa 81       	ldd	r31, Y+2	; 0x02
    2604:	80 81       	ld	r24, Z
    2606:	88 23       	and	r24, r24
    2608:	89 f7       	brne	.-30     	; 0x25ec <LCD_voidDispString+0x10>
	{
		LCD_voidDispChar (*copy_u8String);
		copy_u8String ++ ;
	}
}
    260a:	0f 90       	pop	r0
    260c:	0f 90       	pop	r0
    260e:	cf 91       	pop	r28
    2610:	df 91       	pop	r29
    2612:	08 95       	ret

00002614 <LCD_voidDispNumber>:

void LCD_voidDispNumber (f32 copy_f32Num)
{
    2614:	df 93       	push	r29
    2616:	cf 93       	push	r28
    2618:	00 d0       	rcall	.+0      	; 0x261a <LCD_voidDispNumber+0x6>
    261a:	00 d0       	rcall	.+0      	; 0x261c <LCD_voidDispNumber+0x8>
    261c:	0f 92       	push	r0
    261e:	cd b7       	in	r28, 0x3d	; 61
    2620:	de b7       	in	r29, 0x3e	; 62
    2622:	6a 83       	std	Y+2, r22	; 0x02
    2624:	7b 83       	std	Y+3, r23	; 0x03
    2626:	8c 83       	std	Y+4, r24	; 0x04
    2628:	9d 83       	std	Y+5, r25	; 0x05
	u8 str[1];
	sprintf(str,"%d",(u8)copy_f32Num);
    262a:	6a 81       	ldd	r22, Y+2	; 0x02
    262c:	7b 81       	ldd	r23, Y+3	; 0x03
    262e:	8c 81       	ldd	r24, Y+4	; 0x04
    2630:	9d 81       	ldd	r25, Y+5	; 0x05
    2632:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2636:	dc 01       	movw	r26, r24
    2638:	cb 01       	movw	r24, r22
    263a:	28 2f       	mov	r18, r24
    263c:	30 e0       	ldi	r19, 0x00	; 0
    263e:	00 d0       	rcall	.+0      	; 0x2640 <LCD_voidDispNumber+0x2c>
    2640:	00 d0       	rcall	.+0      	; 0x2642 <LCD_voidDispNumber+0x2e>
    2642:	00 d0       	rcall	.+0      	; 0x2644 <LCD_voidDispNumber+0x30>
    2644:	ed b7       	in	r30, 0x3d	; 61
    2646:	fe b7       	in	r31, 0x3e	; 62
    2648:	31 96       	adiw	r30, 0x01	; 1
    264a:	ce 01       	movw	r24, r28
    264c:	01 96       	adiw	r24, 0x01	; 1
    264e:	91 83       	std	Z+1, r25	; 0x01
    2650:	80 83       	st	Z, r24
    2652:	80 e6       	ldi	r24, 0x60	; 96
    2654:	90 e0       	ldi	r25, 0x00	; 0
    2656:	93 83       	std	Z+3, r25	; 0x03
    2658:	82 83       	std	Z+2, r24	; 0x02
    265a:	35 83       	std	Z+5, r19	; 0x05
    265c:	24 83       	std	Z+4, r18	; 0x04
    265e:	0e 94 a4 14 	call	0x2948	; 0x2948 <sprintf>
    2662:	8d b7       	in	r24, 0x3d	; 61
    2664:	9e b7       	in	r25, 0x3e	; 62
    2666:	06 96       	adiw	r24, 0x06	; 6
    2668:	0f b6       	in	r0, 0x3f	; 63
    266a:	f8 94       	cli
    266c:	9e bf       	out	0x3e, r25	; 62
    266e:	0f be       	out	0x3f, r0	; 63
    2670:	8d bf       	out	0x3d, r24	; 61
	LCD_voidDispString(str);
    2672:	ce 01       	movw	r24, r28
    2674:	01 96       	adiw	r24, 0x01	; 1
    2676:	0e 94 ee 12 	call	0x25dc	; 0x25dc <LCD_voidDispString>
	LCD_voidDispChar('.');
    267a:	8e e2       	ldi	r24, 0x2E	; 46
    267c:	0e 94 44 12 	call	0x2488	; 0x2488 <LCD_voidDispChar>
	copy_f32Num = ((copy_f32Num-(u8)copy_f32Num)*100);
    2680:	6a 81       	ldd	r22, Y+2	; 0x02
    2682:	7b 81       	ldd	r23, Y+3	; 0x03
    2684:	8c 81       	ldd	r24, Y+4	; 0x04
    2686:	9d 81       	ldd	r25, Y+5	; 0x05
    2688:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    268c:	dc 01       	movw	r26, r24
    268e:	cb 01       	movw	r24, r22
    2690:	88 2f       	mov	r24, r24
    2692:	90 e0       	ldi	r25, 0x00	; 0
    2694:	aa 27       	eor	r26, r26
    2696:	97 fd       	sbrc	r25, 7
    2698:	a0 95       	com	r26
    269a:	ba 2f       	mov	r27, r26
    269c:	bc 01       	movw	r22, r24
    269e:	cd 01       	movw	r24, r26
    26a0:	0e 94 a1 03 	call	0x742	; 0x742 <__floatsisf>
    26a4:	9b 01       	movw	r18, r22
    26a6:	ac 01       	movw	r20, r24
    26a8:	6a 81       	ldd	r22, Y+2	; 0x02
    26aa:	7b 81       	ldd	r23, Y+3	; 0x03
    26ac:	8c 81       	ldd	r24, Y+4	; 0x04
    26ae:	9d 81       	ldd	r25, Y+5	; 0x05
    26b0:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    26b4:	dc 01       	movw	r26, r24
    26b6:	cb 01       	movw	r24, r22
    26b8:	bc 01       	movw	r22, r24
    26ba:	cd 01       	movw	r24, r26
    26bc:	20 e0       	ldi	r18, 0x00	; 0
    26be:	30 e0       	ldi	r19, 0x00	; 0
    26c0:	48 ec       	ldi	r20, 0xC8	; 200
    26c2:	52 e4       	ldi	r21, 0x42	; 66
    26c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26c8:	dc 01       	movw	r26, r24
    26ca:	cb 01       	movw	r24, r22
    26cc:	8a 83       	std	Y+2, r24	; 0x02
    26ce:	9b 83       	std	Y+3, r25	; 0x03
    26d0:	ac 83       	std	Y+4, r26	; 0x04
    26d2:	bd 83       	std	Y+5, r27	; 0x05
	sprintf(str,"%d",(u8)copy_f32Num);
    26d4:	6a 81       	ldd	r22, Y+2	; 0x02
    26d6:	7b 81       	ldd	r23, Y+3	; 0x03
    26d8:	8c 81       	ldd	r24, Y+4	; 0x04
    26da:	9d 81       	ldd	r25, Y+5	; 0x05
    26dc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26e0:	dc 01       	movw	r26, r24
    26e2:	cb 01       	movw	r24, r22
    26e4:	28 2f       	mov	r18, r24
    26e6:	30 e0       	ldi	r19, 0x00	; 0
    26e8:	00 d0       	rcall	.+0      	; 0x26ea <LCD_voidDispNumber+0xd6>
    26ea:	00 d0       	rcall	.+0      	; 0x26ec <LCD_voidDispNumber+0xd8>
    26ec:	00 d0       	rcall	.+0      	; 0x26ee <LCD_voidDispNumber+0xda>
    26ee:	ed b7       	in	r30, 0x3d	; 61
    26f0:	fe b7       	in	r31, 0x3e	; 62
    26f2:	31 96       	adiw	r30, 0x01	; 1
    26f4:	ce 01       	movw	r24, r28
    26f6:	01 96       	adiw	r24, 0x01	; 1
    26f8:	91 83       	std	Z+1, r25	; 0x01
    26fa:	80 83       	st	Z, r24
    26fc:	80 e6       	ldi	r24, 0x60	; 96
    26fe:	90 e0       	ldi	r25, 0x00	; 0
    2700:	93 83       	std	Z+3, r25	; 0x03
    2702:	82 83       	std	Z+2, r24	; 0x02
    2704:	35 83       	std	Z+5, r19	; 0x05
    2706:	24 83       	std	Z+4, r18	; 0x04
    2708:	0e 94 a4 14 	call	0x2948	; 0x2948 <sprintf>
    270c:	8d b7       	in	r24, 0x3d	; 61
    270e:	9e b7       	in	r25, 0x3e	; 62
    2710:	06 96       	adiw	r24, 0x06	; 6
    2712:	0f b6       	in	r0, 0x3f	; 63
    2714:	f8 94       	cli
    2716:	9e bf       	out	0x3e, r25	; 62
    2718:	0f be       	out	0x3f, r0	; 63
    271a:	8d bf       	out	0x3d, r24	; 61
	LCD_voidDispString(str);
    271c:	ce 01       	movw	r24, r28
    271e:	01 96       	adiw	r24, 0x01	; 1
    2720:	0e 94 ee 12 	call	0x25dc	; 0x25dc <LCD_voidDispString>
}
    2724:	0f 90       	pop	r0
    2726:	0f 90       	pop	r0
    2728:	0f 90       	pop	r0
    272a:	0f 90       	pop	r0
    272c:	0f 90       	pop	r0
    272e:	cf 91       	pop	r28
    2730:	df 91       	pop	r29
    2732:	08 95       	ret

00002734 <main>:


#define F_CPU 8000000UL
#include <util/delay.h>
int main()
{
    2734:	df 93       	push	r29
    2736:	cf 93       	push	r28
    2738:	cd b7       	in	r28, 0x3d	; 61
    273a:	de b7       	in	r29, 0x3e	; 62
    273c:	60 97       	sbiw	r28, 0x10	; 16
    273e:	0f b6       	in	r0, 0x3f	; 63
    2740:	f8 94       	cli
    2742:	de bf       	out	0x3e, r29	; 62
    2744:	0f be       	out	0x3f, r0	; 63
    2746:	cd bf       	out	0x3d, r28	; 61
	u8 X  , counter;
//	_delay_ms(25000);
	LCD_voidInit();
    2748:	0e 94 a2 0c 	call	0x1944	; 0x1944 <LCD_voidInit>
	I2C_voidSetAddress(0xE0);
    274c:	80 ee       	ldi	r24, 0xE0	; 224
    274e:	0e 94 b0 0b 	call	0x1760	; 0x1760 <I2C_voidSetAddress>
	I2C_voidInit(50000);
    2752:	60 e5       	ldi	r22, 0x50	; 80
    2754:	73 ec       	ldi	r23, 0xC3	; 195
    2756:	80 e0       	ldi	r24, 0x00	; 0
    2758:	90 e0       	ldi	r25, 0x00	; 0
    275a:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <I2C_voidInit>
    275e:	8c c0       	rjmp	.+280    	; 0x2878 <main+0x144>

	while (counter <10){
    2760:	80 e0       	ldi	r24, 0x00	; 0
    2762:	90 e0       	ldi	r25, 0x00	; 0
    2764:	aa ef       	ldi	r26, 0xFA	; 250
    2766:	b3 e4       	ldi	r27, 0x43	; 67
    2768:	8b 87       	std	Y+11, r24	; 0x0b
    276a:	9c 87       	std	Y+12, r25	; 0x0c
    276c:	ad 87       	std	Y+13, r26	; 0x0d
    276e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2770:	6b 85       	ldd	r22, Y+11	; 0x0b
    2772:	7c 85       	ldd	r23, Y+12	; 0x0c
    2774:	8d 85       	ldd	r24, Y+13	; 0x0d
    2776:	9e 85       	ldd	r25, Y+14	; 0x0e
    2778:	20 e0       	ldi	r18, 0x00	; 0
    277a:	30 e0       	ldi	r19, 0x00	; 0
    277c:	4a ef       	ldi	r20, 0xFA	; 250
    277e:	54 e4       	ldi	r21, 0x44	; 68
    2780:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2784:	dc 01       	movw	r26, r24
    2786:	cb 01       	movw	r24, r22
    2788:	8f 83       	std	Y+7, r24	; 0x07
    278a:	98 87       	std	Y+8, r25	; 0x08
    278c:	a9 87       	std	Y+9, r26	; 0x09
    278e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2790:	6f 81       	ldd	r22, Y+7	; 0x07
    2792:	78 85       	ldd	r23, Y+8	; 0x08
    2794:	89 85       	ldd	r24, Y+9	; 0x09
    2796:	9a 85       	ldd	r25, Y+10	; 0x0a
    2798:	20 e0       	ldi	r18, 0x00	; 0
    279a:	30 e0       	ldi	r19, 0x00	; 0
    279c:	40 e8       	ldi	r20, 0x80	; 128
    279e:	5f e3       	ldi	r21, 0x3F	; 63
    27a0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    27a4:	88 23       	and	r24, r24
    27a6:	2c f4       	brge	.+10     	; 0x27b2 <main+0x7e>
		__ticks = 1;
    27a8:	81 e0       	ldi	r24, 0x01	; 1
    27aa:	90 e0       	ldi	r25, 0x00	; 0
    27ac:	9e 83       	std	Y+6, r25	; 0x06
    27ae:	8d 83       	std	Y+5, r24	; 0x05
    27b0:	3f c0       	rjmp	.+126    	; 0x2830 <main+0xfc>
	else if (__tmp > 65535)
    27b2:	6f 81       	ldd	r22, Y+7	; 0x07
    27b4:	78 85       	ldd	r23, Y+8	; 0x08
    27b6:	89 85       	ldd	r24, Y+9	; 0x09
    27b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ba:	20 e0       	ldi	r18, 0x00	; 0
    27bc:	3f ef       	ldi	r19, 0xFF	; 255
    27be:	4f e7       	ldi	r20, 0x7F	; 127
    27c0:	57 e4       	ldi	r21, 0x47	; 71
    27c2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    27c6:	18 16       	cp	r1, r24
    27c8:	4c f5       	brge	.+82     	; 0x281c <main+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    27cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    27ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    27d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    27d2:	20 e0       	ldi	r18, 0x00	; 0
    27d4:	30 e0       	ldi	r19, 0x00	; 0
    27d6:	40 e2       	ldi	r20, 0x20	; 32
    27d8:	51 e4       	ldi	r21, 0x41	; 65
    27da:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27de:	dc 01       	movw	r26, r24
    27e0:	cb 01       	movw	r24, r22
    27e2:	bc 01       	movw	r22, r24
    27e4:	cd 01       	movw	r24, r26
    27e6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27ea:	dc 01       	movw	r26, r24
    27ec:	cb 01       	movw	r24, r22
    27ee:	9e 83       	std	Y+6, r25	; 0x06
    27f0:	8d 83       	std	Y+5, r24	; 0x05
    27f2:	0f c0       	rjmp	.+30     	; 0x2812 <main+0xde>
    27f4:	88 ec       	ldi	r24, 0xC8	; 200
    27f6:	90 e0       	ldi	r25, 0x00	; 0
    27f8:	9c 83       	std	Y+4, r25	; 0x04
    27fa:	8b 83       	std	Y+3, r24	; 0x03
    27fc:	8b 81       	ldd	r24, Y+3	; 0x03
    27fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2800:	01 97       	sbiw	r24, 0x01	; 1
    2802:	f1 f7       	brne	.-4      	; 0x2800 <main+0xcc>
    2804:	9c 83       	std	Y+4, r25	; 0x04
    2806:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2808:	8d 81       	ldd	r24, Y+5	; 0x05
    280a:	9e 81       	ldd	r25, Y+6	; 0x06
    280c:	01 97       	sbiw	r24, 0x01	; 1
    280e:	9e 83       	std	Y+6, r25	; 0x06
    2810:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2812:	8d 81       	ldd	r24, Y+5	; 0x05
    2814:	9e 81       	ldd	r25, Y+6	; 0x06
    2816:	00 97       	sbiw	r24, 0x00	; 0
    2818:	69 f7       	brne	.-38     	; 0x27f4 <main+0xc0>
    281a:	14 c0       	rjmp	.+40     	; 0x2844 <main+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    281c:	6f 81       	ldd	r22, Y+7	; 0x07
    281e:	78 85       	ldd	r23, Y+8	; 0x08
    2820:	89 85       	ldd	r24, Y+9	; 0x09
    2822:	9a 85       	ldd	r25, Y+10	; 0x0a
    2824:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2828:	dc 01       	movw	r26, r24
    282a:	cb 01       	movw	r24, r22
    282c:	9e 83       	std	Y+6, r25	; 0x06
    282e:	8d 83       	std	Y+5, r24	; 0x05
    2830:	8d 81       	ldd	r24, Y+5	; 0x05
    2832:	9e 81       	ldd	r25, Y+6	; 0x06
    2834:	9a 83       	std	Y+2, r25	; 0x02
    2836:	89 83       	std	Y+1, r24	; 0x01
    2838:	89 81       	ldd	r24, Y+1	; 0x01
    283a:	9a 81       	ldd	r25, Y+2	; 0x02
    283c:	01 97       	sbiw	r24, 0x01	; 1
    283e:	f1 f7       	brne	.-4      	; 0x283c <main+0x108>
    2840:	9a 83       	std	Y+2, r25	; 0x02
    2842:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		I2C_voidStart(); // transmit start condition
    2844:	0e 94 37 0b 	call	0x166e	; 0x166e <I2C_voidStart>
			I2C_voidWriteAddress(0b10100000); // transmit device address and Write
    2848:	80 ea       	ldi	r24, 0xA0	; 160
    284a:	0e 94 57 0b 	call	0x16ae	; 0x16ae <I2C_voidWriteAddress>
			I2C_voidWriteData(0x00); // transmit word address
    284e:	80 e0       	ldi	r24, 0x00	; 0
    2850:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <I2C_voidWriteData>
			I2C_repeated_start(); // transmit repeated start condition
    2854:	0e 94 36 0c 	call	0x186c	; 0x186c <I2C_repeated_start>
			I2C_write_address_and_read(0b10100001); // transmit device address and read
    2858:	81 ea       	ldi	r24, 0xA1	; 161
    285a:	90 e0       	ldi	r25, 0x00	; 0
    285c:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <I2C_write_address_and_read>
			X =I2C_read_with_NACK();
    2860:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <I2C_read_with_NACK>
    2864:	88 8b       	std	Y+16, r24	; 0x10
			I2C_voidStop();
    2866:	0e 94 a5 0b 	call	0x174a	; 0x174a <I2C_voidStop>
			LCD_voidDispChar(X+38);
    286a:	88 89       	ldd	r24, Y+16	; 0x10
    286c:	8a 5d       	subi	r24, 0xDA	; 218
    286e:	0e 94 44 12 	call	0x2488	; 0x2488 <LCD_voidDispChar>
		counter ++ ;
    2872:	8f 85       	ldd	r24, Y+15	; 0x0f
    2874:	8f 5f       	subi	r24, 0xFF	; 255
    2876:	8f 87       	std	Y+15, r24	; 0x0f
//	_delay_ms(25000);
	LCD_voidInit();
	I2C_voidSetAddress(0xE0);
	I2C_voidInit(50000);

	while (counter <10){
    2878:	8f 85       	ldd	r24, Y+15	; 0x0f
    287a:	8a 30       	cpi	r24, 0x0A	; 10
    287c:	08 f4       	brcc	.+2      	; 0x2880 <main+0x14c>
    287e:	70 cf       	rjmp	.-288    	; 0x2760 <main+0x2c>
    2880:	80 e0       	ldi	r24, 0x00	; 0
    2882:	90 e0       	ldi	r25, 0x00	; 0
			X =I2C_read_with_NACK();
			I2C_voidStop();
			LCD_voidDispChar(X+38);
		counter ++ ;
	}
}
    2884:	60 96       	adiw	r28, 0x10	; 16
    2886:	0f b6       	in	r0, 0x3f	; 63
    2888:	f8 94       	cli
    288a:	de bf       	out	0x3e, r29	; 62
    288c:	0f be       	out	0x3f, r0	; 63
    288e:	cd bf       	out	0x3d, r28	; 61
    2890:	cf 91       	pop	r28
    2892:	df 91       	pop	r29
    2894:	08 95       	ret

00002896 <__udivmodsi4>:
    2896:	a1 e2       	ldi	r26, 0x21	; 33
    2898:	1a 2e       	mov	r1, r26
    289a:	aa 1b       	sub	r26, r26
    289c:	bb 1b       	sub	r27, r27
    289e:	fd 01       	movw	r30, r26
    28a0:	0d c0       	rjmp	.+26     	; 0x28bc <__udivmodsi4_ep>

000028a2 <__udivmodsi4_loop>:
    28a2:	aa 1f       	adc	r26, r26
    28a4:	bb 1f       	adc	r27, r27
    28a6:	ee 1f       	adc	r30, r30
    28a8:	ff 1f       	adc	r31, r31
    28aa:	a2 17       	cp	r26, r18
    28ac:	b3 07       	cpc	r27, r19
    28ae:	e4 07       	cpc	r30, r20
    28b0:	f5 07       	cpc	r31, r21
    28b2:	20 f0       	brcs	.+8      	; 0x28bc <__udivmodsi4_ep>
    28b4:	a2 1b       	sub	r26, r18
    28b6:	b3 0b       	sbc	r27, r19
    28b8:	e4 0b       	sbc	r30, r20
    28ba:	f5 0b       	sbc	r31, r21

000028bc <__udivmodsi4_ep>:
    28bc:	66 1f       	adc	r22, r22
    28be:	77 1f       	adc	r23, r23
    28c0:	88 1f       	adc	r24, r24
    28c2:	99 1f       	adc	r25, r25
    28c4:	1a 94       	dec	r1
    28c6:	69 f7       	brne	.-38     	; 0x28a2 <__udivmodsi4_loop>
    28c8:	60 95       	com	r22
    28ca:	70 95       	com	r23
    28cc:	80 95       	com	r24
    28ce:	90 95       	com	r25
    28d0:	9b 01       	movw	r18, r22
    28d2:	ac 01       	movw	r20, r24
    28d4:	bd 01       	movw	r22, r26
    28d6:	cf 01       	movw	r24, r30
    28d8:	08 95       	ret

000028da <__prologue_saves__>:
    28da:	2f 92       	push	r2
    28dc:	3f 92       	push	r3
    28de:	4f 92       	push	r4
    28e0:	5f 92       	push	r5
    28e2:	6f 92       	push	r6
    28e4:	7f 92       	push	r7
    28e6:	8f 92       	push	r8
    28e8:	9f 92       	push	r9
    28ea:	af 92       	push	r10
    28ec:	bf 92       	push	r11
    28ee:	cf 92       	push	r12
    28f0:	df 92       	push	r13
    28f2:	ef 92       	push	r14
    28f4:	ff 92       	push	r15
    28f6:	0f 93       	push	r16
    28f8:	1f 93       	push	r17
    28fa:	cf 93       	push	r28
    28fc:	df 93       	push	r29
    28fe:	cd b7       	in	r28, 0x3d	; 61
    2900:	de b7       	in	r29, 0x3e	; 62
    2902:	ca 1b       	sub	r28, r26
    2904:	db 0b       	sbc	r29, r27
    2906:	0f b6       	in	r0, 0x3f	; 63
    2908:	f8 94       	cli
    290a:	de bf       	out	0x3e, r29	; 62
    290c:	0f be       	out	0x3f, r0	; 63
    290e:	cd bf       	out	0x3d, r28	; 61
    2910:	09 94       	ijmp

00002912 <__epilogue_restores__>:
    2912:	2a 88       	ldd	r2, Y+18	; 0x12
    2914:	39 88       	ldd	r3, Y+17	; 0x11
    2916:	48 88       	ldd	r4, Y+16	; 0x10
    2918:	5f 84       	ldd	r5, Y+15	; 0x0f
    291a:	6e 84       	ldd	r6, Y+14	; 0x0e
    291c:	7d 84       	ldd	r7, Y+13	; 0x0d
    291e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2920:	9b 84       	ldd	r9, Y+11	; 0x0b
    2922:	aa 84       	ldd	r10, Y+10	; 0x0a
    2924:	b9 84       	ldd	r11, Y+9	; 0x09
    2926:	c8 84       	ldd	r12, Y+8	; 0x08
    2928:	df 80       	ldd	r13, Y+7	; 0x07
    292a:	ee 80       	ldd	r14, Y+6	; 0x06
    292c:	fd 80       	ldd	r15, Y+5	; 0x05
    292e:	0c 81       	ldd	r16, Y+4	; 0x04
    2930:	1b 81       	ldd	r17, Y+3	; 0x03
    2932:	aa 81       	ldd	r26, Y+2	; 0x02
    2934:	b9 81       	ldd	r27, Y+1	; 0x01
    2936:	ce 0f       	add	r28, r30
    2938:	d1 1d       	adc	r29, r1
    293a:	0f b6       	in	r0, 0x3f	; 63
    293c:	f8 94       	cli
    293e:	de bf       	out	0x3e, r29	; 62
    2940:	0f be       	out	0x3f, r0	; 63
    2942:	cd bf       	out	0x3d, r28	; 61
    2944:	ed 01       	movw	r28, r26
    2946:	08 95       	ret

00002948 <sprintf>:
    2948:	ae e0       	ldi	r26, 0x0E	; 14
    294a:	b0 e0       	ldi	r27, 0x00	; 0
    294c:	ea ea       	ldi	r30, 0xAA	; 170
    294e:	f4 e1       	ldi	r31, 0x14	; 20
    2950:	0c 94 7b 14 	jmp	0x28f6	; 0x28f6 <__prologue_saves__+0x1c>
    2954:	0d 89       	ldd	r16, Y+21	; 0x15
    2956:	1e 89       	ldd	r17, Y+22	; 0x16
    2958:	86 e0       	ldi	r24, 0x06	; 6
    295a:	8c 83       	std	Y+4, r24	; 0x04
    295c:	1a 83       	std	Y+2, r17	; 0x02
    295e:	09 83       	std	Y+1, r16	; 0x01
    2960:	8f ef       	ldi	r24, 0xFF	; 255
    2962:	9f e7       	ldi	r25, 0x7F	; 127
    2964:	9e 83       	std	Y+6, r25	; 0x06
    2966:	8d 83       	std	Y+5, r24	; 0x05
    2968:	9e 01       	movw	r18, r28
    296a:	27 5e       	subi	r18, 0xE7	; 231
    296c:	3f 4f       	sbci	r19, 0xFF	; 255
    296e:	ce 01       	movw	r24, r28
    2970:	01 96       	adiw	r24, 0x01	; 1
    2972:	6f 89       	ldd	r22, Y+23	; 0x17
    2974:	78 8d       	ldd	r23, Y+24	; 0x18
    2976:	a9 01       	movw	r20, r18
    2978:	0e 94 c8 14 	call	0x2990	; 0x2990 <vfprintf>
    297c:	2f 81       	ldd	r18, Y+7	; 0x07
    297e:	38 85       	ldd	r19, Y+8	; 0x08
    2980:	02 0f       	add	r16, r18
    2982:	13 1f       	adc	r17, r19
    2984:	f8 01       	movw	r30, r16
    2986:	10 82       	st	Z, r1
    2988:	2e 96       	adiw	r28, 0x0e	; 14
    298a:	e4 e0       	ldi	r30, 0x04	; 4
    298c:	0c 94 97 14 	jmp	0x292e	; 0x292e <__epilogue_restores__+0x1c>

00002990 <vfprintf>:
    2990:	ab e0       	ldi	r26, 0x0B	; 11
    2992:	b0 e0       	ldi	r27, 0x00	; 0
    2994:	ee ec       	ldi	r30, 0xCE	; 206
    2996:	f4 e1       	ldi	r31, 0x14	; 20
    2998:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__prologue_saves__>
    299c:	3c 01       	movw	r6, r24
    299e:	2b 01       	movw	r4, r22
    29a0:	5a 01       	movw	r10, r20
    29a2:	fc 01       	movw	r30, r24
    29a4:	17 82       	std	Z+7, r1	; 0x07
    29a6:	16 82       	std	Z+6, r1	; 0x06
    29a8:	83 81       	ldd	r24, Z+3	; 0x03
    29aa:	81 fd       	sbrc	r24, 1
    29ac:	03 c0       	rjmp	.+6      	; 0x29b4 <vfprintf+0x24>
    29ae:	6f ef       	ldi	r22, 0xFF	; 255
    29b0:	7f ef       	ldi	r23, 0xFF	; 255
    29b2:	c6 c1       	rjmp	.+908    	; 0x2d40 <vfprintf+0x3b0>
    29b4:	9a e0       	ldi	r25, 0x0A	; 10
    29b6:	89 2e       	mov	r8, r25
    29b8:	1e 01       	movw	r2, r28
    29ba:	08 94       	sec
    29bc:	21 1c       	adc	r2, r1
    29be:	31 1c       	adc	r3, r1
    29c0:	f3 01       	movw	r30, r6
    29c2:	23 81       	ldd	r18, Z+3	; 0x03
    29c4:	f2 01       	movw	r30, r4
    29c6:	23 fd       	sbrc	r18, 3
    29c8:	85 91       	lpm	r24, Z+
    29ca:	23 ff       	sbrs	r18, 3
    29cc:	81 91       	ld	r24, Z+
    29ce:	2f 01       	movw	r4, r30
    29d0:	88 23       	and	r24, r24
    29d2:	09 f4       	brne	.+2      	; 0x29d6 <vfprintf+0x46>
    29d4:	b2 c1       	rjmp	.+868    	; 0x2d3a <vfprintf+0x3aa>
    29d6:	85 32       	cpi	r24, 0x25	; 37
    29d8:	39 f4       	brne	.+14     	; 0x29e8 <vfprintf+0x58>
    29da:	23 fd       	sbrc	r18, 3
    29dc:	85 91       	lpm	r24, Z+
    29de:	23 ff       	sbrs	r18, 3
    29e0:	81 91       	ld	r24, Z+
    29e2:	2f 01       	movw	r4, r30
    29e4:	85 32       	cpi	r24, 0x25	; 37
    29e6:	29 f4       	brne	.+10     	; 0x29f2 <vfprintf+0x62>
    29e8:	90 e0       	ldi	r25, 0x00	; 0
    29ea:	b3 01       	movw	r22, r6
    29ec:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <fputc>
    29f0:	e7 cf       	rjmp	.-50     	; 0x29c0 <vfprintf+0x30>
    29f2:	98 2f       	mov	r25, r24
    29f4:	ff 24       	eor	r15, r15
    29f6:	ee 24       	eor	r14, r14
    29f8:	99 24       	eor	r9, r9
    29fa:	ff e1       	ldi	r31, 0x1F	; 31
    29fc:	ff 15       	cp	r31, r15
    29fe:	d0 f0       	brcs	.+52     	; 0x2a34 <vfprintf+0xa4>
    2a00:	9b 32       	cpi	r25, 0x2B	; 43
    2a02:	69 f0       	breq	.+26     	; 0x2a1e <vfprintf+0x8e>
    2a04:	9c 32       	cpi	r25, 0x2C	; 44
    2a06:	28 f4       	brcc	.+10     	; 0x2a12 <vfprintf+0x82>
    2a08:	90 32       	cpi	r25, 0x20	; 32
    2a0a:	59 f0       	breq	.+22     	; 0x2a22 <vfprintf+0x92>
    2a0c:	93 32       	cpi	r25, 0x23	; 35
    2a0e:	91 f4       	brne	.+36     	; 0x2a34 <vfprintf+0xa4>
    2a10:	0e c0       	rjmp	.+28     	; 0x2a2e <vfprintf+0x9e>
    2a12:	9d 32       	cpi	r25, 0x2D	; 45
    2a14:	49 f0       	breq	.+18     	; 0x2a28 <vfprintf+0x98>
    2a16:	90 33       	cpi	r25, 0x30	; 48
    2a18:	69 f4       	brne	.+26     	; 0x2a34 <vfprintf+0xa4>
    2a1a:	41 e0       	ldi	r20, 0x01	; 1
    2a1c:	24 c0       	rjmp	.+72     	; 0x2a66 <vfprintf+0xd6>
    2a1e:	52 e0       	ldi	r21, 0x02	; 2
    2a20:	f5 2a       	or	r15, r21
    2a22:	84 e0       	ldi	r24, 0x04	; 4
    2a24:	f8 2a       	or	r15, r24
    2a26:	28 c0       	rjmp	.+80     	; 0x2a78 <vfprintf+0xe8>
    2a28:	98 e0       	ldi	r25, 0x08	; 8
    2a2a:	f9 2a       	or	r15, r25
    2a2c:	25 c0       	rjmp	.+74     	; 0x2a78 <vfprintf+0xe8>
    2a2e:	e0 e1       	ldi	r30, 0x10	; 16
    2a30:	fe 2a       	or	r15, r30
    2a32:	22 c0       	rjmp	.+68     	; 0x2a78 <vfprintf+0xe8>
    2a34:	f7 fc       	sbrc	r15, 7
    2a36:	29 c0       	rjmp	.+82     	; 0x2a8a <vfprintf+0xfa>
    2a38:	89 2f       	mov	r24, r25
    2a3a:	80 53       	subi	r24, 0x30	; 48
    2a3c:	8a 30       	cpi	r24, 0x0A	; 10
    2a3e:	70 f4       	brcc	.+28     	; 0x2a5c <vfprintf+0xcc>
    2a40:	f6 fe       	sbrs	r15, 6
    2a42:	05 c0       	rjmp	.+10     	; 0x2a4e <vfprintf+0xbe>
    2a44:	98 9c       	mul	r9, r8
    2a46:	90 2c       	mov	r9, r0
    2a48:	11 24       	eor	r1, r1
    2a4a:	98 0e       	add	r9, r24
    2a4c:	15 c0       	rjmp	.+42     	; 0x2a78 <vfprintf+0xe8>
    2a4e:	e8 9c       	mul	r14, r8
    2a50:	e0 2c       	mov	r14, r0
    2a52:	11 24       	eor	r1, r1
    2a54:	e8 0e       	add	r14, r24
    2a56:	f0 e2       	ldi	r31, 0x20	; 32
    2a58:	ff 2a       	or	r15, r31
    2a5a:	0e c0       	rjmp	.+28     	; 0x2a78 <vfprintf+0xe8>
    2a5c:	9e 32       	cpi	r25, 0x2E	; 46
    2a5e:	29 f4       	brne	.+10     	; 0x2a6a <vfprintf+0xda>
    2a60:	f6 fc       	sbrc	r15, 6
    2a62:	6b c1       	rjmp	.+726    	; 0x2d3a <vfprintf+0x3aa>
    2a64:	40 e4       	ldi	r20, 0x40	; 64
    2a66:	f4 2a       	or	r15, r20
    2a68:	07 c0       	rjmp	.+14     	; 0x2a78 <vfprintf+0xe8>
    2a6a:	9c 36       	cpi	r25, 0x6C	; 108
    2a6c:	19 f4       	brne	.+6      	; 0x2a74 <vfprintf+0xe4>
    2a6e:	50 e8       	ldi	r21, 0x80	; 128
    2a70:	f5 2a       	or	r15, r21
    2a72:	02 c0       	rjmp	.+4      	; 0x2a78 <vfprintf+0xe8>
    2a74:	98 36       	cpi	r25, 0x68	; 104
    2a76:	49 f4       	brne	.+18     	; 0x2a8a <vfprintf+0xfa>
    2a78:	f2 01       	movw	r30, r4
    2a7a:	23 fd       	sbrc	r18, 3
    2a7c:	95 91       	lpm	r25, Z+
    2a7e:	23 ff       	sbrs	r18, 3
    2a80:	91 91       	ld	r25, Z+
    2a82:	2f 01       	movw	r4, r30
    2a84:	99 23       	and	r25, r25
    2a86:	09 f0       	breq	.+2      	; 0x2a8a <vfprintf+0xfa>
    2a88:	b8 cf       	rjmp	.-144    	; 0x29fa <vfprintf+0x6a>
    2a8a:	89 2f       	mov	r24, r25
    2a8c:	85 54       	subi	r24, 0x45	; 69
    2a8e:	83 30       	cpi	r24, 0x03	; 3
    2a90:	18 f0       	brcs	.+6      	; 0x2a98 <vfprintf+0x108>
    2a92:	80 52       	subi	r24, 0x20	; 32
    2a94:	83 30       	cpi	r24, 0x03	; 3
    2a96:	38 f4       	brcc	.+14     	; 0x2aa6 <vfprintf+0x116>
    2a98:	44 e0       	ldi	r20, 0x04	; 4
    2a9a:	50 e0       	ldi	r21, 0x00	; 0
    2a9c:	a4 0e       	add	r10, r20
    2a9e:	b5 1e       	adc	r11, r21
    2aa0:	5f e3       	ldi	r21, 0x3F	; 63
    2aa2:	59 83       	std	Y+1, r21	; 0x01
    2aa4:	0f c0       	rjmp	.+30     	; 0x2ac4 <vfprintf+0x134>
    2aa6:	93 36       	cpi	r25, 0x63	; 99
    2aa8:	31 f0       	breq	.+12     	; 0x2ab6 <vfprintf+0x126>
    2aaa:	93 37       	cpi	r25, 0x73	; 115
    2aac:	79 f0       	breq	.+30     	; 0x2acc <vfprintf+0x13c>
    2aae:	93 35       	cpi	r25, 0x53	; 83
    2ab0:	09 f0       	breq	.+2      	; 0x2ab4 <vfprintf+0x124>
    2ab2:	56 c0       	rjmp	.+172    	; 0x2b60 <vfprintf+0x1d0>
    2ab4:	20 c0       	rjmp	.+64     	; 0x2af6 <vfprintf+0x166>
    2ab6:	f5 01       	movw	r30, r10
    2ab8:	80 81       	ld	r24, Z
    2aba:	89 83       	std	Y+1, r24	; 0x01
    2abc:	42 e0       	ldi	r20, 0x02	; 2
    2abe:	50 e0       	ldi	r21, 0x00	; 0
    2ac0:	a4 0e       	add	r10, r20
    2ac2:	b5 1e       	adc	r11, r21
    2ac4:	61 01       	movw	r12, r2
    2ac6:	01 e0       	ldi	r16, 0x01	; 1
    2ac8:	10 e0       	ldi	r17, 0x00	; 0
    2aca:	12 c0       	rjmp	.+36     	; 0x2af0 <vfprintf+0x160>
    2acc:	f5 01       	movw	r30, r10
    2ace:	c0 80       	ld	r12, Z
    2ad0:	d1 80       	ldd	r13, Z+1	; 0x01
    2ad2:	f6 fc       	sbrc	r15, 6
    2ad4:	03 c0       	rjmp	.+6      	; 0x2adc <vfprintf+0x14c>
    2ad6:	6f ef       	ldi	r22, 0xFF	; 255
    2ad8:	7f ef       	ldi	r23, 0xFF	; 255
    2ada:	02 c0       	rjmp	.+4      	; 0x2ae0 <vfprintf+0x150>
    2adc:	69 2d       	mov	r22, r9
    2ade:	70 e0       	ldi	r23, 0x00	; 0
    2ae0:	42 e0       	ldi	r20, 0x02	; 2
    2ae2:	50 e0       	ldi	r21, 0x00	; 0
    2ae4:	a4 0e       	add	r10, r20
    2ae6:	b5 1e       	adc	r11, r21
    2ae8:	c6 01       	movw	r24, r12
    2aea:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <strnlen>
    2aee:	8c 01       	movw	r16, r24
    2af0:	5f e7       	ldi	r21, 0x7F	; 127
    2af2:	f5 22       	and	r15, r21
    2af4:	14 c0       	rjmp	.+40     	; 0x2b1e <vfprintf+0x18e>
    2af6:	f5 01       	movw	r30, r10
    2af8:	c0 80       	ld	r12, Z
    2afa:	d1 80       	ldd	r13, Z+1	; 0x01
    2afc:	f6 fc       	sbrc	r15, 6
    2afe:	03 c0       	rjmp	.+6      	; 0x2b06 <vfprintf+0x176>
    2b00:	6f ef       	ldi	r22, 0xFF	; 255
    2b02:	7f ef       	ldi	r23, 0xFF	; 255
    2b04:	02 c0       	rjmp	.+4      	; 0x2b0a <vfprintf+0x17a>
    2b06:	69 2d       	mov	r22, r9
    2b08:	70 e0       	ldi	r23, 0x00	; 0
    2b0a:	42 e0       	ldi	r20, 0x02	; 2
    2b0c:	50 e0       	ldi	r21, 0x00	; 0
    2b0e:	a4 0e       	add	r10, r20
    2b10:	b5 1e       	adc	r11, r21
    2b12:	c6 01       	movw	r24, r12
    2b14:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <strnlen_P>
    2b18:	8c 01       	movw	r16, r24
    2b1a:	50 e8       	ldi	r21, 0x80	; 128
    2b1c:	f5 2a       	or	r15, r21
    2b1e:	f3 fe       	sbrs	r15, 3
    2b20:	07 c0       	rjmp	.+14     	; 0x2b30 <vfprintf+0x1a0>
    2b22:	1a c0       	rjmp	.+52     	; 0x2b58 <vfprintf+0x1c8>
    2b24:	80 e2       	ldi	r24, 0x20	; 32
    2b26:	90 e0       	ldi	r25, 0x00	; 0
    2b28:	b3 01       	movw	r22, r6
    2b2a:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <fputc>
    2b2e:	ea 94       	dec	r14
    2b30:	8e 2d       	mov	r24, r14
    2b32:	90 e0       	ldi	r25, 0x00	; 0
    2b34:	08 17       	cp	r16, r24
    2b36:	19 07       	cpc	r17, r25
    2b38:	a8 f3       	brcs	.-22     	; 0x2b24 <vfprintf+0x194>
    2b3a:	0e c0       	rjmp	.+28     	; 0x2b58 <vfprintf+0x1c8>
    2b3c:	f6 01       	movw	r30, r12
    2b3e:	f7 fc       	sbrc	r15, 7
    2b40:	85 91       	lpm	r24, Z+
    2b42:	f7 fe       	sbrs	r15, 7
    2b44:	81 91       	ld	r24, Z+
    2b46:	6f 01       	movw	r12, r30
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	b3 01       	movw	r22, r6
    2b4c:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <fputc>
    2b50:	e1 10       	cpse	r14, r1
    2b52:	ea 94       	dec	r14
    2b54:	01 50       	subi	r16, 0x01	; 1
    2b56:	10 40       	sbci	r17, 0x00	; 0
    2b58:	01 15       	cp	r16, r1
    2b5a:	11 05       	cpc	r17, r1
    2b5c:	79 f7       	brne	.-34     	; 0x2b3c <vfprintf+0x1ac>
    2b5e:	ea c0       	rjmp	.+468    	; 0x2d34 <vfprintf+0x3a4>
    2b60:	94 36       	cpi	r25, 0x64	; 100
    2b62:	11 f0       	breq	.+4      	; 0x2b68 <vfprintf+0x1d8>
    2b64:	99 36       	cpi	r25, 0x69	; 105
    2b66:	69 f5       	brne	.+90     	; 0x2bc2 <vfprintf+0x232>
    2b68:	f7 fe       	sbrs	r15, 7
    2b6a:	08 c0       	rjmp	.+16     	; 0x2b7c <vfprintf+0x1ec>
    2b6c:	f5 01       	movw	r30, r10
    2b6e:	20 81       	ld	r18, Z
    2b70:	31 81       	ldd	r19, Z+1	; 0x01
    2b72:	42 81       	ldd	r20, Z+2	; 0x02
    2b74:	53 81       	ldd	r21, Z+3	; 0x03
    2b76:	84 e0       	ldi	r24, 0x04	; 4
    2b78:	90 e0       	ldi	r25, 0x00	; 0
    2b7a:	0a c0       	rjmp	.+20     	; 0x2b90 <vfprintf+0x200>
    2b7c:	f5 01       	movw	r30, r10
    2b7e:	80 81       	ld	r24, Z
    2b80:	91 81       	ldd	r25, Z+1	; 0x01
    2b82:	9c 01       	movw	r18, r24
    2b84:	44 27       	eor	r20, r20
    2b86:	37 fd       	sbrc	r19, 7
    2b88:	40 95       	com	r20
    2b8a:	54 2f       	mov	r21, r20
    2b8c:	82 e0       	ldi	r24, 0x02	; 2
    2b8e:	90 e0       	ldi	r25, 0x00	; 0
    2b90:	a8 0e       	add	r10, r24
    2b92:	b9 1e       	adc	r11, r25
    2b94:	9f e6       	ldi	r25, 0x6F	; 111
    2b96:	f9 22       	and	r15, r25
    2b98:	57 ff       	sbrs	r21, 7
    2b9a:	09 c0       	rjmp	.+18     	; 0x2bae <vfprintf+0x21e>
    2b9c:	50 95       	com	r21
    2b9e:	40 95       	com	r20
    2ba0:	30 95       	com	r19
    2ba2:	21 95       	neg	r18
    2ba4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ba6:	4f 4f       	sbci	r20, 0xFF	; 255
    2ba8:	5f 4f       	sbci	r21, 0xFF	; 255
    2baa:	e0 e8       	ldi	r30, 0x80	; 128
    2bac:	fe 2a       	or	r15, r30
    2bae:	ca 01       	movw	r24, r20
    2bb0:	b9 01       	movw	r22, r18
    2bb2:	a1 01       	movw	r20, r2
    2bb4:	2a e0       	ldi	r18, 0x0A	; 10
    2bb6:	30 e0       	ldi	r19, 0x00	; 0
    2bb8:	0e 94 e7 16 	call	0x2dce	; 0x2dce <__ultoa_invert>
    2bbc:	d8 2e       	mov	r13, r24
    2bbe:	d2 18       	sub	r13, r2
    2bc0:	40 c0       	rjmp	.+128    	; 0x2c42 <vfprintf+0x2b2>
    2bc2:	95 37       	cpi	r25, 0x75	; 117
    2bc4:	29 f4       	brne	.+10     	; 0x2bd0 <vfprintf+0x240>
    2bc6:	1f 2d       	mov	r17, r15
    2bc8:	1f 7e       	andi	r17, 0xEF	; 239
    2bca:	2a e0       	ldi	r18, 0x0A	; 10
    2bcc:	30 e0       	ldi	r19, 0x00	; 0
    2bce:	1d c0       	rjmp	.+58     	; 0x2c0a <vfprintf+0x27a>
    2bd0:	1f 2d       	mov	r17, r15
    2bd2:	19 7f       	andi	r17, 0xF9	; 249
    2bd4:	9f 36       	cpi	r25, 0x6F	; 111
    2bd6:	61 f0       	breq	.+24     	; 0x2bf0 <vfprintf+0x260>
    2bd8:	90 37       	cpi	r25, 0x70	; 112
    2bda:	20 f4       	brcc	.+8      	; 0x2be4 <vfprintf+0x254>
    2bdc:	98 35       	cpi	r25, 0x58	; 88
    2bde:	09 f0       	breq	.+2      	; 0x2be2 <vfprintf+0x252>
    2be0:	ac c0       	rjmp	.+344    	; 0x2d3a <vfprintf+0x3aa>
    2be2:	0f c0       	rjmp	.+30     	; 0x2c02 <vfprintf+0x272>
    2be4:	90 37       	cpi	r25, 0x70	; 112
    2be6:	39 f0       	breq	.+14     	; 0x2bf6 <vfprintf+0x266>
    2be8:	98 37       	cpi	r25, 0x78	; 120
    2bea:	09 f0       	breq	.+2      	; 0x2bee <vfprintf+0x25e>
    2bec:	a6 c0       	rjmp	.+332    	; 0x2d3a <vfprintf+0x3aa>
    2bee:	04 c0       	rjmp	.+8      	; 0x2bf8 <vfprintf+0x268>
    2bf0:	28 e0       	ldi	r18, 0x08	; 8
    2bf2:	30 e0       	ldi	r19, 0x00	; 0
    2bf4:	0a c0       	rjmp	.+20     	; 0x2c0a <vfprintf+0x27a>
    2bf6:	10 61       	ori	r17, 0x10	; 16
    2bf8:	14 fd       	sbrc	r17, 4
    2bfa:	14 60       	ori	r17, 0x04	; 4
    2bfc:	20 e1       	ldi	r18, 0x10	; 16
    2bfe:	30 e0       	ldi	r19, 0x00	; 0
    2c00:	04 c0       	rjmp	.+8      	; 0x2c0a <vfprintf+0x27a>
    2c02:	14 fd       	sbrc	r17, 4
    2c04:	16 60       	ori	r17, 0x06	; 6
    2c06:	20 e1       	ldi	r18, 0x10	; 16
    2c08:	32 e0       	ldi	r19, 0x02	; 2
    2c0a:	17 ff       	sbrs	r17, 7
    2c0c:	08 c0       	rjmp	.+16     	; 0x2c1e <vfprintf+0x28e>
    2c0e:	f5 01       	movw	r30, r10
    2c10:	60 81       	ld	r22, Z
    2c12:	71 81       	ldd	r23, Z+1	; 0x01
    2c14:	82 81       	ldd	r24, Z+2	; 0x02
    2c16:	93 81       	ldd	r25, Z+3	; 0x03
    2c18:	44 e0       	ldi	r20, 0x04	; 4
    2c1a:	50 e0       	ldi	r21, 0x00	; 0
    2c1c:	08 c0       	rjmp	.+16     	; 0x2c2e <vfprintf+0x29e>
    2c1e:	f5 01       	movw	r30, r10
    2c20:	80 81       	ld	r24, Z
    2c22:	91 81       	ldd	r25, Z+1	; 0x01
    2c24:	bc 01       	movw	r22, r24
    2c26:	80 e0       	ldi	r24, 0x00	; 0
    2c28:	90 e0       	ldi	r25, 0x00	; 0
    2c2a:	42 e0       	ldi	r20, 0x02	; 2
    2c2c:	50 e0       	ldi	r21, 0x00	; 0
    2c2e:	a4 0e       	add	r10, r20
    2c30:	b5 1e       	adc	r11, r21
    2c32:	a1 01       	movw	r20, r2
    2c34:	0e 94 e7 16 	call	0x2dce	; 0x2dce <__ultoa_invert>
    2c38:	d8 2e       	mov	r13, r24
    2c3a:	d2 18       	sub	r13, r2
    2c3c:	8f e7       	ldi	r24, 0x7F	; 127
    2c3e:	f8 2e       	mov	r15, r24
    2c40:	f1 22       	and	r15, r17
    2c42:	f6 fe       	sbrs	r15, 6
    2c44:	0b c0       	rjmp	.+22     	; 0x2c5c <vfprintf+0x2cc>
    2c46:	5e ef       	ldi	r21, 0xFE	; 254
    2c48:	f5 22       	and	r15, r21
    2c4a:	d9 14       	cp	r13, r9
    2c4c:	38 f4       	brcc	.+14     	; 0x2c5c <vfprintf+0x2cc>
    2c4e:	f4 fe       	sbrs	r15, 4
    2c50:	07 c0       	rjmp	.+14     	; 0x2c60 <vfprintf+0x2d0>
    2c52:	f2 fc       	sbrc	r15, 2
    2c54:	05 c0       	rjmp	.+10     	; 0x2c60 <vfprintf+0x2d0>
    2c56:	8f ee       	ldi	r24, 0xEF	; 239
    2c58:	f8 22       	and	r15, r24
    2c5a:	02 c0       	rjmp	.+4      	; 0x2c60 <vfprintf+0x2d0>
    2c5c:	1d 2d       	mov	r17, r13
    2c5e:	01 c0       	rjmp	.+2      	; 0x2c62 <vfprintf+0x2d2>
    2c60:	19 2d       	mov	r17, r9
    2c62:	f4 fe       	sbrs	r15, 4
    2c64:	0d c0       	rjmp	.+26     	; 0x2c80 <vfprintf+0x2f0>
    2c66:	fe 01       	movw	r30, r28
    2c68:	ed 0d       	add	r30, r13
    2c6a:	f1 1d       	adc	r31, r1
    2c6c:	80 81       	ld	r24, Z
    2c6e:	80 33       	cpi	r24, 0x30	; 48
    2c70:	19 f4       	brne	.+6      	; 0x2c78 <vfprintf+0x2e8>
    2c72:	99 ee       	ldi	r25, 0xE9	; 233
    2c74:	f9 22       	and	r15, r25
    2c76:	08 c0       	rjmp	.+16     	; 0x2c88 <vfprintf+0x2f8>
    2c78:	1f 5f       	subi	r17, 0xFF	; 255
    2c7a:	f2 fe       	sbrs	r15, 2
    2c7c:	05 c0       	rjmp	.+10     	; 0x2c88 <vfprintf+0x2f8>
    2c7e:	03 c0       	rjmp	.+6      	; 0x2c86 <vfprintf+0x2f6>
    2c80:	8f 2d       	mov	r24, r15
    2c82:	86 78       	andi	r24, 0x86	; 134
    2c84:	09 f0       	breq	.+2      	; 0x2c88 <vfprintf+0x2f8>
    2c86:	1f 5f       	subi	r17, 0xFF	; 255
    2c88:	0f 2d       	mov	r16, r15
    2c8a:	f3 fc       	sbrc	r15, 3
    2c8c:	14 c0       	rjmp	.+40     	; 0x2cb6 <vfprintf+0x326>
    2c8e:	f0 fe       	sbrs	r15, 0
    2c90:	0f c0       	rjmp	.+30     	; 0x2cb0 <vfprintf+0x320>
    2c92:	1e 15       	cp	r17, r14
    2c94:	10 f0       	brcs	.+4      	; 0x2c9a <vfprintf+0x30a>
    2c96:	9d 2c       	mov	r9, r13
    2c98:	0b c0       	rjmp	.+22     	; 0x2cb0 <vfprintf+0x320>
    2c9a:	9d 2c       	mov	r9, r13
    2c9c:	9e 0c       	add	r9, r14
    2c9e:	91 1a       	sub	r9, r17
    2ca0:	1e 2d       	mov	r17, r14
    2ca2:	06 c0       	rjmp	.+12     	; 0x2cb0 <vfprintf+0x320>
    2ca4:	80 e2       	ldi	r24, 0x20	; 32
    2ca6:	90 e0       	ldi	r25, 0x00	; 0
    2ca8:	b3 01       	movw	r22, r6
    2caa:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <fputc>
    2cae:	1f 5f       	subi	r17, 0xFF	; 255
    2cb0:	1e 15       	cp	r17, r14
    2cb2:	c0 f3       	brcs	.-16     	; 0x2ca4 <vfprintf+0x314>
    2cb4:	04 c0       	rjmp	.+8      	; 0x2cbe <vfprintf+0x32e>
    2cb6:	1e 15       	cp	r17, r14
    2cb8:	10 f4       	brcc	.+4      	; 0x2cbe <vfprintf+0x32e>
    2cba:	e1 1a       	sub	r14, r17
    2cbc:	01 c0       	rjmp	.+2      	; 0x2cc0 <vfprintf+0x330>
    2cbe:	ee 24       	eor	r14, r14
    2cc0:	04 ff       	sbrs	r16, 4
    2cc2:	0f c0       	rjmp	.+30     	; 0x2ce2 <vfprintf+0x352>
    2cc4:	80 e3       	ldi	r24, 0x30	; 48
    2cc6:	90 e0       	ldi	r25, 0x00	; 0
    2cc8:	b3 01       	movw	r22, r6
    2cca:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <fputc>
    2cce:	02 ff       	sbrs	r16, 2
    2cd0:	1d c0       	rjmp	.+58     	; 0x2d0c <vfprintf+0x37c>
    2cd2:	01 fd       	sbrc	r16, 1
    2cd4:	03 c0       	rjmp	.+6      	; 0x2cdc <vfprintf+0x34c>
    2cd6:	88 e7       	ldi	r24, 0x78	; 120
    2cd8:	90 e0       	ldi	r25, 0x00	; 0
    2cda:	0e c0       	rjmp	.+28     	; 0x2cf8 <vfprintf+0x368>
    2cdc:	88 e5       	ldi	r24, 0x58	; 88
    2cde:	90 e0       	ldi	r25, 0x00	; 0
    2ce0:	0b c0       	rjmp	.+22     	; 0x2cf8 <vfprintf+0x368>
    2ce2:	80 2f       	mov	r24, r16
    2ce4:	86 78       	andi	r24, 0x86	; 134
    2ce6:	91 f0       	breq	.+36     	; 0x2d0c <vfprintf+0x37c>
    2ce8:	01 ff       	sbrs	r16, 1
    2cea:	02 c0       	rjmp	.+4      	; 0x2cf0 <vfprintf+0x360>
    2cec:	8b e2       	ldi	r24, 0x2B	; 43
    2cee:	01 c0       	rjmp	.+2      	; 0x2cf2 <vfprintf+0x362>
    2cf0:	80 e2       	ldi	r24, 0x20	; 32
    2cf2:	f7 fc       	sbrc	r15, 7
    2cf4:	8d e2       	ldi	r24, 0x2D	; 45
    2cf6:	90 e0       	ldi	r25, 0x00	; 0
    2cf8:	b3 01       	movw	r22, r6
    2cfa:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <fputc>
    2cfe:	06 c0       	rjmp	.+12     	; 0x2d0c <vfprintf+0x37c>
    2d00:	80 e3       	ldi	r24, 0x30	; 48
    2d02:	90 e0       	ldi	r25, 0x00	; 0
    2d04:	b3 01       	movw	r22, r6
    2d06:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <fputc>
    2d0a:	9a 94       	dec	r9
    2d0c:	d9 14       	cp	r13, r9
    2d0e:	c0 f3       	brcs	.-16     	; 0x2d00 <vfprintf+0x370>
    2d10:	da 94       	dec	r13
    2d12:	f1 01       	movw	r30, r2
    2d14:	ed 0d       	add	r30, r13
    2d16:	f1 1d       	adc	r31, r1
    2d18:	80 81       	ld	r24, Z
    2d1a:	90 e0       	ldi	r25, 0x00	; 0
    2d1c:	b3 01       	movw	r22, r6
    2d1e:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <fputc>
    2d22:	dd 20       	and	r13, r13
    2d24:	a9 f7       	brne	.-22     	; 0x2d10 <vfprintf+0x380>
    2d26:	06 c0       	rjmp	.+12     	; 0x2d34 <vfprintf+0x3a4>
    2d28:	80 e2       	ldi	r24, 0x20	; 32
    2d2a:	90 e0       	ldi	r25, 0x00	; 0
    2d2c:	b3 01       	movw	r22, r6
    2d2e:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <fputc>
    2d32:	ea 94       	dec	r14
    2d34:	ee 20       	and	r14, r14
    2d36:	c1 f7       	brne	.-16     	; 0x2d28 <vfprintf+0x398>
    2d38:	43 ce       	rjmp	.-890    	; 0x29c0 <vfprintf+0x30>
    2d3a:	f3 01       	movw	r30, r6
    2d3c:	66 81       	ldd	r22, Z+6	; 0x06
    2d3e:	77 81       	ldd	r23, Z+7	; 0x07
    2d40:	cb 01       	movw	r24, r22
    2d42:	2b 96       	adiw	r28, 0x0b	; 11
    2d44:	e2 e1       	ldi	r30, 0x12	; 18
    2d46:	0c 94 89 14 	jmp	0x2912	; 0x2912 <__epilogue_restores__>

00002d4a <strnlen_P>:
    2d4a:	fc 01       	movw	r30, r24
    2d4c:	05 90       	lpm	r0, Z+
    2d4e:	61 50       	subi	r22, 0x01	; 1
    2d50:	70 40       	sbci	r23, 0x00	; 0
    2d52:	01 10       	cpse	r0, r1
    2d54:	d8 f7       	brcc	.-10     	; 0x2d4c <strnlen_P+0x2>
    2d56:	80 95       	com	r24
    2d58:	90 95       	com	r25
    2d5a:	8e 0f       	add	r24, r30
    2d5c:	9f 1f       	adc	r25, r31
    2d5e:	08 95       	ret

00002d60 <strnlen>:
    2d60:	fc 01       	movw	r30, r24
    2d62:	61 50       	subi	r22, 0x01	; 1
    2d64:	70 40       	sbci	r23, 0x00	; 0
    2d66:	01 90       	ld	r0, Z+
    2d68:	01 10       	cpse	r0, r1
    2d6a:	d8 f7       	brcc	.-10     	; 0x2d62 <strnlen+0x2>
    2d6c:	80 95       	com	r24
    2d6e:	90 95       	com	r25
    2d70:	8e 0f       	add	r24, r30
    2d72:	9f 1f       	adc	r25, r31
    2d74:	08 95       	ret

00002d76 <fputc>:
    2d76:	0f 93       	push	r16
    2d78:	1f 93       	push	r17
    2d7a:	cf 93       	push	r28
    2d7c:	df 93       	push	r29
    2d7e:	8c 01       	movw	r16, r24
    2d80:	eb 01       	movw	r28, r22
    2d82:	8b 81       	ldd	r24, Y+3	; 0x03
    2d84:	81 ff       	sbrs	r24, 1
    2d86:	1b c0       	rjmp	.+54     	; 0x2dbe <fputc+0x48>
    2d88:	82 ff       	sbrs	r24, 2
    2d8a:	0d c0       	rjmp	.+26     	; 0x2da6 <fputc+0x30>
    2d8c:	2e 81       	ldd	r18, Y+6	; 0x06
    2d8e:	3f 81       	ldd	r19, Y+7	; 0x07
    2d90:	8c 81       	ldd	r24, Y+4	; 0x04
    2d92:	9d 81       	ldd	r25, Y+5	; 0x05
    2d94:	28 17       	cp	r18, r24
    2d96:	39 07       	cpc	r19, r25
    2d98:	64 f4       	brge	.+24     	; 0x2db2 <fputc+0x3c>
    2d9a:	e8 81       	ld	r30, Y
    2d9c:	f9 81       	ldd	r31, Y+1	; 0x01
    2d9e:	01 93       	st	Z+, r16
    2da0:	f9 83       	std	Y+1, r31	; 0x01
    2da2:	e8 83       	st	Y, r30
    2da4:	06 c0       	rjmp	.+12     	; 0x2db2 <fputc+0x3c>
    2da6:	e8 85       	ldd	r30, Y+8	; 0x08
    2da8:	f9 85       	ldd	r31, Y+9	; 0x09
    2daa:	80 2f       	mov	r24, r16
    2dac:	09 95       	icall
    2dae:	89 2b       	or	r24, r25
    2db0:	31 f4       	brne	.+12     	; 0x2dbe <fputc+0x48>
    2db2:	8e 81       	ldd	r24, Y+6	; 0x06
    2db4:	9f 81       	ldd	r25, Y+7	; 0x07
    2db6:	01 96       	adiw	r24, 0x01	; 1
    2db8:	9f 83       	std	Y+7, r25	; 0x07
    2dba:	8e 83       	std	Y+6, r24	; 0x06
    2dbc:	02 c0       	rjmp	.+4      	; 0x2dc2 <fputc+0x4c>
    2dbe:	0f ef       	ldi	r16, 0xFF	; 255
    2dc0:	1f ef       	ldi	r17, 0xFF	; 255
    2dc2:	c8 01       	movw	r24, r16
    2dc4:	df 91       	pop	r29
    2dc6:	cf 91       	pop	r28
    2dc8:	1f 91       	pop	r17
    2dca:	0f 91       	pop	r16
    2dcc:	08 95       	ret

00002dce <__ultoa_invert>:
    2dce:	fa 01       	movw	r30, r20
    2dd0:	aa 27       	eor	r26, r26
    2dd2:	28 30       	cpi	r18, 0x08	; 8
    2dd4:	51 f1       	breq	.+84     	; 0x2e2a <__ultoa_invert+0x5c>
    2dd6:	20 31       	cpi	r18, 0x10	; 16
    2dd8:	81 f1       	breq	.+96     	; 0x2e3a <__ultoa_invert+0x6c>
    2dda:	e8 94       	clt
    2ddc:	6f 93       	push	r22
    2dde:	6e 7f       	andi	r22, 0xFE	; 254
    2de0:	6e 5f       	subi	r22, 0xFE	; 254
    2de2:	7f 4f       	sbci	r23, 0xFF	; 255
    2de4:	8f 4f       	sbci	r24, 0xFF	; 255
    2de6:	9f 4f       	sbci	r25, 0xFF	; 255
    2de8:	af 4f       	sbci	r26, 0xFF	; 255
    2dea:	b1 e0       	ldi	r27, 0x01	; 1
    2dec:	3e d0       	rcall	.+124    	; 0x2e6a <__ultoa_invert+0x9c>
    2dee:	b4 e0       	ldi	r27, 0x04	; 4
    2df0:	3c d0       	rcall	.+120    	; 0x2e6a <__ultoa_invert+0x9c>
    2df2:	67 0f       	add	r22, r23
    2df4:	78 1f       	adc	r23, r24
    2df6:	89 1f       	adc	r24, r25
    2df8:	9a 1f       	adc	r25, r26
    2dfa:	a1 1d       	adc	r26, r1
    2dfc:	68 0f       	add	r22, r24
    2dfe:	79 1f       	adc	r23, r25
    2e00:	8a 1f       	adc	r24, r26
    2e02:	91 1d       	adc	r25, r1
    2e04:	a1 1d       	adc	r26, r1
    2e06:	6a 0f       	add	r22, r26
    2e08:	71 1d       	adc	r23, r1
    2e0a:	81 1d       	adc	r24, r1
    2e0c:	91 1d       	adc	r25, r1
    2e0e:	a1 1d       	adc	r26, r1
    2e10:	20 d0       	rcall	.+64     	; 0x2e52 <__ultoa_invert+0x84>
    2e12:	09 f4       	brne	.+2      	; 0x2e16 <__ultoa_invert+0x48>
    2e14:	68 94       	set
    2e16:	3f 91       	pop	r19
    2e18:	2a e0       	ldi	r18, 0x0A	; 10
    2e1a:	26 9f       	mul	r18, r22
    2e1c:	11 24       	eor	r1, r1
    2e1e:	30 19       	sub	r19, r0
    2e20:	30 5d       	subi	r19, 0xD0	; 208
    2e22:	31 93       	st	Z+, r19
    2e24:	de f6       	brtc	.-74     	; 0x2ddc <__ultoa_invert+0xe>
    2e26:	cf 01       	movw	r24, r30
    2e28:	08 95       	ret
    2e2a:	46 2f       	mov	r20, r22
    2e2c:	47 70       	andi	r20, 0x07	; 7
    2e2e:	40 5d       	subi	r20, 0xD0	; 208
    2e30:	41 93       	st	Z+, r20
    2e32:	b3 e0       	ldi	r27, 0x03	; 3
    2e34:	0f d0       	rcall	.+30     	; 0x2e54 <__ultoa_invert+0x86>
    2e36:	c9 f7       	brne	.-14     	; 0x2e2a <__ultoa_invert+0x5c>
    2e38:	f6 cf       	rjmp	.-20     	; 0x2e26 <__ultoa_invert+0x58>
    2e3a:	46 2f       	mov	r20, r22
    2e3c:	4f 70       	andi	r20, 0x0F	; 15
    2e3e:	40 5d       	subi	r20, 0xD0	; 208
    2e40:	4a 33       	cpi	r20, 0x3A	; 58
    2e42:	18 f0       	brcs	.+6      	; 0x2e4a <__ultoa_invert+0x7c>
    2e44:	49 5d       	subi	r20, 0xD9	; 217
    2e46:	31 fd       	sbrc	r19, 1
    2e48:	40 52       	subi	r20, 0x20	; 32
    2e4a:	41 93       	st	Z+, r20
    2e4c:	02 d0       	rcall	.+4      	; 0x2e52 <__ultoa_invert+0x84>
    2e4e:	a9 f7       	brne	.-22     	; 0x2e3a <__ultoa_invert+0x6c>
    2e50:	ea cf       	rjmp	.-44     	; 0x2e26 <__ultoa_invert+0x58>
    2e52:	b4 e0       	ldi	r27, 0x04	; 4
    2e54:	a6 95       	lsr	r26
    2e56:	97 95       	ror	r25
    2e58:	87 95       	ror	r24
    2e5a:	77 95       	ror	r23
    2e5c:	67 95       	ror	r22
    2e5e:	ba 95       	dec	r27
    2e60:	c9 f7       	brne	.-14     	; 0x2e54 <__ultoa_invert+0x86>
    2e62:	00 97       	sbiw	r24, 0x00	; 0
    2e64:	61 05       	cpc	r22, r1
    2e66:	71 05       	cpc	r23, r1
    2e68:	08 95       	ret
    2e6a:	9b 01       	movw	r18, r22
    2e6c:	ac 01       	movw	r20, r24
    2e6e:	0a 2e       	mov	r0, r26
    2e70:	06 94       	lsr	r0
    2e72:	57 95       	ror	r21
    2e74:	47 95       	ror	r20
    2e76:	37 95       	ror	r19
    2e78:	27 95       	ror	r18
    2e7a:	ba 95       	dec	r27
    2e7c:	c9 f7       	brne	.-14     	; 0x2e70 <__ultoa_invert+0xa2>
    2e7e:	62 0f       	add	r22, r18
    2e80:	73 1f       	adc	r23, r19
    2e82:	84 1f       	adc	r24, r20
    2e84:	95 1f       	adc	r25, r21
    2e86:	a0 1d       	adc	r26, r0
    2e88:	08 95       	ret

00002e8a <_exit>:
    2e8a:	f8 94       	cli

00002e8c <__stop_program>:
    2e8c:	ff cf       	rjmp	.-2      	; 0x2e8c <__stop_program>
