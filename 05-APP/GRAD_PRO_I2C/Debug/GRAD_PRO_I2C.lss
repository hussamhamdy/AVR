
GRAD_PRO_I2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001068  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000006  00800060  00800060  000010dc  2**0
                  ALLOC
  2 .stab         00001254  00000000  00000000  000010dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000007cc  00000000  00000000  00002330  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
       8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
       c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a6 36       	cpi	r26, 0x66	; 102
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
      70:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <main>
      74:	0c 94 32 08 	jmp	0x1064	; 0x1064 <_exit>

00000078 <__bad_interrupt>:
      78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <GPIO_voidSetPinDDR>:




	void GPIO_voidSetPinDDR (u8  copy_u8Port ,u8 copy_u8Pin , u8 copy_u8Mode )
	{
      7c:	df 93       	push	r29
      7e:	cf 93       	push	r28
      80:	00 d0       	rcall	.+0      	; 0x82 <GPIO_voidSetPinDDR+0x6>
      82:	00 d0       	rcall	.+0      	; 0x84 <GPIO_voidSetPinDDR+0x8>
      84:	0f 92       	push	r0
      86:	cd b7       	in	r28, 0x3d	; 61
      88:	de b7       	in	r29, 0x3e	; 62
      8a:	89 83       	std	Y+1, r24	; 0x01
      8c:	6a 83       	std	Y+2, r22	; 0x02
      8e:	4b 83       	std	Y+3, r20	; 0x03
		switch(copy_u8Port)
      90:	89 81       	ldd	r24, Y+1	; 0x01
      92:	28 2f       	mov	r18, r24
      94:	30 e0       	ldi	r19, 0x00	; 0
      96:	3d 83       	std	Y+5, r19	; 0x05
      98:	2c 83       	std	Y+4, r18	; 0x04
      9a:	8c 81       	ldd	r24, Y+4	; 0x04
      9c:	9d 81       	ldd	r25, Y+5	; 0x05
      9e:	81 30       	cpi	r24, 0x01	; 1
      a0:	91 05       	cpc	r25, r1
      a2:	09 f4       	brne	.+2      	; 0xa6 <GPIO_voidSetPinDDR+0x2a>
      a4:	43 c0       	rjmp	.+134    	; 0x12c <GPIO_voidSetPinDDR+0xb0>
      a6:	2c 81       	ldd	r18, Y+4	; 0x04
      a8:	3d 81       	ldd	r19, Y+5	; 0x05
      aa:	22 30       	cpi	r18, 0x02	; 2
      ac:	31 05       	cpc	r19, r1
      ae:	2c f4       	brge	.+10     	; 0xba <GPIO_voidSetPinDDR+0x3e>
      b0:	8c 81       	ldd	r24, Y+4	; 0x04
      b2:	9d 81       	ldd	r25, Y+5	; 0x05
      b4:	00 97       	sbiw	r24, 0x00	; 0
      b6:	71 f0       	breq	.+28     	; 0xd4 <GPIO_voidSetPinDDR+0x58>
      b8:	bc c0       	rjmp	.+376    	; 0x232 <GPIO_voidSetPinDDR+0x1b6>
      ba:	2c 81       	ldd	r18, Y+4	; 0x04
      bc:	3d 81       	ldd	r19, Y+5	; 0x05
      be:	22 30       	cpi	r18, 0x02	; 2
      c0:	31 05       	cpc	r19, r1
      c2:	09 f4       	brne	.+2      	; 0xc6 <GPIO_voidSetPinDDR+0x4a>
      c4:	5f c0       	rjmp	.+190    	; 0x184 <GPIO_voidSetPinDDR+0x108>
      c6:	8c 81       	ldd	r24, Y+4	; 0x04
      c8:	9d 81       	ldd	r25, Y+5	; 0x05
      ca:	83 30       	cpi	r24, 0x03	; 3
      cc:	91 05       	cpc	r25, r1
      ce:	09 f4       	brne	.+2      	; 0xd2 <GPIO_voidSetPinDDR+0x56>
      d0:	85 c0       	rjmp	.+266    	; 0x1dc <GPIO_voidSetPinDDR+0x160>
      d2:	af c0       	rjmp	.+350    	; 0x232 <GPIO_voidSetPinDDR+0x1b6>
		{
			case GPIOA :
				if(copy_u8Mode ==OUTPUT )
      d4:	8b 81       	ldd	r24, Y+3	; 0x03
      d6:	81 30       	cpi	r24, 0x01	; 1
      d8:	a1 f4       	brne	.+40     	; 0x102 <GPIO_voidSetPinDDR+0x86>
				{
					SET_BIT(DDRA ,copy_u8Pin);
      da:	aa e3       	ldi	r26, 0x3A	; 58
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	ea e3       	ldi	r30, 0x3A	; 58
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	80 81       	ld	r24, Z
      e4:	48 2f       	mov	r20, r24
      e6:	8a 81       	ldd	r24, Y+2	; 0x02
      e8:	28 2f       	mov	r18, r24
      ea:	30 e0       	ldi	r19, 0x00	; 0
      ec:	81 e0       	ldi	r24, 0x01	; 1
      ee:	90 e0       	ldi	r25, 0x00	; 0
      f0:	02 2e       	mov	r0, r18
      f2:	02 c0       	rjmp	.+4      	; 0xf8 <GPIO_voidSetPinDDR+0x7c>
      f4:	88 0f       	add	r24, r24
      f6:	99 1f       	adc	r25, r25
      f8:	0a 94       	dec	r0
      fa:	e2 f7       	brpl	.-8      	; 0xf4 <GPIO_voidSetPinDDR+0x78>
      fc:	84 2b       	or	r24, r20
      fe:	8c 93       	st	X, r24
     100:	98 c0       	rjmp	.+304    	; 0x232 <GPIO_voidSetPinDDR+0x1b6>
				}
				else {
					CLEAR_BIT(DDRA,copy_u8Pin);
     102:	aa e3       	ldi	r26, 0x3A	; 58
     104:	b0 e0       	ldi	r27, 0x00	; 0
     106:	ea e3       	ldi	r30, 0x3A	; 58
     108:	f0 e0       	ldi	r31, 0x00	; 0
     10a:	80 81       	ld	r24, Z
     10c:	48 2f       	mov	r20, r24
     10e:	8a 81       	ldd	r24, Y+2	; 0x02
     110:	28 2f       	mov	r18, r24
     112:	30 e0       	ldi	r19, 0x00	; 0
     114:	81 e0       	ldi	r24, 0x01	; 1
     116:	90 e0       	ldi	r25, 0x00	; 0
     118:	02 2e       	mov	r0, r18
     11a:	02 c0       	rjmp	.+4      	; 0x120 <GPIO_voidSetPinDDR+0xa4>
     11c:	88 0f       	add	r24, r24
     11e:	99 1f       	adc	r25, r25
     120:	0a 94       	dec	r0
     122:	e2 f7       	brpl	.-8      	; 0x11c <GPIO_voidSetPinDDR+0xa0>
     124:	80 95       	com	r24
     126:	84 23       	and	r24, r20
     128:	8c 93       	st	X, r24
     12a:	83 c0       	rjmp	.+262    	; 0x232 <GPIO_voidSetPinDDR+0x1b6>
				}
				break;
			case GPIOB :
				if(copy_u8Mode ==OUTPUT )
     12c:	8b 81       	ldd	r24, Y+3	; 0x03
     12e:	81 30       	cpi	r24, 0x01	; 1
     130:	a1 f4       	brne	.+40     	; 0x15a <GPIO_voidSetPinDDR+0xde>
				{
					SET_BIT(DDRB ,copy_u8Pin);
     132:	a7 e3       	ldi	r26, 0x37	; 55
     134:	b0 e0       	ldi	r27, 0x00	; 0
     136:	e7 e3       	ldi	r30, 0x37	; 55
     138:	f0 e0       	ldi	r31, 0x00	; 0
     13a:	80 81       	ld	r24, Z
     13c:	48 2f       	mov	r20, r24
     13e:	8a 81       	ldd	r24, Y+2	; 0x02
     140:	28 2f       	mov	r18, r24
     142:	30 e0       	ldi	r19, 0x00	; 0
     144:	81 e0       	ldi	r24, 0x01	; 1
     146:	90 e0       	ldi	r25, 0x00	; 0
     148:	02 2e       	mov	r0, r18
     14a:	02 c0       	rjmp	.+4      	; 0x150 <GPIO_voidSetPinDDR+0xd4>
     14c:	88 0f       	add	r24, r24
     14e:	99 1f       	adc	r25, r25
     150:	0a 94       	dec	r0
     152:	e2 f7       	brpl	.-8      	; 0x14c <GPIO_voidSetPinDDR+0xd0>
     154:	84 2b       	or	r24, r20
     156:	8c 93       	st	X, r24
     158:	6c c0       	rjmp	.+216    	; 0x232 <GPIO_voidSetPinDDR+0x1b6>
				}
				else {
					CLEAR_BIT(DDRB,copy_u8Pin);
     15a:	a7 e3       	ldi	r26, 0x37	; 55
     15c:	b0 e0       	ldi	r27, 0x00	; 0
     15e:	e7 e3       	ldi	r30, 0x37	; 55
     160:	f0 e0       	ldi	r31, 0x00	; 0
     162:	80 81       	ld	r24, Z
     164:	48 2f       	mov	r20, r24
     166:	8a 81       	ldd	r24, Y+2	; 0x02
     168:	28 2f       	mov	r18, r24
     16a:	30 e0       	ldi	r19, 0x00	; 0
     16c:	81 e0       	ldi	r24, 0x01	; 1
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	02 2e       	mov	r0, r18
     172:	02 c0       	rjmp	.+4      	; 0x178 <GPIO_voidSetPinDDR+0xfc>
     174:	88 0f       	add	r24, r24
     176:	99 1f       	adc	r25, r25
     178:	0a 94       	dec	r0
     17a:	e2 f7       	brpl	.-8      	; 0x174 <GPIO_voidSetPinDDR+0xf8>
     17c:	80 95       	com	r24
     17e:	84 23       	and	r24, r20
     180:	8c 93       	st	X, r24
     182:	57 c0       	rjmp	.+174    	; 0x232 <GPIO_voidSetPinDDR+0x1b6>
				}
				break;
			case GPIOC :
				if(copy_u8Mode ==OUTPUT )
     184:	8b 81       	ldd	r24, Y+3	; 0x03
     186:	81 30       	cpi	r24, 0x01	; 1
     188:	a1 f4       	brne	.+40     	; 0x1b2 <GPIO_voidSetPinDDR+0x136>
				{
					SET_BIT(DDRC ,copy_u8Pin);
     18a:	a4 e3       	ldi	r26, 0x34	; 52
     18c:	b0 e0       	ldi	r27, 0x00	; 0
     18e:	e4 e3       	ldi	r30, 0x34	; 52
     190:	f0 e0       	ldi	r31, 0x00	; 0
     192:	80 81       	ld	r24, Z
     194:	48 2f       	mov	r20, r24
     196:	8a 81       	ldd	r24, Y+2	; 0x02
     198:	28 2f       	mov	r18, r24
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	81 e0       	ldi	r24, 0x01	; 1
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	02 2e       	mov	r0, r18
     1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <GPIO_voidSetPinDDR+0x12c>
     1a4:	88 0f       	add	r24, r24
     1a6:	99 1f       	adc	r25, r25
     1a8:	0a 94       	dec	r0
     1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <GPIO_voidSetPinDDR+0x128>
     1ac:	84 2b       	or	r24, r20
     1ae:	8c 93       	st	X, r24
     1b0:	40 c0       	rjmp	.+128    	; 0x232 <GPIO_voidSetPinDDR+0x1b6>
				}
				else {
					CLEAR_BIT(DDRC,copy_u8Pin);
     1b2:	a4 e3       	ldi	r26, 0x34	; 52
     1b4:	b0 e0       	ldi	r27, 0x00	; 0
     1b6:	e4 e3       	ldi	r30, 0x34	; 52
     1b8:	f0 e0       	ldi	r31, 0x00	; 0
     1ba:	80 81       	ld	r24, Z
     1bc:	48 2f       	mov	r20, r24
     1be:	8a 81       	ldd	r24, Y+2	; 0x02
     1c0:	28 2f       	mov	r18, r24
     1c2:	30 e0       	ldi	r19, 0x00	; 0
     1c4:	81 e0       	ldi	r24, 0x01	; 1
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	02 2e       	mov	r0, r18
     1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <GPIO_voidSetPinDDR+0x154>
     1cc:	88 0f       	add	r24, r24
     1ce:	99 1f       	adc	r25, r25
     1d0:	0a 94       	dec	r0
     1d2:	e2 f7       	brpl	.-8      	; 0x1cc <GPIO_voidSetPinDDR+0x150>
     1d4:	80 95       	com	r24
     1d6:	84 23       	and	r24, r20
     1d8:	8c 93       	st	X, r24
     1da:	2b c0       	rjmp	.+86     	; 0x232 <GPIO_voidSetPinDDR+0x1b6>
				}
				break;
			case GPIOD :
				if(copy_u8Mode ==OUTPUT )
     1dc:	8b 81       	ldd	r24, Y+3	; 0x03
     1de:	81 30       	cpi	r24, 0x01	; 1
     1e0:	a1 f4       	brne	.+40     	; 0x20a <GPIO_voidSetPinDDR+0x18e>
				{
					SET_BIT(DDRD ,copy_u8Pin);
     1e2:	a1 e3       	ldi	r26, 0x31	; 49
     1e4:	b0 e0       	ldi	r27, 0x00	; 0
     1e6:	e1 e3       	ldi	r30, 0x31	; 49
     1e8:	f0 e0       	ldi	r31, 0x00	; 0
     1ea:	80 81       	ld	r24, Z
     1ec:	48 2f       	mov	r20, r24
     1ee:	8a 81       	ldd	r24, Y+2	; 0x02
     1f0:	28 2f       	mov	r18, r24
     1f2:	30 e0       	ldi	r19, 0x00	; 0
     1f4:	81 e0       	ldi	r24, 0x01	; 1
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	02 2e       	mov	r0, r18
     1fa:	02 c0       	rjmp	.+4      	; 0x200 <GPIO_voidSetPinDDR+0x184>
     1fc:	88 0f       	add	r24, r24
     1fe:	99 1f       	adc	r25, r25
     200:	0a 94       	dec	r0
     202:	e2 f7       	brpl	.-8      	; 0x1fc <GPIO_voidSetPinDDR+0x180>
     204:	84 2b       	or	r24, r20
     206:	8c 93       	st	X, r24
     208:	14 c0       	rjmp	.+40     	; 0x232 <GPIO_voidSetPinDDR+0x1b6>
				}
				else {
					CLEAR_BIT(DDRD,copy_u8Pin);
     20a:	a1 e3       	ldi	r26, 0x31	; 49
     20c:	b0 e0       	ldi	r27, 0x00	; 0
     20e:	e1 e3       	ldi	r30, 0x31	; 49
     210:	f0 e0       	ldi	r31, 0x00	; 0
     212:	80 81       	ld	r24, Z
     214:	48 2f       	mov	r20, r24
     216:	8a 81       	ldd	r24, Y+2	; 0x02
     218:	28 2f       	mov	r18, r24
     21a:	30 e0       	ldi	r19, 0x00	; 0
     21c:	81 e0       	ldi	r24, 0x01	; 1
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	02 2e       	mov	r0, r18
     222:	02 c0       	rjmp	.+4      	; 0x228 <GPIO_voidSetPinDDR+0x1ac>
     224:	88 0f       	add	r24, r24
     226:	99 1f       	adc	r25, r25
     228:	0a 94       	dec	r0
     22a:	e2 f7       	brpl	.-8      	; 0x224 <GPIO_voidSetPinDDR+0x1a8>
     22c:	80 95       	com	r24
     22e:	84 23       	and	r24, r20
     230:	8c 93       	st	X, r24
				}
				break;	
			default:
				break;
		}
	}
     232:	0f 90       	pop	r0
     234:	0f 90       	pop	r0
     236:	0f 90       	pop	r0
     238:	0f 90       	pop	r0
     23a:	0f 90       	pop	r0
     23c:	cf 91       	pop	r28
     23e:	df 91       	pop	r29
     240:	08 95       	ret

00000242 <GPIO_voidWritePin>:
	
	void GPIO_voidWritePin (u8  copy_u8Port ,u8 copy_u8Pin , u8 copy_u8Value )
	{
     242:	df 93       	push	r29
     244:	cf 93       	push	r28
     246:	00 d0       	rcall	.+0      	; 0x248 <GPIO_voidWritePin+0x6>
     248:	00 d0       	rcall	.+0      	; 0x24a <GPIO_voidWritePin+0x8>
     24a:	0f 92       	push	r0
     24c:	cd b7       	in	r28, 0x3d	; 61
     24e:	de b7       	in	r29, 0x3e	; 62
     250:	89 83       	std	Y+1, r24	; 0x01
     252:	6a 83       	std	Y+2, r22	; 0x02
     254:	4b 83       	std	Y+3, r20	; 0x03
		switch(copy_u8Port)
     256:	89 81       	ldd	r24, Y+1	; 0x01
     258:	28 2f       	mov	r18, r24
     25a:	30 e0       	ldi	r19, 0x00	; 0
     25c:	3d 83       	std	Y+5, r19	; 0x05
     25e:	2c 83       	std	Y+4, r18	; 0x04
     260:	8c 81       	ldd	r24, Y+4	; 0x04
     262:	9d 81       	ldd	r25, Y+5	; 0x05
     264:	81 30       	cpi	r24, 0x01	; 1
     266:	91 05       	cpc	r25, r1
     268:	09 f4       	brne	.+2      	; 0x26c <GPIO_voidWritePin+0x2a>
     26a:	43 c0       	rjmp	.+134    	; 0x2f2 <GPIO_voidWritePin+0xb0>
     26c:	2c 81       	ldd	r18, Y+4	; 0x04
     26e:	3d 81       	ldd	r19, Y+5	; 0x05
     270:	22 30       	cpi	r18, 0x02	; 2
     272:	31 05       	cpc	r19, r1
     274:	2c f4       	brge	.+10     	; 0x280 <GPIO_voidWritePin+0x3e>
     276:	8c 81       	ldd	r24, Y+4	; 0x04
     278:	9d 81       	ldd	r25, Y+5	; 0x05
     27a:	00 97       	sbiw	r24, 0x00	; 0
     27c:	71 f0       	breq	.+28     	; 0x29a <GPIO_voidWritePin+0x58>
     27e:	bc c0       	rjmp	.+376    	; 0x3f8 <GPIO_voidWritePin+0x1b6>
     280:	2c 81       	ldd	r18, Y+4	; 0x04
     282:	3d 81       	ldd	r19, Y+5	; 0x05
     284:	22 30       	cpi	r18, 0x02	; 2
     286:	31 05       	cpc	r19, r1
     288:	09 f4       	brne	.+2      	; 0x28c <GPIO_voidWritePin+0x4a>
     28a:	5f c0       	rjmp	.+190    	; 0x34a <GPIO_voidWritePin+0x108>
     28c:	8c 81       	ldd	r24, Y+4	; 0x04
     28e:	9d 81       	ldd	r25, Y+5	; 0x05
     290:	83 30       	cpi	r24, 0x03	; 3
     292:	91 05       	cpc	r25, r1
     294:	09 f4       	brne	.+2      	; 0x298 <GPIO_voidWritePin+0x56>
     296:	85 c0       	rjmp	.+266    	; 0x3a2 <GPIO_voidWritePin+0x160>
     298:	af c0       	rjmp	.+350    	; 0x3f8 <GPIO_voidWritePin+0x1b6>
		{
			case GPIOA :
				if(copy_u8Value ==HIGH )
     29a:	8b 81       	ldd	r24, Y+3	; 0x03
     29c:	81 30       	cpi	r24, 0x01	; 1
     29e:	a1 f4       	brne	.+40     	; 0x2c8 <GPIO_voidWritePin+0x86>
				{
					SET_BIT(PORTA ,copy_u8Pin);
     2a0:	ab e3       	ldi	r26, 0x3B	; 59
     2a2:	b0 e0       	ldi	r27, 0x00	; 0
     2a4:	eb e3       	ldi	r30, 0x3B	; 59
     2a6:	f0 e0       	ldi	r31, 0x00	; 0
     2a8:	80 81       	ld	r24, Z
     2aa:	48 2f       	mov	r20, r24
     2ac:	8a 81       	ldd	r24, Y+2	; 0x02
     2ae:	28 2f       	mov	r18, r24
     2b0:	30 e0       	ldi	r19, 0x00	; 0
     2b2:	81 e0       	ldi	r24, 0x01	; 1
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	02 2e       	mov	r0, r18
     2b8:	02 c0       	rjmp	.+4      	; 0x2be <GPIO_voidWritePin+0x7c>
     2ba:	88 0f       	add	r24, r24
     2bc:	99 1f       	adc	r25, r25
     2be:	0a 94       	dec	r0
     2c0:	e2 f7       	brpl	.-8      	; 0x2ba <GPIO_voidWritePin+0x78>
     2c2:	84 2b       	or	r24, r20
     2c4:	8c 93       	st	X, r24
     2c6:	98 c0       	rjmp	.+304    	; 0x3f8 <GPIO_voidWritePin+0x1b6>
				}
				else {
					CLEAR_BIT(PORTA,copy_u8Pin);
     2c8:	ab e3       	ldi	r26, 0x3B	; 59
     2ca:	b0 e0       	ldi	r27, 0x00	; 0
     2cc:	eb e3       	ldi	r30, 0x3B	; 59
     2ce:	f0 e0       	ldi	r31, 0x00	; 0
     2d0:	80 81       	ld	r24, Z
     2d2:	48 2f       	mov	r20, r24
     2d4:	8a 81       	ldd	r24, Y+2	; 0x02
     2d6:	28 2f       	mov	r18, r24
     2d8:	30 e0       	ldi	r19, 0x00	; 0
     2da:	81 e0       	ldi	r24, 0x01	; 1
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	02 2e       	mov	r0, r18
     2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <GPIO_voidWritePin+0xa4>
     2e2:	88 0f       	add	r24, r24
     2e4:	99 1f       	adc	r25, r25
     2e6:	0a 94       	dec	r0
     2e8:	e2 f7       	brpl	.-8      	; 0x2e2 <GPIO_voidWritePin+0xa0>
     2ea:	80 95       	com	r24
     2ec:	84 23       	and	r24, r20
     2ee:	8c 93       	st	X, r24
     2f0:	83 c0       	rjmp	.+262    	; 0x3f8 <GPIO_voidWritePin+0x1b6>
				}
				break;
			case GPIOB :
				if(copy_u8Value ==HIGH )
     2f2:	8b 81       	ldd	r24, Y+3	; 0x03
     2f4:	81 30       	cpi	r24, 0x01	; 1
     2f6:	a1 f4       	brne	.+40     	; 0x320 <GPIO_voidWritePin+0xde>
				{
					SET_BIT(PORTB ,copy_u8Pin);
     2f8:	a8 e3       	ldi	r26, 0x38	; 56
     2fa:	b0 e0       	ldi	r27, 0x00	; 0
     2fc:	e8 e3       	ldi	r30, 0x38	; 56
     2fe:	f0 e0       	ldi	r31, 0x00	; 0
     300:	80 81       	ld	r24, Z
     302:	48 2f       	mov	r20, r24
     304:	8a 81       	ldd	r24, Y+2	; 0x02
     306:	28 2f       	mov	r18, r24
     308:	30 e0       	ldi	r19, 0x00	; 0
     30a:	81 e0       	ldi	r24, 0x01	; 1
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	02 2e       	mov	r0, r18
     310:	02 c0       	rjmp	.+4      	; 0x316 <GPIO_voidWritePin+0xd4>
     312:	88 0f       	add	r24, r24
     314:	99 1f       	adc	r25, r25
     316:	0a 94       	dec	r0
     318:	e2 f7       	brpl	.-8      	; 0x312 <GPIO_voidWritePin+0xd0>
     31a:	84 2b       	or	r24, r20
     31c:	8c 93       	st	X, r24
     31e:	6c c0       	rjmp	.+216    	; 0x3f8 <GPIO_voidWritePin+0x1b6>
				}
				else {
					CLEAR_BIT(PORTB,copy_u8Pin);
     320:	a8 e3       	ldi	r26, 0x38	; 56
     322:	b0 e0       	ldi	r27, 0x00	; 0
     324:	e8 e3       	ldi	r30, 0x38	; 56
     326:	f0 e0       	ldi	r31, 0x00	; 0
     328:	80 81       	ld	r24, Z
     32a:	48 2f       	mov	r20, r24
     32c:	8a 81       	ldd	r24, Y+2	; 0x02
     32e:	28 2f       	mov	r18, r24
     330:	30 e0       	ldi	r19, 0x00	; 0
     332:	81 e0       	ldi	r24, 0x01	; 1
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	02 2e       	mov	r0, r18
     338:	02 c0       	rjmp	.+4      	; 0x33e <GPIO_voidWritePin+0xfc>
     33a:	88 0f       	add	r24, r24
     33c:	99 1f       	adc	r25, r25
     33e:	0a 94       	dec	r0
     340:	e2 f7       	brpl	.-8      	; 0x33a <GPIO_voidWritePin+0xf8>
     342:	80 95       	com	r24
     344:	84 23       	and	r24, r20
     346:	8c 93       	st	X, r24
     348:	57 c0       	rjmp	.+174    	; 0x3f8 <GPIO_voidWritePin+0x1b6>
				}
				break;
			case GPIOC :
				if(copy_u8Value ==HIGH )
     34a:	8b 81       	ldd	r24, Y+3	; 0x03
     34c:	81 30       	cpi	r24, 0x01	; 1
     34e:	a1 f4       	brne	.+40     	; 0x378 <GPIO_voidWritePin+0x136>
				{
					SET_BIT(PORTC ,copy_u8Pin);
     350:	a5 e3       	ldi	r26, 0x35	; 53
     352:	b0 e0       	ldi	r27, 0x00	; 0
     354:	e5 e3       	ldi	r30, 0x35	; 53
     356:	f0 e0       	ldi	r31, 0x00	; 0
     358:	80 81       	ld	r24, Z
     35a:	48 2f       	mov	r20, r24
     35c:	8a 81       	ldd	r24, Y+2	; 0x02
     35e:	28 2f       	mov	r18, r24
     360:	30 e0       	ldi	r19, 0x00	; 0
     362:	81 e0       	ldi	r24, 0x01	; 1
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	02 2e       	mov	r0, r18
     368:	02 c0       	rjmp	.+4      	; 0x36e <GPIO_voidWritePin+0x12c>
     36a:	88 0f       	add	r24, r24
     36c:	99 1f       	adc	r25, r25
     36e:	0a 94       	dec	r0
     370:	e2 f7       	brpl	.-8      	; 0x36a <GPIO_voidWritePin+0x128>
     372:	84 2b       	or	r24, r20
     374:	8c 93       	st	X, r24
     376:	40 c0       	rjmp	.+128    	; 0x3f8 <GPIO_voidWritePin+0x1b6>
				}
				else {
					CLEAR_BIT(PORTC,copy_u8Pin);
     378:	a5 e3       	ldi	r26, 0x35	; 53
     37a:	b0 e0       	ldi	r27, 0x00	; 0
     37c:	e5 e3       	ldi	r30, 0x35	; 53
     37e:	f0 e0       	ldi	r31, 0x00	; 0
     380:	80 81       	ld	r24, Z
     382:	48 2f       	mov	r20, r24
     384:	8a 81       	ldd	r24, Y+2	; 0x02
     386:	28 2f       	mov	r18, r24
     388:	30 e0       	ldi	r19, 0x00	; 0
     38a:	81 e0       	ldi	r24, 0x01	; 1
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	02 2e       	mov	r0, r18
     390:	02 c0       	rjmp	.+4      	; 0x396 <GPIO_voidWritePin+0x154>
     392:	88 0f       	add	r24, r24
     394:	99 1f       	adc	r25, r25
     396:	0a 94       	dec	r0
     398:	e2 f7       	brpl	.-8      	; 0x392 <GPIO_voidWritePin+0x150>
     39a:	80 95       	com	r24
     39c:	84 23       	and	r24, r20
     39e:	8c 93       	st	X, r24
     3a0:	2b c0       	rjmp	.+86     	; 0x3f8 <GPIO_voidWritePin+0x1b6>
				}
				break;
			case GPIOD :
				if(copy_u8Value == HIGH )
     3a2:	8b 81       	ldd	r24, Y+3	; 0x03
     3a4:	81 30       	cpi	r24, 0x01	; 1
     3a6:	a1 f4       	brne	.+40     	; 0x3d0 <GPIO_voidWritePin+0x18e>
				{
					SET_BIT(PORTD ,copy_u8Pin);
     3a8:	a2 e3       	ldi	r26, 0x32	; 50
     3aa:	b0 e0       	ldi	r27, 0x00	; 0
     3ac:	e2 e3       	ldi	r30, 0x32	; 50
     3ae:	f0 e0       	ldi	r31, 0x00	; 0
     3b0:	80 81       	ld	r24, Z
     3b2:	48 2f       	mov	r20, r24
     3b4:	8a 81       	ldd	r24, Y+2	; 0x02
     3b6:	28 2f       	mov	r18, r24
     3b8:	30 e0       	ldi	r19, 0x00	; 0
     3ba:	81 e0       	ldi	r24, 0x01	; 1
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	02 2e       	mov	r0, r18
     3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <GPIO_voidWritePin+0x184>
     3c2:	88 0f       	add	r24, r24
     3c4:	99 1f       	adc	r25, r25
     3c6:	0a 94       	dec	r0
     3c8:	e2 f7       	brpl	.-8      	; 0x3c2 <GPIO_voidWritePin+0x180>
     3ca:	84 2b       	or	r24, r20
     3cc:	8c 93       	st	X, r24
     3ce:	14 c0       	rjmp	.+40     	; 0x3f8 <GPIO_voidWritePin+0x1b6>
				}
				else {
					CLEAR_BIT(PORTD,copy_u8Pin);
     3d0:	a2 e3       	ldi	r26, 0x32	; 50
     3d2:	b0 e0       	ldi	r27, 0x00	; 0
     3d4:	e2 e3       	ldi	r30, 0x32	; 50
     3d6:	f0 e0       	ldi	r31, 0x00	; 0
     3d8:	80 81       	ld	r24, Z
     3da:	48 2f       	mov	r20, r24
     3dc:	8a 81       	ldd	r24, Y+2	; 0x02
     3de:	28 2f       	mov	r18, r24
     3e0:	30 e0       	ldi	r19, 0x00	; 0
     3e2:	81 e0       	ldi	r24, 0x01	; 1
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	02 2e       	mov	r0, r18
     3e8:	02 c0       	rjmp	.+4      	; 0x3ee <GPIO_voidWritePin+0x1ac>
     3ea:	88 0f       	add	r24, r24
     3ec:	99 1f       	adc	r25, r25
     3ee:	0a 94       	dec	r0
     3f0:	e2 f7       	brpl	.-8      	; 0x3ea <GPIO_voidWritePin+0x1a8>
     3f2:	80 95       	com	r24
     3f4:	84 23       	and	r24, r20
     3f6:	8c 93       	st	X, r24
				break;	
			default:
				break;
		}
		
	}
     3f8:	0f 90       	pop	r0
     3fa:	0f 90       	pop	r0
     3fc:	0f 90       	pop	r0
     3fe:	0f 90       	pop	r0
     400:	0f 90       	pop	r0
     402:	cf 91       	pop	r28
     404:	df 91       	pop	r29
     406:	08 95       	ret

00000408 <GPIO_u8ReadPin>:
	
	u8	GPIO_u8ReadPin(	u8  copy_u8Port ,u8 copy_u8Pin )
	{
     408:	df 93       	push	r29
     40a:	cf 93       	push	r28
     40c:	00 d0       	rcall	.+0      	; 0x40e <GPIO_u8ReadPin+0x6>
     40e:	00 d0       	rcall	.+0      	; 0x410 <GPIO_u8ReadPin+0x8>
     410:	0f 92       	push	r0
     412:	cd b7       	in	r28, 0x3d	; 61
     414:	de b7       	in	r29, 0x3e	; 62
     416:	8a 83       	std	Y+2, r24	; 0x02
     418:	6b 83       	std	Y+3, r22	; 0x03
		u8 Local_u8ReturnValue ;
		switch(copy_u8Port){
     41a:	8a 81       	ldd	r24, Y+2	; 0x02
     41c:	28 2f       	mov	r18, r24
     41e:	30 e0       	ldi	r19, 0x00	; 0
     420:	3d 83       	std	Y+5, r19	; 0x05
     422:	2c 83       	std	Y+4, r18	; 0x04
     424:	4c 81       	ldd	r20, Y+4	; 0x04
     426:	5d 81       	ldd	r21, Y+5	; 0x05
     428:	41 30       	cpi	r20, 0x01	; 1
     42a:	51 05       	cpc	r21, r1
     42c:	b1 f1       	breq	.+108    	; 0x49a <GPIO_u8ReadPin+0x92>
     42e:	8c 81       	ldd	r24, Y+4	; 0x04
     430:	9d 81       	ldd	r25, Y+5	; 0x05
     432:	82 30       	cpi	r24, 0x02	; 2
     434:	91 05       	cpc	r25, r1
     436:	34 f4       	brge	.+12     	; 0x444 <GPIO_u8ReadPin+0x3c>
     438:	2c 81       	ldd	r18, Y+4	; 0x04
     43a:	3d 81       	ldd	r19, Y+5	; 0x05
     43c:	21 15       	cp	r18, r1
     43e:	31 05       	cpc	r19, r1
     440:	71 f0       	breq	.+28     	; 0x45e <GPIO_u8ReadPin+0x56>
     442:	84 c0       	rjmp	.+264    	; 0x54c <GPIO_u8ReadPin+0x144>
     444:	4c 81       	ldd	r20, Y+4	; 0x04
     446:	5d 81       	ldd	r21, Y+5	; 0x05
     448:	42 30       	cpi	r20, 0x02	; 2
     44a:	51 05       	cpc	r21, r1
     44c:	09 f4       	brne	.+2      	; 0x450 <GPIO_u8ReadPin+0x48>
     44e:	43 c0       	rjmp	.+134    	; 0x4d6 <GPIO_u8ReadPin+0xce>
     450:	8c 81       	ldd	r24, Y+4	; 0x04
     452:	9d 81       	ldd	r25, Y+5	; 0x05
     454:	83 30       	cpi	r24, 0x03	; 3
     456:	91 05       	cpc	r25, r1
     458:	09 f4       	brne	.+2      	; 0x45c <GPIO_u8ReadPin+0x54>
     45a:	5b c0       	rjmp	.+182    	; 0x512 <GPIO_u8ReadPin+0x10a>
     45c:	77 c0       	rjmp	.+238    	; 0x54c <GPIO_u8ReadPin+0x144>
			case GPIOA :
				Local_u8ReturnValue = GET_BIT(PINA,copy_u8Pin);
     45e:	e9 e3       	ldi	r30, 0x39	; 57
     460:	f0 e0       	ldi	r31, 0x00	; 0
     462:	80 81       	ld	r24, Z
     464:	48 2f       	mov	r20, r24
     466:	50 e0       	ldi	r21, 0x00	; 0
     468:	8b 81       	ldd	r24, Y+3	; 0x03
     46a:	28 2f       	mov	r18, r24
     46c:	30 e0       	ldi	r19, 0x00	; 0
     46e:	81 e0       	ldi	r24, 0x01	; 1
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	02 c0       	rjmp	.+4      	; 0x478 <GPIO_u8ReadPin+0x70>
     474:	88 0f       	add	r24, r24
     476:	99 1f       	adc	r25, r25
     478:	2a 95       	dec	r18
     47a:	e2 f7       	brpl	.-8      	; 0x474 <GPIO_u8ReadPin+0x6c>
     47c:	9a 01       	movw	r18, r20
     47e:	28 23       	and	r18, r24
     480:	39 23       	and	r19, r25
     482:	8b 81       	ldd	r24, Y+3	; 0x03
     484:	88 2f       	mov	r24, r24
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	a9 01       	movw	r20, r18
     48a:	02 c0       	rjmp	.+4      	; 0x490 <GPIO_u8ReadPin+0x88>
     48c:	55 95       	asr	r21
     48e:	47 95       	ror	r20
     490:	8a 95       	dec	r24
     492:	e2 f7       	brpl	.-8      	; 0x48c <GPIO_u8ReadPin+0x84>
     494:	ca 01       	movw	r24, r20
     496:	89 83       	std	Y+1, r24	; 0x01
     498:	59 c0       	rjmp	.+178    	; 0x54c <GPIO_u8ReadPin+0x144>
				break ;
			case GPIOB :
				Local_u8ReturnValue = GET_BIT(PINB,copy_u8Pin);
     49a:	e6 e3       	ldi	r30, 0x36	; 54
     49c:	f0 e0       	ldi	r31, 0x00	; 0
     49e:	80 81       	ld	r24, Z
     4a0:	48 2f       	mov	r20, r24
     4a2:	50 e0       	ldi	r21, 0x00	; 0
     4a4:	8b 81       	ldd	r24, Y+3	; 0x03
     4a6:	28 2f       	mov	r18, r24
     4a8:	30 e0       	ldi	r19, 0x00	; 0
     4aa:	81 e0       	ldi	r24, 0x01	; 1
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <GPIO_u8ReadPin+0xac>
     4b0:	88 0f       	add	r24, r24
     4b2:	99 1f       	adc	r25, r25
     4b4:	2a 95       	dec	r18
     4b6:	e2 f7       	brpl	.-8      	; 0x4b0 <GPIO_u8ReadPin+0xa8>
     4b8:	9a 01       	movw	r18, r20
     4ba:	28 23       	and	r18, r24
     4bc:	39 23       	and	r19, r25
     4be:	8b 81       	ldd	r24, Y+3	; 0x03
     4c0:	88 2f       	mov	r24, r24
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	a9 01       	movw	r20, r18
     4c6:	02 c0       	rjmp	.+4      	; 0x4cc <GPIO_u8ReadPin+0xc4>
     4c8:	55 95       	asr	r21
     4ca:	47 95       	ror	r20
     4cc:	8a 95       	dec	r24
     4ce:	e2 f7       	brpl	.-8      	; 0x4c8 <GPIO_u8ReadPin+0xc0>
     4d0:	ca 01       	movw	r24, r20
     4d2:	89 83       	std	Y+1, r24	; 0x01
     4d4:	3b c0       	rjmp	.+118    	; 0x54c <GPIO_u8ReadPin+0x144>
				break ;
			case GPIOC :
				Local_u8ReturnValue = GET_BIT(PINC,copy_u8Pin);
     4d6:	e3 e3       	ldi	r30, 0x33	; 51
     4d8:	f0 e0       	ldi	r31, 0x00	; 0
     4da:	80 81       	ld	r24, Z
     4dc:	48 2f       	mov	r20, r24
     4de:	50 e0       	ldi	r21, 0x00	; 0
     4e0:	8b 81       	ldd	r24, Y+3	; 0x03
     4e2:	28 2f       	mov	r18, r24
     4e4:	30 e0       	ldi	r19, 0x00	; 0
     4e6:	81 e0       	ldi	r24, 0x01	; 1
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <GPIO_u8ReadPin+0xe8>
     4ec:	88 0f       	add	r24, r24
     4ee:	99 1f       	adc	r25, r25
     4f0:	2a 95       	dec	r18
     4f2:	e2 f7       	brpl	.-8      	; 0x4ec <GPIO_u8ReadPin+0xe4>
     4f4:	9a 01       	movw	r18, r20
     4f6:	28 23       	and	r18, r24
     4f8:	39 23       	and	r19, r25
     4fa:	8b 81       	ldd	r24, Y+3	; 0x03
     4fc:	88 2f       	mov	r24, r24
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a9 01       	movw	r20, r18
     502:	02 c0       	rjmp	.+4      	; 0x508 <GPIO_u8ReadPin+0x100>
     504:	55 95       	asr	r21
     506:	47 95       	ror	r20
     508:	8a 95       	dec	r24
     50a:	e2 f7       	brpl	.-8      	; 0x504 <GPIO_u8ReadPin+0xfc>
     50c:	ca 01       	movw	r24, r20
     50e:	89 83       	std	Y+1, r24	; 0x01
     510:	1d c0       	rjmp	.+58     	; 0x54c <GPIO_u8ReadPin+0x144>
				break ;
			case GPIOD :
				Local_u8ReturnValue = GET_BIT(PIND,copy_u8Pin);
     512:	e0 e3       	ldi	r30, 0x30	; 48
     514:	f0 e0       	ldi	r31, 0x00	; 0
     516:	80 81       	ld	r24, Z
     518:	48 2f       	mov	r20, r24
     51a:	50 e0       	ldi	r21, 0x00	; 0
     51c:	8b 81       	ldd	r24, Y+3	; 0x03
     51e:	28 2f       	mov	r18, r24
     520:	30 e0       	ldi	r19, 0x00	; 0
     522:	81 e0       	ldi	r24, 0x01	; 1
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	02 c0       	rjmp	.+4      	; 0x52c <GPIO_u8ReadPin+0x124>
     528:	88 0f       	add	r24, r24
     52a:	99 1f       	adc	r25, r25
     52c:	2a 95       	dec	r18
     52e:	e2 f7       	brpl	.-8      	; 0x528 <GPIO_u8ReadPin+0x120>
     530:	9a 01       	movw	r18, r20
     532:	28 23       	and	r18, r24
     534:	39 23       	and	r19, r25
     536:	8b 81       	ldd	r24, Y+3	; 0x03
     538:	88 2f       	mov	r24, r24
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	a9 01       	movw	r20, r18
     53e:	02 c0       	rjmp	.+4      	; 0x544 <GPIO_u8ReadPin+0x13c>
     540:	55 95       	asr	r21
     542:	47 95       	ror	r20
     544:	8a 95       	dec	r24
     546:	e2 f7       	brpl	.-8      	; 0x540 <GPIO_u8ReadPin+0x138>
     548:	ca 01       	movw	r24, r20
     54a:	89 83       	std	Y+1, r24	; 0x01
				break ;
			default:
			break;
		}
		return Local_u8ReturnValue ;
     54c:	89 81       	ldd	r24, Y+1	; 0x01
		
	}
     54e:	0f 90       	pop	r0
     550:	0f 90       	pop	r0
     552:	0f 90       	pop	r0
     554:	0f 90       	pop	r0
     556:	0f 90       	pop	r0
     558:	cf 91       	pop	r28
     55a:	df 91       	pop	r29
     55c:	08 95       	ret

0000055e <GPIO_voidTogPin>:
	
	void GPIO_voidTogPin 	( u8 copy_u8Port , u8 copy_u8Pin )
	{
     55e:	df 93       	push	r29
     560:	cf 93       	push	r28
     562:	00 d0       	rcall	.+0      	; 0x564 <GPIO_voidTogPin+0x6>
     564:	00 d0       	rcall	.+0      	; 0x566 <GPIO_voidTogPin+0x8>
     566:	cd b7       	in	r28, 0x3d	; 61
     568:	de b7       	in	r29, 0x3e	; 62
     56a:	89 83       	std	Y+1, r24	; 0x01
     56c:	6a 83       	std	Y+2, r22	; 0x02
		switch(copy_u8Port){
     56e:	89 81       	ldd	r24, Y+1	; 0x01
     570:	28 2f       	mov	r18, r24
     572:	30 e0       	ldi	r19, 0x00	; 0
     574:	3c 83       	std	Y+4, r19	; 0x04
     576:	2b 83       	std	Y+3, r18	; 0x03
     578:	8b 81       	ldd	r24, Y+3	; 0x03
     57a:	9c 81       	ldd	r25, Y+4	; 0x04
     57c:	81 30       	cpi	r24, 0x01	; 1
     57e:	91 05       	cpc	r25, r1
     580:	49 f1       	breq	.+82     	; 0x5d4 <GPIO_voidTogPin+0x76>
     582:	2b 81       	ldd	r18, Y+3	; 0x03
     584:	3c 81       	ldd	r19, Y+4	; 0x04
     586:	22 30       	cpi	r18, 0x02	; 2
     588:	31 05       	cpc	r19, r1
     58a:	2c f4       	brge	.+10     	; 0x596 <GPIO_voidTogPin+0x38>
     58c:	8b 81       	ldd	r24, Y+3	; 0x03
     58e:	9c 81       	ldd	r25, Y+4	; 0x04
     590:	00 97       	sbiw	r24, 0x00	; 0
     592:	61 f0       	breq	.+24     	; 0x5ac <GPIO_voidTogPin+0x4e>
     594:	5a c0       	rjmp	.+180    	; 0x64a <GPIO_voidTogPin+0xec>
     596:	2b 81       	ldd	r18, Y+3	; 0x03
     598:	3c 81       	ldd	r19, Y+4	; 0x04
     59a:	22 30       	cpi	r18, 0x02	; 2
     59c:	31 05       	cpc	r19, r1
     59e:	71 f1       	breq	.+92     	; 0x5fc <GPIO_voidTogPin+0x9e>
     5a0:	8b 81       	ldd	r24, Y+3	; 0x03
     5a2:	9c 81       	ldd	r25, Y+4	; 0x04
     5a4:	83 30       	cpi	r24, 0x03	; 3
     5a6:	91 05       	cpc	r25, r1
     5a8:	e9 f1       	breq	.+122    	; 0x624 <GPIO_voidTogPin+0xc6>
     5aa:	4f c0       	rjmp	.+158    	; 0x64a <GPIO_voidTogPin+0xec>
			case GPIOA :
				TOG_BIT(PORTA,copy_u8Pin);
     5ac:	ab e3       	ldi	r26, 0x3B	; 59
     5ae:	b0 e0       	ldi	r27, 0x00	; 0
     5b0:	eb e3       	ldi	r30, 0x3B	; 59
     5b2:	f0 e0       	ldi	r31, 0x00	; 0
     5b4:	80 81       	ld	r24, Z
     5b6:	48 2f       	mov	r20, r24
     5b8:	8a 81       	ldd	r24, Y+2	; 0x02
     5ba:	28 2f       	mov	r18, r24
     5bc:	30 e0       	ldi	r19, 0x00	; 0
     5be:	81 e0       	ldi	r24, 0x01	; 1
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	02 2e       	mov	r0, r18
     5c4:	02 c0       	rjmp	.+4      	; 0x5ca <GPIO_voidTogPin+0x6c>
     5c6:	88 0f       	add	r24, r24
     5c8:	99 1f       	adc	r25, r25
     5ca:	0a 94       	dec	r0
     5cc:	e2 f7       	brpl	.-8      	; 0x5c6 <GPIO_voidTogPin+0x68>
     5ce:	84 27       	eor	r24, r20
     5d0:	8c 93       	st	X, r24
     5d2:	3b c0       	rjmp	.+118    	; 0x64a <GPIO_voidTogPin+0xec>
				break ;             
			case GPIOB :            
				TOG_BIT(PORTB,copy_u8Pin);
     5d4:	a8 e3       	ldi	r26, 0x38	; 56
     5d6:	b0 e0       	ldi	r27, 0x00	; 0
     5d8:	e8 e3       	ldi	r30, 0x38	; 56
     5da:	f0 e0       	ldi	r31, 0x00	; 0
     5dc:	80 81       	ld	r24, Z
     5de:	48 2f       	mov	r20, r24
     5e0:	8a 81       	ldd	r24, Y+2	; 0x02
     5e2:	28 2f       	mov	r18, r24
     5e4:	30 e0       	ldi	r19, 0x00	; 0
     5e6:	81 e0       	ldi	r24, 0x01	; 1
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	02 2e       	mov	r0, r18
     5ec:	02 c0       	rjmp	.+4      	; 0x5f2 <GPIO_voidTogPin+0x94>
     5ee:	88 0f       	add	r24, r24
     5f0:	99 1f       	adc	r25, r25
     5f2:	0a 94       	dec	r0
     5f4:	e2 f7       	brpl	.-8      	; 0x5ee <GPIO_voidTogPin+0x90>
     5f6:	84 27       	eor	r24, r20
     5f8:	8c 93       	st	X, r24
     5fa:	27 c0       	rjmp	.+78     	; 0x64a <GPIO_voidTogPin+0xec>
				break ;             
			case GPIOC :            
				TOG_BIT(PORTC,copy_u8Pin);
     5fc:	a5 e3       	ldi	r26, 0x35	; 53
     5fe:	b0 e0       	ldi	r27, 0x00	; 0
     600:	e5 e3       	ldi	r30, 0x35	; 53
     602:	f0 e0       	ldi	r31, 0x00	; 0
     604:	80 81       	ld	r24, Z
     606:	48 2f       	mov	r20, r24
     608:	8a 81       	ldd	r24, Y+2	; 0x02
     60a:	28 2f       	mov	r18, r24
     60c:	30 e0       	ldi	r19, 0x00	; 0
     60e:	81 e0       	ldi	r24, 0x01	; 1
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	02 2e       	mov	r0, r18
     614:	02 c0       	rjmp	.+4      	; 0x61a <GPIO_voidTogPin+0xbc>
     616:	88 0f       	add	r24, r24
     618:	99 1f       	adc	r25, r25
     61a:	0a 94       	dec	r0
     61c:	e2 f7       	brpl	.-8      	; 0x616 <GPIO_voidTogPin+0xb8>
     61e:	84 27       	eor	r24, r20
     620:	8c 93       	st	X, r24
     622:	13 c0       	rjmp	.+38     	; 0x64a <GPIO_voidTogPin+0xec>
				break ;             
			case GPIOD : 
				TOG_BIT(PORTD,copy_u8Pin);
     624:	a2 e3       	ldi	r26, 0x32	; 50
     626:	b0 e0       	ldi	r27, 0x00	; 0
     628:	e2 e3       	ldi	r30, 0x32	; 50
     62a:	f0 e0       	ldi	r31, 0x00	; 0
     62c:	80 81       	ld	r24, Z
     62e:	48 2f       	mov	r20, r24
     630:	8a 81       	ldd	r24, Y+2	; 0x02
     632:	28 2f       	mov	r18, r24
     634:	30 e0       	ldi	r19, 0x00	; 0
     636:	81 e0       	ldi	r24, 0x01	; 1
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	02 2e       	mov	r0, r18
     63c:	02 c0       	rjmp	.+4      	; 0x642 <GPIO_voidTogPin+0xe4>
     63e:	88 0f       	add	r24, r24
     640:	99 1f       	adc	r25, r25
     642:	0a 94       	dec	r0
     644:	e2 f7       	brpl	.-8      	; 0x63e <GPIO_voidTogPin+0xe0>
     646:	84 27       	eor	r24, r20
     648:	8c 93       	st	X, r24
			default:
			break;
		}
		
		
	}
     64a:	0f 90       	pop	r0
     64c:	0f 90       	pop	r0
     64e:	0f 90       	pop	r0
     650:	0f 90       	pop	r0
     652:	cf 91       	pop	r28
     654:	df 91       	pop	r29
     656:	08 95       	ret

00000658 <GPIO_voidSetPortDDR>:
	void GPIO_voidSetPortDDR (u8  copy_u8Port , u8 copy_u8Mode )
	{
     658:	df 93       	push	r29
     65a:	cf 93       	push	r28
     65c:	00 d0       	rcall	.+0      	; 0x65e <GPIO_voidSetPortDDR+0x6>
     65e:	00 d0       	rcall	.+0      	; 0x660 <GPIO_voidSetPortDDR+0x8>
     660:	cd b7       	in	r28, 0x3d	; 61
     662:	de b7       	in	r29, 0x3e	; 62
     664:	89 83       	std	Y+1, r24	; 0x01
     666:	6a 83       	std	Y+2, r22	; 0x02
		switch(copy_u8Port)
     668:	89 81       	ldd	r24, Y+1	; 0x01
     66a:	28 2f       	mov	r18, r24
     66c:	30 e0       	ldi	r19, 0x00	; 0
     66e:	3c 83       	std	Y+4, r19	; 0x04
     670:	2b 83       	std	Y+3, r18	; 0x03
     672:	8b 81       	ldd	r24, Y+3	; 0x03
     674:	9c 81       	ldd	r25, Y+4	; 0x04
     676:	81 30       	cpi	r24, 0x01	; 1
     678:	91 05       	cpc	r25, r1
     67a:	09 f1       	breq	.+66     	; 0x6be <GPIO_voidSetPortDDR+0x66>
     67c:	2b 81       	ldd	r18, Y+3	; 0x03
     67e:	3c 81       	ldd	r19, Y+4	; 0x04
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 05       	cpc	r19, r1
     684:	2c f4       	brge	.+10     	; 0x690 <GPIO_voidSetPortDDR+0x38>
     686:	8b 81       	ldd	r24, Y+3	; 0x03
     688:	9c 81       	ldd	r25, Y+4	; 0x04
     68a:	00 97       	sbiw	r24, 0x00	; 0
     68c:	61 f0       	breq	.+24     	; 0x6a6 <GPIO_voidSetPortDDR+0x4e>
     68e:	3a c0       	rjmp	.+116    	; 0x704 <GPIO_voidSetPortDDR+0xac>
     690:	2b 81       	ldd	r18, Y+3	; 0x03
     692:	3c 81       	ldd	r19, Y+4	; 0x04
     694:	22 30       	cpi	r18, 0x02	; 2
     696:	31 05       	cpc	r19, r1
     698:	f1 f0       	breq	.+60     	; 0x6d6 <GPIO_voidSetPortDDR+0x7e>
     69a:	8b 81       	ldd	r24, Y+3	; 0x03
     69c:	9c 81       	ldd	r25, Y+4	; 0x04
     69e:	83 30       	cpi	r24, 0x03	; 3
     6a0:	91 05       	cpc	r25, r1
     6a2:	29 f1       	breq	.+74     	; 0x6ee <GPIO_voidSetPortDDR+0x96>
     6a4:	2f c0       	rjmp	.+94     	; 0x704 <GPIO_voidSetPortDDR+0xac>
		{
			case GPIOA :
				if(copy_u8Mode ==OUTPUT )
     6a6:	8a 81       	ldd	r24, Y+2	; 0x02
     6a8:	81 30       	cpi	r24, 0x01	; 1
     6aa:	29 f4       	brne	.+10     	; 0x6b6 <GPIO_voidSetPortDDR+0x5e>
				{
					DDRA= 0xFF;
     6ac:	ea e3       	ldi	r30, 0x3A	; 58
     6ae:	f0 e0       	ldi	r31, 0x00	; 0
     6b0:	8f ef       	ldi	r24, 0xFF	; 255
     6b2:	80 83       	st	Z, r24
     6b4:	27 c0       	rjmp	.+78     	; 0x704 <GPIO_voidSetPortDDR+0xac>
				}
				else {
					DDRA = 0x00 ;
     6b6:	ea e3       	ldi	r30, 0x3A	; 58
     6b8:	f0 e0       	ldi	r31, 0x00	; 0
     6ba:	10 82       	st	Z, r1
     6bc:	23 c0       	rjmp	.+70     	; 0x704 <GPIO_voidSetPortDDR+0xac>
				}
				break;
			case GPIOB :
				if(copy_u8Mode ==OUTPUT )
     6be:	8a 81       	ldd	r24, Y+2	; 0x02
     6c0:	81 30       	cpi	r24, 0x01	; 1
     6c2:	29 f4       	brne	.+10     	; 0x6ce <GPIO_voidSetPortDDR+0x76>
				{
					DDRB = 0xFF;
     6c4:	e7 e3       	ldi	r30, 0x37	; 55
     6c6:	f0 e0       	ldi	r31, 0x00	; 0
     6c8:	8f ef       	ldi	r24, 0xFF	; 255
     6ca:	80 83       	st	Z, r24
     6cc:	1b c0       	rjmp	.+54     	; 0x704 <GPIO_voidSetPortDDR+0xac>
				}
				else {
					DDRB = 0x00;
     6ce:	e7 e3       	ldi	r30, 0x37	; 55
     6d0:	f0 e0       	ldi	r31, 0x00	; 0
     6d2:	10 82       	st	Z, r1
     6d4:	17 c0       	rjmp	.+46     	; 0x704 <GPIO_voidSetPortDDR+0xac>
				}
				break;
			case GPIOC :
				if(copy_u8Mode ==OUTPUT )
     6d6:	8a 81       	ldd	r24, Y+2	; 0x02
     6d8:	81 30       	cpi	r24, 0x01	; 1
     6da:	29 f4       	brne	.+10     	; 0x6e6 <GPIO_voidSetPortDDR+0x8e>
				{
					DDRC = 0xFF ;
     6dc:	e4 e3       	ldi	r30, 0x34	; 52
     6de:	f0 e0       	ldi	r31, 0x00	; 0
     6e0:	8f ef       	ldi	r24, 0xFF	; 255
     6e2:	80 83       	st	Z, r24
     6e4:	0f c0       	rjmp	.+30     	; 0x704 <GPIO_voidSetPortDDR+0xac>
				}
				else {
					DDRC = 0x00 ;
     6e6:	e4 e3       	ldi	r30, 0x34	; 52
     6e8:	f0 e0       	ldi	r31, 0x00	; 0
     6ea:	10 82       	st	Z, r1
     6ec:	0b c0       	rjmp	.+22     	; 0x704 <GPIO_voidSetPortDDR+0xac>
				}
				break;
			case GPIOD :
				if(copy_u8Mode ==OUTPUT )
     6ee:	8a 81       	ldd	r24, Y+2	; 0x02
     6f0:	81 30       	cpi	r24, 0x01	; 1
     6f2:	29 f4       	brne	.+10     	; 0x6fe <GPIO_voidSetPortDDR+0xa6>
				{
					DDRD = 0xFF;
     6f4:	e1 e3       	ldi	r30, 0x31	; 49
     6f6:	f0 e0       	ldi	r31, 0x00	; 0
     6f8:	8f ef       	ldi	r24, 0xFF	; 255
     6fa:	80 83       	st	Z, r24
     6fc:	03 c0       	rjmp	.+6      	; 0x704 <GPIO_voidSetPortDDR+0xac>
				}
				else {
					DDRD = 0x00;
     6fe:	e1 e3       	ldi	r30, 0x31	; 49
     700:	f0 e0       	ldi	r31, 0x00	; 0
     702:	10 82       	st	Z, r1
				}
				break;	
			default:
				break;
		}
	}
     704:	0f 90       	pop	r0
     706:	0f 90       	pop	r0
     708:	0f 90       	pop	r0
     70a:	0f 90       	pop	r0
     70c:	cf 91       	pop	r28
     70e:	df 91       	pop	r29
     710:	08 95       	ret

00000712 <GPIO_voidWritePort>:
	void	GPIO_voidWritePort (u8 copy_u8Port , u8 copy_u8Value)
	{
     712:	df 93       	push	r29
     714:	cf 93       	push	r28
     716:	00 d0       	rcall	.+0      	; 0x718 <GPIO_voidWritePort+0x6>
     718:	00 d0       	rcall	.+0      	; 0x71a <GPIO_voidWritePort+0x8>
     71a:	cd b7       	in	r28, 0x3d	; 61
     71c:	de b7       	in	r29, 0x3e	; 62
     71e:	89 83       	std	Y+1, r24	; 0x01
     720:	6a 83       	std	Y+2, r22	; 0x02
			switch(copy_u8Port)
     722:	89 81       	ldd	r24, Y+1	; 0x01
     724:	28 2f       	mov	r18, r24
     726:	30 e0       	ldi	r19, 0x00	; 0
     728:	3c 83       	std	Y+4, r19	; 0x04
     72a:	2b 83       	std	Y+3, r18	; 0x03
     72c:	8b 81       	ldd	r24, Y+3	; 0x03
     72e:	9c 81       	ldd	r25, Y+4	; 0x04
     730:	81 30       	cpi	r24, 0x01	; 1
     732:	91 05       	cpc	r25, r1
     734:	d1 f0       	breq	.+52     	; 0x76a <GPIO_voidWritePort+0x58>
     736:	2b 81       	ldd	r18, Y+3	; 0x03
     738:	3c 81       	ldd	r19, Y+4	; 0x04
     73a:	22 30       	cpi	r18, 0x02	; 2
     73c:	31 05       	cpc	r19, r1
     73e:	2c f4       	brge	.+10     	; 0x74a <GPIO_voidWritePort+0x38>
     740:	8b 81       	ldd	r24, Y+3	; 0x03
     742:	9c 81       	ldd	r25, Y+4	; 0x04
     744:	00 97       	sbiw	r24, 0x00	; 0
     746:	61 f0       	breq	.+24     	; 0x760 <GPIO_voidWritePort+0x4e>
     748:	1e c0       	rjmp	.+60     	; 0x786 <GPIO_voidWritePort+0x74>
     74a:	2b 81       	ldd	r18, Y+3	; 0x03
     74c:	3c 81       	ldd	r19, Y+4	; 0x04
     74e:	22 30       	cpi	r18, 0x02	; 2
     750:	31 05       	cpc	r19, r1
     752:	81 f0       	breq	.+32     	; 0x774 <GPIO_voidWritePort+0x62>
     754:	8b 81       	ldd	r24, Y+3	; 0x03
     756:	9c 81       	ldd	r25, Y+4	; 0x04
     758:	83 30       	cpi	r24, 0x03	; 3
     75a:	91 05       	cpc	r25, r1
     75c:	81 f0       	breq	.+32     	; 0x77e <GPIO_voidWritePort+0x6c>
     75e:	13 c0       	rjmp	.+38     	; 0x786 <GPIO_voidWritePort+0x74>
		{
			case GPIOA :
				PORTA = copy_u8Value ;
     760:	eb e3       	ldi	r30, 0x3B	; 59
     762:	f0 e0       	ldi	r31, 0x00	; 0
     764:	8a 81       	ldd	r24, Y+2	; 0x02
     766:	80 83       	st	Z, r24
     768:	0e c0       	rjmp	.+28     	; 0x786 <GPIO_voidWritePort+0x74>
				break;
			case GPIOB :
				PORTB = copy_u8Value;
     76a:	e8 e3       	ldi	r30, 0x38	; 56
     76c:	f0 e0       	ldi	r31, 0x00	; 0
     76e:	8a 81       	ldd	r24, Y+2	; 0x02
     770:	80 83       	st	Z, r24
     772:	09 c0       	rjmp	.+18     	; 0x786 <GPIO_voidWritePort+0x74>
				break;
			case GPIOC :
				PORTC = copy_u8Value;
     774:	e5 e3       	ldi	r30, 0x35	; 53
     776:	f0 e0       	ldi	r31, 0x00	; 0
     778:	8a 81       	ldd	r24, Y+2	; 0x02
     77a:	80 83       	st	Z, r24
     77c:	04 c0       	rjmp	.+8      	; 0x786 <GPIO_voidWritePort+0x74>
				break;
			case GPIOD :
				PORTD = copy_u8Value;
     77e:	e2 e3       	ldi	r30, 0x32	; 50
     780:	f0 e0       	ldi	r31, 0x00	; 0
     782:	8a 81       	ldd	r24, Y+2	; 0x02
     784:	80 83       	st	Z, r24
				break;
		}
		
			
			
		}
     786:	0f 90       	pop	r0
     788:	0f 90       	pop	r0
     78a:	0f 90       	pop	r0
     78c:	0f 90       	pop	r0
     78e:	cf 91       	pop	r28
     790:	df 91       	pop	r29
     792:	08 95       	ret

00000794 <GPIO_voidSetLowNippleDDR>:
	void GPIO_voidSetLowNippleDDR(u8 copy_u8Port , u8 copy_u8Mode)
	{
     794:	df 93       	push	r29
     796:	cf 93       	push	r28
     798:	00 d0       	rcall	.+0      	; 0x79a <GPIO_voidSetLowNippleDDR+0x6>
     79a:	0f 92       	push	r0
     79c:	cd b7       	in	r28, 0x3d	; 61
     79e:	de b7       	in	r29, 0x3e	; 62
     7a0:	8a 83       	std	Y+2, r24	; 0x02
     7a2:	6b 83       	std	Y+3, r22	; 0x03
		u8 i ;
		for (i= 0 ; i<4 ; i++){
     7a4:	19 82       	std	Y+1, r1	; 0x01
     7a6:	08 c0       	rjmp	.+16     	; 0x7b8 <GPIO_voidSetLowNippleDDR+0x24>
			GPIO_voidSetPinDDR(copy_u8Port , i ,copy_u8Mode );
     7a8:	8a 81       	ldd	r24, Y+2	; 0x02
     7aa:	69 81       	ldd	r22, Y+1	; 0x01
     7ac:	4b 81       	ldd	r20, Y+3	; 0x03
     7ae:	0e 94 3e 00 	call	0x7c	; 0x7c <GPIO_voidSetPinDDR>
			
		}
	void GPIO_voidSetLowNippleDDR(u8 copy_u8Port , u8 copy_u8Mode)
	{
		u8 i ;
		for (i= 0 ; i<4 ; i++){
     7b2:	89 81       	ldd	r24, Y+1	; 0x01
     7b4:	8f 5f       	subi	r24, 0xFF	; 255
     7b6:	89 83       	std	Y+1, r24	; 0x01
     7b8:	89 81       	ldd	r24, Y+1	; 0x01
     7ba:	84 30       	cpi	r24, 0x04	; 4
     7bc:	a8 f3       	brcs	.-22     	; 0x7a8 <GPIO_voidSetLowNippleDDR+0x14>
			GPIO_voidSetPinDDR(copy_u8Port , i ,copy_u8Mode );
		}
	}
     7be:	0f 90       	pop	r0
     7c0:	0f 90       	pop	r0
     7c2:	0f 90       	pop	r0
     7c4:	cf 91       	pop	r28
     7c6:	df 91       	pop	r29
     7c8:	08 95       	ret

000007ca <GPIO_voidSetHighNippleDDR>:
	void GPIO_voidSetHighNippleDDR(u8 copy_u8Port , u8 copy_u8Mode)
	{
     7ca:	df 93       	push	r29
     7cc:	cf 93       	push	r28
     7ce:	00 d0       	rcall	.+0      	; 0x7d0 <GPIO_voidSetHighNippleDDR+0x6>
     7d0:	0f 92       	push	r0
     7d2:	cd b7       	in	r28, 0x3d	; 61
     7d4:	de b7       	in	r29, 0x3e	; 62
     7d6:	8a 83       	std	Y+2, r24	; 0x02
     7d8:	6b 83       	std	Y+3, r22	; 0x03
		u8 i ;
		for (i= 4 ; i<8 ; i++){
     7da:	84 e0       	ldi	r24, 0x04	; 4
     7dc:	89 83       	std	Y+1, r24	; 0x01
     7de:	08 c0       	rjmp	.+16     	; 0x7f0 <GPIO_voidSetHighNippleDDR+0x26>
			GPIO_voidSetPinDDR(copy_u8Port , i ,copy_u8Mode );
     7e0:	8a 81       	ldd	r24, Y+2	; 0x02
     7e2:	69 81       	ldd	r22, Y+1	; 0x01
     7e4:	4b 81       	ldd	r20, Y+3	; 0x03
     7e6:	0e 94 3e 00 	call	0x7c	; 0x7c <GPIO_voidSetPinDDR>
		}
	}
	void GPIO_voidSetHighNippleDDR(u8 copy_u8Port , u8 copy_u8Mode)
	{
		u8 i ;
		for (i= 4 ; i<8 ; i++){
     7ea:	89 81       	ldd	r24, Y+1	; 0x01
     7ec:	8f 5f       	subi	r24, 0xFF	; 255
     7ee:	89 83       	std	Y+1, r24	; 0x01
     7f0:	89 81       	ldd	r24, Y+1	; 0x01
     7f2:	88 30       	cpi	r24, 0x08	; 8
     7f4:	a8 f3       	brcs	.-22     	; 0x7e0 <GPIO_voidSetHighNippleDDR+0x16>
			GPIO_voidSetPinDDR(copy_u8Port , i ,copy_u8Mode );
		}
	}
     7f6:	0f 90       	pop	r0
     7f8:	0f 90       	pop	r0
     7fa:	0f 90       	pop	r0
     7fc:	cf 91       	pop	r28
     7fe:	df 91       	pop	r29
     800:	08 95       	ret

00000802 <GPIO_voidWriteLowNipple>:
	void GPIO_voidWriteLowNipple (u8 copy_u8Port , u8 copy_u8Value )
	{
     802:	df 93       	push	r29
     804:	cf 93       	push	r28
     806:	00 d0       	rcall	.+0      	; 0x808 <GPIO_voidWriteLowNipple+0x6>
     808:	00 d0       	rcall	.+0      	; 0x80a <GPIO_voidWriteLowNipple+0x8>
     80a:	cd b7       	in	r28, 0x3d	; 61
     80c:	de b7       	in	r29, 0x3e	; 62
     80e:	89 83       	std	Y+1, r24	; 0x01
     810:	6a 83       	std	Y+2, r22	; 0x02
		copy_u8Value &= 0x0F;
     812:	8a 81       	ldd	r24, Y+2	; 0x02
     814:	8f 70       	andi	r24, 0x0F	; 15
     816:	8a 83       	std	Y+2, r24	; 0x02
		switch (copy_u8Port) {
     818:	89 81       	ldd	r24, Y+1	; 0x01
     81a:	28 2f       	mov	r18, r24
     81c:	30 e0       	ldi	r19, 0x00	; 0
     81e:	3c 83       	std	Y+4, r19	; 0x04
     820:	2b 83       	std	Y+3, r18	; 0x03
     822:	8b 81       	ldd	r24, Y+3	; 0x03
     824:	9c 81       	ldd	r25, Y+4	; 0x04
     826:	81 30       	cpi	r24, 0x01	; 1
     828:	91 05       	cpc	r25, r1
     82a:	29 f1       	breq	.+74     	; 0x876 <__stack+0x17>
     82c:	2b 81       	ldd	r18, Y+3	; 0x03
     82e:	3c 81       	ldd	r19, Y+4	; 0x04
     830:	22 30       	cpi	r18, 0x02	; 2
     832:	31 05       	cpc	r19, r1
     834:	2c f4       	brge	.+10     	; 0x840 <GPIO_voidWriteLowNipple+0x3e>
     836:	8b 81       	ldd	r24, Y+3	; 0x03
     838:	9c 81       	ldd	r25, Y+4	; 0x04
     83a:	00 97       	sbiw	r24, 0x00	; 0
     83c:	61 f0       	breq	.+24     	; 0x856 <GPIO_voidWriteLowNipple+0x54>
     83e:	4a c0       	rjmp	.+148    	; 0x8d4 <__stack+0x75>
     840:	2b 81       	ldd	r18, Y+3	; 0x03
     842:	3c 81       	ldd	r19, Y+4	; 0x04
     844:	22 30       	cpi	r18, 0x02	; 2
     846:	31 05       	cpc	r19, r1
     848:	31 f1       	breq	.+76     	; 0x896 <__stack+0x37>
     84a:	8b 81       	ldd	r24, Y+3	; 0x03
     84c:	9c 81       	ldd	r25, Y+4	; 0x04
     84e:	83 30       	cpi	r24, 0x03	; 3
     850:	91 05       	cpc	r25, r1
     852:	89 f1       	breq	.+98     	; 0x8b6 <__stack+0x57>
     854:	3f c0       	rjmp	.+126    	; 0x8d4 <__stack+0x75>
			case GPIOA :
				PORTA &= 0xF0 ; 
     856:	ab e3       	ldi	r26, 0x3B	; 59
     858:	b0 e0       	ldi	r27, 0x00	; 0
     85a:	eb e3       	ldi	r30, 0x3B	; 59
     85c:	f0 e0       	ldi	r31, 0x00	; 0
     85e:	80 81       	ld	r24, Z
     860:	80 7f       	andi	r24, 0xF0	; 240
     862:	8c 93       	st	X, r24
				PORTA |= copy_u8Value ;
     864:	ab e3       	ldi	r26, 0x3B	; 59
     866:	b0 e0       	ldi	r27, 0x00	; 0
     868:	eb e3       	ldi	r30, 0x3B	; 59
     86a:	f0 e0       	ldi	r31, 0x00	; 0
     86c:	90 81       	ld	r25, Z
     86e:	8a 81       	ldd	r24, Y+2	; 0x02
     870:	89 2b       	or	r24, r25
     872:	8c 93       	st	X, r24
     874:	2f c0       	rjmp	.+94     	; 0x8d4 <__stack+0x75>
				break;
			case GPIOB :
				PORTB &= 0xF0 ; 
     876:	a8 e3       	ldi	r26, 0x38	; 56
     878:	b0 e0       	ldi	r27, 0x00	; 0
     87a:	e8 e3       	ldi	r30, 0x38	; 56
     87c:	f0 e0       	ldi	r31, 0x00	; 0
     87e:	80 81       	ld	r24, Z
     880:	80 7f       	andi	r24, 0xF0	; 240
     882:	8c 93       	st	X, r24
				PORTB |= copy_u8Value ;
     884:	a8 e3       	ldi	r26, 0x38	; 56
     886:	b0 e0       	ldi	r27, 0x00	; 0
     888:	e8 e3       	ldi	r30, 0x38	; 56
     88a:	f0 e0       	ldi	r31, 0x00	; 0
     88c:	90 81       	ld	r25, Z
     88e:	8a 81       	ldd	r24, Y+2	; 0x02
     890:	89 2b       	or	r24, r25
     892:	8c 93       	st	X, r24
     894:	1f c0       	rjmp	.+62     	; 0x8d4 <__stack+0x75>
				break;
			case GPIOC :
				PORTC &= 0xF0 ; 
     896:	a5 e3       	ldi	r26, 0x35	; 53
     898:	b0 e0       	ldi	r27, 0x00	; 0
     89a:	e5 e3       	ldi	r30, 0x35	; 53
     89c:	f0 e0       	ldi	r31, 0x00	; 0
     89e:	80 81       	ld	r24, Z
     8a0:	80 7f       	andi	r24, 0xF0	; 240
     8a2:	8c 93       	st	X, r24
				PORTC |= copy_u8Value ;
     8a4:	a5 e3       	ldi	r26, 0x35	; 53
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	e5 e3       	ldi	r30, 0x35	; 53
     8aa:	f0 e0       	ldi	r31, 0x00	; 0
     8ac:	90 81       	ld	r25, Z
     8ae:	8a 81       	ldd	r24, Y+2	; 0x02
     8b0:	89 2b       	or	r24, r25
     8b2:	8c 93       	st	X, r24
     8b4:	0f c0       	rjmp	.+30     	; 0x8d4 <__stack+0x75>
				break;
			case GPIOD :
				PORTD &= 0xF0 ; 
     8b6:	a2 e3       	ldi	r26, 0x32	; 50
     8b8:	b0 e0       	ldi	r27, 0x00	; 0
     8ba:	e2 e3       	ldi	r30, 0x32	; 50
     8bc:	f0 e0       	ldi	r31, 0x00	; 0
     8be:	80 81       	ld	r24, Z
     8c0:	80 7f       	andi	r24, 0xF0	; 240
     8c2:	8c 93       	st	X, r24
				PORTD |= copy_u8Value ;
     8c4:	a2 e3       	ldi	r26, 0x32	; 50
     8c6:	b0 e0       	ldi	r27, 0x00	; 0
     8c8:	e2 e3       	ldi	r30, 0x32	; 50
     8ca:	f0 e0       	ldi	r31, 0x00	; 0
     8cc:	90 81       	ld	r25, Z
     8ce:	8a 81       	ldd	r24, Y+2	; 0x02
     8d0:	89 2b       	or	r24, r25
     8d2:	8c 93       	st	X, r24
				break;	
		}
	}
     8d4:	0f 90       	pop	r0
     8d6:	0f 90       	pop	r0
     8d8:	0f 90       	pop	r0
     8da:	0f 90       	pop	r0
     8dc:	cf 91       	pop	r28
     8de:	df 91       	pop	r29
     8e0:	08 95       	ret

000008e2 <GPIO_voidWriteHighNipple>:
	void GPIO_voidWriteHighNipple (u8 copy_u8Port , u8 copy_u8Value )
	{
     8e2:	df 93       	push	r29
     8e4:	cf 93       	push	r28
     8e6:	00 d0       	rcall	.+0      	; 0x8e8 <GPIO_voidWriteHighNipple+0x6>
     8e8:	00 d0       	rcall	.+0      	; 0x8ea <GPIO_voidWriteHighNipple+0x8>
     8ea:	cd b7       	in	r28, 0x3d	; 61
     8ec:	de b7       	in	r29, 0x3e	; 62
     8ee:	89 83       	std	Y+1, r24	; 0x01
     8f0:	6a 83       	std	Y+2, r22	; 0x02
		copy_u8Value &= 0xF0;
     8f2:	8a 81       	ldd	r24, Y+2	; 0x02
     8f4:	80 7f       	andi	r24, 0xF0	; 240
     8f6:	8a 83       	std	Y+2, r24	; 0x02
		switch (copy_u8Port) {
     8f8:	89 81       	ldd	r24, Y+1	; 0x01
     8fa:	28 2f       	mov	r18, r24
     8fc:	30 e0       	ldi	r19, 0x00	; 0
     8fe:	3c 83       	std	Y+4, r19	; 0x04
     900:	2b 83       	std	Y+3, r18	; 0x03
     902:	8b 81       	ldd	r24, Y+3	; 0x03
     904:	9c 81       	ldd	r25, Y+4	; 0x04
     906:	81 30       	cpi	r24, 0x01	; 1
     908:	91 05       	cpc	r25, r1
     90a:	29 f1       	breq	.+74     	; 0x956 <GPIO_voidWriteHighNipple+0x74>
     90c:	2b 81       	ldd	r18, Y+3	; 0x03
     90e:	3c 81       	ldd	r19, Y+4	; 0x04
     910:	22 30       	cpi	r18, 0x02	; 2
     912:	31 05       	cpc	r19, r1
     914:	2c f4       	brge	.+10     	; 0x920 <GPIO_voidWriteHighNipple+0x3e>
     916:	8b 81       	ldd	r24, Y+3	; 0x03
     918:	9c 81       	ldd	r25, Y+4	; 0x04
     91a:	00 97       	sbiw	r24, 0x00	; 0
     91c:	61 f0       	breq	.+24     	; 0x936 <GPIO_voidWriteHighNipple+0x54>
     91e:	4a c0       	rjmp	.+148    	; 0x9b4 <GPIO_voidWriteHighNipple+0xd2>
     920:	2b 81       	ldd	r18, Y+3	; 0x03
     922:	3c 81       	ldd	r19, Y+4	; 0x04
     924:	22 30       	cpi	r18, 0x02	; 2
     926:	31 05       	cpc	r19, r1
     928:	31 f1       	breq	.+76     	; 0x976 <GPIO_voidWriteHighNipple+0x94>
     92a:	8b 81       	ldd	r24, Y+3	; 0x03
     92c:	9c 81       	ldd	r25, Y+4	; 0x04
     92e:	83 30       	cpi	r24, 0x03	; 3
     930:	91 05       	cpc	r25, r1
     932:	89 f1       	breq	.+98     	; 0x996 <GPIO_voidWriteHighNipple+0xb4>
     934:	3f c0       	rjmp	.+126    	; 0x9b4 <GPIO_voidWriteHighNipple+0xd2>
			case GPIOA :
				PORTA &= 0x0F ; 
     936:	ab e3       	ldi	r26, 0x3B	; 59
     938:	b0 e0       	ldi	r27, 0x00	; 0
     93a:	eb e3       	ldi	r30, 0x3B	; 59
     93c:	f0 e0       	ldi	r31, 0x00	; 0
     93e:	80 81       	ld	r24, Z
     940:	8f 70       	andi	r24, 0x0F	; 15
     942:	8c 93       	st	X, r24
				PORTA |= copy_u8Value ;
     944:	ab e3       	ldi	r26, 0x3B	; 59
     946:	b0 e0       	ldi	r27, 0x00	; 0
     948:	eb e3       	ldi	r30, 0x3B	; 59
     94a:	f0 e0       	ldi	r31, 0x00	; 0
     94c:	90 81       	ld	r25, Z
     94e:	8a 81       	ldd	r24, Y+2	; 0x02
     950:	89 2b       	or	r24, r25
     952:	8c 93       	st	X, r24
     954:	2f c0       	rjmp	.+94     	; 0x9b4 <GPIO_voidWriteHighNipple+0xd2>
				break;
			case GPIOB :
				PORTB &= 0x0F ; 
     956:	a8 e3       	ldi	r26, 0x38	; 56
     958:	b0 e0       	ldi	r27, 0x00	; 0
     95a:	e8 e3       	ldi	r30, 0x38	; 56
     95c:	f0 e0       	ldi	r31, 0x00	; 0
     95e:	80 81       	ld	r24, Z
     960:	8f 70       	andi	r24, 0x0F	; 15
     962:	8c 93       	st	X, r24
				PORTB |= copy_u8Value ;
     964:	a8 e3       	ldi	r26, 0x38	; 56
     966:	b0 e0       	ldi	r27, 0x00	; 0
     968:	e8 e3       	ldi	r30, 0x38	; 56
     96a:	f0 e0       	ldi	r31, 0x00	; 0
     96c:	90 81       	ld	r25, Z
     96e:	8a 81       	ldd	r24, Y+2	; 0x02
     970:	89 2b       	or	r24, r25
     972:	8c 93       	st	X, r24
     974:	1f c0       	rjmp	.+62     	; 0x9b4 <GPIO_voidWriteHighNipple+0xd2>
				break;
			case GPIOC :
				PORTC &= 0x0F ; 
     976:	a5 e3       	ldi	r26, 0x35	; 53
     978:	b0 e0       	ldi	r27, 0x00	; 0
     97a:	e5 e3       	ldi	r30, 0x35	; 53
     97c:	f0 e0       	ldi	r31, 0x00	; 0
     97e:	80 81       	ld	r24, Z
     980:	8f 70       	andi	r24, 0x0F	; 15
     982:	8c 93       	st	X, r24
				PORTC |= copy_u8Value ;
     984:	a5 e3       	ldi	r26, 0x35	; 53
     986:	b0 e0       	ldi	r27, 0x00	; 0
     988:	e5 e3       	ldi	r30, 0x35	; 53
     98a:	f0 e0       	ldi	r31, 0x00	; 0
     98c:	90 81       	ld	r25, Z
     98e:	8a 81       	ldd	r24, Y+2	; 0x02
     990:	89 2b       	or	r24, r25
     992:	8c 93       	st	X, r24
     994:	0f c0       	rjmp	.+30     	; 0x9b4 <GPIO_voidWriteHighNipple+0xd2>
				break;
			case GPIOD :
				PORTD &= 0x0F ; 
     996:	a2 e3       	ldi	r26, 0x32	; 50
     998:	b0 e0       	ldi	r27, 0x00	; 0
     99a:	e2 e3       	ldi	r30, 0x32	; 50
     99c:	f0 e0       	ldi	r31, 0x00	; 0
     99e:	80 81       	ld	r24, Z
     9a0:	8f 70       	andi	r24, 0x0F	; 15
     9a2:	8c 93       	st	X, r24
				PORTD |= copy_u8Value ;
     9a4:	a2 e3       	ldi	r26, 0x32	; 50
     9a6:	b0 e0       	ldi	r27, 0x00	; 0
     9a8:	e2 e3       	ldi	r30, 0x32	; 50
     9aa:	f0 e0       	ldi	r31, 0x00	; 0
     9ac:	90 81       	ld	r25, Z
     9ae:	8a 81       	ldd	r24, Y+2	; 0x02
     9b0:	89 2b       	or	r24, r25
     9b2:	8c 93       	st	X, r24
				break;	
		}
	}
     9b4:	0f 90       	pop	r0
     9b6:	0f 90       	pop	r0
     9b8:	0f 90       	pop	r0
     9ba:	0f 90       	pop	r0
     9bc:	cf 91       	pop	r28
     9be:	df 91       	pop	r29
     9c0:	08 95       	ret

000009c2 <I2C_voidInit>:

#define F_CPU 8000000UL


void I2C_voidInit (u32 copy_u32Scl)
{
     9c2:	0f 93       	push	r16
     9c4:	1f 93       	push	r17
     9c6:	df 93       	push	r29
     9c8:	cf 93       	push	r28
     9ca:	00 d0       	rcall	.+0      	; 0x9cc <I2C_voidInit+0xa>
     9cc:	00 d0       	rcall	.+0      	; 0x9ce <I2C_voidInit+0xc>
     9ce:	cd b7       	in	r28, 0x3d	; 61
     9d0:	de b7       	in	r29, 0x3e	; 62
     9d2:	69 83       	std	Y+1, r22	; 0x01
     9d4:	7a 83       	std	Y+2, r23	; 0x02
     9d6:	8b 83       	std	Y+3, r24	; 0x03
     9d8:	9c 83       	std	Y+4, r25	; 0x04
	#if I2C_PreScaler ==1
		CLEAR_BIT(TWSR , TWS1);
     9da:	a1 e2       	ldi	r26, 0x21	; 33
     9dc:	b0 e0       	ldi	r27, 0x00	; 0
     9de:	e1 e2       	ldi	r30, 0x21	; 33
     9e0:	f0 e0       	ldi	r31, 0x00	; 0
     9e2:	80 81       	ld	r24, Z
     9e4:	8d 7f       	andi	r24, 0xFD	; 253
     9e6:	8c 93       	st	X, r24
		CLEAR_BIT(TWSR , TWS0);
     9e8:	a1 e2       	ldi	r26, 0x21	; 33
     9ea:	b0 e0       	ldi	r27, 0x00	; 0
     9ec:	e1 e2       	ldi	r30, 0x21	; 33
     9ee:	f0 e0       	ldi	r31, 0x00	; 0
     9f0:	80 81       	ld	r24, Z
     9f2:	8e 7f       	andi	r24, 0xFE	; 254
     9f4:	8c 93       	st	X, r24
		SET_BIT(TWSR , TWS1);
	#else
		SET_BIT(TWSR , TWS1);
		SET_BIT(TWSR , TWS0);
	#endif
TWBR = (((F_CPU/copy_u32Scl)-16 )/2*(4^I2C_PreScaler));
     9f6:	00 e2       	ldi	r16, 0x20	; 32
     9f8:	10 e0       	ldi	r17, 0x00	; 0
     9fa:	80 e0       	ldi	r24, 0x00	; 0
     9fc:	92 e1       	ldi	r25, 0x12	; 18
     9fe:	aa e7       	ldi	r26, 0x7A	; 122
     a00:	b0 e0       	ldi	r27, 0x00	; 0
     a02:	29 81       	ldd	r18, Y+1	; 0x01
     a04:	3a 81       	ldd	r19, Y+2	; 0x02
     a06:	4b 81       	ldd	r20, Y+3	; 0x03
     a08:	5c 81       	ldd	r21, Y+4	; 0x04
     a0a:	bc 01       	movw	r22, r24
     a0c:	cd 01       	movw	r24, r26
     a0e:	0e 94 10 08 	call	0x1020	; 0x1020 <__udivmodsi4>
     a12:	da 01       	movw	r26, r20
     a14:	c9 01       	movw	r24, r18
     a16:	40 97       	sbiw	r24, 0x10	; 16
     a18:	a1 09       	sbc	r26, r1
     a1a:	b1 09       	sbc	r27, r1
     a1c:	9c 01       	movw	r18, r24
     a1e:	ad 01       	movw	r20, r26
     a20:	56 95       	lsr	r21
     a22:	47 95       	ror	r20
     a24:	37 95       	ror	r19
     a26:	27 95       	ror	r18
     a28:	da 01       	movw	r26, r20
     a2a:	c9 01       	movw	r24, r18
     a2c:	88 0f       	add	r24, r24
     a2e:	99 1f       	adc	r25, r25
     a30:	aa 1f       	adc	r26, r26
     a32:	bb 1f       	adc	r27, r27
     a34:	88 0f       	add	r24, r24
     a36:	99 1f       	adc	r25, r25
     a38:	aa 1f       	adc	r26, r26
     a3a:	bb 1f       	adc	r27, r27
     a3c:	82 0f       	add	r24, r18
     a3e:	93 1f       	adc	r25, r19
     a40:	a4 1f       	adc	r26, r20
     a42:	b5 1f       	adc	r27, r21
     a44:	f8 01       	movw	r30, r16
     a46:	80 83       	st	Z, r24

}
     a48:	0f 90       	pop	r0
     a4a:	0f 90       	pop	r0
     a4c:	0f 90       	pop	r0
     a4e:	0f 90       	pop	r0
     a50:	cf 91       	pop	r28
     a52:	df 91       	pop	r29
     a54:	1f 91       	pop	r17
     a56:	0f 91       	pop	r16
     a58:	08 95       	ret

00000a5a <I2C_voidStart>:
void I2C_voidStart (void)
{
     a5a:	df 93       	push	r29
     a5c:	cf 93       	push	r28
     a5e:	cd b7       	in	r28, 0x3d	; 61
     a60:	de b7       	in	r29, 0x3e	; 62
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTA);
     a62:	e6 e5       	ldi	r30, 0x56	; 86
     a64:	f0 e0       	ldi	r31, 0x00	; 0
     a66:	84 ea       	ldi	r24, 0xA4	; 164
     a68:	80 83       	st	Z, r24
	while (GET_BIT(TWCR , TWINT) == 0);
     a6a:	e6 e5       	ldi	r30, 0x56	; 86
     a6c:	f0 e0       	ldi	r31, 0x00	; 0
     a6e:	80 81       	ld	r24, Z
     a70:	88 1f       	adc	r24, r24
     a72:	88 27       	eor	r24, r24
     a74:	88 1f       	adc	r24, r24
     a76:	88 2f       	mov	r24, r24
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	90 70       	andi	r25, 0x00	; 0
     a7c:	00 97       	sbiw	r24, 0x00	; 0
     a7e:	a9 f3       	breq	.-22     	; 0xa6a <I2C_voidStart+0x10>
	while ((TWSR&=0xF8) != StartHasBeenSent);
     a80:	a1 e2       	ldi	r26, 0x21	; 33
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	e1 e2       	ldi	r30, 0x21	; 33
     a86:	f0 e0       	ldi	r31, 0x00	; 0
     a88:	80 81       	ld	r24, Z
     a8a:	88 7f       	andi	r24, 0xF8	; 248
     a8c:	8c 93       	st	X, r24
     a8e:	8c 91       	ld	r24, X
     a90:	88 30       	cpi	r24, 0x08	; 8
     a92:	b1 f7       	brne	.-20     	; 0xa80 <I2C_voidStart+0x26>

}
     a94:	cf 91       	pop	r28
     a96:	df 91       	pop	r29
     a98:	08 95       	ret

00000a9a <I2C_voidWriteAddress>:
void I2C_voidWriteAddress (u8 copy_u8Address)
{
     a9a:	df 93       	push	r29
     a9c:	cf 93       	push	r28
     a9e:	0f 92       	push	r0
     aa0:	cd b7       	in	r28, 0x3d	; 61
     aa2:	de b7       	in	r29, 0x3e	; 62
     aa4:	89 83       	std	Y+1, r24	; 0x01
	TWDR = copy_u8Address ;
     aa6:	e3 e2       	ldi	r30, 0x23	; 35
     aa8:	f0 e0       	ldi	r31, 0x00	; 0
     aaa:	89 81       	ldd	r24, Y+1	; 0x01
     aac:	80 83       	st	Z, r24
	TWCR=(1<<TWINT)|(1<<TWEN);
     aae:	e6 e5       	ldi	r30, 0x56	; 86
     ab0:	f0 e0       	ldi	r31, 0x00	; 0
     ab2:	84 e8       	ldi	r24, 0x84	; 132
     ab4:	80 83       	st	Z, r24
	while (GET_BIT(TWCR , TWINT) == 0);
     ab6:	e6 e5       	ldi	r30, 0x56	; 86
     ab8:	f0 e0       	ldi	r31, 0x00	; 0
     aba:	80 81       	ld	r24, Z
     abc:	88 1f       	adc	r24, r24
     abe:	88 27       	eor	r24, r24
     ac0:	88 1f       	adc	r24, r24
     ac2:	88 2f       	mov	r24, r24
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	90 70       	andi	r25, 0x00	; 0
     ac8:	00 97       	sbiw	r24, 0x00	; 0
     aca:	a9 f3       	breq	.-22     	; 0xab6 <I2C_voidWriteAddress+0x1c>
	while ((TWSR&=0xF8) != AddressSentAckRes);
     acc:	a1 e2       	ldi	r26, 0x21	; 33
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	e1 e2       	ldi	r30, 0x21	; 33
     ad2:	f0 e0       	ldi	r31, 0x00	; 0
     ad4:	80 81       	ld	r24, Z
     ad6:	88 7f       	andi	r24, 0xF8	; 248
     ad8:	8c 93       	st	X, r24
     ada:	8c 91       	ld	r24, X
     adc:	88 31       	cpi	r24, 0x18	; 24
     ade:	b1 f7       	brne	.-20     	; 0xacc <I2C_voidWriteAddress+0x32>
}
     ae0:	0f 90       	pop	r0
     ae2:	cf 91       	pop	r28
     ae4:	df 91       	pop	r29
     ae6:	08 95       	ret

00000ae8 <I2C_voidWriteData>:
void I2C_voidWriteData (u8 copy_u8Data)
{
     ae8:	df 93       	push	r29
     aea:	cf 93       	push	r28
     aec:	0f 92       	push	r0
     aee:	cd b7       	in	r28, 0x3d	; 61
     af0:	de b7       	in	r29, 0x3e	; 62
     af2:	89 83       	std	Y+1, r24	; 0x01
	TWDR = copy_u8Data ;
     af4:	e3 e2       	ldi	r30, 0x23	; 35
     af6:	f0 e0       	ldi	r31, 0x00	; 0
     af8:	89 81       	ldd	r24, Y+1	; 0x01
     afa:	80 83       	st	Z, r24
	TWCR=(1<<TWINT)|(1<<TWEN);
     afc:	e6 e5       	ldi	r30, 0x56	; 86
     afe:	f0 e0       	ldi	r31, 0x00	; 0
     b00:	84 e8       	ldi	r24, 0x84	; 132
     b02:	80 83       	st	Z, r24
	while (GET_BIT(TWCR , TWINT) == 0);
     b04:	e6 e5       	ldi	r30, 0x56	; 86
     b06:	f0 e0       	ldi	r31, 0x00	; 0
     b08:	80 81       	ld	r24, Z
     b0a:	88 1f       	adc	r24, r24
     b0c:	88 27       	eor	r24, r24
     b0e:	88 1f       	adc	r24, r24
     b10:	88 2f       	mov	r24, r24
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	90 70       	andi	r25, 0x00	; 0
     b16:	00 97       	sbiw	r24, 0x00	; 0
     b18:	a9 f3       	breq	.-22     	; 0xb04 <I2C_voidWriteData+0x1c>
	while ((TWSR&=0xF8) != DataSentAckRes);
     b1a:	a1 e2       	ldi	r26, 0x21	; 33
     b1c:	b0 e0       	ldi	r27, 0x00	; 0
     b1e:	e1 e2       	ldi	r30, 0x21	; 33
     b20:	f0 e0       	ldi	r31, 0x00	; 0
     b22:	80 81       	ld	r24, Z
     b24:	88 7f       	andi	r24, 0xF8	; 248
     b26:	8c 93       	st	X, r24
     b28:	8c 91       	ld	r24, X
     b2a:	88 32       	cpi	r24, 0x28	; 40
     b2c:	b1 f7       	brne	.-20     	; 0xb1a <I2C_voidWriteData+0x32>
}
     b2e:	0f 90       	pop	r0
     b30:	cf 91       	pop	r28
     b32:	df 91       	pop	r29
     b34:	08 95       	ret

00000b36 <I2C_voidStop>:
void I2C_voidStop	(void)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
	
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     b3e:	e6 e5       	ldi	r30, 0x56	; 86
     b40:	f0 e0       	ldi	r31, 0x00	; 0
     b42:	84 e9       	ldi	r24, 0x94	; 148
     b44:	80 83       	st	Z, r24
	
}
     b46:	cf 91       	pop	r28
     b48:	df 91       	pop	r29
     b4a:	08 95       	ret

00000b4c <I2C_voidSetAddress>:
void I2C_voidSetAddress(u8 copy_u8Address)
{
     b4c:	df 93       	push	r29
     b4e:	cf 93       	push	r28
     b50:	0f 92       	push	r0
     b52:	cd b7       	in	r28, 0x3d	; 61
     b54:	de b7       	in	r29, 0x3e	; 62
     b56:	89 83       	std	Y+1, r24	; 0x01
	TWAR = copy_u8Address ;
     b58:	e2 e2       	ldi	r30, 0x22	; 34
     b5a:	f0 e0       	ldi	r31, 0x00	; 0
     b5c:	89 81       	ldd	r24, Y+1	; 0x01
     b5e:	80 83       	st	Z, r24
}
     b60:	0f 90       	pop	r0
     b62:	cf 91       	pop	r28
     b64:	df 91       	pop	r29
     b66:	08 95       	ret

00000b68 <I2C_u8SlaveRead>:
u8 I2C_u8SlaveRead (void)
{
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
     b70:	e6 e5       	ldi	r30, 0x56	; 86
     b72:	f0 e0       	ldi	r31, 0x00	; 0
     b74:	84 ec       	ldi	r24, 0xC4	; 196
     b76:	80 83       	st	Z, r24
	while (GET_BIT(TWCR , TWINT) == 0);
     b78:	e6 e5       	ldi	r30, 0x56	; 86
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	80 81       	ld	r24, Z
     b7e:	88 1f       	adc	r24, r24
     b80:	88 27       	eor	r24, r24
     b82:	88 1f       	adc	r24, r24
     b84:	88 2f       	mov	r24, r24
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	90 70       	andi	r25, 0x00	; 0
     b8a:	00 97       	sbiw	r24, 0x00	; 0
     b8c:	a9 f3       	breq	.-22     	; 0xb78 <I2C_u8SlaveRead+0x10>
	while ((TWSR&=0xF8) != SlaWResAckReturn);
     b8e:	a1 e2       	ldi	r26, 0x21	; 33
     b90:	b0 e0       	ldi	r27, 0x00	; 0
     b92:	e1 e2       	ldi	r30, 0x21	; 33
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	80 81       	ld	r24, Z
     b98:	88 7f       	andi	r24, 0xF8	; 248
     b9a:	8c 93       	st	X, r24
     b9c:	8c 91       	ld	r24, X
     b9e:	80 36       	cpi	r24, 0x60	; 96
     ba0:	b1 f7       	brne	.-20     	; 0xb8e <I2C_u8SlaveRead+0x26>
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
     ba2:	e6 e5       	ldi	r30, 0x56	; 86
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	84 ec       	ldi	r24, 0xC4	; 196
     ba8:	80 83       	st	Z, r24
	while (GET_BIT(TWCR , TWINT) == 0);
     baa:	e6 e5       	ldi	r30, 0x56	; 86
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	80 81       	ld	r24, Z
     bb0:	88 1f       	adc	r24, r24
     bb2:	88 27       	eor	r24, r24
     bb4:	88 1f       	adc	r24, r24
     bb6:	88 2f       	mov	r24, r24
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	90 70       	andi	r25, 0x00	; 0
     bbc:	00 97       	sbiw	r24, 0x00	; 0
     bbe:	a9 f3       	breq	.-22     	; 0xbaa <I2C_u8SlaveRead+0x42>
	while ((TWSR&=0xF8) != SLADataSentAckRes);
     bc0:	a1 e2       	ldi	r26, 0x21	; 33
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	e1 e2       	ldi	r30, 0x21	; 33
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	80 81       	ld	r24, Z
     bca:	88 7f       	andi	r24, 0xF8	; 248
     bcc:	8c 93       	st	X, r24
     bce:	8c 91       	ld	r24, X
     bd0:	80 38       	cpi	r24, 0x80	; 128
     bd2:	b1 f7       	brne	.-20     	; 0xbc0 <I2C_u8SlaveRead+0x58>
	return TWDR ;
     bd4:	e3 e2       	ldi	r30, 0x23	; 35
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	80 81       	ld	r24, Z
	
}
     bda:	cf 91       	pop	r28
     bdc:	df 91       	pop	r29
     bde:	08 95       	ret

00000be0 <I2C_repeated_start>:
void I2C_repeated_start(void)
	{
     be0:	df 93       	push	r29
     be2:	cf 93       	push	r28
     be4:	cd b7       	in	r28, 0x3d	; 61
     be6:	de b7       	in	r29, 0x3e	; 62
		TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTA);
     be8:	e6 e5       	ldi	r30, 0x56	; 86
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	84 ea       	ldi	r24, 0xA4	; 164
     bee:	80 83       	st	Z, r24
		while(GET_BIT(TWCR,TWINT)==0); //wait to finish
     bf0:	e6 e5       	ldi	r30, 0x56	; 86
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	80 81       	ld	r24, Z
     bf6:	88 1f       	adc	r24, r24
     bf8:	88 27       	eor	r24, r24
     bfa:	88 1f       	adc	r24, r24
     bfc:	88 2f       	mov	r24, r24
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	90 70       	andi	r25, 0x00	; 0
     c02:	00 97       	sbiw	r24, 0x00	; 0
     c04:	a9 f3       	breq	.-22     	; 0xbf0 <I2C_repeated_start+0x10>
		while ((TWSR & 0XF8) != 0x10); // repeated start condition has been transmitted
     c06:	e1 e2       	ldi	r30, 0x21	; 33
     c08:	f0 e0       	ldi	r31, 0x00	; 0
     c0a:	80 81       	ld	r24, Z
     c0c:	88 2f       	mov	r24, r24
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	88 7f       	andi	r24, 0xF8	; 248
     c12:	90 70       	andi	r25, 0x00	; 0
     c14:	80 31       	cpi	r24, 0x10	; 16
     c16:	91 05       	cpc	r25, r1
     c18:	b1 f7       	brne	.-20     	; 0xc06 <I2C_repeated_start+0x26>
	}
     c1a:	cf 91       	pop	r28
     c1c:	df 91       	pop	r29
     c1e:	08 95       	ret

00000c20 <I2C_read_with_NACK>:

unsigned char I2C_read_with_NACK(void)
	{
     c20:	df 93       	push	r29
     c22:	cf 93       	push	r28
     c24:	cd b7       	in	r28, 0x3d	; 61
     c26:	de b7       	in	r29, 0x3e	; 62
		TWCR=(1<<TWINT)|(1<<TWEN);
     c28:	e6 e5       	ldi	r30, 0x56	; 86
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	84 e8       	ldi	r24, 0x84	; 132
     c2e:	80 83       	st	Z, r24
		while(GET_BIT(TWCR,TWINT)==0);
     c30:	e6 e5       	ldi	r30, 0x56	; 86
     c32:	f0 e0       	ldi	r31, 0x00	; 0
     c34:	80 81       	ld	r24, Z
     c36:	88 1f       	adc	r24, r24
     c38:	88 27       	eor	r24, r24
     c3a:	88 1f       	adc	r24, r24
     c3c:	88 2f       	mov	r24, r24
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	90 70       	andi	r25, 0x00	; 0
     c42:	00 97       	sbiw	r24, 0x00	; 0
     c44:	a9 f3       	breq	.-22     	; 0xc30 <I2C_read_with_NACK+0x10>
		while ((TWSR & 0XF8) != 0x58); // data byte has been received and Not ACK has been returned
     c46:	e1 e2       	ldi	r30, 0x21	; 33
     c48:	f0 e0       	ldi	r31, 0x00	; 0
     c4a:	80 81       	ld	r24, Z
     c4c:	88 2f       	mov	r24, r24
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	88 7f       	andi	r24, 0xF8	; 248
     c52:	90 70       	andi	r25, 0x00	; 0
     c54:	88 35       	cpi	r24, 0x58	; 88
     c56:	91 05       	cpc	r25, r1
     c58:	b1 f7       	brne	.-20     	; 0xc46 <I2C_read_with_NACK+0x26>
		return TWDR ;
     c5a:	e3 e2       	ldi	r30, 0x23	; 35
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	80 81       	ld	r24, Z
	}
     c60:	cf 91       	pop	r28
     c62:	df 91       	pop	r29
     c64:	08 95       	ret

00000c66 <USART_voidInit>:
void (*CB_TX)(void);
void (*CB_RX)(void);
void (*CB_UDR)(void);

void USART_voidInit(u32 copy_u8BaudRate)
{
     c66:	df 93       	push	r29
     c68:	cf 93       	push	r28
     c6a:	00 d0       	rcall	.+0      	; 0xc6c <USART_voidInit+0x6>
     c6c:	00 d0       	rcall	.+0      	; 0xc6e <USART_voidInit+0x8>
     c6e:	00 d0       	rcall	.+0      	; 0xc70 <USART_voidInit+0xa>
     c70:	cd b7       	in	r28, 0x3d	; 61
     c72:	de b7       	in	r29, 0x3e	; 62
     c74:	6b 83       	std	Y+3, r22	; 0x03
     c76:	7c 83       	std	Y+4, r23	; 0x04
     c78:	8d 83       	std	Y+5, r24	; 0x05
     c7a:	9e 83       	std	Y+6, r25	; 0x06
	u16 Local_UBRR ;
	// Adjust Mode
	CLEAR_BIT (USCRC , URSEL);
     c7c:	a0 e4       	ldi	r26, 0x40	; 64
     c7e:	b0 e0       	ldi	r27, 0x00	; 0
     c80:	e0 e4       	ldi	r30, 0x40	; 64
     c82:	f0 e0       	ldi	r31, 0x00	; 0
     c84:	80 81       	ld	r24, Z
     c86:	8f 77       	andi	r24, 0x7F	; 127
     c88:	8c 93       	st	X, r24
	#if USART_MODE == 0
	//SET_BIT(USCRC,URSEL);
	CLEAR_BIT (USCRC , URSEL);
     c8a:	a0 e4       	ldi	r26, 0x40	; 64
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	e0 e4       	ldi	r30, 0x40	; 64
     c90:	f0 e0       	ldi	r31, 0x00	; 0
     c92:	80 81       	ld	r24, Z
     c94:	8f 77       	andi	r24, 0x7F	; 127
     c96:	8c 93       	st	X, r24
	Local_UBRR = (8000000/(16*copy_u8BaudRate))-1 ;
     c98:	8b 81       	ldd	r24, Y+3	; 0x03
     c9a:	9c 81       	ldd	r25, Y+4	; 0x04
     c9c:	ad 81       	ldd	r26, Y+5	; 0x05
     c9e:	be 81       	ldd	r27, Y+6	; 0x06
     ca0:	88 0f       	add	r24, r24
     ca2:	99 1f       	adc	r25, r25
     ca4:	aa 1f       	adc	r26, r26
     ca6:	bb 1f       	adc	r27, r27
     ca8:	88 0f       	add	r24, r24
     caa:	99 1f       	adc	r25, r25
     cac:	aa 1f       	adc	r26, r26
     cae:	bb 1f       	adc	r27, r27
     cb0:	88 0f       	add	r24, r24
     cb2:	99 1f       	adc	r25, r25
     cb4:	aa 1f       	adc	r26, r26
     cb6:	bb 1f       	adc	r27, r27
     cb8:	88 0f       	add	r24, r24
     cba:	99 1f       	adc	r25, r25
     cbc:	aa 1f       	adc	r26, r26
     cbe:	bb 1f       	adc	r27, r27
     cc0:	9c 01       	movw	r18, r24
     cc2:	ad 01       	movw	r20, r26
     cc4:	80 e0       	ldi	r24, 0x00	; 0
     cc6:	92 e1       	ldi	r25, 0x12	; 18
     cc8:	aa e7       	ldi	r26, 0x7A	; 122
     cca:	b0 e0       	ldi	r27, 0x00	; 0
     ccc:	bc 01       	movw	r22, r24
     cce:	cd 01       	movw	r24, r26
     cd0:	0e 94 10 08 	call	0x1020	; 0x1020 <__udivmodsi4>
     cd4:	da 01       	movw	r26, r20
     cd6:	c9 01       	movw	r24, r18
     cd8:	01 97       	sbiw	r24, 0x01	; 1
     cda:	9a 83       	std	Y+2, r25	; 0x02
     cdc:	89 83       	std	Y+1, r24	; 0x01
	#elif USART_WORDSIZE == 2
		CLEAR_BIT(USCRC,UCSZ0);
		SET_BIT(USCRC,UCSZ1);
		CLEAR_BIT(USCRB,UCSZ2);
	#elif USART_WORDSIZE == 3
		SET_BIT(USCRC,UCSZ0);
     cde:	a0 e4       	ldi	r26, 0x40	; 64
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e0 e4       	ldi	r30, 0x40	; 64
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	82 60       	ori	r24, 0x02	; 2
     cea:	8c 93       	st	X, r24
		SET_BIT(USCRC,UCSZ1);
     cec:	a0 e4       	ldi	r26, 0x40	; 64
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	e0 e4       	ldi	r30, 0x40	; 64
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	84 60       	ori	r24, 0x04	; 4
     cf8:	8c 93       	st	X, r24
		CLEAR_BIT(USCRB,UCSZ2);
     cfa:	aa e2       	ldi	r26, 0x2A	; 42
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	ea e2       	ldi	r30, 0x2A	; 42
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	8b 7f       	andi	r24, 0xFB	; 251
     d06:	8c 93       	st	X, r24
		SET_BIT(USCRC,UCSZ1);
		SET_BIT(USCRB,UCSZ2);
	#endif
	/* Adjust Parity */
	#if   USART_PARITY  == 0
		CLEAR_BIT(USCRC,UPM0);
     d08:	a0 e4       	ldi	r26, 0x40	; 64
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	e0 e4       	ldi	r30, 0x40	; 64
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	8f 7e       	andi	r24, 0xEF	; 239
     d14:	8c 93       	st	X, r24
		CLEAR_BIT(USCRC,UPM1);
     d16:	a0 e4       	ldi	r26, 0x40	; 64
     d18:	b0 e0       	ldi	r27, 0x00	; 0
     d1a:	e0 e4       	ldi	r30, 0x40	; 64
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	80 81       	ld	r24, Z
     d20:	8f 7d       	andi	r24, 0xDF	; 223
     d22:	8c 93       	st	X, r24
	#endif
	/* Adjust Stop bit */
	#if  USART_STOPBIT == 0
		CLEAR_BIT(USCRC,USBS);
	#else 
		SET_BIT(USCRC,USBS);
     d24:	a0 e4       	ldi	r26, 0x40	; 64
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	e0 e4       	ldi	r30, 0x40	; 64
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	80 81       	ld	r24, Z
     d2e:	88 60       	ori	r24, 0x08	; 8
     d30:	8c 93       	st	X, r24
	#endif
	
	/* Enable TX and RX */
	SET_BIT(USCRB,TXEN);
     d32:	aa e2       	ldi	r26, 0x2A	; 42
     d34:	b0 e0       	ldi	r27, 0x00	; 0
     d36:	ea e2       	ldi	r30, 0x2A	; 42
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	80 81       	ld	r24, Z
     d3c:	88 60       	ori	r24, 0x08	; 8
     d3e:	8c 93       	st	X, r24
	SET_BIT(USCRB,RXEN);
     d40:	aa e2       	ldi	r26, 0x2A	; 42
     d42:	b0 e0       	ldi	r27, 0x00	; 0
     d44:	ea e2       	ldi	r30, 0x2A	; 42
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	80 81       	ld	r24, Z
     d4a:	80 61       	ori	r24, 0x10	; 16
     d4c:	8c 93       	st	X, r24
	
	/* Adjust UBRR */
	SET_BIT(USCRC,URSEL);
     d4e:	a0 e4       	ldi	r26, 0x40	; 64
     d50:	b0 e0       	ldi	r27, 0x00	; 0
     d52:	e0 e4       	ldi	r30, 0x40	; 64
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	80 81       	ld	r24, Z
     d58:	80 68       	ori	r24, 0x80	; 128
     d5a:	8c 93       	st	X, r24
	UBRRH = (u8)(Local_UBRR >> 8);
     d5c:	e0 e4       	ldi	r30, 0x40	; 64
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	89 81       	ldd	r24, Y+1	; 0x01
     d62:	9a 81       	ldd	r25, Y+2	; 0x02
     d64:	89 2f       	mov	r24, r25
     d66:	99 27       	eor	r25, r25
     d68:	80 83       	st	Z, r24
	UBRRL = (u8)(Local_UBRR);
     d6a:	e9 e2       	ldi	r30, 0x29	; 41
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	89 81       	ldd	r24, Y+1	; 0x01
     d70:	80 83       	st	Z, r24
}
     d72:	26 96       	adiw	r28, 0x06	; 6
     d74:	0f b6       	in	r0, 0x3f	; 63
     d76:	f8 94       	cli
     d78:	de bf       	out	0x3e, r29	; 62
     d7a:	0f be       	out	0x3f, r0	; 63
     d7c:	cd bf       	out	0x3d, r28	; 61
     d7e:	cf 91       	pop	r28
     d80:	df 91       	pop	r29
     d82:	08 95       	ret

00000d84 <USART_voidSendByte>:

void USART_voidSendByte(u8 copy_u8DataSend)
{
     d84:	df 93       	push	r29
     d86:	cf 93       	push	r28
     d88:	0f 92       	push	r0
     d8a:	cd b7       	in	r28, 0x3d	; 61
     d8c:	de b7       	in	r29, 0x3e	; 62
     d8e:	89 83       	std	Y+1, r24	; 0x01
	while(GET_BIT(USCRA,UDRE)==0);
     d90:	eb e2       	ldi	r30, 0x2B	; 43
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	80 81       	ld	r24, Z
     d96:	88 2f       	mov	r24, r24
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	80 72       	andi	r24, 0x20	; 32
     d9c:	90 70       	andi	r25, 0x00	; 0
     d9e:	95 95       	asr	r25
     da0:	87 95       	ror	r24
     da2:	95 95       	asr	r25
     da4:	87 95       	ror	r24
     da6:	95 95       	asr	r25
     da8:	87 95       	ror	r24
     daa:	95 95       	asr	r25
     dac:	87 95       	ror	r24
     dae:	95 95       	asr	r25
     db0:	87 95       	ror	r24
     db2:	00 97       	sbiw	r24, 0x00	; 0
     db4:	69 f3       	breq	.-38     	; 0xd90 <USART_voidSendByte+0xc>
	UDR = copy_u8DataSend ;
     db6:	ec e2       	ldi	r30, 0x2C	; 44
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	89 81       	ldd	r24, Y+1	; 0x01
     dbc:	80 83       	st	Z, r24
}
     dbe:	0f 90       	pop	r0
     dc0:	cf 91       	pop	r28
     dc2:	df 91       	pop	r29
     dc4:	08 95       	ret

00000dc6 <USART_u8RecieveByte>:

u8 USART_u8RecieveByte(void)
{
     dc6:	df 93       	push	r29
     dc8:	cf 93       	push	r28
     dca:	cd b7       	in	r28, 0x3d	; 61
     dcc:	de b7       	in	r29, 0x3e	; 62
	while(GET_BIT(USCRA,RXC)==0);
     dce:	eb e2       	ldi	r30, 0x2B	; 43
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	80 81       	ld	r24, Z
     dd4:	88 1f       	adc	r24, r24
     dd6:	88 27       	eor	r24, r24
     dd8:	88 1f       	adc	r24, r24
     dda:	88 2f       	mov	r24, r24
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	90 70       	andi	r25, 0x00	; 0
     de0:	00 97       	sbiw	r24, 0x00	; 0
     de2:	a9 f3       	breq	.-22     	; 0xdce <USART_u8RecieveByte+0x8>
	return UDR;
     de4:	ec e2       	ldi	r30, 0x2C	; 44
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	80 81       	ld	r24, Z
}
     dea:	cf 91       	pop	r28
     dec:	df 91       	pop	r29
     dee:	08 95       	ret

00000df0 <USART_voidEnableTXInterrupt>:

void USART_voidEnableTXInterrupt(void)
{
     df0:	df 93       	push	r29
     df2:	cf 93       	push	r28
     df4:	cd b7       	in	r28, 0x3d	; 61
     df6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(USCRB,TXCIE);
     df8:	aa e2       	ldi	r26, 0x2A	; 42
     dfa:	b0 e0       	ldi	r27, 0x00	; 0
     dfc:	ea e2       	ldi	r30, 0x2A	; 42
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
     e02:	80 64       	ori	r24, 0x40	; 64
     e04:	8c 93       	st	X, r24
}
     e06:	cf 91       	pop	r28
     e08:	df 91       	pop	r29
     e0a:	08 95       	ret

00000e0c <USART_voidEnableRXInterrupt>:

void USART_voidEnableRXInterrupt(void)
{
     e0c:	df 93       	push	r29
     e0e:	cf 93       	push	r28
     e10:	cd b7       	in	r28, 0x3d	; 61
     e12:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(USCRB,RXCIE);
     e14:	aa e2       	ldi	r26, 0x2A	; 42
     e16:	b0 e0       	ldi	r27, 0x00	; 0
     e18:	ea e2       	ldi	r30, 0x2A	; 42
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	80 68       	ori	r24, 0x80	; 128
     e20:	8c 93       	st	X, r24
}
     e22:	cf 91       	pop	r28
     e24:	df 91       	pop	r29
     e26:	08 95       	ret

00000e28 <USART_voidEnableUDREInterrupt>:

void USART_voidEnableUDREInterrupt(void)
{
     e28:	df 93       	push	r29
     e2a:	cf 93       	push	r28
     e2c:	cd b7       	in	r28, 0x3d	; 61
     e2e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(USCRB,UDRIE);
     e30:	aa e2       	ldi	r26, 0x2A	; 42
     e32:	b0 e0       	ldi	r27, 0x00	; 0
     e34:	ea e2       	ldi	r30, 0x2A	; 42
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	80 81       	ld	r24, Z
     e3a:	80 62       	ori	r24, 0x20	; 32
     e3c:	8c 93       	st	X, r24
}
     e3e:	cf 91       	pop	r28
     e40:	df 91       	pop	r29
     e42:	08 95       	ret

00000e44 <USART_voidSetCBTX>:

void USART_voidSetCBTX(void(*copy_CB)(void))
{
     e44:	df 93       	push	r29
     e46:	cf 93       	push	r28
     e48:	00 d0       	rcall	.+0      	; 0xe4a <USART_voidSetCBTX+0x6>
     e4a:	cd b7       	in	r28, 0x3d	; 61
     e4c:	de b7       	in	r29, 0x3e	; 62
     e4e:	9a 83       	std	Y+2, r25	; 0x02
     e50:	89 83       	std	Y+1, r24	; 0x01
	CB_TX = copy_CB;
     e52:	89 81       	ldd	r24, Y+1	; 0x01
     e54:	9a 81       	ldd	r25, Y+2	; 0x02
     e56:	90 93 63 00 	sts	0x0063, r25
     e5a:	80 93 62 00 	sts	0x0062, r24
}
     e5e:	0f 90       	pop	r0
     e60:	0f 90       	pop	r0
     e62:	cf 91       	pop	r28
     e64:	df 91       	pop	r29
     e66:	08 95       	ret

00000e68 <USART_voidSetCBRX>:

void USART_voidSetCBRX(void(*copy_CB)(void))
{
     e68:	df 93       	push	r29
     e6a:	cf 93       	push	r28
     e6c:	00 d0       	rcall	.+0      	; 0xe6e <USART_voidSetCBRX+0x6>
     e6e:	cd b7       	in	r28, 0x3d	; 61
     e70:	de b7       	in	r29, 0x3e	; 62
     e72:	9a 83       	std	Y+2, r25	; 0x02
     e74:	89 83       	std	Y+1, r24	; 0x01
	CB_RX = copy_CB;
     e76:	89 81       	ldd	r24, Y+1	; 0x01
     e78:	9a 81       	ldd	r25, Y+2	; 0x02
     e7a:	90 93 65 00 	sts	0x0065, r25
     e7e:	80 93 64 00 	sts	0x0064, r24
}
     e82:	0f 90       	pop	r0
     e84:	0f 90       	pop	r0
     e86:	cf 91       	pop	r28
     e88:	df 91       	pop	r29
     e8a:	08 95       	ret

00000e8c <USART_voidSetCBUDRE>:

void USART_voidSetCBUDRE(void(*copy_CB)(void))
{
     e8c:	df 93       	push	r29
     e8e:	cf 93       	push	r28
     e90:	00 d0       	rcall	.+0      	; 0xe92 <USART_voidSetCBUDRE+0x6>
     e92:	cd b7       	in	r28, 0x3d	; 61
     e94:	de b7       	in	r29, 0x3e	; 62
     e96:	9a 83       	std	Y+2, r25	; 0x02
     e98:	89 83       	std	Y+1, r24	; 0x01
	CB_UDR = copy_CB;
     e9a:	89 81       	ldd	r24, Y+1	; 0x01
     e9c:	9a 81       	ldd	r25, Y+2	; 0x02
     e9e:	90 93 61 00 	sts	0x0061, r25
     ea2:	80 93 60 00 	sts	0x0060, r24
}
     ea6:	0f 90       	pop	r0
     ea8:	0f 90       	pop	r0
     eaa:	cf 91       	pop	r28
     eac:	df 91       	pop	r29
     eae:	08 95       	ret

00000eb0 <USART_voidSendString>:

void USART_voidSendString(u8 *copy_ptrString)
{
     eb0:	df 93       	push	r29
     eb2:	cf 93       	push	r28
     eb4:	00 d0       	rcall	.+0      	; 0xeb6 <USART_voidSendString+0x6>
     eb6:	cd b7       	in	r28, 0x3d	; 61
     eb8:	de b7       	in	r29, 0x3e	; 62
     eba:	9a 83       	std	Y+2, r25	; 0x02
     ebc:	89 83       	std	Y+1, r24	; 0x01
     ebe:	0a c0       	rjmp	.+20     	; 0xed4 <USART_voidSendString+0x24>
	while((*copy_ptrString) != '\0')
	{
		USART_voidSendByte(*copy_ptrString);
     ec0:	e9 81       	ldd	r30, Y+1	; 0x01
     ec2:	fa 81       	ldd	r31, Y+2	; 0x02
     ec4:	80 81       	ld	r24, Z
     ec6:	0e 94 c2 06 	call	0xd84	; 0xd84 <USART_voidSendByte>
		copy_ptrString++;
     eca:	89 81       	ldd	r24, Y+1	; 0x01
     ecc:	9a 81       	ldd	r25, Y+2	; 0x02
     ece:	01 96       	adiw	r24, 0x01	; 1
     ed0:	9a 83       	std	Y+2, r25	; 0x02
     ed2:	89 83       	std	Y+1, r24	; 0x01
	CB_UDR = copy_CB;
}

void USART_voidSendString(u8 *copy_ptrString)
{
	while((*copy_ptrString) != '\0')
     ed4:	e9 81       	ldd	r30, Y+1	; 0x01
     ed6:	fa 81       	ldd	r31, Y+2	; 0x02
     ed8:	80 81       	ld	r24, Z
     eda:	88 23       	and	r24, r24
     edc:	89 f7       	brne	.-30     	; 0xec0 <USART_voidSendString+0x10>
	{
		USART_voidSendByte(*copy_ptrString);
		copy_ptrString++;
	}
}
     ede:	0f 90       	pop	r0
     ee0:	0f 90       	pop	r0
     ee2:	cf 91       	pop	r28
     ee4:	df 91       	pop	r29
     ee6:	08 95       	ret

00000ee8 <USART_voidSendu32Block>:

void USART_voidSendu32Block(u32 copy_u32DataSend)
{
     ee8:	df 93       	push	r29
     eea:	cf 93       	push	r28
     eec:	00 d0       	rcall	.+0      	; 0xeee <USART_voidSendu32Block+0x6>
     eee:	00 d0       	rcall	.+0      	; 0xef0 <USART_voidSendu32Block+0x8>
     ef0:	00 d0       	rcall	.+0      	; 0xef2 <USART_voidSendu32Block+0xa>
     ef2:	cd b7       	in	r28, 0x3d	; 61
     ef4:	de b7       	in	r29, 0x3e	; 62
     ef6:	6b 83       	std	Y+3, r22	; 0x03
     ef8:	7c 83       	std	Y+4, r23	; 0x04
     efa:	8d 83       	std	Y+5, r24	; 0x05
     efc:	9e 83       	std	Y+6, r25	; 0x06
	u8 Data;
	u8 counter;
	for(counter = 0; counter <=3 ; counter ++)
     efe:	19 82       	std	Y+1, r1	; 0x01
     f00:	1c c0       	rjmp	.+56     	; 0xf3a <USART_voidSendu32Block+0x52>
	{
		Data = (u8)(copy_u32DataSend >> (8*counter));
     f02:	89 81       	ldd	r24, Y+1	; 0x01
     f04:	88 2f       	mov	r24, r24
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	9c 01       	movw	r18, r24
     f0a:	22 0f       	add	r18, r18
     f0c:	33 1f       	adc	r19, r19
     f0e:	22 0f       	add	r18, r18
     f10:	33 1f       	adc	r19, r19
     f12:	22 0f       	add	r18, r18
     f14:	33 1f       	adc	r19, r19
     f16:	8b 81       	ldd	r24, Y+3	; 0x03
     f18:	9c 81       	ldd	r25, Y+4	; 0x04
     f1a:	ad 81       	ldd	r26, Y+5	; 0x05
     f1c:	be 81       	ldd	r27, Y+6	; 0x06
     f1e:	04 c0       	rjmp	.+8      	; 0xf28 <USART_voidSendu32Block+0x40>
     f20:	b6 95       	lsr	r27
     f22:	a7 95       	ror	r26
     f24:	97 95       	ror	r25
     f26:	87 95       	ror	r24
     f28:	2a 95       	dec	r18
     f2a:	d2 f7       	brpl	.-12     	; 0xf20 <USART_voidSendu32Block+0x38>
     f2c:	8a 83       	std	Y+2, r24	; 0x02
		USART_voidSendByte(Data);
     f2e:	8a 81       	ldd	r24, Y+2	; 0x02
     f30:	0e 94 c2 06 	call	0xd84	; 0xd84 <USART_voidSendByte>

void USART_voidSendu32Block(u32 copy_u32DataSend)
{
	u8 Data;
	u8 counter;
	for(counter = 0; counter <=3 ; counter ++)
     f34:	89 81       	ldd	r24, Y+1	; 0x01
     f36:	8f 5f       	subi	r24, 0xFF	; 255
     f38:	89 83       	std	Y+1, r24	; 0x01
     f3a:	89 81       	ldd	r24, Y+1	; 0x01
     f3c:	84 30       	cpi	r24, 0x04	; 4
     f3e:	08 f3       	brcs	.-62     	; 0xf02 <USART_voidSendu32Block+0x1a>
	{
		Data = (u8)(copy_u32DataSend >> (8*counter));
		USART_voidSendByte(Data);
	}
}
     f40:	26 96       	adiw	r28, 0x06	; 6
     f42:	0f b6       	in	r0, 0x3f	; 63
     f44:	f8 94       	cli
     f46:	de bf       	out	0x3e, r29	; 62
     f48:	0f be       	out	0x3f, r0	; 63
     f4a:	cd bf       	out	0x3d, r28	; 61
     f4c:	cf 91       	pop	r28
     f4e:	df 91       	pop	r29
     f50:	08 95       	ret

00000f52 <USART_u32Recieveu32Block>:
u32 USART_u32Recieveu32Block(void)
{
     f52:	df 93       	push	r29
     f54:	cf 93       	push	r28
     f56:	00 d0       	rcall	.+0      	; 0xf58 <USART_u32Recieveu32Block+0x6>
     f58:	00 d0       	rcall	.+0      	; 0xf5a <USART_u32Recieveu32Block+0x8>
     f5a:	0f 92       	push	r0
     f5c:	cd b7       	in	r28, 0x3d	; 61
     f5e:	de b7       	in	r29, 0x3e	; 62
	u32 Data;
	u8 counter;
	for(counter = 0; counter <=3 ; counter ++)
     f60:	19 82       	std	Y+1, r1	; 0x01
     f62:	28 c0       	rjmp	.+80     	; 0xfb4 <USART_u32Recieveu32Block+0x62>
	{
		Data |=(USART_u8RecieveByte() << (8* counter)); 
     f64:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <USART_u8RecieveByte>
     f68:	28 2f       	mov	r18, r24
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	89 81       	ldd	r24, Y+1	; 0x01
     f6e:	88 2f       	mov	r24, r24
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	88 0f       	add	r24, r24
     f74:	99 1f       	adc	r25, r25
     f76:	88 0f       	add	r24, r24
     f78:	99 1f       	adc	r25, r25
     f7a:	88 0f       	add	r24, r24
     f7c:	99 1f       	adc	r25, r25
     f7e:	a9 01       	movw	r20, r18
     f80:	02 c0       	rjmp	.+4      	; 0xf86 <USART_u32Recieveu32Block+0x34>
     f82:	44 0f       	add	r20, r20
     f84:	55 1f       	adc	r21, r21
     f86:	8a 95       	dec	r24
     f88:	e2 f7       	brpl	.-8      	; 0xf82 <USART_u32Recieveu32Block+0x30>
     f8a:	ca 01       	movw	r24, r20
     f8c:	9c 01       	movw	r18, r24
     f8e:	44 27       	eor	r20, r20
     f90:	37 fd       	sbrc	r19, 7
     f92:	40 95       	com	r20
     f94:	54 2f       	mov	r21, r20
     f96:	8a 81       	ldd	r24, Y+2	; 0x02
     f98:	9b 81       	ldd	r25, Y+3	; 0x03
     f9a:	ac 81       	ldd	r26, Y+4	; 0x04
     f9c:	bd 81       	ldd	r27, Y+5	; 0x05
     f9e:	82 2b       	or	r24, r18
     fa0:	93 2b       	or	r25, r19
     fa2:	a4 2b       	or	r26, r20
     fa4:	b5 2b       	or	r27, r21
     fa6:	8a 83       	std	Y+2, r24	; 0x02
     fa8:	9b 83       	std	Y+3, r25	; 0x03
     faa:	ac 83       	std	Y+4, r26	; 0x04
     fac:	bd 83       	std	Y+5, r27	; 0x05
}
u32 USART_u32Recieveu32Block(void)
{
	u32 Data;
	u8 counter;
	for(counter = 0; counter <=3 ; counter ++)
     fae:	89 81       	ldd	r24, Y+1	; 0x01
     fb0:	8f 5f       	subi	r24, 0xFF	; 255
     fb2:	89 83       	std	Y+1, r24	; 0x01
     fb4:	89 81       	ldd	r24, Y+1	; 0x01
     fb6:	84 30       	cpi	r24, 0x04	; 4
     fb8:	a8 f2       	brcs	.-86     	; 0xf64 <USART_u32Recieveu32Block+0x12>
	{
		Data |=(USART_u8RecieveByte() << (8* counter)); 
	} 
	return Data;
     fba:	8a 81       	ldd	r24, Y+2	; 0x02
     fbc:	9b 81       	ldd	r25, Y+3	; 0x03
     fbe:	ac 81       	ldd	r26, Y+4	; 0x04
     fc0:	bd 81       	ldd	r27, Y+5	; 0x05
}
     fc2:	bc 01       	movw	r22, r24
     fc4:	cd 01       	movw	r24, r26
     fc6:	0f 90       	pop	r0
     fc8:	0f 90       	pop	r0
     fca:	0f 90       	pop	r0
     fcc:	0f 90       	pop	r0
     fce:	0f 90       	pop	r0
     fd0:	cf 91       	pop	r28
     fd2:	df 91       	pop	r29
     fd4:	08 95       	ret

00000fd6 <main>:
#include "UART_interface.h"
#include "I2C_interface.h"


int main ()
{
     fd6:	df 93       	push	r29
     fd8:	cf 93       	push	r28
     fda:	0f 92       	push	r0
     fdc:	cd b7       	in	r28, 0x3d	; 61
     fde:	de b7       	in	r29, 0x3e	; 62
	u8 x ;
	USART_voidInit(9600);
     fe0:	60 e8       	ldi	r22, 0x80	; 128
     fe2:	75 e2       	ldi	r23, 0x25	; 37
     fe4:	80 e0       	ldi	r24, 0x00	; 0
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	0e 94 33 06 	call	0xc66	; 0xc66 <USART_voidInit>
	I2C_voidInit(50000);
     fec:	60 e5       	ldi	r22, 0x50	; 80
     fee:	73 ec       	ldi	r23, 0xC3	; 195
     ff0:	80 e0       	ldi	r24, 0x00	; 0
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <I2C_voidInit>

	while(1)
	{
		x =USART_u8RecieveByte();
     ff8:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <USART_u8RecieveByte>
     ffc:	89 83       	std	Y+1, r24	; 0x01
		if(x == 5 ){
     ffe:	89 81       	ldd	r24, Y+1	; 0x01
    1000:	85 30       	cpi	r24, 0x05	; 5
    1002:	d1 f7       	brne	.-12     	; 0xff8 <main+0x22>
		I2C_voidStart();
    1004:	0e 94 2d 05 	call	0xa5a	; 0xa5a <I2C_voidStart>
			I2C_voidWriteAddress(0b10100000);
    1008:	80 ea       	ldi	r24, 0xA0	; 160
    100a:	0e 94 4d 05 	call	0xa9a	; 0xa9a <I2C_voidWriteAddress>

			I2C_voidWriteData(0b00000000);
    100e:	80 e0       	ldi	r24, 0x00	; 0
    1010:	0e 94 74 05 	call	0xae8	; 0xae8 <I2C_voidWriteData>
			I2C_voidWriteData(x);
    1014:	89 81       	ldd	r24, Y+1	; 0x01
    1016:	0e 94 74 05 	call	0xae8	; 0xae8 <I2C_voidWriteData>
			I2C_voidStop();
    101a:	0e 94 9b 05 	call	0xb36	; 0xb36 <I2C_voidStop>
    101e:	ec cf       	rjmp	.-40     	; 0xff8 <main+0x22>

00001020 <__udivmodsi4>:
    1020:	a1 e2       	ldi	r26, 0x21	; 33
    1022:	1a 2e       	mov	r1, r26
    1024:	aa 1b       	sub	r26, r26
    1026:	bb 1b       	sub	r27, r27
    1028:	fd 01       	movw	r30, r26
    102a:	0d c0       	rjmp	.+26     	; 0x1046 <__udivmodsi4_ep>

0000102c <__udivmodsi4_loop>:
    102c:	aa 1f       	adc	r26, r26
    102e:	bb 1f       	adc	r27, r27
    1030:	ee 1f       	adc	r30, r30
    1032:	ff 1f       	adc	r31, r31
    1034:	a2 17       	cp	r26, r18
    1036:	b3 07       	cpc	r27, r19
    1038:	e4 07       	cpc	r30, r20
    103a:	f5 07       	cpc	r31, r21
    103c:	20 f0       	brcs	.+8      	; 0x1046 <__udivmodsi4_ep>
    103e:	a2 1b       	sub	r26, r18
    1040:	b3 0b       	sbc	r27, r19
    1042:	e4 0b       	sbc	r30, r20
    1044:	f5 0b       	sbc	r31, r21

00001046 <__udivmodsi4_ep>:
    1046:	66 1f       	adc	r22, r22
    1048:	77 1f       	adc	r23, r23
    104a:	88 1f       	adc	r24, r24
    104c:	99 1f       	adc	r25, r25
    104e:	1a 94       	dec	r1
    1050:	69 f7       	brne	.-38     	; 0x102c <__udivmodsi4_loop>
    1052:	60 95       	com	r22
    1054:	70 95       	com	r23
    1056:	80 95       	com	r24
    1058:	90 95       	com	r25
    105a:	9b 01       	movw	r18, r22
    105c:	ac 01       	movw	r20, r24
    105e:	bd 01       	movw	r22, r26
    1060:	cf 01       	movw	r24, r30
    1062:	08 95       	ret

00001064 <_exit>:
    1064:	f8 94       	cli

00001066 <__stop_program>:
    1066:	ff cf       	rjmp	.-2      	; 0x1066 <__stop_program>
