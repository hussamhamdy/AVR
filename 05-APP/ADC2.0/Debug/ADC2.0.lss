
ADC2.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002bf8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010c  00800060  00002bf8  00002c6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001980  00000000  00000000  00002d78  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000b45  00000000  00000000  000046f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  0000523d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f5  00000000  00000000  000053dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002216  00000000  00000000  000055d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012b8  00000000  00000000  000077e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001136  00000000  00000000  00008aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  00009bd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002d2  00000000  00000000  00009d98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000095a  00000000  00000000  0000a06a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a9c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ef       	ldi	r30, 0xF8	; 248
      68:	fb e2       	ldi	r31, 0x2B	; 43
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 36       	cpi	r26, 0x6C	; 108
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <main>
      7a:	0c 94 fa 15 	jmp	0x2bf4	; 0x2bf4 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 22 13 	jmp	0x2644	; 0x2644 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a3 e6       	ldi	r26, 0x63	; 99
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 3e 13 	jmp	0x267c	; 0x267c <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 2e 13 	jmp	0x265c	; 0x265c <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 1b 05 	call	0xa36	; 0xa36 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 4a 13 	jmp	0x2694	; 0x2694 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 2e 13 	jmp	0x265c	; 0x265c <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 1b 05 	call	0xa36	; 0xa36 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 4a 13 	jmp	0x2694	; 0x2694 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 22 13 	jmp	0x2644	; 0x2644 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	83 e6       	ldi	r24, 0x63	; 99
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 1b 05 	call	0xa36	; 0xa36 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 3e 13 	jmp	0x267c	; 0x267c <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 2e 13 	jmp	0x265c	; 0x265c <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 68 06 	call	0xcd0	; 0xcd0 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 4a 13 	jmp	0x2694	; 0x2694 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 2e 13 	jmp	0x265c	; 0x265c <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 68 06 	call	0xcd0	; 0xcd0 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 4a 13 	jmp	0x2694	; 0x2694 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 2e 13 	jmp	0x265c	; 0x265c <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 68 06 	call	0xcd0	; 0xcd0 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 4a 13 	jmp	0x2694	; 0x2694 <__epilogue_restores__+0x18>

00000742 <__floatsisf>:
     742:	a8 e0       	ldi	r26, 0x08	; 8
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 2b 13 	jmp	0x2656	; 0x2656 <__prologue_saves__+0x12>
     74e:	9b 01       	movw	r18, r22
     750:	ac 01       	movw	r20, r24
     752:	83 e0       	ldi	r24, 0x03	; 3
     754:	89 83       	std	Y+1, r24	; 0x01
     756:	da 01       	movw	r26, r20
     758:	c9 01       	movw	r24, r18
     75a:	88 27       	eor	r24, r24
     75c:	b7 fd       	sbrc	r27, 7
     75e:	83 95       	inc	r24
     760:	99 27       	eor	r25, r25
     762:	aa 27       	eor	r26, r26
     764:	bb 27       	eor	r27, r27
     766:	b8 2e       	mov	r11, r24
     768:	21 15       	cp	r18, r1
     76a:	31 05       	cpc	r19, r1
     76c:	41 05       	cpc	r20, r1
     76e:	51 05       	cpc	r21, r1
     770:	19 f4       	brne	.+6      	; 0x778 <__floatsisf+0x36>
     772:	82 e0       	ldi	r24, 0x02	; 2
     774:	89 83       	std	Y+1, r24	; 0x01
     776:	3a c0       	rjmp	.+116    	; 0x7ec <__floatsisf+0xaa>
     778:	88 23       	and	r24, r24
     77a:	a9 f0       	breq	.+42     	; 0x7a6 <__floatsisf+0x64>
     77c:	20 30       	cpi	r18, 0x00	; 0
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	38 07       	cpc	r19, r24
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	48 07       	cpc	r20, r24
     786:	80 e8       	ldi	r24, 0x80	; 128
     788:	58 07       	cpc	r21, r24
     78a:	29 f4       	brne	.+10     	; 0x796 <__floatsisf+0x54>
     78c:	60 e0       	ldi	r22, 0x00	; 0
     78e:	70 e0       	ldi	r23, 0x00	; 0
     790:	80 e0       	ldi	r24, 0x00	; 0
     792:	9f ec       	ldi	r25, 0xCF	; 207
     794:	30 c0       	rjmp	.+96     	; 0x7f6 <__floatsisf+0xb4>
     796:	ee 24       	eor	r14, r14
     798:	ff 24       	eor	r15, r15
     79a:	87 01       	movw	r16, r14
     79c:	e2 1a       	sub	r14, r18
     79e:	f3 0a       	sbc	r15, r19
     7a0:	04 0b       	sbc	r16, r20
     7a2:	15 0b       	sbc	r17, r21
     7a4:	02 c0       	rjmp	.+4      	; 0x7aa <__floatsisf+0x68>
     7a6:	79 01       	movw	r14, r18
     7a8:	8a 01       	movw	r16, r20
     7aa:	8e e1       	ldi	r24, 0x1E	; 30
     7ac:	c8 2e       	mov	r12, r24
     7ae:	d1 2c       	mov	r13, r1
     7b0:	dc 82       	std	Y+4, r13	; 0x04
     7b2:	cb 82       	std	Y+3, r12	; 0x03
     7b4:	ed 82       	std	Y+5, r14	; 0x05
     7b6:	fe 82       	std	Y+6, r15	; 0x06
     7b8:	0f 83       	std	Y+7, r16	; 0x07
     7ba:	18 87       	std	Y+8, r17	; 0x08
     7bc:	c8 01       	movw	r24, r16
     7be:	b7 01       	movw	r22, r14
     7c0:	0e 94 cc 04 	call	0x998	; 0x998 <__clzsi2>
     7c4:	01 97       	sbiw	r24, 0x01	; 1
     7c6:	18 16       	cp	r1, r24
     7c8:	19 06       	cpc	r1, r25
     7ca:	84 f4       	brge	.+32     	; 0x7ec <__floatsisf+0xaa>
     7cc:	08 2e       	mov	r0, r24
     7ce:	04 c0       	rjmp	.+8      	; 0x7d8 <__floatsisf+0x96>
     7d0:	ee 0c       	add	r14, r14
     7d2:	ff 1c       	adc	r15, r15
     7d4:	00 1f       	adc	r16, r16
     7d6:	11 1f       	adc	r17, r17
     7d8:	0a 94       	dec	r0
     7da:	d2 f7       	brpl	.-12     	; 0x7d0 <__floatsisf+0x8e>
     7dc:	ed 82       	std	Y+5, r14	; 0x05
     7de:	fe 82       	std	Y+6, r15	; 0x06
     7e0:	0f 83       	std	Y+7, r16	; 0x07
     7e2:	18 87       	std	Y+8, r17	; 0x08
     7e4:	c8 1a       	sub	r12, r24
     7e6:	d9 0a       	sbc	r13, r25
     7e8:	dc 82       	std	Y+4, r13	; 0x04
     7ea:	cb 82       	std	Y+3, r12	; 0x03
     7ec:	ba 82       	std	Y+2, r11	; 0x02
     7ee:	ce 01       	movw	r24, r28
     7f0:	01 96       	adiw	r24, 0x01	; 1
     7f2:	0e 94 1b 05 	call	0xa36	; 0xa36 <__pack_f>
     7f6:	28 96       	adiw	r28, 0x08	; 8
     7f8:	e9 e0       	ldi	r30, 0x09	; 9
     7fa:	0c 94 47 13 	jmp	0x268e	; 0x268e <__epilogue_restores__+0x12>

000007fe <__fixsfsi>:
     7fe:	ac e0       	ldi	r26, 0x0C	; 12
     800:	b0 e0       	ldi	r27, 0x00	; 0
     802:	e5 e0       	ldi	r30, 0x05	; 5
     804:	f4 e0       	ldi	r31, 0x04	; 4
     806:	0c 94 32 13 	jmp	0x2664	; 0x2664 <__prologue_saves__+0x20>
     80a:	69 83       	std	Y+1, r22	; 0x01
     80c:	7a 83       	std	Y+2, r23	; 0x02
     80e:	8b 83       	std	Y+3, r24	; 0x03
     810:	9c 83       	std	Y+4, r25	; 0x04
     812:	ce 01       	movw	r24, r28
     814:	01 96       	adiw	r24, 0x01	; 1
     816:	be 01       	movw	r22, r28
     818:	6b 5f       	subi	r22, 0xFB	; 251
     81a:	7f 4f       	sbci	r23, 0xFF	; 255
     81c:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__unpack_f>
     820:	8d 81       	ldd	r24, Y+5	; 0x05
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	61 f1       	breq	.+88     	; 0x87e <__stack+0x1f>
     826:	82 30       	cpi	r24, 0x02	; 2
     828:	50 f1       	brcs	.+84     	; 0x87e <__stack+0x1f>
     82a:	84 30       	cpi	r24, 0x04	; 4
     82c:	21 f4       	brne	.+8      	; 0x836 <__fixsfsi+0x38>
     82e:	8e 81       	ldd	r24, Y+6	; 0x06
     830:	88 23       	and	r24, r24
     832:	51 f1       	breq	.+84     	; 0x888 <__stack+0x29>
     834:	2e c0       	rjmp	.+92     	; 0x892 <__stack+0x33>
     836:	2f 81       	ldd	r18, Y+7	; 0x07
     838:	38 85       	ldd	r19, Y+8	; 0x08
     83a:	37 fd       	sbrc	r19, 7
     83c:	20 c0       	rjmp	.+64     	; 0x87e <__stack+0x1f>
     83e:	6e 81       	ldd	r22, Y+6	; 0x06
     840:	2f 31       	cpi	r18, 0x1F	; 31
     842:	31 05       	cpc	r19, r1
     844:	1c f0       	brlt	.+6      	; 0x84c <__fixsfsi+0x4e>
     846:	66 23       	and	r22, r22
     848:	f9 f0       	breq	.+62     	; 0x888 <__stack+0x29>
     84a:	23 c0       	rjmp	.+70     	; 0x892 <__stack+0x33>
     84c:	8e e1       	ldi	r24, 0x1E	; 30
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	82 1b       	sub	r24, r18
     852:	93 0b       	sbc	r25, r19
     854:	29 85       	ldd	r18, Y+9	; 0x09
     856:	3a 85       	ldd	r19, Y+10	; 0x0a
     858:	4b 85       	ldd	r20, Y+11	; 0x0b
     85a:	5c 85       	ldd	r21, Y+12	; 0x0c
     85c:	04 c0       	rjmp	.+8      	; 0x866 <__stack+0x7>
     85e:	56 95       	lsr	r21
     860:	47 95       	ror	r20
     862:	37 95       	ror	r19
     864:	27 95       	ror	r18
     866:	8a 95       	dec	r24
     868:	d2 f7       	brpl	.-12     	; 0x85e <__fixsfsi+0x60>
     86a:	66 23       	and	r22, r22
     86c:	b1 f0       	breq	.+44     	; 0x89a <__stack+0x3b>
     86e:	50 95       	com	r21
     870:	40 95       	com	r20
     872:	30 95       	com	r19
     874:	21 95       	neg	r18
     876:	3f 4f       	sbci	r19, 0xFF	; 255
     878:	4f 4f       	sbci	r20, 0xFF	; 255
     87a:	5f 4f       	sbci	r21, 0xFF	; 255
     87c:	0e c0       	rjmp	.+28     	; 0x89a <__stack+0x3b>
     87e:	20 e0       	ldi	r18, 0x00	; 0
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	40 e0       	ldi	r20, 0x00	; 0
     884:	50 e0       	ldi	r21, 0x00	; 0
     886:	09 c0       	rjmp	.+18     	; 0x89a <__stack+0x3b>
     888:	2f ef       	ldi	r18, 0xFF	; 255
     88a:	3f ef       	ldi	r19, 0xFF	; 255
     88c:	4f ef       	ldi	r20, 0xFF	; 255
     88e:	5f e7       	ldi	r21, 0x7F	; 127
     890:	04 c0       	rjmp	.+8      	; 0x89a <__stack+0x3b>
     892:	20 e0       	ldi	r18, 0x00	; 0
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	40 e0       	ldi	r20, 0x00	; 0
     898:	50 e8       	ldi	r21, 0x80	; 128
     89a:	b9 01       	movw	r22, r18
     89c:	ca 01       	movw	r24, r20
     89e:	2c 96       	adiw	r28, 0x0c	; 12
     8a0:	e2 e0       	ldi	r30, 0x02	; 2
     8a2:	0c 94 4e 13 	jmp	0x269c	; 0x269c <__epilogue_restores__+0x20>

000008a6 <__floatunsisf>:
     8a6:	a8 e0       	ldi	r26, 0x08	; 8
     8a8:	b0 e0       	ldi	r27, 0x00	; 0
     8aa:	e9 e5       	ldi	r30, 0x59	; 89
     8ac:	f4 e0       	ldi	r31, 0x04	; 4
     8ae:	0c 94 2a 13 	jmp	0x2654	; 0x2654 <__prologue_saves__+0x10>
     8b2:	7b 01       	movw	r14, r22
     8b4:	8c 01       	movw	r16, r24
     8b6:	61 15       	cp	r22, r1
     8b8:	71 05       	cpc	r23, r1
     8ba:	81 05       	cpc	r24, r1
     8bc:	91 05       	cpc	r25, r1
     8be:	19 f4       	brne	.+6      	; 0x8c6 <__floatunsisf+0x20>
     8c0:	82 e0       	ldi	r24, 0x02	; 2
     8c2:	89 83       	std	Y+1, r24	; 0x01
     8c4:	60 c0       	rjmp	.+192    	; 0x986 <__floatunsisf+0xe0>
     8c6:	83 e0       	ldi	r24, 0x03	; 3
     8c8:	89 83       	std	Y+1, r24	; 0x01
     8ca:	8e e1       	ldi	r24, 0x1E	; 30
     8cc:	c8 2e       	mov	r12, r24
     8ce:	d1 2c       	mov	r13, r1
     8d0:	dc 82       	std	Y+4, r13	; 0x04
     8d2:	cb 82       	std	Y+3, r12	; 0x03
     8d4:	ed 82       	std	Y+5, r14	; 0x05
     8d6:	fe 82       	std	Y+6, r15	; 0x06
     8d8:	0f 83       	std	Y+7, r16	; 0x07
     8da:	18 87       	std	Y+8, r17	; 0x08
     8dc:	c8 01       	movw	r24, r16
     8de:	b7 01       	movw	r22, r14
     8e0:	0e 94 cc 04 	call	0x998	; 0x998 <__clzsi2>
     8e4:	fc 01       	movw	r30, r24
     8e6:	31 97       	sbiw	r30, 0x01	; 1
     8e8:	f7 ff       	sbrs	r31, 7
     8ea:	3b c0       	rjmp	.+118    	; 0x962 <__floatunsisf+0xbc>
     8ec:	22 27       	eor	r18, r18
     8ee:	33 27       	eor	r19, r19
     8f0:	2e 1b       	sub	r18, r30
     8f2:	3f 0b       	sbc	r19, r31
     8f4:	57 01       	movw	r10, r14
     8f6:	68 01       	movw	r12, r16
     8f8:	02 2e       	mov	r0, r18
     8fa:	04 c0       	rjmp	.+8      	; 0x904 <__floatunsisf+0x5e>
     8fc:	d6 94       	lsr	r13
     8fe:	c7 94       	ror	r12
     900:	b7 94       	ror	r11
     902:	a7 94       	ror	r10
     904:	0a 94       	dec	r0
     906:	d2 f7       	brpl	.-12     	; 0x8fc <__floatunsisf+0x56>
     908:	40 e0       	ldi	r20, 0x00	; 0
     90a:	50 e0       	ldi	r21, 0x00	; 0
     90c:	60 e0       	ldi	r22, 0x00	; 0
     90e:	70 e0       	ldi	r23, 0x00	; 0
     910:	81 e0       	ldi	r24, 0x01	; 1
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	a0 e0       	ldi	r26, 0x00	; 0
     916:	b0 e0       	ldi	r27, 0x00	; 0
     918:	04 c0       	rjmp	.+8      	; 0x922 <__floatunsisf+0x7c>
     91a:	88 0f       	add	r24, r24
     91c:	99 1f       	adc	r25, r25
     91e:	aa 1f       	adc	r26, r26
     920:	bb 1f       	adc	r27, r27
     922:	2a 95       	dec	r18
     924:	d2 f7       	brpl	.-12     	; 0x91a <__floatunsisf+0x74>
     926:	01 97       	sbiw	r24, 0x01	; 1
     928:	a1 09       	sbc	r26, r1
     92a:	b1 09       	sbc	r27, r1
     92c:	8e 21       	and	r24, r14
     92e:	9f 21       	and	r25, r15
     930:	a0 23       	and	r26, r16
     932:	b1 23       	and	r27, r17
     934:	00 97       	sbiw	r24, 0x00	; 0
     936:	a1 05       	cpc	r26, r1
     938:	b1 05       	cpc	r27, r1
     93a:	21 f0       	breq	.+8      	; 0x944 <__floatunsisf+0x9e>
     93c:	41 e0       	ldi	r20, 0x01	; 1
     93e:	50 e0       	ldi	r21, 0x00	; 0
     940:	60 e0       	ldi	r22, 0x00	; 0
     942:	70 e0       	ldi	r23, 0x00	; 0
     944:	4a 29       	or	r20, r10
     946:	5b 29       	or	r21, r11
     948:	6c 29       	or	r22, r12
     94a:	7d 29       	or	r23, r13
     94c:	4d 83       	std	Y+5, r20	; 0x05
     94e:	5e 83       	std	Y+6, r21	; 0x06
     950:	6f 83       	std	Y+7, r22	; 0x07
     952:	78 87       	std	Y+8, r23	; 0x08
     954:	8e e1       	ldi	r24, 0x1E	; 30
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	8e 1b       	sub	r24, r30
     95a:	9f 0b       	sbc	r25, r31
     95c:	9c 83       	std	Y+4, r25	; 0x04
     95e:	8b 83       	std	Y+3, r24	; 0x03
     960:	12 c0       	rjmp	.+36     	; 0x986 <__floatunsisf+0xe0>
     962:	30 97       	sbiw	r30, 0x00	; 0
     964:	81 f0       	breq	.+32     	; 0x986 <__floatunsisf+0xe0>
     966:	0e 2e       	mov	r0, r30
     968:	04 c0       	rjmp	.+8      	; 0x972 <__floatunsisf+0xcc>
     96a:	ee 0c       	add	r14, r14
     96c:	ff 1c       	adc	r15, r15
     96e:	00 1f       	adc	r16, r16
     970:	11 1f       	adc	r17, r17
     972:	0a 94       	dec	r0
     974:	d2 f7       	brpl	.-12     	; 0x96a <__floatunsisf+0xc4>
     976:	ed 82       	std	Y+5, r14	; 0x05
     978:	fe 82       	std	Y+6, r15	; 0x06
     97a:	0f 83       	std	Y+7, r16	; 0x07
     97c:	18 87       	std	Y+8, r17	; 0x08
     97e:	ce 1a       	sub	r12, r30
     980:	df 0a       	sbc	r13, r31
     982:	dc 82       	std	Y+4, r13	; 0x04
     984:	cb 82       	std	Y+3, r12	; 0x03
     986:	1a 82       	std	Y+2, r1	; 0x02
     988:	ce 01       	movw	r24, r28
     98a:	01 96       	adiw	r24, 0x01	; 1
     98c:	0e 94 1b 05 	call	0xa36	; 0xa36 <__pack_f>
     990:	28 96       	adiw	r28, 0x08	; 8
     992:	ea e0       	ldi	r30, 0x0A	; 10
     994:	0c 94 46 13 	jmp	0x268c	; 0x268c <__epilogue_restores__+0x10>

00000998 <__clzsi2>:
     998:	ef 92       	push	r14
     99a:	ff 92       	push	r15
     99c:	0f 93       	push	r16
     99e:	1f 93       	push	r17
     9a0:	7b 01       	movw	r14, r22
     9a2:	8c 01       	movw	r16, r24
     9a4:	80 e0       	ldi	r24, 0x00	; 0
     9a6:	e8 16       	cp	r14, r24
     9a8:	80 e0       	ldi	r24, 0x00	; 0
     9aa:	f8 06       	cpc	r15, r24
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	08 07       	cpc	r16, r24
     9b0:	80 e0       	ldi	r24, 0x00	; 0
     9b2:	18 07       	cpc	r17, r24
     9b4:	88 f4       	brcc	.+34     	; 0x9d8 <__clzsi2+0x40>
     9b6:	8f ef       	ldi	r24, 0xFF	; 255
     9b8:	e8 16       	cp	r14, r24
     9ba:	f1 04       	cpc	r15, r1
     9bc:	01 05       	cpc	r16, r1
     9be:	11 05       	cpc	r17, r1
     9c0:	31 f0       	breq	.+12     	; 0x9ce <__clzsi2+0x36>
     9c2:	28 f0       	brcs	.+10     	; 0x9ce <__clzsi2+0x36>
     9c4:	88 e0       	ldi	r24, 0x08	; 8
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	a0 e0       	ldi	r26, 0x00	; 0
     9ca:	b0 e0       	ldi	r27, 0x00	; 0
     9cc:	17 c0       	rjmp	.+46     	; 0x9fc <__clzsi2+0x64>
     9ce:	80 e0       	ldi	r24, 0x00	; 0
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	a0 e0       	ldi	r26, 0x00	; 0
     9d4:	b0 e0       	ldi	r27, 0x00	; 0
     9d6:	12 c0       	rjmp	.+36     	; 0x9fc <__clzsi2+0x64>
     9d8:	80 e0       	ldi	r24, 0x00	; 0
     9da:	e8 16       	cp	r14, r24
     9dc:	80 e0       	ldi	r24, 0x00	; 0
     9de:	f8 06       	cpc	r15, r24
     9e0:	80 e0       	ldi	r24, 0x00	; 0
     9e2:	08 07       	cpc	r16, r24
     9e4:	81 e0       	ldi	r24, 0x01	; 1
     9e6:	18 07       	cpc	r17, r24
     9e8:	28 f0       	brcs	.+10     	; 0x9f4 <__clzsi2+0x5c>
     9ea:	88 e1       	ldi	r24, 0x18	; 24
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	a0 e0       	ldi	r26, 0x00	; 0
     9f0:	b0 e0       	ldi	r27, 0x00	; 0
     9f2:	04 c0       	rjmp	.+8      	; 0x9fc <__clzsi2+0x64>
     9f4:	80 e1       	ldi	r24, 0x10	; 16
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	a0 e0       	ldi	r26, 0x00	; 0
     9fa:	b0 e0       	ldi	r27, 0x00	; 0
     9fc:	20 e2       	ldi	r18, 0x20	; 32
     9fe:	30 e0       	ldi	r19, 0x00	; 0
     a00:	40 e0       	ldi	r20, 0x00	; 0
     a02:	50 e0       	ldi	r21, 0x00	; 0
     a04:	28 1b       	sub	r18, r24
     a06:	39 0b       	sbc	r19, r25
     a08:	4a 0b       	sbc	r20, r26
     a0a:	5b 0b       	sbc	r21, r27
     a0c:	04 c0       	rjmp	.+8      	; 0xa16 <__clzsi2+0x7e>
     a0e:	16 95       	lsr	r17
     a10:	07 95       	ror	r16
     a12:	f7 94       	ror	r15
     a14:	e7 94       	ror	r14
     a16:	8a 95       	dec	r24
     a18:	d2 f7       	brpl	.-12     	; 0xa0e <__clzsi2+0x76>
     a1a:	f7 01       	movw	r30, r14
     a1c:	e5 59       	subi	r30, 0x95	; 149
     a1e:	ff 4f       	sbci	r31, 0xFF	; 255
     a20:	80 81       	ld	r24, Z
     a22:	28 1b       	sub	r18, r24
     a24:	31 09       	sbc	r19, r1
     a26:	41 09       	sbc	r20, r1
     a28:	51 09       	sbc	r21, r1
     a2a:	c9 01       	movw	r24, r18
     a2c:	1f 91       	pop	r17
     a2e:	0f 91       	pop	r16
     a30:	ff 90       	pop	r15
     a32:	ef 90       	pop	r14
     a34:	08 95       	ret

00000a36 <__pack_f>:
     a36:	df 92       	push	r13
     a38:	ef 92       	push	r14
     a3a:	ff 92       	push	r15
     a3c:	0f 93       	push	r16
     a3e:	1f 93       	push	r17
     a40:	fc 01       	movw	r30, r24
     a42:	e4 80       	ldd	r14, Z+4	; 0x04
     a44:	f5 80       	ldd	r15, Z+5	; 0x05
     a46:	06 81       	ldd	r16, Z+6	; 0x06
     a48:	17 81       	ldd	r17, Z+7	; 0x07
     a4a:	d1 80       	ldd	r13, Z+1	; 0x01
     a4c:	80 81       	ld	r24, Z
     a4e:	82 30       	cpi	r24, 0x02	; 2
     a50:	48 f4       	brcc	.+18     	; 0xa64 <__pack_f+0x2e>
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	a0 e1       	ldi	r26, 0x10	; 16
     a58:	b0 e0       	ldi	r27, 0x00	; 0
     a5a:	e8 2a       	or	r14, r24
     a5c:	f9 2a       	or	r15, r25
     a5e:	0a 2b       	or	r16, r26
     a60:	1b 2b       	or	r17, r27
     a62:	a5 c0       	rjmp	.+330    	; 0xbae <__pack_f+0x178>
     a64:	84 30       	cpi	r24, 0x04	; 4
     a66:	09 f4       	brne	.+2      	; 0xa6a <__pack_f+0x34>
     a68:	9f c0       	rjmp	.+318    	; 0xba8 <__pack_f+0x172>
     a6a:	82 30       	cpi	r24, 0x02	; 2
     a6c:	21 f4       	brne	.+8      	; 0xa76 <__pack_f+0x40>
     a6e:	ee 24       	eor	r14, r14
     a70:	ff 24       	eor	r15, r15
     a72:	87 01       	movw	r16, r14
     a74:	05 c0       	rjmp	.+10     	; 0xa80 <__pack_f+0x4a>
     a76:	e1 14       	cp	r14, r1
     a78:	f1 04       	cpc	r15, r1
     a7a:	01 05       	cpc	r16, r1
     a7c:	11 05       	cpc	r17, r1
     a7e:	19 f4       	brne	.+6      	; 0xa86 <__pack_f+0x50>
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	96 c0       	rjmp	.+300    	; 0xbb2 <__pack_f+0x17c>
     a86:	62 81       	ldd	r22, Z+2	; 0x02
     a88:	73 81       	ldd	r23, Z+3	; 0x03
     a8a:	9f ef       	ldi	r25, 0xFF	; 255
     a8c:	62 38       	cpi	r22, 0x82	; 130
     a8e:	79 07       	cpc	r23, r25
     a90:	0c f0       	brlt	.+2      	; 0xa94 <__pack_f+0x5e>
     a92:	5b c0       	rjmp	.+182    	; 0xb4a <__pack_f+0x114>
     a94:	22 e8       	ldi	r18, 0x82	; 130
     a96:	3f ef       	ldi	r19, 0xFF	; 255
     a98:	26 1b       	sub	r18, r22
     a9a:	37 0b       	sbc	r19, r23
     a9c:	2a 31       	cpi	r18, 0x1A	; 26
     a9e:	31 05       	cpc	r19, r1
     aa0:	2c f0       	brlt	.+10     	; 0xaac <__pack_f+0x76>
     aa2:	20 e0       	ldi	r18, 0x00	; 0
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	40 e0       	ldi	r20, 0x00	; 0
     aa8:	50 e0       	ldi	r21, 0x00	; 0
     aaa:	2a c0       	rjmp	.+84     	; 0xb00 <__pack_f+0xca>
     aac:	b8 01       	movw	r22, r16
     aae:	a7 01       	movw	r20, r14
     ab0:	02 2e       	mov	r0, r18
     ab2:	04 c0       	rjmp	.+8      	; 0xabc <__pack_f+0x86>
     ab4:	76 95       	lsr	r23
     ab6:	67 95       	ror	r22
     ab8:	57 95       	ror	r21
     aba:	47 95       	ror	r20
     abc:	0a 94       	dec	r0
     abe:	d2 f7       	brpl	.-12     	; 0xab4 <__pack_f+0x7e>
     ac0:	81 e0       	ldi	r24, 0x01	; 1
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	a0 e0       	ldi	r26, 0x00	; 0
     ac6:	b0 e0       	ldi	r27, 0x00	; 0
     ac8:	04 c0       	rjmp	.+8      	; 0xad2 <__pack_f+0x9c>
     aca:	88 0f       	add	r24, r24
     acc:	99 1f       	adc	r25, r25
     ace:	aa 1f       	adc	r26, r26
     ad0:	bb 1f       	adc	r27, r27
     ad2:	2a 95       	dec	r18
     ad4:	d2 f7       	brpl	.-12     	; 0xaca <__pack_f+0x94>
     ad6:	01 97       	sbiw	r24, 0x01	; 1
     ad8:	a1 09       	sbc	r26, r1
     ada:	b1 09       	sbc	r27, r1
     adc:	8e 21       	and	r24, r14
     ade:	9f 21       	and	r25, r15
     ae0:	a0 23       	and	r26, r16
     ae2:	b1 23       	and	r27, r17
     ae4:	00 97       	sbiw	r24, 0x00	; 0
     ae6:	a1 05       	cpc	r26, r1
     ae8:	b1 05       	cpc	r27, r1
     aea:	21 f0       	breq	.+8      	; 0xaf4 <__pack_f+0xbe>
     aec:	81 e0       	ldi	r24, 0x01	; 1
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	a0 e0       	ldi	r26, 0x00	; 0
     af2:	b0 e0       	ldi	r27, 0x00	; 0
     af4:	9a 01       	movw	r18, r20
     af6:	ab 01       	movw	r20, r22
     af8:	28 2b       	or	r18, r24
     afa:	39 2b       	or	r19, r25
     afc:	4a 2b       	or	r20, r26
     afe:	5b 2b       	or	r21, r27
     b00:	da 01       	movw	r26, r20
     b02:	c9 01       	movw	r24, r18
     b04:	8f 77       	andi	r24, 0x7F	; 127
     b06:	90 70       	andi	r25, 0x00	; 0
     b08:	a0 70       	andi	r26, 0x00	; 0
     b0a:	b0 70       	andi	r27, 0x00	; 0
     b0c:	80 34       	cpi	r24, 0x40	; 64
     b0e:	91 05       	cpc	r25, r1
     b10:	a1 05       	cpc	r26, r1
     b12:	b1 05       	cpc	r27, r1
     b14:	39 f4       	brne	.+14     	; 0xb24 <__pack_f+0xee>
     b16:	27 ff       	sbrs	r18, 7
     b18:	09 c0       	rjmp	.+18     	; 0xb2c <__pack_f+0xf6>
     b1a:	20 5c       	subi	r18, 0xC0	; 192
     b1c:	3f 4f       	sbci	r19, 0xFF	; 255
     b1e:	4f 4f       	sbci	r20, 0xFF	; 255
     b20:	5f 4f       	sbci	r21, 0xFF	; 255
     b22:	04 c0       	rjmp	.+8      	; 0xb2c <__pack_f+0xf6>
     b24:	21 5c       	subi	r18, 0xC1	; 193
     b26:	3f 4f       	sbci	r19, 0xFF	; 255
     b28:	4f 4f       	sbci	r20, 0xFF	; 255
     b2a:	5f 4f       	sbci	r21, 0xFF	; 255
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	20 30       	cpi	r18, 0x00	; 0
     b32:	a0 e0       	ldi	r26, 0x00	; 0
     b34:	3a 07       	cpc	r19, r26
     b36:	a0 e0       	ldi	r26, 0x00	; 0
     b38:	4a 07       	cpc	r20, r26
     b3a:	a0 e4       	ldi	r26, 0x40	; 64
     b3c:	5a 07       	cpc	r21, r26
     b3e:	10 f0       	brcs	.+4      	; 0xb44 <__pack_f+0x10e>
     b40:	e1 e0       	ldi	r30, 0x01	; 1
     b42:	f0 e0       	ldi	r31, 0x00	; 0
     b44:	79 01       	movw	r14, r18
     b46:	8a 01       	movw	r16, r20
     b48:	27 c0       	rjmp	.+78     	; 0xb98 <__pack_f+0x162>
     b4a:	60 38       	cpi	r22, 0x80	; 128
     b4c:	71 05       	cpc	r23, r1
     b4e:	64 f5       	brge	.+88     	; 0xba8 <__pack_f+0x172>
     b50:	fb 01       	movw	r30, r22
     b52:	e1 58       	subi	r30, 0x81	; 129
     b54:	ff 4f       	sbci	r31, 0xFF	; 255
     b56:	d8 01       	movw	r26, r16
     b58:	c7 01       	movw	r24, r14
     b5a:	8f 77       	andi	r24, 0x7F	; 127
     b5c:	90 70       	andi	r25, 0x00	; 0
     b5e:	a0 70       	andi	r26, 0x00	; 0
     b60:	b0 70       	andi	r27, 0x00	; 0
     b62:	80 34       	cpi	r24, 0x40	; 64
     b64:	91 05       	cpc	r25, r1
     b66:	a1 05       	cpc	r26, r1
     b68:	b1 05       	cpc	r27, r1
     b6a:	39 f4       	brne	.+14     	; 0xb7a <__pack_f+0x144>
     b6c:	e7 fe       	sbrs	r14, 7
     b6e:	0d c0       	rjmp	.+26     	; 0xb8a <__pack_f+0x154>
     b70:	80 e4       	ldi	r24, 0x40	; 64
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	a0 e0       	ldi	r26, 0x00	; 0
     b76:	b0 e0       	ldi	r27, 0x00	; 0
     b78:	04 c0       	rjmp	.+8      	; 0xb82 <__pack_f+0x14c>
     b7a:	8f e3       	ldi	r24, 0x3F	; 63
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	a0 e0       	ldi	r26, 0x00	; 0
     b80:	b0 e0       	ldi	r27, 0x00	; 0
     b82:	e8 0e       	add	r14, r24
     b84:	f9 1e       	adc	r15, r25
     b86:	0a 1f       	adc	r16, r26
     b88:	1b 1f       	adc	r17, r27
     b8a:	17 ff       	sbrs	r17, 7
     b8c:	05 c0       	rjmp	.+10     	; 0xb98 <__pack_f+0x162>
     b8e:	16 95       	lsr	r17
     b90:	07 95       	ror	r16
     b92:	f7 94       	ror	r15
     b94:	e7 94       	ror	r14
     b96:	31 96       	adiw	r30, 0x01	; 1
     b98:	87 e0       	ldi	r24, 0x07	; 7
     b9a:	16 95       	lsr	r17
     b9c:	07 95       	ror	r16
     b9e:	f7 94       	ror	r15
     ba0:	e7 94       	ror	r14
     ba2:	8a 95       	dec	r24
     ba4:	d1 f7       	brne	.-12     	; 0xb9a <__pack_f+0x164>
     ba6:	05 c0       	rjmp	.+10     	; 0xbb2 <__pack_f+0x17c>
     ba8:	ee 24       	eor	r14, r14
     baa:	ff 24       	eor	r15, r15
     bac:	87 01       	movw	r16, r14
     bae:	ef ef       	ldi	r30, 0xFF	; 255
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	6e 2f       	mov	r22, r30
     bb4:	67 95       	ror	r22
     bb6:	66 27       	eor	r22, r22
     bb8:	67 95       	ror	r22
     bba:	90 2f       	mov	r25, r16
     bbc:	9f 77       	andi	r25, 0x7F	; 127
     bbe:	d7 94       	ror	r13
     bc0:	dd 24       	eor	r13, r13
     bc2:	d7 94       	ror	r13
     bc4:	8e 2f       	mov	r24, r30
     bc6:	86 95       	lsr	r24
     bc8:	49 2f       	mov	r20, r25
     bca:	46 2b       	or	r20, r22
     bcc:	58 2f       	mov	r21, r24
     bce:	5d 29       	or	r21, r13
     bd0:	b7 01       	movw	r22, r14
     bd2:	ca 01       	movw	r24, r20
     bd4:	1f 91       	pop	r17
     bd6:	0f 91       	pop	r16
     bd8:	ff 90       	pop	r15
     bda:	ef 90       	pop	r14
     bdc:	df 90       	pop	r13
     bde:	08 95       	ret

00000be0 <__unpack_f>:
     be0:	fc 01       	movw	r30, r24
     be2:	db 01       	movw	r26, r22
     be4:	40 81       	ld	r20, Z
     be6:	51 81       	ldd	r21, Z+1	; 0x01
     be8:	22 81       	ldd	r18, Z+2	; 0x02
     bea:	62 2f       	mov	r22, r18
     bec:	6f 77       	andi	r22, 0x7F	; 127
     bee:	70 e0       	ldi	r23, 0x00	; 0
     bf0:	22 1f       	adc	r18, r18
     bf2:	22 27       	eor	r18, r18
     bf4:	22 1f       	adc	r18, r18
     bf6:	93 81       	ldd	r25, Z+3	; 0x03
     bf8:	89 2f       	mov	r24, r25
     bfa:	88 0f       	add	r24, r24
     bfc:	82 2b       	or	r24, r18
     bfe:	28 2f       	mov	r18, r24
     c00:	30 e0       	ldi	r19, 0x00	; 0
     c02:	99 1f       	adc	r25, r25
     c04:	99 27       	eor	r25, r25
     c06:	99 1f       	adc	r25, r25
     c08:	11 96       	adiw	r26, 0x01	; 1
     c0a:	9c 93       	st	X, r25
     c0c:	11 97       	sbiw	r26, 0x01	; 1
     c0e:	21 15       	cp	r18, r1
     c10:	31 05       	cpc	r19, r1
     c12:	a9 f5       	brne	.+106    	; 0xc7e <__unpack_f+0x9e>
     c14:	41 15       	cp	r20, r1
     c16:	51 05       	cpc	r21, r1
     c18:	61 05       	cpc	r22, r1
     c1a:	71 05       	cpc	r23, r1
     c1c:	11 f4       	brne	.+4      	; 0xc22 <__unpack_f+0x42>
     c1e:	82 e0       	ldi	r24, 0x02	; 2
     c20:	37 c0       	rjmp	.+110    	; 0xc90 <__unpack_f+0xb0>
     c22:	82 e8       	ldi	r24, 0x82	; 130
     c24:	9f ef       	ldi	r25, 0xFF	; 255
     c26:	13 96       	adiw	r26, 0x03	; 3
     c28:	9c 93       	st	X, r25
     c2a:	8e 93       	st	-X, r24
     c2c:	12 97       	sbiw	r26, 0x02	; 2
     c2e:	9a 01       	movw	r18, r20
     c30:	ab 01       	movw	r20, r22
     c32:	67 e0       	ldi	r22, 0x07	; 7
     c34:	22 0f       	add	r18, r18
     c36:	33 1f       	adc	r19, r19
     c38:	44 1f       	adc	r20, r20
     c3a:	55 1f       	adc	r21, r21
     c3c:	6a 95       	dec	r22
     c3e:	d1 f7       	brne	.-12     	; 0xc34 <__unpack_f+0x54>
     c40:	83 e0       	ldi	r24, 0x03	; 3
     c42:	8c 93       	st	X, r24
     c44:	0d c0       	rjmp	.+26     	; 0xc60 <__unpack_f+0x80>
     c46:	22 0f       	add	r18, r18
     c48:	33 1f       	adc	r19, r19
     c4a:	44 1f       	adc	r20, r20
     c4c:	55 1f       	adc	r21, r21
     c4e:	12 96       	adiw	r26, 0x02	; 2
     c50:	8d 91       	ld	r24, X+
     c52:	9c 91       	ld	r25, X
     c54:	13 97       	sbiw	r26, 0x03	; 3
     c56:	01 97       	sbiw	r24, 0x01	; 1
     c58:	13 96       	adiw	r26, 0x03	; 3
     c5a:	9c 93       	st	X, r25
     c5c:	8e 93       	st	-X, r24
     c5e:	12 97       	sbiw	r26, 0x02	; 2
     c60:	20 30       	cpi	r18, 0x00	; 0
     c62:	80 e0       	ldi	r24, 0x00	; 0
     c64:	38 07       	cpc	r19, r24
     c66:	80 e0       	ldi	r24, 0x00	; 0
     c68:	48 07       	cpc	r20, r24
     c6a:	80 e4       	ldi	r24, 0x40	; 64
     c6c:	58 07       	cpc	r21, r24
     c6e:	58 f3       	brcs	.-42     	; 0xc46 <__unpack_f+0x66>
     c70:	14 96       	adiw	r26, 0x04	; 4
     c72:	2d 93       	st	X+, r18
     c74:	3d 93       	st	X+, r19
     c76:	4d 93       	st	X+, r20
     c78:	5c 93       	st	X, r21
     c7a:	17 97       	sbiw	r26, 0x07	; 7
     c7c:	08 95       	ret
     c7e:	2f 3f       	cpi	r18, 0xFF	; 255
     c80:	31 05       	cpc	r19, r1
     c82:	79 f4       	brne	.+30     	; 0xca2 <__unpack_f+0xc2>
     c84:	41 15       	cp	r20, r1
     c86:	51 05       	cpc	r21, r1
     c88:	61 05       	cpc	r22, r1
     c8a:	71 05       	cpc	r23, r1
     c8c:	19 f4       	brne	.+6      	; 0xc94 <__unpack_f+0xb4>
     c8e:	84 e0       	ldi	r24, 0x04	; 4
     c90:	8c 93       	st	X, r24
     c92:	08 95       	ret
     c94:	64 ff       	sbrs	r22, 4
     c96:	03 c0       	rjmp	.+6      	; 0xc9e <__unpack_f+0xbe>
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	8c 93       	st	X, r24
     c9c:	12 c0       	rjmp	.+36     	; 0xcc2 <__unpack_f+0xe2>
     c9e:	1c 92       	st	X, r1
     ca0:	10 c0       	rjmp	.+32     	; 0xcc2 <__unpack_f+0xe2>
     ca2:	2f 57       	subi	r18, 0x7F	; 127
     ca4:	30 40       	sbci	r19, 0x00	; 0
     ca6:	13 96       	adiw	r26, 0x03	; 3
     ca8:	3c 93       	st	X, r19
     caa:	2e 93       	st	-X, r18
     cac:	12 97       	sbiw	r26, 0x02	; 2
     cae:	83 e0       	ldi	r24, 0x03	; 3
     cb0:	8c 93       	st	X, r24
     cb2:	87 e0       	ldi	r24, 0x07	; 7
     cb4:	44 0f       	add	r20, r20
     cb6:	55 1f       	adc	r21, r21
     cb8:	66 1f       	adc	r22, r22
     cba:	77 1f       	adc	r23, r23
     cbc:	8a 95       	dec	r24
     cbe:	d1 f7       	brne	.-12     	; 0xcb4 <__unpack_f+0xd4>
     cc0:	70 64       	ori	r23, 0x40	; 64
     cc2:	14 96       	adiw	r26, 0x04	; 4
     cc4:	4d 93       	st	X+, r20
     cc6:	5d 93       	st	X+, r21
     cc8:	6d 93       	st	X+, r22
     cca:	7c 93       	st	X, r23
     ccc:	17 97       	sbiw	r26, 0x07	; 7
     cce:	08 95       	ret

00000cd0 <__fpcmp_parts_f>:
     cd0:	1f 93       	push	r17
     cd2:	dc 01       	movw	r26, r24
     cd4:	fb 01       	movw	r30, r22
     cd6:	9c 91       	ld	r25, X
     cd8:	92 30       	cpi	r25, 0x02	; 2
     cda:	08 f4       	brcc	.+2      	; 0xcde <__fpcmp_parts_f+0xe>
     cdc:	47 c0       	rjmp	.+142    	; 0xd6c <__fpcmp_parts_f+0x9c>
     cde:	80 81       	ld	r24, Z
     ce0:	82 30       	cpi	r24, 0x02	; 2
     ce2:	08 f4       	brcc	.+2      	; 0xce6 <__fpcmp_parts_f+0x16>
     ce4:	43 c0       	rjmp	.+134    	; 0xd6c <__fpcmp_parts_f+0x9c>
     ce6:	94 30       	cpi	r25, 0x04	; 4
     ce8:	51 f4       	brne	.+20     	; 0xcfe <__fpcmp_parts_f+0x2e>
     cea:	11 96       	adiw	r26, 0x01	; 1
     cec:	1c 91       	ld	r17, X
     cee:	84 30       	cpi	r24, 0x04	; 4
     cf0:	99 f5       	brne	.+102    	; 0xd58 <__fpcmp_parts_f+0x88>
     cf2:	81 81       	ldd	r24, Z+1	; 0x01
     cf4:	68 2f       	mov	r22, r24
     cf6:	70 e0       	ldi	r23, 0x00	; 0
     cf8:	61 1b       	sub	r22, r17
     cfa:	71 09       	sbc	r23, r1
     cfc:	3f c0       	rjmp	.+126    	; 0xd7c <__fpcmp_parts_f+0xac>
     cfe:	84 30       	cpi	r24, 0x04	; 4
     d00:	21 f0       	breq	.+8      	; 0xd0a <__fpcmp_parts_f+0x3a>
     d02:	92 30       	cpi	r25, 0x02	; 2
     d04:	31 f4       	brne	.+12     	; 0xd12 <__fpcmp_parts_f+0x42>
     d06:	82 30       	cpi	r24, 0x02	; 2
     d08:	b9 f1       	breq	.+110    	; 0xd78 <__fpcmp_parts_f+0xa8>
     d0a:	81 81       	ldd	r24, Z+1	; 0x01
     d0c:	88 23       	and	r24, r24
     d0e:	89 f1       	breq	.+98     	; 0xd72 <__fpcmp_parts_f+0xa2>
     d10:	2d c0       	rjmp	.+90     	; 0xd6c <__fpcmp_parts_f+0x9c>
     d12:	11 96       	adiw	r26, 0x01	; 1
     d14:	1c 91       	ld	r17, X
     d16:	11 97       	sbiw	r26, 0x01	; 1
     d18:	82 30       	cpi	r24, 0x02	; 2
     d1a:	f1 f0       	breq	.+60     	; 0xd58 <__fpcmp_parts_f+0x88>
     d1c:	81 81       	ldd	r24, Z+1	; 0x01
     d1e:	18 17       	cp	r17, r24
     d20:	d9 f4       	brne	.+54     	; 0xd58 <__fpcmp_parts_f+0x88>
     d22:	12 96       	adiw	r26, 0x02	; 2
     d24:	2d 91       	ld	r18, X+
     d26:	3c 91       	ld	r19, X
     d28:	13 97       	sbiw	r26, 0x03	; 3
     d2a:	82 81       	ldd	r24, Z+2	; 0x02
     d2c:	93 81       	ldd	r25, Z+3	; 0x03
     d2e:	82 17       	cp	r24, r18
     d30:	93 07       	cpc	r25, r19
     d32:	94 f0       	brlt	.+36     	; 0xd58 <__fpcmp_parts_f+0x88>
     d34:	28 17       	cp	r18, r24
     d36:	39 07       	cpc	r19, r25
     d38:	bc f0       	brlt	.+46     	; 0xd68 <__fpcmp_parts_f+0x98>
     d3a:	14 96       	adiw	r26, 0x04	; 4
     d3c:	8d 91       	ld	r24, X+
     d3e:	9d 91       	ld	r25, X+
     d40:	0d 90       	ld	r0, X+
     d42:	bc 91       	ld	r27, X
     d44:	a0 2d       	mov	r26, r0
     d46:	24 81       	ldd	r18, Z+4	; 0x04
     d48:	35 81       	ldd	r19, Z+5	; 0x05
     d4a:	46 81       	ldd	r20, Z+6	; 0x06
     d4c:	57 81       	ldd	r21, Z+7	; 0x07
     d4e:	28 17       	cp	r18, r24
     d50:	39 07       	cpc	r19, r25
     d52:	4a 07       	cpc	r20, r26
     d54:	5b 07       	cpc	r21, r27
     d56:	18 f4       	brcc	.+6      	; 0xd5e <__fpcmp_parts_f+0x8e>
     d58:	11 23       	and	r17, r17
     d5a:	41 f0       	breq	.+16     	; 0xd6c <__fpcmp_parts_f+0x9c>
     d5c:	0a c0       	rjmp	.+20     	; 0xd72 <__fpcmp_parts_f+0xa2>
     d5e:	82 17       	cp	r24, r18
     d60:	93 07       	cpc	r25, r19
     d62:	a4 07       	cpc	r26, r20
     d64:	b5 07       	cpc	r27, r21
     d66:	40 f4       	brcc	.+16     	; 0xd78 <__fpcmp_parts_f+0xa8>
     d68:	11 23       	and	r17, r17
     d6a:	19 f0       	breq	.+6      	; 0xd72 <__fpcmp_parts_f+0xa2>
     d6c:	61 e0       	ldi	r22, 0x01	; 1
     d6e:	70 e0       	ldi	r23, 0x00	; 0
     d70:	05 c0       	rjmp	.+10     	; 0xd7c <__fpcmp_parts_f+0xac>
     d72:	6f ef       	ldi	r22, 0xFF	; 255
     d74:	7f ef       	ldi	r23, 0xFF	; 255
     d76:	02 c0       	rjmp	.+4      	; 0xd7c <__fpcmp_parts_f+0xac>
     d78:	60 e0       	ldi	r22, 0x00	; 0
     d7a:	70 e0       	ldi	r23, 0x00	; 0
     d7c:	cb 01       	movw	r24, r22
     d7e:	1f 91       	pop	r17
     d80:	08 95       	ret

00000d82 <ADC_voidinit>:
#include "ADC_config.h"
#include "ADC_private.h"


void ADC_voidinit(u8 copy_u8Channel)
{
     d82:	df 93       	push	r29
     d84:	cf 93       	push	r28
     d86:	0f 92       	push	r0
     d88:	cd b7       	in	r28, 0x3d	; 61
     d8a:	de b7       	in	r29, 0x3e	; 62
     d8c:	89 83       	std	Y+1, r24	; 0x01
	//1- Make Channel selected I/p
	CLEAR_BIT(DDRA,copy_u8Channel);
     d8e:	aa e3       	ldi	r26, 0x3A	; 58
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	ea e3       	ldi	r30, 0x3A	; 58
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	80 81       	ld	r24, Z
     d98:	48 2f       	mov	r20, r24
     d9a:	89 81       	ldd	r24, Y+1	; 0x01
     d9c:	28 2f       	mov	r18, r24
     d9e:	30 e0       	ldi	r19, 0x00	; 0
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	02 2e       	mov	r0, r18
     da6:	02 c0       	rjmp	.+4      	; 0xdac <ADC_voidinit+0x2a>
     da8:	88 0f       	add	r24, r24
     daa:	99 1f       	adc	r25, r25
     dac:	0a 94       	dec	r0
     dae:	e2 f7       	brpl	.-8      	; 0xda8 <ADC_voidinit+0x26>
     db0:	80 95       	com	r24
     db2:	84 23       	and	r24, r20
     db4:	8c 93       	st	X, r24
		ADCSRA |= 0x04;
	#elif ADC_PRESCALER == 32
		ADCSRA &= 0xF8;
		ADCSRA |= 0x05;
	#elif ADC_PRESCALER == 64
		ADCSRA &= 0xF8;
     db6:	a6 e2       	ldi	r26, 0x26	; 38
     db8:	b0 e0       	ldi	r27, 0x00	; 0
     dba:	e6 e2       	ldi	r30, 0x26	; 38
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	80 81       	ld	r24, Z
     dc0:	88 7f       	andi	r24, 0xF8	; 248
     dc2:	8c 93       	st	X, r24
		ADCSRA |= 0x06;
     dc4:	a6 e2       	ldi	r26, 0x26	; 38
     dc6:	b0 e0       	ldi	r27, 0x00	; 0
     dc8:	e6 e2       	ldi	r30, 0x26	; 38
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	80 81       	ld	r24, Z
     dce:	86 60       	ori	r24, 0x06	; 6
     dd0:	8c 93       	st	X, r24
	#endif
	//3- Select Voltage reference for ADC 
	#if   ADC_VOLT_REF == 0
		ADMUX &= 0x3F;
	#elif ADC_VOLT_REF == 1
		CLEAR_BIT(ADMUX, REFS1);
     dd2:	a7 e2       	ldi	r26, 0x27	; 39
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	e7 e2       	ldi	r30, 0x27	; 39
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
     ddc:	8f 77       	andi	r24, 0x7F	; 127
     dde:	8c 93       	st	X, r24
		SET_BIT(ADMUX, REFS0);
     de0:	a7 e2       	ldi	r26, 0x27	; 39
     de2:	b0 e0       	ldi	r27, 0x00	; 0
     de4:	e7 e2       	ldi	r30, 0x27	; 39
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	80 81       	ld	r24, Z
     dea:	80 64       	ori	r24, 0x40	; 64
     dec:	8c 93       	st	X, r24
		SET_BIT(ADMUX, REFS0);
	#endif
	
	//4- Select Type of Storing of the output
	#if ADC_STORE == 0
		CLEAR_BIT(ADMUX, ADLAR);
     dee:	a7 e2       	ldi	r26, 0x27	; 39
     df0:	b0 e0       	ldi	r27, 0x00	; 0
     df2:	e7 e2       	ldi	r30, 0x27	; 39
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	80 81       	ld	r24, Z
     df8:	8f 7d       	andi	r24, 0xDF	; 223
     dfa:	8c 93       	st	X, r24
	#else 
		SET_BIT(ADMUX, ADLAR);
	#endif 
	
	//5- Turn on ADC
	SET_BIT(ADCSRA, ADEN);
     dfc:	a6 e2       	ldi	r26, 0x26	; 38
     dfe:	b0 e0       	ldi	r27, 0x00	; 0
     e00:	e6 e2       	ldi	r30, 0x26	; 38
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	80 81       	ld	r24, Z
     e06:	80 68       	ori	r24, 0x80	; 128
     e08:	8c 93       	st	X, r24
	
}
     e0a:	0f 90       	pop	r0
     e0c:	cf 91       	pop	r28
     e0e:	df 91       	pop	r29
     e10:	08 95       	ret

00000e12 <ADC_u16Read>:

u16  ADC_u16Read(void)
{
     e12:	df 93       	push	r29
     e14:	cf 93       	push	r28
     e16:	00 d0       	rcall	.+0      	; 0xe18 <ADC_u16Read+0x6>
     e18:	cd b7       	in	r28, 0x3d	; 61
     e1a:	de b7       	in	r29, 0x3e	; 62
	u16 Return_val;
	//1- Activate Start of Conversion
	SET_BIT(ADCSRA, ADSC);
     e1c:	a6 e2       	ldi	r26, 0x26	; 38
     e1e:	b0 e0       	ldi	r27, 0x00	; 0
     e20:	e6 e2       	ldi	r30, 0x26	; 38
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	80 81       	ld	r24, Z
     e26:	80 64       	ori	r24, 0x40	; 64
     e28:	8c 93       	st	X, r24
	//2- Wait until conversion Ended
	while(GET_BIT(ADCSRA, ADIF)==0);
     e2a:	e6 e2       	ldi	r30, 0x26	; 38
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	80 81       	ld	r24, Z
     e30:	88 2f       	mov	r24, r24
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	80 71       	andi	r24, 0x10	; 16
     e36:	90 70       	andi	r25, 0x00	; 0
     e38:	95 95       	asr	r25
     e3a:	87 95       	ror	r24
     e3c:	95 95       	asr	r25
     e3e:	87 95       	ror	r24
     e40:	95 95       	asr	r25
     e42:	87 95       	ror	r24
     e44:	95 95       	asr	r25
     e46:	87 95       	ror	r24
     e48:	00 97       	sbiw	r24, 0x00	; 0
     e4a:	79 f3       	breq	.-34     	; 0xe2a <ADC_u16Read+0x18>
	//3- Clear Interrupt Flag after Ended
	SET_BIT(ADCSRA, ADIF);
     e4c:	a6 e2       	ldi	r26, 0x26	; 38
     e4e:	b0 e0       	ldi	r27, 0x00	; 0
     e50:	e6 e2       	ldi	r30, 0x26	; 38
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	80 81       	ld	r24, Z
     e56:	80 61       	ori	r24, 0x10	; 16
     e58:	8c 93       	st	X, r24
	//4- Read ADCL then ADCH in order
	Return_val = ADCL;
     e5a:	e4 e2       	ldi	r30, 0x24	; 36
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	80 81       	ld	r24, Z
     e60:	88 2f       	mov	r24, r24
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	9a 83       	std	Y+2, r25	; 0x02
     e66:	89 83       	std	Y+1, r24	; 0x01
	Return_val |= (ADCH << 8);
     e68:	e5 e2       	ldi	r30, 0x25	; 37
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	88 2f       	mov	r24, r24
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	98 2f       	mov	r25, r24
     e74:	88 27       	eor	r24, r24
     e76:	9c 01       	movw	r18, r24
     e78:	89 81       	ldd	r24, Y+1	; 0x01
     e7a:	9a 81       	ldd	r25, Y+2	; 0x02
     e7c:	82 2b       	or	r24, r18
     e7e:	93 2b       	or	r25, r19
     e80:	9a 83       	std	Y+2, r25	; 0x02
     e82:	89 83       	std	Y+1, r24	; 0x01
	return Return_val;
     e84:	89 81       	ldd	r24, Y+1	; 0x01
     e86:	9a 81       	ldd	r25, Y+2	; 0x02
}
     e88:	0f 90       	pop	r0
     e8a:	0f 90       	pop	r0
     e8c:	cf 91       	pop	r28
     e8e:	df 91       	pop	r29
     e90:	08 95       	ret

00000e92 <GPIO_voidSetPinDDR>:




	void GPIO_voidSetPinDDR (u8  copy_u8Port ,u8 copy_u8Pin , u8 copy_u8Mode )
	{
     e92:	df 93       	push	r29
     e94:	cf 93       	push	r28
     e96:	00 d0       	rcall	.+0      	; 0xe98 <GPIO_voidSetPinDDR+0x6>
     e98:	00 d0       	rcall	.+0      	; 0xe9a <GPIO_voidSetPinDDR+0x8>
     e9a:	0f 92       	push	r0
     e9c:	cd b7       	in	r28, 0x3d	; 61
     e9e:	de b7       	in	r29, 0x3e	; 62
     ea0:	89 83       	std	Y+1, r24	; 0x01
     ea2:	6a 83       	std	Y+2, r22	; 0x02
     ea4:	4b 83       	std	Y+3, r20	; 0x03
		switch(copy_u8Port)
     ea6:	89 81       	ldd	r24, Y+1	; 0x01
     ea8:	28 2f       	mov	r18, r24
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	3d 83       	std	Y+5, r19	; 0x05
     eae:	2c 83       	std	Y+4, r18	; 0x04
     eb0:	8c 81       	ldd	r24, Y+4	; 0x04
     eb2:	9d 81       	ldd	r25, Y+5	; 0x05
     eb4:	81 30       	cpi	r24, 0x01	; 1
     eb6:	91 05       	cpc	r25, r1
     eb8:	09 f4       	brne	.+2      	; 0xebc <GPIO_voidSetPinDDR+0x2a>
     eba:	43 c0       	rjmp	.+134    	; 0xf42 <GPIO_voidSetPinDDR+0xb0>
     ebc:	2c 81       	ldd	r18, Y+4	; 0x04
     ebe:	3d 81       	ldd	r19, Y+5	; 0x05
     ec0:	22 30       	cpi	r18, 0x02	; 2
     ec2:	31 05       	cpc	r19, r1
     ec4:	2c f4       	brge	.+10     	; 0xed0 <GPIO_voidSetPinDDR+0x3e>
     ec6:	8c 81       	ldd	r24, Y+4	; 0x04
     ec8:	9d 81       	ldd	r25, Y+5	; 0x05
     eca:	00 97       	sbiw	r24, 0x00	; 0
     ecc:	71 f0       	breq	.+28     	; 0xeea <GPIO_voidSetPinDDR+0x58>
     ece:	bc c0       	rjmp	.+376    	; 0x1048 <GPIO_voidSetPinDDR+0x1b6>
     ed0:	2c 81       	ldd	r18, Y+4	; 0x04
     ed2:	3d 81       	ldd	r19, Y+5	; 0x05
     ed4:	22 30       	cpi	r18, 0x02	; 2
     ed6:	31 05       	cpc	r19, r1
     ed8:	09 f4       	brne	.+2      	; 0xedc <GPIO_voidSetPinDDR+0x4a>
     eda:	5f c0       	rjmp	.+190    	; 0xf9a <GPIO_voidSetPinDDR+0x108>
     edc:	8c 81       	ldd	r24, Y+4	; 0x04
     ede:	9d 81       	ldd	r25, Y+5	; 0x05
     ee0:	83 30       	cpi	r24, 0x03	; 3
     ee2:	91 05       	cpc	r25, r1
     ee4:	09 f4       	brne	.+2      	; 0xee8 <GPIO_voidSetPinDDR+0x56>
     ee6:	85 c0       	rjmp	.+266    	; 0xff2 <GPIO_voidSetPinDDR+0x160>
     ee8:	af c0       	rjmp	.+350    	; 0x1048 <GPIO_voidSetPinDDR+0x1b6>
		{
			case GPIOA :
				if(copy_u8Mode ==OUTPUT )
     eea:	8b 81       	ldd	r24, Y+3	; 0x03
     eec:	81 30       	cpi	r24, 0x01	; 1
     eee:	a1 f4       	brne	.+40     	; 0xf18 <GPIO_voidSetPinDDR+0x86>
				{
					SET_BIT(DDRA ,copy_u8Pin);
     ef0:	aa e3       	ldi	r26, 0x3A	; 58
     ef2:	b0 e0       	ldi	r27, 0x00	; 0
     ef4:	ea e3       	ldi	r30, 0x3A	; 58
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	48 2f       	mov	r20, r24
     efc:	8a 81       	ldd	r24, Y+2	; 0x02
     efe:	28 2f       	mov	r18, r24
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	02 2e       	mov	r0, r18
     f08:	02 c0       	rjmp	.+4      	; 0xf0e <GPIO_voidSetPinDDR+0x7c>
     f0a:	88 0f       	add	r24, r24
     f0c:	99 1f       	adc	r25, r25
     f0e:	0a 94       	dec	r0
     f10:	e2 f7       	brpl	.-8      	; 0xf0a <GPIO_voidSetPinDDR+0x78>
     f12:	84 2b       	or	r24, r20
     f14:	8c 93       	st	X, r24
     f16:	98 c0       	rjmp	.+304    	; 0x1048 <GPIO_voidSetPinDDR+0x1b6>
				}
				else {
					CLEAR_BIT(DDRA,copy_u8Pin);
     f18:	aa e3       	ldi	r26, 0x3A	; 58
     f1a:	b0 e0       	ldi	r27, 0x00	; 0
     f1c:	ea e3       	ldi	r30, 0x3A	; 58
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	80 81       	ld	r24, Z
     f22:	48 2f       	mov	r20, r24
     f24:	8a 81       	ldd	r24, Y+2	; 0x02
     f26:	28 2f       	mov	r18, r24
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	02 2e       	mov	r0, r18
     f30:	02 c0       	rjmp	.+4      	; 0xf36 <GPIO_voidSetPinDDR+0xa4>
     f32:	88 0f       	add	r24, r24
     f34:	99 1f       	adc	r25, r25
     f36:	0a 94       	dec	r0
     f38:	e2 f7       	brpl	.-8      	; 0xf32 <GPIO_voidSetPinDDR+0xa0>
     f3a:	80 95       	com	r24
     f3c:	84 23       	and	r24, r20
     f3e:	8c 93       	st	X, r24
     f40:	83 c0       	rjmp	.+262    	; 0x1048 <GPIO_voidSetPinDDR+0x1b6>
				}
				break;
			case GPIOB :
				if(copy_u8Mode ==OUTPUT )
     f42:	8b 81       	ldd	r24, Y+3	; 0x03
     f44:	81 30       	cpi	r24, 0x01	; 1
     f46:	a1 f4       	brne	.+40     	; 0xf70 <GPIO_voidSetPinDDR+0xde>
				{
					SET_BIT(DDRB ,copy_u8Pin);
     f48:	a7 e3       	ldi	r26, 0x37	; 55
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	e7 e3       	ldi	r30, 0x37	; 55
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	80 81       	ld	r24, Z
     f52:	48 2f       	mov	r20, r24
     f54:	8a 81       	ldd	r24, Y+2	; 0x02
     f56:	28 2f       	mov	r18, r24
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	02 2e       	mov	r0, r18
     f60:	02 c0       	rjmp	.+4      	; 0xf66 <GPIO_voidSetPinDDR+0xd4>
     f62:	88 0f       	add	r24, r24
     f64:	99 1f       	adc	r25, r25
     f66:	0a 94       	dec	r0
     f68:	e2 f7       	brpl	.-8      	; 0xf62 <GPIO_voidSetPinDDR+0xd0>
     f6a:	84 2b       	or	r24, r20
     f6c:	8c 93       	st	X, r24
     f6e:	6c c0       	rjmp	.+216    	; 0x1048 <GPIO_voidSetPinDDR+0x1b6>
				}
				else {
					CLEAR_BIT(DDRB,copy_u8Pin);
     f70:	a7 e3       	ldi	r26, 0x37	; 55
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	e7 e3       	ldi	r30, 0x37	; 55
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	48 2f       	mov	r20, r24
     f7c:	8a 81       	ldd	r24, Y+2	; 0x02
     f7e:	28 2f       	mov	r18, r24
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	02 2e       	mov	r0, r18
     f88:	02 c0       	rjmp	.+4      	; 0xf8e <GPIO_voidSetPinDDR+0xfc>
     f8a:	88 0f       	add	r24, r24
     f8c:	99 1f       	adc	r25, r25
     f8e:	0a 94       	dec	r0
     f90:	e2 f7       	brpl	.-8      	; 0xf8a <GPIO_voidSetPinDDR+0xf8>
     f92:	80 95       	com	r24
     f94:	84 23       	and	r24, r20
     f96:	8c 93       	st	X, r24
     f98:	57 c0       	rjmp	.+174    	; 0x1048 <GPIO_voidSetPinDDR+0x1b6>
				}
				break;
			case GPIOC :
				if(copy_u8Mode ==OUTPUT )
     f9a:	8b 81       	ldd	r24, Y+3	; 0x03
     f9c:	81 30       	cpi	r24, 0x01	; 1
     f9e:	a1 f4       	brne	.+40     	; 0xfc8 <GPIO_voidSetPinDDR+0x136>
				{
					SET_BIT(DDRC ,copy_u8Pin);
     fa0:	a4 e3       	ldi	r26, 0x34	; 52
     fa2:	b0 e0       	ldi	r27, 0x00	; 0
     fa4:	e4 e3       	ldi	r30, 0x34	; 52
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	48 2f       	mov	r20, r24
     fac:	8a 81       	ldd	r24, Y+2	; 0x02
     fae:	28 2f       	mov	r18, r24
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	02 2e       	mov	r0, r18
     fb8:	02 c0       	rjmp	.+4      	; 0xfbe <GPIO_voidSetPinDDR+0x12c>
     fba:	88 0f       	add	r24, r24
     fbc:	99 1f       	adc	r25, r25
     fbe:	0a 94       	dec	r0
     fc0:	e2 f7       	brpl	.-8      	; 0xfba <GPIO_voidSetPinDDR+0x128>
     fc2:	84 2b       	or	r24, r20
     fc4:	8c 93       	st	X, r24
     fc6:	40 c0       	rjmp	.+128    	; 0x1048 <GPIO_voidSetPinDDR+0x1b6>
				}
				else {
					CLEAR_BIT(DDRC,copy_u8Pin);
     fc8:	a4 e3       	ldi	r26, 0x34	; 52
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	e4 e3       	ldi	r30, 0x34	; 52
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	48 2f       	mov	r20, r24
     fd4:	8a 81       	ldd	r24, Y+2	; 0x02
     fd6:	28 2f       	mov	r18, r24
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	02 2e       	mov	r0, r18
     fe0:	02 c0       	rjmp	.+4      	; 0xfe6 <GPIO_voidSetPinDDR+0x154>
     fe2:	88 0f       	add	r24, r24
     fe4:	99 1f       	adc	r25, r25
     fe6:	0a 94       	dec	r0
     fe8:	e2 f7       	brpl	.-8      	; 0xfe2 <GPIO_voidSetPinDDR+0x150>
     fea:	80 95       	com	r24
     fec:	84 23       	and	r24, r20
     fee:	8c 93       	st	X, r24
     ff0:	2b c0       	rjmp	.+86     	; 0x1048 <GPIO_voidSetPinDDR+0x1b6>
				}
				break;
			case GPIOD :
				if(copy_u8Mode ==OUTPUT )
     ff2:	8b 81       	ldd	r24, Y+3	; 0x03
     ff4:	81 30       	cpi	r24, 0x01	; 1
     ff6:	a1 f4       	brne	.+40     	; 0x1020 <GPIO_voidSetPinDDR+0x18e>
				{
					SET_BIT(DDRD ,copy_u8Pin);
     ff8:	a1 e3       	ldi	r26, 0x31	; 49
     ffa:	b0 e0       	ldi	r27, 0x00	; 0
     ffc:	e1 e3       	ldi	r30, 0x31	; 49
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	48 2f       	mov	r20, r24
    1004:	8a 81       	ldd	r24, Y+2	; 0x02
    1006:	28 2f       	mov	r18, r24
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	02 2e       	mov	r0, r18
    1010:	02 c0       	rjmp	.+4      	; 0x1016 <GPIO_voidSetPinDDR+0x184>
    1012:	88 0f       	add	r24, r24
    1014:	99 1f       	adc	r25, r25
    1016:	0a 94       	dec	r0
    1018:	e2 f7       	brpl	.-8      	; 0x1012 <GPIO_voidSetPinDDR+0x180>
    101a:	84 2b       	or	r24, r20
    101c:	8c 93       	st	X, r24
    101e:	14 c0       	rjmp	.+40     	; 0x1048 <GPIO_voidSetPinDDR+0x1b6>
				}
				else {
					CLEAR_BIT(DDRD,copy_u8Pin);
    1020:	a1 e3       	ldi	r26, 0x31	; 49
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	e1 e3       	ldi	r30, 0x31	; 49
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	48 2f       	mov	r20, r24
    102c:	8a 81       	ldd	r24, Y+2	; 0x02
    102e:	28 2f       	mov	r18, r24
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	02 2e       	mov	r0, r18
    1038:	02 c0       	rjmp	.+4      	; 0x103e <GPIO_voidSetPinDDR+0x1ac>
    103a:	88 0f       	add	r24, r24
    103c:	99 1f       	adc	r25, r25
    103e:	0a 94       	dec	r0
    1040:	e2 f7       	brpl	.-8      	; 0x103a <GPIO_voidSetPinDDR+0x1a8>
    1042:	80 95       	com	r24
    1044:	84 23       	and	r24, r20
    1046:	8c 93       	st	X, r24
				}
				break;	
			default:
				break;
		}
	}
    1048:	0f 90       	pop	r0
    104a:	0f 90       	pop	r0
    104c:	0f 90       	pop	r0
    104e:	0f 90       	pop	r0
    1050:	0f 90       	pop	r0
    1052:	cf 91       	pop	r28
    1054:	df 91       	pop	r29
    1056:	08 95       	ret

00001058 <GPIO_voidWritePin>:
	
	void GPIO_voidWritePin (u8  copy_u8Port ,u8 copy_u8Pin , u8 copy_u8Value )
	{
    1058:	df 93       	push	r29
    105a:	cf 93       	push	r28
    105c:	00 d0       	rcall	.+0      	; 0x105e <GPIO_voidWritePin+0x6>
    105e:	00 d0       	rcall	.+0      	; 0x1060 <GPIO_voidWritePin+0x8>
    1060:	0f 92       	push	r0
    1062:	cd b7       	in	r28, 0x3d	; 61
    1064:	de b7       	in	r29, 0x3e	; 62
    1066:	89 83       	std	Y+1, r24	; 0x01
    1068:	6a 83       	std	Y+2, r22	; 0x02
    106a:	4b 83       	std	Y+3, r20	; 0x03
		switch(copy_u8Port)
    106c:	89 81       	ldd	r24, Y+1	; 0x01
    106e:	28 2f       	mov	r18, r24
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	3d 83       	std	Y+5, r19	; 0x05
    1074:	2c 83       	std	Y+4, r18	; 0x04
    1076:	8c 81       	ldd	r24, Y+4	; 0x04
    1078:	9d 81       	ldd	r25, Y+5	; 0x05
    107a:	81 30       	cpi	r24, 0x01	; 1
    107c:	91 05       	cpc	r25, r1
    107e:	09 f4       	brne	.+2      	; 0x1082 <GPIO_voidWritePin+0x2a>
    1080:	43 c0       	rjmp	.+134    	; 0x1108 <GPIO_voidWritePin+0xb0>
    1082:	2c 81       	ldd	r18, Y+4	; 0x04
    1084:	3d 81       	ldd	r19, Y+5	; 0x05
    1086:	22 30       	cpi	r18, 0x02	; 2
    1088:	31 05       	cpc	r19, r1
    108a:	2c f4       	brge	.+10     	; 0x1096 <GPIO_voidWritePin+0x3e>
    108c:	8c 81       	ldd	r24, Y+4	; 0x04
    108e:	9d 81       	ldd	r25, Y+5	; 0x05
    1090:	00 97       	sbiw	r24, 0x00	; 0
    1092:	71 f0       	breq	.+28     	; 0x10b0 <GPIO_voidWritePin+0x58>
    1094:	bc c0       	rjmp	.+376    	; 0x120e <GPIO_voidWritePin+0x1b6>
    1096:	2c 81       	ldd	r18, Y+4	; 0x04
    1098:	3d 81       	ldd	r19, Y+5	; 0x05
    109a:	22 30       	cpi	r18, 0x02	; 2
    109c:	31 05       	cpc	r19, r1
    109e:	09 f4       	brne	.+2      	; 0x10a2 <GPIO_voidWritePin+0x4a>
    10a0:	5f c0       	rjmp	.+190    	; 0x1160 <GPIO_voidWritePin+0x108>
    10a2:	8c 81       	ldd	r24, Y+4	; 0x04
    10a4:	9d 81       	ldd	r25, Y+5	; 0x05
    10a6:	83 30       	cpi	r24, 0x03	; 3
    10a8:	91 05       	cpc	r25, r1
    10aa:	09 f4       	brne	.+2      	; 0x10ae <GPIO_voidWritePin+0x56>
    10ac:	85 c0       	rjmp	.+266    	; 0x11b8 <GPIO_voidWritePin+0x160>
    10ae:	af c0       	rjmp	.+350    	; 0x120e <GPIO_voidWritePin+0x1b6>
		{
			case GPIOA :
				if(copy_u8Value ==HIGH )
    10b0:	8b 81       	ldd	r24, Y+3	; 0x03
    10b2:	81 30       	cpi	r24, 0x01	; 1
    10b4:	a1 f4       	brne	.+40     	; 0x10de <GPIO_voidWritePin+0x86>
				{
					SET_BIT(PORTA ,copy_u8Pin);
    10b6:	ab e3       	ldi	r26, 0x3B	; 59
    10b8:	b0 e0       	ldi	r27, 0x00	; 0
    10ba:	eb e3       	ldi	r30, 0x3B	; 59
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	80 81       	ld	r24, Z
    10c0:	48 2f       	mov	r20, r24
    10c2:	8a 81       	ldd	r24, Y+2	; 0x02
    10c4:	28 2f       	mov	r18, r24
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	02 2e       	mov	r0, r18
    10ce:	02 c0       	rjmp	.+4      	; 0x10d4 <GPIO_voidWritePin+0x7c>
    10d0:	88 0f       	add	r24, r24
    10d2:	99 1f       	adc	r25, r25
    10d4:	0a 94       	dec	r0
    10d6:	e2 f7       	brpl	.-8      	; 0x10d0 <GPIO_voidWritePin+0x78>
    10d8:	84 2b       	or	r24, r20
    10da:	8c 93       	st	X, r24
    10dc:	98 c0       	rjmp	.+304    	; 0x120e <GPIO_voidWritePin+0x1b6>
				}
				else {
					CLEAR_BIT(PORTA,copy_u8Pin);
    10de:	ab e3       	ldi	r26, 0x3B	; 59
    10e0:	b0 e0       	ldi	r27, 0x00	; 0
    10e2:	eb e3       	ldi	r30, 0x3B	; 59
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	80 81       	ld	r24, Z
    10e8:	48 2f       	mov	r20, r24
    10ea:	8a 81       	ldd	r24, Y+2	; 0x02
    10ec:	28 2f       	mov	r18, r24
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	81 e0       	ldi	r24, 0x01	; 1
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	02 2e       	mov	r0, r18
    10f6:	02 c0       	rjmp	.+4      	; 0x10fc <GPIO_voidWritePin+0xa4>
    10f8:	88 0f       	add	r24, r24
    10fa:	99 1f       	adc	r25, r25
    10fc:	0a 94       	dec	r0
    10fe:	e2 f7       	brpl	.-8      	; 0x10f8 <GPIO_voidWritePin+0xa0>
    1100:	80 95       	com	r24
    1102:	84 23       	and	r24, r20
    1104:	8c 93       	st	X, r24
    1106:	83 c0       	rjmp	.+262    	; 0x120e <GPIO_voidWritePin+0x1b6>
				}
				break;
			case GPIOB :
				if(copy_u8Value ==HIGH )
    1108:	8b 81       	ldd	r24, Y+3	; 0x03
    110a:	81 30       	cpi	r24, 0x01	; 1
    110c:	a1 f4       	brne	.+40     	; 0x1136 <GPIO_voidWritePin+0xde>
				{
					SET_BIT(PORTB ,copy_u8Pin);
    110e:	a8 e3       	ldi	r26, 0x38	; 56
    1110:	b0 e0       	ldi	r27, 0x00	; 0
    1112:	e8 e3       	ldi	r30, 0x38	; 56
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	80 81       	ld	r24, Z
    1118:	48 2f       	mov	r20, r24
    111a:	8a 81       	ldd	r24, Y+2	; 0x02
    111c:	28 2f       	mov	r18, r24
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	02 2e       	mov	r0, r18
    1126:	02 c0       	rjmp	.+4      	; 0x112c <GPIO_voidWritePin+0xd4>
    1128:	88 0f       	add	r24, r24
    112a:	99 1f       	adc	r25, r25
    112c:	0a 94       	dec	r0
    112e:	e2 f7       	brpl	.-8      	; 0x1128 <GPIO_voidWritePin+0xd0>
    1130:	84 2b       	or	r24, r20
    1132:	8c 93       	st	X, r24
    1134:	6c c0       	rjmp	.+216    	; 0x120e <GPIO_voidWritePin+0x1b6>
				}
				else {
					CLEAR_BIT(PORTB,copy_u8Pin);
    1136:	a8 e3       	ldi	r26, 0x38	; 56
    1138:	b0 e0       	ldi	r27, 0x00	; 0
    113a:	e8 e3       	ldi	r30, 0x38	; 56
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	80 81       	ld	r24, Z
    1140:	48 2f       	mov	r20, r24
    1142:	8a 81       	ldd	r24, Y+2	; 0x02
    1144:	28 2f       	mov	r18, r24
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	02 2e       	mov	r0, r18
    114e:	02 c0       	rjmp	.+4      	; 0x1154 <GPIO_voidWritePin+0xfc>
    1150:	88 0f       	add	r24, r24
    1152:	99 1f       	adc	r25, r25
    1154:	0a 94       	dec	r0
    1156:	e2 f7       	brpl	.-8      	; 0x1150 <GPIO_voidWritePin+0xf8>
    1158:	80 95       	com	r24
    115a:	84 23       	and	r24, r20
    115c:	8c 93       	st	X, r24
    115e:	57 c0       	rjmp	.+174    	; 0x120e <GPIO_voidWritePin+0x1b6>
				}
				break;
			case GPIOC :
				if(copy_u8Value ==HIGH )
    1160:	8b 81       	ldd	r24, Y+3	; 0x03
    1162:	81 30       	cpi	r24, 0x01	; 1
    1164:	a1 f4       	brne	.+40     	; 0x118e <GPIO_voidWritePin+0x136>
				{
					SET_BIT(PORTC ,copy_u8Pin);
    1166:	a5 e3       	ldi	r26, 0x35	; 53
    1168:	b0 e0       	ldi	r27, 0x00	; 0
    116a:	e5 e3       	ldi	r30, 0x35	; 53
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	80 81       	ld	r24, Z
    1170:	48 2f       	mov	r20, r24
    1172:	8a 81       	ldd	r24, Y+2	; 0x02
    1174:	28 2f       	mov	r18, r24
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	81 e0       	ldi	r24, 0x01	; 1
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	02 2e       	mov	r0, r18
    117e:	02 c0       	rjmp	.+4      	; 0x1184 <GPIO_voidWritePin+0x12c>
    1180:	88 0f       	add	r24, r24
    1182:	99 1f       	adc	r25, r25
    1184:	0a 94       	dec	r0
    1186:	e2 f7       	brpl	.-8      	; 0x1180 <GPIO_voidWritePin+0x128>
    1188:	84 2b       	or	r24, r20
    118a:	8c 93       	st	X, r24
    118c:	40 c0       	rjmp	.+128    	; 0x120e <GPIO_voidWritePin+0x1b6>
				}
				else {
					CLEAR_BIT(PORTC,copy_u8Pin);
    118e:	a5 e3       	ldi	r26, 0x35	; 53
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	e5 e3       	ldi	r30, 0x35	; 53
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	48 2f       	mov	r20, r24
    119a:	8a 81       	ldd	r24, Y+2	; 0x02
    119c:	28 2f       	mov	r18, r24
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	02 2e       	mov	r0, r18
    11a6:	02 c0       	rjmp	.+4      	; 0x11ac <GPIO_voidWritePin+0x154>
    11a8:	88 0f       	add	r24, r24
    11aa:	99 1f       	adc	r25, r25
    11ac:	0a 94       	dec	r0
    11ae:	e2 f7       	brpl	.-8      	; 0x11a8 <GPIO_voidWritePin+0x150>
    11b0:	80 95       	com	r24
    11b2:	84 23       	and	r24, r20
    11b4:	8c 93       	st	X, r24
    11b6:	2b c0       	rjmp	.+86     	; 0x120e <GPIO_voidWritePin+0x1b6>
				}
				break;
			case GPIOD :
				if(copy_u8Value == HIGH )
    11b8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ba:	81 30       	cpi	r24, 0x01	; 1
    11bc:	a1 f4       	brne	.+40     	; 0x11e6 <GPIO_voidWritePin+0x18e>
				{
					SET_BIT(PORTD ,copy_u8Pin);
    11be:	a2 e3       	ldi	r26, 0x32	; 50
    11c0:	b0 e0       	ldi	r27, 0x00	; 0
    11c2:	e2 e3       	ldi	r30, 0x32	; 50
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	80 81       	ld	r24, Z
    11c8:	48 2f       	mov	r20, r24
    11ca:	8a 81       	ldd	r24, Y+2	; 0x02
    11cc:	28 2f       	mov	r18, r24
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	02 2e       	mov	r0, r18
    11d6:	02 c0       	rjmp	.+4      	; 0x11dc <GPIO_voidWritePin+0x184>
    11d8:	88 0f       	add	r24, r24
    11da:	99 1f       	adc	r25, r25
    11dc:	0a 94       	dec	r0
    11de:	e2 f7       	brpl	.-8      	; 0x11d8 <GPIO_voidWritePin+0x180>
    11e0:	84 2b       	or	r24, r20
    11e2:	8c 93       	st	X, r24
    11e4:	14 c0       	rjmp	.+40     	; 0x120e <GPIO_voidWritePin+0x1b6>
				}
				else {
					CLEAR_BIT(PORTD,copy_u8Pin);
    11e6:	a2 e3       	ldi	r26, 0x32	; 50
    11e8:	b0 e0       	ldi	r27, 0x00	; 0
    11ea:	e2 e3       	ldi	r30, 0x32	; 50
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	80 81       	ld	r24, Z
    11f0:	48 2f       	mov	r20, r24
    11f2:	8a 81       	ldd	r24, Y+2	; 0x02
    11f4:	28 2f       	mov	r18, r24
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	02 2e       	mov	r0, r18
    11fe:	02 c0       	rjmp	.+4      	; 0x1204 <GPIO_voidWritePin+0x1ac>
    1200:	88 0f       	add	r24, r24
    1202:	99 1f       	adc	r25, r25
    1204:	0a 94       	dec	r0
    1206:	e2 f7       	brpl	.-8      	; 0x1200 <GPIO_voidWritePin+0x1a8>
    1208:	80 95       	com	r24
    120a:	84 23       	and	r24, r20
    120c:	8c 93       	st	X, r24
				break;	
			default:
				break;
		}
		
	}
    120e:	0f 90       	pop	r0
    1210:	0f 90       	pop	r0
    1212:	0f 90       	pop	r0
    1214:	0f 90       	pop	r0
    1216:	0f 90       	pop	r0
    1218:	cf 91       	pop	r28
    121a:	df 91       	pop	r29
    121c:	08 95       	ret

0000121e <GPIO_u8ReadPin>:
	
	u8	GPIO_u8ReadPin(	u8  copy_u8Port ,u8 copy_u8Pin )
	{
    121e:	df 93       	push	r29
    1220:	cf 93       	push	r28
    1222:	00 d0       	rcall	.+0      	; 0x1224 <GPIO_u8ReadPin+0x6>
    1224:	00 d0       	rcall	.+0      	; 0x1226 <GPIO_u8ReadPin+0x8>
    1226:	0f 92       	push	r0
    1228:	cd b7       	in	r28, 0x3d	; 61
    122a:	de b7       	in	r29, 0x3e	; 62
    122c:	8a 83       	std	Y+2, r24	; 0x02
    122e:	6b 83       	std	Y+3, r22	; 0x03
		u8 Local_u8ReturnValue ;
		switch(copy_u8Port){
    1230:	8a 81       	ldd	r24, Y+2	; 0x02
    1232:	28 2f       	mov	r18, r24
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	3d 83       	std	Y+5, r19	; 0x05
    1238:	2c 83       	std	Y+4, r18	; 0x04
    123a:	4c 81       	ldd	r20, Y+4	; 0x04
    123c:	5d 81       	ldd	r21, Y+5	; 0x05
    123e:	41 30       	cpi	r20, 0x01	; 1
    1240:	51 05       	cpc	r21, r1
    1242:	b1 f1       	breq	.+108    	; 0x12b0 <GPIO_u8ReadPin+0x92>
    1244:	8c 81       	ldd	r24, Y+4	; 0x04
    1246:	9d 81       	ldd	r25, Y+5	; 0x05
    1248:	82 30       	cpi	r24, 0x02	; 2
    124a:	91 05       	cpc	r25, r1
    124c:	34 f4       	brge	.+12     	; 0x125a <GPIO_u8ReadPin+0x3c>
    124e:	2c 81       	ldd	r18, Y+4	; 0x04
    1250:	3d 81       	ldd	r19, Y+5	; 0x05
    1252:	21 15       	cp	r18, r1
    1254:	31 05       	cpc	r19, r1
    1256:	71 f0       	breq	.+28     	; 0x1274 <GPIO_u8ReadPin+0x56>
    1258:	84 c0       	rjmp	.+264    	; 0x1362 <GPIO_u8ReadPin+0x144>
    125a:	4c 81       	ldd	r20, Y+4	; 0x04
    125c:	5d 81       	ldd	r21, Y+5	; 0x05
    125e:	42 30       	cpi	r20, 0x02	; 2
    1260:	51 05       	cpc	r21, r1
    1262:	09 f4       	brne	.+2      	; 0x1266 <GPIO_u8ReadPin+0x48>
    1264:	43 c0       	rjmp	.+134    	; 0x12ec <GPIO_u8ReadPin+0xce>
    1266:	8c 81       	ldd	r24, Y+4	; 0x04
    1268:	9d 81       	ldd	r25, Y+5	; 0x05
    126a:	83 30       	cpi	r24, 0x03	; 3
    126c:	91 05       	cpc	r25, r1
    126e:	09 f4       	brne	.+2      	; 0x1272 <GPIO_u8ReadPin+0x54>
    1270:	5b c0       	rjmp	.+182    	; 0x1328 <GPIO_u8ReadPin+0x10a>
    1272:	77 c0       	rjmp	.+238    	; 0x1362 <GPIO_u8ReadPin+0x144>
			case GPIOA :
				Local_u8ReturnValue = GET_BIT(PINA,copy_u8Pin);
    1274:	e9 e3       	ldi	r30, 0x39	; 57
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	80 81       	ld	r24, Z
    127a:	48 2f       	mov	r20, r24
    127c:	50 e0       	ldi	r21, 0x00	; 0
    127e:	8b 81       	ldd	r24, Y+3	; 0x03
    1280:	28 2f       	mov	r18, r24
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	81 e0       	ldi	r24, 0x01	; 1
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	02 c0       	rjmp	.+4      	; 0x128e <GPIO_u8ReadPin+0x70>
    128a:	88 0f       	add	r24, r24
    128c:	99 1f       	adc	r25, r25
    128e:	2a 95       	dec	r18
    1290:	e2 f7       	brpl	.-8      	; 0x128a <GPIO_u8ReadPin+0x6c>
    1292:	9a 01       	movw	r18, r20
    1294:	28 23       	and	r18, r24
    1296:	39 23       	and	r19, r25
    1298:	8b 81       	ldd	r24, Y+3	; 0x03
    129a:	88 2f       	mov	r24, r24
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	a9 01       	movw	r20, r18
    12a0:	02 c0       	rjmp	.+4      	; 0x12a6 <GPIO_u8ReadPin+0x88>
    12a2:	55 95       	asr	r21
    12a4:	47 95       	ror	r20
    12a6:	8a 95       	dec	r24
    12a8:	e2 f7       	brpl	.-8      	; 0x12a2 <GPIO_u8ReadPin+0x84>
    12aa:	ca 01       	movw	r24, r20
    12ac:	89 83       	std	Y+1, r24	; 0x01
    12ae:	59 c0       	rjmp	.+178    	; 0x1362 <GPIO_u8ReadPin+0x144>
				break ;
			case GPIOB :
				Local_u8ReturnValue = GET_BIT(PINB,copy_u8Pin);
    12b0:	e6 e3       	ldi	r30, 0x36	; 54
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	80 81       	ld	r24, Z
    12b6:	48 2f       	mov	r20, r24
    12b8:	50 e0       	ldi	r21, 0x00	; 0
    12ba:	8b 81       	ldd	r24, Y+3	; 0x03
    12bc:	28 2f       	mov	r18, r24
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	81 e0       	ldi	r24, 0x01	; 1
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	02 c0       	rjmp	.+4      	; 0x12ca <GPIO_u8ReadPin+0xac>
    12c6:	88 0f       	add	r24, r24
    12c8:	99 1f       	adc	r25, r25
    12ca:	2a 95       	dec	r18
    12cc:	e2 f7       	brpl	.-8      	; 0x12c6 <GPIO_u8ReadPin+0xa8>
    12ce:	9a 01       	movw	r18, r20
    12d0:	28 23       	and	r18, r24
    12d2:	39 23       	and	r19, r25
    12d4:	8b 81       	ldd	r24, Y+3	; 0x03
    12d6:	88 2f       	mov	r24, r24
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	a9 01       	movw	r20, r18
    12dc:	02 c0       	rjmp	.+4      	; 0x12e2 <GPIO_u8ReadPin+0xc4>
    12de:	55 95       	asr	r21
    12e0:	47 95       	ror	r20
    12e2:	8a 95       	dec	r24
    12e4:	e2 f7       	brpl	.-8      	; 0x12de <GPIO_u8ReadPin+0xc0>
    12e6:	ca 01       	movw	r24, r20
    12e8:	89 83       	std	Y+1, r24	; 0x01
    12ea:	3b c0       	rjmp	.+118    	; 0x1362 <GPIO_u8ReadPin+0x144>
				break ;
			case GPIOC :
				Local_u8ReturnValue = GET_BIT(PINC,copy_u8Pin);
    12ec:	e3 e3       	ldi	r30, 0x33	; 51
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 81       	ld	r24, Z
    12f2:	48 2f       	mov	r20, r24
    12f4:	50 e0       	ldi	r21, 0x00	; 0
    12f6:	8b 81       	ldd	r24, Y+3	; 0x03
    12f8:	28 2f       	mov	r18, r24
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	02 c0       	rjmp	.+4      	; 0x1306 <GPIO_u8ReadPin+0xe8>
    1302:	88 0f       	add	r24, r24
    1304:	99 1f       	adc	r25, r25
    1306:	2a 95       	dec	r18
    1308:	e2 f7       	brpl	.-8      	; 0x1302 <GPIO_u8ReadPin+0xe4>
    130a:	9a 01       	movw	r18, r20
    130c:	28 23       	and	r18, r24
    130e:	39 23       	and	r19, r25
    1310:	8b 81       	ldd	r24, Y+3	; 0x03
    1312:	88 2f       	mov	r24, r24
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	a9 01       	movw	r20, r18
    1318:	02 c0       	rjmp	.+4      	; 0x131e <GPIO_u8ReadPin+0x100>
    131a:	55 95       	asr	r21
    131c:	47 95       	ror	r20
    131e:	8a 95       	dec	r24
    1320:	e2 f7       	brpl	.-8      	; 0x131a <GPIO_u8ReadPin+0xfc>
    1322:	ca 01       	movw	r24, r20
    1324:	89 83       	std	Y+1, r24	; 0x01
    1326:	1d c0       	rjmp	.+58     	; 0x1362 <GPIO_u8ReadPin+0x144>
				break ;
			case GPIOD :
				Local_u8ReturnValue = GET_BIT(PIND,copy_u8Pin);
    1328:	e0 e3       	ldi	r30, 0x30	; 48
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	80 81       	ld	r24, Z
    132e:	48 2f       	mov	r20, r24
    1330:	50 e0       	ldi	r21, 0x00	; 0
    1332:	8b 81       	ldd	r24, Y+3	; 0x03
    1334:	28 2f       	mov	r18, r24
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	02 c0       	rjmp	.+4      	; 0x1342 <GPIO_u8ReadPin+0x124>
    133e:	88 0f       	add	r24, r24
    1340:	99 1f       	adc	r25, r25
    1342:	2a 95       	dec	r18
    1344:	e2 f7       	brpl	.-8      	; 0x133e <GPIO_u8ReadPin+0x120>
    1346:	9a 01       	movw	r18, r20
    1348:	28 23       	and	r18, r24
    134a:	39 23       	and	r19, r25
    134c:	8b 81       	ldd	r24, Y+3	; 0x03
    134e:	88 2f       	mov	r24, r24
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	a9 01       	movw	r20, r18
    1354:	02 c0       	rjmp	.+4      	; 0x135a <GPIO_u8ReadPin+0x13c>
    1356:	55 95       	asr	r21
    1358:	47 95       	ror	r20
    135a:	8a 95       	dec	r24
    135c:	e2 f7       	brpl	.-8      	; 0x1356 <GPIO_u8ReadPin+0x138>
    135e:	ca 01       	movw	r24, r20
    1360:	89 83       	std	Y+1, r24	; 0x01
				break ;
			default:
			break;
		}
		return Local_u8ReturnValue ;
    1362:	89 81       	ldd	r24, Y+1	; 0x01
		
	}
    1364:	0f 90       	pop	r0
    1366:	0f 90       	pop	r0
    1368:	0f 90       	pop	r0
    136a:	0f 90       	pop	r0
    136c:	0f 90       	pop	r0
    136e:	cf 91       	pop	r28
    1370:	df 91       	pop	r29
    1372:	08 95       	ret

00001374 <GPIO_voidTogPin>:
	
	void GPIO_voidTogPin 	( u8 copy_u8Port , u8 copy_u8Pin )
	{
    1374:	df 93       	push	r29
    1376:	cf 93       	push	r28
    1378:	00 d0       	rcall	.+0      	; 0x137a <GPIO_voidTogPin+0x6>
    137a:	00 d0       	rcall	.+0      	; 0x137c <GPIO_voidTogPin+0x8>
    137c:	cd b7       	in	r28, 0x3d	; 61
    137e:	de b7       	in	r29, 0x3e	; 62
    1380:	89 83       	std	Y+1, r24	; 0x01
    1382:	6a 83       	std	Y+2, r22	; 0x02
		switch(copy_u8Port){
    1384:	89 81       	ldd	r24, Y+1	; 0x01
    1386:	28 2f       	mov	r18, r24
    1388:	30 e0       	ldi	r19, 0x00	; 0
    138a:	3c 83       	std	Y+4, r19	; 0x04
    138c:	2b 83       	std	Y+3, r18	; 0x03
    138e:	8b 81       	ldd	r24, Y+3	; 0x03
    1390:	9c 81       	ldd	r25, Y+4	; 0x04
    1392:	81 30       	cpi	r24, 0x01	; 1
    1394:	91 05       	cpc	r25, r1
    1396:	49 f1       	breq	.+82     	; 0x13ea <GPIO_voidTogPin+0x76>
    1398:	2b 81       	ldd	r18, Y+3	; 0x03
    139a:	3c 81       	ldd	r19, Y+4	; 0x04
    139c:	22 30       	cpi	r18, 0x02	; 2
    139e:	31 05       	cpc	r19, r1
    13a0:	2c f4       	brge	.+10     	; 0x13ac <GPIO_voidTogPin+0x38>
    13a2:	8b 81       	ldd	r24, Y+3	; 0x03
    13a4:	9c 81       	ldd	r25, Y+4	; 0x04
    13a6:	00 97       	sbiw	r24, 0x00	; 0
    13a8:	61 f0       	breq	.+24     	; 0x13c2 <GPIO_voidTogPin+0x4e>
    13aa:	5a c0       	rjmp	.+180    	; 0x1460 <GPIO_voidTogPin+0xec>
    13ac:	2b 81       	ldd	r18, Y+3	; 0x03
    13ae:	3c 81       	ldd	r19, Y+4	; 0x04
    13b0:	22 30       	cpi	r18, 0x02	; 2
    13b2:	31 05       	cpc	r19, r1
    13b4:	71 f1       	breq	.+92     	; 0x1412 <GPIO_voidTogPin+0x9e>
    13b6:	8b 81       	ldd	r24, Y+3	; 0x03
    13b8:	9c 81       	ldd	r25, Y+4	; 0x04
    13ba:	83 30       	cpi	r24, 0x03	; 3
    13bc:	91 05       	cpc	r25, r1
    13be:	e9 f1       	breq	.+122    	; 0x143a <GPIO_voidTogPin+0xc6>
    13c0:	4f c0       	rjmp	.+158    	; 0x1460 <GPIO_voidTogPin+0xec>
			case GPIOA :
				TOG_BIT(PORTA,copy_u8Pin);
    13c2:	ab e3       	ldi	r26, 0x3B	; 59
    13c4:	b0 e0       	ldi	r27, 0x00	; 0
    13c6:	eb e3       	ldi	r30, 0x3B	; 59
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	80 81       	ld	r24, Z
    13cc:	48 2f       	mov	r20, r24
    13ce:	8a 81       	ldd	r24, Y+2	; 0x02
    13d0:	28 2f       	mov	r18, r24
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	02 2e       	mov	r0, r18
    13da:	02 c0       	rjmp	.+4      	; 0x13e0 <GPIO_voidTogPin+0x6c>
    13dc:	88 0f       	add	r24, r24
    13de:	99 1f       	adc	r25, r25
    13e0:	0a 94       	dec	r0
    13e2:	e2 f7       	brpl	.-8      	; 0x13dc <GPIO_voidTogPin+0x68>
    13e4:	84 27       	eor	r24, r20
    13e6:	8c 93       	st	X, r24
    13e8:	3b c0       	rjmp	.+118    	; 0x1460 <GPIO_voidTogPin+0xec>
				break ;             
			case GPIOB :            
				TOG_BIT(PORTB,copy_u8Pin);
    13ea:	a8 e3       	ldi	r26, 0x38	; 56
    13ec:	b0 e0       	ldi	r27, 0x00	; 0
    13ee:	e8 e3       	ldi	r30, 0x38	; 56
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	48 2f       	mov	r20, r24
    13f6:	8a 81       	ldd	r24, Y+2	; 0x02
    13f8:	28 2f       	mov	r18, r24
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	02 2e       	mov	r0, r18
    1402:	02 c0       	rjmp	.+4      	; 0x1408 <GPIO_voidTogPin+0x94>
    1404:	88 0f       	add	r24, r24
    1406:	99 1f       	adc	r25, r25
    1408:	0a 94       	dec	r0
    140a:	e2 f7       	brpl	.-8      	; 0x1404 <GPIO_voidTogPin+0x90>
    140c:	84 27       	eor	r24, r20
    140e:	8c 93       	st	X, r24
    1410:	27 c0       	rjmp	.+78     	; 0x1460 <GPIO_voidTogPin+0xec>
				break ;             
			case GPIOC :            
				TOG_BIT(PORTC,copy_u8Pin);
    1412:	a5 e3       	ldi	r26, 0x35	; 53
    1414:	b0 e0       	ldi	r27, 0x00	; 0
    1416:	e5 e3       	ldi	r30, 0x35	; 53
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	80 81       	ld	r24, Z
    141c:	48 2f       	mov	r20, r24
    141e:	8a 81       	ldd	r24, Y+2	; 0x02
    1420:	28 2f       	mov	r18, r24
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	81 e0       	ldi	r24, 0x01	; 1
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	02 2e       	mov	r0, r18
    142a:	02 c0       	rjmp	.+4      	; 0x1430 <GPIO_voidTogPin+0xbc>
    142c:	88 0f       	add	r24, r24
    142e:	99 1f       	adc	r25, r25
    1430:	0a 94       	dec	r0
    1432:	e2 f7       	brpl	.-8      	; 0x142c <GPIO_voidTogPin+0xb8>
    1434:	84 27       	eor	r24, r20
    1436:	8c 93       	st	X, r24
    1438:	13 c0       	rjmp	.+38     	; 0x1460 <GPIO_voidTogPin+0xec>
				break ;             
			case GPIOD : 
				TOG_BIT(PORTD,copy_u8Pin);
    143a:	a2 e3       	ldi	r26, 0x32	; 50
    143c:	b0 e0       	ldi	r27, 0x00	; 0
    143e:	e2 e3       	ldi	r30, 0x32	; 50
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	80 81       	ld	r24, Z
    1444:	48 2f       	mov	r20, r24
    1446:	8a 81       	ldd	r24, Y+2	; 0x02
    1448:	28 2f       	mov	r18, r24
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	81 e0       	ldi	r24, 0x01	; 1
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	02 2e       	mov	r0, r18
    1452:	02 c0       	rjmp	.+4      	; 0x1458 <GPIO_voidTogPin+0xe4>
    1454:	88 0f       	add	r24, r24
    1456:	99 1f       	adc	r25, r25
    1458:	0a 94       	dec	r0
    145a:	e2 f7       	brpl	.-8      	; 0x1454 <GPIO_voidTogPin+0xe0>
    145c:	84 27       	eor	r24, r20
    145e:	8c 93       	st	X, r24
			default:
			break;
		}
		
		
	}
    1460:	0f 90       	pop	r0
    1462:	0f 90       	pop	r0
    1464:	0f 90       	pop	r0
    1466:	0f 90       	pop	r0
    1468:	cf 91       	pop	r28
    146a:	df 91       	pop	r29
    146c:	08 95       	ret

0000146e <GPIO_voidSetPortDDR>:
	void GPIO_voidSetPortDDR (u8  copy_u8Port , u8 copy_u8Mode )
	{
    146e:	df 93       	push	r29
    1470:	cf 93       	push	r28
    1472:	00 d0       	rcall	.+0      	; 0x1474 <GPIO_voidSetPortDDR+0x6>
    1474:	00 d0       	rcall	.+0      	; 0x1476 <GPIO_voidSetPortDDR+0x8>
    1476:	cd b7       	in	r28, 0x3d	; 61
    1478:	de b7       	in	r29, 0x3e	; 62
    147a:	89 83       	std	Y+1, r24	; 0x01
    147c:	6a 83       	std	Y+2, r22	; 0x02
		switch(copy_u8Port)
    147e:	89 81       	ldd	r24, Y+1	; 0x01
    1480:	28 2f       	mov	r18, r24
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	3c 83       	std	Y+4, r19	; 0x04
    1486:	2b 83       	std	Y+3, r18	; 0x03
    1488:	8b 81       	ldd	r24, Y+3	; 0x03
    148a:	9c 81       	ldd	r25, Y+4	; 0x04
    148c:	81 30       	cpi	r24, 0x01	; 1
    148e:	91 05       	cpc	r25, r1
    1490:	09 f1       	breq	.+66     	; 0x14d4 <GPIO_voidSetPortDDR+0x66>
    1492:	2b 81       	ldd	r18, Y+3	; 0x03
    1494:	3c 81       	ldd	r19, Y+4	; 0x04
    1496:	22 30       	cpi	r18, 0x02	; 2
    1498:	31 05       	cpc	r19, r1
    149a:	2c f4       	brge	.+10     	; 0x14a6 <GPIO_voidSetPortDDR+0x38>
    149c:	8b 81       	ldd	r24, Y+3	; 0x03
    149e:	9c 81       	ldd	r25, Y+4	; 0x04
    14a0:	00 97       	sbiw	r24, 0x00	; 0
    14a2:	61 f0       	breq	.+24     	; 0x14bc <GPIO_voidSetPortDDR+0x4e>
    14a4:	3a c0       	rjmp	.+116    	; 0x151a <GPIO_voidSetPortDDR+0xac>
    14a6:	2b 81       	ldd	r18, Y+3	; 0x03
    14a8:	3c 81       	ldd	r19, Y+4	; 0x04
    14aa:	22 30       	cpi	r18, 0x02	; 2
    14ac:	31 05       	cpc	r19, r1
    14ae:	f1 f0       	breq	.+60     	; 0x14ec <GPIO_voidSetPortDDR+0x7e>
    14b0:	8b 81       	ldd	r24, Y+3	; 0x03
    14b2:	9c 81       	ldd	r25, Y+4	; 0x04
    14b4:	83 30       	cpi	r24, 0x03	; 3
    14b6:	91 05       	cpc	r25, r1
    14b8:	29 f1       	breq	.+74     	; 0x1504 <GPIO_voidSetPortDDR+0x96>
    14ba:	2f c0       	rjmp	.+94     	; 0x151a <GPIO_voidSetPortDDR+0xac>
		{
			case GPIOA :
				if(copy_u8Mode ==OUTPUT )
    14bc:	8a 81       	ldd	r24, Y+2	; 0x02
    14be:	81 30       	cpi	r24, 0x01	; 1
    14c0:	29 f4       	brne	.+10     	; 0x14cc <GPIO_voidSetPortDDR+0x5e>
				{
					DDRA= 0xFF;
    14c2:	ea e3       	ldi	r30, 0x3A	; 58
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	8f ef       	ldi	r24, 0xFF	; 255
    14c8:	80 83       	st	Z, r24
    14ca:	27 c0       	rjmp	.+78     	; 0x151a <GPIO_voidSetPortDDR+0xac>
				}
				else {
					DDRA = 0x00 ;
    14cc:	ea e3       	ldi	r30, 0x3A	; 58
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	10 82       	st	Z, r1
    14d2:	23 c0       	rjmp	.+70     	; 0x151a <GPIO_voidSetPortDDR+0xac>
				}
				break;
			case GPIOB :
				if(copy_u8Mode ==OUTPUT )
    14d4:	8a 81       	ldd	r24, Y+2	; 0x02
    14d6:	81 30       	cpi	r24, 0x01	; 1
    14d8:	29 f4       	brne	.+10     	; 0x14e4 <GPIO_voidSetPortDDR+0x76>
				{
					DDRB = 0xFF;
    14da:	e7 e3       	ldi	r30, 0x37	; 55
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	8f ef       	ldi	r24, 0xFF	; 255
    14e0:	80 83       	st	Z, r24
    14e2:	1b c0       	rjmp	.+54     	; 0x151a <GPIO_voidSetPortDDR+0xac>
				}
				else {
					DDRB = 0x00;
    14e4:	e7 e3       	ldi	r30, 0x37	; 55
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	10 82       	st	Z, r1
    14ea:	17 c0       	rjmp	.+46     	; 0x151a <GPIO_voidSetPortDDR+0xac>
				}
				break;
			case GPIOC :
				if(copy_u8Mode ==OUTPUT )
    14ec:	8a 81       	ldd	r24, Y+2	; 0x02
    14ee:	81 30       	cpi	r24, 0x01	; 1
    14f0:	29 f4       	brne	.+10     	; 0x14fc <GPIO_voidSetPortDDR+0x8e>
				{
					DDRC = 0xFF ;
    14f2:	e4 e3       	ldi	r30, 0x34	; 52
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	8f ef       	ldi	r24, 0xFF	; 255
    14f8:	80 83       	st	Z, r24
    14fa:	0f c0       	rjmp	.+30     	; 0x151a <GPIO_voidSetPortDDR+0xac>
				}
				else {
					DDRC = 0x00 ;
    14fc:	e4 e3       	ldi	r30, 0x34	; 52
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	10 82       	st	Z, r1
    1502:	0b c0       	rjmp	.+22     	; 0x151a <GPIO_voidSetPortDDR+0xac>
				}
				break;
			case GPIOD :
				if(copy_u8Mode ==OUTPUT )
    1504:	8a 81       	ldd	r24, Y+2	; 0x02
    1506:	81 30       	cpi	r24, 0x01	; 1
    1508:	29 f4       	brne	.+10     	; 0x1514 <GPIO_voidSetPortDDR+0xa6>
				{
					DDRD = 0xFF;
    150a:	e1 e3       	ldi	r30, 0x31	; 49
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	8f ef       	ldi	r24, 0xFF	; 255
    1510:	80 83       	st	Z, r24
    1512:	03 c0       	rjmp	.+6      	; 0x151a <GPIO_voidSetPortDDR+0xac>
				}
				else {
					DDRD = 0x00;
    1514:	e1 e3       	ldi	r30, 0x31	; 49
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	10 82       	st	Z, r1
				}
				break;	
			default:
				break;
		}
	}
    151a:	0f 90       	pop	r0
    151c:	0f 90       	pop	r0
    151e:	0f 90       	pop	r0
    1520:	0f 90       	pop	r0
    1522:	cf 91       	pop	r28
    1524:	df 91       	pop	r29
    1526:	08 95       	ret

00001528 <GPIO_voidWritePort>:
	void	GPIO_voidWritePort (u8 copy_u8Port , u8 copy_u8Value)
	{
    1528:	df 93       	push	r29
    152a:	cf 93       	push	r28
    152c:	00 d0       	rcall	.+0      	; 0x152e <GPIO_voidWritePort+0x6>
    152e:	00 d0       	rcall	.+0      	; 0x1530 <GPIO_voidWritePort+0x8>
    1530:	cd b7       	in	r28, 0x3d	; 61
    1532:	de b7       	in	r29, 0x3e	; 62
    1534:	89 83       	std	Y+1, r24	; 0x01
    1536:	6a 83       	std	Y+2, r22	; 0x02
			switch(copy_u8Port)
    1538:	89 81       	ldd	r24, Y+1	; 0x01
    153a:	28 2f       	mov	r18, r24
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	3c 83       	std	Y+4, r19	; 0x04
    1540:	2b 83       	std	Y+3, r18	; 0x03
    1542:	8b 81       	ldd	r24, Y+3	; 0x03
    1544:	9c 81       	ldd	r25, Y+4	; 0x04
    1546:	81 30       	cpi	r24, 0x01	; 1
    1548:	91 05       	cpc	r25, r1
    154a:	d1 f0       	breq	.+52     	; 0x1580 <GPIO_voidWritePort+0x58>
    154c:	2b 81       	ldd	r18, Y+3	; 0x03
    154e:	3c 81       	ldd	r19, Y+4	; 0x04
    1550:	22 30       	cpi	r18, 0x02	; 2
    1552:	31 05       	cpc	r19, r1
    1554:	2c f4       	brge	.+10     	; 0x1560 <GPIO_voidWritePort+0x38>
    1556:	8b 81       	ldd	r24, Y+3	; 0x03
    1558:	9c 81       	ldd	r25, Y+4	; 0x04
    155a:	00 97       	sbiw	r24, 0x00	; 0
    155c:	61 f0       	breq	.+24     	; 0x1576 <GPIO_voidWritePort+0x4e>
    155e:	1e c0       	rjmp	.+60     	; 0x159c <GPIO_voidWritePort+0x74>
    1560:	2b 81       	ldd	r18, Y+3	; 0x03
    1562:	3c 81       	ldd	r19, Y+4	; 0x04
    1564:	22 30       	cpi	r18, 0x02	; 2
    1566:	31 05       	cpc	r19, r1
    1568:	81 f0       	breq	.+32     	; 0x158a <GPIO_voidWritePort+0x62>
    156a:	8b 81       	ldd	r24, Y+3	; 0x03
    156c:	9c 81       	ldd	r25, Y+4	; 0x04
    156e:	83 30       	cpi	r24, 0x03	; 3
    1570:	91 05       	cpc	r25, r1
    1572:	81 f0       	breq	.+32     	; 0x1594 <GPIO_voidWritePort+0x6c>
    1574:	13 c0       	rjmp	.+38     	; 0x159c <GPIO_voidWritePort+0x74>
		{
			case GPIOA :
				PORTA = copy_u8Value ;
    1576:	eb e3       	ldi	r30, 0x3B	; 59
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	8a 81       	ldd	r24, Y+2	; 0x02
    157c:	80 83       	st	Z, r24
    157e:	0e c0       	rjmp	.+28     	; 0x159c <GPIO_voidWritePort+0x74>
				break;
			case GPIOB :
				PORTB = copy_u8Value;
    1580:	e8 e3       	ldi	r30, 0x38	; 56
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	8a 81       	ldd	r24, Y+2	; 0x02
    1586:	80 83       	st	Z, r24
    1588:	09 c0       	rjmp	.+18     	; 0x159c <GPIO_voidWritePort+0x74>
				break;
			case GPIOC :
				PORTC = copy_u8Value;
    158a:	e5 e3       	ldi	r30, 0x35	; 53
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	8a 81       	ldd	r24, Y+2	; 0x02
    1590:	80 83       	st	Z, r24
    1592:	04 c0       	rjmp	.+8      	; 0x159c <GPIO_voidWritePort+0x74>
				break;
			case GPIOD :
				PORTD = copy_u8Value;
    1594:	e2 e3       	ldi	r30, 0x32	; 50
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	8a 81       	ldd	r24, Y+2	; 0x02
    159a:	80 83       	st	Z, r24
				break;
		}
		
			
			
		}
    159c:	0f 90       	pop	r0
    159e:	0f 90       	pop	r0
    15a0:	0f 90       	pop	r0
    15a2:	0f 90       	pop	r0
    15a4:	cf 91       	pop	r28
    15a6:	df 91       	pop	r29
    15a8:	08 95       	ret

000015aa <GPIO_voidSetLowNippleDDR>:
	void GPIO_voidSetLowNippleDDR(u8 copy_u8Port , u8 copy_u8Mode)
	{
    15aa:	df 93       	push	r29
    15ac:	cf 93       	push	r28
    15ae:	00 d0       	rcall	.+0      	; 0x15b0 <GPIO_voidSetLowNippleDDR+0x6>
    15b0:	0f 92       	push	r0
    15b2:	cd b7       	in	r28, 0x3d	; 61
    15b4:	de b7       	in	r29, 0x3e	; 62
    15b6:	8a 83       	std	Y+2, r24	; 0x02
    15b8:	6b 83       	std	Y+3, r22	; 0x03
		u8 i ;
		for (i= 0 ; i<4 ; i++){
    15ba:	19 82       	std	Y+1, r1	; 0x01
    15bc:	08 c0       	rjmp	.+16     	; 0x15ce <GPIO_voidSetLowNippleDDR+0x24>
			GPIO_voidSetPinDDR(copy_u8Port , i ,copy_u8Mode );
    15be:	8a 81       	ldd	r24, Y+2	; 0x02
    15c0:	69 81       	ldd	r22, Y+1	; 0x01
    15c2:	4b 81       	ldd	r20, Y+3	; 0x03
    15c4:	0e 94 49 07 	call	0xe92	; 0xe92 <GPIO_voidSetPinDDR>
			
		}
	void GPIO_voidSetLowNippleDDR(u8 copy_u8Port , u8 copy_u8Mode)
	{
		u8 i ;
		for (i= 0 ; i<4 ; i++){
    15c8:	89 81       	ldd	r24, Y+1	; 0x01
    15ca:	8f 5f       	subi	r24, 0xFF	; 255
    15cc:	89 83       	std	Y+1, r24	; 0x01
    15ce:	89 81       	ldd	r24, Y+1	; 0x01
    15d0:	84 30       	cpi	r24, 0x04	; 4
    15d2:	a8 f3       	brcs	.-22     	; 0x15be <GPIO_voidSetLowNippleDDR+0x14>
			GPIO_voidSetPinDDR(copy_u8Port , i ,copy_u8Mode );
		}
	}
    15d4:	0f 90       	pop	r0
    15d6:	0f 90       	pop	r0
    15d8:	0f 90       	pop	r0
    15da:	cf 91       	pop	r28
    15dc:	df 91       	pop	r29
    15de:	08 95       	ret

000015e0 <GPIO_voidSetHighNippleDDR>:
	void GPIO_voidSetHighNippleDDR(u8 copy_u8Port , u8 copy_u8Mode)
	{
    15e0:	df 93       	push	r29
    15e2:	cf 93       	push	r28
    15e4:	00 d0       	rcall	.+0      	; 0x15e6 <GPIO_voidSetHighNippleDDR+0x6>
    15e6:	0f 92       	push	r0
    15e8:	cd b7       	in	r28, 0x3d	; 61
    15ea:	de b7       	in	r29, 0x3e	; 62
    15ec:	8a 83       	std	Y+2, r24	; 0x02
    15ee:	6b 83       	std	Y+3, r22	; 0x03
		u8 i ;
		for (i= 4 ; i<8 ; i++){
    15f0:	84 e0       	ldi	r24, 0x04	; 4
    15f2:	89 83       	std	Y+1, r24	; 0x01
    15f4:	08 c0       	rjmp	.+16     	; 0x1606 <GPIO_voidSetHighNippleDDR+0x26>
			GPIO_voidSetPinDDR(copy_u8Port , i ,copy_u8Mode );
    15f6:	8a 81       	ldd	r24, Y+2	; 0x02
    15f8:	69 81       	ldd	r22, Y+1	; 0x01
    15fa:	4b 81       	ldd	r20, Y+3	; 0x03
    15fc:	0e 94 49 07 	call	0xe92	; 0xe92 <GPIO_voidSetPinDDR>
		}
	}
	void GPIO_voidSetHighNippleDDR(u8 copy_u8Port , u8 copy_u8Mode)
	{
		u8 i ;
		for (i= 4 ; i<8 ; i++){
    1600:	89 81       	ldd	r24, Y+1	; 0x01
    1602:	8f 5f       	subi	r24, 0xFF	; 255
    1604:	89 83       	std	Y+1, r24	; 0x01
    1606:	89 81       	ldd	r24, Y+1	; 0x01
    1608:	88 30       	cpi	r24, 0x08	; 8
    160a:	a8 f3       	brcs	.-22     	; 0x15f6 <GPIO_voidSetHighNippleDDR+0x16>
			GPIO_voidSetPinDDR(copy_u8Port , i ,copy_u8Mode );
		}
	}
    160c:	0f 90       	pop	r0
    160e:	0f 90       	pop	r0
    1610:	0f 90       	pop	r0
    1612:	cf 91       	pop	r28
    1614:	df 91       	pop	r29
    1616:	08 95       	ret

00001618 <GPIO_voidWriteLowNipple>:
	void GPIO_voidWriteLowNipple (u8 copy_u8Port , u8 copy_u8Value )
	{
    1618:	df 93       	push	r29
    161a:	cf 93       	push	r28
    161c:	00 d0       	rcall	.+0      	; 0x161e <GPIO_voidWriteLowNipple+0x6>
    161e:	00 d0       	rcall	.+0      	; 0x1620 <GPIO_voidWriteLowNipple+0x8>
    1620:	cd b7       	in	r28, 0x3d	; 61
    1622:	de b7       	in	r29, 0x3e	; 62
    1624:	89 83       	std	Y+1, r24	; 0x01
    1626:	6a 83       	std	Y+2, r22	; 0x02
		copy_u8Value &= 0x0F;
    1628:	8a 81       	ldd	r24, Y+2	; 0x02
    162a:	8f 70       	andi	r24, 0x0F	; 15
    162c:	8a 83       	std	Y+2, r24	; 0x02
		switch (copy_u8Port) {
    162e:	89 81       	ldd	r24, Y+1	; 0x01
    1630:	28 2f       	mov	r18, r24
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	3c 83       	std	Y+4, r19	; 0x04
    1636:	2b 83       	std	Y+3, r18	; 0x03
    1638:	8b 81       	ldd	r24, Y+3	; 0x03
    163a:	9c 81       	ldd	r25, Y+4	; 0x04
    163c:	81 30       	cpi	r24, 0x01	; 1
    163e:	91 05       	cpc	r25, r1
    1640:	29 f1       	breq	.+74     	; 0x168c <GPIO_voidWriteLowNipple+0x74>
    1642:	2b 81       	ldd	r18, Y+3	; 0x03
    1644:	3c 81       	ldd	r19, Y+4	; 0x04
    1646:	22 30       	cpi	r18, 0x02	; 2
    1648:	31 05       	cpc	r19, r1
    164a:	2c f4       	brge	.+10     	; 0x1656 <GPIO_voidWriteLowNipple+0x3e>
    164c:	8b 81       	ldd	r24, Y+3	; 0x03
    164e:	9c 81       	ldd	r25, Y+4	; 0x04
    1650:	00 97       	sbiw	r24, 0x00	; 0
    1652:	61 f0       	breq	.+24     	; 0x166c <GPIO_voidWriteLowNipple+0x54>
    1654:	4a c0       	rjmp	.+148    	; 0x16ea <GPIO_voidWriteLowNipple+0xd2>
    1656:	2b 81       	ldd	r18, Y+3	; 0x03
    1658:	3c 81       	ldd	r19, Y+4	; 0x04
    165a:	22 30       	cpi	r18, 0x02	; 2
    165c:	31 05       	cpc	r19, r1
    165e:	31 f1       	breq	.+76     	; 0x16ac <GPIO_voidWriteLowNipple+0x94>
    1660:	8b 81       	ldd	r24, Y+3	; 0x03
    1662:	9c 81       	ldd	r25, Y+4	; 0x04
    1664:	83 30       	cpi	r24, 0x03	; 3
    1666:	91 05       	cpc	r25, r1
    1668:	89 f1       	breq	.+98     	; 0x16cc <GPIO_voidWriteLowNipple+0xb4>
    166a:	3f c0       	rjmp	.+126    	; 0x16ea <GPIO_voidWriteLowNipple+0xd2>
			case GPIOA :
				PORTA &= 0xF0 ; 
    166c:	ab e3       	ldi	r26, 0x3B	; 59
    166e:	b0 e0       	ldi	r27, 0x00	; 0
    1670:	eb e3       	ldi	r30, 0x3B	; 59
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	80 81       	ld	r24, Z
    1676:	80 7f       	andi	r24, 0xF0	; 240
    1678:	8c 93       	st	X, r24
				PORTA |= copy_u8Value ;
    167a:	ab e3       	ldi	r26, 0x3B	; 59
    167c:	b0 e0       	ldi	r27, 0x00	; 0
    167e:	eb e3       	ldi	r30, 0x3B	; 59
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	90 81       	ld	r25, Z
    1684:	8a 81       	ldd	r24, Y+2	; 0x02
    1686:	89 2b       	or	r24, r25
    1688:	8c 93       	st	X, r24
    168a:	2f c0       	rjmp	.+94     	; 0x16ea <GPIO_voidWriteLowNipple+0xd2>
				break;
			case GPIOB :
				PORTB &= 0xF0 ; 
    168c:	a8 e3       	ldi	r26, 0x38	; 56
    168e:	b0 e0       	ldi	r27, 0x00	; 0
    1690:	e8 e3       	ldi	r30, 0x38	; 56
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	80 81       	ld	r24, Z
    1696:	80 7f       	andi	r24, 0xF0	; 240
    1698:	8c 93       	st	X, r24
				PORTB |= copy_u8Value ;
    169a:	a8 e3       	ldi	r26, 0x38	; 56
    169c:	b0 e0       	ldi	r27, 0x00	; 0
    169e:	e8 e3       	ldi	r30, 0x38	; 56
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	90 81       	ld	r25, Z
    16a4:	8a 81       	ldd	r24, Y+2	; 0x02
    16a6:	89 2b       	or	r24, r25
    16a8:	8c 93       	st	X, r24
    16aa:	1f c0       	rjmp	.+62     	; 0x16ea <GPIO_voidWriteLowNipple+0xd2>
				break;
			case GPIOC :
				PORTC &= 0xF0 ; 
    16ac:	a5 e3       	ldi	r26, 0x35	; 53
    16ae:	b0 e0       	ldi	r27, 0x00	; 0
    16b0:	e5 e3       	ldi	r30, 0x35	; 53
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	80 81       	ld	r24, Z
    16b6:	80 7f       	andi	r24, 0xF0	; 240
    16b8:	8c 93       	st	X, r24
				PORTC |= copy_u8Value ;
    16ba:	a5 e3       	ldi	r26, 0x35	; 53
    16bc:	b0 e0       	ldi	r27, 0x00	; 0
    16be:	e5 e3       	ldi	r30, 0x35	; 53
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	90 81       	ld	r25, Z
    16c4:	8a 81       	ldd	r24, Y+2	; 0x02
    16c6:	89 2b       	or	r24, r25
    16c8:	8c 93       	st	X, r24
    16ca:	0f c0       	rjmp	.+30     	; 0x16ea <GPIO_voidWriteLowNipple+0xd2>
				break;
			case GPIOD :
				PORTD &= 0xF0 ; 
    16cc:	a2 e3       	ldi	r26, 0x32	; 50
    16ce:	b0 e0       	ldi	r27, 0x00	; 0
    16d0:	e2 e3       	ldi	r30, 0x32	; 50
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	80 81       	ld	r24, Z
    16d6:	80 7f       	andi	r24, 0xF0	; 240
    16d8:	8c 93       	st	X, r24
				PORTD |= copy_u8Value ;
    16da:	a2 e3       	ldi	r26, 0x32	; 50
    16dc:	b0 e0       	ldi	r27, 0x00	; 0
    16de:	e2 e3       	ldi	r30, 0x32	; 50
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	90 81       	ld	r25, Z
    16e4:	8a 81       	ldd	r24, Y+2	; 0x02
    16e6:	89 2b       	or	r24, r25
    16e8:	8c 93       	st	X, r24
				break;	
		}
	}
    16ea:	0f 90       	pop	r0
    16ec:	0f 90       	pop	r0
    16ee:	0f 90       	pop	r0
    16f0:	0f 90       	pop	r0
    16f2:	cf 91       	pop	r28
    16f4:	df 91       	pop	r29
    16f6:	08 95       	ret

000016f8 <GPIO_voidWriteHighNipple>:
	void GPIO_voidWriteHighNipple (u8 copy_u8Port , u8 copy_u8Value )
	{
    16f8:	df 93       	push	r29
    16fa:	cf 93       	push	r28
    16fc:	00 d0       	rcall	.+0      	; 0x16fe <GPIO_voidWriteHighNipple+0x6>
    16fe:	00 d0       	rcall	.+0      	; 0x1700 <GPIO_voidWriteHighNipple+0x8>
    1700:	cd b7       	in	r28, 0x3d	; 61
    1702:	de b7       	in	r29, 0x3e	; 62
    1704:	89 83       	std	Y+1, r24	; 0x01
    1706:	6a 83       	std	Y+2, r22	; 0x02
		copy_u8Value &= 0xF0;
    1708:	8a 81       	ldd	r24, Y+2	; 0x02
    170a:	80 7f       	andi	r24, 0xF0	; 240
    170c:	8a 83       	std	Y+2, r24	; 0x02
		switch (copy_u8Port) {
    170e:	89 81       	ldd	r24, Y+1	; 0x01
    1710:	28 2f       	mov	r18, r24
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	3c 83       	std	Y+4, r19	; 0x04
    1716:	2b 83       	std	Y+3, r18	; 0x03
    1718:	8b 81       	ldd	r24, Y+3	; 0x03
    171a:	9c 81       	ldd	r25, Y+4	; 0x04
    171c:	81 30       	cpi	r24, 0x01	; 1
    171e:	91 05       	cpc	r25, r1
    1720:	29 f1       	breq	.+74     	; 0x176c <GPIO_voidWriteHighNipple+0x74>
    1722:	2b 81       	ldd	r18, Y+3	; 0x03
    1724:	3c 81       	ldd	r19, Y+4	; 0x04
    1726:	22 30       	cpi	r18, 0x02	; 2
    1728:	31 05       	cpc	r19, r1
    172a:	2c f4       	brge	.+10     	; 0x1736 <GPIO_voidWriteHighNipple+0x3e>
    172c:	8b 81       	ldd	r24, Y+3	; 0x03
    172e:	9c 81       	ldd	r25, Y+4	; 0x04
    1730:	00 97       	sbiw	r24, 0x00	; 0
    1732:	61 f0       	breq	.+24     	; 0x174c <GPIO_voidWriteHighNipple+0x54>
    1734:	4a c0       	rjmp	.+148    	; 0x17ca <GPIO_voidWriteHighNipple+0xd2>
    1736:	2b 81       	ldd	r18, Y+3	; 0x03
    1738:	3c 81       	ldd	r19, Y+4	; 0x04
    173a:	22 30       	cpi	r18, 0x02	; 2
    173c:	31 05       	cpc	r19, r1
    173e:	31 f1       	breq	.+76     	; 0x178c <GPIO_voidWriteHighNipple+0x94>
    1740:	8b 81       	ldd	r24, Y+3	; 0x03
    1742:	9c 81       	ldd	r25, Y+4	; 0x04
    1744:	83 30       	cpi	r24, 0x03	; 3
    1746:	91 05       	cpc	r25, r1
    1748:	89 f1       	breq	.+98     	; 0x17ac <GPIO_voidWriteHighNipple+0xb4>
    174a:	3f c0       	rjmp	.+126    	; 0x17ca <GPIO_voidWriteHighNipple+0xd2>
			case GPIOA :
				PORTA &= 0x0F ; 
    174c:	ab e3       	ldi	r26, 0x3B	; 59
    174e:	b0 e0       	ldi	r27, 0x00	; 0
    1750:	eb e3       	ldi	r30, 0x3B	; 59
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	80 81       	ld	r24, Z
    1756:	8f 70       	andi	r24, 0x0F	; 15
    1758:	8c 93       	st	X, r24
				PORTA |= copy_u8Value ;
    175a:	ab e3       	ldi	r26, 0x3B	; 59
    175c:	b0 e0       	ldi	r27, 0x00	; 0
    175e:	eb e3       	ldi	r30, 0x3B	; 59
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	90 81       	ld	r25, Z
    1764:	8a 81       	ldd	r24, Y+2	; 0x02
    1766:	89 2b       	or	r24, r25
    1768:	8c 93       	st	X, r24
    176a:	2f c0       	rjmp	.+94     	; 0x17ca <GPIO_voidWriteHighNipple+0xd2>
				break;
			case GPIOB :
				PORTB &= 0x0F ; 
    176c:	a8 e3       	ldi	r26, 0x38	; 56
    176e:	b0 e0       	ldi	r27, 0x00	; 0
    1770:	e8 e3       	ldi	r30, 0x38	; 56
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	80 81       	ld	r24, Z
    1776:	8f 70       	andi	r24, 0x0F	; 15
    1778:	8c 93       	st	X, r24
				PORTB |= copy_u8Value ;
    177a:	a8 e3       	ldi	r26, 0x38	; 56
    177c:	b0 e0       	ldi	r27, 0x00	; 0
    177e:	e8 e3       	ldi	r30, 0x38	; 56
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	90 81       	ld	r25, Z
    1784:	8a 81       	ldd	r24, Y+2	; 0x02
    1786:	89 2b       	or	r24, r25
    1788:	8c 93       	st	X, r24
    178a:	1f c0       	rjmp	.+62     	; 0x17ca <GPIO_voidWriteHighNipple+0xd2>
				break;
			case GPIOC :
				PORTC &= 0x0F ; 
    178c:	a5 e3       	ldi	r26, 0x35	; 53
    178e:	b0 e0       	ldi	r27, 0x00	; 0
    1790:	e5 e3       	ldi	r30, 0x35	; 53
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	80 81       	ld	r24, Z
    1796:	8f 70       	andi	r24, 0x0F	; 15
    1798:	8c 93       	st	X, r24
				PORTC |= copy_u8Value ;
    179a:	a5 e3       	ldi	r26, 0x35	; 53
    179c:	b0 e0       	ldi	r27, 0x00	; 0
    179e:	e5 e3       	ldi	r30, 0x35	; 53
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	90 81       	ld	r25, Z
    17a4:	8a 81       	ldd	r24, Y+2	; 0x02
    17a6:	89 2b       	or	r24, r25
    17a8:	8c 93       	st	X, r24
    17aa:	0f c0       	rjmp	.+30     	; 0x17ca <GPIO_voidWriteHighNipple+0xd2>
				break;
			case GPIOD :
				PORTD &= 0x0F ; 
    17ac:	a2 e3       	ldi	r26, 0x32	; 50
    17ae:	b0 e0       	ldi	r27, 0x00	; 0
    17b0:	e2 e3       	ldi	r30, 0x32	; 50
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	80 81       	ld	r24, Z
    17b6:	8f 70       	andi	r24, 0x0F	; 15
    17b8:	8c 93       	st	X, r24
				PORTD |= copy_u8Value ;
    17ba:	a2 e3       	ldi	r26, 0x32	; 50
    17bc:	b0 e0       	ldi	r27, 0x00	; 0
    17be:	e2 e3       	ldi	r30, 0x32	; 50
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	90 81       	ld	r25, Z
    17c4:	8a 81       	ldd	r24, Y+2	; 0x02
    17c6:	89 2b       	or	r24, r25
    17c8:	8c 93       	st	X, r24
				break;	
		}
	}
    17ca:	0f 90       	pop	r0
    17cc:	0f 90       	pop	r0
    17ce:	0f 90       	pop	r0
    17d0:	0f 90       	pop	r0
    17d2:	cf 91       	pop	r28
    17d4:	df 91       	pop	r29
    17d6:	08 95       	ret

000017d8 <LCD_voidInit>:
#include "util/delay.h"



void LCD_voidInit()
{
    17d8:	0f 93       	push	r16
    17da:	1f 93       	push	r17
    17dc:	df 93       	push	r29
    17de:	cf 93       	push	r28
    17e0:	cd b7       	in	r28, 0x3d	; 61
    17e2:	de b7       	in	r29, 0x3e	; 62
    17e4:	c4 55       	subi	r28, 0x54	; 84
    17e6:	d0 40       	sbci	r29, 0x00	; 0
    17e8:	0f b6       	in	r0, 0x3f	; 63
    17ea:	f8 94       	cli
    17ec:	de bf       	out	0x3e, r29	; 62
    17ee:	0f be       	out	0x3f, r0	; 63
    17f0:	cd bf       	out	0x3d, r28	; 61
    17f2:	fe 01       	movw	r30, r28
    17f4:	ef 5a       	subi	r30, 0xAF	; 175
    17f6:	ff 4f       	sbci	r31, 0xFF	; 255
    17f8:	80 e0       	ldi	r24, 0x00	; 0
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	a0 e2       	ldi	r26, 0x20	; 32
    17fe:	b2 e4       	ldi	r27, 0x42	; 66
    1800:	80 83       	st	Z, r24
    1802:	91 83       	std	Z+1, r25	; 0x01
    1804:	a2 83       	std	Z+2, r26	; 0x02
    1806:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1808:	8e 01       	movw	r16, r28
    180a:	03 5b       	subi	r16, 0xB3	; 179
    180c:	1f 4f       	sbci	r17, 0xFF	; 255
    180e:	fe 01       	movw	r30, r28
    1810:	ef 5a       	subi	r30, 0xAF	; 175
    1812:	ff 4f       	sbci	r31, 0xFF	; 255
    1814:	60 81       	ld	r22, Z
    1816:	71 81       	ldd	r23, Z+1	; 0x01
    1818:	82 81       	ldd	r24, Z+2	; 0x02
    181a:	93 81       	ldd	r25, Z+3	; 0x03
    181c:	20 e0       	ldi	r18, 0x00	; 0
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	4a ef       	ldi	r20, 0xFA	; 250
    1822:	54 e4       	ldi	r21, 0x44	; 68
    1824:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1828:	dc 01       	movw	r26, r24
    182a:	cb 01       	movw	r24, r22
    182c:	f8 01       	movw	r30, r16
    182e:	80 83       	st	Z, r24
    1830:	91 83       	std	Z+1, r25	; 0x01
    1832:	a2 83       	std	Z+2, r26	; 0x02
    1834:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1836:	fe 01       	movw	r30, r28
    1838:	e3 5b       	subi	r30, 0xB3	; 179
    183a:	ff 4f       	sbci	r31, 0xFF	; 255
    183c:	60 81       	ld	r22, Z
    183e:	71 81       	ldd	r23, Z+1	; 0x01
    1840:	82 81       	ldd	r24, Z+2	; 0x02
    1842:	93 81       	ldd	r25, Z+3	; 0x03
    1844:	20 e0       	ldi	r18, 0x00	; 0
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	40 e8       	ldi	r20, 0x80	; 128
    184a:	5f e3       	ldi	r21, 0x3F	; 63
    184c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1850:	88 23       	and	r24, r24
    1852:	44 f4       	brge	.+16     	; 0x1864 <LCD_voidInit+0x8c>
		__ticks = 1;
    1854:	fe 01       	movw	r30, r28
    1856:	e5 5b       	subi	r30, 0xB5	; 181
    1858:	ff 4f       	sbci	r31, 0xFF	; 255
    185a:	81 e0       	ldi	r24, 0x01	; 1
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	91 83       	std	Z+1, r25	; 0x01
    1860:	80 83       	st	Z, r24
    1862:	64 c0       	rjmp	.+200    	; 0x192c <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    1864:	fe 01       	movw	r30, r28
    1866:	e3 5b       	subi	r30, 0xB3	; 179
    1868:	ff 4f       	sbci	r31, 0xFF	; 255
    186a:	60 81       	ld	r22, Z
    186c:	71 81       	ldd	r23, Z+1	; 0x01
    186e:	82 81       	ldd	r24, Z+2	; 0x02
    1870:	93 81       	ldd	r25, Z+3	; 0x03
    1872:	20 e0       	ldi	r18, 0x00	; 0
    1874:	3f ef       	ldi	r19, 0xFF	; 255
    1876:	4f e7       	ldi	r20, 0x7F	; 127
    1878:	57 e4       	ldi	r21, 0x47	; 71
    187a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    187e:	18 16       	cp	r1, r24
    1880:	0c f0       	brlt	.+2      	; 0x1884 <LCD_voidInit+0xac>
    1882:	43 c0       	rjmp	.+134    	; 0x190a <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1884:	fe 01       	movw	r30, r28
    1886:	ef 5a       	subi	r30, 0xAF	; 175
    1888:	ff 4f       	sbci	r31, 0xFF	; 255
    188a:	60 81       	ld	r22, Z
    188c:	71 81       	ldd	r23, Z+1	; 0x01
    188e:	82 81       	ldd	r24, Z+2	; 0x02
    1890:	93 81       	ldd	r25, Z+3	; 0x03
    1892:	20 e0       	ldi	r18, 0x00	; 0
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	40 e2       	ldi	r20, 0x20	; 32
    1898:	51 e4       	ldi	r21, 0x41	; 65
    189a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    189e:	dc 01       	movw	r26, r24
    18a0:	cb 01       	movw	r24, r22
    18a2:	8e 01       	movw	r16, r28
    18a4:	05 5b       	subi	r16, 0xB5	; 181
    18a6:	1f 4f       	sbci	r17, 0xFF	; 255
    18a8:	bc 01       	movw	r22, r24
    18aa:	cd 01       	movw	r24, r26
    18ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18b0:	dc 01       	movw	r26, r24
    18b2:	cb 01       	movw	r24, r22
    18b4:	f8 01       	movw	r30, r16
    18b6:	91 83       	std	Z+1, r25	; 0x01
    18b8:	80 83       	st	Z, r24
    18ba:	1f c0       	rjmp	.+62     	; 0x18fa <LCD_voidInit+0x122>
    18bc:	fe 01       	movw	r30, r28
    18be:	e7 5b       	subi	r30, 0xB7	; 183
    18c0:	ff 4f       	sbci	r31, 0xFF	; 255
    18c2:	88 ec       	ldi	r24, 0xC8	; 200
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	91 83       	std	Z+1, r25	; 0x01
    18c8:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18ca:	fe 01       	movw	r30, r28
    18cc:	e7 5b       	subi	r30, 0xB7	; 183
    18ce:	ff 4f       	sbci	r31, 0xFF	; 255
    18d0:	80 81       	ld	r24, Z
    18d2:	91 81       	ldd	r25, Z+1	; 0x01
    18d4:	01 97       	sbiw	r24, 0x01	; 1
    18d6:	f1 f7       	brne	.-4      	; 0x18d4 <LCD_voidInit+0xfc>
    18d8:	fe 01       	movw	r30, r28
    18da:	e7 5b       	subi	r30, 0xB7	; 183
    18dc:	ff 4f       	sbci	r31, 0xFF	; 255
    18de:	91 83       	std	Z+1, r25	; 0x01
    18e0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18e2:	de 01       	movw	r26, r28
    18e4:	a5 5b       	subi	r26, 0xB5	; 181
    18e6:	bf 4f       	sbci	r27, 0xFF	; 255
    18e8:	fe 01       	movw	r30, r28
    18ea:	e5 5b       	subi	r30, 0xB5	; 181
    18ec:	ff 4f       	sbci	r31, 0xFF	; 255
    18ee:	80 81       	ld	r24, Z
    18f0:	91 81       	ldd	r25, Z+1	; 0x01
    18f2:	01 97       	sbiw	r24, 0x01	; 1
    18f4:	11 96       	adiw	r26, 0x01	; 1
    18f6:	9c 93       	st	X, r25
    18f8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18fa:	fe 01       	movw	r30, r28
    18fc:	e5 5b       	subi	r30, 0xB5	; 181
    18fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1900:	80 81       	ld	r24, Z
    1902:	91 81       	ldd	r25, Z+1	; 0x01
    1904:	00 97       	sbiw	r24, 0x00	; 0
    1906:	d1 f6       	brne	.-76     	; 0x18bc <LCD_voidInit+0xe4>
    1908:	27 c0       	rjmp	.+78     	; 0x1958 <LCD_voidInit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    190a:	8e 01       	movw	r16, r28
    190c:	05 5b       	subi	r16, 0xB5	; 181
    190e:	1f 4f       	sbci	r17, 0xFF	; 255
    1910:	fe 01       	movw	r30, r28
    1912:	e3 5b       	subi	r30, 0xB3	; 179
    1914:	ff 4f       	sbci	r31, 0xFF	; 255
    1916:	60 81       	ld	r22, Z
    1918:	71 81       	ldd	r23, Z+1	; 0x01
    191a:	82 81       	ldd	r24, Z+2	; 0x02
    191c:	93 81       	ldd	r25, Z+3	; 0x03
    191e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1922:	dc 01       	movw	r26, r24
    1924:	cb 01       	movw	r24, r22
    1926:	f8 01       	movw	r30, r16
    1928:	91 83       	std	Z+1, r25	; 0x01
    192a:	80 83       	st	Z, r24
    192c:	de 01       	movw	r26, r28
    192e:	a9 5b       	subi	r26, 0xB9	; 185
    1930:	bf 4f       	sbci	r27, 0xFF	; 255
    1932:	fe 01       	movw	r30, r28
    1934:	e5 5b       	subi	r30, 0xB5	; 181
    1936:	ff 4f       	sbci	r31, 0xFF	; 255
    1938:	80 81       	ld	r24, Z
    193a:	91 81       	ldd	r25, Z+1	; 0x01
    193c:	8d 93       	st	X+, r24
    193e:	9c 93       	st	X, r25
    1940:	fe 01       	movw	r30, r28
    1942:	e9 5b       	subi	r30, 0xB9	; 185
    1944:	ff 4f       	sbci	r31, 0xFF	; 255
    1946:	80 81       	ld	r24, Z
    1948:	91 81       	ldd	r25, Z+1	; 0x01
    194a:	01 97       	sbiw	r24, 0x01	; 1
    194c:	f1 f7       	brne	.-4      	; 0x194a <LCD_voidInit+0x172>
    194e:	fe 01       	movw	r30, r28
    1950:	e9 5b       	subi	r30, 0xB9	; 185
    1952:	ff 4f       	sbci	r31, 0xFF	; 255
    1954:	91 83       	std	Z+1, r25	; 0x01
    1956:	80 83       	st	Z, r24
	_delay_ms(40);
	
	GPIO_voidSetPinDDR(LCD_RSPORT , LCD_RSPIN , OUTPUT);
    1958:	82 e0       	ldi	r24, 0x02	; 2
    195a:	60 e0       	ldi	r22, 0x00	; 0
    195c:	41 e0       	ldi	r20, 0x01	; 1
    195e:	0e 94 49 07 	call	0xe92	; 0xe92 <GPIO_voidSetPinDDR>
	GPIO_voidSetPinDDR(LCD_RWPORT , LCD_RWPIN , OUTPUT);
    1962:	82 e0       	ldi	r24, 0x02	; 2
    1964:	61 e0       	ldi	r22, 0x01	; 1
    1966:	41 e0       	ldi	r20, 0x01	; 1
    1968:	0e 94 49 07 	call	0xe92	; 0xe92 <GPIO_voidSetPinDDR>
	GPIO_voidSetPinDDR(LCD_ENPORT , LCD_ENPIN , OUTPUT);
    196c:	82 e0       	ldi	r24, 0x02	; 2
    196e:	62 e0       	ldi	r22, 0x02	; 2
    1970:	41 e0       	ldi	r20, 0x01	; 1
    1972:	0e 94 49 07 	call	0xe92	; 0xe92 <GPIO_voidSetPinDDR>
		LCD_voidSendCmd(LCD_ENTRY_MODE);
		_delay_ms(1);
		
	#elif LCD_MODE == 1 
		#if LCD_NIBBLE == 0 
			GPIO_voidSetLowNippleDDR(LCD_PORT , OUTPUT);
    1976:	83 e0       	ldi	r24, 0x03	; 3
    1978:	61 e0       	ldi	r22, 0x01	; 1
    197a:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <GPIO_voidSetLowNippleDDR>
			LCD_voidSendCmd(LCD_RETURN_HOME);
    197e:	82 e0       	ldi	r24, 0x02	; 2
    1980:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <LCD_voidSendCmd>
    1984:	fe 01       	movw	r30, r28
    1986:	ed 5b       	subi	r30, 0xBD	; 189
    1988:	ff 4f       	sbci	r31, 0xFF	; 255
    198a:	80 e0       	ldi	r24, 0x00	; 0
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	a0 e7       	ldi	r26, 0x70	; 112
    1990:	b1 e4       	ldi	r27, 0x41	; 65
    1992:	80 83       	st	Z, r24
    1994:	91 83       	std	Z+1, r25	; 0x01
    1996:	a2 83       	std	Z+2, r26	; 0x02
    1998:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    199a:	8e 01       	movw	r16, r28
    199c:	01 5c       	subi	r16, 0xC1	; 193
    199e:	1f 4f       	sbci	r17, 0xFF	; 255
    19a0:	fe 01       	movw	r30, r28
    19a2:	ed 5b       	subi	r30, 0xBD	; 189
    19a4:	ff 4f       	sbci	r31, 0xFF	; 255
    19a6:	60 81       	ld	r22, Z
    19a8:	71 81       	ldd	r23, Z+1	; 0x01
    19aa:	82 81       	ldd	r24, Z+2	; 0x02
    19ac:	93 81       	ldd	r25, Z+3	; 0x03
    19ae:	20 e0       	ldi	r18, 0x00	; 0
    19b0:	30 e0       	ldi	r19, 0x00	; 0
    19b2:	4a ef       	ldi	r20, 0xFA	; 250
    19b4:	54 e4       	ldi	r21, 0x44	; 68
    19b6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19ba:	dc 01       	movw	r26, r24
    19bc:	cb 01       	movw	r24, r22
    19be:	f8 01       	movw	r30, r16
    19c0:	80 83       	st	Z, r24
    19c2:	91 83       	std	Z+1, r25	; 0x01
    19c4:	a2 83       	std	Z+2, r26	; 0x02
    19c6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19c8:	fe 01       	movw	r30, r28
    19ca:	ff 96       	adiw	r30, 0x3f	; 63
    19cc:	60 81       	ld	r22, Z
    19ce:	71 81       	ldd	r23, Z+1	; 0x01
    19d0:	82 81       	ldd	r24, Z+2	; 0x02
    19d2:	93 81       	ldd	r25, Z+3	; 0x03
    19d4:	20 e0       	ldi	r18, 0x00	; 0
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	40 e8       	ldi	r20, 0x80	; 128
    19da:	5f e3       	ldi	r21, 0x3F	; 63
    19dc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    19e0:	88 23       	and	r24, r24
    19e2:	2c f4       	brge	.+10     	; 0x19ee <LCD_voidInit+0x216>
		__ticks = 1;
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	9e af       	std	Y+62, r25	; 0x3e
    19ea:	8d af       	std	Y+61, r24	; 0x3d
    19ec:	46 c0       	rjmp	.+140    	; 0x1a7a <LCD_voidInit+0x2a2>
	else if (__tmp > 65535)
    19ee:	fe 01       	movw	r30, r28
    19f0:	ff 96       	adiw	r30, 0x3f	; 63
    19f2:	60 81       	ld	r22, Z
    19f4:	71 81       	ldd	r23, Z+1	; 0x01
    19f6:	82 81       	ldd	r24, Z+2	; 0x02
    19f8:	93 81       	ldd	r25, Z+3	; 0x03
    19fa:	20 e0       	ldi	r18, 0x00	; 0
    19fc:	3f ef       	ldi	r19, 0xFF	; 255
    19fe:	4f e7       	ldi	r20, 0x7F	; 127
    1a00:	57 e4       	ldi	r21, 0x47	; 71
    1a02:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a06:	18 16       	cp	r1, r24
    1a08:	64 f5       	brge	.+88     	; 0x1a62 <LCD_voidInit+0x28a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a0a:	fe 01       	movw	r30, r28
    1a0c:	ed 5b       	subi	r30, 0xBD	; 189
    1a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a10:	60 81       	ld	r22, Z
    1a12:	71 81       	ldd	r23, Z+1	; 0x01
    1a14:	82 81       	ldd	r24, Z+2	; 0x02
    1a16:	93 81       	ldd	r25, Z+3	; 0x03
    1a18:	20 e0       	ldi	r18, 0x00	; 0
    1a1a:	30 e0       	ldi	r19, 0x00	; 0
    1a1c:	40 e2       	ldi	r20, 0x20	; 32
    1a1e:	51 e4       	ldi	r21, 0x41	; 65
    1a20:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a24:	dc 01       	movw	r26, r24
    1a26:	cb 01       	movw	r24, r22
    1a28:	bc 01       	movw	r22, r24
    1a2a:	cd 01       	movw	r24, r26
    1a2c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a30:	dc 01       	movw	r26, r24
    1a32:	cb 01       	movw	r24, r22
    1a34:	9e af       	std	Y+62, r25	; 0x3e
    1a36:	8d af       	std	Y+61, r24	; 0x3d
    1a38:	0f c0       	rjmp	.+30     	; 0x1a58 <LCD_voidInit+0x280>
    1a3a:	88 ec       	ldi	r24, 0xC8	; 200
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	9c af       	std	Y+60, r25	; 0x3c
    1a40:	8b af       	std	Y+59, r24	; 0x3b
    1a42:	8b ad       	ldd	r24, Y+59	; 0x3b
    1a44:	9c ad       	ldd	r25, Y+60	; 0x3c
    1a46:	01 97       	sbiw	r24, 0x01	; 1
    1a48:	f1 f7       	brne	.-4      	; 0x1a46 <LCD_voidInit+0x26e>
    1a4a:	9c af       	std	Y+60, r25	; 0x3c
    1a4c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a4e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a50:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a52:	01 97       	sbiw	r24, 0x01	; 1
    1a54:	9e af       	std	Y+62, r25	; 0x3e
    1a56:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a58:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a5a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a5c:	00 97       	sbiw	r24, 0x00	; 0
    1a5e:	69 f7       	brne	.-38     	; 0x1a3a <LCD_voidInit+0x262>
    1a60:	16 c0       	rjmp	.+44     	; 0x1a8e <LCD_voidInit+0x2b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a62:	fe 01       	movw	r30, r28
    1a64:	ff 96       	adiw	r30, 0x3f	; 63
    1a66:	60 81       	ld	r22, Z
    1a68:	71 81       	ldd	r23, Z+1	; 0x01
    1a6a:	82 81       	ldd	r24, Z+2	; 0x02
    1a6c:	93 81       	ldd	r25, Z+3	; 0x03
    1a6e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a72:	dc 01       	movw	r26, r24
    1a74:	cb 01       	movw	r24, r22
    1a76:	9e af       	std	Y+62, r25	; 0x3e
    1a78:	8d af       	std	Y+61, r24	; 0x3d
    1a7a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a7c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a7e:	9a af       	std	Y+58, r25	; 0x3a
    1a80:	89 af       	std	Y+57, r24	; 0x39
    1a82:	89 ad       	ldd	r24, Y+57	; 0x39
    1a84:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a86:	01 97       	sbiw	r24, 0x01	; 1
    1a88:	f1 f7       	brne	.-4      	; 0x1a86 <LCD_voidInit+0x2ae>
    1a8a:	9a af       	std	Y+58, r25	; 0x3a
    1a8c:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(15);
			LCD_voidSendCmd(LCD_Function_4BIT_2Lines);
    1a8e:	88 e2       	ldi	r24, 0x28	; 40
    1a90:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <LCD_voidSendCmd>
    1a94:	80 e0       	ldi	r24, 0x00	; 0
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	a0 e8       	ldi	r26, 0x80	; 128
    1a9a:	bf e3       	ldi	r27, 0x3F	; 63
    1a9c:	8d ab       	std	Y+53, r24	; 0x35
    1a9e:	9e ab       	std	Y+54, r25	; 0x36
    1aa0:	af ab       	std	Y+55, r26	; 0x37
    1aa2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aa4:	6d a9       	ldd	r22, Y+53	; 0x35
    1aa6:	7e a9       	ldd	r23, Y+54	; 0x36
    1aa8:	8f a9       	ldd	r24, Y+55	; 0x37
    1aaa:	98 ad       	ldd	r25, Y+56	; 0x38
    1aac:	20 e0       	ldi	r18, 0x00	; 0
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	4a ef       	ldi	r20, 0xFA	; 250
    1ab2:	54 e4       	ldi	r21, 0x44	; 68
    1ab4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ab8:	dc 01       	movw	r26, r24
    1aba:	cb 01       	movw	r24, r22
    1abc:	89 ab       	std	Y+49, r24	; 0x31
    1abe:	9a ab       	std	Y+50, r25	; 0x32
    1ac0:	ab ab       	std	Y+51, r26	; 0x33
    1ac2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ac4:	69 a9       	ldd	r22, Y+49	; 0x31
    1ac6:	7a a9       	ldd	r23, Y+50	; 0x32
    1ac8:	8b a9       	ldd	r24, Y+51	; 0x33
    1aca:	9c a9       	ldd	r25, Y+52	; 0x34
    1acc:	20 e0       	ldi	r18, 0x00	; 0
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	40 e8       	ldi	r20, 0x80	; 128
    1ad2:	5f e3       	ldi	r21, 0x3F	; 63
    1ad4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ad8:	88 23       	and	r24, r24
    1ada:	2c f4       	brge	.+10     	; 0x1ae6 <LCD_voidInit+0x30e>
		__ticks = 1;
    1adc:	81 e0       	ldi	r24, 0x01	; 1
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	98 ab       	std	Y+48, r25	; 0x30
    1ae2:	8f a7       	std	Y+47, r24	; 0x2f
    1ae4:	3f c0       	rjmp	.+126    	; 0x1b64 <LCD_voidInit+0x38c>
	else if (__tmp > 65535)
    1ae6:	69 a9       	ldd	r22, Y+49	; 0x31
    1ae8:	7a a9       	ldd	r23, Y+50	; 0x32
    1aea:	8b a9       	ldd	r24, Y+51	; 0x33
    1aec:	9c a9       	ldd	r25, Y+52	; 0x34
    1aee:	20 e0       	ldi	r18, 0x00	; 0
    1af0:	3f ef       	ldi	r19, 0xFF	; 255
    1af2:	4f e7       	ldi	r20, 0x7F	; 127
    1af4:	57 e4       	ldi	r21, 0x47	; 71
    1af6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1afa:	18 16       	cp	r1, r24
    1afc:	4c f5       	brge	.+82     	; 0x1b50 <LCD_voidInit+0x378>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1afe:	6d a9       	ldd	r22, Y+53	; 0x35
    1b00:	7e a9       	ldd	r23, Y+54	; 0x36
    1b02:	8f a9       	ldd	r24, Y+55	; 0x37
    1b04:	98 ad       	ldd	r25, Y+56	; 0x38
    1b06:	20 e0       	ldi	r18, 0x00	; 0
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	40 e2       	ldi	r20, 0x20	; 32
    1b0c:	51 e4       	ldi	r21, 0x41	; 65
    1b0e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b12:	dc 01       	movw	r26, r24
    1b14:	cb 01       	movw	r24, r22
    1b16:	bc 01       	movw	r22, r24
    1b18:	cd 01       	movw	r24, r26
    1b1a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b1e:	dc 01       	movw	r26, r24
    1b20:	cb 01       	movw	r24, r22
    1b22:	98 ab       	std	Y+48, r25	; 0x30
    1b24:	8f a7       	std	Y+47, r24	; 0x2f
    1b26:	0f c0       	rjmp	.+30     	; 0x1b46 <LCD_voidInit+0x36e>
    1b28:	88 ec       	ldi	r24, 0xC8	; 200
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	9e a7       	std	Y+46, r25	; 0x2e
    1b2e:	8d a7       	std	Y+45, r24	; 0x2d
    1b30:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b32:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b34:	01 97       	sbiw	r24, 0x01	; 1
    1b36:	f1 f7       	brne	.-4      	; 0x1b34 <LCD_voidInit+0x35c>
    1b38:	9e a7       	std	Y+46, r25	; 0x2e
    1b3a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b3c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b3e:	98 a9       	ldd	r25, Y+48	; 0x30
    1b40:	01 97       	sbiw	r24, 0x01	; 1
    1b42:	98 ab       	std	Y+48, r25	; 0x30
    1b44:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b46:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b48:	98 a9       	ldd	r25, Y+48	; 0x30
    1b4a:	00 97       	sbiw	r24, 0x00	; 0
    1b4c:	69 f7       	brne	.-38     	; 0x1b28 <LCD_voidInit+0x350>
    1b4e:	14 c0       	rjmp	.+40     	; 0x1b78 <LCD_voidInit+0x3a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b50:	69 a9       	ldd	r22, Y+49	; 0x31
    1b52:	7a a9       	ldd	r23, Y+50	; 0x32
    1b54:	8b a9       	ldd	r24, Y+51	; 0x33
    1b56:	9c a9       	ldd	r25, Y+52	; 0x34
    1b58:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b5c:	dc 01       	movw	r26, r24
    1b5e:	cb 01       	movw	r24, r22
    1b60:	98 ab       	std	Y+48, r25	; 0x30
    1b62:	8f a7       	std	Y+47, r24	; 0x2f
    1b64:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b66:	98 a9       	ldd	r25, Y+48	; 0x30
    1b68:	9c a7       	std	Y+44, r25	; 0x2c
    1b6a:	8b a7       	std	Y+43, r24	; 0x2b
    1b6c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b6e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b70:	01 97       	sbiw	r24, 0x01	; 1
    1b72:	f1 f7       	brne	.-4      	; 0x1b70 <LCD_voidInit+0x398>
    1b74:	9c a7       	std	Y+44, r25	; 0x2c
    1b76:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(1);
		    LCD_voidSendCmd(LCD_DISP_ON_CURSOR_ON);
    1b78:	8e e0       	ldi	r24, 0x0E	; 14
    1b7a:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <LCD_voidSendCmd>
    1b7e:	80 e0       	ldi	r24, 0x00	; 0
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	a0 e8       	ldi	r26, 0x80	; 128
    1b84:	bf e3       	ldi	r27, 0x3F	; 63
    1b86:	8f a3       	std	Y+39, r24	; 0x27
    1b88:	98 a7       	std	Y+40, r25	; 0x28
    1b8a:	a9 a7       	std	Y+41, r26	; 0x29
    1b8c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b8e:	6f a1       	ldd	r22, Y+39	; 0x27
    1b90:	78 a5       	ldd	r23, Y+40	; 0x28
    1b92:	89 a5       	ldd	r24, Y+41	; 0x29
    1b94:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b96:	20 e0       	ldi	r18, 0x00	; 0
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	4a ef       	ldi	r20, 0xFA	; 250
    1b9c:	54 e4       	ldi	r21, 0x44	; 68
    1b9e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ba2:	dc 01       	movw	r26, r24
    1ba4:	cb 01       	movw	r24, r22
    1ba6:	8b a3       	std	Y+35, r24	; 0x23
    1ba8:	9c a3       	std	Y+36, r25	; 0x24
    1baa:	ad a3       	std	Y+37, r26	; 0x25
    1bac:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1bae:	6b a1       	ldd	r22, Y+35	; 0x23
    1bb0:	7c a1       	ldd	r23, Y+36	; 0x24
    1bb2:	8d a1       	ldd	r24, Y+37	; 0x25
    1bb4:	9e a1       	ldd	r25, Y+38	; 0x26
    1bb6:	20 e0       	ldi	r18, 0x00	; 0
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	40 e8       	ldi	r20, 0x80	; 128
    1bbc:	5f e3       	ldi	r21, 0x3F	; 63
    1bbe:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1bc2:	88 23       	and	r24, r24
    1bc4:	2c f4       	brge	.+10     	; 0x1bd0 <LCD_voidInit+0x3f8>
		__ticks = 1;
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	9a a3       	std	Y+34, r25	; 0x22
    1bcc:	89 a3       	std	Y+33, r24	; 0x21
    1bce:	3f c0       	rjmp	.+126    	; 0x1c4e <LCD_voidInit+0x476>
	else if (__tmp > 65535)
    1bd0:	6b a1       	ldd	r22, Y+35	; 0x23
    1bd2:	7c a1       	ldd	r23, Y+36	; 0x24
    1bd4:	8d a1       	ldd	r24, Y+37	; 0x25
    1bd6:	9e a1       	ldd	r25, Y+38	; 0x26
    1bd8:	20 e0       	ldi	r18, 0x00	; 0
    1bda:	3f ef       	ldi	r19, 0xFF	; 255
    1bdc:	4f e7       	ldi	r20, 0x7F	; 127
    1bde:	57 e4       	ldi	r21, 0x47	; 71
    1be0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1be4:	18 16       	cp	r1, r24
    1be6:	4c f5       	brge	.+82     	; 0x1c3a <LCD_voidInit+0x462>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1be8:	6f a1       	ldd	r22, Y+39	; 0x27
    1bea:	78 a5       	ldd	r23, Y+40	; 0x28
    1bec:	89 a5       	ldd	r24, Y+41	; 0x29
    1bee:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bf0:	20 e0       	ldi	r18, 0x00	; 0
    1bf2:	30 e0       	ldi	r19, 0x00	; 0
    1bf4:	40 e2       	ldi	r20, 0x20	; 32
    1bf6:	51 e4       	ldi	r21, 0x41	; 65
    1bf8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bfc:	dc 01       	movw	r26, r24
    1bfe:	cb 01       	movw	r24, r22
    1c00:	bc 01       	movw	r22, r24
    1c02:	cd 01       	movw	r24, r26
    1c04:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c08:	dc 01       	movw	r26, r24
    1c0a:	cb 01       	movw	r24, r22
    1c0c:	9a a3       	std	Y+34, r25	; 0x22
    1c0e:	89 a3       	std	Y+33, r24	; 0x21
    1c10:	0f c0       	rjmp	.+30     	; 0x1c30 <LCD_voidInit+0x458>
    1c12:	88 ec       	ldi	r24, 0xC8	; 200
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	98 a3       	std	Y+32, r25	; 0x20
    1c18:	8f 8f       	std	Y+31, r24	; 0x1f
    1c1a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c1c:	98 a1       	ldd	r25, Y+32	; 0x20
    1c1e:	01 97       	sbiw	r24, 0x01	; 1
    1c20:	f1 f7       	brne	.-4      	; 0x1c1e <LCD_voidInit+0x446>
    1c22:	98 a3       	std	Y+32, r25	; 0x20
    1c24:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c26:	89 a1       	ldd	r24, Y+33	; 0x21
    1c28:	9a a1       	ldd	r25, Y+34	; 0x22
    1c2a:	01 97       	sbiw	r24, 0x01	; 1
    1c2c:	9a a3       	std	Y+34, r25	; 0x22
    1c2e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c30:	89 a1       	ldd	r24, Y+33	; 0x21
    1c32:	9a a1       	ldd	r25, Y+34	; 0x22
    1c34:	00 97       	sbiw	r24, 0x00	; 0
    1c36:	69 f7       	brne	.-38     	; 0x1c12 <LCD_voidInit+0x43a>
    1c38:	14 c0       	rjmp	.+40     	; 0x1c62 <LCD_voidInit+0x48a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c3a:	6b a1       	ldd	r22, Y+35	; 0x23
    1c3c:	7c a1       	ldd	r23, Y+36	; 0x24
    1c3e:	8d a1       	ldd	r24, Y+37	; 0x25
    1c40:	9e a1       	ldd	r25, Y+38	; 0x26
    1c42:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c46:	dc 01       	movw	r26, r24
    1c48:	cb 01       	movw	r24, r22
    1c4a:	9a a3       	std	Y+34, r25	; 0x22
    1c4c:	89 a3       	std	Y+33, r24	; 0x21
    1c4e:	89 a1       	ldd	r24, Y+33	; 0x21
    1c50:	9a a1       	ldd	r25, Y+34	; 0x22
    1c52:	9e 8f       	std	Y+30, r25	; 0x1e
    1c54:	8d 8f       	std	Y+29, r24	; 0x1d
    1c56:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c58:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c5a:	01 97       	sbiw	r24, 0x01	; 1
    1c5c:	f1 f7       	brne	.-4      	; 0x1c5a <LCD_voidInit+0x482>
    1c5e:	9e 8f       	std	Y+30, r25	; 0x1e
    1c60:	8d 8f       	std	Y+29, r24	; 0x1d
		    _delay_ms(1);
		    LCD_voidSendCmd(LCD_CLEAR_SCREEN);
    1c62:	81 e0       	ldi	r24, 0x01	; 1
    1c64:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <LCD_voidSendCmd>
    1c68:	80 e0       	ldi	r24, 0x00	; 0
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	a0 e2       	ldi	r26, 0x20	; 32
    1c6e:	b1 e4       	ldi	r27, 0x41	; 65
    1c70:	89 8f       	std	Y+25, r24	; 0x19
    1c72:	9a 8f       	std	Y+26, r25	; 0x1a
    1c74:	ab 8f       	std	Y+27, r26	; 0x1b
    1c76:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c78:	69 8d       	ldd	r22, Y+25	; 0x19
    1c7a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c7c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c7e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c80:	20 e0       	ldi	r18, 0x00	; 0
    1c82:	30 e0       	ldi	r19, 0x00	; 0
    1c84:	4a ef       	ldi	r20, 0xFA	; 250
    1c86:	54 e4       	ldi	r21, 0x44	; 68
    1c88:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c8c:	dc 01       	movw	r26, r24
    1c8e:	cb 01       	movw	r24, r22
    1c90:	8d 8b       	std	Y+21, r24	; 0x15
    1c92:	9e 8b       	std	Y+22, r25	; 0x16
    1c94:	af 8b       	std	Y+23, r26	; 0x17
    1c96:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c98:	6d 89       	ldd	r22, Y+21	; 0x15
    1c9a:	7e 89       	ldd	r23, Y+22	; 0x16
    1c9c:	8f 89       	ldd	r24, Y+23	; 0x17
    1c9e:	98 8d       	ldd	r25, Y+24	; 0x18
    1ca0:	20 e0       	ldi	r18, 0x00	; 0
    1ca2:	30 e0       	ldi	r19, 0x00	; 0
    1ca4:	40 e8       	ldi	r20, 0x80	; 128
    1ca6:	5f e3       	ldi	r21, 0x3F	; 63
    1ca8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1cac:	88 23       	and	r24, r24
    1cae:	2c f4       	brge	.+10     	; 0x1cba <LCD_voidInit+0x4e2>
		__ticks = 1;
    1cb0:	81 e0       	ldi	r24, 0x01	; 1
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	9c 8b       	std	Y+20, r25	; 0x14
    1cb6:	8b 8b       	std	Y+19, r24	; 0x13
    1cb8:	3f c0       	rjmp	.+126    	; 0x1d38 <LCD_voidInit+0x560>
	else if (__tmp > 65535)
    1cba:	6d 89       	ldd	r22, Y+21	; 0x15
    1cbc:	7e 89       	ldd	r23, Y+22	; 0x16
    1cbe:	8f 89       	ldd	r24, Y+23	; 0x17
    1cc0:	98 8d       	ldd	r25, Y+24	; 0x18
    1cc2:	20 e0       	ldi	r18, 0x00	; 0
    1cc4:	3f ef       	ldi	r19, 0xFF	; 255
    1cc6:	4f e7       	ldi	r20, 0x7F	; 127
    1cc8:	57 e4       	ldi	r21, 0x47	; 71
    1cca:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1cce:	18 16       	cp	r1, r24
    1cd0:	4c f5       	brge	.+82     	; 0x1d24 <LCD_voidInit+0x54c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cd2:	69 8d       	ldd	r22, Y+25	; 0x19
    1cd4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cd6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cd8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cda:	20 e0       	ldi	r18, 0x00	; 0
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	40 e2       	ldi	r20, 0x20	; 32
    1ce0:	51 e4       	ldi	r21, 0x41	; 65
    1ce2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ce6:	dc 01       	movw	r26, r24
    1ce8:	cb 01       	movw	r24, r22
    1cea:	bc 01       	movw	r22, r24
    1cec:	cd 01       	movw	r24, r26
    1cee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cf2:	dc 01       	movw	r26, r24
    1cf4:	cb 01       	movw	r24, r22
    1cf6:	9c 8b       	std	Y+20, r25	; 0x14
    1cf8:	8b 8b       	std	Y+19, r24	; 0x13
    1cfa:	0f c0       	rjmp	.+30     	; 0x1d1a <LCD_voidInit+0x542>
    1cfc:	88 ec       	ldi	r24, 0xC8	; 200
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	9a 8b       	std	Y+18, r25	; 0x12
    1d02:	89 8b       	std	Y+17, r24	; 0x11
    1d04:	89 89       	ldd	r24, Y+17	; 0x11
    1d06:	9a 89       	ldd	r25, Y+18	; 0x12
    1d08:	01 97       	sbiw	r24, 0x01	; 1
    1d0a:	f1 f7       	brne	.-4      	; 0x1d08 <LCD_voidInit+0x530>
    1d0c:	9a 8b       	std	Y+18, r25	; 0x12
    1d0e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d10:	8b 89       	ldd	r24, Y+19	; 0x13
    1d12:	9c 89       	ldd	r25, Y+20	; 0x14
    1d14:	01 97       	sbiw	r24, 0x01	; 1
    1d16:	9c 8b       	std	Y+20, r25	; 0x14
    1d18:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d1a:	8b 89       	ldd	r24, Y+19	; 0x13
    1d1c:	9c 89       	ldd	r25, Y+20	; 0x14
    1d1e:	00 97       	sbiw	r24, 0x00	; 0
    1d20:	69 f7       	brne	.-38     	; 0x1cfc <LCD_voidInit+0x524>
    1d22:	14 c0       	rjmp	.+40     	; 0x1d4c <LCD_voidInit+0x574>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d24:	6d 89       	ldd	r22, Y+21	; 0x15
    1d26:	7e 89       	ldd	r23, Y+22	; 0x16
    1d28:	8f 89       	ldd	r24, Y+23	; 0x17
    1d2a:	98 8d       	ldd	r25, Y+24	; 0x18
    1d2c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d30:	dc 01       	movw	r26, r24
    1d32:	cb 01       	movw	r24, r22
    1d34:	9c 8b       	std	Y+20, r25	; 0x14
    1d36:	8b 8b       	std	Y+19, r24	; 0x13
    1d38:	8b 89       	ldd	r24, Y+19	; 0x13
    1d3a:	9c 89       	ldd	r25, Y+20	; 0x14
    1d3c:	98 8b       	std	Y+16, r25	; 0x10
    1d3e:	8f 87       	std	Y+15, r24	; 0x0f
    1d40:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d42:	98 89       	ldd	r25, Y+16	; 0x10
    1d44:	01 97       	sbiw	r24, 0x01	; 1
    1d46:	f1 f7       	brne	.-4      	; 0x1d44 <LCD_voidInit+0x56c>
    1d48:	98 8b       	std	Y+16, r25	; 0x10
    1d4a:	8f 87       	std	Y+15, r24	; 0x0f
		    _delay_ms(10);
		    LCD_voidSendCmd(LCD_ENTRY_MODE);
    1d4c:	86 e0       	ldi	r24, 0x06	; 6
    1d4e:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <LCD_voidSendCmd>
    1d52:	80 e0       	ldi	r24, 0x00	; 0
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	a0 e8       	ldi	r26, 0x80	; 128
    1d58:	bf e3       	ldi	r27, 0x3F	; 63
    1d5a:	8b 87       	std	Y+11, r24	; 0x0b
    1d5c:	9c 87       	std	Y+12, r25	; 0x0c
    1d5e:	ad 87       	std	Y+13, r26	; 0x0d
    1d60:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d62:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d64:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d66:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d68:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d6a:	20 e0       	ldi	r18, 0x00	; 0
    1d6c:	30 e0       	ldi	r19, 0x00	; 0
    1d6e:	4a ef       	ldi	r20, 0xFA	; 250
    1d70:	54 e4       	ldi	r21, 0x44	; 68
    1d72:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d76:	dc 01       	movw	r26, r24
    1d78:	cb 01       	movw	r24, r22
    1d7a:	8f 83       	std	Y+7, r24	; 0x07
    1d7c:	98 87       	std	Y+8, r25	; 0x08
    1d7e:	a9 87       	std	Y+9, r26	; 0x09
    1d80:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d82:	6f 81       	ldd	r22, Y+7	; 0x07
    1d84:	78 85       	ldd	r23, Y+8	; 0x08
    1d86:	89 85       	ldd	r24, Y+9	; 0x09
    1d88:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d8a:	20 e0       	ldi	r18, 0x00	; 0
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	40 e8       	ldi	r20, 0x80	; 128
    1d90:	5f e3       	ldi	r21, 0x3F	; 63
    1d92:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d96:	88 23       	and	r24, r24
    1d98:	2c f4       	brge	.+10     	; 0x1da4 <LCD_voidInit+0x5cc>
		__ticks = 1;
    1d9a:	81 e0       	ldi	r24, 0x01	; 1
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	9e 83       	std	Y+6, r25	; 0x06
    1da0:	8d 83       	std	Y+5, r24	; 0x05
    1da2:	3f c0       	rjmp	.+126    	; 0x1e22 <LCD_voidInit+0x64a>
	else if (__tmp > 65535)
    1da4:	6f 81       	ldd	r22, Y+7	; 0x07
    1da6:	78 85       	ldd	r23, Y+8	; 0x08
    1da8:	89 85       	ldd	r24, Y+9	; 0x09
    1daa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dac:	20 e0       	ldi	r18, 0x00	; 0
    1dae:	3f ef       	ldi	r19, 0xFF	; 255
    1db0:	4f e7       	ldi	r20, 0x7F	; 127
    1db2:	57 e4       	ldi	r21, 0x47	; 71
    1db4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1db8:	18 16       	cp	r1, r24
    1dba:	4c f5       	brge	.+82     	; 0x1e0e <LCD_voidInit+0x636>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dbc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dbe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dc4:	20 e0       	ldi	r18, 0x00	; 0
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	40 e2       	ldi	r20, 0x20	; 32
    1dca:	51 e4       	ldi	r21, 0x41	; 65
    1dcc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dd0:	dc 01       	movw	r26, r24
    1dd2:	cb 01       	movw	r24, r22
    1dd4:	bc 01       	movw	r22, r24
    1dd6:	cd 01       	movw	r24, r26
    1dd8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ddc:	dc 01       	movw	r26, r24
    1dde:	cb 01       	movw	r24, r22
    1de0:	9e 83       	std	Y+6, r25	; 0x06
    1de2:	8d 83       	std	Y+5, r24	; 0x05
    1de4:	0f c0       	rjmp	.+30     	; 0x1e04 <LCD_voidInit+0x62c>
    1de6:	88 ec       	ldi	r24, 0xC8	; 200
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	9c 83       	std	Y+4, r25	; 0x04
    1dec:	8b 83       	std	Y+3, r24	; 0x03
    1dee:	8b 81       	ldd	r24, Y+3	; 0x03
    1df0:	9c 81       	ldd	r25, Y+4	; 0x04
    1df2:	01 97       	sbiw	r24, 0x01	; 1
    1df4:	f1 f7       	brne	.-4      	; 0x1df2 <LCD_voidInit+0x61a>
    1df6:	9c 83       	std	Y+4, r25	; 0x04
    1df8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dfa:	8d 81       	ldd	r24, Y+5	; 0x05
    1dfc:	9e 81       	ldd	r25, Y+6	; 0x06
    1dfe:	01 97       	sbiw	r24, 0x01	; 1
    1e00:	9e 83       	std	Y+6, r25	; 0x06
    1e02:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e04:	8d 81       	ldd	r24, Y+5	; 0x05
    1e06:	9e 81       	ldd	r25, Y+6	; 0x06
    1e08:	00 97       	sbiw	r24, 0x00	; 0
    1e0a:	69 f7       	brne	.-38     	; 0x1de6 <LCD_voidInit+0x60e>
    1e0c:	14 c0       	rjmp	.+40     	; 0x1e36 <LCD_voidInit+0x65e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e0e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e10:	78 85       	ldd	r23, Y+8	; 0x08
    1e12:	89 85       	ldd	r24, Y+9	; 0x09
    1e14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e16:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e1a:	dc 01       	movw	r26, r24
    1e1c:	cb 01       	movw	r24, r22
    1e1e:	9e 83       	std	Y+6, r25	; 0x06
    1e20:	8d 83       	std	Y+5, r24	; 0x05
    1e22:	8d 81       	ldd	r24, Y+5	; 0x05
    1e24:	9e 81       	ldd	r25, Y+6	; 0x06
    1e26:	9a 83       	std	Y+2, r25	; 0x02
    1e28:	89 83       	std	Y+1, r24	; 0x01
    1e2a:	89 81       	ldd	r24, Y+1	; 0x01
    1e2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e2e:	01 97       	sbiw	r24, 0x01	; 1
    1e30:	f1 f7       	brne	.-4      	; 0x1e2e <LCD_voidInit+0x656>
    1e32:	9a 83       	std	Y+2, r25	; 0x02
    1e34:	89 83       	std	Y+1, r24	; 0x01
	#endif
	
	
	

}
    1e36:	cc 5a       	subi	r28, 0xAC	; 172
    1e38:	df 4f       	sbci	r29, 0xFF	; 255
    1e3a:	0f b6       	in	r0, 0x3f	; 63
    1e3c:	f8 94       	cli
    1e3e:	de bf       	out	0x3e, r29	; 62
    1e40:	0f be       	out	0x3f, r0	; 63
    1e42:	cd bf       	out	0x3d, r28	; 61
    1e44:	cf 91       	pop	r28
    1e46:	df 91       	pop	r29
    1e48:	1f 91       	pop	r17
    1e4a:	0f 91       	pop	r16
    1e4c:	08 95       	ret

00001e4e <LCD_voidSendCmd>:

void LCD_voidSendCmd(u8 copy_u8Cmd)
{
    1e4e:	df 93       	push	r29
    1e50:	cf 93       	push	r28
    1e52:	cd b7       	in	r28, 0x3d	; 61
    1e54:	de b7       	in	r29, 0x3e	; 62
    1e56:	2f 97       	sbiw	r28, 0x0f	; 15
    1e58:	0f b6       	in	r0, 0x3f	; 63
    1e5a:	f8 94       	cli
    1e5c:	de bf       	out	0x3e, r29	; 62
    1e5e:	0f be       	out	0x3f, r0	; 63
    1e60:	cd bf       	out	0x3d, r28	; 61
    1e62:	8f 87       	std	Y+15, r24	; 0x0f
		GPIO_voidWritePin  (LCD_RWPORT , LCD_RWPIN , 0);
		LCD_voidSendEnPulse();
		
	#elif LCD_MODE == 1 
		#if LCD_NIBBLE == 0 
			GPIO_voidWriteLowNipple(LCD_PORT , copy_u8Cmd>>4);
    1e64:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e66:	98 2f       	mov	r25, r24
    1e68:	92 95       	swap	r25
    1e6a:	9f 70       	andi	r25, 0x0F	; 15
    1e6c:	83 e0       	ldi	r24, 0x03	; 3
    1e6e:	69 2f       	mov	r22, r25
    1e70:	0e 94 0c 0b 	call	0x1618	; 0x1618 <GPIO_voidWriteLowNipple>
			GPIO_voidWritePin  (LCD_RSPORT , LCD_RSPIN , 0);
    1e74:	82 e0       	ldi	r24, 0x02	; 2
    1e76:	60 e0       	ldi	r22, 0x00	; 0
    1e78:	40 e0       	ldi	r20, 0x00	; 0
    1e7a:	0e 94 2c 08 	call	0x1058	; 0x1058 <GPIO_voidWritePin>
			GPIO_voidWritePin  (LCD_RWPORT , LCD_RWPIN , 0);
    1e7e:	82 e0       	ldi	r24, 0x02	; 2
    1e80:	61 e0       	ldi	r22, 0x01	; 1
    1e82:	40 e0       	ldi	r20, 0x00	; 0
    1e84:	0e 94 2c 08 	call	0x1058	; 0x1058 <GPIO_voidWritePin>
			LCD_voidSendEnPulse();
    1e88:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <LCD_voidSendEnPulse>
		
			GPIO_voidWriteLowNipple(LCD_PORT , copy_u8Cmd);
    1e8c:	83 e0       	ldi	r24, 0x03	; 3
    1e8e:	6f 85       	ldd	r22, Y+15	; 0x0f
    1e90:	0e 94 0c 0b 	call	0x1618	; 0x1618 <GPIO_voidWriteLowNipple>
			GPIO_voidWritePin  (LCD_RSPORT , LCD_RSPIN , 0);
    1e94:	82 e0       	ldi	r24, 0x02	; 2
    1e96:	60 e0       	ldi	r22, 0x00	; 0
    1e98:	40 e0       	ldi	r20, 0x00	; 0
    1e9a:	0e 94 2c 08 	call	0x1058	; 0x1058 <GPIO_voidWritePin>
			GPIO_voidWritePin  (LCD_RWPORT , LCD_RWPIN , 0);
    1e9e:	82 e0       	ldi	r24, 0x02	; 2
    1ea0:	61 e0       	ldi	r22, 0x01	; 1
    1ea2:	40 e0       	ldi	r20, 0x00	; 0
    1ea4:	0e 94 2c 08 	call	0x1058	; 0x1058 <GPIO_voidWritePin>
			LCD_voidSendEnPulse();
    1ea8:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <LCD_voidSendEnPulse>
    1eac:	80 e0       	ldi	r24, 0x00	; 0
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	a0 e0       	ldi	r26, 0x00	; 0
    1eb2:	b0 e4       	ldi	r27, 0x40	; 64
    1eb4:	8b 87       	std	Y+11, r24	; 0x0b
    1eb6:	9c 87       	std	Y+12, r25	; 0x0c
    1eb8:	ad 87       	std	Y+13, r26	; 0x0d
    1eba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ebc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ebe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ec0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ec2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ec4:	20 e0       	ldi	r18, 0x00	; 0
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	4a ef       	ldi	r20, 0xFA	; 250
    1eca:	54 e4       	ldi	r21, 0x44	; 68
    1ecc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ed0:	dc 01       	movw	r26, r24
    1ed2:	cb 01       	movw	r24, r22
    1ed4:	8f 83       	std	Y+7, r24	; 0x07
    1ed6:	98 87       	std	Y+8, r25	; 0x08
    1ed8:	a9 87       	std	Y+9, r26	; 0x09
    1eda:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1edc:	6f 81       	ldd	r22, Y+7	; 0x07
    1ede:	78 85       	ldd	r23, Y+8	; 0x08
    1ee0:	89 85       	ldd	r24, Y+9	; 0x09
    1ee2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ee4:	20 e0       	ldi	r18, 0x00	; 0
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	40 e8       	ldi	r20, 0x80	; 128
    1eea:	5f e3       	ldi	r21, 0x3F	; 63
    1eec:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ef0:	88 23       	and	r24, r24
    1ef2:	2c f4       	brge	.+10     	; 0x1efe <LCD_voidSendCmd+0xb0>
		__ticks = 1;
    1ef4:	81 e0       	ldi	r24, 0x01	; 1
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	9e 83       	std	Y+6, r25	; 0x06
    1efa:	8d 83       	std	Y+5, r24	; 0x05
    1efc:	3f c0       	rjmp	.+126    	; 0x1f7c <LCD_voidSendCmd+0x12e>
	else if (__tmp > 65535)
    1efe:	6f 81       	ldd	r22, Y+7	; 0x07
    1f00:	78 85       	ldd	r23, Y+8	; 0x08
    1f02:	89 85       	ldd	r24, Y+9	; 0x09
    1f04:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f06:	20 e0       	ldi	r18, 0x00	; 0
    1f08:	3f ef       	ldi	r19, 0xFF	; 255
    1f0a:	4f e7       	ldi	r20, 0x7F	; 127
    1f0c:	57 e4       	ldi	r21, 0x47	; 71
    1f0e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f12:	18 16       	cp	r1, r24
    1f14:	4c f5       	brge	.+82     	; 0x1f68 <LCD_voidSendCmd+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f16:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f18:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f1e:	20 e0       	ldi	r18, 0x00	; 0
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	40 e2       	ldi	r20, 0x20	; 32
    1f24:	51 e4       	ldi	r21, 0x41	; 65
    1f26:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f2a:	dc 01       	movw	r26, r24
    1f2c:	cb 01       	movw	r24, r22
    1f2e:	bc 01       	movw	r22, r24
    1f30:	cd 01       	movw	r24, r26
    1f32:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f36:	dc 01       	movw	r26, r24
    1f38:	cb 01       	movw	r24, r22
    1f3a:	9e 83       	std	Y+6, r25	; 0x06
    1f3c:	8d 83       	std	Y+5, r24	; 0x05
    1f3e:	0f c0       	rjmp	.+30     	; 0x1f5e <LCD_voidSendCmd+0x110>
    1f40:	88 ec       	ldi	r24, 0xC8	; 200
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	9c 83       	std	Y+4, r25	; 0x04
    1f46:	8b 83       	std	Y+3, r24	; 0x03
    1f48:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f4c:	01 97       	sbiw	r24, 0x01	; 1
    1f4e:	f1 f7       	brne	.-4      	; 0x1f4c <LCD_voidSendCmd+0xfe>
    1f50:	9c 83       	std	Y+4, r25	; 0x04
    1f52:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f54:	8d 81       	ldd	r24, Y+5	; 0x05
    1f56:	9e 81       	ldd	r25, Y+6	; 0x06
    1f58:	01 97       	sbiw	r24, 0x01	; 1
    1f5a:	9e 83       	std	Y+6, r25	; 0x06
    1f5c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f60:	9e 81       	ldd	r25, Y+6	; 0x06
    1f62:	00 97       	sbiw	r24, 0x00	; 0
    1f64:	69 f7       	brne	.-38     	; 0x1f40 <LCD_voidSendCmd+0xf2>
    1f66:	14 c0       	rjmp	.+40     	; 0x1f90 <LCD_voidSendCmd+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f68:	6f 81       	ldd	r22, Y+7	; 0x07
    1f6a:	78 85       	ldd	r23, Y+8	; 0x08
    1f6c:	89 85       	ldd	r24, Y+9	; 0x09
    1f6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f70:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f74:	dc 01       	movw	r26, r24
    1f76:	cb 01       	movw	r24, r22
    1f78:	9e 83       	std	Y+6, r25	; 0x06
    1f7a:	8d 83       	std	Y+5, r24	; 0x05
    1f7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f7e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f80:	9a 83       	std	Y+2, r25	; 0x02
    1f82:	89 83       	std	Y+1, r24	; 0x01
    1f84:	89 81       	ldd	r24, Y+1	; 0x01
    1f86:	9a 81       	ldd	r25, Y+2	; 0x02
    1f88:	01 97       	sbiw	r24, 0x01	; 1
    1f8a:	f1 f7       	brne	.-4      	; 0x1f88 <LCD_voidSendCmd+0x13a>
    1f8c:	9a 83       	std	Y+2, r25	; 0x02
    1f8e:	89 83       	std	Y+1, r24	; 0x01
			LCD_voidSendEnPulse();
			_delay_ms(2);
		#endif
	#endif
	
}
    1f90:	2f 96       	adiw	r28, 0x0f	; 15
    1f92:	0f b6       	in	r0, 0x3f	; 63
    1f94:	f8 94       	cli
    1f96:	de bf       	out	0x3e, r29	; 62
    1f98:	0f be       	out	0x3f, r0	; 63
    1f9a:	cd bf       	out	0x3d, r28	; 61
    1f9c:	cf 91       	pop	r28
    1f9e:	df 91       	pop	r29
    1fa0:	08 95       	ret

00001fa2 <LCD_voidSendEnPulse>:
void LCD_voidSendEnPulse ()
{
    1fa2:	df 93       	push	r29
    1fa4:	cf 93       	push	r28
    1fa6:	cd b7       	in	r28, 0x3d	; 61
    1fa8:	de b7       	in	r29, 0x3e	; 62
    1faa:	2e 97       	sbiw	r28, 0x0e	; 14
    1fac:	0f b6       	in	r0, 0x3f	; 63
    1fae:	f8 94       	cli
    1fb0:	de bf       	out	0x3e, r29	; 62
    1fb2:	0f be       	out	0x3f, r0	; 63
    1fb4:	cd bf       	out	0x3d, r28	; 61
	GPIO_voidWritePin  (LCD_ENPORT , LCD_ENPIN , 1);
    1fb6:	82 e0       	ldi	r24, 0x02	; 2
    1fb8:	62 e0       	ldi	r22, 0x02	; 2
    1fba:	41 e0       	ldi	r20, 0x01	; 1
    1fbc:	0e 94 2c 08 	call	0x1058	; 0x1058 <GPIO_voidWritePin>
    1fc0:	80 e0       	ldi	r24, 0x00	; 0
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	a0 e0       	ldi	r26, 0x00	; 0
    1fc6:	b0 e4       	ldi	r27, 0x40	; 64
    1fc8:	8b 87       	std	Y+11, r24	; 0x0b
    1fca:	9c 87       	std	Y+12, r25	; 0x0c
    1fcc:	ad 87       	std	Y+13, r26	; 0x0d
    1fce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fd0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fd2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fd4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fd6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fd8:	20 e0       	ldi	r18, 0x00	; 0
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	4a ef       	ldi	r20, 0xFA	; 250
    1fde:	54 e4       	ldi	r21, 0x44	; 68
    1fe0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fe4:	dc 01       	movw	r26, r24
    1fe6:	cb 01       	movw	r24, r22
    1fe8:	8f 83       	std	Y+7, r24	; 0x07
    1fea:	98 87       	std	Y+8, r25	; 0x08
    1fec:	a9 87       	std	Y+9, r26	; 0x09
    1fee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ff0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ff2:	78 85       	ldd	r23, Y+8	; 0x08
    1ff4:	89 85       	ldd	r24, Y+9	; 0x09
    1ff6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ff8:	20 e0       	ldi	r18, 0x00	; 0
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	40 e8       	ldi	r20, 0x80	; 128
    1ffe:	5f e3       	ldi	r21, 0x3F	; 63
    2000:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2004:	88 23       	and	r24, r24
    2006:	2c f4       	brge	.+10     	; 0x2012 <LCD_voidSendEnPulse+0x70>
		__ticks = 1;
    2008:	81 e0       	ldi	r24, 0x01	; 1
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	9e 83       	std	Y+6, r25	; 0x06
    200e:	8d 83       	std	Y+5, r24	; 0x05
    2010:	3f c0       	rjmp	.+126    	; 0x2090 <LCD_voidSendEnPulse+0xee>
	else if (__tmp > 65535)
    2012:	6f 81       	ldd	r22, Y+7	; 0x07
    2014:	78 85       	ldd	r23, Y+8	; 0x08
    2016:	89 85       	ldd	r24, Y+9	; 0x09
    2018:	9a 85       	ldd	r25, Y+10	; 0x0a
    201a:	20 e0       	ldi	r18, 0x00	; 0
    201c:	3f ef       	ldi	r19, 0xFF	; 255
    201e:	4f e7       	ldi	r20, 0x7F	; 127
    2020:	57 e4       	ldi	r21, 0x47	; 71
    2022:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2026:	18 16       	cp	r1, r24
    2028:	4c f5       	brge	.+82     	; 0x207c <LCD_voidSendEnPulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    202a:	6b 85       	ldd	r22, Y+11	; 0x0b
    202c:	7c 85       	ldd	r23, Y+12	; 0x0c
    202e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2030:	9e 85       	ldd	r25, Y+14	; 0x0e
    2032:	20 e0       	ldi	r18, 0x00	; 0
    2034:	30 e0       	ldi	r19, 0x00	; 0
    2036:	40 e2       	ldi	r20, 0x20	; 32
    2038:	51 e4       	ldi	r21, 0x41	; 65
    203a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    203e:	dc 01       	movw	r26, r24
    2040:	cb 01       	movw	r24, r22
    2042:	bc 01       	movw	r22, r24
    2044:	cd 01       	movw	r24, r26
    2046:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    204a:	dc 01       	movw	r26, r24
    204c:	cb 01       	movw	r24, r22
    204e:	9e 83       	std	Y+6, r25	; 0x06
    2050:	8d 83       	std	Y+5, r24	; 0x05
    2052:	0f c0       	rjmp	.+30     	; 0x2072 <LCD_voidSendEnPulse+0xd0>
    2054:	88 ec       	ldi	r24, 0xC8	; 200
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	9c 83       	std	Y+4, r25	; 0x04
    205a:	8b 83       	std	Y+3, r24	; 0x03
    205c:	8b 81       	ldd	r24, Y+3	; 0x03
    205e:	9c 81       	ldd	r25, Y+4	; 0x04
    2060:	01 97       	sbiw	r24, 0x01	; 1
    2062:	f1 f7       	brne	.-4      	; 0x2060 <LCD_voidSendEnPulse+0xbe>
    2064:	9c 83       	std	Y+4, r25	; 0x04
    2066:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2068:	8d 81       	ldd	r24, Y+5	; 0x05
    206a:	9e 81       	ldd	r25, Y+6	; 0x06
    206c:	01 97       	sbiw	r24, 0x01	; 1
    206e:	9e 83       	std	Y+6, r25	; 0x06
    2070:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2072:	8d 81       	ldd	r24, Y+5	; 0x05
    2074:	9e 81       	ldd	r25, Y+6	; 0x06
    2076:	00 97       	sbiw	r24, 0x00	; 0
    2078:	69 f7       	brne	.-38     	; 0x2054 <LCD_voidSendEnPulse+0xb2>
    207a:	14 c0       	rjmp	.+40     	; 0x20a4 <LCD_voidSendEnPulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    207c:	6f 81       	ldd	r22, Y+7	; 0x07
    207e:	78 85       	ldd	r23, Y+8	; 0x08
    2080:	89 85       	ldd	r24, Y+9	; 0x09
    2082:	9a 85       	ldd	r25, Y+10	; 0x0a
    2084:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2088:	dc 01       	movw	r26, r24
    208a:	cb 01       	movw	r24, r22
    208c:	9e 83       	std	Y+6, r25	; 0x06
    208e:	8d 83       	std	Y+5, r24	; 0x05
    2090:	8d 81       	ldd	r24, Y+5	; 0x05
    2092:	9e 81       	ldd	r25, Y+6	; 0x06
    2094:	9a 83       	std	Y+2, r25	; 0x02
    2096:	89 83       	std	Y+1, r24	; 0x01
    2098:	89 81       	ldd	r24, Y+1	; 0x01
    209a:	9a 81       	ldd	r25, Y+2	; 0x02
    209c:	01 97       	sbiw	r24, 0x01	; 1
    209e:	f1 f7       	brne	.-4      	; 0x209c <LCD_voidSendEnPulse+0xfa>
    20a0:	9a 83       	std	Y+2, r25	; 0x02
    20a2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	GPIO_voidWritePin  (LCD_ENPORT , LCD_ENPIN , 0);
    20a4:	82 e0       	ldi	r24, 0x02	; 2
    20a6:	62 e0       	ldi	r22, 0x02	; 2
    20a8:	40 e0       	ldi	r20, 0x00	; 0
    20aa:	0e 94 2c 08 	call	0x1058	; 0x1058 <GPIO_voidWritePin>

}
    20ae:	2e 96       	adiw	r28, 0x0e	; 14
    20b0:	0f b6       	in	r0, 0x3f	; 63
    20b2:	f8 94       	cli
    20b4:	de bf       	out	0x3e, r29	; 62
    20b6:	0f be       	out	0x3f, r0	; 63
    20b8:	cd bf       	out	0x3d, r28	; 61
    20ba:	cf 91       	pop	r28
    20bc:	df 91       	pop	r29
    20be:	08 95       	ret

000020c0 <LCD_voidMoveCrusor>:
void LCD_voidMoveCrusor(u8 copy_u8Line , u8 copy_u8Position)
{
    20c0:	df 93       	push	r29
    20c2:	cf 93       	push	r28
    20c4:	cd b7       	in	r28, 0x3d	; 61
    20c6:	de b7       	in	r29, 0x3e	; 62
    20c8:	61 97       	sbiw	r28, 0x11	; 17
    20ca:	0f b6       	in	r0, 0x3f	; 63
    20cc:	f8 94       	cli
    20ce:	de bf       	out	0x3e, r29	; 62
    20d0:	0f be       	out	0x3f, r0	; 63
    20d2:	cd bf       	out	0x3d, r28	; 61
    20d4:	88 8b       	std	Y+16, r24	; 0x10
    20d6:	69 8b       	std	Y+17, r22	; 0x11
	u8 data ;
if(copy_u8Line < 1 || copy_u8Line > 2 || copy_u8Position >16 || copy_u8Position <1 )	
    20d8:	88 89       	ldd	r24, Y+16	; 0x10
    20da:	88 23       	and	r24, r24
    20dc:	49 f0       	breq	.+18     	; 0x20f0 <LCD_voidMoveCrusor+0x30>
    20de:	88 89       	ldd	r24, Y+16	; 0x10
    20e0:	83 30       	cpi	r24, 0x03	; 3
    20e2:	30 f4       	brcc	.+12     	; 0x20f0 <LCD_voidMoveCrusor+0x30>
    20e4:	89 89       	ldd	r24, Y+17	; 0x11
    20e6:	81 31       	cpi	r24, 0x11	; 17
    20e8:	18 f4       	brcc	.+6      	; 0x20f0 <LCD_voidMoveCrusor+0x30>
    20ea:	89 89       	ldd	r24, Y+17	; 0x11
    20ec:	88 23       	and	r24, r24
    20ee:	19 f4       	brne	.+6      	; 0x20f6 <LCD_voidMoveCrusor+0x36>
{
	data = 0x80 ;
    20f0:	80 e8       	ldi	r24, 0x80	; 128
    20f2:	8f 87       	std	Y+15, r24	; 0x0f
    20f4:	0d c0       	rjmp	.+26     	; 0x2110 <LCD_voidMoveCrusor+0x50>
}
else if (copy_u8Line ==1)
    20f6:	88 89       	ldd	r24, Y+16	; 0x10
    20f8:	81 30       	cpi	r24, 0x01	; 1
    20fa:	21 f4       	brne	.+8      	; 0x2104 <LCD_voidMoveCrusor+0x44>
{
	data = 0x80 +(copy_u8Position -1);
    20fc:	89 89       	ldd	r24, Y+17	; 0x11
    20fe:	81 58       	subi	r24, 0x81	; 129
    2100:	8f 87       	std	Y+15, r24	; 0x0f
    2102:	06 c0       	rjmp	.+12     	; 0x2110 <LCD_voidMoveCrusor+0x50>
}
else if (copy_u8Line==2)
    2104:	88 89       	ldd	r24, Y+16	; 0x10
    2106:	82 30       	cpi	r24, 0x02	; 2
    2108:	19 f4       	brne	.+6      	; 0x2110 <LCD_voidMoveCrusor+0x50>
{
	data = 0xC0 + (copy_u8Position -1 );
    210a:	89 89       	ldd	r24, Y+17	; 0x11
    210c:	81 54       	subi	r24, 0x41	; 65
    210e:	8f 87       	std	Y+15, r24	; 0x0f
}
LCD_voidSendCmd(data);
    2110:	8f 85       	ldd	r24, Y+15	; 0x0f
    2112:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <LCD_voidSendCmd>
    2116:	80 e0       	ldi	r24, 0x00	; 0
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	a0 e8       	ldi	r26, 0x80	; 128
    211c:	bf e3       	ldi	r27, 0x3F	; 63
    211e:	8b 87       	std	Y+11, r24	; 0x0b
    2120:	9c 87       	std	Y+12, r25	; 0x0c
    2122:	ad 87       	std	Y+13, r26	; 0x0d
    2124:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2126:	6b 85       	ldd	r22, Y+11	; 0x0b
    2128:	7c 85       	ldd	r23, Y+12	; 0x0c
    212a:	8d 85       	ldd	r24, Y+13	; 0x0d
    212c:	9e 85       	ldd	r25, Y+14	; 0x0e
    212e:	20 e0       	ldi	r18, 0x00	; 0
    2130:	30 e0       	ldi	r19, 0x00	; 0
    2132:	4a ef       	ldi	r20, 0xFA	; 250
    2134:	54 e4       	ldi	r21, 0x44	; 68
    2136:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    213a:	dc 01       	movw	r26, r24
    213c:	cb 01       	movw	r24, r22
    213e:	8f 83       	std	Y+7, r24	; 0x07
    2140:	98 87       	std	Y+8, r25	; 0x08
    2142:	a9 87       	std	Y+9, r26	; 0x09
    2144:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2146:	6f 81       	ldd	r22, Y+7	; 0x07
    2148:	78 85       	ldd	r23, Y+8	; 0x08
    214a:	89 85       	ldd	r24, Y+9	; 0x09
    214c:	9a 85       	ldd	r25, Y+10	; 0x0a
    214e:	20 e0       	ldi	r18, 0x00	; 0
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	40 e8       	ldi	r20, 0x80	; 128
    2154:	5f e3       	ldi	r21, 0x3F	; 63
    2156:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    215a:	88 23       	and	r24, r24
    215c:	2c f4       	brge	.+10     	; 0x2168 <LCD_voidMoveCrusor+0xa8>
		__ticks = 1;
    215e:	81 e0       	ldi	r24, 0x01	; 1
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	9e 83       	std	Y+6, r25	; 0x06
    2164:	8d 83       	std	Y+5, r24	; 0x05
    2166:	3f c0       	rjmp	.+126    	; 0x21e6 <LCD_voidMoveCrusor+0x126>
	else if (__tmp > 65535)
    2168:	6f 81       	ldd	r22, Y+7	; 0x07
    216a:	78 85       	ldd	r23, Y+8	; 0x08
    216c:	89 85       	ldd	r24, Y+9	; 0x09
    216e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2170:	20 e0       	ldi	r18, 0x00	; 0
    2172:	3f ef       	ldi	r19, 0xFF	; 255
    2174:	4f e7       	ldi	r20, 0x7F	; 127
    2176:	57 e4       	ldi	r21, 0x47	; 71
    2178:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    217c:	18 16       	cp	r1, r24
    217e:	4c f5       	brge	.+82     	; 0x21d2 <LCD_voidMoveCrusor+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2180:	6b 85       	ldd	r22, Y+11	; 0x0b
    2182:	7c 85       	ldd	r23, Y+12	; 0x0c
    2184:	8d 85       	ldd	r24, Y+13	; 0x0d
    2186:	9e 85       	ldd	r25, Y+14	; 0x0e
    2188:	20 e0       	ldi	r18, 0x00	; 0
    218a:	30 e0       	ldi	r19, 0x00	; 0
    218c:	40 e2       	ldi	r20, 0x20	; 32
    218e:	51 e4       	ldi	r21, 0x41	; 65
    2190:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2194:	dc 01       	movw	r26, r24
    2196:	cb 01       	movw	r24, r22
    2198:	bc 01       	movw	r22, r24
    219a:	cd 01       	movw	r24, r26
    219c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21a0:	dc 01       	movw	r26, r24
    21a2:	cb 01       	movw	r24, r22
    21a4:	9e 83       	std	Y+6, r25	; 0x06
    21a6:	8d 83       	std	Y+5, r24	; 0x05
    21a8:	0f c0       	rjmp	.+30     	; 0x21c8 <LCD_voidMoveCrusor+0x108>
    21aa:	88 ec       	ldi	r24, 0xC8	; 200
    21ac:	90 e0       	ldi	r25, 0x00	; 0
    21ae:	9c 83       	std	Y+4, r25	; 0x04
    21b0:	8b 83       	std	Y+3, r24	; 0x03
    21b2:	8b 81       	ldd	r24, Y+3	; 0x03
    21b4:	9c 81       	ldd	r25, Y+4	; 0x04
    21b6:	01 97       	sbiw	r24, 0x01	; 1
    21b8:	f1 f7       	brne	.-4      	; 0x21b6 <LCD_voidMoveCrusor+0xf6>
    21ba:	9c 83       	std	Y+4, r25	; 0x04
    21bc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21be:	8d 81       	ldd	r24, Y+5	; 0x05
    21c0:	9e 81       	ldd	r25, Y+6	; 0x06
    21c2:	01 97       	sbiw	r24, 0x01	; 1
    21c4:	9e 83       	std	Y+6, r25	; 0x06
    21c6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21c8:	8d 81       	ldd	r24, Y+5	; 0x05
    21ca:	9e 81       	ldd	r25, Y+6	; 0x06
    21cc:	00 97       	sbiw	r24, 0x00	; 0
    21ce:	69 f7       	brne	.-38     	; 0x21aa <LCD_voidMoveCrusor+0xea>
    21d0:	14 c0       	rjmp	.+40     	; 0x21fa <LCD_voidMoveCrusor+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21d2:	6f 81       	ldd	r22, Y+7	; 0x07
    21d4:	78 85       	ldd	r23, Y+8	; 0x08
    21d6:	89 85       	ldd	r24, Y+9	; 0x09
    21d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    21da:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21de:	dc 01       	movw	r26, r24
    21e0:	cb 01       	movw	r24, r22
    21e2:	9e 83       	std	Y+6, r25	; 0x06
    21e4:	8d 83       	std	Y+5, r24	; 0x05
    21e6:	8d 81       	ldd	r24, Y+5	; 0x05
    21e8:	9e 81       	ldd	r25, Y+6	; 0x06
    21ea:	9a 83       	std	Y+2, r25	; 0x02
    21ec:	89 83       	std	Y+1, r24	; 0x01
    21ee:	89 81       	ldd	r24, Y+1	; 0x01
    21f0:	9a 81       	ldd	r25, Y+2	; 0x02
    21f2:	01 97       	sbiw	r24, 0x01	; 1
    21f4:	f1 f7       	brne	.-4      	; 0x21f2 <LCD_voidMoveCrusor+0x132>
    21f6:	9a 83       	std	Y+2, r25	; 0x02
    21f8:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(1);
}
    21fa:	61 96       	adiw	r28, 0x11	; 17
    21fc:	0f b6       	in	r0, 0x3f	; 63
    21fe:	f8 94       	cli
    2200:	de bf       	out	0x3e, r29	; 62
    2202:	0f be       	out	0x3f, r0	; 63
    2204:	cd bf       	out	0x3d, r28	; 61
    2206:	cf 91       	pop	r28
    2208:	df 91       	pop	r29
    220a:	08 95       	ret

0000220c <LCD_voidClearScreen>:
void LCD_voidClearScreen()
{
    220c:	df 93       	push	r29
    220e:	cf 93       	push	r28
    2210:	cd b7       	in	r28, 0x3d	; 61
    2212:	de b7       	in	r29, 0x3e	; 62
    2214:	2e 97       	sbiw	r28, 0x0e	; 14
    2216:	0f b6       	in	r0, 0x3f	; 63
    2218:	f8 94       	cli
    221a:	de bf       	out	0x3e, r29	; 62
    221c:	0f be       	out	0x3f, r0	; 63
    221e:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCmd(LCD_CLEAR_SCREEN);
    2220:	81 e0       	ldi	r24, 0x01	; 1
    2222:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <LCD_voidSendCmd>
    2226:	80 e0       	ldi	r24, 0x00	; 0
    2228:	90 e0       	ldi	r25, 0x00	; 0
    222a:	a0 e2       	ldi	r26, 0x20	; 32
    222c:	b1 e4       	ldi	r27, 0x41	; 65
    222e:	8b 87       	std	Y+11, r24	; 0x0b
    2230:	9c 87       	std	Y+12, r25	; 0x0c
    2232:	ad 87       	std	Y+13, r26	; 0x0d
    2234:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2236:	6b 85       	ldd	r22, Y+11	; 0x0b
    2238:	7c 85       	ldd	r23, Y+12	; 0x0c
    223a:	8d 85       	ldd	r24, Y+13	; 0x0d
    223c:	9e 85       	ldd	r25, Y+14	; 0x0e
    223e:	20 e0       	ldi	r18, 0x00	; 0
    2240:	30 e0       	ldi	r19, 0x00	; 0
    2242:	4a ef       	ldi	r20, 0xFA	; 250
    2244:	54 e4       	ldi	r21, 0x44	; 68
    2246:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    224a:	dc 01       	movw	r26, r24
    224c:	cb 01       	movw	r24, r22
    224e:	8f 83       	std	Y+7, r24	; 0x07
    2250:	98 87       	std	Y+8, r25	; 0x08
    2252:	a9 87       	std	Y+9, r26	; 0x09
    2254:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2256:	6f 81       	ldd	r22, Y+7	; 0x07
    2258:	78 85       	ldd	r23, Y+8	; 0x08
    225a:	89 85       	ldd	r24, Y+9	; 0x09
    225c:	9a 85       	ldd	r25, Y+10	; 0x0a
    225e:	20 e0       	ldi	r18, 0x00	; 0
    2260:	30 e0       	ldi	r19, 0x00	; 0
    2262:	40 e8       	ldi	r20, 0x80	; 128
    2264:	5f e3       	ldi	r21, 0x3F	; 63
    2266:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    226a:	88 23       	and	r24, r24
    226c:	2c f4       	brge	.+10     	; 0x2278 <LCD_voidClearScreen+0x6c>
		__ticks = 1;
    226e:	81 e0       	ldi	r24, 0x01	; 1
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	9e 83       	std	Y+6, r25	; 0x06
    2274:	8d 83       	std	Y+5, r24	; 0x05
    2276:	3f c0       	rjmp	.+126    	; 0x22f6 <LCD_voidClearScreen+0xea>
	else if (__tmp > 65535)
    2278:	6f 81       	ldd	r22, Y+7	; 0x07
    227a:	78 85       	ldd	r23, Y+8	; 0x08
    227c:	89 85       	ldd	r24, Y+9	; 0x09
    227e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2280:	20 e0       	ldi	r18, 0x00	; 0
    2282:	3f ef       	ldi	r19, 0xFF	; 255
    2284:	4f e7       	ldi	r20, 0x7F	; 127
    2286:	57 e4       	ldi	r21, 0x47	; 71
    2288:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    228c:	18 16       	cp	r1, r24
    228e:	4c f5       	brge	.+82     	; 0x22e2 <LCD_voidClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2290:	6b 85       	ldd	r22, Y+11	; 0x0b
    2292:	7c 85       	ldd	r23, Y+12	; 0x0c
    2294:	8d 85       	ldd	r24, Y+13	; 0x0d
    2296:	9e 85       	ldd	r25, Y+14	; 0x0e
    2298:	20 e0       	ldi	r18, 0x00	; 0
    229a:	30 e0       	ldi	r19, 0x00	; 0
    229c:	40 e2       	ldi	r20, 0x20	; 32
    229e:	51 e4       	ldi	r21, 0x41	; 65
    22a0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22a4:	dc 01       	movw	r26, r24
    22a6:	cb 01       	movw	r24, r22
    22a8:	bc 01       	movw	r22, r24
    22aa:	cd 01       	movw	r24, r26
    22ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22b0:	dc 01       	movw	r26, r24
    22b2:	cb 01       	movw	r24, r22
    22b4:	9e 83       	std	Y+6, r25	; 0x06
    22b6:	8d 83       	std	Y+5, r24	; 0x05
    22b8:	0f c0       	rjmp	.+30     	; 0x22d8 <LCD_voidClearScreen+0xcc>
    22ba:	88 ec       	ldi	r24, 0xC8	; 200
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	9c 83       	std	Y+4, r25	; 0x04
    22c0:	8b 83       	std	Y+3, r24	; 0x03
    22c2:	8b 81       	ldd	r24, Y+3	; 0x03
    22c4:	9c 81       	ldd	r25, Y+4	; 0x04
    22c6:	01 97       	sbiw	r24, 0x01	; 1
    22c8:	f1 f7       	brne	.-4      	; 0x22c6 <LCD_voidClearScreen+0xba>
    22ca:	9c 83       	std	Y+4, r25	; 0x04
    22cc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22ce:	8d 81       	ldd	r24, Y+5	; 0x05
    22d0:	9e 81       	ldd	r25, Y+6	; 0x06
    22d2:	01 97       	sbiw	r24, 0x01	; 1
    22d4:	9e 83       	std	Y+6, r25	; 0x06
    22d6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22d8:	8d 81       	ldd	r24, Y+5	; 0x05
    22da:	9e 81       	ldd	r25, Y+6	; 0x06
    22dc:	00 97       	sbiw	r24, 0x00	; 0
    22de:	69 f7       	brne	.-38     	; 0x22ba <LCD_voidClearScreen+0xae>
    22e0:	14 c0       	rjmp	.+40     	; 0x230a <LCD_voidClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22e2:	6f 81       	ldd	r22, Y+7	; 0x07
    22e4:	78 85       	ldd	r23, Y+8	; 0x08
    22e6:	89 85       	ldd	r24, Y+9	; 0x09
    22e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22ee:	dc 01       	movw	r26, r24
    22f0:	cb 01       	movw	r24, r22
    22f2:	9e 83       	std	Y+6, r25	; 0x06
    22f4:	8d 83       	std	Y+5, r24	; 0x05
    22f6:	8d 81       	ldd	r24, Y+5	; 0x05
    22f8:	9e 81       	ldd	r25, Y+6	; 0x06
    22fa:	9a 83       	std	Y+2, r25	; 0x02
    22fc:	89 83       	std	Y+1, r24	; 0x01
    22fe:	89 81       	ldd	r24, Y+1	; 0x01
    2300:	9a 81       	ldd	r25, Y+2	; 0x02
    2302:	01 97       	sbiw	r24, 0x01	; 1
    2304:	f1 f7       	brne	.-4      	; 0x2302 <LCD_voidClearScreen+0xf6>
    2306:	9a 83       	std	Y+2, r25	; 0x02
    2308:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    230a:	2e 96       	adiw	r28, 0x0e	; 14
    230c:	0f b6       	in	r0, 0x3f	; 63
    230e:	f8 94       	cli
    2310:	de bf       	out	0x3e, r29	; 62
    2312:	0f be       	out	0x3f, r0	; 63
    2314:	cd bf       	out	0x3d, r28	; 61
    2316:	cf 91       	pop	r28
    2318:	df 91       	pop	r29
    231a:	08 95       	ret

0000231c <LCD_voidDispChar>:
void LCD_voidDispChar(u8 copy_u8char)
{
    231c:	df 93       	push	r29
    231e:	cf 93       	push	r28
    2320:	cd b7       	in	r28, 0x3d	; 61
    2322:	de b7       	in	r29, 0x3e	; 62
    2324:	2f 97       	sbiw	r28, 0x0f	; 15
    2326:	0f b6       	in	r0, 0x3f	; 63
    2328:	f8 94       	cli
    232a:	de bf       	out	0x3e, r29	; 62
    232c:	0f be       	out	0x3f, r0	; 63
    232e:	cd bf       	out	0x3d, r28	; 61
    2330:	8f 87       	std	Y+15, r24	; 0x0f
		GPIO_voidWritePin  (LCD_RWPORT , LCD_RWPIN , 0);
		LCD_voidSendEnPulse();
		
	#elif LCD_MODE == 1 
		#if LCD_NIBBLE == 0 
			GPIO_voidWriteLowNipple(LCD_PORT , copy_u8char>>4);
    2332:	8f 85       	ldd	r24, Y+15	; 0x0f
    2334:	98 2f       	mov	r25, r24
    2336:	92 95       	swap	r25
    2338:	9f 70       	andi	r25, 0x0F	; 15
    233a:	83 e0       	ldi	r24, 0x03	; 3
    233c:	69 2f       	mov	r22, r25
    233e:	0e 94 0c 0b 	call	0x1618	; 0x1618 <GPIO_voidWriteLowNipple>
			GPIO_voidWritePin  (LCD_RSPORT , LCD_RSPIN , 1);
    2342:	82 e0       	ldi	r24, 0x02	; 2
    2344:	60 e0       	ldi	r22, 0x00	; 0
    2346:	41 e0       	ldi	r20, 0x01	; 1
    2348:	0e 94 2c 08 	call	0x1058	; 0x1058 <GPIO_voidWritePin>
			GPIO_voidWritePin  (LCD_RWPORT , LCD_RWPIN , 0);
    234c:	82 e0       	ldi	r24, 0x02	; 2
    234e:	61 e0       	ldi	r22, 0x01	; 1
    2350:	40 e0       	ldi	r20, 0x00	; 0
    2352:	0e 94 2c 08 	call	0x1058	; 0x1058 <GPIO_voidWritePin>
			LCD_voidSendEnPulse();
    2356:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <LCD_voidSendEnPulse>
		
			GPIO_voidWriteLowNipple(LCD_PORT , copy_u8char);
    235a:	83 e0       	ldi	r24, 0x03	; 3
    235c:	6f 85       	ldd	r22, Y+15	; 0x0f
    235e:	0e 94 0c 0b 	call	0x1618	; 0x1618 <GPIO_voidWriteLowNipple>
			GPIO_voidWritePin  (LCD_RSPORT , LCD_RSPIN , 1);
    2362:	82 e0       	ldi	r24, 0x02	; 2
    2364:	60 e0       	ldi	r22, 0x00	; 0
    2366:	41 e0       	ldi	r20, 0x01	; 1
    2368:	0e 94 2c 08 	call	0x1058	; 0x1058 <GPIO_voidWritePin>
			GPIO_voidWritePin  (LCD_RWPORT , LCD_RWPIN , 0);
    236c:	82 e0       	ldi	r24, 0x02	; 2
    236e:	61 e0       	ldi	r22, 0x01	; 1
    2370:	40 e0       	ldi	r20, 0x00	; 0
    2372:	0e 94 2c 08 	call	0x1058	; 0x1058 <GPIO_voidWritePin>
			LCD_voidSendEnPulse();
    2376:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <LCD_voidSendEnPulse>
    237a:	80 e0       	ldi	r24, 0x00	; 0
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	a0 e0       	ldi	r26, 0x00	; 0
    2380:	b0 e4       	ldi	r27, 0x40	; 64
    2382:	8b 87       	std	Y+11, r24	; 0x0b
    2384:	9c 87       	std	Y+12, r25	; 0x0c
    2386:	ad 87       	std	Y+13, r26	; 0x0d
    2388:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    238a:	6b 85       	ldd	r22, Y+11	; 0x0b
    238c:	7c 85       	ldd	r23, Y+12	; 0x0c
    238e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2390:	9e 85       	ldd	r25, Y+14	; 0x0e
    2392:	20 e0       	ldi	r18, 0x00	; 0
    2394:	30 e0       	ldi	r19, 0x00	; 0
    2396:	4a ef       	ldi	r20, 0xFA	; 250
    2398:	54 e4       	ldi	r21, 0x44	; 68
    239a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    239e:	dc 01       	movw	r26, r24
    23a0:	cb 01       	movw	r24, r22
    23a2:	8f 83       	std	Y+7, r24	; 0x07
    23a4:	98 87       	std	Y+8, r25	; 0x08
    23a6:	a9 87       	std	Y+9, r26	; 0x09
    23a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23aa:	6f 81       	ldd	r22, Y+7	; 0x07
    23ac:	78 85       	ldd	r23, Y+8	; 0x08
    23ae:	89 85       	ldd	r24, Y+9	; 0x09
    23b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    23b2:	20 e0       	ldi	r18, 0x00	; 0
    23b4:	30 e0       	ldi	r19, 0x00	; 0
    23b6:	40 e8       	ldi	r20, 0x80	; 128
    23b8:	5f e3       	ldi	r21, 0x3F	; 63
    23ba:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    23be:	88 23       	and	r24, r24
    23c0:	2c f4       	brge	.+10     	; 0x23cc <LCD_voidDispChar+0xb0>
		__ticks = 1;
    23c2:	81 e0       	ldi	r24, 0x01	; 1
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	9e 83       	std	Y+6, r25	; 0x06
    23c8:	8d 83       	std	Y+5, r24	; 0x05
    23ca:	3f c0       	rjmp	.+126    	; 0x244a <LCD_voidDispChar+0x12e>
	else if (__tmp > 65535)
    23cc:	6f 81       	ldd	r22, Y+7	; 0x07
    23ce:	78 85       	ldd	r23, Y+8	; 0x08
    23d0:	89 85       	ldd	r24, Y+9	; 0x09
    23d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    23d4:	20 e0       	ldi	r18, 0x00	; 0
    23d6:	3f ef       	ldi	r19, 0xFF	; 255
    23d8:	4f e7       	ldi	r20, 0x7F	; 127
    23da:	57 e4       	ldi	r21, 0x47	; 71
    23dc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    23e0:	18 16       	cp	r1, r24
    23e2:	4c f5       	brge	.+82     	; 0x2436 <LCD_voidDispChar+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    23e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    23e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    23ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    23ec:	20 e0       	ldi	r18, 0x00	; 0
    23ee:	30 e0       	ldi	r19, 0x00	; 0
    23f0:	40 e2       	ldi	r20, 0x20	; 32
    23f2:	51 e4       	ldi	r21, 0x41	; 65
    23f4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23f8:	dc 01       	movw	r26, r24
    23fa:	cb 01       	movw	r24, r22
    23fc:	bc 01       	movw	r22, r24
    23fe:	cd 01       	movw	r24, r26
    2400:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2404:	dc 01       	movw	r26, r24
    2406:	cb 01       	movw	r24, r22
    2408:	9e 83       	std	Y+6, r25	; 0x06
    240a:	8d 83       	std	Y+5, r24	; 0x05
    240c:	0f c0       	rjmp	.+30     	; 0x242c <LCD_voidDispChar+0x110>
    240e:	88 ec       	ldi	r24, 0xC8	; 200
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	9c 83       	std	Y+4, r25	; 0x04
    2414:	8b 83       	std	Y+3, r24	; 0x03
    2416:	8b 81       	ldd	r24, Y+3	; 0x03
    2418:	9c 81       	ldd	r25, Y+4	; 0x04
    241a:	01 97       	sbiw	r24, 0x01	; 1
    241c:	f1 f7       	brne	.-4      	; 0x241a <LCD_voidDispChar+0xfe>
    241e:	9c 83       	std	Y+4, r25	; 0x04
    2420:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2422:	8d 81       	ldd	r24, Y+5	; 0x05
    2424:	9e 81       	ldd	r25, Y+6	; 0x06
    2426:	01 97       	sbiw	r24, 0x01	; 1
    2428:	9e 83       	std	Y+6, r25	; 0x06
    242a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    242c:	8d 81       	ldd	r24, Y+5	; 0x05
    242e:	9e 81       	ldd	r25, Y+6	; 0x06
    2430:	00 97       	sbiw	r24, 0x00	; 0
    2432:	69 f7       	brne	.-38     	; 0x240e <LCD_voidDispChar+0xf2>
    2434:	14 c0       	rjmp	.+40     	; 0x245e <LCD_voidDispChar+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2436:	6f 81       	ldd	r22, Y+7	; 0x07
    2438:	78 85       	ldd	r23, Y+8	; 0x08
    243a:	89 85       	ldd	r24, Y+9	; 0x09
    243c:	9a 85       	ldd	r25, Y+10	; 0x0a
    243e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2442:	dc 01       	movw	r26, r24
    2444:	cb 01       	movw	r24, r22
    2446:	9e 83       	std	Y+6, r25	; 0x06
    2448:	8d 83       	std	Y+5, r24	; 0x05
    244a:	8d 81       	ldd	r24, Y+5	; 0x05
    244c:	9e 81       	ldd	r25, Y+6	; 0x06
    244e:	9a 83       	std	Y+2, r25	; 0x02
    2450:	89 83       	std	Y+1, r24	; 0x01
    2452:	89 81       	ldd	r24, Y+1	; 0x01
    2454:	9a 81       	ldd	r25, Y+2	; 0x02
    2456:	01 97       	sbiw	r24, 0x01	; 1
    2458:	f1 f7       	brne	.-4      	; 0x2456 <LCD_voidDispChar+0x13a>
    245a:	9a 83       	std	Y+2, r25	; 0x02
    245c:	89 83       	std	Y+1, r24	; 0x01
			LCD_voidSendEnPulse();
			_delay_ms(2);
		#endif
	#endif
		
}
    245e:	2f 96       	adiw	r28, 0x0f	; 15
    2460:	0f b6       	in	r0, 0x3f	; 63
    2462:	f8 94       	cli
    2464:	de bf       	out	0x3e, r29	; 62
    2466:	0f be       	out	0x3f, r0	; 63
    2468:	cd bf       	out	0x3d, r28	; 61
    246a:	cf 91       	pop	r28
    246c:	df 91       	pop	r29
    246e:	08 95       	ret

00002470 <LCD_voidDispString>:
void LCD_voidDispString(u8 *copy_u8String)
{
    2470:	df 93       	push	r29
    2472:	cf 93       	push	r28
    2474:	00 d0       	rcall	.+0      	; 0x2476 <LCD_voidDispString+0x6>
    2476:	cd b7       	in	r28, 0x3d	; 61
    2478:	de b7       	in	r29, 0x3e	; 62
    247a:	9a 83       	std	Y+2, r25	; 0x02
    247c:	89 83       	std	Y+1, r24	; 0x01
    247e:	0a c0       	rjmp	.+20     	; 0x2494 <LCD_voidDispString+0x24>
	while ((*copy_u8String) != '\0')
	{
		LCD_voidDispChar (*copy_u8String);
    2480:	e9 81       	ldd	r30, Y+1	; 0x01
    2482:	fa 81       	ldd	r31, Y+2	; 0x02
    2484:	80 81       	ld	r24, Z
    2486:	0e 94 8e 11 	call	0x231c	; 0x231c <LCD_voidDispChar>
		copy_u8String ++ ;
    248a:	89 81       	ldd	r24, Y+1	; 0x01
    248c:	9a 81       	ldd	r25, Y+2	; 0x02
    248e:	01 96       	adiw	r24, 0x01	; 1
    2490:	9a 83       	std	Y+2, r25	; 0x02
    2492:	89 83       	std	Y+1, r24	; 0x01
	#endif
		
}
void LCD_voidDispString(u8 *copy_u8String)
{
	while ((*copy_u8String) != '\0')
    2494:	e9 81       	ldd	r30, Y+1	; 0x01
    2496:	fa 81       	ldd	r31, Y+2	; 0x02
    2498:	80 81       	ld	r24, Z
    249a:	88 23       	and	r24, r24
    249c:	89 f7       	brne	.-30     	; 0x2480 <LCD_voidDispString+0x10>
	{
		LCD_voidDispChar (*copy_u8String);
		copy_u8String ++ ;
	}
}
    249e:	0f 90       	pop	r0
    24a0:	0f 90       	pop	r0
    24a2:	cf 91       	pop	r28
    24a4:	df 91       	pop	r29
    24a6:	08 95       	ret

000024a8 <LCD_voidDispNumber>:

void LCD_voidDispNumber (f32 copy_f32Num)
{
    24a8:	df 93       	push	r29
    24aa:	cf 93       	push	r28
    24ac:	00 d0       	rcall	.+0      	; 0x24ae <LCD_voidDispNumber+0x6>
    24ae:	00 d0       	rcall	.+0      	; 0x24b0 <LCD_voidDispNumber+0x8>
    24b0:	0f 92       	push	r0
    24b2:	cd b7       	in	r28, 0x3d	; 61
    24b4:	de b7       	in	r29, 0x3e	; 62
    24b6:	6a 83       	std	Y+2, r22	; 0x02
    24b8:	7b 83       	std	Y+3, r23	; 0x03
    24ba:	8c 83       	std	Y+4, r24	; 0x04
    24bc:	9d 83       	std	Y+5, r25	; 0x05
	u8 str[1];
	sprintf(str,"%d",(u8)copy_f32Num);
    24be:	6a 81       	ldd	r22, Y+2	; 0x02
    24c0:	7b 81       	ldd	r23, Y+3	; 0x03
    24c2:	8c 81       	ldd	r24, Y+4	; 0x04
    24c4:	9d 81       	ldd	r25, Y+5	; 0x05
    24c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24ca:	dc 01       	movw	r26, r24
    24cc:	cb 01       	movw	r24, r22
    24ce:	28 2f       	mov	r18, r24
    24d0:	30 e0       	ldi	r19, 0x00	; 0
    24d2:	00 d0       	rcall	.+0      	; 0x24d4 <LCD_voidDispNumber+0x2c>
    24d4:	00 d0       	rcall	.+0      	; 0x24d6 <LCD_voidDispNumber+0x2e>
    24d6:	00 d0       	rcall	.+0      	; 0x24d8 <LCD_voidDispNumber+0x30>
    24d8:	ed b7       	in	r30, 0x3d	; 61
    24da:	fe b7       	in	r31, 0x3e	; 62
    24dc:	31 96       	adiw	r30, 0x01	; 1
    24de:	ce 01       	movw	r24, r28
    24e0:	01 96       	adiw	r24, 0x01	; 1
    24e2:	91 83       	std	Z+1, r25	; 0x01
    24e4:	80 83       	st	Z, r24
    24e6:	80 e6       	ldi	r24, 0x60	; 96
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	93 83       	std	Z+3, r25	; 0x03
    24ec:	82 83       	std	Z+2, r24	; 0x02
    24ee:	35 83       	std	Z+5, r19	; 0x05
    24f0:	24 83       	std	Z+4, r18	; 0x04
    24f2:	0e 94 59 13 	call	0x26b2	; 0x26b2 <sprintf>
    24f6:	8d b7       	in	r24, 0x3d	; 61
    24f8:	9e b7       	in	r25, 0x3e	; 62
    24fa:	06 96       	adiw	r24, 0x06	; 6
    24fc:	0f b6       	in	r0, 0x3f	; 63
    24fe:	f8 94       	cli
    2500:	9e bf       	out	0x3e, r25	; 62
    2502:	0f be       	out	0x3f, r0	; 63
    2504:	8d bf       	out	0x3d, r24	; 61
	LCD_voidDispString(str);
    2506:	ce 01       	movw	r24, r28
    2508:	01 96       	adiw	r24, 0x01	; 1
    250a:	0e 94 38 12 	call	0x2470	; 0x2470 <LCD_voidDispString>
	LCD_voidDispChar('.');
    250e:	8e e2       	ldi	r24, 0x2E	; 46
    2510:	0e 94 8e 11 	call	0x231c	; 0x231c <LCD_voidDispChar>
	copy_f32Num = ((copy_f32Num-(u8)copy_f32Num)*100);
    2514:	6a 81       	ldd	r22, Y+2	; 0x02
    2516:	7b 81       	ldd	r23, Y+3	; 0x03
    2518:	8c 81       	ldd	r24, Y+4	; 0x04
    251a:	9d 81       	ldd	r25, Y+5	; 0x05
    251c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2520:	dc 01       	movw	r26, r24
    2522:	cb 01       	movw	r24, r22
    2524:	88 2f       	mov	r24, r24
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	aa 27       	eor	r26, r26
    252a:	97 fd       	sbrc	r25, 7
    252c:	a0 95       	com	r26
    252e:	ba 2f       	mov	r27, r26
    2530:	bc 01       	movw	r22, r24
    2532:	cd 01       	movw	r24, r26
    2534:	0e 94 a1 03 	call	0x742	; 0x742 <__floatsisf>
    2538:	9b 01       	movw	r18, r22
    253a:	ac 01       	movw	r20, r24
    253c:	6a 81       	ldd	r22, Y+2	; 0x02
    253e:	7b 81       	ldd	r23, Y+3	; 0x03
    2540:	8c 81       	ldd	r24, Y+4	; 0x04
    2542:	9d 81       	ldd	r25, Y+5	; 0x05
    2544:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    2548:	dc 01       	movw	r26, r24
    254a:	cb 01       	movw	r24, r22
    254c:	bc 01       	movw	r22, r24
    254e:	cd 01       	movw	r24, r26
    2550:	20 e0       	ldi	r18, 0x00	; 0
    2552:	30 e0       	ldi	r19, 0x00	; 0
    2554:	48 ec       	ldi	r20, 0xC8	; 200
    2556:	52 e4       	ldi	r21, 0x42	; 66
    2558:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    255c:	dc 01       	movw	r26, r24
    255e:	cb 01       	movw	r24, r22
    2560:	8a 83       	std	Y+2, r24	; 0x02
    2562:	9b 83       	std	Y+3, r25	; 0x03
    2564:	ac 83       	std	Y+4, r26	; 0x04
    2566:	bd 83       	std	Y+5, r27	; 0x05
	sprintf(str,"%d",(u8)copy_f32Num);
    2568:	6a 81       	ldd	r22, Y+2	; 0x02
    256a:	7b 81       	ldd	r23, Y+3	; 0x03
    256c:	8c 81       	ldd	r24, Y+4	; 0x04
    256e:	9d 81       	ldd	r25, Y+5	; 0x05
    2570:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2574:	dc 01       	movw	r26, r24
    2576:	cb 01       	movw	r24, r22
    2578:	28 2f       	mov	r18, r24
    257a:	30 e0       	ldi	r19, 0x00	; 0
    257c:	00 d0       	rcall	.+0      	; 0x257e <LCD_voidDispNumber+0xd6>
    257e:	00 d0       	rcall	.+0      	; 0x2580 <LCD_voidDispNumber+0xd8>
    2580:	00 d0       	rcall	.+0      	; 0x2582 <LCD_voidDispNumber+0xda>
    2582:	ed b7       	in	r30, 0x3d	; 61
    2584:	fe b7       	in	r31, 0x3e	; 62
    2586:	31 96       	adiw	r30, 0x01	; 1
    2588:	ce 01       	movw	r24, r28
    258a:	01 96       	adiw	r24, 0x01	; 1
    258c:	91 83       	std	Z+1, r25	; 0x01
    258e:	80 83       	st	Z, r24
    2590:	80 e6       	ldi	r24, 0x60	; 96
    2592:	90 e0       	ldi	r25, 0x00	; 0
    2594:	93 83       	std	Z+3, r25	; 0x03
    2596:	82 83       	std	Z+2, r24	; 0x02
    2598:	35 83       	std	Z+5, r19	; 0x05
    259a:	24 83       	std	Z+4, r18	; 0x04
    259c:	0e 94 59 13 	call	0x26b2	; 0x26b2 <sprintf>
    25a0:	8d b7       	in	r24, 0x3d	; 61
    25a2:	9e b7       	in	r25, 0x3e	; 62
    25a4:	06 96       	adiw	r24, 0x06	; 6
    25a6:	0f b6       	in	r0, 0x3f	; 63
    25a8:	f8 94       	cli
    25aa:	9e bf       	out	0x3e, r25	; 62
    25ac:	0f be       	out	0x3f, r0	; 63
    25ae:	8d bf       	out	0x3d, r24	; 61
	LCD_voidDispString(str);
    25b0:	ce 01       	movw	r24, r28
    25b2:	01 96       	adiw	r24, 0x01	; 1
    25b4:	0e 94 38 12 	call	0x2470	; 0x2470 <LCD_voidDispString>
}
    25b8:	0f 90       	pop	r0
    25ba:	0f 90       	pop	r0
    25bc:	0f 90       	pop	r0
    25be:	0f 90       	pop	r0
    25c0:	0f 90       	pop	r0
    25c2:	cf 91       	pop	r28
    25c4:	df 91       	pop	r29
    25c6:	08 95       	ret

000025c8 <main>:
#include "ADC_interface.h"
#include "LCD_interface.h"


int main (void)
{
    25c8:	df 93       	push	r29
    25ca:	cf 93       	push	r28
    25cc:	00 d0       	rcall	.+0      	; 0x25ce <main+0x6>
    25ce:	cd b7       	in	r28, 0x3d	; 61
    25d0:	de b7       	in	r29, 0x3e	; 62
	LCD_voidInit();
    25d2:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <LCD_voidInit>
	u16 temp;
	while(1)
	{
		ADC_voidinit(1);
    25d6:	81 e0       	ldi	r24, 0x01	; 1
    25d8:	0e 94 c1 06 	call	0xd82	; 0xd82 <ADC_voidinit>
		temp = ADC_u16Read();
    25dc:	0e 94 09 07 	call	0xe12	; 0xe12 <ADC_u16Read>
    25e0:	9a 83       	std	Y+2, r25	; 0x02
    25e2:	89 83       	std	Y+1, r24	; 0x01
		LCD_voidDispNumber(temp);
    25e4:	89 81       	ldd	r24, Y+1	; 0x01
    25e6:	9a 81       	ldd	r25, Y+2	; 0x02
    25e8:	cc 01       	movw	r24, r24
    25ea:	a0 e0       	ldi	r26, 0x00	; 0
    25ec:	b0 e0       	ldi	r27, 0x00	; 0
    25ee:	bc 01       	movw	r22, r24
    25f0:	cd 01       	movw	r24, r26
    25f2:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__floatunsisf>
    25f6:	dc 01       	movw	r26, r24
    25f8:	cb 01       	movw	r24, r22
    25fa:	bc 01       	movw	r22, r24
    25fc:	cd 01       	movw	r24, r26
    25fe:	0e 94 54 12 	call	0x24a8	; 0x24a8 <LCD_voidDispNumber>
		ADC_voidinit(2);
    2602:	82 e0       	ldi	r24, 0x02	; 2
    2604:	0e 94 c1 06 	call	0xd82	; 0xd82 <ADC_voidinit>
		LCD_voidMoveCrusor(2,1);
    2608:	82 e0       	ldi	r24, 0x02	; 2
    260a:	61 e0       	ldi	r22, 0x01	; 1
    260c:	0e 94 60 10 	call	0x20c0	; 0x20c0 <LCD_voidMoveCrusor>
		temp=ADC_u16Read();
    2610:	0e 94 09 07 	call	0xe12	; 0xe12 <ADC_u16Read>
    2614:	9a 83       	std	Y+2, r25	; 0x02
    2616:	89 83       	std	Y+1, r24	; 0x01
		LCD_voidDispNumber(temp);
    2618:	89 81       	ldd	r24, Y+1	; 0x01
    261a:	9a 81       	ldd	r25, Y+2	; 0x02
    261c:	cc 01       	movw	r24, r24
    261e:	a0 e0       	ldi	r26, 0x00	; 0
    2620:	b0 e0       	ldi	r27, 0x00	; 0
    2622:	bc 01       	movw	r22, r24
    2624:	cd 01       	movw	r24, r26
    2626:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__floatunsisf>
    262a:	dc 01       	movw	r26, r24
    262c:	cb 01       	movw	r24, r22
    262e:	bc 01       	movw	r22, r24
    2630:	cd 01       	movw	r24, r26
    2632:	0e 94 54 12 	call	0x24a8	; 0x24a8 <LCD_voidDispNumber>
		LCD_voidClearScreen();
    2636:	0e 94 06 11 	call	0x220c	; 0x220c <LCD_voidClearScreen>
		LCD_voidMoveCrusor(1 , 1);
    263a:	81 e0       	ldi	r24, 0x01	; 1
    263c:	61 e0       	ldi	r22, 0x01	; 1
    263e:	0e 94 60 10 	call	0x20c0	; 0x20c0 <LCD_voidMoveCrusor>
    2642:	c9 cf       	rjmp	.-110    	; 0x25d6 <main+0xe>

00002644 <__prologue_saves__>:
    2644:	2f 92       	push	r2
    2646:	3f 92       	push	r3
    2648:	4f 92       	push	r4
    264a:	5f 92       	push	r5
    264c:	6f 92       	push	r6
    264e:	7f 92       	push	r7
    2650:	8f 92       	push	r8
    2652:	9f 92       	push	r9
    2654:	af 92       	push	r10
    2656:	bf 92       	push	r11
    2658:	cf 92       	push	r12
    265a:	df 92       	push	r13
    265c:	ef 92       	push	r14
    265e:	ff 92       	push	r15
    2660:	0f 93       	push	r16
    2662:	1f 93       	push	r17
    2664:	cf 93       	push	r28
    2666:	df 93       	push	r29
    2668:	cd b7       	in	r28, 0x3d	; 61
    266a:	de b7       	in	r29, 0x3e	; 62
    266c:	ca 1b       	sub	r28, r26
    266e:	db 0b       	sbc	r29, r27
    2670:	0f b6       	in	r0, 0x3f	; 63
    2672:	f8 94       	cli
    2674:	de bf       	out	0x3e, r29	; 62
    2676:	0f be       	out	0x3f, r0	; 63
    2678:	cd bf       	out	0x3d, r28	; 61
    267a:	09 94       	ijmp

0000267c <__epilogue_restores__>:
    267c:	2a 88       	ldd	r2, Y+18	; 0x12
    267e:	39 88       	ldd	r3, Y+17	; 0x11
    2680:	48 88       	ldd	r4, Y+16	; 0x10
    2682:	5f 84       	ldd	r5, Y+15	; 0x0f
    2684:	6e 84       	ldd	r6, Y+14	; 0x0e
    2686:	7d 84       	ldd	r7, Y+13	; 0x0d
    2688:	8c 84       	ldd	r8, Y+12	; 0x0c
    268a:	9b 84       	ldd	r9, Y+11	; 0x0b
    268c:	aa 84       	ldd	r10, Y+10	; 0x0a
    268e:	b9 84       	ldd	r11, Y+9	; 0x09
    2690:	c8 84       	ldd	r12, Y+8	; 0x08
    2692:	df 80       	ldd	r13, Y+7	; 0x07
    2694:	ee 80       	ldd	r14, Y+6	; 0x06
    2696:	fd 80       	ldd	r15, Y+5	; 0x05
    2698:	0c 81       	ldd	r16, Y+4	; 0x04
    269a:	1b 81       	ldd	r17, Y+3	; 0x03
    269c:	aa 81       	ldd	r26, Y+2	; 0x02
    269e:	b9 81       	ldd	r27, Y+1	; 0x01
    26a0:	ce 0f       	add	r28, r30
    26a2:	d1 1d       	adc	r29, r1
    26a4:	0f b6       	in	r0, 0x3f	; 63
    26a6:	f8 94       	cli
    26a8:	de bf       	out	0x3e, r29	; 62
    26aa:	0f be       	out	0x3f, r0	; 63
    26ac:	cd bf       	out	0x3d, r28	; 61
    26ae:	ed 01       	movw	r28, r26
    26b0:	08 95       	ret

000026b2 <sprintf>:
    26b2:	ae e0       	ldi	r26, 0x0E	; 14
    26b4:	b0 e0       	ldi	r27, 0x00	; 0
    26b6:	ef e5       	ldi	r30, 0x5F	; 95
    26b8:	f3 e1       	ldi	r31, 0x13	; 19
    26ba:	0c 94 30 13 	jmp	0x2660	; 0x2660 <__prologue_saves__+0x1c>
    26be:	0d 89       	ldd	r16, Y+21	; 0x15
    26c0:	1e 89       	ldd	r17, Y+22	; 0x16
    26c2:	86 e0       	ldi	r24, 0x06	; 6
    26c4:	8c 83       	std	Y+4, r24	; 0x04
    26c6:	1a 83       	std	Y+2, r17	; 0x02
    26c8:	09 83       	std	Y+1, r16	; 0x01
    26ca:	8f ef       	ldi	r24, 0xFF	; 255
    26cc:	9f e7       	ldi	r25, 0x7F	; 127
    26ce:	9e 83       	std	Y+6, r25	; 0x06
    26d0:	8d 83       	std	Y+5, r24	; 0x05
    26d2:	9e 01       	movw	r18, r28
    26d4:	27 5e       	subi	r18, 0xE7	; 231
    26d6:	3f 4f       	sbci	r19, 0xFF	; 255
    26d8:	ce 01       	movw	r24, r28
    26da:	01 96       	adiw	r24, 0x01	; 1
    26dc:	6f 89       	ldd	r22, Y+23	; 0x17
    26de:	78 8d       	ldd	r23, Y+24	; 0x18
    26e0:	a9 01       	movw	r20, r18
    26e2:	0e 94 7d 13 	call	0x26fa	; 0x26fa <vfprintf>
    26e6:	2f 81       	ldd	r18, Y+7	; 0x07
    26e8:	38 85       	ldd	r19, Y+8	; 0x08
    26ea:	02 0f       	add	r16, r18
    26ec:	13 1f       	adc	r17, r19
    26ee:	f8 01       	movw	r30, r16
    26f0:	10 82       	st	Z, r1
    26f2:	2e 96       	adiw	r28, 0x0e	; 14
    26f4:	e4 e0       	ldi	r30, 0x04	; 4
    26f6:	0c 94 4c 13 	jmp	0x2698	; 0x2698 <__epilogue_restores__+0x1c>

000026fa <vfprintf>:
    26fa:	ab e0       	ldi	r26, 0x0B	; 11
    26fc:	b0 e0       	ldi	r27, 0x00	; 0
    26fe:	e3 e8       	ldi	r30, 0x83	; 131
    2700:	f3 e1       	ldi	r31, 0x13	; 19
    2702:	0c 94 22 13 	jmp	0x2644	; 0x2644 <__prologue_saves__>
    2706:	3c 01       	movw	r6, r24
    2708:	2b 01       	movw	r4, r22
    270a:	5a 01       	movw	r10, r20
    270c:	fc 01       	movw	r30, r24
    270e:	17 82       	std	Z+7, r1	; 0x07
    2710:	16 82       	std	Z+6, r1	; 0x06
    2712:	83 81       	ldd	r24, Z+3	; 0x03
    2714:	81 fd       	sbrc	r24, 1
    2716:	03 c0       	rjmp	.+6      	; 0x271e <vfprintf+0x24>
    2718:	6f ef       	ldi	r22, 0xFF	; 255
    271a:	7f ef       	ldi	r23, 0xFF	; 255
    271c:	c6 c1       	rjmp	.+908    	; 0x2aaa <vfprintf+0x3b0>
    271e:	9a e0       	ldi	r25, 0x0A	; 10
    2720:	89 2e       	mov	r8, r25
    2722:	1e 01       	movw	r2, r28
    2724:	08 94       	sec
    2726:	21 1c       	adc	r2, r1
    2728:	31 1c       	adc	r3, r1
    272a:	f3 01       	movw	r30, r6
    272c:	23 81       	ldd	r18, Z+3	; 0x03
    272e:	f2 01       	movw	r30, r4
    2730:	23 fd       	sbrc	r18, 3
    2732:	85 91       	lpm	r24, Z+
    2734:	23 ff       	sbrs	r18, 3
    2736:	81 91       	ld	r24, Z+
    2738:	2f 01       	movw	r4, r30
    273a:	88 23       	and	r24, r24
    273c:	09 f4       	brne	.+2      	; 0x2740 <vfprintf+0x46>
    273e:	b2 c1       	rjmp	.+868    	; 0x2aa4 <vfprintf+0x3aa>
    2740:	85 32       	cpi	r24, 0x25	; 37
    2742:	39 f4       	brne	.+14     	; 0x2752 <vfprintf+0x58>
    2744:	23 fd       	sbrc	r18, 3
    2746:	85 91       	lpm	r24, Z+
    2748:	23 ff       	sbrs	r18, 3
    274a:	81 91       	ld	r24, Z+
    274c:	2f 01       	movw	r4, r30
    274e:	85 32       	cpi	r24, 0x25	; 37
    2750:	29 f4       	brne	.+10     	; 0x275c <vfprintf+0x62>
    2752:	90 e0       	ldi	r25, 0x00	; 0
    2754:	b3 01       	movw	r22, r6
    2756:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <fputc>
    275a:	e7 cf       	rjmp	.-50     	; 0x272a <vfprintf+0x30>
    275c:	98 2f       	mov	r25, r24
    275e:	ff 24       	eor	r15, r15
    2760:	ee 24       	eor	r14, r14
    2762:	99 24       	eor	r9, r9
    2764:	ff e1       	ldi	r31, 0x1F	; 31
    2766:	ff 15       	cp	r31, r15
    2768:	d0 f0       	brcs	.+52     	; 0x279e <vfprintf+0xa4>
    276a:	9b 32       	cpi	r25, 0x2B	; 43
    276c:	69 f0       	breq	.+26     	; 0x2788 <vfprintf+0x8e>
    276e:	9c 32       	cpi	r25, 0x2C	; 44
    2770:	28 f4       	brcc	.+10     	; 0x277c <vfprintf+0x82>
    2772:	90 32       	cpi	r25, 0x20	; 32
    2774:	59 f0       	breq	.+22     	; 0x278c <vfprintf+0x92>
    2776:	93 32       	cpi	r25, 0x23	; 35
    2778:	91 f4       	brne	.+36     	; 0x279e <vfprintf+0xa4>
    277a:	0e c0       	rjmp	.+28     	; 0x2798 <vfprintf+0x9e>
    277c:	9d 32       	cpi	r25, 0x2D	; 45
    277e:	49 f0       	breq	.+18     	; 0x2792 <vfprintf+0x98>
    2780:	90 33       	cpi	r25, 0x30	; 48
    2782:	69 f4       	brne	.+26     	; 0x279e <vfprintf+0xa4>
    2784:	41 e0       	ldi	r20, 0x01	; 1
    2786:	24 c0       	rjmp	.+72     	; 0x27d0 <vfprintf+0xd6>
    2788:	52 e0       	ldi	r21, 0x02	; 2
    278a:	f5 2a       	or	r15, r21
    278c:	84 e0       	ldi	r24, 0x04	; 4
    278e:	f8 2a       	or	r15, r24
    2790:	28 c0       	rjmp	.+80     	; 0x27e2 <vfprintf+0xe8>
    2792:	98 e0       	ldi	r25, 0x08	; 8
    2794:	f9 2a       	or	r15, r25
    2796:	25 c0       	rjmp	.+74     	; 0x27e2 <vfprintf+0xe8>
    2798:	e0 e1       	ldi	r30, 0x10	; 16
    279a:	fe 2a       	or	r15, r30
    279c:	22 c0       	rjmp	.+68     	; 0x27e2 <vfprintf+0xe8>
    279e:	f7 fc       	sbrc	r15, 7
    27a0:	29 c0       	rjmp	.+82     	; 0x27f4 <vfprintf+0xfa>
    27a2:	89 2f       	mov	r24, r25
    27a4:	80 53       	subi	r24, 0x30	; 48
    27a6:	8a 30       	cpi	r24, 0x0A	; 10
    27a8:	70 f4       	brcc	.+28     	; 0x27c6 <vfprintf+0xcc>
    27aa:	f6 fe       	sbrs	r15, 6
    27ac:	05 c0       	rjmp	.+10     	; 0x27b8 <vfprintf+0xbe>
    27ae:	98 9c       	mul	r9, r8
    27b0:	90 2c       	mov	r9, r0
    27b2:	11 24       	eor	r1, r1
    27b4:	98 0e       	add	r9, r24
    27b6:	15 c0       	rjmp	.+42     	; 0x27e2 <vfprintf+0xe8>
    27b8:	e8 9c       	mul	r14, r8
    27ba:	e0 2c       	mov	r14, r0
    27bc:	11 24       	eor	r1, r1
    27be:	e8 0e       	add	r14, r24
    27c0:	f0 e2       	ldi	r31, 0x20	; 32
    27c2:	ff 2a       	or	r15, r31
    27c4:	0e c0       	rjmp	.+28     	; 0x27e2 <vfprintf+0xe8>
    27c6:	9e 32       	cpi	r25, 0x2E	; 46
    27c8:	29 f4       	brne	.+10     	; 0x27d4 <vfprintf+0xda>
    27ca:	f6 fc       	sbrc	r15, 6
    27cc:	6b c1       	rjmp	.+726    	; 0x2aa4 <vfprintf+0x3aa>
    27ce:	40 e4       	ldi	r20, 0x40	; 64
    27d0:	f4 2a       	or	r15, r20
    27d2:	07 c0       	rjmp	.+14     	; 0x27e2 <vfprintf+0xe8>
    27d4:	9c 36       	cpi	r25, 0x6C	; 108
    27d6:	19 f4       	brne	.+6      	; 0x27de <vfprintf+0xe4>
    27d8:	50 e8       	ldi	r21, 0x80	; 128
    27da:	f5 2a       	or	r15, r21
    27dc:	02 c0       	rjmp	.+4      	; 0x27e2 <vfprintf+0xe8>
    27de:	98 36       	cpi	r25, 0x68	; 104
    27e0:	49 f4       	brne	.+18     	; 0x27f4 <vfprintf+0xfa>
    27e2:	f2 01       	movw	r30, r4
    27e4:	23 fd       	sbrc	r18, 3
    27e6:	95 91       	lpm	r25, Z+
    27e8:	23 ff       	sbrs	r18, 3
    27ea:	91 91       	ld	r25, Z+
    27ec:	2f 01       	movw	r4, r30
    27ee:	99 23       	and	r25, r25
    27f0:	09 f0       	breq	.+2      	; 0x27f4 <vfprintf+0xfa>
    27f2:	b8 cf       	rjmp	.-144    	; 0x2764 <vfprintf+0x6a>
    27f4:	89 2f       	mov	r24, r25
    27f6:	85 54       	subi	r24, 0x45	; 69
    27f8:	83 30       	cpi	r24, 0x03	; 3
    27fa:	18 f0       	brcs	.+6      	; 0x2802 <vfprintf+0x108>
    27fc:	80 52       	subi	r24, 0x20	; 32
    27fe:	83 30       	cpi	r24, 0x03	; 3
    2800:	38 f4       	brcc	.+14     	; 0x2810 <vfprintf+0x116>
    2802:	44 e0       	ldi	r20, 0x04	; 4
    2804:	50 e0       	ldi	r21, 0x00	; 0
    2806:	a4 0e       	add	r10, r20
    2808:	b5 1e       	adc	r11, r21
    280a:	5f e3       	ldi	r21, 0x3F	; 63
    280c:	59 83       	std	Y+1, r21	; 0x01
    280e:	0f c0       	rjmp	.+30     	; 0x282e <vfprintf+0x134>
    2810:	93 36       	cpi	r25, 0x63	; 99
    2812:	31 f0       	breq	.+12     	; 0x2820 <vfprintf+0x126>
    2814:	93 37       	cpi	r25, 0x73	; 115
    2816:	79 f0       	breq	.+30     	; 0x2836 <vfprintf+0x13c>
    2818:	93 35       	cpi	r25, 0x53	; 83
    281a:	09 f0       	breq	.+2      	; 0x281e <vfprintf+0x124>
    281c:	56 c0       	rjmp	.+172    	; 0x28ca <vfprintf+0x1d0>
    281e:	20 c0       	rjmp	.+64     	; 0x2860 <vfprintf+0x166>
    2820:	f5 01       	movw	r30, r10
    2822:	80 81       	ld	r24, Z
    2824:	89 83       	std	Y+1, r24	; 0x01
    2826:	42 e0       	ldi	r20, 0x02	; 2
    2828:	50 e0       	ldi	r21, 0x00	; 0
    282a:	a4 0e       	add	r10, r20
    282c:	b5 1e       	adc	r11, r21
    282e:	61 01       	movw	r12, r2
    2830:	01 e0       	ldi	r16, 0x01	; 1
    2832:	10 e0       	ldi	r17, 0x00	; 0
    2834:	12 c0       	rjmp	.+36     	; 0x285a <vfprintf+0x160>
    2836:	f5 01       	movw	r30, r10
    2838:	c0 80       	ld	r12, Z
    283a:	d1 80       	ldd	r13, Z+1	; 0x01
    283c:	f6 fc       	sbrc	r15, 6
    283e:	03 c0       	rjmp	.+6      	; 0x2846 <vfprintf+0x14c>
    2840:	6f ef       	ldi	r22, 0xFF	; 255
    2842:	7f ef       	ldi	r23, 0xFF	; 255
    2844:	02 c0       	rjmp	.+4      	; 0x284a <vfprintf+0x150>
    2846:	69 2d       	mov	r22, r9
    2848:	70 e0       	ldi	r23, 0x00	; 0
    284a:	42 e0       	ldi	r20, 0x02	; 2
    284c:	50 e0       	ldi	r21, 0x00	; 0
    284e:	a4 0e       	add	r10, r20
    2850:	b5 1e       	adc	r11, r21
    2852:	c6 01       	movw	r24, r12
    2854:	0e 94 65 15 	call	0x2aca	; 0x2aca <strnlen>
    2858:	8c 01       	movw	r16, r24
    285a:	5f e7       	ldi	r21, 0x7F	; 127
    285c:	f5 22       	and	r15, r21
    285e:	14 c0       	rjmp	.+40     	; 0x2888 <vfprintf+0x18e>
    2860:	f5 01       	movw	r30, r10
    2862:	c0 80       	ld	r12, Z
    2864:	d1 80       	ldd	r13, Z+1	; 0x01
    2866:	f6 fc       	sbrc	r15, 6
    2868:	03 c0       	rjmp	.+6      	; 0x2870 <vfprintf+0x176>
    286a:	6f ef       	ldi	r22, 0xFF	; 255
    286c:	7f ef       	ldi	r23, 0xFF	; 255
    286e:	02 c0       	rjmp	.+4      	; 0x2874 <vfprintf+0x17a>
    2870:	69 2d       	mov	r22, r9
    2872:	70 e0       	ldi	r23, 0x00	; 0
    2874:	42 e0       	ldi	r20, 0x02	; 2
    2876:	50 e0       	ldi	r21, 0x00	; 0
    2878:	a4 0e       	add	r10, r20
    287a:	b5 1e       	adc	r11, r21
    287c:	c6 01       	movw	r24, r12
    287e:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <strnlen_P>
    2882:	8c 01       	movw	r16, r24
    2884:	50 e8       	ldi	r21, 0x80	; 128
    2886:	f5 2a       	or	r15, r21
    2888:	f3 fe       	sbrs	r15, 3
    288a:	07 c0       	rjmp	.+14     	; 0x289a <vfprintf+0x1a0>
    288c:	1a c0       	rjmp	.+52     	; 0x28c2 <vfprintf+0x1c8>
    288e:	80 e2       	ldi	r24, 0x20	; 32
    2890:	90 e0       	ldi	r25, 0x00	; 0
    2892:	b3 01       	movw	r22, r6
    2894:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <fputc>
    2898:	ea 94       	dec	r14
    289a:	8e 2d       	mov	r24, r14
    289c:	90 e0       	ldi	r25, 0x00	; 0
    289e:	08 17       	cp	r16, r24
    28a0:	19 07       	cpc	r17, r25
    28a2:	a8 f3       	brcs	.-22     	; 0x288e <vfprintf+0x194>
    28a4:	0e c0       	rjmp	.+28     	; 0x28c2 <vfprintf+0x1c8>
    28a6:	f6 01       	movw	r30, r12
    28a8:	f7 fc       	sbrc	r15, 7
    28aa:	85 91       	lpm	r24, Z+
    28ac:	f7 fe       	sbrs	r15, 7
    28ae:	81 91       	ld	r24, Z+
    28b0:	6f 01       	movw	r12, r30
    28b2:	90 e0       	ldi	r25, 0x00	; 0
    28b4:	b3 01       	movw	r22, r6
    28b6:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <fputc>
    28ba:	e1 10       	cpse	r14, r1
    28bc:	ea 94       	dec	r14
    28be:	01 50       	subi	r16, 0x01	; 1
    28c0:	10 40       	sbci	r17, 0x00	; 0
    28c2:	01 15       	cp	r16, r1
    28c4:	11 05       	cpc	r17, r1
    28c6:	79 f7       	brne	.-34     	; 0x28a6 <vfprintf+0x1ac>
    28c8:	ea c0       	rjmp	.+468    	; 0x2a9e <vfprintf+0x3a4>
    28ca:	94 36       	cpi	r25, 0x64	; 100
    28cc:	11 f0       	breq	.+4      	; 0x28d2 <vfprintf+0x1d8>
    28ce:	99 36       	cpi	r25, 0x69	; 105
    28d0:	69 f5       	brne	.+90     	; 0x292c <vfprintf+0x232>
    28d2:	f7 fe       	sbrs	r15, 7
    28d4:	08 c0       	rjmp	.+16     	; 0x28e6 <vfprintf+0x1ec>
    28d6:	f5 01       	movw	r30, r10
    28d8:	20 81       	ld	r18, Z
    28da:	31 81       	ldd	r19, Z+1	; 0x01
    28dc:	42 81       	ldd	r20, Z+2	; 0x02
    28de:	53 81       	ldd	r21, Z+3	; 0x03
    28e0:	84 e0       	ldi	r24, 0x04	; 4
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	0a c0       	rjmp	.+20     	; 0x28fa <vfprintf+0x200>
    28e6:	f5 01       	movw	r30, r10
    28e8:	80 81       	ld	r24, Z
    28ea:	91 81       	ldd	r25, Z+1	; 0x01
    28ec:	9c 01       	movw	r18, r24
    28ee:	44 27       	eor	r20, r20
    28f0:	37 fd       	sbrc	r19, 7
    28f2:	40 95       	com	r20
    28f4:	54 2f       	mov	r21, r20
    28f6:	82 e0       	ldi	r24, 0x02	; 2
    28f8:	90 e0       	ldi	r25, 0x00	; 0
    28fa:	a8 0e       	add	r10, r24
    28fc:	b9 1e       	adc	r11, r25
    28fe:	9f e6       	ldi	r25, 0x6F	; 111
    2900:	f9 22       	and	r15, r25
    2902:	57 ff       	sbrs	r21, 7
    2904:	09 c0       	rjmp	.+18     	; 0x2918 <vfprintf+0x21e>
    2906:	50 95       	com	r21
    2908:	40 95       	com	r20
    290a:	30 95       	com	r19
    290c:	21 95       	neg	r18
    290e:	3f 4f       	sbci	r19, 0xFF	; 255
    2910:	4f 4f       	sbci	r20, 0xFF	; 255
    2912:	5f 4f       	sbci	r21, 0xFF	; 255
    2914:	e0 e8       	ldi	r30, 0x80	; 128
    2916:	fe 2a       	or	r15, r30
    2918:	ca 01       	movw	r24, r20
    291a:	b9 01       	movw	r22, r18
    291c:	a1 01       	movw	r20, r2
    291e:	2a e0       	ldi	r18, 0x0A	; 10
    2920:	30 e0       	ldi	r19, 0x00	; 0
    2922:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <__ultoa_invert>
    2926:	d8 2e       	mov	r13, r24
    2928:	d2 18       	sub	r13, r2
    292a:	40 c0       	rjmp	.+128    	; 0x29ac <vfprintf+0x2b2>
    292c:	95 37       	cpi	r25, 0x75	; 117
    292e:	29 f4       	brne	.+10     	; 0x293a <vfprintf+0x240>
    2930:	1f 2d       	mov	r17, r15
    2932:	1f 7e       	andi	r17, 0xEF	; 239
    2934:	2a e0       	ldi	r18, 0x0A	; 10
    2936:	30 e0       	ldi	r19, 0x00	; 0
    2938:	1d c0       	rjmp	.+58     	; 0x2974 <vfprintf+0x27a>
    293a:	1f 2d       	mov	r17, r15
    293c:	19 7f       	andi	r17, 0xF9	; 249
    293e:	9f 36       	cpi	r25, 0x6F	; 111
    2940:	61 f0       	breq	.+24     	; 0x295a <vfprintf+0x260>
    2942:	90 37       	cpi	r25, 0x70	; 112
    2944:	20 f4       	brcc	.+8      	; 0x294e <vfprintf+0x254>
    2946:	98 35       	cpi	r25, 0x58	; 88
    2948:	09 f0       	breq	.+2      	; 0x294c <vfprintf+0x252>
    294a:	ac c0       	rjmp	.+344    	; 0x2aa4 <vfprintf+0x3aa>
    294c:	0f c0       	rjmp	.+30     	; 0x296c <vfprintf+0x272>
    294e:	90 37       	cpi	r25, 0x70	; 112
    2950:	39 f0       	breq	.+14     	; 0x2960 <vfprintf+0x266>
    2952:	98 37       	cpi	r25, 0x78	; 120
    2954:	09 f0       	breq	.+2      	; 0x2958 <vfprintf+0x25e>
    2956:	a6 c0       	rjmp	.+332    	; 0x2aa4 <vfprintf+0x3aa>
    2958:	04 c0       	rjmp	.+8      	; 0x2962 <vfprintf+0x268>
    295a:	28 e0       	ldi	r18, 0x08	; 8
    295c:	30 e0       	ldi	r19, 0x00	; 0
    295e:	0a c0       	rjmp	.+20     	; 0x2974 <vfprintf+0x27a>
    2960:	10 61       	ori	r17, 0x10	; 16
    2962:	14 fd       	sbrc	r17, 4
    2964:	14 60       	ori	r17, 0x04	; 4
    2966:	20 e1       	ldi	r18, 0x10	; 16
    2968:	30 e0       	ldi	r19, 0x00	; 0
    296a:	04 c0       	rjmp	.+8      	; 0x2974 <vfprintf+0x27a>
    296c:	14 fd       	sbrc	r17, 4
    296e:	16 60       	ori	r17, 0x06	; 6
    2970:	20 e1       	ldi	r18, 0x10	; 16
    2972:	32 e0       	ldi	r19, 0x02	; 2
    2974:	17 ff       	sbrs	r17, 7
    2976:	08 c0       	rjmp	.+16     	; 0x2988 <vfprintf+0x28e>
    2978:	f5 01       	movw	r30, r10
    297a:	60 81       	ld	r22, Z
    297c:	71 81       	ldd	r23, Z+1	; 0x01
    297e:	82 81       	ldd	r24, Z+2	; 0x02
    2980:	93 81       	ldd	r25, Z+3	; 0x03
    2982:	44 e0       	ldi	r20, 0x04	; 4
    2984:	50 e0       	ldi	r21, 0x00	; 0
    2986:	08 c0       	rjmp	.+16     	; 0x2998 <vfprintf+0x29e>
    2988:	f5 01       	movw	r30, r10
    298a:	80 81       	ld	r24, Z
    298c:	91 81       	ldd	r25, Z+1	; 0x01
    298e:	bc 01       	movw	r22, r24
    2990:	80 e0       	ldi	r24, 0x00	; 0
    2992:	90 e0       	ldi	r25, 0x00	; 0
    2994:	42 e0       	ldi	r20, 0x02	; 2
    2996:	50 e0       	ldi	r21, 0x00	; 0
    2998:	a4 0e       	add	r10, r20
    299a:	b5 1e       	adc	r11, r21
    299c:	a1 01       	movw	r20, r2
    299e:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <__ultoa_invert>
    29a2:	d8 2e       	mov	r13, r24
    29a4:	d2 18       	sub	r13, r2
    29a6:	8f e7       	ldi	r24, 0x7F	; 127
    29a8:	f8 2e       	mov	r15, r24
    29aa:	f1 22       	and	r15, r17
    29ac:	f6 fe       	sbrs	r15, 6
    29ae:	0b c0       	rjmp	.+22     	; 0x29c6 <vfprintf+0x2cc>
    29b0:	5e ef       	ldi	r21, 0xFE	; 254
    29b2:	f5 22       	and	r15, r21
    29b4:	d9 14       	cp	r13, r9
    29b6:	38 f4       	brcc	.+14     	; 0x29c6 <vfprintf+0x2cc>
    29b8:	f4 fe       	sbrs	r15, 4
    29ba:	07 c0       	rjmp	.+14     	; 0x29ca <vfprintf+0x2d0>
    29bc:	f2 fc       	sbrc	r15, 2
    29be:	05 c0       	rjmp	.+10     	; 0x29ca <vfprintf+0x2d0>
    29c0:	8f ee       	ldi	r24, 0xEF	; 239
    29c2:	f8 22       	and	r15, r24
    29c4:	02 c0       	rjmp	.+4      	; 0x29ca <vfprintf+0x2d0>
    29c6:	1d 2d       	mov	r17, r13
    29c8:	01 c0       	rjmp	.+2      	; 0x29cc <vfprintf+0x2d2>
    29ca:	19 2d       	mov	r17, r9
    29cc:	f4 fe       	sbrs	r15, 4
    29ce:	0d c0       	rjmp	.+26     	; 0x29ea <vfprintf+0x2f0>
    29d0:	fe 01       	movw	r30, r28
    29d2:	ed 0d       	add	r30, r13
    29d4:	f1 1d       	adc	r31, r1
    29d6:	80 81       	ld	r24, Z
    29d8:	80 33       	cpi	r24, 0x30	; 48
    29da:	19 f4       	brne	.+6      	; 0x29e2 <vfprintf+0x2e8>
    29dc:	99 ee       	ldi	r25, 0xE9	; 233
    29de:	f9 22       	and	r15, r25
    29e0:	08 c0       	rjmp	.+16     	; 0x29f2 <vfprintf+0x2f8>
    29e2:	1f 5f       	subi	r17, 0xFF	; 255
    29e4:	f2 fe       	sbrs	r15, 2
    29e6:	05 c0       	rjmp	.+10     	; 0x29f2 <vfprintf+0x2f8>
    29e8:	03 c0       	rjmp	.+6      	; 0x29f0 <vfprintf+0x2f6>
    29ea:	8f 2d       	mov	r24, r15
    29ec:	86 78       	andi	r24, 0x86	; 134
    29ee:	09 f0       	breq	.+2      	; 0x29f2 <vfprintf+0x2f8>
    29f0:	1f 5f       	subi	r17, 0xFF	; 255
    29f2:	0f 2d       	mov	r16, r15
    29f4:	f3 fc       	sbrc	r15, 3
    29f6:	14 c0       	rjmp	.+40     	; 0x2a20 <vfprintf+0x326>
    29f8:	f0 fe       	sbrs	r15, 0
    29fa:	0f c0       	rjmp	.+30     	; 0x2a1a <vfprintf+0x320>
    29fc:	1e 15       	cp	r17, r14
    29fe:	10 f0       	brcs	.+4      	; 0x2a04 <vfprintf+0x30a>
    2a00:	9d 2c       	mov	r9, r13
    2a02:	0b c0       	rjmp	.+22     	; 0x2a1a <vfprintf+0x320>
    2a04:	9d 2c       	mov	r9, r13
    2a06:	9e 0c       	add	r9, r14
    2a08:	91 1a       	sub	r9, r17
    2a0a:	1e 2d       	mov	r17, r14
    2a0c:	06 c0       	rjmp	.+12     	; 0x2a1a <vfprintf+0x320>
    2a0e:	80 e2       	ldi	r24, 0x20	; 32
    2a10:	90 e0       	ldi	r25, 0x00	; 0
    2a12:	b3 01       	movw	r22, r6
    2a14:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <fputc>
    2a18:	1f 5f       	subi	r17, 0xFF	; 255
    2a1a:	1e 15       	cp	r17, r14
    2a1c:	c0 f3       	brcs	.-16     	; 0x2a0e <vfprintf+0x314>
    2a1e:	04 c0       	rjmp	.+8      	; 0x2a28 <vfprintf+0x32e>
    2a20:	1e 15       	cp	r17, r14
    2a22:	10 f4       	brcc	.+4      	; 0x2a28 <vfprintf+0x32e>
    2a24:	e1 1a       	sub	r14, r17
    2a26:	01 c0       	rjmp	.+2      	; 0x2a2a <vfprintf+0x330>
    2a28:	ee 24       	eor	r14, r14
    2a2a:	04 ff       	sbrs	r16, 4
    2a2c:	0f c0       	rjmp	.+30     	; 0x2a4c <vfprintf+0x352>
    2a2e:	80 e3       	ldi	r24, 0x30	; 48
    2a30:	90 e0       	ldi	r25, 0x00	; 0
    2a32:	b3 01       	movw	r22, r6
    2a34:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <fputc>
    2a38:	02 ff       	sbrs	r16, 2
    2a3a:	1d c0       	rjmp	.+58     	; 0x2a76 <vfprintf+0x37c>
    2a3c:	01 fd       	sbrc	r16, 1
    2a3e:	03 c0       	rjmp	.+6      	; 0x2a46 <vfprintf+0x34c>
    2a40:	88 e7       	ldi	r24, 0x78	; 120
    2a42:	90 e0       	ldi	r25, 0x00	; 0
    2a44:	0e c0       	rjmp	.+28     	; 0x2a62 <vfprintf+0x368>
    2a46:	88 e5       	ldi	r24, 0x58	; 88
    2a48:	90 e0       	ldi	r25, 0x00	; 0
    2a4a:	0b c0       	rjmp	.+22     	; 0x2a62 <vfprintf+0x368>
    2a4c:	80 2f       	mov	r24, r16
    2a4e:	86 78       	andi	r24, 0x86	; 134
    2a50:	91 f0       	breq	.+36     	; 0x2a76 <vfprintf+0x37c>
    2a52:	01 ff       	sbrs	r16, 1
    2a54:	02 c0       	rjmp	.+4      	; 0x2a5a <vfprintf+0x360>
    2a56:	8b e2       	ldi	r24, 0x2B	; 43
    2a58:	01 c0       	rjmp	.+2      	; 0x2a5c <vfprintf+0x362>
    2a5a:	80 e2       	ldi	r24, 0x20	; 32
    2a5c:	f7 fc       	sbrc	r15, 7
    2a5e:	8d e2       	ldi	r24, 0x2D	; 45
    2a60:	90 e0       	ldi	r25, 0x00	; 0
    2a62:	b3 01       	movw	r22, r6
    2a64:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <fputc>
    2a68:	06 c0       	rjmp	.+12     	; 0x2a76 <vfprintf+0x37c>
    2a6a:	80 e3       	ldi	r24, 0x30	; 48
    2a6c:	90 e0       	ldi	r25, 0x00	; 0
    2a6e:	b3 01       	movw	r22, r6
    2a70:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <fputc>
    2a74:	9a 94       	dec	r9
    2a76:	d9 14       	cp	r13, r9
    2a78:	c0 f3       	brcs	.-16     	; 0x2a6a <vfprintf+0x370>
    2a7a:	da 94       	dec	r13
    2a7c:	f1 01       	movw	r30, r2
    2a7e:	ed 0d       	add	r30, r13
    2a80:	f1 1d       	adc	r31, r1
    2a82:	80 81       	ld	r24, Z
    2a84:	90 e0       	ldi	r25, 0x00	; 0
    2a86:	b3 01       	movw	r22, r6
    2a88:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <fputc>
    2a8c:	dd 20       	and	r13, r13
    2a8e:	a9 f7       	brne	.-22     	; 0x2a7a <vfprintf+0x380>
    2a90:	06 c0       	rjmp	.+12     	; 0x2a9e <vfprintf+0x3a4>
    2a92:	80 e2       	ldi	r24, 0x20	; 32
    2a94:	90 e0       	ldi	r25, 0x00	; 0
    2a96:	b3 01       	movw	r22, r6
    2a98:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <fputc>
    2a9c:	ea 94       	dec	r14
    2a9e:	ee 20       	and	r14, r14
    2aa0:	c1 f7       	brne	.-16     	; 0x2a92 <vfprintf+0x398>
    2aa2:	43 ce       	rjmp	.-890    	; 0x272a <vfprintf+0x30>
    2aa4:	f3 01       	movw	r30, r6
    2aa6:	66 81       	ldd	r22, Z+6	; 0x06
    2aa8:	77 81       	ldd	r23, Z+7	; 0x07
    2aaa:	cb 01       	movw	r24, r22
    2aac:	2b 96       	adiw	r28, 0x0b	; 11
    2aae:	e2 e1       	ldi	r30, 0x12	; 18
    2ab0:	0c 94 3e 13 	jmp	0x267c	; 0x267c <__epilogue_restores__>

00002ab4 <strnlen_P>:
    2ab4:	fc 01       	movw	r30, r24
    2ab6:	05 90       	lpm	r0, Z+
    2ab8:	61 50       	subi	r22, 0x01	; 1
    2aba:	70 40       	sbci	r23, 0x00	; 0
    2abc:	01 10       	cpse	r0, r1
    2abe:	d8 f7       	brcc	.-10     	; 0x2ab6 <strnlen_P+0x2>
    2ac0:	80 95       	com	r24
    2ac2:	90 95       	com	r25
    2ac4:	8e 0f       	add	r24, r30
    2ac6:	9f 1f       	adc	r25, r31
    2ac8:	08 95       	ret

00002aca <strnlen>:
    2aca:	fc 01       	movw	r30, r24
    2acc:	61 50       	subi	r22, 0x01	; 1
    2ace:	70 40       	sbci	r23, 0x00	; 0
    2ad0:	01 90       	ld	r0, Z+
    2ad2:	01 10       	cpse	r0, r1
    2ad4:	d8 f7       	brcc	.-10     	; 0x2acc <strnlen+0x2>
    2ad6:	80 95       	com	r24
    2ad8:	90 95       	com	r25
    2ada:	8e 0f       	add	r24, r30
    2adc:	9f 1f       	adc	r25, r31
    2ade:	08 95       	ret

00002ae0 <fputc>:
    2ae0:	0f 93       	push	r16
    2ae2:	1f 93       	push	r17
    2ae4:	cf 93       	push	r28
    2ae6:	df 93       	push	r29
    2ae8:	8c 01       	movw	r16, r24
    2aea:	eb 01       	movw	r28, r22
    2aec:	8b 81       	ldd	r24, Y+3	; 0x03
    2aee:	81 ff       	sbrs	r24, 1
    2af0:	1b c0       	rjmp	.+54     	; 0x2b28 <fputc+0x48>
    2af2:	82 ff       	sbrs	r24, 2
    2af4:	0d c0       	rjmp	.+26     	; 0x2b10 <fputc+0x30>
    2af6:	2e 81       	ldd	r18, Y+6	; 0x06
    2af8:	3f 81       	ldd	r19, Y+7	; 0x07
    2afa:	8c 81       	ldd	r24, Y+4	; 0x04
    2afc:	9d 81       	ldd	r25, Y+5	; 0x05
    2afe:	28 17       	cp	r18, r24
    2b00:	39 07       	cpc	r19, r25
    2b02:	64 f4       	brge	.+24     	; 0x2b1c <fputc+0x3c>
    2b04:	e8 81       	ld	r30, Y
    2b06:	f9 81       	ldd	r31, Y+1	; 0x01
    2b08:	01 93       	st	Z+, r16
    2b0a:	f9 83       	std	Y+1, r31	; 0x01
    2b0c:	e8 83       	st	Y, r30
    2b0e:	06 c0       	rjmp	.+12     	; 0x2b1c <fputc+0x3c>
    2b10:	e8 85       	ldd	r30, Y+8	; 0x08
    2b12:	f9 85       	ldd	r31, Y+9	; 0x09
    2b14:	80 2f       	mov	r24, r16
    2b16:	09 95       	icall
    2b18:	89 2b       	or	r24, r25
    2b1a:	31 f4       	brne	.+12     	; 0x2b28 <fputc+0x48>
    2b1c:	8e 81       	ldd	r24, Y+6	; 0x06
    2b1e:	9f 81       	ldd	r25, Y+7	; 0x07
    2b20:	01 96       	adiw	r24, 0x01	; 1
    2b22:	9f 83       	std	Y+7, r25	; 0x07
    2b24:	8e 83       	std	Y+6, r24	; 0x06
    2b26:	02 c0       	rjmp	.+4      	; 0x2b2c <fputc+0x4c>
    2b28:	0f ef       	ldi	r16, 0xFF	; 255
    2b2a:	1f ef       	ldi	r17, 0xFF	; 255
    2b2c:	c8 01       	movw	r24, r16
    2b2e:	df 91       	pop	r29
    2b30:	cf 91       	pop	r28
    2b32:	1f 91       	pop	r17
    2b34:	0f 91       	pop	r16
    2b36:	08 95       	ret

00002b38 <__ultoa_invert>:
    2b38:	fa 01       	movw	r30, r20
    2b3a:	aa 27       	eor	r26, r26
    2b3c:	28 30       	cpi	r18, 0x08	; 8
    2b3e:	51 f1       	breq	.+84     	; 0x2b94 <__ultoa_invert+0x5c>
    2b40:	20 31       	cpi	r18, 0x10	; 16
    2b42:	81 f1       	breq	.+96     	; 0x2ba4 <__ultoa_invert+0x6c>
    2b44:	e8 94       	clt
    2b46:	6f 93       	push	r22
    2b48:	6e 7f       	andi	r22, 0xFE	; 254
    2b4a:	6e 5f       	subi	r22, 0xFE	; 254
    2b4c:	7f 4f       	sbci	r23, 0xFF	; 255
    2b4e:	8f 4f       	sbci	r24, 0xFF	; 255
    2b50:	9f 4f       	sbci	r25, 0xFF	; 255
    2b52:	af 4f       	sbci	r26, 0xFF	; 255
    2b54:	b1 e0       	ldi	r27, 0x01	; 1
    2b56:	3e d0       	rcall	.+124    	; 0x2bd4 <__ultoa_invert+0x9c>
    2b58:	b4 e0       	ldi	r27, 0x04	; 4
    2b5a:	3c d0       	rcall	.+120    	; 0x2bd4 <__ultoa_invert+0x9c>
    2b5c:	67 0f       	add	r22, r23
    2b5e:	78 1f       	adc	r23, r24
    2b60:	89 1f       	adc	r24, r25
    2b62:	9a 1f       	adc	r25, r26
    2b64:	a1 1d       	adc	r26, r1
    2b66:	68 0f       	add	r22, r24
    2b68:	79 1f       	adc	r23, r25
    2b6a:	8a 1f       	adc	r24, r26
    2b6c:	91 1d       	adc	r25, r1
    2b6e:	a1 1d       	adc	r26, r1
    2b70:	6a 0f       	add	r22, r26
    2b72:	71 1d       	adc	r23, r1
    2b74:	81 1d       	adc	r24, r1
    2b76:	91 1d       	adc	r25, r1
    2b78:	a1 1d       	adc	r26, r1
    2b7a:	20 d0       	rcall	.+64     	; 0x2bbc <__ultoa_invert+0x84>
    2b7c:	09 f4       	brne	.+2      	; 0x2b80 <__ultoa_invert+0x48>
    2b7e:	68 94       	set
    2b80:	3f 91       	pop	r19
    2b82:	2a e0       	ldi	r18, 0x0A	; 10
    2b84:	26 9f       	mul	r18, r22
    2b86:	11 24       	eor	r1, r1
    2b88:	30 19       	sub	r19, r0
    2b8a:	30 5d       	subi	r19, 0xD0	; 208
    2b8c:	31 93       	st	Z+, r19
    2b8e:	de f6       	brtc	.-74     	; 0x2b46 <__ultoa_invert+0xe>
    2b90:	cf 01       	movw	r24, r30
    2b92:	08 95       	ret
    2b94:	46 2f       	mov	r20, r22
    2b96:	47 70       	andi	r20, 0x07	; 7
    2b98:	40 5d       	subi	r20, 0xD0	; 208
    2b9a:	41 93       	st	Z+, r20
    2b9c:	b3 e0       	ldi	r27, 0x03	; 3
    2b9e:	0f d0       	rcall	.+30     	; 0x2bbe <__ultoa_invert+0x86>
    2ba0:	c9 f7       	brne	.-14     	; 0x2b94 <__ultoa_invert+0x5c>
    2ba2:	f6 cf       	rjmp	.-20     	; 0x2b90 <__ultoa_invert+0x58>
    2ba4:	46 2f       	mov	r20, r22
    2ba6:	4f 70       	andi	r20, 0x0F	; 15
    2ba8:	40 5d       	subi	r20, 0xD0	; 208
    2baa:	4a 33       	cpi	r20, 0x3A	; 58
    2bac:	18 f0       	brcs	.+6      	; 0x2bb4 <__ultoa_invert+0x7c>
    2bae:	49 5d       	subi	r20, 0xD9	; 217
    2bb0:	31 fd       	sbrc	r19, 1
    2bb2:	40 52       	subi	r20, 0x20	; 32
    2bb4:	41 93       	st	Z+, r20
    2bb6:	02 d0       	rcall	.+4      	; 0x2bbc <__ultoa_invert+0x84>
    2bb8:	a9 f7       	brne	.-22     	; 0x2ba4 <__ultoa_invert+0x6c>
    2bba:	ea cf       	rjmp	.-44     	; 0x2b90 <__ultoa_invert+0x58>
    2bbc:	b4 e0       	ldi	r27, 0x04	; 4
    2bbe:	a6 95       	lsr	r26
    2bc0:	97 95       	ror	r25
    2bc2:	87 95       	ror	r24
    2bc4:	77 95       	ror	r23
    2bc6:	67 95       	ror	r22
    2bc8:	ba 95       	dec	r27
    2bca:	c9 f7       	brne	.-14     	; 0x2bbe <__ultoa_invert+0x86>
    2bcc:	00 97       	sbiw	r24, 0x00	; 0
    2bce:	61 05       	cpc	r22, r1
    2bd0:	71 05       	cpc	r23, r1
    2bd2:	08 95       	ret
    2bd4:	9b 01       	movw	r18, r22
    2bd6:	ac 01       	movw	r20, r24
    2bd8:	0a 2e       	mov	r0, r26
    2bda:	06 94       	lsr	r0
    2bdc:	57 95       	ror	r21
    2bde:	47 95       	ror	r20
    2be0:	37 95       	ror	r19
    2be2:	27 95       	ror	r18
    2be4:	ba 95       	dec	r27
    2be6:	c9 f7       	brne	.-14     	; 0x2bda <__ultoa_invert+0xa2>
    2be8:	62 0f       	add	r22, r18
    2bea:	73 1f       	adc	r23, r19
    2bec:	84 1f       	adc	r24, r20
    2bee:	95 1f       	adc	r25, r21
    2bf0:	a0 1d       	adc	r26, r0
    2bf2:	08 95       	ret

00002bf4 <_exit>:
    2bf4:	f8 94       	cli

00002bf6 <__stop_program>:
    2bf6:	ff cf       	rjmp	.-2      	; 0x2bf6 <__stop_program>
