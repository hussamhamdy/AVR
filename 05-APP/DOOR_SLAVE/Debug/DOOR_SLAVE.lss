
DOOR_SLAVE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002958  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00002958  000029ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800068  00800068  000029f4  2**0
                  ALLOC
  3 .stab         00001ed8  00000000  00000000  000029f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d1b  00000000  00000000  000048cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000055e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00005747  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  000058d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000791b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00008a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  000099a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  00009b20  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  00009de2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a670  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	ae 36       	cpi	r26, 0x6E	; 110
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e8 e5       	ldi	r30, 0x58	; 88
      78:	f9 e2       	ldi	r31, 0x29	; 41
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <main>
      8a:	0c 94 aa 14 	jmp	0x2954	; 0x2954 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 73 14 	jmp	0x28e6	; 0x28e6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 8f 14 	jmp	0x291e	; 0x291e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 7f 14 	jmp	0x28fe	; 0x28fe <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 9b 14 	jmp	0x2936	; 0x2936 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 7f 14 	jmp	0x28fe	; 0x28fe <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 9b 14 	jmp	0x2936	; 0x2936 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 73 14 	jmp	0x28e6	; 0x28e6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 8f 14 	jmp	0x291e	; 0x291e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 7b 14 	jmp	0x28f6	; 0x28f6 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 97 14 	jmp	0x292e	; 0x292e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 7f 14 	jmp	0x28fe	; 0x28fe <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 9b 14 	jmp	0x2936	; 0x2936 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 7f 14 	jmp	0x28fe	; 0x28fe <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 9b 14 	jmp	0x2936	; 0x2936 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 7f 14 	jmp	0x28fe	; 0x28fe <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 9b 14 	jmp	0x2936	; 0x2936 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 83 14 	jmp	0x2906	; 0x2906 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 9f 14 	jmp	0x293e	; 0x293e <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <GPIO_voidSetPinDDR>:




	void GPIO_voidSetPinDDR (u8  copy_u8Port ,u8 copy_u8Pin , u8 copy_u8Mode )
	{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <GPIO_voidSetPinDDR+0x6>
     ca4:	00 d0       	rcall	.+0      	; 0xca6 <GPIO_voidSetPinDDR+0x8>
     ca6:	0f 92       	push	r0
     ca8:	cd b7       	in	r28, 0x3d	; 61
     caa:	de b7       	in	r29, 0x3e	; 62
     cac:	89 83       	std	Y+1, r24	; 0x01
     cae:	6a 83       	std	Y+2, r22	; 0x02
     cb0:	4b 83       	std	Y+3, r20	; 0x03
		switch(copy_u8Port)
     cb2:	89 81       	ldd	r24, Y+1	; 0x01
     cb4:	28 2f       	mov	r18, r24
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	3d 83       	std	Y+5, r19	; 0x05
     cba:	2c 83       	std	Y+4, r18	; 0x04
     cbc:	8c 81       	ldd	r24, Y+4	; 0x04
     cbe:	9d 81       	ldd	r25, Y+5	; 0x05
     cc0:	81 30       	cpi	r24, 0x01	; 1
     cc2:	91 05       	cpc	r25, r1
     cc4:	09 f4       	brne	.+2      	; 0xcc8 <GPIO_voidSetPinDDR+0x2a>
     cc6:	43 c0       	rjmp	.+134    	; 0xd4e <GPIO_voidSetPinDDR+0xb0>
     cc8:	2c 81       	ldd	r18, Y+4	; 0x04
     cca:	3d 81       	ldd	r19, Y+5	; 0x05
     ccc:	22 30       	cpi	r18, 0x02	; 2
     cce:	31 05       	cpc	r19, r1
     cd0:	2c f4       	brge	.+10     	; 0xcdc <GPIO_voidSetPinDDR+0x3e>
     cd2:	8c 81       	ldd	r24, Y+4	; 0x04
     cd4:	9d 81       	ldd	r25, Y+5	; 0x05
     cd6:	00 97       	sbiw	r24, 0x00	; 0
     cd8:	71 f0       	breq	.+28     	; 0xcf6 <GPIO_voidSetPinDDR+0x58>
     cda:	bc c0       	rjmp	.+376    	; 0xe54 <GPIO_voidSetPinDDR+0x1b6>
     cdc:	2c 81       	ldd	r18, Y+4	; 0x04
     cde:	3d 81       	ldd	r19, Y+5	; 0x05
     ce0:	22 30       	cpi	r18, 0x02	; 2
     ce2:	31 05       	cpc	r19, r1
     ce4:	09 f4       	brne	.+2      	; 0xce8 <GPIO_voidSetPinDDR+0x4a>
     ce6:	5f c0       	rjmp	.+190    	; 0xda6 <GPIO_voidSetPinDDR+0x108>
     ce8:	8c 81       	ldd	r24, Y+4	; 0x04
     cea:	9d 81       	ldd	r25, Y+5	; 0x05
     cec:	83 30       	cpi	r24, 0x03	; 3
     cee:	91 05       	cpc	r25, r1
     cf0:	09 f4       	brne	.+2      	; 0xcf4 <GPIO_voidSetPinDDR+0x56>
     cf2:	85 c0       	rjmp	.+266    	; 0xdfe <GPIO_voidSetPinDDR+0x160>
     cf4:	af c0       	rjmp	.+350    	; 0xe54 <GPIO_voidSetPinDDR+0x1b6>
		{
			case GPIOA :
				if(copy_u8Mode ==OUTPUT )
     cf6:	8b 81       	ldd	r24, Y+3	; 0x03
     cf8:	81 30       	cpi	r24, 0x01	; 1
     cfa:	a1 f4       	brne	.+40     	; 0xd24 <GPIO_voidSetPinDDR+0x86>
				{
					SET_BIT(DDRA ,copy_u8Pin);
     cfc:	aa e3       	ldi	r26, 0x3A	; 58
     cfe:	b0 e0       	ldi	r27, 0x00	; 0
     d00:	ea e3       	ldi	r30, 0x3A	; 58
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	80 81       	ld	r24, Z
     d06:	48 2f       	mov	r20, r24
     d08:	8a 81       	ldd	r24, Y+2	; 0x02
     d0a:	28 2f       	mov	r18, r24
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	02 2e       	mov	r0, r18
     d14:	02 c0       	rjmp	.+4      	; 0xd1a <GPIO_voidSetPinDDR+0x7c>
     d16:	88 0f       	add	r24, r24
     d18:	99 1f       	adc	r25, r25
     d1a:	0a 94       	dec	r0
     d1c:	e2 f7       	brpl	.-8      	; 0xd16 <GPIO_voidSetPinDDR+0x78>
     d1e:	84 2b       	or	r24, r20
     d20:	8c 93       	st	X, r24
     d22:	98 c0       	rjmp	.+304    	; 0xe54 <GPIO_voidSetPinDDR+0x1b6>
				}
				else {
					CLEAR_BIT(DDRA,copy_u8Pin);
     d24:	aa e3       	ldi	r26, 0x3A	; 58
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	ea e3       	ldi	r30, 0x3A	; 58
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	80 81       	ld	r24, Z
     d2e:	48 2f       	mov	r20, r24
     d30:	8a 81       	ldd	r24, Y+2	; 0x02
     d32:	28 2f       	mov	r18, r24
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	02 2e       	mov	r0, r18
     d3c:	02 c0       	rjmp	.+4      	; 0xd42 <GPIO_voidSetPinDDR+0xa4>
     d3e:	88 0f       	add	r24, r24
     d40:	99 1f       	adc	r25, r25
     d42:	0a 94       	dec	r0
     d44:	e2 f7       	brpl	.-8      	; 0xd3e <GPIO_voidSetPinDDR+0xa0>
     d46:	80 95       	com	r24
     d48:	84 23       	and	r24, r20
     d4a:	8c 93       	st	X, r24
     d4c:	83 c0       	rjmp	.+262    	; 0xe54 <GPIO_voidSetPinDDR+0x1b6>
				}
				break;
			case GPIOB :
				if(copy_u8Mode ==OUTPUT )
     d4e:	8b 81       	ldd	r24, Y+3	; 0x03
     d50:	81 30       	cpi	r24, 0x01	; 1
     d52:	a1 f4       	brne	.+40     	; 0xd7c <GPIO_voidSetPinDDR+0xde>
				{
					SET_BIT(DDRB ,copy_u8Pin);
     d54:	a7 e3       	ldi	r26, 0x37	; 55
     d56:	b0 e0       	ldi	r27, 0x00	; 0
     d58:	e7 e3       	ldi	r30, 0x37	; 55
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	80 81       	ld	r24, Z
     d5e:	48 2f       	mov	r20, r24
     d60:	8a 81       	ldd	r24, Y+2	; 0x02
     d62:	28 2f       	mov	r18, r24
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	81 e0       	ldi	r24, 0x01	; 1
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	02 2e       	mov	r0, r18
     d6c:	02 c0       	rjmp	.+4      	; 0xd72 <GPIO_voidSetPinDDR+0xd4>
     d6e:	88 0f       	add	r24, r24
     d70:	99 1f       	adc	r25, r25
     d72:	0a 94       	dec	r0
     d74:	e2 f7       	brpl	.-8      	; 0xd6e <GPIO_voidSetPinDDR+0xd0>
     d76:	84 2b       	or	r24, r20
     d78:	8c 93       	st	X, r24
     d7a:	6c c0       	rjmp	.+216    	; 0xe54 <GPIO_voidSetPinDDR+0x1b6>
				}
				else {
					CLEAR_BIT(DDRB,copy_u8Pin);
     d7c:	a7 e3       	ldi	r26, 0x37	; 55
     d7e:	b0 e0       	ldi	r27, 0x00	; 0
     d80:	e7 e3       	ldi	r30, 0x37	; 55
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	80 81       	ld	r24, Z
     d86:	48 2f       	mov	r20, r24
     d88:	8a 81       	ldd	r24, Y+2	; 0x02
     d8a:	28 2f       	mov	r18, r24
     d8c:	30 e0       	ldi	r19, 0x00	; 0
     d8e:	81 e0       	ldi	r24, 0x01	; 1
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	02 2e       	mov	r0, r18
     d94:	02 c0       	rjmp	.+4      	; 0xd9a <GPIO_voidSetPinDDR+0xfc>
     d96:	88 0f       	add	r24, r24
     d98:	99 1f       	adc	r25, r25
     d9a:	0a 94       	dec	r0
     d9c:	e2 f7       	brpl	.-8      	; 0xd96 <GPIO_voidSetPinDDR+0xf8>
     d9e:	80 95       	com	r24
     da0:	84 23       	and	r24, r20
     da2:	8c 93       	st	X, r24
     da4:	57 c0       	rjmp	.+174    	; 0xe54 <GPIO_voidSetPinDDR+0x1b6>
				}
				break;
			case GPIOC :
				if(copy_u8Mode ==OUTPUT )
     da6:	8b 81       	ldd	r24, Y+3	; 0x03
     da8:	81 30       	cpi	r24, 0x01	; 1
     daa:	a1 f4       	brne	.+40     	; 0xdd4 <GPIO_voidSetPinDDR+0x136>
				{
					SET_BIT(DDRC ,copy_u8Pin);
     dac:	a4 e3       	ldi	r26, 0x34	; 52
     dae:	b0 e0       	ldi	r27, 0x00	; 0
     db0:	e4 e3       	ldi	r30, 0x34	; 52
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	80 81       	ld	r24, Z
     db6:	48 2f       	mov	r20, r24
     db8:	8a 81       	ldd	r24, Y+2	; 0x02
     dba:	28 2f       	mov	r18, r24
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	02 2e       	mov	r0, r18
     dc4:	02 c0       	rjmp	.+4      	; 0xdca <GPIO_voidSetPinDDR+0x12c>
     dc6:	88 0f       	add	r24, r24
     dc8:	99 1f       	adc	r25, r25
     dca:	0a 94       	dec	r0
     dcc:	e2 f7       	brpl	.-8      	; 0xdc6 <GPIO_voidSetPinDDR+0x128>
     dce:	84 2b       	or	r24, r20
     dd0:	8c 93       	st	X, r24
     dd2:	40 c0       	rjmp	.+128    	; 0xe54 <GPIO_voidSetPinDDR+0x1b6>
				}
				else {
					CLEAR_BIT(DDRC,copy_u8Pin);
     dd4:	a4 e3       	ldi	r26, 0x34	; 52
     dd6:	b0 e0       	ldi	r27, 0x00	; 0
     dd8:	e4 e3       	ldi	r30, 0x34	; 52
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	80 81       	ld	r24, Z
     dde:	48 2f       	mov	r20, r24
     de0:	8a 81       	ldd	r24, Y+2	; 0x02
     de2:	28 2f       	mov	r18, r24
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	81 e0       	ldi	r24, 0x01	; 1
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	02 2e       	mov	r0, r18
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <GPIO_voidSetPinDDR+0x154>
     dee:	88 0f       	add	r24, r24
     df0:	99 1f       	adc	r25, r25
     df2:	0a 94       	dec	r0
     df4:	e2 f7       	brpl	.-8      	; 0xdee <GPIO_voidSetPinDDR+0x150>
     df6:	80 95       	com	r24
     df8:	84 23       	and	r24, r20
     dfa:	8c 93       	st	X, r24
     dfc:	2b c0       	rjmp	.+86     	; 0xe54 <GPIO_voidSetPinDDR+0x1b6>
				}
				break;
			case GPIOD :
				if(copy_u8Mode ==OUTPUT )
     dfe:	8b 81       	ldd	r24, Y+3	; 0x03
     e00:	81 30       	cpi	r24, 0x01	; 1
     e02:	a1 f4       	brne	.+40     	; 0xe2c <GPIO_voidSetPinDDR+0x18e>
				{
					SET_BIT(DDRD ,copy_u8Pin);
     e04:	a1 e3       	ldi	r26, 0x31	; 49
     e06:	b0 e0       	ldi	r27, 0x00	; 0
     e08:	e1 e3       	ldi	r30, 0x31	; 49
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	80 81       	ld	r24, Z
     e0e:	48 2f       	mov	r20, r24
     e10:	8a 81       	ldd	r24, Y+2	; 0x02
     e12:	28 2f       	mov	r18, r24
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	81 e0       	ldi	r24, 0x01	; 1
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	02 2e       	mov	r0, r18
     e1c:	02 c0       	rjmp	.+4      	; 0xe22 <GPIO_voidSetPinDDR+0x184>
     e1e:	88 0f       	add	r24, r24
     e20:	99 1f       	adc	r25, r25
     e22:	0a 94       	dec	r0
     e24:	e2 f7       	brpl	.-8      	; 0xe1e <GPIO_voidSetPinDDR+0x180>
     e26:	84 2b       	or	r24, r20
     e28:	8c 93       	st	X, r24
     e2a:	14 c0       	rjmp	.+40     	; 0xe54 <GPIO_voidSetPinDDR+0x1b6>
				}
				else {
					CLEAR_BIT(DDRD,copy_u8Pin);
     e2c:	a1 e3       	ldi	r26, 0x31	; 49
     e2e:	b0 e0       	ldi	r27, 0x00	; 0
     e30:	e1 e3       	ldi	r30, 0x31	; 49
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	80 81       	ld	r24, Z
     e36:	48 2f       	mov	r20, r24
     e38:	8a 81       	ldd	r24, Y+2	; 0x02
     e3a:	28 2f       	mov	r18, r24
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	02 2e       	mov	r0, r18
     e44:	02 c0       	rjmp	.+4      	; 0xe4a <GPIO_voidSetPinDDR+0x1ac>
     e46:	88 0f       	add	r24, r24
     e48:	99 1f       	adc	r25, r25
     e4a:	0a 94       	dec	r0
     e4c:	e2 f7       	brpl	.-8      	; 0xe46 <GPIO_voidSetPinDDR+0x1a8>
     e4e:	80 95       	com	r24
     e50:	84 23       	and	r24, r20
     e52:	8c 93       	st	X, r24
				}
				break;	
			default:
				break;
		}
	}
     e54:	0f 90       	pop	r0
     e56:	0f 90       	pop	r0
     e58:	0f 90       	pop	r0
     e5a:	0f 90       	pop	r0
     e5c:	0f 90       	pop	r0
     e5e:	cf 91       	pop	r28
     e60:	df 91       	pop	r29
     e62:	08 95       	ret

00000e64 <GPIO_voidWritePin>:
	
	void GPIO_voidWritePin (u8  copy_u8Port ,u8 copy_u8Pin , u8 copy_u8Value )
	{
     e64:	df 93       	push	r29
     e66:	cf 93       	push	r28
     e68:	00 d0       	rcall	.+0      	; 0xe6a <GPIO_voidWritePin+0x6>
     e6a:	00 d0       	rcall	.+0      	; 0xe6c <GPIO_voidWritePin+0x8>
     e6c:	0f 92       	push	r0
     e6e:	cd b7       	in	r28, 0x3d	; 61
     e70:	de b7       	in	r29, 0x3e	; 62
     e72:	89 83       	std	Y+1, r24	; 0x01
     e74:	6a 83       	std	Y+2, r22	; 0x02
     e76:	4b 83       	std	Y+3, r20	; 0x03
		switch(copy_u8Port)
     e78:	89 81       	ldd	r24, Y+1	; 0x01
     e7a:	28 2f       	mov	r18, r24
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	3d 83       	std	Y+5, r19	; 0x05
     e80:	2c 83       	std	Y+4, r18	; 0x04
     e82:	8c 81       	ldd	r24, Y+4	; 0x04
     e84:	9d 81       	ldd	r25, Y+5	; 0x05
     e86:	81 30       	cpi	r24, 0x01	; 1
     e88:	91 05       	cpc	r25, r1
     e8a:	09 f4       	brne	.+2      	; 0xe8e <GPIO_voidWritePin+0x2a>
     e8c:	43 c0       	rjmp	.+134    	; 0xf14 <GPIO_voidWritePin+0xb0>
     e8e:	2c 81       	ldd	r18, Y+4	; 0x04
     e90:	3d 81       	ldd	r19, Y+5	; 0x05
     e92:	22 30       	cpi	r18, 0x02	; 2
     e94:	31 05       	cpc	r19, r1
     e96:	2c f4       	brge	.+10     	; 0xea2 <GPIO_voidWritePin+0x3e>
     e98:	8c 81       	ldd	r24, Y+4	; 0x04
     e9a:	9d 81       	ldd	r25, Y+5	; 0x05
     e9c:	00 97       	sbiw	r24, 0x00	; 0
     e9e:	71 f0       	breq	.+28     	; 0xebc <GPIO_voidWritePin+0x58>
     ea0:	bc c0       	rjmp	.+376    	; 0x101a <GPIO_voidWritePin+0x1b6>
     ea2:	2c 81       	ldd	r18, Y+4	; 0x04
     ea4:	3d 81       	ldd	r19, Y+5	; 0x05
     ea6:	22 30       	cpi	r18, 0x02	; 2
     ea8:	31 05       	cpc	r19, r1
     eaa:	09 f4       	brne	.+2      	; 0xeae <GPIO_voidWritePin+0x4a>
     eac:	5f c0       	rjmp	.+190    	; 0xf6c <GPIO_voidWritePin+0x108>
     eae:	8c 81       	ldd	r24, Y+4	; 0x04
     eb0:	9d 81       	ldd	r25, Y+5	; 0x05
     eb2:	83 30       	cpi	r24, 0x03	; 3
     eb4:	91 05       	cpc	r25, r1
     eb6:	09 f4       	brne	.+2      	; 0xeba <GPIO_voidWritePin+0x56>
     eb8:	85 c0       	rjmp	.+266    	; 0xfc4 <GPIO_voidWritePin+0x160>
     eba:	af c0       	rjmp	.+350    	; 0x101a <GPIO_voidWritePin+0x1b6>
		{
			case GPIOA :
				if(copy_u8Value ==HIGH )
     ebc:	8b 81       	ldd	r24, Y+3	; 0x03
     ebe:	81 30       	cpi	r24, 0x01	; 1
     ec0:	a1 f4       	brne	.+40     	; 0xeea <GPIO_voidWritePin+0x86>
				{
					SET_BIT(PORTA ,copy_u8Pin);
     ec2:	ab e3       	ldi	r26, 0x3B	; 59
     ec4:	b0 e0       	ldi	r27, 0x00	; 0
     ec6:	eb e3       	ldi	r30, 0x3B	; 59
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 81       	ld	r24, Z
     ecc:	48 2f       	mov	r20, r24
     ece:	8a 81       	ldd	r24, Y+2	; 0x02
     ed0:	28 2f       	mov	r18, r24
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	02 2e       	mov	r0, r18
     eda:	02 c0       	rjmp	.+4      	; 0xee0 <GPIO_voidWritePin+0x7c>
     edc:	88 0f       	add	r24, r24
     ede:	99 1f       	adc	r25, r25
     ee0:	0a 94       	dec	r0
     ee2:	e2 f7       	brpl	.-8      	; 0xedc <GPIO_voidWritePin+0x78>
     ee4:	84 2b       	or	r24, r20
     ee6:	8c 93       	st	X, r24
     ee8:	98 c0       	rjmp	.+304    	; 0x101a <GPIO_voidWritePin+0x1b6>
				}
				else {
					CLEAR_BIT(PORTA,copy_u8Pin);
     eea:	ab e3       	ldi	r26, 0x3B	; 59
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	eb e3       	ldi	r30, 0x3B	; 59
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	48 2f       	mov	r20, r24
     ef6:	8a 81       	ldd	r24, Y+2	; 0x02
     ef8:	28 2f       	mov	r18, r24
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	02 2e       	mov	r0, r18
     f02:	02 c0       	rjmp	.+4      	; 0xf08 <GPIO_voidWritePin+0xa4>
     f04:	88 0f       	add	r24, r24
     f06:	99 1f       	adc	r25, r25
     f08:	0a 94       	dec	r0
     f0a:	e2 f7       	brpl	.-8      	; 0xf04 <GPIO_voidWritePin+0xa0>
     f0c:	80 95       	com	r24
     f0e:	84 23       	and	r24, r20
     f10:	8c 93       	st	X, r24
     f12:	83 c0       	rjmp	.+262    	; 0x101a <GPIO_voidWritePin+0x1b6>
				}
				break;
			case GPIOB :
				if(copy_u8Value ==HIGH )
     f14:	8b 81       	ldd	r24, Y+3	; 0x03
     f16:	81 30       	cpi	r24, 0x01	; 1
     f18:	a1 f4       	brne	.+40     	; 0xf42 <GPIO_voidWritePin+0xde>
				{
					SET_BIT(PORTB ,copy_u8Pin);
     f1a:	a8 e3       	ldi	r26, 0x38	; 56
     f1c:	b0 e0       	ldi	r27, 0x00	; 0
     f1e:	e8 e3       	ldi	r30, 0x38	; 56
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	80 81       	ld	r24, Z
     f24:	48 2f       	mov	r20, r24
     f26:	8a 81       	ldd	r24, Y+2	; 0x02
     f28:	28 2f       	mov	r18, r24
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	02 2e       	mov	r0, r18
     f32:	02 c0       	rjmp	.+4      	; 0xf38 <GPIO_voidWritePin+0xd4>
     f34:	88 0f       	add	r24, r24
     f36:	99 1f       	adc	r25, r25
     f38:	0a 94       	dec	r0
     f3a:	e2 f7       	brpl	.-8      	; 0xf34 <GPIO_voidWritePin+0xd0>
     f3c:	84 2b       	or	r24, r20
     f3e:	8c 93       	st	X, r24
     f40:	6c c0       	rjmp	.+216    	; 0x101a <GPIO_voidWritePin+0x1b6>
				}
				else {
					CLEAR_BIT(PORTB,copy_u8Pin);
     f42:	a8 e3       	ldi	r26, 0x38	; 56
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	e8 e3       	ldi	r30, 0x38	; 56
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	48 2f       	mov	r20, r24
     f4e:	8a 81       	ldd	r24, Y+2	; 0x02
     f50:	28 2f       	mov	r18, r24
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	02 2e       	mov	r0, r18
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <GPIO_voidWritePin+0xfc>
     f5c:	88 0f       	add	r24, r24
     f5e:	99 1f       	adc	r25, r25
     f60:	0a 94       	dec	r0
     f62:	e2 f7       	brpl	.-8      	; 0xf5c <GPIO_voidWritePin+0xf8>
     f64:	80 95       	com	r24
     f66:	84 23       	and	r24, r20
     f68:	8c 93       	st	X, r24
     f6a:	57 c0       	rjmp	.+174    	; 0x101a <GPIO_voidWritePin+0x1b6>
				}
				break;
			case GPIOC :
				if(copy_u8Value ==HIGH )
     f6c:	8b 81       	ldd	r24, Y+3	; 0x03
     f6e:	81 30       	cpi	r24, 0x01	; 1
     f70:	a1 f4       	brne	.+40     	; 0xf9a <GPIO_voidWritePin+0x136>
				{
					SET_BIT(PORTC ,copy_u8Pin);
     f72:	a5 e3       	ldi	r26, 0x35	; 53
     f74:	b0 e0       	ldi	r27, 0x00	; 0
     f76:	e5 e3       	ldi	r30, 0x35	; 53
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	48 2f       	mov	r20, r24
     f7e:	8a 81       	ldd	r24, Y+2	; 0x02
     f80:	28 2f       	mov	r18, r24
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	02 2e       	mov	r0, r18
     f8a:	02 c0       	rjmp	.+4      	; 0xf90 <GPIO_voidWritePin+0x12c>
     f8c:	88 0f       	add	r24, r24
     f8e:	99 1f       	adc	r25, r25
     f90:	0a 94       	dec	r0
     f92:	e2 f7       	brpl	.-8      	; 0xf8c <GPIO_voidWritePin+0x128>
     f94:	84 2b       	or	r24, r20
     f96:	8c 93       	st	X, r24
     f98:	40 c0       	rjmp	.+128    	; 0x101a <GPIO_voidWritePin+0x1b6>
				}
				else {
					CLEAR_BIT(PORTC,copy_u8Pin);
     f9a:	a5 e3       	ldi	r26, 0x35	; 53
     f9c:	b0 e0       	ldi	r27, 0x00	; 0
     f9e:	e5 e3       	ldi	r30, 0x35	; 53
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	80 81       	ld	r24, Z
     fa4:	48 2f       	mov	r20, r24
     fa6:	8a 81       	ldd	r24, Y+2	; 0x02
     fa8:	28 2f       	mov	r18, r24
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	02 2e       	mov	r0, r18
     fb2:	02 c0       	rjmp	.+4      	; 0xfb8 <GPIO_voidWritePin+0x154>
     fb4:	88 0f       	add	r24, r24
     fb6:	99 1f       	adc	r25, r25
     fb8:	0a 94       	dec	r0
     fba:	e2 f7       	brpl	.-8      	; 0xfb4 <GPIO_voidWritePin+0x150>
     fbc:	80 95       	com	r24
     fbe:	84 23       	and	r24, r20
     fc0:	8c 93       	st	X, r24
     fc2:	2b c0       	rjmp	.+86     	; 0x101a <GPIO_voidWritePin+0x1b6>
				}
				break;
			case GPIOD :
				if(copy_u8Value == HIGH )
     fc4:	8b 81       	ldd	r24, Y+3	; 0x03
     fc6:	81 30       	cpi	r24, 0x01	; 1
     fc8:	a1 f4       	brne	.+40     	; 0xff2 <GPIO_voidWritePin+0x18e>
				{
					SET_BIT(PORTD ,copy_u8Pin);
     fca:	a2 e3       	ldi	r26, 0x32	; 50
     fcc:	b0 e0       	ldi	r27, 0x00	; 0
     fce:	e2 e3       	ldi	r30, 0x32	; 50
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	80 81       	ld	r24, Z
     fd4:	48 2f       	mov	r20, r24
     fd6:	8a 81       	ldd	r24, Y+2	; 0x02
     fd8:	28 2f       	mov	r18, r24
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	02 2e       	mov	r0, r18
     fe2:	02 c0       	rjmp	.+4      	; 0xfe8 <GPIO_voidWritePin+0x184>
     fe4:	88 0f       	add	r24, r24
     fe6:	99 1f       	adc	r25, r25
     fe8:	0a 94       	dec	r0
     fea:	e2 f7       	brpl	.-8      	; 0xfe4 <GPIO_voidWritePin+0x180>
     fec:	84 2b       	or	r24, r20
     fee:	8c 93       	st	X, r24
     ff0:	14 c0       	rjmp	.+40     	; 0x101a <GPIO_voidWritePin+0x1b6>
				}
				else {
					CLEAR_BIT(PORTD,copy_u8Pin);
     ff2:	a2 e3       	ldi	r26, 0x32	; 50
     ff4:	b0 e0       	ldi	r27, 0x00	; 0
     ff6:	e2 e3       	ldi	r30, 0x32	; 50
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	48 2f       	mov	r20, r24
     ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    1000:	28 2f       	mov	r18, r24
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	81 e0       	ldi	r24, 0x01	; 1
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	02 2e       	mov	r0, r18
    100a:	02 c0       	rjmp	.+4      	; 0x1010 <GPIO_voidWritePin+0x1ac>
    100c:	88 0f       	add	r24, r24
    100e:	99 1f       	adc	r25, r25
    1010:	0a 94       	dec	r0
    1012:	e2 f7       	brpl	.-8      	; 0x100c <GPIO_voidWritePin+0x1a8>
    1014:	80 95       	com	r24
    1016:	84 23       	and	r24, r20
    1018:	8c 93       	st	X, r24
				break;	
			default:
				break;
		}
		
	}
    101a:	0f 90       	pop	r0
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	0f 90       	pop	r0
    1024:	cf 91       	pop	r28
    1026:	df 91       	pop	r29
    1028:	08 95       	ret

0000102a <GPIO_u8ReadPin>:
	
	u8	GPIO_u8ReadPin(	u8  copy_u8Port ,u8 copy_u8Pin )
	{
    102a:	df 93       	push	r29
    102c:	cf 93       	push	r28
    102e:	00 d0       	rcall	.+0      	; 0x1030 <GPIO_u8ReadPin+0x6>
    1030:	00 d0       	rcall	.+0      	; 0x1032 <GPIO_u8ReadPin+0x8>
    1032:	0f 92       	push	r0
    1034:	cd b7       	in	r28, 0x3d	; 61
    1036:	de b7       	in	r29, 0x3e	; 62
    1038:	8a 83       	std	Y+2, r24	; 0x02
    103a:	6b 83       	std	Y+3, r22	; 0x03
		u8 Local_u8ReturnValue ;
		switch(copy_u8Port){
    103c:	8a 81       	ldd	r24, Y+2	; 0x02
    103e:	28 2f       	mov	r18, r24
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	3d 83       	std	Y+5, r19	; 0x05
    1044:	2c 83       	std	Y+4, r18	; 0x04
    1046:	4c 81       	ldd	r20, Y+4	; 0x04
    1048:	5d 81       	ldd	r21, Y+5	; 0x05
    104a:	41 30       	cpi	r20, 0x01	; 1
    104c:	51 05       	cpc	r21, r1
    104e:	b1 f1       	breq	.+108    	; 0x10bc <GPIO_u8ReadPin+0x92>
    1050:	8c 81       	ldd	r24, Y+4	; 0x04
    1052:	9d 81       	ldd	r25, Y+5	; 0x05
    1054:	82 30       	cpi	r24, 0x02	; 2
    1056:	91 05       	cpc	r25, r1
    1058:	34 f4       	brge	.+12     	; 0x1066 <GPIO_u8ReadPin+0x3c>
    105a:	2c 81       	ldd	r18, Y+4	; 0x04
    105c:	3d 81       	ldd	r19, Y+5	; 0x05
    105e:	21 15       	cp	r18, r1
    1060:	31 05       	cpc	r19, r1
    1062:	71 f0       	breq	.+28     	; 0x1080 <GPIO_u8ReadPin+0x56>
    1064:	84 c0       	rjmp	.+264    	; 0x116e <GPIO_u8ReadPin+0x144>
    1066:	4c 81       	ldd	r20, Y+4	; 0x04
    1068:	5d 81       	ldd	r21, Y+5	; 0x05
    106a:	42 30       	cpi	r20, 0x02	; 2
    106c:	51 05       	cpc	r21, r1
    106e:	09 f4       	brne	.+2      	; 0x1072 <GPIO_u8ReadPin+0x48>
    1070:	43 c0       	rjmp	.+134    	; 0x10f8 <GPIO_u8ReadPin+0xce>
    1072:	8c 81       	ldd	r24, Y+4	; 0x04
    1074:	9d 81       	ldd	r25, Y+5	; 0x05
    1076:	83 30       	cpi	r24, 0x03	; 3
    1078:	91 05       	cpc	r25, r1
    107a:	09 f4       	brne	.+2      	; 0x107e <GPIO_u8ReadPin+0x54>
    107c:	5b c0       	rjmp	.+182    	; 0x1134 <GPIO_u8ReadPin+0x10a>
    107e:	77 c0       	rjmp	.+238    	; 0x116e <GPIO_u8ReadPin+0x144>
			case GPIOA :
				Local_u8ReturnValue = GET_BIT(PINA,copy_u8Pin);
    1080:	e9 e3       	ldi	r30, 0x39	; 57
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	48 2f       	mov	r20, r24
    1088:	50 e0       	ldi	r21, 0x00	; 0
    108a:	8b 81       	ldd	r24, Y+3	; 0x03
    108c:	28 2f       	mov	r18, r24
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	81 e0       	ldi	r24, 0x01	; 1
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	02 c0       	rjmp	.+4      	; 0x109a <GPIO_u8ReadPin+0x70>
    1096:	88 0f       	add	r24, r24
    1098:	99 1f       	adc	r25, r25
    109a:	2a 95       	dec	r18
    109c:	e2 f7       	brpl	.-8      	; 0x1096 <GPIO_u8ReadPin+0x6c>
    109e:	9a 01       	movw	r18, r20
    10a0:	28 23       	and	r18, r24
    10a2:	39 23       	and	r19, r25
    10a4:	8b 81       	ldd	r24, Y+3	; 0x03
    10a6:	88 2f       	mov	r24, r24
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	a9 01       	movw	r20, r18
    10ac:	02 c0       	rjmp	.+4      	; 0x10b2 <GPIO_u8ReadPin+0x88>
    10ae:	55 95       	asr	r21
    10b0:	47 95       	ror	r20
    10b2:	8a 95       	dec	r24
    10b4:	e2 f7       	brpl	.-8      	; 0x10ae <GPIO_u8ReadPin+0x84>
    10b6:	ca 01       	movw	r24, r20
    10b8:	89 83       	std	Y+1, r24	; 0x01
    10ba:	59 c0       	rjmp	.+178    	; 0x116e <GPIO_u8ReadPin+0x144>
				break ;
			case GPIOB :
				Local_u8ReturnValue = GET_BIT(PINB,copy_u8Pin);
    10bc:	e6 e3       	ldi	r30, 0x36	; 54
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	80 81       	ld	r24, Z
    10c2:	48 2f       	mov	r20, r24
    10c4:	50 e0       	ldi	r21, 0x00	; 0
    10c6:	8b 81       	ldd	r24, Y+3	; 0x03
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	02 c0       	rjmp	.+4      	; 0x10d6 <GPIO_u8ReadPin+0xac>
    10d2:	88 0f       	add	r24, r24
    10d4:	99 1f       	adc	r25, r25
    10d6:	2a 95       	dec	r18
    10d8:	e2 f7       	brpl	.-8      	; 0x10d2 <GPIO_u8ReadPin+0xa8>
    10da:	9a 01       	movw	r18, r20
    10dc:	28 23       	and	r18, r24
    10de:	39 23       	and	r19, r25
    10e0:	8b 81       	ldd	r24, Y+3	; 0x03
    10e2:	88 2f       	mov	r24, r24
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	a9 01       	movw	r20, r18
    10e8:	02 c0       	rjmp	.+4      	; 0x10ee <GPIO_u8ReadPin+0xc4>
    10ea:	55 95       	asr	r21
    10ec:	47 95       	ror	r20
    10ee:	8a 95       	dec	r24
    10f0:	e2 f7       	brpl	.-8      	; 0x10ea <GPIO_u8ReadPin+0xc0>
    10f2:	ca 01       	movw	r24, r20
    10f4:	89 83       	std	Y+1, r24	; 0x01
    10f6:	3b c0       	rjmp	.+118    	; 0x116e <GPIO_u8ReadPin+0x144>
				break ;
			case GPIOC :
				Local_u8ReturnValue = GET_BIT(PINC,copy_u8Pin);
    10f8:	e3 e3       	ldi	r30, 0x33	; 51
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	80 81       	ld	r24, Z
    10fe:	48 2f       	mov	r20, r24
    1100:	50 e0       	ldi	r21, 0x00	; 0
    1102:	8b 81       	ldd	r24, Y+3	; 0x03
    1104:	28 2f       	mov	r18, r24
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	02 c0       	rjmp	.+4      	; 0x1112 <GPIO_u8ReadPin+0xe8>
    110e:	88 0f       	add	r24, r24
    1110:	99 1f       	adc	r25, r25
    1112:	2a 95       	dec	r18
    1114:	e2 f7       	brpl	.-8      	; 0x110e <GPIO_u8ReadPin+0xe4>
    1116:	9a 01       	movw	r18, r20
    1118:	28 23       	and	r18, r24
    111a:	39 23       	and	r19, r25
    111c:	8b 81       	ldd	r24, Y+3	; 0x03
    111e:	88 2f       	mov	r24, r24
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	a9 01       	movw	r20, r18
    1124:	02 c0       	rjmp	.+4      	; 0x112a <GPIO_u8ReadPin+0x100>
    1126:	55 95       	asr	r21
    1128:	47 95       	ror	r20
    112a:	8a 95       	dec	r24
    112c:	e2 f7       	brpl	.-8      	; 0x1126 <GPIO_u8ReadPin+0xfc>
    112e:	ca 01       	movw	r24, r20
    1130:	89 83       	std	Y+1, r24	; 0x01
    1132:	1d c0       	rjmp	.+58     	; 0x116e <GPIO_u8ReadPin+0x144>
				break ;
			case GPIOD :
				Local_u8ReturnValue = GET_BIT(PIND,copy_u8Pin);
    1134:	e0 e3       	ldi	r30, 0x30	; 48
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	48 2f       	mov	r20, r24
    113c:	50 e0       	ldi	r21, 0x00	; 0
    113e:	8b 81       	ldd	r24, Y+3	; 0x03
    1140:	28 2f       	mov	r18, r24
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	02 c0       	rjmp	.+4      	; 0x114e <GPIO_u8ReadPin+0x124>
    114a:	88 0f       	add	r24, r24
    114c:	99 1f       	adc	r25, r25
    114e:	2a 95       	dec	r18
    1150:	e2 f7       	brpl	.-8      	; 0x114a <GPIO_u8ReadPin+0x120>
    1152:	9a 01       	movw	r18, r20
    1154:	28 23       	and	r18, r24
    1156:	39 23       	and	r19, r25
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	88 2f       	mov	r24, r24
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	a9 01       	movw	r20, r18
    1160:	02 c0       	rjmp	.+4      	; 0x1166 <GPIO_u8ReadPin+0x13c>
    1162:	55 95       	asr	r21
    1164:	47 95       	ror	r20
    1166:	8a 95       	dec	r24
    1168:	e2 f7       	brpl	.-8      	; 0x1162 <GPIO_u8ReadPin+0x138>
    116a:	ca 01       	movw	r24, r20
    116c:	89 83       	std	Y+1, r24	; 0x01
				break ;
			default:
			break;
		}
		return Local_u8ReturnValue ;
    116e:	89 81       	ldd	r24, Y+1	; 0x01
		
	}
    1170:	0f 90       	pop	r0
    1172:	0f 90       	pop	r0
    1174:	0f 90       	pop	r0
    1176:	0f 90       	pop	r0
    1178:	0f 90       	pop	r0
    117a:	cf 91       	pop	r28
    117c:	df 91       	pop	r29
    117e:	08 95       	ret

00001180 <GPIO_voidTogPin>:
	
	void GPIO_voidTogPin 	( u8 copy_u8Port , u8 copy_u8Pin )
	{
    1180:	df 93       	push	r29
    1182:	cf 93       	push	r28
    1184:	00 d0       	rcall	.+0      	; 0x1186 <GPIO_voidTogPin+0x6>
    1186:	00 d0       	rcall	.+0      	; 0x1188 <GPIO_voidTogPin+0x8>
    1188:	cd b7       	in	r28, 0x3d	; 61
    118a:	de b7       	in	r29, 0x3e	; 62
    118c:	89 83       	std	Y+1, r24	; 0x01
    118e:	6a 83       	std	Y+2, r22	; 0x02
		switch(copy_u8Port){
    1190:	89 81       	ldd	r24, Y+1	; 0x01
    1192:	28 2f       	mov	r18, r24
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	3c 83       	std	Y+4, r19	; 0x04
    1198:	2b 83       	std	Y+3, r18	; 0x03
    119a:	8b 81       	ldd	r24, Y+3	; 0x03
    119c:	9c 81       	ldd	r25, Y+4	; 0x04
    119e:	81 30       	cpi	r24, 0x01	; 1
    11a0:	91 05       	cpc	r25, r1
    11a2:	49 f1       	breq	.+82     	; 0x11f6 <GPIO_voidTogPin+0x76>
    11a4:	2b 81       	ldd	r18, Y+3	; 0x03
    11a6:	3c 81       	ldd	r19, Y+4	; 0x04
    11a8:	22 30       	cpi	r18, 0x02	; 2
    11aa:	31 05       	cpc	r19, r1
    11ac:	2c f4       	brge	.+10     	; 0x11b8 <GPIO_voidTogPin+0x38>
    11ae:	8b 81       	ldd	r24, Y+3	; 0x03
    11b0:	9c 81       	ldd	r25, Y+4	; 0x04
    11b2:	00 97       	sbiw	r24, 0x00	; 0
    11b4:	61 f0       	breq	.+24     	; 0x11ce <GPIO_voidTogPin+0x4e>
    11b6:	5a c0       	rjmp	.+180    	; 0x126c <GPIO_voidTogPin+0xec>
    11b8:	2b 81       	ldd	r18, Y+3	; 0x03
    11ba:	3c 81       	ldd	r19, Y+4	; 0x04
    11bc:	22 30       	cpi	r18, 0x02	; 2
    11be:	31 05       	cpc	r19, r1
    11c0:	71 f1       	breq	.+92     	; 0x121e <GPIO_voidTogPin+0x9e>
    11c2:	8b 81       	ldd	r24, Y+3	; 0x03
    11c4:	9c 81       	ldd	r25, Y+4	; 0x04
    11c6:	83 30       	cpi	r24, 0x03	; 3
    11c8:	91 05       	cpc	r25, r1
    11ca:	e9 f1       	breq	.+122    	; 0x1246 <GPIO_voidTogPin+0xc6>
    11cc:	4f c0       	rjmp	.+158    	; 0x126c <GPIO_voidTogPin+0xec>
			case GPIOA :
				TOG_BIT(PORTA,copy_u8Pin);
    11ce:	ab e3       	ldi	r26, 0x3B	; 59
    11d0:	b0 e0       	ldi	r27, 0x00	; 0
    11d2:	eb e3       	ldi	r30, 0x3B	; 59
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	80 81       	ld	r24, Z
    11d8:	48 2f       	mov	r20, r24
    11da:	8a 81       	ldd	r24, Y+2	; 0x02
    11dc:	28 2f       	mov	r18, r24
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	02 2e       	mov	r0, r18
    11e6:	02 c0       	rjmp	.+4      	; 0x11ec <GPIO_voidTogPin+0x6c>
    11e8:	88 0f       	add	r24, r24
    11ea:	99 1f       	adc	r25, r25
    11ec:	0a 94       	dec	r0
    11ee:	e2 f7       	brpl	.-8      	; 0x11e8 <GPIO_voidTogPin+0x68>
    11f0:	84 27       	eor	r24, r20
    11f2:	8c 93       	st	X, r24
    11f4:	3b c0       	rjmp	.+118    	; 0x126c <GPIO_voidTogPin+0xec>
				break ;             
			case GPIOB :            
				TOG_BIT(PORTB,copy_u8Pin);
    11f6:	a8 e3       	ldi	r26, 0x38	; 56
    11f8:	b0 e0       	ldi	r27, 0x00	; 0
    11fa:	e8 e3       	ldi	r30, 0x38	; 56
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	80 81       	ld	r24, Z
    1200:	48 2f       	mov	r20, r24
    1202:	8a 81       	ldd	r24, Y+2	; 0x02
    1204:	28 2f       	mov	r18, r24
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	81 e0       	ldi	r24, 0x01	; 1
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	02 2e       	mov	r0, r18
    120e:	02 c0       	rjmp	.+4      	; 0x1214 <GPIO_voidTogPin+0x94>
    1210:	88 0f       	add	r24, r24
    1212:	99 1f       	adc	r25, r25
    1214:	0a 94       	dec	r0
    1216:	e2 f7       	brpl	.-8      	; 0x1210 <GPIO_voidTogPin+0x90>
    1218:	84 27       	eor	r24, r20
    121a:	8c 93       	st	X, r24
    121c:	27 c0       	rjmp	.+78     	; 0x126c <GPIO_voidTogPin+0xec>
				break ;             
			case GPIOC :            
				TOG_BIT(PORTC,copy_u8Pin);
    121e:	a5 e3       	ldi	r26, 0x35	; 53
    1220:	b0 e0       	ldi	r27, 0x00	; 0
    1222:	e5 e3       	ldi	r30, 0x35	; 53
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	80 81       	ld	r24, Z
    1228:	48 2f       	mov	r20, r24
    122a:	8a 81       	ldd	r24, Y+2	; 0x02
    122c:	28 2f       	mov	r18, r24
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	02 2e       	mov	r0, r18
    1236:	02 c0       	rjmp	.+4      	; 0x123c <GPIO_voidTogPin+0xbc>
    1238:	88 0f       	add	r24, r24
    123a:	99 1f       	adc	r25, r25
    123c:	0a 94       	dec	r0
    123e:	e2 f7       	brpl	.-8      	; 0x1238 <GPIO_voidTogPin+0xb8>
    1240:	84 27       	eor	r24, r20
    1242:	8c 93       	st	X, r24
    1244:	13 c0       	rjmp	.+38     	; 0x126c <GPIO_voidTogPin+0xec>
				break ;             
			case GPIOD : 
				TOG_BIT(PORTD,copy_u8Pin);
    1246:	a2 e3       	ldi	r26, 0x32	; 50
    1248:	b0 e0       	ldi	r27, 0x00	; 0
    124a:	e2 e3       	ldi	r30, 0x32	; 50
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	80 81       	ld	r24, Z
    1250:	48 2f       	mov	r20, r24
    1252:	8a 81       	ldd	r24, Y+2	; 0x02
    1254:	28 2f       	mov	r18, r24
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	02 2e       	mov	r0, r18
    125e:	02 c0       	rjmp	.+4      	; 0x1264 <GPIO_voidTogPin+0xe4>
    1260:	88 0f       	add	r24, r24
    1262:	99 1f       	adc	r25, r25
    1264:	0a 94       	dec	r0
    1266:	e2 f7       	brpl	.-8      	; 0x1260 <GPIO_voidTogPin+0xe0>
    1268:	84 27       	eor	r24, r20
    126a:	8c 93       	st	X, r24
			default:
			break;
		}
		
		
	}
    126c:	0f 90       	pop	r0
    126e:	0f 90       	pop	r0
    1270:	0f 90       	pop	r0
    1272:	0f 90       	pop	r0
    1274:	cf 91       	pop	r28
    1276:	df 91       	pop	r29
    1278:	08 95       	ret

0000127a <GPIO_voidSetPortDDR>:
	void GPIO_voidSetPortDDR (u8  copy_u8Port , u8 copy_u8Mode )
	{
    127a:	df 93       	push	r29
    127c:	cf 93       	push	r28
    127e:	00 d0       	rcall	.+0      	; 0x1280 <GPIO_voidSetPortDDR+0x6>
    1280:	00 d0       	rcall	.+0      	; 0x1282 <GPIO_voidSetPortDDR+0x8>
    1282:	cd b7       	in	r28, 0x3d	; 61
    1284:	de b7       	in	r29, 0x3e	; 62
    1286:	89 83       	std	Y+1, r24	; 0x01
    1288:	6a 83       	std	Y+2, r22	; 0x02
		switch(copy_u8Port)
    128a:	89 81       	ldd	r24, Y+1	; 0x01
    128c:	28 2f       	mov	r18, r24
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	3c 83       	std	Y+4, r19	; 0x04
    1292:	2b 83       	std	Y+3, r18	; 0x03
    1294:	8b 81       	ldd	r24, Y+3	; 0x03
    1296:	9c 81       	ldd	r25, Y+4	; 0x04
    1298:	81 30       	cpi	r24, 0x01	; 1
    129a:	91 05       	cpc	r25, r1
    129c:	09 f1       	breq	.+66     	; 0x12e0 <GPIO_voidSetPortDDR+0x66>
    129e:	2b 81       	ldd	r18, Y+3	; 0x03
    12a0:	3c 81       	ldd	r19, Y+4	; 0x04
    12a2:	22 30       	cpi	r18, 0x02	; 2
    12a4:	31 05       	cpc	r19, r1
    12a6:	2c f4       	brge	.+10     	; 0x12b2 <GPIO_voidSetPortDDR+0x38>
    12a8:	8b 81       	ldd	r24, Y+3	; 0x03
    12aa:	9c 81       	ldd	r25, Y+4	; 0x04
    12ac:	00 97       	sbiw	r24, 0x00	; 0
    12ae:	61 f0       	breq	.+24     	; 0x12c8 <GPIO_voidSetPortDDR+0x4e>
    12b0:	3a c0       	rjmp	.+116    	; 0x1326 <GPIO_voidSetPortDDR+0xac>
    12b2:	2b 81       	ldd	r18, Y+3	; 0x03
    12b4:	3c 81       	ldd	r19, Y+4	; 0x04
    12b6:	22 30       	cpi	r18, 0x02	; 2
    12b8:	31 05       	cpc	r19, r1
    12ba:	f1 f0       	breq	.+60     	; 0x12f8 <GPIO_voidSetPortDDR+0x7e>
    12bc:	8b 81       	ldd	r24, Y+3	; 0x03
    12be:	9c 81       	ldd	r25, Y+4	; 0x04
    12c0:	83 30       	cpi	r24, 0x03	; 3
    12c2:	91 05       	cpc	r25, r1
    12c4:	29 f1       	breq	.+74     	; 0x1310 <GPIO_voidSetPortDDR+0x96>
    12c6:	2f c0       	rjmp	.+94     	; 0x1326 <GPIO_voidSetPortDDR+0xac>
		{
			case GPIOA :
				if(copy_u8Mode ==OUTPUT )
    12c8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ca:	81 30       	cpi	r24, 0x01	; 1
    12cc:	29 f4       	brne	.+10     	; 0x12d8 <GPIO_voidSetPortDDR+0x5e>
				{
					DDRA= 0xFF;
    12ce:	ea e3       	ldi	r30, 0x3A	; 58
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	8f ef       	ldi	r24, 0xFF	; 255
    12d4:	80 83       	st	Z, r24
    12d6:	27 c0       	rjmp	.+78     	; 0x1326 <GPIO_voidSetPortDDR+0xac>
				}
				else {
					DDRA = 0x00 ;
    12d8:	ea e3       	ldi	r30, 0x3A	; 58
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	10 82       	st	Z, r1
    12de:	23 c0       	rjmp	.+70     	; 0x1326 <GPIO_voidSetPortDDR+0xac>
				}
				break;
			case GPIOB :
				if(copy_u8Mode ==OUTPUT )
    12e0:	8a 81       	ldd	r24, Y+2	; 0x02
    12e2:	81 30       	cpi	r24, 0x01	; 1
    12e4:	29 f4       	brne	.+10     	; 0x12f0 <GPIO_voidSetPortDDR+0x76>
				{
					DDRB = 0xFF;
    12e6:	e7 e3       	ldi	r30, 0x37	; 55
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	8f ef       	ldi	r24, 0xFF	; 255
    12ec:	80 83       	st	Z, r24
    12ee:	1b c0       	rjmp	.+54     	; 0x1326 <GPIO_voidSetPortDDR+0xac>
				}
				else {
					DDRB = 0x00;
    12f0:	e7 e3       	ldi	r30, 0x37	; 55
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	10 82       	st	Z, r1
    12f6:	17 c0       	rjmp	.+46     	; 0x1326 <GPIO_voidSetPortDDR+0xac>
				}
				break;
			case GPIOC :
				if(copy_u8Mode ==OUTPUT )
    12f8:	8a 81       	ldd	r24, Y+2	; 0x02
    12fa:	81 30       	cpi	r24, 0x01	; 1
    12fc:	29 f4       	brne	.+10     	; 0x1308 <GPIO_voidSetPortDDR+0x8e>
				{
					DDRC = 0xFF ;
    12fe:	e4 e3       	ldi	r30, 0x34	; 52
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	8f ef       	ldi	r24, 0xFF	; 255
    1304:	80 83       	st	Z, r24
    1306:	0f c0       	rjmp	.+30     	; 0x1326 <GPIO_voidSetPortDDR+0xac>
				}
				else {
					DDRC = 0x00 ;
    1308:	e4 e3       	ldi	r30, 0x34	; 52
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	10 82       	st	Z, r1
    130e:	0b c0       	rjmp	.+22     	; 0x1326 <GPIO_voidSetPortDDR+0xac>
				}
				break;
			case GPIOD :
				if(copy_u8Mode ==OUTPUT )
    1310:	8a 81       	ldd	r24, Y+2	; 0x02
    1312:	81 30       	cpi	r24, 0x01	; 1
    1314:	29 f4       	brne	.+10     	; 0x1320 <GPIO_voidSetPortDDR+0xa6>
				{
					DDRD = 0xFF;
    1316:	e1 e3       	ldi	r30, 0x31	; 49
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	8f ef       	ldi	r24, 0xFF	; 255
    131c:	80 83       	st	Z, r24
    131e:	03 c0       	rjmp	.+6      	; 0x1326 <GPIO_voidSetPortDDR+0xac>
				}
				else {
					DDRD = 0x00;
    1320:	e1 e3       	ldi	r30, 0x31	; 49
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	10 82       	st	Z, r1
				}
				break;	
			default:
				break;
		}
	}
    1326:	0f 90       	pop	r0
    1328:	0f 90       	pop	r0
    132a:	0f 90       	pop	r0
    132c:	0f 90       	pop	r0
    132e:	cf 91       	pop	r28
    1330:	df 91       	pop	r29
    1332:	08 95       	ret

00001334 <GPIO_voidWritePort>:
	void	GPIO_voidWritePort (u8 copy_u8Port , u8 copy_u8Value)
	{
    1334:	df 93       	push	r29
    1336:	cf 93       	push	r28
    1338:	00 d0       	rcall	.+0      	; 0x133a <GPIO_voidWritePort+0x6>
    133a:	00 d0       	rcall	.+0      	; 0x133c <GPIO_voidWritePort+0x8>
    133c:	cd b7       	in	r28, 0x3d	; 61
    133e:	de b7       	in	r29, 0x3e	; 62
    1340:	89 83       	std	Y+1, r24	; 0x01
    1342:	6a 83       	std	Y+2, r22	; 0x02
			switch(copy_u8Port)
    1344:	89 81       	ldd	r24, Y+1	; 0x01
    1346:	28 2f       	mov	r18, r24
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	3c 83       	std	Y+4, r19	; 0x04
    134c:	2b 83       	std	Y+3, r18	; 0x03
    134e:	8b 81       	ldd	r24, Y+3	; 0x03
    1350:	9c 81       	ldd	r25, Y+4	; 0x04
    1352:	81 30       	cpi	r24, 0x01	; 1
    1354:	91 05       	cpc	r25, r1
    1356:	d1 f0       	breq	.+52     	; 0x138c <GPIO_voidWritePort+0x58>
    1358:	2b 81       	ldd	r18, Y+3	; 0x03
    135a:	3c 81       	ldd	r19, Y+4	; 0x04
    135c:	22 30       	cpi	r18, 0x02	; 2
    135e:	31 05       	cpc	r19, r1
    1360:	2c f4       	brge	.+10     	; 0x136c <GPIO_voidWritePort+0x38>
    1362:	8b 81       	ldd	r24, Y+3	; 0x03
    1364:	9c 81       	ldd	r25, Y+4	; 0x04
    1366:	00 97       	sbiw	r24, 0x00	; 0
    1368:	61 f0       	breq	.+24     	; 0x1382 <GPIO_voidWritePort+0x4e>
    136a:	1e c0       	rjmp	.+60     	; 0x13a8 <GPIO_voidWritePort+0x74>
    136c:	2b 81       	ldd	r18, Y+3	; 0x03
    136e:	3c 81       	ldd	r19, Y+4	; 0x04
    1370:	22 30       	cpi	r18, 0x02	; 2
    1372:	31 05       	cpc	r19, r1
    1374:	81 f0       	breq	.+32     	; 0x1396 <GPIO_voidWritePort+0x62>
    1376:	8b 81       	ldd	r24, Y+3	; 0x03
    1378:	9c 81       	ldd	r25, Y+4	; 0x04
    137a:	83 30       	cpi	r24, 0x03	; 3
    137c:	91 05       	cpc	r25, r1
    137e:	81 f0       	breq	.+32     	; 0x13a0 <GPIO_voidWritePort+0x6c>
    1380:	13 c0       	rjmp	.+38     	; 0x13a8 <GPIO_voidWritePort+0x74>
		{
			case GPIOA :
				PORTA = copy_u8Value ;
    1382:	eb e3       	ldi	r30, 0x3B	; 59
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	8a 81       	ldd	r24, Y+2	; 0x02
    1388:	80 83       	st	Z, r24
    138a:	0e c0       	rjmp	.+28     	; 0x13a8 <GPIO_voidWritePort+0x74>
				break;
			case GPIOB :
				PORTB = copy_u8Value;
    138c:	e8 e3       	ldi	r30, 0x38	; 56
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	8a 81       	ldd	r24, Y+2	; 0x02
    1392:	80 83       	st	Z, r24
    1394:	09 c0       	rjmp	.+18     	; 0x13a8 <GPIO_voidWritePort+0x74>
				break;
			case GPIOC :
				PORTC = copy_u8Value;
    1396:	e5 e3       	ldi	r30, 0x35	; 53
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	8a 81       	ldd	r24, Y+2	; 0x02
    139c:	80 83       	st	Z, r24
    139e:	04 c0       	rjmp	.+8      	; 0x13a8 <GPIO_voidWritePort+0x74>
				break;
			case GPIOD :
				PORTD = copy_u8Value;
    13a0:	e2 e3       	ldi	r30, 0x32	; 50
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	8a 81       	ldd	r24, Y+2	; 0x02
    13a6:	80 83       	st	Z, r24
				break;
		}
		
			
			
		}
    13a8:	0f 90       	pop	r0
    13aa:	0f 90       	pop	r0
    13ac:	0f 90       	pop	r0
    13ae:	0f 90       	pop	r0
    13b0:	cf 91       	pop	r28
    13b2:	df 91       	pop	r29
    13b4:	08 95       	ret

000013b6 <GPIO_voidSetLowNippleDDR>:
	void GPIO_voidSetLowNippleDDR(u8 copy_u8Port , u8 copy_u8Mode)
	{
    13b6:	df 93       	push	r29
    13b8:	cf 93       	push	r28
    13ba:	00 d0       	rcall	.+0      	; 0x13bc <GPIO_voidSetLowNippleDDR+0x6>
    13bc:	0f 92       	push	r0
    13be:	cd b7       	in	r28, 0x3d	; 61
    13c0:	de b7       	in	r29, 0x3e	; 62
    13c2:	8a 83       	std	Y+2, r24	; 0x02
    13c4:	6b 83       	std	Y+3, r22	; 0x03
		u8 i ;
		for (i= 0 ; i<4 ; i++){
    13c6:	19 82       	std	Y+1, r1	; 0x01
    13c8:	08 c0       	rjmp	.+16     	; 0x13da <GPIO_voidSetLowNippleDDR+0x24>
			GPIO_voidSetPinDDR(copy_u8Port , i ,copy_u8Mode );
    13ca:	8a 81       	ldd	r24, Y+2	; 0x02
    13cc:	69 81       	ldd	r22, Y+1	; 0x01
    13ce:	4b 81       	ldd	r20, Y+3	; 0x03
    13d0:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_voidSetPinDDR>
			
		}
	void GPIO_voidSetLowNippleDDR(u8 copy_u8Port , u8 copy_u8Mode)
	{
		u8 i ;
		for (i= 0 ; i<4 ; i++){
    13d4:	89 81       	ldd	r24, Y+1	; 0x01
    13d6:	8f 5f       	subi	r24, 0xFF	; 255
    13d8:	89 83       	std	Y+1, r24	; 0x01
    13da:	89 81       	ldd	r24, Y+1	; 0x01
    13dc:	84 30       	cpi	r24, 0x04	; 4
    13de:	a8 f3       	brcs	.-22     	; 0x13ca <GPIO_voidSetLowNippleDDR+0x14>
			GPIO_voidSetPinDDR(copy_u8Port , i ,copy_u8Mode );
		}
	}
    13e0:	0f 90       	pop	r0
    13e2:	0f 90       	pop	r0
    13e4:	0f 90       	pop	r0
    13e6:	cf 91       	pop	r28
    13e8:	df 91       	pop	r29
    13ea:	08 95       	ret

000013ec <GPIO_voidSetHighNippleDDR>:
	void GPIO_voidSetHighNippleDDR(u8 copy_u8Port , u8 copy_u8Mode)
	{
    13ec:	df 93       	push	r29
    13ee:	cf 93       	push	r28
    13f0:	00 d0       	rcall	.+0      	; 0x13f2 <GPIO_voidSetHighNippleDDR+0x6>
    13f2:	0f 92       	push	r0
    13f4:	cd b7       	in	r28, 0x3d	; 61
    13f6:	de b7       	in	r29, 0x3e	; 62
    13f8:	8a 83       	std	Y+2, r24	; 0x02
    13fa:	6b 83       	std	Y+3, r22	; 0x03
		u8 i ;
		for (i= 4 ; i<8 ; i++){
    13fc:	84 e0       	ldi	r24, 0x04	; 4
    13fe:	89 83       	std	Y+1, r24	; 0x01
    1400:	08 c0       	rjmp	.+16     	; 0x1412 <GPIO_voidSetHighNippleDDR+0x26>
			GPIO_voidSetPinDDR(copy_u8Port , i ,copy_u8Mode );
    1402:	8a 81       	ldd	r24, Y+2	; 0x02
    1404:	69 81       	ldd	r22, Y+1	; 0x01
    1406:	4b 81       	ldd	r20, Y+3	; 0x03
    1408:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_voidSetPinDDR>
		}
	}
	void GPIO_voidSetHighNippleDDR(u8 copy_u8Port , u8 copy_u8Mode)
	{
		u8 i ;
		for (i= 4 ; i<8 ; i++){
    140c:	89 81       	ldd	r24, Y+1	; 0x01
    140e:	8f 5f       	subi	r24, 0xFF	; 255
    1410:	89 83       	std	Y+1, r24	; 0x01
    1412:	89 81       	ldd	r24, Y+1	; 0x01
    1414:	88 30       	cpi	r24, 0x08	; 8
    1416:	a8 f3       	brcs	.-22     	; 0x1402 <GPIO_voidSetHighNippleDDR+0x16>
			GPIO_voidSetPinDDR(copy_u8Port , i ,copy_u8Mode );
		}
	}
    1418:	0f 90       	pop	r0
    141a:	0f 90       	pop	r0
    141c:	0f 90       	pop	r0
    141e:	cf 91       	pop	r28
    1420:	df 91       	pop	r29
    1422:	08 95       	ret

00001424 <GPIO_voidWriteLowNipple>:
	void GPIO_voidWriteLowNipple (u8 copy_u8Port , u8 copy_u8Value )
	{
    1424:	df 93       	push	r29
    1426:	cf 93       	push	r28
    1428:	00 d0       	rcall	.+0      	; 0x142a <GPIO_voidWriteLowNipple+0x6>
    142a:	00 d0       	rcall	.+0      	; 0x142c <GPIO_voidWriteLowNipple+0x8>
    142c:	cd b7       	in	r28, 0x3d	; 61
    142e:	de b7       	in	r29, 0x3e	; 62
    1430:	89 83       	std	Y+1, r24	; 0x01
    1432:	6a 83       	std	Y+2, r22	; 0x02
		copy_u8Value &= 0x0F;
    1434:	8a 81       	ldd	r24, Y+2	; 0x02
    1436:	8f 70       	andi	r24, 0x0F	; 15
    1438:	8a 83       	std	Y+2, r24	; 0x02
		switch (copy_u8Port) {
    143a:	89 81       	ldd	r24, Y+1	; 0x01
    143c:	28 2f       	mov	r18, r24
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	3c 83       	std	Y+4, r19	; 0x04
    1442:	2b 83       	std	Y+3, r18	; 0x03
    1444:	8b 81       	ldd	r24, Y+3	; 0x03
    1446:	9c 81       	ldd	r25, Y+4	; 0x04
    1448:	81 30       	cpi	r24, 0x01	; 1
    144a:	91 05       	cpc	r25, r1
    144c:	29 f1       	breq	.+74     	; 0x1498 <GPIO_voidWriteLowNipple+0x74>
    144e:	2b 81       	ldd	r18, Y+3	; 0x03
    1450:	3c 81       	ldd	r19, Y+4	; 0x04
    1452:	22 30       	cpi	r18, 0x02	; 2
    1454:	31 05       	cpc	r19, r1
    1456:	2c f4       	brge	.+10     	; 0x1462 <GPIO_voidWriteLowNipple+0x3e>
    1458:	8b 81       	ldd	r24, Y+3	; 0x03
    145a:	9c 81       	ldd	r25, Y+4	; 0x04
    145c:	00 97       	sbiw	r24, 0x00	; 0
    145e:	61 f0       	breq	.+24     	; 0x1478 <GPIO_voidWriteLowNipple+0x54>
    1460:	4a c0       	rjmp	.+148    	; 0x14f6 <GPIO_voidWriteLowNipple+0xd2>
    1462:	2b 81       	ldd	r18, Y+3	; 0x03
    1464:	3c 81       	ldd	r19, Y+4	; 0x04
    1466:	22 30       	cpi	r18, 0x02	; 2
    1468:	31 05       	cpc	r19, r1
    146a:	31 f1       	breq	.+76     	; 0x14b8 <GPIO_voidWriteLowNipple+0x94>
    146c:	8b 81       	ldd	r24, Y+3	; 0x03
    146e:	9c 81       	ldd	r25, Y+4	; 0x04
    1470:	83 30       	cpi	r24, 0x03	; 3
    1472:	91 05       	cpc	r25, r1
    1474:	89 f1       	breq	.+98     	; 0x14d8 <GPIO_voidWriteLowNipple+0xb4>
    1476:	3f c0       	rjmp	.+126    	; 0x14f6 <GPIO_voidWriteLowNipple+0xd2>
			case GPIOA :
				PORTA &= 0xF0 ; 
    1478:	ab e3       	ldi	r26, 0x3B	; 59
    147a:	b0 e0       	ldi	r27, 0x00	; 0
    147c:	eb e3       	ldi	r30, 0x3B	; 59
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	80 81       	ld	r24, Z
    1482:	80 7f       	andi	r24, 0xF0	; 240
    1484:	8c 93       	st	X, r24
				PORTA |= copy_u8Value ;
    1486:	ab e3       	ldi	r26, 0x3B	; 59
    1488:	b0 e0       	ldi	r27, 0x00	; 0
    148a:	eb e3       	ldi	r30, 0x3B	; 59
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	90 81       	ld	r25, Z
    1490:	8a 81       	ldd	r24, Y+2	; 0x02
    1492:	89 2b       	or	r24, r25
    1494:	8c 93       	st	X, r24
    1496:	2f c0       	rjmp	.+94     	; 0x14f6 <GPIO_voidWriteLowNipple+0xd2>
				break;
			case GPIOB :
				PORTB &= 0xF0 ; 
    1498:	a8 e3       	ldi	r26, 0x38	; 56
    149a:	b0 e0       	ldi	r27, 0x00	; 0
    149c:	e8 e3       	ldi	r30, 0x38	; 56
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	80 81       	ld	r24, Z
    14a2:	80 7f       	andi	r24, 0xF0	; 240
    14a4:	8c 93       	st	X, r24
				PORTB |= copy_u8Value ;
    14a6:	a8 e3       	ldi	r26, 0x38	; 56
    14a8:	b0 e0       	ldi	r27, 0x00	; 0
    14aa:	e8 e3       	ldi	r30, 0x38	; 56
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	90 81       	ld	r25, Z
    14b0:	8a 81       	ldd	r24, Y+2	; 0x02
    14b2:	89 2b       	or	r24, r25
    14b4:	8c 93       	st	X, r24
    14b6:	1f c0       	rjmp	.+62     	; 0x14f6 <GPIO_voidWriteLowNipple+0xd2>
				break;
			case GPIOC :
				PORTC &= 0xF0 ; 
    14b8:	a5 e3       	ldi	r26, 0x35	; 53
    14ba:	b0 e0       	ldi	r27, 0x00	; 0
    14bc:	e5 e3       	ldi	r30, 0x35	; 53
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	80 81       	ld	r24, Z
    14c2:	80 7f       	andi	r24, 0xF0	; 240
    14c4:	8c 93       	st	X, r24
				PORTC |= copy_u8Value ;
    14c6:	a5 e3       	ldi	r26, 0x35	; 53
    14c8:	b0 e0       	ldi	r27, 0x00	; 0
    14ca:	e5 e3       	ldi	r30, 0x35	; 53
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	90 81       	ld	r25, Z
    14d0:	8a 81       	ldd	r24, Y+2	; 0x02
    14d2:	89 2b       	or	r24, r25
    14d4:	8c 93       	st	X, r24
    14d6:	0f c0       	rjmp	.+30     	; 0x14f6 <GPIO_voidWriteLowNipple+0xd2>
				break;
			case GPIOD :
				PORTD &= 0xF0 ; 
    14d8:	a2 e3       	ldi	r26, 0x32	; 50
    14da:	b0 e0       	ldi	r27, 0x00	; 0
    14dc:	e2 e3       	ldi	r30, 0x32	; 50
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	80 7f       	andi	r24, 0xF0	; 240
    14e4:	8c 93       	st	X, r24
				PORTD |= copy_u8Value ;
    14e6:	a2 e3       	ldi	r26, 0x32	; 50
    14e8:	b0 e0       	ldi	r27, 0x00	; 0
    14ea:	e2 e3       	ldi	r30, 0x32	; 50
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	90 81       	ld	r25, Z
    14f0:	8a 81       	ldd	r24, Y+2	; 0x02
    14f2:	89 2b       	or	r24, r25
    14f4:	8c 93       	st	X, r24
				break;	
		}
	}
    14f6:	0f 90       	pop	r0
    14f8:	0f 90       	pop	r0
    14fa:	0f 90       	pop	r0
    14fc:	0f 90       	pop	r0
    14fe:	cf 91       	pop	r28
    1500:	df 91       	pop	r29
    1502:	08 95       	ret

00001504 <GPIO_voidWriteHighNipple>:
	void GPIO_voidWriteHighNipple (u8 copy_u8Port , u8 copy_u8Value )
	{
    1504:	df 93       	push	r29
    1506:	cf 93       	push	r28
    1508:	00 d0       	rcall	.+0      	; 0x150a <GPIO_voidWriteHighNipple+0x6>
    150a:	00 d0       	rcall	.+0      	; 0x150c <GPIO_voidWriteHighNipple+0x8>
    150c:	cd b7       	in	r28, 0x3d	; 61
    150e:	de b7       	in	r29, 0x3e	; 62
    1510:	89 83       	std	Y+1, r24	; 0x01
    1512:	6a 83       	std	Y+2, r22	; 0x02
		copy_u8Value &= 0xF0;
    1514:	8a 81       	ldd	r24, Y+2	; 0x02
    1516:	80 7f       	andi	r24, 0xF0	; 240
    1518:	8a 83       	std	Y+2, r24	; 0x02
		switch (copy_u8Port) {
    151a:	89 81       	ldd	r24, Y+1	; 0x01
    151c:	28 2f       	mov	r18, r24
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	3c 83       	std	Y+4, r19	; 0x04
    1522:	2b 83       	std	Y+3, r18	; 0x03
    1524:	8b 81       	ldd	r24, Y+3	; 0x03
    1526:	9c 81       	ldd	r25, Y+4	; 0x04
    1528:	81 30       	cpi	r24, 0x01	; 1
    152a:	91 05       	cpc	r25, r1
    152c:	29 f1       	breq	.+74     	; 0x1578 <GPIO_voidWriteHighNipple+0x74>
    152e:	2b 81       	ldd	r18, Y+3	; 0x03
    1530:	3c 81       	ldd	r19, Y+4	; 0x04
    1532:	22 30       	cpi	r18, 0x02	; 2
    1534:	31 05       	cpc	r19, r1
    1536:	2c f4       	brge	.+10     	; 0x1542 <GPIO_voidWriteHighNipple+0x3e>
    1538:	8b 81       	ldd	r24, Y+3	; 0x03
    153a:	9c 81       	ldd	r25, Y+4	; 0x04
    153c:	00 97       	sbiw	r24, 0x00	; 0
    153e:	61 f0       	breq	.+24     	; 0x1558 <GPIO_voidWriteHighNipple+0x54>
    1540:	4a c0       	rjmp	.+148    	; 0x15d6 <GPIO_voidWriteHighNipple+0xd2>
    1542:	2b 81       	ldd	r18, Y+3	; 0x03
    1544:	3c 81       	ldd	r19, Y+4	; 0x04
    1546:	22 30       	cpi	r18, 0x02	; 2
    1548:	31 05       	cpc	r19, r1
    154a:	31 f1       	breq	.+76     	; 0x1598 <GPIO_voidWriteHighNipple+0x94>
    154c:	8b 81       	ldd	r24, Y+3	; 0x03
    154e:	9c 81       	ldd	r25, Y+4	; 0x04
    1550:	83 30       	cpi	r24, 0x03	; 3
    1552:	91 05       	cpc	r25, r1
    1554:	89 f1       	breq	.+98     	; 0x15b8 <GPIO_voidWriteHighNipple+0xb4>
    1556:	3f c0       	rjmp	.+126    	; 0x15d6 <GPIO_voidWriteHighNipple+0xd2>
			case GPIOA :
				PORTA &= 0x0F ; 
    1558:	ab e3       	ldi	r26, 0x3B	; 59
    155a:	b0 e0       	ldi	r27, 0x00	; 0
    155c:	eb e3       	ldi	r30, 0x3B	; 59
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	80 81       	ld	r24, Z
    1562:	8f 70       	andi	r24, 0x0F	; 15
    1564:	8c 93       	st	X, r24
				PORTA |= copy_u8Value ;
    1566:	ab e3       	ldi	r26, 0x3B	; 59
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	eb e3       	ldi	r30, 0x3B	; 59
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	90 81       	ld	r25, Z
    1570:	8a 81       	ldd	r24, Y+2	; 0x02
    1572:	89 2b       	or	r24, r25
    1574:	8c 93       	st	X, r24
    1576:	2f c0       	rjmp	.+94     	; 0x15d6 <GPIO_voidWriteHighNipple+0xd2>
				break;
			case GPIOB :
				PORTB &= 0x0F ; 
    1578:	a8 e3       	ldi	r26, 0x38	; 56
    157a:	b0 e0       	ldi	r27, 0x00	; 0
    157c:	e8 e3       	ldi	r30, 0x38	; 56
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 81       	ld	r24, Z
    1582:	8f 70       	andi	r24, 0x0F	; 15
    1584:	8c 93       	st	X, r24
				PORTB |= copy_u8Value ;
    1586:	a8 e3       	ldi	r26, 0x38	; 56
    1588:	b0 e0       	ldi	r27, 0x00	; 0
    158a:	e8 e3       	ldi	r30, 0x38	; 56
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	90 81       	ld	r25, Z
    1590:	8a 81       	ldd	r24, Y+2	; 0x02
    1592:	89 2b       	or	r24, r25
    1594:	8c 93       	st	X, r24
    1596:	1f c0       	rjmp	.+62     	; 0x15d6 <GPIO_voidWriteHighNipple+0xd2>
				break;
			case GPIOC :
				PORTC &= 0x0F ; 
    1598:	a5 e3       	ldi	r26, 0x35	; 53
    159a:	b0 e0       	ldi	r27, 0x00	; 0
    159c:	e5 e3       	ldi	r30, 0x35	; 53
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	80 81       	ld	r24, Z
    15a2:	8f 70       	andi	r24, 0x0F	; 15
    15a4:	8c 93       	st	X, r24
				PORTC |= copy_u8Value ;
    15a6:	a5 e3       	ldi	r26, 0x35	; 53
    15a8:	b0 e0       	ldi	r27, 0x00	; 0
    15aa:	e5 e3       	ldi	r30, 0x35	; 53
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	90 81       	ld	r25, Z
    15b0:	8a 81       	ldd	r24, Y+2	; 0x02
    15b2:	89 2b       	or	r24, r25
    15b4:	8c 93       	st	X, r24
    15b6:	0f c0       	rjmp	.+30     	; 0x15d6 <GPIO_voidWriteHighNipple+0xd2>
				break;
			case GPIOD :
				PORTD &= 0x0F ; 
    15b8:	a2 e3       	ldi	r26, 0x32	; 50
    15ba:	b0 e0       	ldi	r27, 0x00	; 0
    15bc:	e2 e3       	ldi	r30, 0x32	; 50
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	80 81       	ld	r24, Z
    15c2:	8f 70       	andi	r24, 0x0F	; 15
    15c4:	8c 93       	st	X, r24
				PORTD |= copy_u8Value ;
    15c6:	a2 e3       	ldi	r26, 0x32	; 50
    15c8:	b0 e0       	ldi	r27, 0x00	; 0
    15ca:	e2 e3       	ldi	r30, 0x32	; 50
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	90 81       	ld	r25, Z
    15d0:	8a 81       	ldd	r24, Y+2	; 0x02
    15d2:	89 2b       	or	r24, r25
    15d4:	8c 93       	st	X, r24
				break;	
		}
	}
    15d6:	0f 90       	pop	r0
    15d8:	0f 90       	pop	r0
    15da:	0f 90       	pop	r0
    15dc:	0f 90       	pop	r0
    15de:	cf 91       	pop	r28
    15e0:	df 91       	pop	r29
    15e2:	08 95       	ret

000015e4 <Hbridge_voidCW>:




void Hbridge_voidCW(u8 copy_u8port , u8 copy_u8pin1,u8 copy_u8pin2)
{
    15e4:	df 93       	push	r29
    15e6:	cf 93       	push	r28
    15e8:	00 d0       	rcall	.+0      	; 0x15ea <Hbridge_voidCW+0x6>
    15ea:	0f 92       	push	r0
    15ec:	cd b7       	in	r28, 0x3d	; 61
    15ee:	de b7       	in	r29, 0x3e	; 62
    15f0:	89 83       	std	Y+1, r24	; 0x01
    15f2:	6a 83       	std	Y+2, r22	; 0x02
    15f4:	4b 83       	std	Y+3, r20	; 0x03
	GPIO_voidSetPinDDR(copy_u8port , copy_u8pin1 , OUTPUT);
    15f6:	89 81       	ldd	r24, Y+1	; 0x01
    15f8:	6a 81       	ldd	r22, Y+2	; 0x02
    15fa:	41 e0       	ldi	r20, 0x01	; 1
    15fc:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_voidSetPinDDR>
	GPIO_voidSetPinDDR(copy_u8port , copy_u8pin2 , OUTPUT);
    1600:	89 81       	ldd	r24, Y+1	; 0x01
    1602:	6b 81       	ldd	r22, Y+3	; 0x03
    1604:	41 e0       	ldi	r20, 0x01	; 1
    1606:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_voidSetPinDDR>
	GPIO_voidWritePin(copy_u8port, copy_u8pin1 , LOW);
    160a:	89 81       	ldd	r24, Y+1	; 0x01
    160c:	6a 81       	ldd	r22, Y+2	; 0x02
    160e:	40 e0       	ldi	r20, 0x00	; 0
    1610:	0e 94 32 07 	call	0xe64	; 0xe64 <GPIO_voidWritePin>
	GPIO_voidWritePin(copy_u8port, copy_u8pin2 , HIGH);
    1614:	89 81       	ldd	r24, Y+1	; 0x01
    1616:	6b 81       	ldd	r22, Y+3	; 0x03
    1618:	41 e0       	ldi	r20, 0x01	; 1
    161a:	0e 94 32 07 	call	0xe64	; 0xe64 <GPIO_voidWritePin>


	
}
    161e:	0f 90       	pop	r0
    1620:	0f 90       	pop	r0
    1622:	0f 90       	pop	r0
    1624:	cf 91       	pop	r28
    1626:	df 91       	pop	r29
    1628:	08 95       	ret

0000162a <Hbridge_voidACW>:
void Hbridge_voidACW(u8 copy_u8port , u8 copy_u8pin1,u8 copy_u8pin2)
{
    162a:	df 93       	push	r29
    162c:	cf 93       	push	r28
    162e:	00 d0       	rcall	.+0      	; 0x1630 <Hbridge_voidACW+0x6>
    1630:	0f 92       	push	r0
    1632:	cd b7       	in	r28, 0x3d	; 61
    1634:	de b7       	in	r29, 0x3e	; 62
    1636:	89 83       	std	Y+1, r24	; 0x01
    1638:	6a 83       	std	Y+2, r22	; 0x02
    163a:	4b 83       	std	Y+3, r20	; 0x03
	GPIO_voidSetPinDDR(copy_u8port , copy_u8pin1 , OUTPUT);
    163c:	89 81       	ldd	r24, Y+1	; 0x01
    163e:	6a 81       	ldd	r22, Y+2	; 0x02
    1640:	41 e0       	ldi	r20, 0x01	; 1
    1642:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_voidSetPinDDR>
	GPIO_voidSetPinDDR(copy_u8port , copy_u8pin2 , OUTPUT);
    1646:	89 81       	ldd	r24, Y+1	; 0x01
    1648:	6b 81       	ldd	r22, Y+3	; 0x03
    164a:	41 e0       	ldi	r20, 0x01	; 1
    164c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_voidSetPinDDR>
	GPIO_voidWritePin(copy_u8port, copy_u8pin1 , HIGH);
    1650:	89 81       	ldd	r24, Y+1	; 0x01
    1652:	6a 81       	ldd	r22, Y+2	; 0x02
    1654:	41 e0       	ldi	r20, 0x01	; 1
    1656:	0e 94 32 07 	call	0xe64	; 0xe64 <GPIO_voidWritePin>
	GPIO_voidWritePin(copy_u8port, copy_u8pin2 , LOW);
    165a:	89 81       	ldd	r24, Y+1	; 0x01
    165c:	6b 81       	ldd	r22, Y+3	; 0x03
    165e:	40 e0       	ldi	r20, 0x00	; 0
    1660:	0e 94 32 07 	call	0xe64	; 0xe64 <GPIO_voidWritePin>
	
}
    1664:	0f 90       	pop	r0
    1666:	0f 90       	pop	r0
    1668:	0f 90       	pop	r0
    166a:	cf 91       	pop	r28
    166c:	df 91       	pop	r29
    166e:	08 95       	ret

00001670 <Hbridge_voidSTOP>:
void Hbridge_voidSTOP(u8 copy_u8port , u8 copy_u8pin1,u8 copy_u8pin2)
{
    1670:	df 93       	push	r29
    1672:	cf 93       	push	r28
    1674:	00 d0       	rcall	.+0      	; 0x1676 <Hbridge_voidSTOP+0x6>
    1676:	0f 92       	push	r0
    1678:	cd b7       	in	r28, 0x3d	; 61
    167a:	de b7       	in	r29, 0x3e	; 62
    167c:	89 83       	std	Y+1, r24	; 0x01
    167e:	6a 83       	std	Y+2, r22	; 0x02
    1680:	4b 83       	std	Y+3, r20	; 0x03
	GPIO_voidSetPinDDR(copy_u8port , copy_u8pin1 , OUTPUT);
    1682:	89 81       	ldd	r24, Y+1	; 0x01
    1684:	6a 81       	ldd	r22, Y+2	; 0x02
    1686:	41 e0       	ldi	r20, 0x01	; 1
    1688:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_voidSetPinDDR>
	GPIO_voidSetPinDDR(copy_u8port , copy_u8pin2 , OUTPUT);
    168c:	89 81       	ldd	r24, Y+1	; 0x01
    168e:	6b 81       	ldd	r22, Y+3	; 0x03
    1690:	41 e0       	ldi	r20, 0x01	; 1
    1692:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_voidSetPinDDR>
	GPIO_voidWritePin(copy_u8port, copy_u8pin1 , LOW);
    1696:	89 81       	ldd	r24, Y+1	; 0x01
    1698:	6a 81       	ldd	r22, Y+2	; 0x02
    169a:	40 e0       	ldi	r20, 0x00	; 0
    169c:	0e 94 32 07 	call	0xe64	; 0xe64 <GPIO_voidWritePin>
	GPIO_voidWritePin(copy_u8port, copy_u8pin2 , LOW);
    16a0:	89 81       	ldd	r24, Y+1	; 0x01
    16a2:	6b 81       	ldd	r22, Y+3	; 0x03
    16a4:	40 e0       	ldi	r20, 0x00	; 0
    16a6:	0e 94 32 07 	call	0xe64	; 0xe64 <GPIO_voidWritePin>
}
    16aa:	0f 90       	pop	r0
    16ac:	0f 90       	pop	r0
    16ae:	0f 90       	pop	r0
    16b0:	cf 91       	pop	r28
    16b2:	df 91       	pop	r29
    16b4:	08 95       	ret

000016b6 <I2C_voidInit>:

#define F_CPU 8000000UL


void I2C_voidInit (u32 copy_u32Scl)
{
    16b6:	0f 93       	push	r16
    16b8:	1f 93       	push	r17
    16ba:	df 93       	push	r29
    16bc:	cf 93       	push	r28
    16be:	00 d0       	rcall	.+0      	; 0x16c0 <I2C_voidInit+0xa>
    16c0:	00 d0       	rcall	.+0      	; 0x16c2 <I2C_voidInit+0xc>
    16c2:	cd b7       	in	r28, 0x3d	; 61
    16c4:	de b7       	in	r29, 0x3e	; 62
    16c6:	69 83       	std	Y+1, r22	; 0x01
    16c8:	7a 83       	std	Y+2, r23	; 0x02
    16ca:	8b 83       	std	Y+3, r24	; 0x03
    16cc:	9c 83       	std	Y+4, r25	; 0x04
	#if I2C_PreScaler ==1
		CLEAR_BIT(TWSR , TWS1);
    16ce:	a1 e2       	ldi	r26, 0x21	; 33
    16d0:	b0 e0       	ldi	r27, 0x00	; 0
    16d2:	e1 e2       	ldi	r30, 0x21	; 33
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	80 81       	ld	r24, Z
    16d8:	8d 7f       	andi	r24, 0xFD	; 253
    16da:	8c 93       	st	X, r24
		CLEAR_BIT(TWSR , TWS0);
    16dc:	a1 e2       	ldi	r26, 0x21	; 33
    16de:	b0 e0       	ldi	r27, 0x00	; 0
    16e0:	e1 e2       	ldi	r30, 0x21	; 33
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	80 81       	ld	r24, Z
    16e6:	8e 7f       	andi	r24, 0xFE	; 254
    16e8:	8c 93       	st	X, r24
		SET_BIT(TWSR , TWS1);
	#else
		SET_BIT(TWSR , TWS1);
		SET_BIT(TWSR , TWS0);
	#endif
TWBR = (((F_CPU/copy_u32Scl)-16 )/2*(4^I2C_PreScaler));
    16ea:	00 e2       	ldi	r16, 0x20	; 32
    16ec:	10 e0       	ldi	r17, 0x00	; 0
    16ee:	80 e0       	ldi	r24, 0x00	; 0
    16f0:	92 e1       	ldi	r25, 0x12	; 18
    16f2:	aa e7       	ldi	r26, 0x7A	; 122
    16f4:	b0 e0       	ldi	r27, 0x00	; 0
    16f6:	29 81       	ldd	r18, Y+1	; 0x01
    16f8:	3a 81       	ldd	r19, Y+2	; 0x02
    16fa:	4b 81       	ldd	r20, Y+3	; 0x03
    16fc:	5c 81       	ldd	r21, Y+4	; 0x04
    16fe:	bc 01       	movw	r22, r24
    1700:	cd 01       	movw	r24, r26
    1702:	0e 94 51 14 	call	0x28a2	; 0x28a2 <__udivmodsi4>
    1706:	da 01       	movw	r26, r20
    1708:	c9 01       	movw	r24, r18
    170a:	40 97       	sbiw	r24, 0x10	; 16
    170c:	a1 09       	sbc	r26, r1
    170e:	b1 09       	sbc	r27, r1
    1710:	9c 01       	movw	r18, r24
    1712:	ad 01       	movw	r20, r26
    1714:	56 95       	lsr	r21
    1716:	47 95       	ror	r20
    1718:	37 95       	ror	r19
    171a:	27 95       	ror	r18
    171c:	da 01       	movw	r26, r20
    171e:	c9 01       	movw	r24, r18
    1720:	88 0f       	add	r24, r24
    1722:	99 1f       	adc	r25, r25
    1724:	aa 1f       	adc	r26, r26
    1726:	bb 1f       	adc	r27, r27
    1728:	88 0f       	add	r24, r24
    172a:	99 1f       	adc	r25, r25
    172c:	aa 1f       	adc	r26, r26
    172e:	bb 1f       	adc	r27, r27
    1730:	82 0f       	add	r24, r18
    1732:	93 1f       	adc	r25, r19
    1734:	a4 1f       	adc	r26, r20
    1736:	b5 1f       	adc	r27, r21
    1738:	f8 01       	movw	r30, r16
    173a:	80 83       	st	Z, r24

}
    173c:	0f 90       	pop	r0
    173e:	0f 90       	pop	r0
    1740:	0f 90       	pop	r0
    1742:	0f 90       	pop	r0
    1744:	cf 91       	pop	r28
    1746:	df 91       	pop	r29
    1748:	1f 91       	pop	r17
    174a:	0f 91       	pop	r16
    174c:	08 95       	ret

0000174e <I2C_voidStart>:
void I2C_voidStart (void)
{
    174e:	df 93       	push	r29
    1750:	cf 93       	push	r28
    1752:	cd b7       	in	r28, 0x3d	; 61
    1754:	de b7       	in	r29, 0x3e	; 62
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTA);
    1756:	e6 e5       	ldi	r30, 0x56	; 86
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	84 ea       	ldi	r24, 0xA4	; 164
    175c:	80 83       	st	Z, r24
	while (GET_BIT(TWCR , TWINT) == 0);
    175e:	e6 e5       	ldi	r30, 0x56	; 86
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	80 81       	ld	r24, Z
    1764:	88 1f       	adc	r24, r24
    1766:	88 27       	eor	r24, r24
    1768:	88 1f       	adc	r24, r24
    176a:	88 2f       	mov	r24, r24
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	90 70       	andi	r25, 0x00	; 0
    1770:	00 97       	sbiw	r24, 0x00	; 0
    1772:	a9 f3       	breq	.-22     	; 0x175e <I2C_voidStart+0x10>
	while ((TWSR&=0xF8) != StartHasBeenSent);
    1774:	a1 e2       	ldi	r26, 0x21	; 33
    1776:	b0 e0       	ldi	r27, 0x00	; 0
    1778:	e1 e2       	ldi	r30, 0x21	; 33
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	80 81       	ld	r24, Z
    177e:	88 7f       	andi	r24, 0xF8	; 248
    1780:	8c 93       	st	X, r24
    1782:	8c 91       	ld	r24, X
    1784:	88 30       	cpi	r24, 0x08	; 8
    1786:	b1 f7       	brne	.-20     	; 0x1774 <I2C_voidStart+0x26>

}
    1788:	cf 91       	pop	r28
    178a:	df 91       	pop	r29
    178c:	08 95       	ret

0000178e <I2C_voidWriteAddress>:
void I2C_voidWriteAddress (u8 copy_u8Address)
{
    178e:	df 93       	push	r29
    1790:	cf 93       	push	r28
    1792:	0f 92       	push	r0
    1794:	cd b7       	in	r28, 0x3d	; 61
    1796:	de b7       	in	r29, 0x3e	; 62
    1798:	89 83       	std	Y+1, r24	; 0x01
	TWDR = copy_u8Address ;
    179a:	e3 e2       	ldi	r30, 0x23	; 35
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	89 81       	ldd	r24, Y+1	; 0x01
    17a0:	80 83       	st	Z, r24
	TWCR=(1<<TWINT)|(1<<TWEN);
    17a2:	e6 e5       	ldi	r30, 0x56	; 86
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	84 e8       	ldi	r24, 0x84	; 132
    17a8:	80 83       	st	Z, r24
	while (GET_BIT(TWCR , TWINT) == 0);
    17aa:	e6 e5       	ldi	r30, 0x56	; 86
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	80 81       	ld	r24, Z
    17b0:	88 1f       	adc	r24, r24
    17b2:	88 27       	eor	r24, r24
    17b4:	88 1f       	adc	r24, r24
    17b6:	88 2f       	mov	r24, r24
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	90 70       	andi	r25, 0x00	; 0
    17bc:	00 97       	sbiw	r24, 0x00	; 0
    17be:	a9 f3       	breq	.-22     	; 0x17aa <I2C_voidWriteAddress+0x1c>
	while ((TWSR&=0xF8) != AddressSentAckRes);
    17c0:	a1 e2       	ldi	r26, 0x21	; 33
    17c2:	b0 e0       	ldi	r27, 0x00	; 0
    17c4:	e1 e2       	ldi	r30, 0x21	; 33
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	80 81       	ld	r24, Z
    17ca:	88 7f       	andi	r24, 0xF8	; 248
    17cc:	8c 93       	st	X, r24
    17ce:	8c 91       	ld	r24, X
    17d0:	88 31       	cpi	r24, 0x18	; 24
    17d2:	b1 f7       	brne	.-20     	; 0x17c0 <I2C_voidWriteAddress+0x32>
}
    17d4:	0f 90       	pop	r0
    17d6:	cf 91       	pop	r28
    17d8:	df 91       	pop	r29
    17da:	08 95       	ret

000017dc <I2C_voidWriteData>:
void I2C_voidWriteData (u8 copy_u8Data)
{
    17dc:	df 93       	push	r29
    17de:	cf 93       	push	r28
    17e0:	0f 92       	push	r0
    17e2:	cd b7       	in	r28, 0x3d	; 61
    17e4:	de b7       	in	r29, 0x3e	; 62
    17e6:	89 83       	std	Y+1, r24	; 0x01
	TWDR = copy_u8Data ;
    17e8:	e3 e2       	ldi	r30, 0x23	; 35
    17ea:	f0 e0       	ldi	r31, 0x00	; 0
    17ec:	89 81       	ldd	r24, Y+1	; 0x01
    17ee:	80 83       	st	Z, r24
	TWCR=(1<<TWINT)|(1<<TWEN);
    17f0:	e6 e5       	ldi	r30, 0x56	; 86
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	84 e8       	ldi	r24, 0x84	; 132
    17f6:	80 83       	st	Z, r24
	while (GET_BIT(TWCR , TWINT) == 0);
    17f8:	e6 e5       	ldi	r30, 0x56	; 86
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	80 81       	ld	r24, Z
    17fe:	88 1f       	adc	r24, r24
    1800:	88 27       	eor	r24, r24
    1802:	88 1f       	adc	r24, r24
    1804:	88 2f       	mov	r24, r24
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	90 70       	andi	r25, 0x00	; 0
    180a:	00 97       	sbiw	r24, 0x00	; 0
    180c:	a9 f3       	breq	.-22     	; 0x17f8 <I2C_voidWriteData+0x1c>
	while ((TWSR&=0xF8) != DataSentAckRes);
    180e:	a1 e2       	ldi	r26, 0x21	; 33
    1810:	b0 e0       	ldi	r27, 0x00	; 0
    1812:	e1 e2       	ldi	r30, 0x21	; 33
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	80 81       	ld	r24, Z
    1818:	88 7f       	andi	r24, 0xF8	; 248
    181a:	8c 93       	st	X, r24
    181c:	8c 91       	ld	r24, X
    181e:	88 32       	cpi	r24, 0x28	; 40
    1820:	b1 f7       	brne	.-20     	; 0x180e <I2C_voidWriteData+0x32>
}
    1822:	0f 90       	pop	r0
    1824:	cf 91       	pop	r28
    1826:	df 91       	pop	r29
    1828:	08 95       	ret

0000182a <I2C_voidStop>:
void I2C_voidStop	(void)
{
    182a:	df 93       	push	r29
    182c:	cf 93       	push	r28
    182e:	cd b7       	in	r28, 0x3d	; 61
    1830:	de b7       	in	r29, 0x3e	; 62
	
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
    1832:	e6 e5       	ldi	r30, 0x56	; 86
    1834:	f0 e0       	ldi	r31, 0x00	; 0
    1836:	84 e9       	ldi	r24, 0x94	; 148
    1838:	80 83       	st	Z, r24
	
}
    183a:	cf 91       	pop	r28
    183c:	df 91       	pop	r29
    183e:	08 95       	ret

00001840 <I2C_voidSetAddress>:
void I2C_voidSetAddress(u8 copy_u8Address)
{
    1840:	df 93       	push	r29
    1842:	cf 93       	push	r28
    1844:	0f 92       	push	r0
    1846:	cd b7       	in	r28, 0x3d	; 61
    1848:	de b7       	in	r29, 0x3e	; 62
    184a:	89 83       	std	Y+1, r24	; 0x01
	TWAR = copy_u8Address ;
    184c:	e2 e2       	ldi	r30, 0x22	; 34
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	89 81       	ldd	r24, Y+1	; 0x01
    1852:	80 83       	st	Z, r24
}
    1854:	0f 90       	pop	r0
    1856:	cf 91       	pop	r28
    1858:	df 91       	pop	r29
    185a:	08 95       	ret

0000185c <I2C_u8SlaveRead>:
u8 I2C_u8SlaveRead (void)
{
    185c:	df 93       	push	r29
    185e:	cf 93       	push	r28
    1860:	cd b7       	in	r28, 0x3d	; 61
    1862:	de b7       	in	r29, 0x3e	; 62
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
    1864:	e6 e5       	ldi	r30, 0x56	; 86
    1866:	f0 e0       	ldi	r31, 0x00	; 0
    1868:	84 ec       	ldi	r24, 0xC4	; 196
    186a:	80 83       	st	Z, r24
	while (GET_BIT(TWCR , TWINT) == 0);
    186c:	e6 e5       	ldi	r30, 0x56	; 86
    186e:	f0 e0       	ldi	r31, 0x00	; 0
    1870:	80 81       	ld	r24, Z
    1872:	88 1f       	adc	r24, r24
    1874:	88 27       	eor	r24, r24
    1876:	88 1f       	adc	r24, r24
    1878:	88 2f       	mov	r24, r24
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	90 70       	andi	r25, 0x00	; 0
    187e:	00 97       	sbiw	r24, 0x00	; 0
    1880:	a9 f3       	breq	.-22     	; 0x186c <I2C_u8SlaveRead+0x10>
	while ((TWSR&=0xF8) != SlaWResAckReturn);
    1882:	a1 e2       	ldi	r26, 0x21	; 33
    1884:	b0 e0       	ldi	r27, 0x00	; 0
    1886:	e1 e2       	ldi	r30, 0x21	; 33
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	80 81       	ld	r24, Z
    188c:	88 7f       	andi	r24, 0xF8	; 248
    188e:	8c 93       	st	X, r24
    1890:	8c 91       	ld	r24, X
    1892:	80 36       	cpi	r24, 0x60	; 96
    1894:	b1 f7       	brne	.-20     	; 0x1882 <I2C_u8SlaveRead+0x26>
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
    1896:	e6 e5       	ldi	r30, 0x56	; 86
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	84 ec       	ldi	r24, 0xC4	; 196
    189c:	80 83       	st	Z, r24
	while (GET_BIT(TWCR , TWINT) == 0);
    189e:	e6 e5       	ldi	r30, 0x56	; 86
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	80 81       	ld	r24, Z
    18a4:	88 1f       	adc	r24, r24
    18a6:	88 27       	eor	r24, r24
    18a8:	88 1f       	adc	r24, r24
    18aa:	88 2f       	mov	r24, r24
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	90 70       	andi	r25, 0x00	; 0
    18b0:	00 97       	sbiw	r24, 0x00	; 0
    18b2:	a9 f3       	breq	.-22     	; 0x189e <I2C_u8SlaveRead+0x42>
	while ((TWSR&=0xF8) != SLADataSentAckRes);
    18b4:	a1 e2       	ldi	r26, 0x21	; 33
    18b6:	b0 e0       	ldi	r27, 0x00	; 0
    18b8:	e1 e2       	ldi	r30, 0x21	; 33
    18ba:	f0 e0       	ldi	r31, 0x00	; 0
    18bc:	80 81       	ld	r24, Z
    18be:	88 7f       	andi	r24, 0xF8	; 248
    18c0:	8c 93       	st	X, r24
    18c2:	8c 91       	ld	r24, X
    18c4:	80 38       	cpi	r24, 0x80	; 128
    18c6:	b1 f7       	brne	.-20     	; 0x18b4 <I2C_u8SlaveRead+0x58>
	return TWDR ;
    18c8:	e3 e2       	ldi	r30, 0x23	; 35
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	80 81       	ld	r24, Z
	
}
    18ce:	cf 91       	pop	r28
    18d0:	df 91       	pop	r29
    18d2:	08 95       	ret

000018d4 <I2C_repeated_start>:
void I2C_repeated_start(void)
	{
    18d4:	df 93       	push	r29
    18d6:	cf 93       	push	r28
    18d8:	cd b7       	in	r28, 0x3d	; 61
    18da:	de b7       	in	r29, 0x3e	; 62
		TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTA);
    18dc:	e6 e5       	ldi	r30, 0x56	; 86
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	84 ea       	ldi	r24, 0xA4	; 164
    18e2:	80 83       	st	Z, r24
		while(GET_BIT(TWCR,TWINT)==0); //wait to finish
    18e4:	e6 e5       	ldi	r30, 0x56	; 86
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	80 81       	ld	r24, Z
    18ea:	88 1f       	adc	r24, r24
    18ec:	88 27       	eor	r24, r24
    18ee:	88 1f       	adc	r24, r24
    18f0:	88 2f       	mov	r24, r24
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	90 70       	andi	r25, 0x00	; 0
    18f6:	00 97       	sbiw	r24, 0x00	; 0
    18f8:	a9 f3       	breq	.-22     	; 0x18e4 <I2C_repeated_start+0x10>
		while ((TWSR & 0XF8) != 0x10); // repeated start condition has been transmitted
    18fa:	e1 e2       	ldi	r30, 0x21	; 33
    18fc:	f0 e0       	ldi	r31, 0x00	; 0
    18fe:	80 81       	ld	r24, Z
    1900:	88 2f       	mov	r24, r24
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	88 7f       	andi	r24, 0xF8	; 248
    1906:	90 70       	andi	r25, 0x00	; 0
    1908:	80 31       	cpi	r24, 0x10	; 16
    190a:	91 05       	cpc	r25, r1
    190c:	b1 f7       	brne	.-20     	; 0x18fa <I2C_repeated_start+0x26>
	}
    190e:	cf 91       	pop	r28
    1910:	df 91       	pop	r29
    1912:	08 95       	ret

00001914 <I2C_read_with_NACK>:

u8 I2C_read_with_NACK(void)
	{
    1914:	df 93       	push	r29
    1916:	cf 93       	push	r28
    1918:	cd b7       	in	r28, 0x3d	; 61
    191a:	de b7       	in	r29, 0x3e	; 62
		TWCR=(1<<TWINT)|(1<<TWEN);
    191c:	e6 e5       	ldi	r30, 0x56	; 86
    191e:	f0 e0       	ldi	r31, 0x00	; 0
    1920:	84 e8       	ldi	r24, 0x84	; 132
    1922:	80 83       	st	Z, r24
		while(GET_BIT(TWCR,TWINT)==0);
    1924:	e6 e5       	ldi	r30, 0x56	; 86
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	80 81       	ld	r24, Z
    192a:	88 1f       	adc	r24, r24
    192c:	88 27       	eor	r24, r24
    192e:	88 1f       	adc	r24, r24
    1930:	88 2f       	mov	r24, r24
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	90 70       	andi	r25, 0x00	; 0
    1936:	00 97       	sbiw	r24, 0x00	; 0
    1938:	a9 f3       	breq	.-22     	; 0x1924 <I2C_read_with_NACK+0x10>
		while ((TWSR & 0XF8) != 0x58); // data byte has been received and Not ACK has been returned
    193a:	e1 e2       	ldi	r30, 0x21	; 33
    193c:	f0 e0       	ldi	r31, 0x00	; 0
    193e:	80 81       	ld	r24, Z
    1940:	88 2f       	mov	r24, r24
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	88 7f       	andi	r24, 0xF8	; 248
    1946:	90 70       	andi	r25, 0x00	; 0
    1948:	88 35       	cpi	r24, 0x58	; 88
    194a:	91 05       	cpc	r25, r1
    194c:	b1 f7       	brne	.-20     	; 0x193a <I2C_read_with_NACK+0x26>
		return TWDR ;
    194e:	e3 e2       	ldi	r30, 0x23	; 35
    1950:	f0 e0       	ldi	r31, 0x00	; 0
    1952:	80 81       	ld	r24, Z
	}
    1954:	cf 91       	pop	r28
    1956:	df 91       	pop	r29
    1958:	08 95       	ret

0000195a <I2C_write_address_and_read>:
void I2C_write_address_and_read(u8 address)
	{
    195a:	df 93       	push	r29
    195c:	cf 93       	push	r28
    195e:	0f 92       	push	r0
    1960:	cd b7       	in	r28, 0x3d	; 61
    1962:	de b7       	in	r29, 0x3e	; 62
    1964:	89 83       	std	Y+1, r24	; 0x01
		TWDR=address;
    1966:	e3 e2       	ldi	r30, 0x23	; 35
    1968:	f0 e0       	ldi	r31, 0x00	; 0
    196a:	89 81       	ldd	r24, Y+1	; 0x01
    196c:	80 83       	st	Z, r24
		TWCR=(1<<TWINT)|(1<<TWEN);
    196e:	e6 e5       	ldi	r30, 0x56	; 86
    1970:	f0 e0       	ldi	r31, 0x00	; 0
    1972:	84 e8       	ldi	r24, 0x84	; 132
    1974:	80 83       	st	Z, r24
		while(GET_BIT(TWCR,TWINT)==0); //wait to finish
    1976:	e6 e5       	ldi	r30, 0x56	; 86
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	80 81       	ld	r24, Z
    197c:	88 1f       	adc	r24, r24
    197e:	88 27       	eor	r24, r24
    1980:	88 1f       	adc	r24, r24
    1982:	88 2f       	mov	r24, r24
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	90 70       	andi	r25, 0x00	; 0
    1988:	00 97       	sbiw	r24, 0x00	; 0
    198a:	a9 f3       	breq	.-22     	; 0x1976 <I2C_write_address_and_read+0x1c>
		while ((TWSR & 0XF8) != 0x40); // SLA+read has been transmitted and ACK has been received
    198c:	e1 e2       	ldi	r30, 0x21	; 33
    198e:	f0 e0       	ldi	r31, 0x00	; 0
    1990:	80 81       	ld	r24, Z
    1992:	88 2f       	mov	r24, r24
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	88 7f       	andi	r24, 0xF8	; 248
    1998:	90 70       	andi	r25, 0x00	; 0
    199a:	80 34       	cpi	r24, 0x40	; 64
    199c:	91 05       	cpc	r25, r1
    199e:	b1 f7       	brne	.-20     	; 0x198c <I2C_write_address_and_read+0x32>
	}
    19a0:	0f 90       	pop	r0
    19a2:	cf 91       	pop	r28
    19a4:	df 91       	pop	r29
    19a6:	08 95       	ret

000019a8 <LED_voidTurnOn>:




void LED_voidTurnOn(u8 copy_u8port , u8 copy_u8pin)
{
    19a8:	df 93       	push	r29
    19aa:	cf 93       	push	r28
    19ac:	00 d0       	rcall	.+0      	; 0x19ae <LED_voidTurnOn+0x6>
    19ae:	cd b7       	in	r28, 0x3d	; 61
    19b0:	de b7       	in	r29, 0x3e	; 62
    19b2:	89 83       	std	Y+1, r24	; 0x01
    19b4:	6a 83       	std	Y+2, r22	; 0x02
	GPIO_voidSetPinDDR(copy_u8port , copy_u8pin , OUTPUT );
    19b6:	89 81       	ldd	r24, Y+1	; 0x01
    19b8:	6a 81       	ldd	r22, Y+2	; 0x02
    19ba:	41 e0       	ldi	r20, 0x01	; 1
    19bc:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_voidSetPinDDR>
	GPIO_voidWritePin (copy_u8port , copy_u8pin , HIGH);
    19c0:	89 81       	ldd	r24, Y+1	; 0x01
    19c2:	6a 81       	ldd	r22, Y+2	; 0x02
    19c4:	41 e0       	ldi	r20, 0x01	; 1
    19c6:	0e 94 32 07 	call	0xe64	; 0xe64 <GPIO_voidWritePin>
}
    19ca:	0f 90       	pop	r0
    19cc:	0f 90       	pop	r0
    19ce:	cf 91       	pop	r28
    19d0:	df 91       	pop	r29
    19d2:	08 95       	ret

000019d4 <LED_voidTurnOff>:
void LED_voidTurnOff(u8 copy_u8port , u8 copy_u8pin)
{
    19d4:	df 93       	push	r29
    19d6:	cf 93       	push	r28
    19d8:	00 d0       	rcall	.+0      	; 0x19da <LED_voidTurnOff+0x6>
    19da:	cd b7       	in	r28, 0x3d	; 61
    19dc:	de b7       	in	r29, 0x3e	; 62
    19de:	89 83       	std	Y+1, r24	; 0x01
    19e0:	6a 83       	std	Y+2, r22	; 0x02
	GPIO_voidSetPinDDR(copy_u8port , copy_u8pin , OUTPUT );
    19e2:	89 81       	ldd	r24, Y+1	; 0x01
    19e4:	6a 81       	ldd	r22, Y+2	; 0x02
    19e6:	41 e0       	ldi	r20, 0x01	; 1
    19e8:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_voidSetPinDDR>
	GPIO_voidWritePin (copy_u8port , copy_u8pin , LOW);
    19ec:	89 81       	ldd	r24, Y+1	; 0x01
    19ee:	6a 81       	ldd	r22, Y+2	; 0x02
    19f0:	40 e0       	ldi	r20, 0x00	; 0
    19f2:	0e 94 32 07 	call	0xe64	; 0xe64 <GPIO_voidWritePin>
}
    19f6:	0f 90       	pop	r0
    19f8:	0f 90       	pop	r0
    19fa:	cf 91       	pop	r28
    19fc:	df 91       	pop	r29
    19fe:	08 95       	ret

00001a00 <LED_voidTogLed>:
void LED_voidTogLed (u8 copy_u8port , u8 copy_u8pin )
{
    1a00:	df 93       	push	r29
    1a02:	cf 93       	push	r28
    1a04:	00 d0       	rcall	.+0      	; 0x1a06 <LED_voidTogLed+0x6>
    1a06:	cd b7       	in	r28, 0x3d	; 61
    1a08:	de b7       	in	r29, 0x3e	; 62
    1a0a:	89 83       	std	Y+1, r24	; 0x01
    1a0c:	6a 83       	std	Y+2, r22	; 0x02
	GPIO_voidSetPinDDR(copy_u8port , copy_u8pin , OUTPUT );
    1a0e:	89 81       	ldd	r24, Y+1	; 0x01
    1a10:	6a 81       	ldd	r22, Y+2	; 0x02
    1a12:	41 e0       	ldi	r20, 0x01	; 1
    1a14:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_voidSetPinDDR>
	GPIO_voidTogPin(copy_u8port , copy_u8pin);
    1a18:	89 81       	ldd	r24, Y+1	; 0x01
    1a1a:	6a 81       	ldd	r22, Y+2	; 0x02
    1a1c:	0e 94 c0 08 	call	0x1180	; 0x1180 <GPIO_voidTogPin>
}
    1a20:	0f 90       	pop	r0
    1a22:	0f 90       	pop	r0
    1a24:	cf 91       	pop	r28
    1a26:	df 91       	pop	r29
    1a28:	08 95       	ret

00001a2a <STP_voidIntit>:
#include "util/delay.h"

u8 DataSerPort ,DataSerPin , DataClkPort , DataClkPin , StrPort  , StrPin ;

void STP_voidIntit(u8 copy_u8DataSerPort ,u8 copy_u8DataSerPin , u8 copy_u8DataClkPort ,u8 copy_u8DataClkPin ,u8 copy_u8StrPort ,u8 copy_u8StrPin)
{
    1a2a:	ef 92       	push	r14
    1a2c:	0f 93       	push	r16
    1a2e:	df 93       	push	r29
    1a30:	cf 93       	push	r28
    1a32:	00 d0       	rcall	.+0      	; 0x1a34 <STP_voidIntit+0xa>
    1a34:	00 d0       	rcall	.+0      	; 0x1a36 <STP_voidIntit+0xc>
    1a36:	00 d0       	rcall	.+0      	; 0x1a38 <STP_voidIntit+0xe>
    1a38:	cd b7       	in	r28, 0x3d	; 61
    1a3a:	de b7       	in	r29, 0x3e	; 62
    1a3c:	89 83       	std	Y+1, r24	; 0x01
    1a3e:	6a 83       	std	Y+2, r22	; 0x02
    1a40:	4b 83       	std	Y+3, r20	; 0x03
    1a42:	2c 83       	std	Y+4, r18	; 0x04
    1a44:	0d 83       	std	Y+5, r16	; 0x05
    1a46:	ee 82       	std	Y+6, r14	; 0x06
	DataSerPort = copy_u8DataSerPort ;
    1a48:	89 81       	ldd	r24, Y+1	; 0x01
    1a4a:	80 93 6c 00 	sts	0x006C, r24
	DataSerPin = copy_u8DataSerPin;
    1a4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a50:	80 93 6d 00 	sts	0x006D, r24
	DataClkPort =  copy_u8DataClkPort ;
    1a54:	8b 81       	ldd	r24, Y+3	; 0x03
    1a56:	80 93 69 00 	sts	0x0069, r24
	DataClkPin = copy_u8DataClkPin ;
    1a5a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a5c:	80 93 68 00 	sts	0x0068, r24
	StrPort = copy_u8StrPort ;
    1a60:	8d 81       	ldd	r24, Y+5	; 0x05
    1a62:	80 93 6a 00 	sts	0x006A, r24
	StrPin = copy_u8StrPin ; 
    1a66:	8e 81       	ldd	r24, Y+6	; 0x06
    1a68:	80 93 6b 00 	sts	0x006B, r24
	GPIO_voidSetPinDDR (copy_u8DataSerPort , copy_u8DataSerPin , OUTPUT);
    1a6c:	89 81       	ldd	r24, Y+1	; 0x01
    1a6e:	6a 81       	ldd	r22, Y+2	; 0x02
    1a70:	41 e0       	ldi	r20, 0x01	; 1
    1a72:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_voidSetPinDDR>
	GPIO_voidSetPinDDR (copy_u8DataClkPort ,copy_u8DataClkPin , OUTPUT );
    1a76:	8b 81       	ldd	r24, Y+3	; 0x03
    1a78:	6c 81       	ldd	r22, Y+4	; 0x04
    1a7a:	41 e0       	ldi	r20, 0x01	; 1
    1a7c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_voidSetPinDDR>
	GPIO_voidSetPinDDR (copy_u8StrPort , copy_u8StrPin , OUTPUT);
    1a80:	8d 81       	ldd	r24, Y+5	; 0x05
    1a82:	6e 81       	ldd	r22, Y+6	; 0x06
    1a84:	41 e0       	ldi	r20, 0x01	; 1
    1a86:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_voidSetPinDDR>
}
    1a8a:	26 96       	adiw	r28, 0x06	; 6
    1a8c:	0f b6       	in	r0, 0x3f	; 63
    1a8e:	f8 94       	cli
    1a90:	de bf       	out	0x3e, r29	; 62
    1a92:	0f be       	out	0x3f, r0	; 63
    1a94:	cd bf       	out	0x3d, r28	; 61
    1a96:	cf 91       	pop	r28
    1a98:	df 91       	pop	r29
    1a9a:	0f 91       	pop	r16
    1a9c:	ef 90       	pop	r14
    1a9e:	08 95       	ret

00001aa0 <STP_voidSend>:

void STP_voidSend (u8 copy_u8DataSend)
{
    1aa0:	0f 93       	push	r16
    1aa2:	1f 93       	push	r17
    1aa4:	df 93       	push	r29
    1aa6:	cf 93       	push	r28
    1aa8:	cd b7       	in	r28, 0x3d	; 61
    1aaa:	de b7       	in	r29, 0x3e	; 62
    1aac:	c3 56       	subi	r28, 0x63	; 99
    1aae:	d0 40       	sbci	r29, 0x00	; 0
    1ab0:	0f b6       	in	r0, 0x3f	; 63
    1ab2:	f8 94       	cli
    1ab4:	de bf       	out	0x3e, r29	; 62
    1ab6:	0f be       	out	0x3f, r0	; 63
    1ab8:	cd bf       	out	0x3d, r28	; 61
    1aba:	fe 01       	movw	r30, r28
    1abc:	ed 59       	subi	r30, 0x9D	; 157
    1abe:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac0:	80 83       	st	Z, r24
	u8 Counter , Local_u8Data ;
	for (Counter = 8 ; Counter > 0 ; Counter -- )
    1ac2:	fe 01       	movw	r30, r28
    1ac4:	ee 59       	subi	r30, 0x9E	; 158
    1ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac8:	88 e0       	ldi	r24, 0x08	; 8
    1aca:	80 83       	st	Z, r24
    1acc:	55 c2       	rjmp	.+1194   	; 0x1f78 <STP_voidSend+0x4d8>
	{
		Local_u8Data =  GET_BIT (copy_u8DataSend , Counter-1);
    1ace:	fe 01       	movw	r30, r28
    1ad0:	ed 59       	subi	r30, 0x9D	; 157
    1ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad4:	80 81       	ld	r24, Z
    1ad6:	48 2f       	mov	r20, r24
    1ad8:	50 e0       	ldi	r21, 0x00	; 0
    1ada:	fe 01       	movw	r30, r28
    1adc:	ee 59       	subi	r30, 0x9E	; 158
    1ade:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae0:	80 81       	ld	r24, Z
    1ae2:	88 2f       	mov	r24, r24
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	9c 01       	movw	r18, r24
    1ae8:	21 50       	subi	r18, 0x01	; 1
    1aea:	30 40       	sbci	r19, 0x00	; 0
    1aec:	81 e0       	ldi	r24, 0x01	; 1
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	02 c0       	rjmp	.+4      	; 0x1af6 <STP_voidSend+0x56>
    1af2:	88 0f       	add	r24, r24
    1af4:	99 1f       	adc	r25, r25
    1af6:	2a 95       	dec	r18
    1af8:	e2 f7       	brpl	.-8      	; 0x1af2 <STP_voidSend+0x52>
    1afa:	9a 01       	movw	r18, r20
    1afc:	28 23       	and	r18, r24
    1afe:	39 23       	and	r19, r25
    1b00:	fe 01       	movw	r30, r28
    1b02:	ee 59       	subi	r30, 0x9E	; 158
    1b04:	ff 4f       	sbci	r31, 0xFF	; 255
    1b06:	80 81       	ld	r24, Z
    1b08:	88 2f       	mov	r24, r24
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	01 97       	sbiw	r24, 0x01	; 1
    1b0e:	a9 01       	movw	r20, r18
    1b10:	02 c0       	rjmp	.+4      	; 0x1b16 <STP_voidSend+0x76>
    1b12:	55 95       	asr	r21
    1b14:	47 95       	ror	r20
    1b16:	8a 95       	dec	r24
    1b18:	e2 f7       	brpl	.-8      	; 0x1b12 <STP_voidSend+0x72>
    1b1a:	ca 01       	movw	r24, r20
    1b1c:	fe 01       	movw	r30, r28
    1b1e:	ef 59       	subi	r30, 0x9F	; 159
    1b20:	ff 4f       	sbci	r31, 0xFF	; 255
    1b22:	80 83       	st	Z, r24
		GPIO_voidWritePin (DataSerPort ,DataSerPin , Local_u8Data );
    1b24:	80 91 6c 00 	lds	r24, 0x006C
    1b28:	90 91 6d 00 	lds	r25, 0x006D
    1b2c:	fe 01       	movw	r30, r28
    1b2e:	ef 59       	subi	r30, 0x9F	; 159
    1b30:	ff 4f       	sbci	r31, 0xFF	; 255
    1b32:	69 2f       	mov	r22, r25
    1b34:	40 81       	ld	r20, Z
    1b36:	0e 94 32 07 	call	0xe64	; 0xe64 <GPIO_voidWritePin>
		GPIO_voidWritePin (DataClkPort , DataClkPin , HIGH);
    1b3a:	80 91 69 00 	lds	r24, 0x0069
    1b3e:	90 91 68 00 	lds	r25, 0x0068
    1b42:	69 2f       	mov	r22, r25
    1b44:	41 e0       	ldi	r20, 0x01	; 1
    1b46:	0e 94 32 07 	call	0xe64	; 0xe64 <GPIO_voidWritePin>
    1b4a:	fe 01       	movw	r30, r28
    1b4c:	e3 5a       	subi	r30, 0xA3	; 163
    1b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b50:	80 e0       	ldi	r24, 0x00	; 0
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	a0 e8       	ldi	r26, 0x80	; 128
    1b56:	bf e3       	ldi	r27, 0x3F	; 63
    1b58:	80 83       	st	Z, r24
    1b5a:	91 83       	std	Z+1, r25	; 0x01
    1b5c:	a2 83       	std	Z+2, r26	; 0x02
    1b5e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b60:	8e 01       	movw	r16, r28
    1b62:	07 5a       	subi	r16, 0xA7	; 167
    1b64:	1f 4f       	sbci	r17, 0xFF	; 255
    1b66:	fe 01       	movw	r30, r28
    1b68:	e3 5a       	subi	r30, 0xA3	; 163
    1b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6c:	60 81       	ld	r22, Z
    1b6e:	71 81       	ldd	r23, Z+1	; 0x01
    1b70:	82 81       	ldd	r24, Z+2	; 0x02
    1b72:	93 81       	ldd	r25, Z+3	; 0x03
    1b74:	2b ea       	ldi	r18, 0xAB	; 171
    1b76:	3a ea       	ldi	r19, 0xAA	; 170
    1b78:	4a e2       	ldi	r20, 0x2A	; 42
    1b7a:	50 e4       	ldi	r21, 0x40	; 64
    1b7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b80:	dc 01       	movw	r26, r24
    1b82:	cb 01       	movw	r24, r22
    1b84:	f8 01       	movw	r30, r16
    1b86:	80 83       	st	Z, r24
    1b88:	91 83       	std	Z+1, r25	; 0x01
    1b8a:	a2 83       	std	Z+2, r26	; 0x02
    1b8c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b8e:	fe 01       	movw	r30, r28
    1b90:	e7 5a       	subi	r30, 0xA7	; 167
    1b92:	ff 4f       	sbci	r31, 0xFF	; 255
    1b94:	60 81       	ld	r22, Z
    1b96:	71 81       	ldd	r23, Z+1	; 0x01
    1b98:	82 81       	ldd	r24, Z+2	; 0x02
    1b9a:	93 81       	ldd	r25, Z+3	; 0x03
    1b9c:	20 e0       	ldi	r18, 0x00	; 0
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	40 e8       	ldi	r20, 0x80	; 128
    1ba2:	5f e3       	ldi	r21, 0x3F	; 63
    1ba4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ba8:	88 23       	and	r24, r24
    1baa:	34 f4       	brge	.+12     	; 0x1bb8 <STP_voidSend+0x118>
		__ticks = 1;
    1bac:	fe 01       	movw	r30, r28
    1bae:	e8 5a       	subi	r30, 0xA8	; 168
    1bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb2:	81 e0       	ldi	r24, 0x01	; 1
    1bb4:	80 83       	st	Z, r24
    1bb6:	e0 c0       	rjmp	.+448    	; 0x1d78 <STP_voidSend+0x2d8>
	else if (__tmp > 255)
    1bb8:	fe 01       	movw	r30, r28
    1bba:	e7 5a       	subi	r30, 0xA7	; 167
    1bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bbe:	60 81       	ld	r22, Z
    1bc0:	71 81       	ldd	r23, Z+1	; 0x01
    1bc2:	82 81       	ldd	r24, Z+2	; 0x02
    1bc4:	93 81       	ldd	r25, Z+3	; 0x03
    1bc6:	20 e0       	ldi	r18, 0x00	; 0
    1bc8:	30 e0       	ldi	r19, 0x00	; 0
    1bca:	4f e7       	ldi	r20, 0x7F	; 127
    1bcc:	53 e4       	ldi	r21, 0x43	; 67
    1bce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bd2:	18 16       	cp	r1, r24
    1bd4:	0c f0       	brlt	.+2      	; 0x1bd8 <STP_voidSend+0x138>
    1bd6:	c0 c0       	rjmp	.+384    	; 0x1d58 <STP_voidSend+0x2b8>
	{
		_delay_ms(__us / 1000.0);
    1bd8:	fe 01       	movw	r30, r28
    1bda:	e3 5a       	subi	r30, 0xA3	; 163
    1bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bde:	60 81       	ld	r22, Z
    1be0:	71 81       	ldd	r23, Z+1	; 0x01
    1be2:	82 81       	ldd	r24, Z+2	; 0x02
    1be4:	93 81       	ldd	r25, Z+3	; 0x03
    1be6:	20 e0       	ldi	r18, 0x00	; 0
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	4a e7       	ldi	r20, 0x7A	; 122
    1bec:	54 e4       	ldi	r21, 0x44	; 68
    1bee:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1bf2:	dc 01       	movw	r26, r24
    1bf4:	cb 01       	movw	r24, r22
    1bf6:	fe 01       	movw	r30, r28
    1bf8:	ec 5a       	subi	r30, 0xAC	; 172
    1bfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfc:	80 83       	st	Z, r24
    1bfe:	91 83       	std	Z+1, r25	; 0x01
    1c00:	a2 83       	std	Z+2, r26	; 0x02
    1c02:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c04:	8e 01       	movw	r16, r28
    1c06:	00 5b       	subi	r16, 0xB0	; 176
    1c08:	1f 4f       	sbci	r17, 0xFF	; 255
    1c0a:	fe 01       	movw	r30, r28
    1c0c:	ec 5a       	subi	r30, 0xAC	; 172
    1c0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c10:	60 81       	ld	r22, Z
    1c12:	71 81       	ldd	r23, Z+1	; 0x01
    1c14:	82 81       	ldd	r24, Z+2	; 0x02
    1c16:	93 81       	ldd	r25, Z+3	; 0x03
    1c18:	20 e0       	ldi	r18, 0x00	; 0
    1c1a:	30 e0       	ldi	r19, 0x00	; 0
    1c1c:	4a ef       	ldi	r20, 0xFA	; 250
    1c1e:	54 e4       	ldi	r21, 0x44	; 68
    1c20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c24:	dc 01       	movw	r26, r24
    1c26:	cb 01       	movw	r24, r22
    1c28:	f8 01       	movw	r30, r16
    1c2a:	80 83       	st	Z, r24
    1c2c:	91 83       	std	Z+1, r25	; 0x01
    1c2e:	a2 83       	std	Z+2, r26	; 0x02
    1c30:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c32:	fe 01       	movw	r30, r28
    1c34:	e0 5b       	subi	r30, 0xB0	; 176
    1c36:	ff 4f       	sbci	r31, 0xFF	; 255
    1c38:	60 81       	ld	r22, Z
    1c3a:	71 81       	ldd	r23, Z+1	; 0x01
    1c3c:	82 81       	ldd	r24, Z+2	; 0x02
    1c3e:	93 81       	ldd	r25, Z+3	; 0x03
    1c40:	20 e0       	ldi	r18, 0x00	; 0
    1c42:	30 e0       	ldi	r19, 0x00	; 0
    1c44:	40 e8       	ldi	r20, 0x80	; 128
    1c46:	5f e3       	ldi	r21, 0x3F	; 63
    1c48:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c4c:	88 23       	and	r24, r24
    1c4e:	44 f4       	brge	.+16     	; 0x1c60 <STP_voidSend+0x1c0>
		__ticks = 1;
    1c50:	fe 01       	movw	r30, r28
    1c52:	e2 5b       	subi	r30, 0xB2	; 178
    1c54:	ff 4f       	sbci	r31, 0xFF	; 255
    1c56:	81 e0       	ldi	r24, 0x01	; 1
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	91 83       	std	Z+1, r25	; 0x01
    1c5c:	80 83       	st	Z, r24
    1c5e:	64 c0       	rjmp	.+200    	; 0x1d28 <STP_voidSend+0x288>
	else if (__tmp > 65535)
    1c60:	fe 01       	movw	r30, r28
    1c62:	e0 5b       	subi	r30, 0xB0	; 176
    1c64:	ff 4f       	sbci	r31, 0xFF	; 255
    1c66:	60 81       	ld	r22, Z
    1c68:	71 81       	ldd	r23, Z+1	; 0x01
    1c6a:	82 81       	ldd	r24, Z+2	; 0x02
    1c6c:	93 81       	ldd	r25, Z+3	; 0x03
    1c6e:	20 e0       	ldi	r18, 0x00	; 0
    1c70:	3f ef       	ldi	r19, 0xFF	; 255
    1c72:	4f e7       	ldi	r20, 0x7F	; 127
    1c74:	57 e4       	ldi	r21, 0x47	; 71
    1c76:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c7a:	18 16       	cp	r1, r24
    1c7c:	0c f0       	brlt	.+2      	; 0x1c80 <STP_voidSend+0x1e0>
    1c7e:	43 c0       	rjmp	.+134    	; 0x1d06 <STP_voidSend+0x266>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c80:	fe 01       	movw	r30, r28
    1c82:	ec 5a       	subi	r30, 0xAC	; 172
    1c84:	ff 4f       	sbci	r31, 0xFF	; 255
    1c86:	60 81       	ld	r22, Z
    1c88:	71 81       	ldd	r23, Z+1	; 0x01
    1c8a:	82 81       	ldd	r24, Z+2	; 0x02
    1c8c:	93 81       	ldd	r25, Z+3	; 0x03
    1c8e:	20 e0       	ldi	r18, 0x00	; 0
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	40 e2       	ldi	r20, 0x20	; 32
    1c94:	51 e4       	ldi	r21, 0x41	; 65
    1c96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c9a:	dc 01       	movw	r26, r24
    1c9c:	cb 01       	movw	r24, r22
    1c9e:	8e 01       	movw	r16, r28
    1ca0:	02 5b       	subi	r16, 0xB2	; 178
    1ca2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ca4:	bc 01       	movw	r22, r24
    1ca6:	cd 01       	movw	r24, r26
    1ca8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cac:	dc 01       	movw	r26, r24
    1cae:	cb 01       	movw	r24, r22
    1cb0:	f8 01       	movw	r30, r16
    1cb2:	91 83       	std	Z+1, r25	; 0x01
    1cb4:	80 83       	st	Z, r24
    1cb6:	1f c0       	rjmp	.+62     	; 0x1cf6 <STP_voidSend+0x256>
    1cb8:	fe 01       	movw	r30, r28
    1cba:	e4 5b       	subi	r30, 0xB4	; 180
    1cbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cbe:	88 ec       	ldi	r24, 0xC8	; 200
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	91 83       	std	Z+1, r25	; 0x01
    1cc4:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1cc6:	fe 01       	movw	r30, r28
    1cc8:	e4 5b       	subi	r30, 0xB4	; 180
    1cca:	ff 4f       	sbci	r31, 0xFF	; 255
    1ccc:	80 81       	ld	r24, Z
    1cce:	91 81       	ldd	r25, Z+1	; 0x01
    1cd0:	01 97       	sbiw	r24, 0x01	; 1
    1cd2:	f1 f7       	brne	.-4      	; 0x1cd0 <STP_voidSend+0x230>
    1cd4:	fe 01       	movw	r30, r28
    1cd6:	e4 5b       	subi	r30, 0xB4	; 180
    1cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cda:	91 83       	std	Z+1, r25	; 0x01
    1cdc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cde:	de 01       	movw	r26, r28
    1ce0:	a2 5b       	subi	r26, 0xB2	; 178
    1ce2:	bf 4f       	sbci	r27, 0xFF	; 255
    1ce4:	fe 01       	movw	r30, r28
    1ce6:	e2 5b       	subi	r30, 0xB2	; 178
    1ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cea:	80 81       	ld	r24, Z
    1cec:	91 81       	ldd	r25, Z+1	; 0x01
    1cee:	01 97       	sbiw	r24, 0x01	; 1
    1cf0:	11 96       	adiw	r26, 0x01	; 1
    1cf2:	9c 93       	st	X, r25
    1cf4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cf6:	fe 01       	movw	r30, r28
    1cf8:	e2 5b       	subi	r30, 0xB2	; 178
    1cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfc:	80 81       	ld	r24, Z
    1cfe:	91 81       	ldd	r25, Z+1	; 0x01
    1d00:	00 97       	sbiw	r24, 0x00	; 0
    1d02:	d1 f6       	brne	.-76     	; 0x1cb8 <STP_voidSend+0x218>
    1d04:	4b c0       	rjmp	.+150    	; 0x1d9c <STP_voidSend+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d06:	8e 01       	movw	r16, r28
    1d08:	02 5b       	subi	r16, 0xB2	; 178
    1d0a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d0c:	fe 01       	movw	r30, r28
    1d0e:	e0 5b       	subi	r30, 0xB0	; 176
    1d10:	ff 4f       	sbci	r31, 0xFF	; 255
    1d12:	60 81       	ld	r22, Z
    1d14:	71 81       	ldd	r23, Z+1	; 0x01
    1d16:	82 81       	ldd	r24, Z+2	; 0x02
    1d18:	93 81       	ldd	r25, Z+3	; 0x03
    1d1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d1e:	dc 01       	movw	r26, r24
    1d20:	cb 01       	movw	r24, r22
    1d22:	f8 01       	movw	r30, r16
    1d24:	91 83       	std	Z+1, r25	; 0x01
    1d26:	80 83       	st	Z, r24
    1d28:	de 01       	movw	r26, r28
    1d2a:	a6 5b       	subi	r26, 0xB6	; 182
    1d2c:	bf 4f       	sbci	r27, 0xFF	; 255
    1d2e:	fe 01       	movw	r30, r28
    1d30:	e2 5b       	subi	r30, 0xB2	; 178
    1d32:	ff 4f       	sbci	r31, 0xFF	; 255
    1d34:	80 81       	ld	r24, Z
    1d36:	91 81       	ldd	r25, Z+1	; 0x01
    1d38:	11 96       	adiw	r26, 0x01	; 1
    1d3a:	9c 93       	st	X, r25
    1d3c:	8e 93       	st	-X, r24
    1d3e:	fe 01       	movw	r30, r28
    1d40:	e6 5b       	subi	r30, 0xB6	; 182
    1d42:	ff 4f       	sbci	r31, 0xFF	; 255
    1d44:	80 81       	ld	r24, Z
    1d46:	91 81       	ldd	r25, Z+1	; 0x01
    1d48:	01 97       	sbiw	r24, 0x01	; 1
    1d4a:	f1 f7       	brne	.-4      	; 0x1d48 <STP_voidSend+0x2a8>
    1d4c:	fe 01       	movw	r30, r28
    1d4e:	e6 5b       	subi	r30, 0xB6	; 182
    1d50:	ff 4f       	sbci	r31, 0xFF	; 255
    1d52:	91 83       	std	Z+1, r25	; 0x01
    1d54:	80 83       	st	Z, r24
    1d56:	22 c0       	rjmp	.+68     	; 0x1d9c <STP_voidSend+0x2fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1d58:	8e 01       	movw	r16, r28
    1d5a:	08 5a       	subi	r16, 0xA8	; 168
    1d5c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d5e:	fe 01       	movw	r30, r28
    1d60:	e7 5a       	subi	r30, 0xA7	; 167
    1d62:	ff 4f       	sbci	r31, 0xFF	; 255
    1d64:	60 81       	ld	r22, Z
    1d66:	71 81       	ldd	r23, Z+1	; 0x01
    1d68:	82 81       	ldd	r24, Z+2	; 0x02
    1d6a:	93 81       	ldd	r25, Z+3	; 0x03
    1d6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d70:	dc 01       	movw	r26, r24
    1d72:	cb 01       	movw	r24, r22
    1d74:	f8 01       	movw	r30, r16
    1d76:	80 83       	st	Z, r24
    1d78:	de 01       	movw	r26, r28
    1d7a:	a7 5b       	subi	r26, 0xB7	; 183
    1d7c:	bf 4f       	sbci	r27, 0xFF	; 255
    1d7e:	fe 01       	movw	r30, r28
    1d80:	e8 5a       	subi	r30, 0xA8	; 168
    1d82:	ff 4f       	sbci	r31, 0xFF	; 255
    1d84:	80 81       	ld	r24, Z
    1d86:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1d88:	fe 01       	movw	r30, r28
    1d8a:	e7 5b       	subi	r30, 0xB7	; 183
    1d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8e:	80 81       	ld	r24, Z
    1d90:	8a 95       	dec	r24
    1d92:	f1 f7       	brne	.-4      	; 0x1d90 <STP_voidSend+0x2f0>
    1d94:	fe 01       	movw	r30, r28
    1d96:	e7 5b       	subi	r30, 0xB7	; 183
    1d98:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9a:	80 83       	st	Z, r24
		_delay_us(1);
		GPIO_voidWritePin (DataClkPort , DataClkPin , LOW);
    1d9c:	80 91 69 00 	lds	r24, 0x0069
    1da0:	90 91 68 00 	lds	r25, 0x0068
    1da4:	69 2f       	mov	r22, r25
    1da6:	40 e0       	ldi	r20, 0x00	; 0
    1da8:	0e 94 32 07 	call	0xe64	; 0xe64 <GPIO_voidWritePin>
    1dac:	fe 01       	movw	r30, r28
    1dae:	eb 5b       	subi	r30, 0xBB	; 187
    1db0:	ff 4f       	sbci	r31, 0xFF	; 255
    1db2:	80 e0       	ldi	r24, 0x00	; 0
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	a0 e8       	ldi	r26, 0x80	; 128
    1db8:	bf e3       	ldi	r27, 0x3F	; 63
    1dba:	80 83       	st	Z, r24
    1dbc:	91 83       	std	Z+1, r25	; 0x01
    1dbe:	a2 83       	std	Z+2, r26	; 0x02
    1dc0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1dc2:	8e 01       	movw	r16, r28
    1dc4:	0f 5b       	subi	r16, 0xBF	; 191
    1dc6:	1f 4f       	sbci	r17, 0xFF	; 255
    1dc8:	fe 01       	movw	r30, r28
    1dca:	eb 5b       	subi	r30, 0xBB	; 187
    1dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dce:	60 81       	ld	r22, Z
    1dd0:	71 81       	ldd	r23, Z+1	; 0x01
    1dd2:	82 81       	ldd	r24, Z+2	; 0x02
    1dd4:	93 81       	ldd	r25, Z+3	; 0x03
    1dd6:	2b ea       	ldi	r18, 0xAB	; 171
    1dd8:	3a ea       	ldi	r19, 0xAA	; 170
    1dda:	4a e2       	ldi	r20, 0x2A	; 42
    1ddc:	50 e4       	ldi	r21, 0x40	; 64
    1dde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de2:	dc 01       	movw	r26, r24
    1de4:	cb 01       	movw	r24, r22
    1de6:	f8 01       	movw	r30, r16
    1de8:	80 83       	st	Z, r24
    1dea:	91 83       	std	Z+1, r25	; 0x01
    1dec:	a2 83       	std	Z+2, r26	; 0x02
    1dee:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1df0:	fe 01       	movw	r30, r28
    1df2:	ef 5b       	subi	r30, 0xBF	; 191
    1df4:	ff 4f       	sbci	r31, 0xFF	; 255
    1df6:	60 81       	ld	r22, Z
    1df8:	71 81       	ldd	r23, Z+1	; 0x01
    1dfa:	82 81       	ldd	r24, Z+2	; 0x02
    1dfc:	93 81       	ldd	r25, Z+3	; 0x03
    1dfe:	20 e0       	ldi	r18, 0x00	; 0
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	40 e8       	ldi	r20, 0x80	; 128
    1e04:	5f e3       	ldi	r21, 0x3F	; 63
    1e06:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e0a:	88 23       	and	r24, r24
    1e0c:	34 f4       	brge	.+12     	; 0x1e1a <STP_voidSend+0x37a>
		__ticks = 1;
    1e0e:	81 e0       	ldi	r24, 0x01	; 1
    1e10:	fe 01       	movw	r30, r28
    1e12:	e0 5c       	subi	r30, 0xC0	; 192
    1e14:	ff 4f       	sbci	r31, 0xFF	; 255
    1e16:	80 83       	st	Z, r24
    1e18:	9d c0       	rjmp	.+314    	; 0x1f54 <STP_voidSend+0x4b4>
	else if (__tmp > 255)
    1e1a:	fe 01       	movw	r30, r28
    1e1c:	ef 5b       	subi	r30, 0xBF	; 191
    1e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e20:	60 81       	ld	r22, Z
    1e22:	71 81       	ldd	r23, Z+1	; 0x01
    1e24:	82 81       	ldd	r24, Z+2	; 0x02
    1e26:	93 81       	ldd	r25, Z+3	; 0x03
    1e28:	20 e0       	ldi	r18, 0x00	; 0
    1e2a:	30 e0       	ldi	r19, 0x00	; 0
    1e2c:	4f e7       	ldi	r20, 0x7F	; 127
    1e2e:	53 e4       	ldi	r21, 0x43	; 67
    1e30:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e34:	18 16       	cp	r1, r24
    1e36:	0c f0       	brlt	.+2      	; 0x1e3a <STP_voidSend+0x39a>
    1e38:	7e c0       	rjmp	.+252    	; 0x1f36 <STP_voidSend+0x496>
	{
		_delay_ms(__us / 1000.0);
    1e3a:	fe 01       	movw	r30, r28
    1e3c:	eb 5b       	subi	r30, 0xBB	; 187
    1e3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e40:	60 81       	ld	r22, Z
    1e42:	71 81       	ldd	r23, Z+1	; 0x01
    1e44:	82 81       	ldd	r24, Z+2	; 0x02
    1e46:	93 81       	ldd	r25, Z+3	; 0x03
    1e48:	20 e0       	ldi	r18, 0x00	; 0
    1e4a:	30 e0       	ldi	r19, 0x00	; 0
    1e4c:	4a e7       	ldi	r20, 0x7A	; 122
    1e4e:	54 e4       	ldi	r21, 0x44	; 68
    1e50:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1e54:	dc 01       	movw	r26, r24
    1e56:	cb 01       	movw	r24, r22
    1e58:	8c af       	std	Y+60, r24	; 0x3c
    1e5a:	9d af       	std	Y+61, r25	; 0x3d
    1e5c:	ae af       	std	Y+62, r26	; 0x3e
    1e5e:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e60:	6c ad       	ldd	r22, Y+60	; 0x3c
    1e62:	7d ad       	ldd	r23, Y+61	; 0x3d
    1e64:	8e ad       	ldd	r24, Y+62	; 0x3e
    1e66:	9f ad       	ldd	r25, Y+63	; 0x3f
    1e68:	20 e0       	ldi	r18, 0x00	; 0
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	4a ef       	ldi	r20, 0xFA	; 250
    1e6e:	54 e4       	ldi	r21, 0x44	; 68
    1e70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e74:	dc 01       	movw	r26, r24
    1e76:	cb 01       	movw	r24, r22
    1e78:	88 af       	std	Y+56, r24	; 0x38
    1e7a:	99 af       	std	Y+57, r25	; 0x39
    1e7c:	aa af       	std	Y+58, r26	; 0x3a
    1e7e:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    1e80:	68 ad       	ldd	r22, Y+56	; 0x38
    1e82:	79 ad       	ldd	r23, Y+57	; 0x39
    1e84:	8a ad       	ldd	r24, Y+58	; 0x3a
    1e86:	9b ad       	ldd	r25, Y+59	; 0x3b
    1e88:	20 e0       	ldi	r18, 0x00	; 0
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	40 e8       	ldi	r20, 0x80	; 128
    1e8e:	5f e3       	ldi	r21, 0x3F	; 63
    1e90:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e94:	88 23       	and	r24, r24
    1e96:	2c f4       	brge	.+10     	; 0x1ea2 <STP_voidSend+0x402>
		__ticks = 1;
    1e98:	81 e0       	ldi	r24, 0x01	; 1
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	9f ab       	std	Y+55, r25	; 0x37
    1e9e:	8e ab       	std	Y+54, r24	; 0x36
    1ea0:	3f c0       	rjmp	.+126    	; 0x1f20 <STP_voidSend+0x480>
	else if (__tmp > 65535)
    1ea2:	68 ad       	ldd	r22, Y+56	; 0x38
    1ea4:	79 ad       	ldd	r23, Y+57	; 0x39
    1ea6:	8a ad       	ldd	r24, Y+58	; 0x3a
    1ea8:	9b ad       	ldd	r25, Y+59	; 0x3b
    1eaa:	20 e0       	ldi	r18, 0x00	; 0
    1eac:	3f ef       	ldi	r19, 0xFF	; 255
    1eae:	4f e7       	ldi	r20, 0x7F	; 127
    1eb0:	57 e4       	ldi	r21, 0x47	; 71
    1eb2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1eb6:	18 16       	cp	r1, r24
    1eb8:	4c f5       	brge	.+82     	; 0x1f0c <STP_voidSend+0x46c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eba:	6c ad       	ldd	r22, Y+60	; 0x3c
    1ebc:	7d ad       	ldd	r23, Y+61	; 0x3d
    1ebe:	8e ad       	ldd	r24, Y+62	; 0x3e
    1ec0:	9f ad       	ldd	r25, Y+63	; 0x3f
    1ec2:	20 e0       	ldi	r18, 0x00	; 0
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	40 e2       	ldi	r20, 0x20	; 32
    1ec8:	51 e4       	ldi	r21, 0x41	; 65
    1eca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ece:	dc 01       	movw	r26, r24
    1ed0:	cb 01       	movw	r24, r22
    1ed2:	bc 01       	movw	r22, r24
    1ed4:	cd 01       	movw	r24, r26
    1ed6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eda:	dc 01       	movw	r26, r24
    1edc:	cb 01       	movw	r24, r22
    1ede:	9f ab       	std	Y+55, r25	; 0x37
    1ee0:	8e ab       	std	Y+54, r24	; 0x36
    1ee2:	0f c0       	rjmp	.+30     	; 0x1f02 <STP_voidSend+0x462>
    1ee4:	88 ec       	ldi	r24, 0xC8	; 200
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	9d ab       	std	Y+53, r25	; 0x35
    1eea:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1eec:	8c a9       	ldd	r24, Y+52	; 0x34
    1eee:	9d a9       	ldd	r25, Y+53	; 0x35
    1ef0:	01 97       	sbiw	r24, 0x01	; 1
    1ef2:	f1 f7       	brne	.-4      	; 0x1ef0 <STP_voidSend+0x450>
    1ef4:	9d ab       	std	Y+53, r25	; 0x35
    1ef6:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ef8:	8e a9       	ldd	r24, Y+54	; 0x36
    1efa:	9f a9       	ldd	r25, Y+55	; 0x37
    1efc:	01 97       	sbiw	r24, 0x01	; 1
    1efe:	9f ab       	std	Y+55, r25	; 0x37
    1f00:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f02:	8e a9       	ldd	r24, Y+54	; 0x36
    1f04:	9f a9       	ldd	r25, Y+55	; 0x37
    1f06:	00 97       	sbiw	r24, 0x00	; 0
    1f08:	69 f7       	brne	.-38     	; 0x1ee4 <STP_voidSend+0x444>
    1f0a:	2d c0       	rjmp	.+90     	; 0x1f66 <STP_voidSend+0x4c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f0c:	68 ad       	ldd	r22, Y+56	; 0x38
    1f0e:	79 ad       	ldd	r23, Y+57	; 0x39
    1f10:	8a ad       	ldd	r24, Y+58	; 0x3a
    1f12:	9b ad       	ldd	r25, Y+59	; 0x3b
    1f14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f18:	dc 01       	movw	r26, r24
    1f1a:	cb 01       	movw	r24, r22
    1f1c:	9f ab       	std	Y+55, r25	; 0x37
    1f1e:	8e ab       	std	Y+54, r24	; 0x36
    1f20:	8e a9       	ldd	r24, Y+54	; 0x36
    1f22:	9f a9       	ldd	r25, Y+55	; 0x37
    1f24:	9b ab       	std	Y+51, r25	; 0x33
    1f26:	8a ab       	std	Y+50, r24	; 0x32
    1f28:	8a a9       	ldd	r24, Y+50	; 0x32
    1f2a:	9b a9       	ldd	r25, Y+51	; 0x33
    1f2c:	01 97       	sbiw	r24, 0x01	; 1
    1f2e:	f1 f7       	brne	.-4      	; 0x1f2c <STP_voidSend+0x48c>
    1f30:	9b ab       	std	Y+51, r25	; 0x33
    1f32:	8a ab       	std	Y+50, r24	; 0x32
    1f34:	18 c0       	rjmp	.+48     	; 0x1f66 <STP_voidSend+0x4c6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f36:	fe 01       	movw	r30, r28
    1f38:	ef 5b       	subi	r30, 0xBF	; 191
    1f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3c:	60 81       	ld	r22, Z
    1f3e:	71 81       	ldd	r23, Z+1	; 0x01
    1f40:	82 81       	ldd	r24, Z+2	; 0x02
    1f42:	93 81       	ldd	r25, Z+3	; 0x03
    1f44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f48:	dc 01       	movw	r26, r24
    1f4a:	cb 01       	movw	r24, r22
    1f4c:	fe 01       	movw	r30, r28
    1f4e:	e0 5c       	subi	r30, 0xC0	; 192
    1f50:	ff 4f       	sbci	r31, 0xFF	; 255
    1f52:	80 83       	st	Z, r24
    1f54:	fe 01       	movw	r30, r28
    1f56:	e0 5c       	subi	r30, 0xC0	; 192
    1f58:	ff 4f       	sbci	r31, 0xFF	; 255
    1f5a:	80 81       	ld	r24, Z
    1f5c:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f5e:	89 a9       	ldd	r24, Y+49	; 0x31
    1f60:	8a 95       	dec	r24
    1f62:	f1 f7       	brne	.-4      	; 0x1f60 <STP_voidSend+0x4c0>
    1f64:	89 ab       	std	Y+49, r24	; 0x31
}

void STP_voidSend (u8 copy_u8DataSend)
{
	u8 Counter , Local_u8Data ;
	for (Counter = 8 ; Counter > 0 ; Counter -- )
    1f66:	de 01       	movw	r26, r28
    1f68:	ae 59       	subi	r26, 0x9E	; 158
    1f6a:	bf 4f       	sbci	r27, 0xFF	; 255
    1f6c:	fe 01       	movw	r30, r28
    1f6e:	ee 59       	subi	r30, 0x9E	; 158
    1f70:	ff 4f       	sbci	r31, 0xFF	; 255
    1f72:	80 81       	ld	r24, Z
    1f74:	81 50       	subi	r24, 0x01	; 1
    1f76:	8c 93       	st	X, r24
    1f78:	fe 01       	movw	r30, r28
    1f7a:	ee 59       	subi	r30, 0x9E	; 158
    1f7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7e:	80 81       	ld	r24, Z
    1f80:	88 23       	and	r24, r24
    1f82:	09 f0       	breq	.+2      	; 0x1f86 <STP_voidSend+0x4e6>
    1f84:	a4 cd       	rjmp	.-1208   	; 0x1ace <STP_voidSend+0x2e>
		GPIO_voidWritePin (DataClkPort , DataClkPin , HIGH);
		_delay_us(1);
		GPIO_voidWritePin (DataClkPort , DataClkPin , LOW);
		_delay_us(1);
	}
	GPIO_voidWritePin (StrPort , StrPin , HIGH);
    1f86:	80 91 6a 00 	lds	r24, 0x006A
    1f8a:	90 91 6b 00 	lds	r25, 0x006B
    1f8e:	69 2f       	mov	r22, r25
    1f90:	41 e0       	ldi	r20, 0x01	; 1
    1f92:	0e 94 32 07 	call	0xe64	; 0xe64 <GPIO_voidWritePin>
    1f96:	80 e0       	ldi	r24, 0x00	; 0
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	a0 e8       	ldi	r26, 0x80	; 128
    1f9c:	bf e3       	ldi	r27, 0x3F	; 63
    1f9e:	8d a7       	std	Y+45, r24	; 0x2d
    1fa0:	9e a7       	std	Y+46, r25	; 0x2e
    1fa2:	af a7       	std	Y+47, r26	; 0x2f
    1fa4:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1fa6:	6d a5       	ldd	r22, Y+45	; 0x2d
    1fa8:	7e a5       	ldd	r23, Y+46	; 0x2e
    1faa:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fac:	98 a9       	ldd	r25, Y+48	; 0x30
    1fae:	2b ea       	ldi	r18, 0xAB	; 171
    1fb0:	3a ea       	ldi	r19, 0xAA	; 170
    1fb2:	4a e2       	ldi	r20, 0x2A	; 42
    1fb4:	50 e4       	ldi	r21, 0x40	; 64
    1fb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fba:	dc 01       	movw	r26, r24
    1fbc:	cb 01       	movw	r24, r22
    1fbe:	89 a7       	std	Y+41, r24	; 0x29
    1fc0:	9a a7       	std	Y+42, r25	; 0x2a
    1fc2:	ab a7       	std	Y+43, r26	; 0x2b
    1fc4:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1fc6:	69 a5       	ldd	r22, Y+41	; 0x29
    1fc8:	7a a5       	ldd	r23, Y+42	; 0x2a
    1fca:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fcc:	9c a5       	ldd	r25, Y+44	; 0x2c
    1fce:	20 e0       	ldi	r18, 0x00	; 0
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	40 e8       	ldi	r20, 0x80	; 128
    1fd4:	5f e3       	ldi	r21, 0x3F	; 63
    1fd6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fda:	88 23       	and	r24, r24
    1fdc:	1c f4       	brge	.+6      	; 0x1fe4 <STP_voidSend+0x544>
		__ticks = 1;
    1fde:	81 e0       	ldi	r24, 0x01	; 1
    1fe0:	88 a7       	std	Y+40, r24	; 0x28
    1fe2:	91 c0       	rjmp	.+290    	; 0x2106 <STP_voidSend+0x666>
	else if (__tmp > 255)
    1fe4:	69 a5       	ldd	r22, Y+41	; 0x29
    1fe6:	7a a5       	ldd	r23, Y+42	; 0x2a
    1fe8:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fea:	9c a5       	ldd	r25, Y+44	; 0x2c
    1fec:	20 e0       	ldi	r18, 0x00	; 0
    1fee:	30 e0       	ldi	r19, 0x00	; 0
    1ff0:	4f e7       	ldi	r20, 0x7F	; 127
    1ff2:	53 e4       	ldi	r21, 0x43	; 67
    1ff4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ff8:	18 16       	cp	r1, r24
    1ffa:	0c f0       	brlt	.+2      	; 0x1ffe <STP_voidSend+0x55e>
    1ffc:	7b c0       	rjmp	.+246    	; 0x20f4 <STP_voidSend+0x654>
	{
		_delay_ms(__us / 1000.0);
    1ffe:	6d a5       	ldd	r22, Y+45	; 0x2d
    2000:	7e a5       	ldd	r23, Y+46	; 0x2e
    2002:	8f a5       	ldd	r24, Y+47	; 0x2f
    2004:	98 a9       	ldd	r25, Y+48	; 0x30
    2006:	20 e0       	ldi	r18, 0x00	; 0
    2008:	30 e0       	ldi	r19, 0x00	; 0
    200a:	4a e7       	ldi	r20, 0x7A	; 122
    200c:	54 e4       	ldi	r21, 0x44	; 68
    200e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2012:	dc 01       	movw	r26, r24
    2014:	cb 01       	movw	r24, r22
    2016:	8c a3       	std	Y+36, r24	; 0x24
    2018:	9d a3       	std	Y+37, r25	; 0x25
    201a:	ae a3       	std	Y+38, r26	; 0x26
    201c:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    201e:	6c a1       	ldd	r22, Y+36	; 0x24
    2020:	7d a1       	ldd	r23, Y+37	; 0x25
    2022:	8e a1       	ldd	r24, Y+38	; 0x26
    2024:	9f a1       	ldd	r25, Y+39	; 0x27
    2026:	20 e0       	ldi	r18, 0x00	; 0
    2028:	30 e0       	ldi	r19, 0x00	; 0
    202a:	4a ef       	ldi	r20, 0xFA	; 250
    202c:	54 e4       	ldi	r21, 0x44	; 68
    202e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2032:	dc 01       	movw	r26, r24
    2034:	cb 01       	movw	r24, r22
    2036:	88 a3       	std	Y+32, r24	; 0x20
    2038:	99 a3       	std	Y+33, r25	; 0x21
    203a:	aa a3       	std	Y+34, r26	; 0x22
    203c:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    203e:	68 a1       	ldd	r22, Y+32	; 0x20
    2040:	79 a1       	ldd	r23, Y+33	; 0x21
    2042:	8a a1       	ldd	r24, Y+34	; 0x22
    2044:	9b a1       	ldd	r25, Y+35	; 0x23
    2046:	20 e0       	ldi	r18, 0x00	; 0
    2048:	30 e0       	ldi	r19, 0x00	; 0
    204a:	40 e8       	ldi	r20, 0x80	; 128
    204c:	5f e3       	ldi	r21, 0x3F	; 63
    204e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2052:	88 23       	and	r24, r24
    2054:	2c f4       	brge	.+10     	; 0x2060 <STP_voidSend+0x5c0>
		__ticks = 1;
    2056:	81 e0       	ldi	r24, 0x01	; 1
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	9f 8f       	std	Y+31, r25	; 0x1f
    205c:	8e 8f       	std	Y+30, r24	; 0x1e
    205e:	3f c0       	rjmp	.+126    	; 0x20de <STP_voidSend+0x63e>
	else if (__tmp > 65535)
    2060:	68 a1       	ldd	r22, Y+32	; 0x20
    2062:	79 a1       	ldd	r23, Y+33	; 0x21
    2064:	8a a1       	ldd	r24, Y+34	; 0x22
    2066:	9b a1       	ldd	r25, Y+35	; 0x23
    2068:	20 e0       	ldi	r18, 0x00	; 0
    206a:	3f ef       	ldi	r19, 0xFF	; 255
    206c:	4f e7       	ldi	r20, 0x7F	; 127
    206e:	57 e4       	ldi	r21, 0x47	; 71
    2070:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2074:	18 16       	cp	r1, r24
    2076:	4c f5       	brge	.+82     	; 0x20ca <STP_voidSend+0x62a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2078:	6c a1       	ldd	r22, Y+36	; 0x24
    207a:	7d a1       	ldd	r23, Y+37	; 0x25
    207c:	8e a1       	ldd	r24, Y+38	; 0x26
    207e:	9f a1       	ldd	r25, Y+39	; 0x27
    2080:	20 e0       	ldi	r18, 0x00	; 0
    2082:	30 e0       	ldi	r19, 0x00	; 0
    2084:	40 e2       	ldi	r20, 0x20	; 32
    2086:	51 e4       	ldi	r21, 0x41	; 65
    2088:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    208c:	dc 01       	movw	r26, r24
    208e:	cb 01       	movw	r24, r22
    2090:	bc 01       	movw	r22, r24
    2092:	cd 01       	movw	r24, r26
    2094:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2098:	dc 01       	movw	r26, r24
    209a:	cb 01       	movw	r24, r22
    209c:	9f 8f       	std	Y+31, r25	; 0x1f
    209e:	8e 8f       	std	Y+30, r24	; 0x1e
    20a0:	0f c0       	rjmp	.+30     	; 0x20c0 <STP_voidSend+0x620>
    20a2:	88 ec       	ldi	r24, 0xC8	; 200
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	9d 8f       	std	Y+29, r25	; 0x1d
    20a8:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    20aa:	8c 8d       	ldd	r24, Y+28	; 0x1c
    20ac:	9d 8d       	ldd	r25, Y+29	; 0x1d
    20ae:	01 97       	sbiw	r24, 0x01	; 1
    20b0:	f1 f7       	brne	.-4      	; 0x20ae <STP_voidSend+0x60e>
    20b2:	9d 8f       	std	Y+29, r25	; 0x1d
    20b4:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20b6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    20b8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    20ba:	01 97       	sbiw	r24, 0x01	; 1
    20bc:	9f 8f       	std	Y+31, r25	; 0x1f
    20be:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20c0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    20c2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    20c4:	00 97       	sbiw	r24, 0x00	; 0
    20c6:	69 f7       	brne	.-38     	; 0x20a2 <STP_voidSend+0x602>
    20c8:	24 c0       	rjmp	.+72     	; 0x2112 <STP_voidSend+0x672>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20ca:	68 a1       	ldd	r22, Y+32	; 0x20
    20cc:	79 a1       	ldd	r23, Y+33	; 0x21
    20ce:	8a a1       	ldd	r24, Y+34	; 0x22
    20d0:	9b a1       	ldd	r25, Y+35	; 0x23
    20d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20d6:	dc 01       	movw	r26, r24
    20d8:	cb 01       	movw	r24, r22
    20da:	9f 8f       	std	Y+31, r25	; 0x1f
    20dc:	8e 8f       	std	Y+30, r24	; 0x1e
    20de:	8e 8d       	ldd	r24, Y+30	; 0x1e
    20e0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    20e2:	9b 8f       	std	Y+27, r25	; 0x1b
    20e4:	8a 8f       	std	Y+26, r24	; 0x1a
    20e6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    20e8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    20ea:	01 97       	sbiw	r24, 0x01	; 1
    20ec:	f1 f7       	brne	.-4      	; 0x20ea <STP_voidSend+0x64a>
    20ee:	9b 8f       	std	Y+27, r25	; 0x1b
    20f0:	8a 8f       	std	Y+26, r24	; 0x1a
    20f2:	0f c0       	rjmp	.+30     	; 0x2112 <STP_voidSend+0x672>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    20f4:	69 a5       	ldd	r22, Y+41	; 0x29
    20f6:	7a a5       	ldd	r23, Y+42	; 0x2a
    20f8:	8b a5       	ldd	r24, Y+43	; 0x2b
    20fa:	9c a5       	ldd	r25, Y+44	; 0x2c
    20fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2100:	dc 01       	movw	r26, r24
    2102:	cb 01       	movw	r24, r22
    2104:	88 a7       	std	Y+40, r24	; 0x28
    2106:	88 a5       	ldd	r24, Y+40	; 0x28
    2108:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    210a:	89 8d       	ldd	r24, Y+25	; 0x19
    210c:	8a 95       	dec	r24
    210e:	f1 f7       	brne	.-4      	; 0x210c <STP_voidSend+0x66c>
    2110:	89 8f       	std	Y+25, r24	; 0x19
		_delay_us(1);
		GPIO_voidWritePin (StrPort , StrPin , LOW);
    2112:	80 91 6a 00 	lds	r24, 0x006A
    2116:	90 91 6b 00 	lds	r25, 0x006B
    211a:	69 2f       	mov	r22, r25
    211c:	40 e0       	ldi	r20, 0x00	; 0
    211e:	0e 94 32 07 	call	0xe64	; 0xe64 <GPIO_voidWritePin>
    2122:	80 e0       	ldi	r24, 0x00	; 0
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	a0 e8       	ldi	r26, 0x80	; 128
    2128:	bf e3       	ldi	r27, 0x3F	; 63
    212a:	8d 8b       	std	Y+21, r24	; 0x15
    212c:	9e 8b       	std	Y+22, r25	; 0x16
    212e:	af 8b       	std	Y+23, r26	; 0x17
    2130:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2132:	6d 89       	ldd	r22, Y+21	; 0x15
    2134:	7e 89       	ldd	r23, Y+22	; 0x16
    2136:	8f 89       	ldd	r24, Y+23	; 0x17
    2138:	98 8d       	ldd	r25, Y+24	; 0x18
    213a:	2b ea       	ldi	r18, 0xAB	; 171
    213c:	3a ea       	ldi	r19, 0xAA	; 170
    213e:	4a e2       	ldi	r20, 0x2A	; 42
    2140:	50 e4       	ldi	r21, 0x40	; 64
    2142:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2146:	dc 01       	movw	r26, r24
    2148:	cb 01       	movw	r24, r22
    214a:	89 8b       	std	Y+17, r24	; 0x11
    214c:	9a 8b       	std	Y+18, r25	; 0x12
    214e:	ab 8b       	std	Y+19, r26	; 0x13
    2150:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2152:	69 89       	ldd	r22, Y+17	; 0x11
    2154:	7a 89       	ldd	r23, Y+18	; 0x12
    2156:	8b 89       	ldd	r24, Y+19	; 0x13
    2158:	9c 89       	ldd	r25, Y+20	; 0x14
    215a:	20 e0       	ldi	r18, 0x00	; 0
    215c:	30 e0       	ldi	r19, 0x00	; 0
    215e:	40 e8       	ldi	r20, 0x80	; 128
    2160:	5f e3       	ldi	r21, 0x3F	; 63
    2162:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2166:	88 23       	and	r24, r24
    2168:	1c f4       	brge	.+6      	; 0x2170 <STP_voidSend+0x6d0>
		__ticks = 1;
    216a:	81 e0       	ldi	r24, 0x01	; 1
    216c:	88 8b       	std	Y+16, r24	; 0x10
    216e:	91 c0       	rjmp	.+290    	; 0x2292 <STP_voidSend+0x7f2>
	else if (__tmp > 255)
    2170:	69 89       	ldd	r22, Y+17	; 0x11
    2172:	7a 89       	ldd	r23, Y+18	; 0x12
    2174:	8b 89       	ldd	r24, Y+19	; 0x13
    2176:	9c 89       	ldd	r25, Y+20	; 0x14
    2178:	20 e0       	ldi	r18, 0x00	; 0
    217a:	30 e0       	ldi	r19, 0x00	; 0
    217c:	4f e7       	ldi	r20, 0x7F	; 127
    217e:	53 e4       	ldi	r21, 0x43	; 67
    2180:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2184:	18 16       	cp	r1, r24
    2186:	0c f0       	brlt	.+2      	; 0x218a <STP_voidSend+0x6ea>
    2188:	7b c0       	rjmp	.+246    	; 0x2280 <STP_voidSend+0x7e0>
	{
		_delay_ms(__us / 1000.0);
    218a:	6d 89       	ldd	r22, Y+21	; 0x15
    218c:	7e 89       	ldd	r23, Y+22	; 0x16
    218e:	8f 89       	ldd	r24, Y+23	; 0x17
    2190:	98 8d       	ldd	r25, Y+24	; 0x18
    2192:	20 e0       	ldi	r18, 0x00	; 0
    2194:	30 e0       	ldi	r19, 0x00	; 0
    2196:	4a e7       	ldi	r20, 0x7A	; 122
    2198:	54 e4       	ldi	r21, 0x44	; 68
    219a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    219e:	dc 01       	movw	r26, r24
    21a0:	cb 01       	movw	r24, r22
    21a2:	8c 87       	std	Y+12, r24	; 0x0c
    21a4:	9d 87       	std	Y+13, r25	; 0x0d
    21a6:	ae 87       	std	Y+14, r26	; 0x0e
    21a8:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21aa:	6c 85       	ldd	r22, Y+12	; 0x0c
    21ac:	7d 85       	ldd	r23, Y+13	; 0x0d
    21ae:	8e 85       	ldd	r24, Y+14	; 0x0e
    21b0:	9f 85       	ldd	r25, Y+15	; 0x0f
    21b2:	20 e0       	ldi	r18, 0x00	; 0
    21b4:	30 e0       	ldi	r19, 0x00	; 0
    21b6:	4a ef       	ldi	r20, 0xFA	; 250
    21b8:	54 e4       	ldi	r21, 0x44	; 68
    21ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21be:	dc 01       	movw	r26, r24
    21c0:	cb 01       	movw	r24, r22
    21c2:	88 87       	std	Y+8, r24	; 0x08
    21c4:	99 87       	std	Y+9, r25	; 0x09
    21c6:	aa 87       	std	Y+10, r26	; 0x0a
    21c8:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    21ca:	68 85       	ldd	r22, Y+8	; 0x08
    21cc:	79 85       	ldd	r23, Y+9	; 0x09
    21ce:	8a 85       	ldd	r24, Y+10	; 0x0a
    21d0:	9b 85       	ldd	r25, Y+11	; 0x0b
    21d2:	20 e0       	ldi	r18, 0x00	; 0
    21d4:	30 e0       	ldi	r19, 0x00	; 0
    21d6:	40 e8       	ldi	r20, 0x80	; 128
    21d8:	5f e3       	ldi	r21, 0x3F	; 63
    21da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21de:	88 23       	and	r24, r24
    21e0:	2c f4       	brge	.+10     	; 0x21ec <STP_voidSend+0x74c>
		__ticks = 1;
    21e2:	81 e0       	ldi	r24, 0x01	; 1
    21e4:	90 e0       	ldi	r25, 0x00	; 0
    21e6:	9f 83       	std	Y+7, r25	; 0x07
    21e8:	8e 83       	std	Y+6, r24	; 0x06
    21ea:	3f c0       	rjmp	.+126    	; 0x226a <STP_voidSend+0x7ca>
	else if (__tmp > 65535)
    21ec:	68 85       	ldd	r22, Y+8	; 0x08
    21ee:	79 85       	ldd	r23, Y+9	; 0x09
    21f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    21f2:	9b 85       	ldd	r25, Y+11	; 0x0b
    21f4:	20 e0       	ldi	r18, 0x00	; 0
    21f6:	3f ef       	ldi	r19, 0xFF	; 255
    21f8:	4f e7       	ldi	r20, 0x7F	; 127
    21fa:	57 e4       	ldi	r21, 0x47	; 71
    21fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2200:	18 16       	cp	r1, r24
    2202:	4c f5       	brge	.+82     	; 0x2256 <STP_voidSend+0x7b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2204:	6c 85       	ldd	r22, Y+12	; 0x0c
    2206:	7d 85       	ldd	r23, Y+13	; 0x0d
    2208:	8e 85       	ldd	r24, Y+14	; 0x0e
    220a:	9f 85       	ldd	r25, Y+15	; 0x0f
    220c:	20 e0       	ldi	r18, 0x00	; 0
    220e:	30 e0       	ldi	r19, 0x00	; 0
    2210:	40 e2       	ldi	r20, 0x20	; 32
    2212:	51 e4       	ldi	r21, 0x41	; 65
    2214:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2218:	dc 01       	movw	r26, r24
    221a:	cb 01       	movw	r24, r22
    221c:	bc 01       	movw	r22, r24
    221e:	cd 01       	movw	r24, r26
    2220:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2224:	dc 01       	movw	r26, r24
    2226:	cb 01       	movw	r24, r22
    2228:	9f 83       	std	Y+7, r25	; 0x07
    222a:	8e 83       	std	Y+6, r24	; 0x06
    222c:	0f c0       	rjmp	.+30     	; 0x224c <STP_voidSend+0x7ac>
    222e:	88 ec       	ldi	r24, 0xC8	; 200
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	9d 83       	std	Y+5, r25	; 0x05
    2234:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2236:	8c 81       	ldd	r24, Y+4	; 0x04
    2238:	9d 81       	ldd	r25, Y+5	; 0x05
    223a:	01 97       	sbiw	r24, 0x01	; 1
    223c:	f1 f7       	brne	.-4      	; 0x223a <STP_voidSend+0x79a>
    223e:	9d 83       	std	Y+5, r25	; 0x05
    2240:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2242:	8e 81       	ldd	r24, Y+6	; 0x06
    2244:	9f 81       	ldd	r25, Y+7	; 0x07
    2246:	01 97       	sbiw	r24, 0x01	; 1
    2248:	9f 83       	std	Y+7, r25	; 0x07
    224a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    224c:	8e 81       	ldd	r24, Y+6	; 0x06
    224e:	9f 81       	ldd	r25, Y+7	; 0x07
    2250:	00 97       	sbiw	r24, 0x00	; 0
    2252:	69 f7       	brne	.-38     	; 0x222e <STP_voidSend+0x78e>
    2254:	24 c0       	rjmp	.+72     	; 0x229e <STP_voidSend+0x7fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2256:	68 85       	ldd	r22, Y+8	; 0x08
    2258:	79 85       	ldd	r23, Y+9	; 0x09
    225a:	8a 85       	ldd	r24, Y+10	; 0x0a
    225c:	9b 85       	ldd	r25, Y+11	; 0x0b
    225e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2262:	dc 01       	movw	r26, r24
    2264:	cb 01       	movw	r24, r22
    2266:	9f 83       	std	Y+7, r25	; 0x07
    2268:	8e 83       	std	Y+6, r24	; 0x06
    226a:	8e 81       	ldd	r24, Y+6	; 0x06
    226c:	9f 81       	ldd	r25, Y+7	; 0x07
    226e:	9b 83       	std	Y+3, r25	; 0x03
    2270:	8a 83       	std	Y+2, r24	; 0x02
    2272:	8a 81       	ldd	r24, Y+2	; 0x02
    2274:	9b 81       	ldd	r25, Y+3	; 0x03
    2276:	01 97       	sbiw	r24, 0x01	; 1
    2278:	f1 f7       	brne	.-4      	; 0x2276 <STP_voidSend+0x7d6>
    227a:	9b 83       	std	Y+3, r25	; 0x03
    227c:	8a 83       	std	Y+2, r24	; 0x02
    227e:	0f c0       	rjmp	.+30     	; 0x229e <STP_voidSend+0x7fe>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2280:	69 89       	ldd	r22, Y+17	; 0x11
    2282:	7a 89       	ldd	r23, Y+18	; 0x12
    2284:	8b 89       	ldd	r24, Y+19	; 0x13
    2286:	9c 89       	ldd	r25, Y+20	; 0x14
    2288:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    228c:	dc 01       	movw	r26, r24
    228e:	cb 01       	movw	r24, r22
    2290:	88 8b       	std	Y+16, r24	; 0x10
    2292:	88 89       	ldd	r24, Y+16	; 0x10
    2294:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2296:	89 81       	ldd	r24, Y+1	; 0x01
    2298:	8a 95       	dec	r24
    229a:	f1 f7       	brne	.-4      	; 0x2298 <STP_voidSend+0x7f8>
    229c:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(1);
	
}
    229e:	cd 59       	subi	r28, 0x9D	; 157
    22a0:	df 4f       	sbci	r29, 0xFF	; 255
    22a2:	0f b6       	in	r0, 0x3f	; 63
    22a4:	f8 94       	cli
    22a6:	de bf       	out	0x3e, r29	; 62
    22a8:	0f be       	out	0x3f, r0	; 63
    22aa:	cd bf       	out	0x3d, r28	; 61
    22ac:	cf 91       	pop	r28
    22ae:	df 91       	pop	r29
    22b0:	1f 91       	pop	r17
    22b2:	0f 91       	pop	r16
    22b4:	08 95       	ret

000022b6 <main>:


#define HB1 0
#define HB2 1
int main (void)
{
    22b6:	0f 93       	push	r16
    22b8:	1f 93       	push	r17
    22ba:	df 93       	push	r29
    22bc:	cf 93       	push	r28
    22be:	cd b7       	in	r28, 0x3d	; 61
    22c0:	de b7       	in	r29, 0x3e	; 62
    22c2:	c9 54       	subi	r28, 0x49	; 73
    22c4:	d0 40       	sbci	r29, 0x00	; 0
    22c6:	0f b6       	in	r0, 0x3f	; 63
    22c8:	f8 94       	cli
    22ca:	de bf       	out	0x3e, r29	; 62
    22cc:	0f be       	out	0x3f, r0	; 63
    22ce:	cd bf       	out	0x3d, r28	; 61
	I2C_voidInit(50000);
    22d0:	60 e5       	ldi	r22, 0x50	; 80
    22d2:	73 ec       	ldi	r23, 0xC3	; 195
    22d4:	80 e0       	ldi	r24, 0x00	; 0
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <I2C_voidInit>
	I2C_voidSetAddress(0xCC);
    22dc:	8c ec       	ldi	r24, 0xCC	; 204
    22de:	0e 94 20 0c 	call	0x1840	; 0x1840 <I2C_voidSetAddress>
	GPIO_voidSetLowNippleDDR(GPIOA,OUTPUT);
    22e2:	80 e0       	ldi	r24, 0x00	; 0
    22e4:	61 e0       	ldi	r22, 0x01	; 1
    22e6:	0e 94 db 09 	call	0x13b6	; 0x13b6 <GPIO_voidSetLowNippleDDR>
	u8 Status ;
	while (1)
	{
		Status = I2C_u8SlaveRead();
    22ea:	0e 94 2e 0c 	call	0x185c	; 0x185c <I2C_u8SlaveRead>
    22ee:	fe 01       	movw	r30, r28
    22f0:	e9 5b       	subi	r30, 0xB9	; 185
    22f2:	ff 4f       	sbci	r31, 0xFF	; 255
    22f4:	80 83       	st	Z, r24
		switch(Status)
    22f6:	fe 01       	movw	r30, r28
    22f8:	e9 5b       	subi	r30, 0xB9	; 185
    22fa:	ff 4f       	sbci	r31, 0xFF	; 255
    22fc:	80 81       	ld	r24, Z
    22fe:	28 2f       	mov	r18, r24
    2300:	30 e0       	ldi	r19, 0x00	; 0
    2302:	2a 96       	adiw	r28, 0x0a	; 10
    2304:	3f af       	std	Y+63, r19	; 0x3f
    2306:	2e af       	std	Y+62, r18	; 0x3e
    2308:	2a 97       	sbiw	r28, 0x0a	; 10
    230a:	2a 96       	adiw	r28, 0x0a	; 10
    230c:	8e ad       	ldd	r24, Y+62	; 0x3e
    230e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2310:	2a 97       	sbiw	r28, 0x0a	; 10
    2312:	82 30       	cpi	r24, 0x02	; 2
    2314:	91 05       	cpc	r25, r1
    2316:	09 f4       	brne	.+2      	; 0x231a <main+0x64>
    2318:	bc c0       	rjmp	.+376    	; 0x2492 <main+0x1dc>
    231a:	2a 96       	adiw	r28, 0x0a	; 10
    231c:	ee ad       	ldd	r30, Y+62	; 0x3e
    231e:	ff ad       	ldd	r31, Y+63	; 0x3f
    2320:	2a 97       	sbiw	r28, 0x0a	; 10
    2322:	e3 30       	cpi	r30, 0x03	; 3
    2324:	f1 05       	cpc	r31, r1
    2326:	8c f4       	brge	.+34     	; 0x234a <main+0x94>
    2328:	2a 96       	adiw	r28, 0x0a	; 10
    232a:	2e ad       	ldd	r18, Y+62	; 0x3e
    232c:	3f ad       	ldd	r19, Y+63	; 0x3f
    232e:	2a 97       	sbiw	r28, 0x0a	; 10
    2330:	21 15       	cp	r18, r1
    2332:	31 05       	cpc	r19, r1
    2334:	09 f4       	brne	.+2      	; 0x2338 <main+0x82>
    2336:	af c1       	rjmp	.+862    	; 0x2696 <main+0x3e0>
    2338:	2a 96       	adiw	r28, 0x0a	; 10
    233a:	8e ad       	ldd	r24, Y+62	; 0x3e
    233c:	9f ad       	ldd	r25, Y+63	; 0x3f
    233e:	2a 97       	sbiw	r28, 0x0a	; 10
    2340:	81 30       	cpi	r24, 0x01	; 1
    2342:	91 05       	cpc	r25, r1
    2344:	09 f4       	brne	.+2      	; 0x2348 <main+0x92>
    2346:	26 c1       	rjmp	.+588    	; 0x2594 <main+0x2de>
    2348:	a7 c2       	rjmp	.+1358   	; 0x2898 <main+0x5e2>
    234a:	2a 96       	adiw	r28, 0x0a	; 10
    234c:	ee ad       	ldd	r30, Y+62	; 0x3e
    234e:	ff ad       	ldd	r31, Y+63	; 0x3f
    2350:	2a 97       	sbiw	r28, 0x0a	; 10
    2352:	e3 30       	cpi	r30, 0x03	; 3
    2354:	f1 05       	cpc	r31, r1
    2356:	49 f0       	breq	.+18     	; 0x236a <main+0xb4>
    2358:	2a 96       	adiw	r28, 0x0a	; 10
    235a:	2e ad       	ldd	r18, Y+62	; 0x3e
    235c:	3f ad       	ldd	r19, Y+63	; 0x3f
    235e:	2a 97       	sbiw	r28, 0x0a	; 10
    2360:	28 30       	cpi	r18, 0x08	; 8
    2362:	31 05       	cpc	r19, r1
    2364:	09 f4       	brne	.+2      	; 0x2368 <main+0xb2>
    2366:	18 c2       	rjmp	.+1072   	; 0x2798 <main+0x4e2>
    2368:	97 c2       	rjmp	.+1326   	; 0x2898 <main+0x5e2>
		{
		case  3 :
			GPIO_voidWriteLowNipple(GPIOA,8);
    236a:	80 e0       	ldi	r24, 0x00	; 0
    236c:	68 e0       	ldi	r22, 0x08	; 8
    236e:	0e 94 12 0a 	call	0x1424	; 0x1424 <GPIO_voidWriteLowNipple>
			Hbridge_voidCW(GPIOB ,HB1 , HB2);
    2372:	81 e0       	ldi	r24, 0x01	; 1
    2374:	60 e0       	ldi	r22, 0x00	; 0
    2376:	41 e0       	ldi	r20, 0x01	; 1
    2378:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <Hbridge_voidCW>
    237c:	fe 01       	movw	r30, r28
    237e:	ed 5b       	subi	r30, 0xBD	; 189
    2380:	ff 4f       	sbci	r31, 0xFF	; 255
    2382:	80 e0       	ldi	r24, 0x00	; 0
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	a8 e4       	ldi	r26, 0x48	; 72
    2388:	b2 e4       	ldi	r27, 0x42	; 66
    238a:	80 83       	st	Z, r24
    238c:	91 83       	std	Z+1, r25	; 0x01
    238e:	a2 83       	std	Z+2, r26	; 0x02
    2390:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2392:	8e 01       	movw	r16, r28
    2394:	01 5c       	subi	r16, 0xC1	; 193
    2396:	1f 4f       	sbci	r17, 0xFF	; 255
    2398:	fe 01       	movw	r30, r28
    239a:	ed 5b       	subi	r30, 0xBD	; 189
    239c:	ff 4f       	sbci	r31, 0xFF	; 255
    239e:	60 81       	ld	r22, Z
    23a0:	71 81       	ldd	r23, Z+1	; 0x01
    23a2:	82 81       	ldd	r24, Z+2	; 0x02
    23a4:	93 81       	ldd	r25, Z+3	; 0x03
    23a6:	20 e0       	ldi	r18, 0x00	; 0
    23a8:	30 e0       	ldi	r19, 0x00	; 0
    23aa:	4a e7       	ldi	r20, 0x7A	; 122
    23ac:	53 e4       	ldi	r21, 0x43	; 67
    23ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23b2:	dc 01       	movw	r26, r24
    23b4:	cb 01       	movw	r24, r22
    23b6:	f8 01       	movw	r30, r16
    23b8:	80 83       	st	Z, r24
    23ba:	91 83       	std	Z+1, r25	; 0x01
    23bc:	a2 83       	std	Z+2, r26	; 0x02
    23be:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23c0:	fe 01       	movw	r30, r28
    23c2:	ff 96       	adiw	r30, 0x3f	; 63
    23c4:	60 81       	ld	r22, Z
    23c6:	71 81       	ldd	r23, Z+1	; 0x01
    23c8:	82 81       	ldd	r24, Z+2	; 0x02
    23ca:	93 81       	ldd	r25, Z+3	; 0x03
    23cc:	20 e0       	ldi	r18, 0x00	; 0
    23ce:	30 e0       	ldi	r19, 0x00	; 0
    23d0:	40 e8       	ldi	r20, 0x80	; 128
    23d2:	5f e3       	ldi	r21, 0x3F	; 63
    23d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23d8:	88 23       	and	r24, r24
    23da:	2c f4       	brge	.+10     	; 0x23e6 <main+0x130>
		__ticks = 1;
    23dc:	81 e0       	ldi	r24, 0x01	; 1
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	9e af       	std	Y+62, r25	; 0x3e
    23e2:	8d af       	std	Y+61, r24	; 0x3d
    23e4:	46 c0       	rjmp	.+140    	; 0x2472 <main+0x1bc>
	else if (__tmp > 65535)
    23e6:	fe 01       	movw	r30, r28
    23e8:	ff 96       	adiw	r30, 0x3f	; 63
    23ea:	60 81       	ld	r22, Z
    23ec:	71 81       	ldd	r23, Z+1	; 0x01
    23ee:	82 81       	ldd	r24, Z+2	; 0x02
    23f0:	93 81       	ldd	r25, Z+3	; 0x03
    23f2:	20 e0       	ldi	r18, 0x00	; 0
    23f4:	3f ef       	ldi	r19, 0xFF	; 255
    23f6:	4f e7       	ldi	r20, 0x7F	; 127
    23f8:	57 e4       	ldi	r21, 0x47	; 71
    23fa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23fe:	18 16       	cp	r1, r24
    2400:	64 f5       	brge	.+88     	; 0x245a <main+0x1a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2402:	fe 01       	movw	r30, r28
    2404:	ed 5b       	subi	r30, 0xBD	; 189
    2406:	ff 4f       	sbci	r31, 0xFF	; 255
    2408:	60 81       	ld	r22, Z
    240a:	71 81       	ldd	r23, Z+1	; 0x01
    240c:	82 81       	ldd	r24, Z+2	; 0x02
    240e:	93 81       	ldd	r25, Z+3	; 0x03
    2410:	20 e0       	ldi	r18, 0x00	; 0
    2412:	30 e0       	ldi	r19, 0x00	; 0
    2414:	40 e2       	ldi	r20, 0x20	; 32
    2416:	51 e4       	ldi	r21, 0x41	; 65
    2418:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    241c:	dc 01       	movw	r26, r24
    241e:	cb 01       	movw	r24, r22
    2420:	bc 01       	movw	r22, r24
    2422:	cd 01       	movw	r24, r26
    2424:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2428:	dc 01       	movw	r26, r24
    242a:	cb 01       	movw	r24, r22
    242c:	9e af       	std	Y+62, r25	; 0x3e
    242e:	8d af       	std	Y+61, r24	; 0x3d
    2430:	0f c0       	rjmp	.+30     	; 0x2450 <main+0x19a>
    2432:	89 e1       	ldi	r24, 0x19	; 25
    2434:	90 e0       	ldi	r25, 0x00	; 0
    2436:	9c af       	std	Y+60, r25	; 0x3c
    2438:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    243a:	8b ad       	ldd	r24, Y+59	; 0x3b
    243c:	9c ad       	ldd	r25, Y+60	; 0x3c
    243e:	01 97       	sbiw	r24, 0x01	; 1
    2440:	f1 f7       	brne	.-4      	; 0x243e <main+0x188>
    2442:	9c af       	std	Y+60, r25	; 0x3c
    2444:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2446:	8d ad       	ldd	r24, Y+61	; 0x3d
    2448:	9e ad       	ldd	r25, Y+62	; 0x3e
    244a:	01 97       	sbiw	r24, 0x01	; 1
    244c:	9e af       	std	Y+62, r25	; 0x3e
    244e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2450:	8d ad       	ldd	r24, Y+61	; 0x3d
    2452:	9e ad       	ldd	r25, Y+62	; 0x3e
    2454:	00 97       	sbiw	r24, 0x00	; 0
    2456:	69 f7       	brne	.-38     	; 0x2432 <main+0x17c>
    2458:	16 c0       	rjmp	.+44     	; 0x2486 <main+0x1d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    245a:	fe 01       	movw	r30, r28
    245c:	ff 96       	adiw	r30, 0x3f	; 63
    245e:	60 81       	ld	r22, Z
    2460:	71 81       	ldd	r23, Z+1	; 0x01
    2462:	82 81       	ldd	r24, Z+2	; 0x02
    2464:	93 81       	ldd	r25, Z+3	; 0x03
    2466:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    246a:	dc 01       	movw	r26, r24
    246c:	cb 01       	movw	r24, r22
    246e:	9e af       	std	Y+62, r25	; 0x3e
    2470:	8d af       	std	Y+61, r24	; 0x3d
    2472:	8d ad       	ldd	r24, Y+61	; 0x3d
    2474:	9e ad       	ldd	r25, Y+62	; 0x3e
    2476:	9a af       	std	Y+58, r25	; 0x3a
    2478:	89 af       	std	Y+57, r24	; 0x39
    247a:	89 ad       	ldd	r24, Y+57	; 0x39
    247c:	9a ad       	ldd	r25, Y+58	; 0x3a
    247e:	01 97       	sbiw	r24, 0x01	; 1
    2480:	f1 f7       	brne	.-4      	; 0x247e <main+0x1c8>
    2482:	9a af       	std	Y+58, r25	; 0x3a
    2484:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(50);
			Hbridge_voidSTOP(GPIOB ,HB1 , HB2);
    2486:	81 e0       	ldi	r24, 0x01	; 1
    2488:	60 e0       	ldi	r22, 0x00	; 0
    248a:	41 e0       	ldi	r20, 0x01	; 1
    248c:	0e 94 38 0b 	call	0x1670	; 0x1670 <Hbridge_voidSTOP>
    2490:	03 c2       	rjmp	.+1030   	; 0x2898 <main+0x5e2>
			break;
		case 2 :
			GPIO_voidWriteLowNipple(GPIOA,1);
    2492:	80 e0       	ldi	r24, 0x00	; 0
    2494:	61 e0       	ldi	r22, 0x01	; 1
    2496:	0e 94 12 0a 	call	0x1424	; 0x1424 <GPIO_voidWriteLowNipple>
			Hbridge_voidACW(GPIOB ,HB1 , HB2);
    249a:	81 e0       	ldi	r24, 0x01	; 1
    249c:	60 e0       	ldi	r22, 0x00	; 0
    249e:	41 e0       	ldi	r20, 0x01	; 1
    24a0:	0e 94 15 0b 	call	0x162a	; 0x162a <Hbridge_voidACW>
    24a4:	80 e0       	ldi	r24, 0x00	; 0
    24a6:	90 e0       	ldi	r25, 0x00	; 0
    24a8:	a8 e4       	ldi	r26, 0x48	; 72
    24aa:	b2 e4       	ldi	r27, 0x42	; 66
    24ac:	8d ab       	std	Y+53, r24	; 0x35
    24ae:	9e ab       	std	Y+54, r25	; 0x36
    24b0:	af ab       	std	Y+55, r26	; 0x37
    24b2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24b4:	6d a9       	ldd	r22, Y+53	; 0x35
    24b6:	7e a9       	ldd	r23, Y+54	; 0x36
    24b8:	8f a9       	ldd	r24, Y+55	; 0x37
    24ba:	98 ad       	ldd	r25, Y+56	; 0x38
    24bc:	20 e0       	ldi	r18, 0x00	; 0
    24be:	30 e0       	ldi	r19, 0x00	; 0
    24c0:	4a e7       	ldi	r20, 0x7A	; 122
    24c2:	53 e4       	ldi	r21, 0x43	; 67
    24c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24c8:	dc 01       	movw	r26, r24
    24ca:	cb 01       	movw	r24, r22
    24cc:	89 ab       	std	Y+49, r24	; 0x31
    24ce:	9a ab       	std	Y+50, r25	; 0x32
    24d0:	ab ab       	std	Y+51, r26	; 0x33
    24d2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    24d4:	69 a9       	ldd	r22, Y+49	; 0x31
    24d6:	7a a9       	ldd	r23, Y+50	; 0x32
    24d8:	8b a9       	ldd	r24, Y+51	; 0x33
    24da:	9c a9       	ldd	r25, Y+52	; 0x34
    24dc:	20 e0       	ldi	r18, 0x00	; 0
    24de:	30 e0       	ldi	r19, 0x00	; 0
    24e0:	40 e8       	ldi	r20, 0x80	; 128
    24e2:	5f e3       	ldi	r21, 0x3F	; 63
    24e4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24e8:	88 23       	and	r24, r24
    24ea:	2c f4       	brge	.+10     	; 0x24f6 <main+0x240>
		__ticks = 1;
    24ec:	81 e0       	ldi	r24, 0x01	; 1
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	98 ab       	std	Y+48, r25	; 0x30
    24f2:	8f a7       	std	Y+47, r24	; 0x2f
    24f4:	3f c0       	rjmp	.+126    	; 0x2574 <main+0x2be>
	else if (__tmp > 65535)
    24f6:	69 a9       	ldd	r22, Y+49	; 0x31
    24f8:	7a a9       	ldd	r23, Y+50	; 0x32
    24fa:	8b a9       	ldd	r24, Y+51	; 0x33
    24fc:	9c a9       	ldd	r25, Y+52	; 0x34
    24fe:	20 e0       	ldi	r18, 0x00	; 0
    2500:	3f ef       	ldi	r19, 0xFF	; 255
    2502:	4f e7       	ldi	r20, 0x7F	; 127
    2504:	57 e4       	ldi	r21, 0x47	; 71
    2506:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    250a:	18 16       	cp	r1, r24
    250c:	4c f5       	brge	.+82     	; 0x2560 <main+0x2aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    250e:	6d a9       	ldd	r22, Y+53	; 0x35
    2510:	7e a9       	ldd	r23, Y+54	; 0x36
    2512:	8f a9       	ldd	r24, Y+55	; 0x37
    2514:	98 ad       	ldd	r25, Y+56	; 0x38
    2516:	20 e0       	ldi	r18, 0x00	; 0
    2518:	30 e0       	ldi	r19, 0x00	; 0
    251a:	40 e2       	ldi	r20, 0x20	; 32
    251c:	51 e4       	ldi	r21, 0x41	; 65
    251e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2522:	dc 01       	movw	r26, r24
    2524:	cb 01       	movw	r24, r22
    2526:	bc 01       	movw	r22, r24
    2528:	cd 01       	movw	r24, r26
    252a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    252e:	dc 01       	movw	r26, r24
    2530:	cb 01       	movw	r24, r22
    2532:	98 ab       	std	Y+48, r25	; 0x30
    2534:	8f a7       	std	Y+47, r24	; 0x2f
    2536:	0f c0       	rjmp	.+30     	; 0x2556 <main+0x2a0>
    2538:	89 e1       	ldi	r24, 0x19	; 25
    253a:	90 e0       	ldi	r25, 0x00	; 0
    253c:	9e a7       	std	Y+46, r25	; 0x2e
    253e:	8d a7       	std	Y+45, r24	; 0x2d
    2540:	8d a5       	ldd	r24, Y+45	; 0x2d
    2542:	9e a5       	ldd	r25, Y+46	; 0x2e
    2544:	01 97       	sbiw	r24, 0x01	; 1
    2546:	f1 f7       	brne	.-4      	; 0x2544 <main+0x28e>
    2548:	9e a7       	std	Y+46, r25	; 0x2e
    254a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    254c:	8f a5       	ldd	r24, Y+47	; 0x2f
    254e:	98 a9       	ldd	r25, Y+48	; 0x30
    2550:	01 97       	sbiw	r24, 0x01	; 1
    2552:	98 ab       	std	Y+48, r25	; 0x30
    2554:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2556:	8f a5       	ldd	r24, Y+47	; 0x2f
    2558:	98 a9       	ldd	r25, Y+48	; 0x30
    255a:	00 97       	sbiw	r24, 0x00	; 0
    255c:	69 f7       	brne	.-38     	; 0x2538 <main+0x282>
    255e:	14 c0       	rjmp	.+40     	; 0x2588 <main+0x2d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2560:	69 a9       	ldd	r22, Y+49	; 0x31
    2562:	7a a9       	ldd	r23, Y+50	; 0x32
    2564:	8b a9       	ldd	r24, Y+51	; 0x33
    2566:	9c a9       	ldd	r25, Y+52	; 0x34
    2568:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    256c:	dc 01       	movw	r26, r24
    256e:	cb 01       	movw	r24, r22
    2570:	98 ab       	std	Y+48, r25	; 0x30
    2572:	8f a7       	std	Y+47, r24	; 0x2f
    2574:	8f a5       	ldd	r24, Y+47	; 0x2f
    2576:	98 a9       	ldd	r25, Y+48	; 0x30
    2578:	9c a7       	std	Y+44, r25	; 0x2c
    257a:	8b a7       	std	Y+43, r24	; 0x2b
    257c:	8b a5       	ldd	r24, Y+43	; 0x2b
    257e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2580:	01 97       	sbiw	r24, 0x01	; 1
    2582:	f1 f7       	brne	.-4      	; 0x2580 <main+0x2ca>
    2584:	9c a7       	std	Y+44, r25	; 0x2c
    2586:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(50);
			Hbridge_voidSTOP(GPIOB ,HB1 , HB2);
    2588:	81 e0       	ldi	r24, 0x01	; 1
    258a:	60 e0       	ldi	r22, 0x00	; 0
    258c:	41 e0       	ldi	r20, 0x01	; 1
    258e:	0e 94 38 0b 	call	0x1670	; 0x1670 <Hbridge_voidSTOP>
    2592:	82 c1       	rjmp	.+772    	; 0x2898 <main+0x5e2>
			break;
		case 1 :
			GPIO_voidWriteLowNipple(GPIOA,3);
    2594:	80 e0       	ldi	r24, 0x00	; 0
    2596:	63 e0       	ldi	r22, 0x03	; 3
    2598:	0e 94 12 0a 	call	0x1424	; 0x1424 <GPIO_voidWriteLowNipple>
			Hbridge_voidACW(GPIOB ,HB1 , HB2);
    259c:	81 e0       	ldi	r24, 0x01	; 1
    259e:	60 e0       	ldi	r22, 0x00	; 0
    25a0:	41 e0       	ldi	r20, 0x01	; 1
    25a2:	0e 94 15 0b 	call	0x162a	; 0x162a <Hbridge_voidACW>
    25a6:	80 e0       	ldi	r24, 0x00	; 0
    25a8:	90 e0       	ldi	r25, 0x00	; 0
    25aa:	a8 e4       	ldi	r26, 0x48	; 72
    25ac:	b2 e4       	ldi	r27, 0x42	; 66
    25ae:	8f a3       	std	Y+39, r24	; 0x27
    25b0:	98 a7       	std	Y+40, r25	; 0x28
    25b2:	a9 a7       	std	Y+41, r26	; 0x29
    25b4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25b6:	6f a1       	ldd	r22, Y+39	; 0x27
    25b8:	78 a5       	ldd	r23, Y+40	; 0x28
    25ba:	89 a5       	ldd	r24, Y+41	; 0x29
    25bc:	9a a5       	ldd	r25, Y+42	; 0x2a
    25be:	20 e0       	ldi	r18, 0x00	; 0
    25c0:	30 e0       	ldi	r19, 0x00	; 0
    25c2:	4a e7       	ldi	r20, 0x7A	; 122
    25c4:	53 e4       	ldi	r21, 0x43	; 67
    25c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ca:	dc 01       	movw	r26, r24
    25cc:	cb 01       	movw	r24, r22
    25ce:	8b a3       	std	Y+35, r24	; 0x23
    25d0:	9c a3       	std	Y+36, r25	; 0x24
    25d2:	ad a3       	std	Y+37, r26	; 0x25
    25d4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    25d6:	6b a1       	ldd	r22, Y+35	; 0x23
    25d8:	7c a1       	ldd	r23, Y+36	; 0x24
    25da:	8d a1       	ldd	r24, Y+37	; 0x25
    25dc:	9e a1       	ldd	r25, Y+38	; 0x26
    25de:	20 e0       	ldi	r18, 0x00	; 0
    25e0:	30 e0       	ldi	r19, 0x00	; 0
    25e2:	40 e8       	ldi	r20, 0x80	; 128
    25e4:	5f e3       	ldi	r21, 0x3F	; 63
    25e6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25ea:	88 23       	and	r24, r24
    25ec:	2c f4       	brge	.+10     	; 0x25f8 <main+0x342>
		__ticks = 1;
    25ee:	81 e0       	ldi	r24, 0x01	; 1
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	9a a3       	std	Y+34, r25	; 0x22
    25f4:	89 a3       	std	Y+33, r24	; 0x21
    25f6:	3f c0       	rjmp	.+126    	; 0x2676 <main+0x3c0>
	else if (__tmp > 65535)
    25f8:	6b a1       	ldd	r22, Y+35	; 0x23
    25fa:	7c a1       	ldd	r23, Y+36	; 0x24
    25fc:	8d a1       	ldd	r24, Y+37	; 0x25
    25fe:	9e a1       	ldd	r25, Y+38	; 0x26
    2600:	20 e0       	ldi	r18, 0x00	; 0
    2602:	3f ef       	ldi	r19, 0xFF	; 255
    2604:	4f e7       	ldi	r20, 0x7F	; 127
    2606:	57 e4       	ldi	r21, 0x47	; 71
    2608:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    260c:	18 16       	cp	r1, r24
    260e:	4c f5       	brge	.+82     	; 0x2662 <main+0x3ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2610:	6f a1       	ldd	r22, Y+39	; 0x27
    2612:	78 a5       	ldd	r23, Y+40	; 0x28
    2614:	89 a5       	ldd	r24, Y+41	; 0x29
    2616:	9a a5       	ldd	r25, Y+42	; 0x2a
    2618:	20 e0       	ldi	r18, 0x00	; 0
    261a:	30 e0       	ldi	r19, 0x00	; 0
    261c:	40 e2       	ldi	r20, 0x20	; 32
    261e:	51 e4       	ldi	r21, 0x41	; 65
    2620:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2624:	dc 01       	movw	r26, r24
    2626:	cb 01       	movw	r24, r22
    2628:	bc 01       	movw	r22, r24
    262a:	cd 01       	movw	r24, r26
    262c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2630:	dc 01       	movw	r26, r24
    2632:	cb 01       	movw	r24, r22
    2634:	9a a3       	std	Y+34, r25	; 0x22
    2636:	89 a3       	std	Y+33, r24	; 0x21
    2638:	0f c0       	rjmp	.+30     	; 0x2658 <main+0x3a2>
    263a:	89 e1       	ldi	r24, 0x19	; 25
    263c:	90 e0       	ldi	r25, 0x00	; 0
    263e:	98 a3       	std	Y+32, r25	; 0x20
    2640:	8f 8f       	std	Y+31, r24	; 0x1f
    2642:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2644:	98 a1       	ldd	r25, Y+32	; 0x20
    2646:	01 97       	sbiw	r24, 0x01	; 1
    2648:	f1 f7       	brne	.-4      	; 0x2646 <main+0x390>
    264a:	98 a3       	std	Y+32, r25	; 0x20
    264c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    264e:	89 a1       	ldd	r24, Y+33	; 0x21
    2650:	9a a1       	ldd	r25, Y+34	; 0x22
    2652:	01 97       	sbiw	r24, 0x01	; 1
    2654:	9a a3       	std	Y+34, r25	; 0x22
    2656:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2658:	89 a1       	ldd	r24, Y+33	; 0x21
    265a:	9a a1       	ldd	r25, Y+34	; 0x22
    265c:	00 97       	sbiw	r24, 0x00	; 0
    265e:	69 f7       	brne	.-38     	; 0x263a <main+0x384>
    2660:	14 c0       	rjmp	.+40     	; 0x268a <main+0x3d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2662:	6b a1       	ldd	r22, Y+35	; 0x23
    2664:	7c a1       	ldd	r23, Y+36	; 0x24
    2666:	8d a1       	ldd	r24, Y+37	; 0x25
    2668:	9e a1       	ldd	r25, Y+38	; 0x26
    266a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    266e:	dc 01       	movw	r26, r24
    2670:	cb 01       	movw	r24, r22
    2672:	9a a3       	std	Y+34, r25	; 0x22
    2674:	89 a3       	std	Y+33, r24	; 0x21
    2676:	89 a1       	ldd	r24, Y+33	; 0x21
    2678:	9a a1       	ldd	r25, Y+34	; 0x22
    267a:	9e 8f       	std	Y+30, r25	; 0x1e
    267c:	8d 8f       	std	Y+29, r24	; 0x1d
    267e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2680:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2682:	01 97       	sbiw	r24, 0x01	; 1
    2684:	f1 f7       	brne	.-4      	; 0x2682 <main+0x3cc>
    2686:	9e 8f       	std	Y+30, r25	; 0x1e
    2688:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(50);
			Hbridge_voidSTOP(GPIOB ,HB1 , HB2);
    268a:	81 e0       	ldi	r24, 0x01	; 1
    268c:	60 e0       	ldi	r22, 0x00	; 0
    268e:	41 e0       	ldi	r20, 0x01	; 1
    2690:	0e 94 38 0b 	call	0x1670	; 0x1670 <Hbridge_voidSTOP>
    2694:	01 c1       	rjmp	.+514    	; 0x2898 <main+0x5e2>
			break;
		case 0:
			GPIO_voidWriteLowNipple(GPIOA,7);
    2696:	80 e0       	ldi	r24, 0x00	; 0
    2698:	67 e0       	ldi	r22, 0x07	; 7
    269a:	0e 94 12 0a 	call	0x1424	; 0x1424 <GPIO_voidWriteLowNipple>
			Hbridge_voidACW(GPIOB ,HB1 , HB2);
    269e:	81 e0       	ldi	r24, 0x01	; 1
    26a0:	60 e0       	ldi	r22, 0x00	; 0
    26a2:	41 e0       	ldi	r20, 0x01	; 1
    26a4:	0e 94 15 0b 	call	0x162a	; 0x162a <Hbridge_voidACW>
    26a8:	80 e0       	ldi	r24, 0x00	; 0
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	a8 e4       	ldi	r26, 0x48	; 72
    26ae:	b2 e4       	ldi	r27, 0x42	; 66
    26b0:	89 8f       	std	Y+25, r24	; 0x19
    26b2:	9a 8f       	std	Y+26, r25	; 0x1a
    26b4:	ab 8f       	std	Y+27, r26	; 0x1b
    26b6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26b8:	69 8d       	ldd	r22, Y+25	; 0x19
    26ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26c0:	20 e0       	ldi	r18, 0x00	; 0
    26c2:	30 e0       	ldi	r19, 0x00	; 0
    26c4:	4a e7       	ldi	r20, 0x7A	; 122
    26c6:	53 e4       	ldi	r21, 0x43	; 67
    26c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26cc:	dc 01       	movw	r26, r24
    26ce:	cb 01       	movw	r24, r22
    26d0:	8d 8b       	std	Y+21, r24	; 0x15
    26d2:	9e 8b       	std	Y+22, r25	; 0x16
    26d4:	af 8b       	std	Y+23, r26	; 0x17
    26d6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    26d8:	6d 89       	ldd	r22, Y+21	; 0x15
    26da:	7e 89       	ldd	r23, Y+22	; 0x16
    26dc:	8f 89       	ldd	r24, Y+23	; 0x17
    26de:	98 8d       	ldd	r25, Y+24	; 0x18
    26e0:	20 e0       	ldi	r18, 0x00	; 0
    26e2:	30 e0       	ldi	r19, 0x00	; 0
    26e4:	40 e8       	ldi	r20, 0x80	; 128
    26e6:	5f e3       	ldi	r21, 0x3F	; 63
    26e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26ec:	88 23       	and	r24, r24
    26ee:	2c f4       	brge	.+10     	; 0x26fa <main+0x444>
		__ticks = 1;
    26f0:	81 e0       	ldi	r24, 0x01	; 1
    26f2:	90 e0       	ldi	r25, 0x00	; 0
    26f4:	9c 8b       	std	Y+20, r25	; 0x14
    26f6:	8b 8b       	std	Y+19, r24	; 0x13
    26f8:	3f c0       	rjmp	.+126    	; 0x2778 <main+0x4c2>
	else if (__tmp > 65535)
    26fa:	6d 89       	ldd	r22, Y+21	; 0x15
    26fc:	7e 89       	ldd	r23, Y+22	; 0x16
    26fe:	8f 89       	ldd	r24, Y+23	; 0x17
    2700:	98 8d       	ldd	r25, Y+24	; 0x18
    2702:	20 e0       	ldi	r18, 0x00	; 0
    2704:	3f ef       	ldi	r19, 0xFF	; 255
    2706:	4f e7       	ldi	r20, 0x7F	; 127
    2708:	57 e4       	ldi	r21, 0x47	; 71
    270a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    270e:	18 16       	cp	r1, r24
    2710:	4c f5       	brge	.+82     	; 0x2764 <main+0x4ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2712:	69 8d       	ldd	r22, Y+25	; 0x19
    2714:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2716:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2718:	9c 8d       	ldd	r25, Y+28	; 0x1c
    271a:	20 e0       	ldi	r18, 0x00	; 0
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	40 e2       	ldi	r20, 0x20	; 32
    2720:	51 e4       	ldi	r21, 0x41	; 65
    2722:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2726:	dc 01       	movw	r26, r24
    2728:	cb 01       	movw	r24, r22
    272a:	bc 01       	movw	r22, r24
    272c:	cd 01       	movw	r24, r26
    272e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2732:	dc 01       	movw	r26, r24
    2734:	cb 01       	movw	r24, r22
    2736:	9c 8b       	std	Y+20, r25	; 0x14
    2738:	8b 8b       	std	Y+19, r24	; 0x13
    273a:	0f c0       	rjmp	.+30     	; 0x275a <main+0x4a4>
    273c:	89 e1       	ldi	r24, 0x19	; 25
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	9a 8b       	std	Y+18, r25	; 0x12
    2742:	89 8b       	std	Y+17, r24	; 0x11
    2744:	89 89       	ldd	r24, Y+17	; 0x11
    2746:	9a 89       	ldd	r25, Y+18	; 0x12
    2748:	01 97       	sbiw	r24, 0x01	; 1
    274a:	f1 f7       	brne	.-4      	; 0x2748 <main+0x492>
    274c:	9a 8b       	std	Y+18, r25	; 0x12
    274e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2750:	8b 89       	ldd	r24, Y+19	; 0x13
    2752:	9c 89       	ldd	r25, Y+20	; 0x14
    2754:	01 97       	sbiw	r24, 0x01	; 1
    2756:	9c 8b       	std	Y+20, r25	; 0x14
    2758:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    275a:	8b 89       	ldd	r24, Y+19	; 0x13
    275c:	9c 89       	ldd	r25, Y+20	; 0x14
    275e:	00 97       	sbiw	r24, 0x00	; 0
    2760:	69 f7       	brne	.-38     	; 0x273c <main+0x486>
    2762:	14 c0       	rjmp	.+40     	; 0x278c <main+0x4d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2764:	6d 89       	ldd	r22, Y+21	; 0x15
    2766:	7e 89       	ldd	r23, Y+22	; 0x16
    2768:	8f 89       	ldd	r24, Y+23	; 0x17
    276a:	98 8d       	ldd	r25, Y+24	; 0x18
    276c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2770:	dc 01       	movw	r26, r24
    2772:	cb 01       	movw	r24, r22
    2774:	9c 8b       	std	Y+20, r25	; 0x14
    2776:	8b 8b       	std	Y+19, r24	; 0x13
    2778:	8b 89       	ldd	r24, Y+19	; 0x13
    277a:	9c 89       	ldd	r25, Y+20	; 0x14
    277c:	98 8b       	std	Y+16, r25	; 0x10
    277e:	8f 87       	std	Y+15, r24	; 0x0f
    2780:	8f 85       	ldd	r24, Y+15	; 0x0f
    2782:	98 89       	ldd	r25, Y+16	; 0x10
    2784:	01 97       	sbiw	r24, 0x01	; 1
    2786:	f1 f7       	brne	.-4      	; 0x2784 <main+0x4ce>
    2788:	98 8b       	std	Y+16, r25	; 0x10
    278a:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(50);
			Hbridge_voidSTOP(GPIOB ,HB1 , HB2);
    278c:	81 e0       	ldi	r24, 0x01	; 1
    278e:	60 e0       	ldi	r22, 0x00	; 0
    2790:	41 e0       	ldi	r20, 0x01	; 1
    2792:	0e 94 38 0b 	call	0x1670	; 0x1670 <Hbridge_voidSTOP>
    2796:	80 c0       	rjmp	.+256    	; 0x2898 <main+0x5e2>
			break;
		case 8 :
			GPIO_voidWriteLowNipple(GPIOA,8);
    2798:	80 e0       	ldi	r24, 0x00	; 0
    279a:	68 e0       	ldi	r22, 0x08	; 8
    279c:	0e 94 12 0a 	call	0x1424	; 0x1424 <GPIO_voidWriteLowNipple>
			Hbridge_voidACW(GPIOB ,HB1 , HB2);
    27a0:	81 e0       	ldi	r24, 0x01	; 1
    27a2:	60 e0       	ldi	r22, 0x00	; 0
    27a4:	41 e0       	ldi	r20, 0x01	; 1
    27a6:	0e 94 15 0b 	call	0x162a	; 0x162a <Hbridge_voidACW>
    27aa:	80 e0       	ldi	r24, 0x00	; 0
    27ac:	90 e0       	ldi	r25, 0x00	; 0
    27ae:	a8 e4       	ldi	r26, 0x48	; 72
    27b0:	b2 e4       	ldi	r27, 0x42	; 66
    27b2:	8b 87       	std	Y+11, r24	; 0x0b
    27b4:	9c 87       	std	Y+12, r25	; 0x0c
    27b6:	ad 87       	std	Y+13, r26	; 0x0d
    27b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    27bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    27be:	8d 85       	ldd	r24, Y+13	; 0x0d
    27c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    27c2:	20 e0       	ldi	r18, 0x00	; 0
    27c4:	30 e0       	ldi	r19, 0x00	; 0
    27c6:	4a e7       	ldi	r20, 0x7A	; 122
    27c8:	53 e4       	ldi	r21, 0x43	; 67
    27ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ce:	dc 01       	movw	r26, r24
    27d0:	cb 01       	movw	r24, r22
    27d2:	8f 83       	std	Y+7, r24	; 0x07
    27d4:	98 87       	std	Y+8, r25	; 0x08
    27d6:	a9 87       	std	Y+9, r26	; 0x09
    27d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27da:	6f 81       	ldd	r22, Y+7	; 0x07
    27dc:	78 85       	ldd	r23, Y+8	; 0x08
    27de:	89 85       	ldd	r24, Y+9	; 0x09
    27e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    27e2:	20 e0       	ldi	r18, 0x00	; 0
    27e4:	30 e0       	ldi	r19, 0x00	; 0
    27e6:	40 e8       	ldi	r20, 0x80	; 128
    27e8:	5f e3       	ldi	r21, 0x3F	; 63
    27ea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27ee:	88 23       	and	r24, r24
    27f0:	2c f4       	brge	.+10     	; 0x27fc <main+0x546>
		__ticks = 1;
    27f2:	81 e0       	ldi	r24, 0x01	; 1
    27f4:	90 e0       	ldi	r25, 0x00	; 0
    27f6:	9e 83       	std	Y+6, r25	; 0x06
    27f8:	8d 83       	std	Y+5, r24	; 0x05
    27fa:	3f c0       	rjmp	.+126    	; 0x287a <main+0x5c4>
	else if (__tmp > 65535)
    27fc:	6f 81       	ldd	r22, Y+7	; 0x07
    27fe:	78 85       	ldd	r23, Y+8	; 0x08
    2800:	89 85       	ldd	r24, Y+9	; 0x09
    2802:	9a 85       	ldd	r25, Y+10	; 0x0a
    2804:	20 e0       	ldi	r18, 0x00	; 0
    2806:	3f ef       	ldi	r19, 0xFF	; 255
    2808:	4f e7       	ldi	r20, 0x7F	; 127
    280a:	57 e4       	ldi	r21, 0x47	; 71
    280c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2810:	18 16       	cp	r1, r24
    2812:	4c f5       	brge	.+82     	; 0x2866 <main+0x5b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2814:	6b 85       	ldd	r22, Y+11	; 0x0b
    2816:	7c 85       	ldd	r23, Y+12	; 0x0c
    2818:	8d 85       	ldd	r24, Y+13	; 0x0d
    281a:	9e 85       	ldd	r25, Y+14	; 0x0e
    281c:	20 e0       	ldi	r18, 0x00	; 0
    281e:	30 e0       	ldi	r19, 0x00	; 0
    2820:	40 e2       	ldi	r20, 0x20	; 32
    2822:	51 e4       	ldi	r21, 0x41	; 65
    2824:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2828:	dc 01       	movw	r26, r24
    282a:	cb 01       	movw	r24, r22
    282c:	bc 01       	movw	r22, r24
    282e:	cd 01       	movw	r24, r26
    2830:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2834:	dc 01       	movw	r26, r24
    2836:	cb 01       	movw	r24, r22
    2838:	9e 83       	std	Y+6, r25	; 0x06
    283a:	8d 83       	std	Y+5, r24	; 0x05
    283c:	0f c0       	rjmp	.+30     	; 0x285c <main+0x5a6>
    283e:	89 e1       	ldi	r24, 0x19	; 25
    2840:	90 e0       	ldi	r25, 0x00	; 0
    2842:	9c 83       	std	Y+4, r25	; 0x04
    2844:	8b 83       	std	Y+3, r24	; 0x03
    2846:	8b 81       	ldd	r24, Y+3	; 0x03
    2848:	9c 81       	ldd	r25, Y+4	; 0x04
    284a:	01 97       	sbiw	r24, 0x01	; 1
    284c:	f1 f7       	brne	.-4      	; 0x284a <main+0x594>
    284e:	9c 83       	std	Y+4, r25	; 0x04
    2850:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2852:	8d 81       	ldd	r24, Y+5	; 0x05
    2854:	9e 81       	ldd	r25, Y+6	; 0x06
    2856:	01 97       	sbiw	r24, 0x01	; 1
    2858:	9e 83       	std	Y+6, r25	; 0x06
    285a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    285c:	8d 81       	ldd	r24, Y+5	; 0x05
    285e:	9e 81       	ldd	r25, Y+6	; 0x06
    2860:	00 97       	sbiw	r24, 0x00	; 0
    2862:	69 f7       	brne	.-38     	; 0x283e <main+0x588>
    2864:	14 c0       	rjmp	.+40     	; 0x288e <main+0x5d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2866:	6f 81       	ldd	r22, Y+7	; 0x07
    2868:	78 85       	ldd	r23, Y+8	; 0x08
    286a:	89 85       	ldd	r24, Y+9	; 0x09
    286c:	9a 85       	ldd	r25, Y+10	; 0x0a
    286e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2872:	dc 01       	movw	r26, r24
    2874:	cb 01       	movw	r24, r22
    2876:	9e 83       	std	Y+6, r25	; 0x06
    2878:	8d 83       	std	Y+5, r24	; 0x05
    287a:	8d 81       	ldd	r24, Y+5	; 0x05
    287c:	9e 81       	ldd	r25, Y+6	; 0x06
    287e:	9a 83       	std	Y+2, r25	; 0x02
    2880:	89 83       	std	Y+1, r24	; 0x01
    2882:	89 81       	ldd	r24, Y+1	; 0x01
    2884:	9a 81       	ldd	r25, Y+2	; 0x02
    2886:	01 97       	sbiw	r24, 0x01	; 1
    2888:	f1 f7       	brne	.-4      	; 0x2886 <main+0x5d0>
    288a:	9a 83       	std	Y+2, r25	; 0x02
    288c:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(50);
			Hbridge_voidSTOP(GPIOB ,HB1 , HB2);
    288e:	81 e0       	ldi	r24, 0x01	; 1
    2890:	60 e0       	ldi	r22, 0x00	; 0
    2892:	41 e0       	ldi	r20, 0x01	; 1
    2894:	0e 94 38 0b 	call	0x1670	; 0x1670 <Hbridge_voidSTOP>
			break;



		}
		*((volatile u8*)0x23) = 0xFF;
    2898:	e3 e2       	ldi	r30, 0x23	; 35
    289a:	f0 e0       	ldi	r31, 0x00	; 0
    289c:	8f ef       	ldi	r24, 0xFF	; 255
    289e:	80 83       	st	Z, r24
    28a0:	24 cd       	rjmp	.-1464   	; 0x22ea <main+0x34>

000028a2 <__udivmodsi4>:
    28a2:	a1 e2       	ldi	r26, 0x21	; 33
    28a4:	1a 2e       	mov	r1, r26
    28a6:	aa 1b       	sub	r26, r26
    28a8:	bb 1b       	sub	r27, r27
    28aa:	fd 01       	movw	r30, r26
    28ac:	0d c0       	rjmp	.+26     	; 0x28c8 <__udivmodsi4_ep>

000028ae <__udivmodsi4_loop>:
    28ae:	aa 1f       	adc	r26, r26
    28b0:	bb 1f       	adc	r27, r27
    28b2:	ee 1f       	adc	r30, r30
    28b4:	ff 1f       	adc	r31, r31
    28b6:	a2 17       	cp	r26, r18
    28b8:	b3 07       	cpc	r27, r19
    28ba:	e4 07       	cpc	r30, r20
    28bc:	f5 07       	cpc	r31, r21
    28be:	20 f0       	brcs	.+8      	; 0x28c8 <__udivmodsi4_ep>
    28c0:	a2 1b       	sub	r26, r18
    28c2:	b3 0b       	sbc	r27, r19
    28c4:	e4 0b       	sbc	r30, r20
    28c6:	f5 0b       	sbc	r31, r21

000028c8 <__udivmodsi4_ep>:
    28c8:	66 1f       	adc	r22, r22
    28ca:	77 1f       	adc	r23, r23
    28cc:	88 1f       	adc	r24, r24
    28ce:	99 1f       	adc	r25, r25
    28d0:	1a 94       	dec	r1
    28d2:	69 f7       	brne	.-38     	; 0x28ae <__udivmodsi4_loop>
    28d4:	60 95       	com	r22
    28d6:	70 95       	com	r23
    28d8:	80 95       	com	r24
    28da:	90 95       	com	r25
    28dc:	9b 01       	movw	r18, r22
    28de:	ac 01       	movw	r20, r24
    28e0:	bd 01       	movw	r22, r26
    28e2:	cf 01       	movw	r24, r30
    28e4:	08 95       	ret

000028e6 <__prologue_saves__>:
    28e6:	2f 92       	push	r2
    28e8:	3f 92       	push	r3
    28ea:	4f 92       	push	r4
    28ec:	5f 92       	push	r5
    28ee:	6f 92       	push	r6
    28f0:	7f 92       	push	r7
    28f2:	8f 92       	push	r8
    28f4:	9f 92       	push	r9
    28f6:	af 92       	push	r10
    28f8:	bf 92       	push	r11
    28fa:	cf 92       	push	r12
    28fc:	df 92       	push	r13
    28fe:	ef 92       	push	r14
    2900:	ff 92       	push	r15
    2902:	0f 93       	push	r16
    2904:	1f 93       	push	r17
    2906:	cf 93       	push	r28
    2908:	df 93       	push	r29
    290a:	cd b7       	in	r28, 0x3d	; 61
    290c:	de b7       	in	r29, 0x3e	; 62
    290e:	ca 1b       	sub	r28, r26
    2910:	db 0b       	sbc	r29, r27
    2912:	0f b6       	in	r0, 0x3f	; 63
    2914:	f8 94       	cli
    2916:	de bf       	out	0x3e, r29	; 62
    2918:	0f be       	out	0x3f, r0	; 63
    291a:	cd bf       	out	0x3d, r28	; 61
    291c:	09 94       	ijmp

0000291e <__epilogue_restores__>:
    291e:	2a 88       	ldd	r2, Y+18	; 0x12
    2920:	39 88       	ldd	r3, Y+17	; 0x11
    2922:	48 88       	ldd	r4, Y+16	; 0x10
    2924:	5f 84       	ldd	r5, Y+15	; 0x0f
    2926:	6e 84       	ldd	r6, Y+14	; 0x0e
    2928:	7d 84       	ldd	r7, Y+13	; 0x0d
    292a:	8c 84       	ldd	r8, Y+12	; 0x0c
    292c:	9b 84       	ldd	r9, Y+11	; 0x0b
    292e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2930:	b9 84       	ldd	r11, Y+9	; 0x09
    2932:	c8 84       	ldd	r12, Y+8	; 0x08
    2934:	df 80       	ldd	r13, Y+7	; 0x07
    2936:	ee 80       	ldd	r14, Y+6	; 0x06
    2938:	fd 80       	ldd	r15, Y+5	; 0x05
    293a:	0c 81       	ldd	r16, Y+4	; 0x04
    293c:	1b 81       	ldd	r17, Y+3	; 0x03
    293e:	aa 81       	ldd	r26, Y+2	; 0x02
    2940:	b9 81       	ldd	r27, Y+1	; 0x01
    2942:	ce 0f       	add	r28, r30
    2944:	d1 1d       	adc	r29, r1
    2946:	0f b6       	in	r0, 0x3f	; 63
    2948:	f8 94       	cli
    294a:	de bf       	out	0x3e, r29	; 62
    294c:	0f be       	out	0x3f, r0	; 63
    294e:	cd bf       	out	0x3d, r28	; 61
    2950:	ed 01       	movw	r28, r26
    2952:	08 95       	ret

00002954 <_exit>:
    2954:	f8 94       	cli

00002956 <__stop_program>:
    2956:	ff cf       	rjmp	.-2      	; 0x2956 <__stop_program>
