
Air_condition.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000324e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000118  00800060  0000324e  000032e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800178  00800178  000033fa  2**0
                  ALLOC
  3 .stab         000024f0  00000000  00000000  000033fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001008  00000000  00000000  000058ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000068f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f5  00000000  00000000  00006a94  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002216  00000000  00000000  00006c89  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000012b8  00000000  00000000  00008e9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001136  00000000  00000000  0000a157  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000b290  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002d2  00000000  00000000  0000b450  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000095a  00000000  00000000  0000b722  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c07c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 d5 07 	jmp	0xfaa	; 0xfaa <__vector_1>
       8:	0c 94 02 08 	jmp	0x1004	; 0x1004 <__vector_2>
       c:	0c 94 2f 08 	jmp	0x105e	; 0x105e <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e4       	ldi	r30, 0x4E	; 78
      68:	f2 e3       	ldi	r31, 0x32	; 50
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 37       	cpi	r26, 0x7E	; 126
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <main>
      8a:	0c 94 25 19 	jmp	0x324a	; 0x324a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 4d 16 	jmp	0x2c9a	; 0x2c9a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af e6       	ldi	r26, 0x6F	; 111
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 69 16 	jmp	0x2cd2	; 0x2cd2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 59 16 	jmp	0x2cb2	; 0x2cb2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 23 05 	call	0xa46	; 0xa46 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 75 16 	jmp	0x2cea	; 0x2cea <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 59 16 	jmp	0x2cb2	; 0x2cb2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 23 05 	call	0xa46	; 0xa46 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 75 16 	jmp	0x2cea	; 0x2cea <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 4d 16 	jmp	0x2c9a	; 0x2c9a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8f e6       	ldi	r24, 0x6F	; 111
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 23 05 	call	0xa46	; 0xa46 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 69 16 	jmp	0x2cd2	; 0x2cd2 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 59 16 	jmp	0x2cb2	; 0x2cb2 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 70 06 	call	0xce0	; 0xce0 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 75 16 	jmp	0x2cea	; 0x2cea <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 59 16 	jmp	0x2cb2	; 0x2cb2 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 70 06 	call	0xce0	; 0xce0 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 75 16 	jmp	0x2cea	; 0x2cea <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 59 16 	jmp	0x2cb2	; 0x2cb2 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 70 06 	call	0xce0	; 0xce0 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 75 16 	jmp	0x2cea	; 0x2cea <__epilogue_restores__+0x18>

00000752 <__floatsisf>:
     752:	a8 e0       	ldi	r26, 0x08	; 8
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 56 16 	jmp	0x2cac	; 0x2cac <__prologue_saves__+0x12>
     75e:	9b 01       	movw	r18, r22
     760:	ac 01       	movw	r20, r24
     762:	83 e0       	ldi	r24, 0x03	; 3
     764:	89 83       	std	Y+1, r24	; 0x01
     766:	da 01       	movw	r26, r20
     768:	c9 01       	movw	r24, r18
     76a:	88 27       	eor	r24, r24
     76c:	b7 fd       	sbrc	r27, 7
     76e:	83 95       	inc	r24
     770:	99 27       	eor	r25, r25
     772:	aa 27       	eor	r26, r26
     774:	bb 27       	eor	r27, r27
     776:	b8 2e       	mov	r11, r24
     778:	21 15       	cp	r18, r1
     77a:	31 05       	cpc	r19, r1
     77c:	41 05       	cpc	r20, r1
     77e:	51 05       	cpc	r21, r1
     780:	19 f4       	brne	.+6      	; 0x788 <__floatsisf+0x36>
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	89 83       	std	Y+1, r24	; 0x01
     786:	3a c0       	rjmp	.+116    	; 0x7fc <__floatsisf+0xaa>
     788:	88 23       	and	r24, r24
     78a:	a9 f0       	breq	.+42     	; 0x7b6 <__floatsisf+0x64>
     78c:	20 30       	cpi	r18, 0x00	; 0
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	38 07       	cpc	r19, r24
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	48 07       	cpc	r20, r24
     796:	80 e8       	ldi	r24, 0x80	; 128
     798:	58 07       	cpc	r21, r24
     79a:	29 f4       	brne	.+10     	; 0x7a6 <__floatsisf+0x54>
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	9f ec       	ldi	r25, 0xCF	; 207
     7a4:	30 c0       	rjmp	.+96     	; 0x806 <__floatsisf+0xb4>
     7a6:	ee 24       	eor	r14, r14
     7a8:	ff 24       	eor	r15, r15
     7aa:	87 01       	movw	r16, r14
     7ac:	e2 1a       	sub	r14, r18
     7ae:	f3 0a       	sbc	r15, r19
     7b0:	04 0b       	sbc	r16, r20
     7b2:	15 0b       	sbc	r17, r21
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <__floatsisf+0x68>
     7b6:	79 01       	movw	r14, r18
     7b8:	8a 01       	movw	r16, r20
     7ba:	8e e1       	ldi	r24, 0x1E	; 30
     7bc:	c8 2e       	mov	r12, r24
     7be:	d1 2c       	mov	r13, r1
     7c0:	dc 82       	std	Y+4, r13	; 0x04
     7c2:	cb 82       	std	Y+3, r12	; 0x03
     7c4:	ed 82       	std	Y+5, r14	; 0x05
     7c6:	fe 82       	std	Y+6, r15	; 0x06
     7c8:	0f 83       	std	Y+7, r16	; 0x07
     7ca:	18 87       	std	Y+8, r17	; 0x08
     7cc:	c8 01       	movw	r24, r16
     7ce:	b7 01       	movw	r22, r14
     7d0:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__clzsi2>
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	18 16       	cp	r1, r24
     7d8:	19 06       	cpc	r1, r25
     7da:	84 f4       	brge	.+32     	; 0x7fc <__floatsisf+0xaa>
     7dc:	08 2e       	mov	r0, r24
     7de:	04 c0       	rjmp	.+8      	; 0x7e8 <__floatsisf+0x96>
     7e0:	ee 0c       	add	r14, r14
     7e2:	ff 1c       	adc	r15, r15
     7e4:	00 1f       	adc	r16, r16
     7e6:	11 1f       	adc	r17, r17
     7e8:	0a 94       	dec	r0
     7ea:	d2 f7       	brpl	.-12     	; 0x7e0 <__floatsisf+0x8e>
     7ec:	ed 82       	std	Y+5, r14	; 0x05
     7ee:	fe 82       	std	Y+6, r15	; 0x06
     7f0:	0f 83       	std	Y+7, r16	; 0x07
     7f2:	18 87       	std	Y+8, r17	; 0x08
     7f4:	c8 1a       	sub	r12, r24
     7f6:	d9 0a       	sbc	r13, r25
     7f8:	dc 82       	std	Y+4, r13	; 0x04
     7fa:	cb 82       	std	Y+3, r12	; 0x03
     7fc:	ba 82       	std	Y+2, r11	; 0x02
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	0e 94 23 05 	call	0xa46	; 0xa46 <__pack_f>
     806:	28 96       	adiw	r28, 0x08	; 8
     808:	e9 e0       	ldi	r30, 0x09	; 9
     80a:	0c 94 72 16 	jmp	0x2ce4	; 0x2ce4 <__epilogue_restores__+0x12>

0000080e <__fixsfsi>:
     80e:	ac e0       	ldi	r26, 0x0C	; 12
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	ed e0       	ldi	r30, 0x0D	; 13
     814:	f4 e0       	ldi	r31, 0x04	; 4
     816:	0c 94 5d 16 	jmp	0x2cba	; 0x2cba <__prologue_saves__+0x20>
     81a:	69 83       	std	Y+1, r22	; 0x01
     81c:	7a 83       	std	Y+2, r23	; 0x02
     81e:	8b 83       	std	Y+3, r24	; 0x03
     820:	9c 83       	std	Y+4, r25	; 0x04
     822:	ce 01       	movw	r24, r28
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	be 01       	movw	r22, r28
     828:	6b 5f       	subi	r22, 0xFB	; 251
     82a:	7f 4f       	sbci	r23, 0xFF	; 255
     82c:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     830:	8d 81       	ldd	r24, Y+5	; 0x05
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	61 f1       	breq	.+88     	; 0x88e <__stack+0x2f>
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	50 f1       	brcs	.+84     	; 0x88e <__stack+0x2f>
     83a:	84 30       	cpi	r24, 0x04	; 4
     83c:	21 f4       	brne	.+8      	; 0x846 <__fixsfsi+0x38>
     83e:	8e 81       	ldd	r24, Y+6	; 0x06
     840:	88 23       	and	r24, r24
     842:	51 f1       	breq	.+84     	; 0x898 <__stack+0x39>
     844:	2e c0       	rjmp	.+92     	; 0x8a2 <__stack+0x43>
     846:	2f 81       	ldd	r18, Y+7	; 0x07
     848:	38 85       	ldd	r19, Y+8	; 0x08
     84a:	37 fd       	sbrc	r19, 7
     84c:	20 c0       	rjmp	.+64     	; 0x88e <__stack+0x2f>
     84e:	6e 81       	ldd	r22, Y+6	; 0x06
     850:	2f 31       	cpi	r18, 0x1F	; 31
     852:	31 05       	cpc	r19, r1
     854:	1c f0       	brlt	.+6      	; 0x85c <__fixsfsi+0x4e>
     856:	66 23       	and	r22, r22
     858:	f9 f0       	breq	.+62     	; 0x898 <__stack+0x39>
     85a:	23 c0       	rjmp	.+70     	; 0x8a2 <__stack+0x43>
     85c:	8e e1       	ldi	r24, 0x1E	; 30
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	82 1b       	sub	r24, r18
     862:	93 0b       	sbc	r25, r19
     864:	29 85       	ldd	r18, Y+9	; 0x09
     866:	3a 85       	ldd	r19, Y+10	; 0x0a
     868:	4b 85       	ldd	r20, Y+11	; 0x0b
     86a:	5c 85       	ldd	r21, Y+12	; 0x0c
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	56 95       	lsr	r21
     870:	47 95       	ror	r20
     872:	37 95       	ror	r19
     874:	27 95       	ror	r18
     876:	8a 95       	dec	r24
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	66 23       	and	r22, r22
     87c:	b1 f0       	breq	.+44     	; 0x8aa <__stack+0x4b>
     87e:	50 95       	com	r21
     880:	40 95       	com	r20
     882:	30 95       	com	r19
     884:	21 95       	neg	r18
     886:	3f 4f       	sbci	r19, 0xFF	; 255
     888:	4f 4f       	sbci	r20, 0xFF	; 255
     88a:	5f 4f       	sbci	r21, 0xFF	; 255
     88c:	0e c0       	rjmp	.+28     	; 0x8aa <__stack+0x4b>
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	09 c0       	rjmp	.+18     	; 0x8aa <__stack+0x4b>
     898:	2f ef       	ldi	r18, 0xFF	; 255
     89a:	3f ef       	ldi	r19, 0xFF	; 255
     89c:	4f ef       	ldi	r20, 0xFF	; 255
     89e:	5f e7       	ldi	r21, 0x7F	; 127
     8a0:	04 c0       	rjmp	.+8      	; 0x8aa <__stack+0x4b>
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	50 e8       	ldi	r21, 0x80	; 128
     8aa:	b9 01       	movw	r22, r18
     8ac:	ca 01       	movw	r24, r20
     8ae:	2c 96       	adiw	r28, 0x0c	; 12
     8b0:	e2 e0       	ldi	r30, 0x02	; 2
     8b2:	0c 94 79 16 	jmp	0x2cf2	; 0x2cf2 <__epilogue_restores__+0x20>

000008b6 <__floatunsisf>:
     8b6:	a8 e0       	ldi	r26, 0x08	; 8
     8b8:	b0 e0       	ldi	r27, 0x00	; 0
     8ba:	e1 e6       	ldi	r30, 0x61	; 97
     8bc:	f4 e0       	ldi	r31, 0x04	; 4
     8be:	0c 94 55 16 	jmp	0x2caa	; 0x2caa <__prologue_saves__+0x10>
     8c2:	7b 01       	movw	r14, r22
     8c4:	8c 01       	movw	r16, r24
     8c6:	61 15       	cp	r22, r1
     8c8:	71 05       	cpc	r23, r1
     8ca:	81 05       	cpc	r24, r1
     8cc:	91 05       	cpc	r25, r1
     8ce:	19 f4       	brne	.+6      	; 0x8d6 <__floatunsisf+0x20>
     8d0:	82 e0       	ldi	r24, 0x02	; 2
     8d2:	89 83       	std	Y+1, r24	; 0x01
     8d4:	60 c0       	rjmp	.+192    	; 0x996 <__floatunsisf+0xe0>
     8d6:	83 e0       	ldi	r24, 0x03	; 3
     8d8:	89 83       	std	Y+1, r24	; 0x01
     8da:	8e e1       	ldi	r24, 0x1E	; 30
     8dc:	c8 2e       	mov	r12, r24
     8de:	d1 2c       	mov	r13, r1
     8e0:	dc 82       	std	Y+4, r13	; 0x04
     8e2:	cb 82       	std	Y+3, r12	; 0x03
     8e4:	ed 82       	std	Y+5, r14	; 0x05
     8e6:	fe 82       	std	Y+6, r15	; 0x06
     8e8:	0f 83       	std	Y+7, r16	; 0x07
     8ea:	18 87       	std	Y+8, r17	; 0x08
     8ec:	c8 01       	movw	r24, r16
     8ee:	b7 01       	movw	r22, r14
     8f0:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__clzsi2>
     8f4:	fc 01       	movw	r30, r24
     8f6:	31 97       	sbiw	r30, 0x01	; 1
     8f8:	f7 ff       	sbrs	r31, 7
     8fa:	3b c0       	rjmp	.+118    	; 0x972 <__floatunsisf+0xbc>
     8fc:	22 27       	eor	r18, r18
     8fe:	33 27       	eor	r19, r19
     900:	2e 1b       	sub	r18, r30
     902:	3f 0b       	sbc	r19, r31
     904:	57 01       	movw	r10, r14
     906:	68 01       	movw	r12, r16
     908:	02 2e       	mov	r0, r18
     90a:	04 c0       	rjmp	.+8      	; 0x914 <__floatunsisf+0x5e>
     90c:	d6 94       	lsr	r13
     90e:	c7 94       	ror	r12
     910:	b7 94       	ror	r11
     912:	a7 94       	ror	r10
     914:	0a 94       	dec	r0
     916:	d2 f7       	brpl	.-12     	; 0x90c <__floatunsisf+0x56>
     918:	40 e0       	ldi	r20, 0x00	; 0
     91a:	50 e0       	ldi	r21, 0x00	; 0
     91c:	60 e0       	ldi	r22, 0x00	; 0
     91e:	70 e0       	ldi	r23, 0x00	; 0
     920:	81 e0       	ldi	r24, 0x01	; 1
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	a0 e0       	ldi	r26, 0x00	; 0
     926:	b0 e0       	ldi	r27, 0x00	; 0
     928:	04 c0       	rjmp	.+8      	; 0x932 <__floatunsisf+0x7c>
     92a:	88 0f       	add	r24, r24
     92c:	99 1f       	adc	r25, r25
     92e:	aa 1f       	adc	r26, r26
     930:	bb 1f       	adc	r27, r27
     932:	2a 95       	dec	r18
     934:	d2 f7       	brpl	.-12     	; 0x92a <__floatunsisf+0x74>
     936:	01 97       	sbiw	r24, 0x01	; 1
     938:	a1 09       	sbc	r26, r1
     93a:	b1 09       	sbc	r27, r1
     93c:	8e 21       	and	r24, r14
     93e:	9f 21       	and	r25, r15
     940:	a0 23       	and	r26, r16
     942:	b1 23       	and	r27, r17
     944:	00 97       	sbiw	r24, 0x00	; 0
     946:	a1 05       	cpc	r26, r1
     948:	b1 05       	cpc	r27, r1
     94a:	21 f0       	breq	.+8      	; 0x954 <__floatunsisf+0x9e>
     94c:	41 e0       	ldi	r20, 0x01	; 1
     94e:	50 e0       	ldi	r21, 0x00	; 0
     950:	60 e0       	ldi	r22, 0x00	; 0
     952:	70 e0       	ldi	r23, 0x00	; 0
     954:	4a 29       	or	r20, r10
     956:	5b 29       	or	r21, r11
     958:	6c 29       	or	r22, r12
     95a:	7d 29       	or	r23, r13
     95c:	4d 83       	std	Y+5, r20	; 0x05
     95e:	5e 83       	std	Y+6, r21	; 0x06
     960:	6f 83       	std	Y+7, r22	; 0x07
     962:	78 87       	std	Y+8, r23	; 0x08
     964:	8e e1       	ldi	r24, 0x1E	; 30
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	8e 1b       	sub	r24, r30
     96a:	9f 0b       	sbc	r25, r31
     96c:	9c 83       	std	Y+4, r25	; 0x04
     96e:	8b 83       	std	Y+3, r24	; 0x03
     970:	12 c0       	rjmp	.+36     	; 0x996 <__floatunsisf+0xe0>
     972:	30 97       	sbiw	r30, 0x00	; 0
     974:	81 f0       	breq	.+32     	; 0x996 <__floatunsisf+0xe0>
     976:	0e 2e       	mov	r0, r30
     978:	04 c0       	rjmp	.+8      	; 0x982 <__floatunsisf+0xcc>
     97a:	ee 0c       	add	r14, r14
     97c:	ff 1c       	adc	r15, r15
     97e:	00 1f       	adc	r16, r16
     980:	11 1f       	adc	r17, r17
     982:	0a 94       	dec	r0
     984:	d2 f7       	brpl	.-12     	; 0x97a <__floatunsisf+0xc4>
     986:	ed 82       	std	Y+5, r14	; 0x05
     988:	fe 82       	std	Y+6, r15	; 0x06
     98a:	0f 83       	std	Y+7, r16	; 0x07
     98c:	18 87       	std	Y+8, r17	; 0x08
     98e:	ce 1a       	sub	r12, r30
     990:	df 0a       	sbc	r13, r31
     992:	dc 82       	std	Y+4, r13	; 0x04
     994:	cb 82       	std	Y+3, r12	; 0x03
     996:	1a 82       	std	Y+2, r1	; 0x02
     998:	ce 01       	movw	r24, r28
     99a:	01 96       	adiw	r24, 0x01	; 1
     99c:	0e 94 23 05 	call	0xa46	; 0xa46 <__pack_f>
     9a0:	28 96       	adiw	r28, 0x08	; 8
     9a2:	ea e0       	ldi	r30, 0x0A	; 10
     9a4:	0c 94 71 16 	jmp	0x2ce2	; 0x2ce2 <__epilogue_restores__+0x10>

000009a8 <__clzsi2>:
     9a8:	ef 92       	push	r14
     9aa:	ff 92       	push	r15
     9ac:	0f 93       	push	r16
     9ae:	1f 93       	push	r17
     9b0:	7b 01       	movw	r14, r22
     9b2:	8c 01       	movw	r16, r24
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	e8 16       	cp	r14, r24
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	f8 06       	cpc	r15, r24
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	08 07       	cpc	r16, r24
     9c0:	80 e0       	ldi	r24, 0x00	; 0
     9c2:	18 07       	cpc	r17, r24
     9c4:	88 f4       	brcc	.+34     	; 0x9e8 <__clzsi2+0x40>
     9c6:	8f ef       	ldi	r24, 0xFF	; 255
     9c8:	e8 16       	cp	r14, r24
     9ca:	f1 04       	cpc	r15, r1
     9cc:	01 05       	cpc	r16, r1
     9ce:	11 05       	cpc	r17, r1
     9d0:	31 f0       	breq	.+12     	; 0x9de <__clzsi2+0x36>
     9d2:	28 f0       	brcs	.+10     	; 0x9de <__clzsi2+0x36>
     9d4:	88 e0       	ldi	r24, 0x08	; 8
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	a0 e0       	ldi	r26, 0x00	; 0
     9da:	b0 e0       	ldi	r27, 0x00	; 0
     9dc:	17 c0       	rjmp	.+46     	; 0xa0c <__clzsi2+0x64>
     9de:	80 e0       	ldi	r24, 0x00	; 0
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	a0 e0       	ldi	r26, 0x00	; 0
     9e4:	b0 e0       	ldi	r27, 0x00	; 0
     9e6:	12 c0       	rjmp	.+36     	; 0xa0c <__clzsi2+0x64>
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	e8 16       	cp	r14, r24
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	f8 06       	cpc	r15, r24
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	08 07       	cpc	r16, r24
     9f4:	81 e0       	ldi	r24, 0x01	; 1
     9f6:	18 07       	cpc	r17, r24
     9f8:	28 f0       	brcs	.+10     	; 0xa04 <__clzsi2+0x5c>
     9fa:	88 e1       	ldi	r24, 0x18	; 24
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	a0 e0       	ldi	r26, 0x00	; 0
     a00:	b0 e0       	ldi	r27, 0x00	; 0
     a02:	04 c0       	rjmp	.+8      	; 0xa0c <__clzsi2+0x64>
     a04:	80 e1       	ldi	r24, 0x10	; 16
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	a0 e0       	ldi	r26, 0x00	; 0
     a0a:	b0 e0       	ldi	r27, 0x00	; 0
     a0c:	20 e2       	ldi	r18, 0x20	; 32
     a0e:	30 e0       	ldi	r19, 0x00	; 0
     a10:	40 e0       	ldi	r20, 0x00	; 0
     a12:	50 e0       	ldi	r21, 0x00	; 0
     a14:	28 1b       	sub	r18, r24
     a16:	39 0b       	sbc	r19, r25
     a18:	4a 0b       	sbc	r20, r26
     a1a:	5b 0b       	sbc	r21, r27
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__clzsi2+0x7e>
     a1e:	16 95       	lsr	r17
     a20:	07 95       	ror	r16
     a22:	f7 94       	ror	r15
     a24:	e7 94       	ror	r14
     a26:	8a 95       	dec	r24
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__clzsi2+0x76>
     a2a:	f7 01       	movw	r30, r14
     a2c:	e9 58       	subi	r30, 0x89	; 137
     a2e:	ff 4f       	sbci	r31, 0xFF	; 255
     a30:	80 81       	ld	r24, Z
     a32:	28 1b       	sub	r18, r24
     a34:	31 09       	sbc	r19, r1
     a36:	41 09       	sbc	r20, r1
     a38:	51 09       	sbc	r21, r1
     a3a:	c9 01       	movw	r24, r18
     a3c:	1f 91       	pop	r17
     a3e:	0f 91       	pop	r16
     a40:	ff 90       	pop	r15
     a42:	ef 90       	pop	r14
     a44:	08 95       	ret

00000a46 <__pack_f>:
     a46:	df 92       	push	r13
     a48:	ef 92       	push	r14
     a4a:	ff 92       	push	r15
     a4c:	0f 93       	push	r16
     a4e:	1f 93       	push	r17
     a50:	fc 01       	movw	r30, r24
     a52:	e4 80       	ldd	r14, Z+4	; 0x04
     a54:	f5 80       	ldd	r15, Z+5	; 0x05
     a56:	06 81       	ldd	r16, Z+6	; 0x06
     a58:	17 81       	ldd	r17, Z+7	; 0x07
     a5a:	d1 80       	ldd	r13, Z+1	; 0x01
     a5c:	80 81       	ld	r24, Z
     a5e:	82 30       	cpi	r24, 0x02	; 2
     a60:	48 f4       	brcc	.+18     	; 0xa74 <__pack_f+0x2e>
     a62:	80 e0       	ldi	r24, 0x00	; 0
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	a0 e1       	ldi	r26, 0x10	; 16
     a68:	b0 e0       	ldi	r27, 0x00	; 0
     a6a:	e8 2a       	or	r14, r24
     a6c:	f9 2a       	or	r15, r25
     a6e:	0a 2b       	or	r16, r26
     a70:	1b 2b       	or	r17, r27
     a72:	a5 c0       	rjmp	.+330    	; 0xbbe <__pack_f+0x178>
     a74:	84 30       	cpi	r24, 0x04	; 4
     a76:	09 f4       	brne	.+2      	; 0xa7a <__pack_f+0x34>
     a78:	9f c0       	rjmp	.+318    	; 0xbb8 <__pack_f+0x172>
     a7a:	82 30       	cpi	r24, 0x02	; 2
     a7c:	21 f4       	brne	.+8      	; 0xa86 <__pack_f+0x40>
     a7e:	ee 24       	eor	r14, r14
     a80:	ff 24       	eor	r15, r15
     a82:	87 01       	movw	r16, r14
     a84:	05 c0       	rjmp	.+10     	; 0xa90 <__pack_f+0x4a>
     a86:	e1 14       	cp	r14, r1
     a88:	f1 04       	cpc	r15, r1
     a8a:	01 05       	cpc	r16, r1
     a8c:	11 05       	cpc	r17, r1
     a8e:	19 f4       	brne	.+6      	; 0xa96 <__pack_f+0x50>
     a90:	e0 e0       	ldi	r30, 0x00	; 0
     a92:	f0 e0       	ldi	r31, 0x00	; 0
     a94:	96 c0       	rjmp	.+300    	; 0xbc2 <__pack_f+0x17c>
     a96:	62 81       	ldd	r22, Z+2	; 0x02
     a98:	73 81       	ldd	r23, Z+3	; 0x03
     a9a:	9f ef       	ldi	r25, 0xFF	; 255
     a9c:	62 38       	cpi	r22, 0x82	; 130
     a9e:	79 07       	cpc	r23, r25
     aa0:	0c f0       	brlt	.+2      	; 0xaa4 <__pack_f+0x5e>
     aa2:	5b c0       	rjmp	.+182    	; 0xb5a <__pack_f+0x114>
     aa4:	22 e8       	ldi	r18, 0x82	; 130
     aa6:	3f ef       	ldi	r19, 0xFF	; 255
     aa8:	26 1b       	sub	r18, r22
     aaa:	37 0b       	sbc	r19, r23
     aac:	2a 31       	cpi	r18, 0x1A	; 26
     aae:	31 05       	cpc	r19, r1
     ab0:	2c f0       	brlt	.+10     	; 0xabc <__pack_f+0x76>
     ab2:	20 e0       	ldi	r18, 0x00	; 0
     ab4:	30 e0       	ldi	r19, 0x00	; 0
     ab6:	40 e0       	ldi	r20, 0x00	; 0
     ab8:	50 e0       	ldi	r21, 0x00	; 0
     aba:	2a c0       	rjmp	.+84     	; 0xb10 <__pack_f+0xca>
     abc:	b8 01       	movw	r22, r16
     abe:	a7 01       	movw	r20, r14
     ac0:	02 2e       	mov	r0, r18
     ac2:	04 c0       	rjmp	.+8      	; 0xacc <__pack_f+0x86>
     ac4:	76 95       	lsr	r23
     ac6:	67 95       	ror	r22
     ac8:	57 95       	ror	r21
     aca:	47 95       	ror	r20
     acc:	0a 94       	dec	r0
     ace:	d2 f7       	brpl	.-12     	; 0xac4 <__pack_f+0x7e>
     ad0:	81 e0       	ldi	r24, 0x01	; 1
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	a0 e0       	ldi	r26, 0x00	; 0
     ad6:	b0 e0       	ldi	r27, 0x00	; 0
     ad8:	04 c0       	rjmp	.+8      	; 0xae2 <__pack_f+0x9c>
     ada:	88 0f       	add	r24, r24
     adc:	99 1f       	adc	r25, r25
     ade:	aa 1f       	adc	r26, r26
     ae0:	bb 1f       	adc	r27, r27
     ae2:	2a 95       	dec	r18
     ae4:	d2 f7       	brpl	.-12     	; 0xada <__pack_f+0x94>
     ae6:	01 97       	sbiw	r24, 0x01	; 1
     ae8:	a1 09       	sbc	r26, r1
     aea:	b1 09       	sbc	r27, r1
     aec:	8e 21       	and	r24, r14
     aee:	9f 21       	and	r25, r15
     af0:	a0 23       	and	r26, r16
     af2:	b1 23       	and	r27, r17
     af4:	00 97       	sbiw	r24, 0x00	; 0
     af6:	a1 05       	cpc	r26, r1
     af8:	b1 05       	cpc	r27, r1
     afa:	21 f0       	breq	.+8      	; 0xb04 <__pack_f+0xbe>
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	a0 e0       	ldi	r26, 0x00	; 0
     b02:	b0 e0       	ldi	r27, 0x00	; 0
     b04:	9a 01       	movw	r18, r20
     b06:	ab 01       	movw	r20, r22
     b08:	28 2b       	or	r18, r24
     b0a:	39 2b       	or	r19, r25
     b0c:	4a 2b       	or	r20, r26
     b0e:	5b 2b       	or	r21, r27
     b10:	da 01       	movw	r26, r20
     b12:	c9 01       	movw	r24, r18
     b14:	8f 77       	andi	r24, 0x7F	; 127
     b16:	90 70       	andi	r25, 0x00	; 0
     b18:	a0 70       	andi	r26, 0x00	; 0
     b1a:	b0 70       	andi	r27, 0x00	; 0
     b1c:	80 34       	cpi	r24, 0x40	; 64
     b1e:	91 05       	cpc	r25, r1
     b20:	a1 05       	cpc	r26, r1
     b22:	b1 05       	cpc	r27, r1
     b24:	39 f4       	brne	.+14     	; 0xb34 <__pack_f+0xee>
     b26:	27 ff       	sbrs	r18, 7
     b28:	09 c0       	rjmp	.+18     	; 0xb3c <__pack_f+0xf6>
     b2a:	20 5c       	subi	r18, 0xC0	; 192
     b2c:	3f 4f       	sbci	r19, 0xFF	; 255
     b2e:	4f 4f       	sbci	r20, 0xFF	; 255
     b30:	5f 4f       	sbci	r21, 0xFF	; 255
     b32:	04 c0       	rjmp	.+8      	; 0xb3c <__pack_f+0xf6>
     b34:	21 5c       	subi	r18, 0xC1	; 193
     b36:	3f 4f       	sbci	r19, 0xFF	; 255
     b38:	4f 4f       	sbci	r20, 0xFF	; 255
     b3a:	5f 4f       	sbci	r21, 0xFF	; 255
     b3c:	e0 e0       	ldi	r30, 0x00	; 0
     b3e:	f0 e0       	ldi	r31, 0x00	; 0
     b40:	20 30       	cpi	r18, 0x00	; 0
     b42:	a0 e0       	ldi	r26, 0x00	; 0
     b44:	3a 07       	cpc	r19, r26
     b46:	a0 e0       	ldi	r26, 0x00	; 0
     b48:	4a 07       	cpc	r20, r26
     b4a:	a0 e4       	ldi	r26, 0x40	; 64
     b4c:	5a 07       	cpc	r21, r26
     b4e:	10 f0       	brcs	.+4      	; 0xb54 <__pack_f+0x10e>
     b50:	e1 e0       	ldi	r30, 0x01	; 1
     b52:	f0 e0       	ldi	r31, 0x00	; 0
     b54:	79 01       	movw	r14, r18
     b56:	8a 01       	movw	r16, r20
     b58:	27 c0       	rjmp	.+78     	; 0xba8 <__pack_f+0x162>
     b5a:	60 38       	cpi	r22, 0x80	; 128
     b5c:	71 05       	cpc	r23, r1
     b5e:	64 f5       	brge	.+88     	; 0xbb8 <__pack_f+0x172>
     b60:	fb 01       	movw	r30, r22
     b62:	e1 58       	subi	r30, 0x81	; 129
     b64:	ff 4f       	sbci	r31, 0xFF	; 255
     b66:	d8 01       	movw	r26, r16
     b68:	c7 01       	movw	r24, r14
     b6a:	8f 77       	andi	r24, 0x7F	; 127
     b6c:	90 70       	andi	r25, 0x00	; 0
     b6e:	a0 70       	andi	r26, 0x00	; 0
     b70:	b0 70       	andi	r27, 0x00	; 0
     b72:	80 34       	cpi	r24, 0x40	; 64
     b74:	91 05       	cpc	r25, r1
     b76:	a1 05       	cpc	r26, r1
     b78:	b1 05       	cpc	r27, r1
     b7a:	39 f4       	brne	.+14     	; 0xb8a <__pack_f+0x144>
     b7c:	e7 fe       	sbrs	r14, 7
     b7e:	0d c0       	rjmp	.+26     	; 0xb9a <__pack_f+0x154>
     b80:	80 e4       	ldi	r24, 0x40	; 64
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	a0 e0       	ldi	r26, 0x00	; 0
     b86:	b0 e0       	ldi	r27, 0x00	; 0
     b88:	04 c0       	rjmp	.+8      	; 0xb92 <__pack_f+0x14c>
     b8a:	8f e3       	ldi	r24, 0x3F	; 63
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	a0 e0       	ldi	r26, 0x00	; 0
     b90:	b0 e0       	ldi	r27, 0x00	; 0
     b92:	e8 0e       	add	r14, r24
     b94:	f9 1e       	adc	r15, r25
     b96:	0a 1f       	adc	r16, r26
     b98:	1b 1f       	adc	r17, r27
     b9a:	17 ff       	sbrs	r17, 7
     b9c:	05 c0       	rjmp	.+10     	; 0xba8 <__pack_f+0x162>
     b9e:	16 95       	lsr	r17
     ba0:	07 95       	ror	r16
     ba2:	f7 94       	ror	r15
     ba4:	e7 94       	ror	r14
     ba6:	31 96       	adiw	r30, 0x01	; 1
     ba8:	87 e0       	ldi	r24, 0x07	; 7
     baa:	16 95       	lsr	r17
     bac:	07 95       	ror	r16
     bae:	f7 94       	ror	r15
     bb0:	e7 94       	ror	r14
     bb2:	8a 95       	dec	r24
     bb4:	d1 f7       	brne	.-12     	; 0xbaa <__pack_f+0x164>
     bb6:	05 c0       	rjmp	.+10     	; 0xbc2 <__pack_f+0x17c>
     bb8:	ee 24       	eor	r14, r14
     bba:	ff 24       	eor	r15, r15
     bbc:	87 01       	movw	r16, r14
     bbe:	ef ef       	ldi	r30, 0xFF	; 255
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	6e 2f       	mov	r22, r30
     bc4:	67 95       	ror	r22
     bc6:	66 27       	eor	r22, r22
     bc8:	67 95       	ror	r22
     bca:	90 2f       	mov	r25, r16
     bcc:	9f 77       	andi	r25, 0x7F	; 127
     bce:	d7 94       	ror	r13
     bd0:	dd 24       	eor	r13, r13
     bd2:	d7 94       	ror	r13
     bd4:	8e 2f       	mov	r24, r30
     bd6:	86 95       	lsr	r24
     bd8:	49 2f       	mov	r20, r25
     bda:	46 2b       	or	r20, r22
     bdc:	58 2f       	mov	r21, r24
     bde:	5d 29       	or	r21, r13
     be0:	b7 01       	movw	r22, r14
     be2:	ca 01       	movw	r24, r20
     be4:	1f 91       	pop	r17
     be6:	0f 91       	pop	r16
     be8:	ff 90       	pop	r15
     bea:	ef 90       	pop	r14
     bec:	df 90       	pop	r13
     bee:	08 95       	ret

00000bf0 <__unpack_f>:
     bf0:	fc 01       	movw	r30, r24
     bf2:	db 01       	movw	r26, r22
     bf4:	40 81       	ld	r20, Z
     bf6:	51 81       	ldd	r21, Z+1	; 0x01
     bf8:	22 81       	ldd	r18, Z+2	; 0x02
     bfa:	62 2f       	mov	r22, r18
     bfc:	6f 77       	andi	r22, 0x7F	; 127
     bfe:	70 e0       	ldi	r23, 0x00	; 0
     c00:	22 1f       	adc	r18, r18
     c02:	22 27       	eor	r18, r18
     c04:	22 1f       	adc	r18, r18
     c06:	93 81       	ldd	r25, Z+3	; 0x03
     c08:	89 2f       	mov	r24, r25
     c0a:	88 0f       	add	r24, r24
     c0c:	82 2b       	or	r24, r18
     c0e:	28 2f       	mov	r18, r24
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	99 1f       	adc	r25, r25
     c14:	99 27       	eor	r25, r25
     c16:	99 1f       	adc	r25, r25
     c18:	11 96       	adiw	r26, 0x01	; 1
     c1a:	9c 93       	st	X, r25
     c1c:	11 97       	sbiw	r26, 0x01	; 1
     c1e:	21 15       	cp	r18, r1
     c20:	31 05       	cpc	r19, r1
     c22:	a9 f5       	brne	.+106    	; 0xc8e <__unpack_f+0x9e>
     c24:	41 15       	cp	r20, r1
     c26:	51 05       	cpc	r21, r1
     c28:	61 05       	cpc	r22, r1
     c2a:	71 05       	cpc	r23, r1
     c2c:	11 f4       	brne	.+4      	; 0xc32 <__unpack_f+0x42>
     c2e:	82 e0       	ldi	r24, 0x02	; 2
     c30:	37 c0       	rjmp	.+110    	; 0xca0 <__unpack_f+0xb0>
     c32:	82 e8       	ldi	r24, 0x82	; 130
     c34:	9f ef       	ldi	r25, 0xFF	; 255
     c36:	13 96       	adiw	r26, 0x03	; 3
     c38:	9c 93       	st	X, r25
     c3a:	8e 93       	st	-X, r24
     c3c:	12 97       	sbiw	r26, 0x02	; 2
     c3e:	9a 01       	movw	r18, r20
     c40:	ab 01       	movw	r20, r22
     c42:	67 e0       	ldi	r22, 0x07	; 7
     c44:	22 0f       	add	r18, r18
     c46:	33 1f       	adc	r19, r19
     c48:	44 1f       	adc	r20, r20
     c4a:	55 1f       	adc	r21, r21
     c4c:	6a 95       	dec	r22
     c4e:	d1 f7       	brne	.-12     	; 0xc44 <__unpack_f+0x54>
     c50:	83 e0       	ldi	r24, 0x03	; 3
     c52:	8c 93       	st	X, r24
     c54:	0d c0       	rjmp	.+26     	; 0xc70 <__unpack_f+0x80>
     c56:	22 0f       	add	r18, r18
     c58:	33 1f       	adc	r19, r19
     c5a:	44 1f       	adc	r20, r20
     c5c:	55 1f       	adc	r21, r21
     c5e:	12 96       	adiw	r26, 0x02	; 2
     c60:	8d 91       	ld	r24, X+
     c62:	9c 91       	ld	r25, X
     c64:	13 97       	sbiw	r26, 0x03	; 3
     c66:	01 97       	sbiw	r24, 0x01	; 1
     c68:	13 96       	adiw	r26, 0x03	; 3
     c6a:	9c 93       	st	X, r25
     c6c:	8e 93       	st	-X, r24
     c6e:	12 97       	sbiw	r26, 0x02	; 2
     c70:	20 30       	cpi	r18, 0x00	; 0
     c72:	80 e0       	ldi	r24, 0x00	; 0
     c74:	38 07       	cpc	r19, r24
     c76:	80 e0       	ldi	r24, 0x00	; 0
     c78:	48 07       	cpc	r20, r24
     c7a:	80 e4       	ldi	r24, 0x40	; 64
     c7c:	58 07       	cpc	r21, r24
     c7e:	58 f3       	brcs	.-42     	; 0xc56 <__unpack_f+0x66>
     c80:	14 96       	adiw	r26, 0x04	; 4
     c82:	2d 93       	st	X+, r18
     c84:	3d 93       	st	X+, r19
     c86:	4d 93       	st	X+, r20
     c88:	5c 93       	st	X, r21
     c8a:	17 97       	sbiw	r26, 0x07	; 7
     c8c:	08 95       	ret
     c8e:	2f 3f       	cpi	r18, 0xFF	; 255
     c90:	31 05       	cpc	r19, r1
     c92:	79 f4       	brne	.+30     	; 0xcb2 <__unpack_f+0xc2>
     c94:	41 15       	cp	r20, r1
     c96:	51 05       	cpc	r21, r1
     c98:	61 05       	cpc	r22, r1
     c9a:	71 05       	cpc	r23, r1
     c9c:	19 f4       	brne	.+6      	; 0xca4 <__unpack_f+0xb4>
     c9e:	84 e0       	ldi	r24, 0x04	; 4
     ca0:	8c 93       	st	X, r24
     ca2:	08 95       	ret
     ca4:	64 ff       	sbrs	r22, 4
     ca6:	03 c0       	rjmp	.+6      	; 0xcae <__unpack_f+0xbe>
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	8c 93       	st	X, r24
     cac:	12 c0       	rjmp	.+36     	; 0xcd2 <__unpack_f+0xe2>
     cae:	1c 92       	st	X, r1
     cb0:	10 c0       	rjmp	.+32     	; 0xcd2 <__unpack_f+0xe2>
     cb2:	2f 57       	subi	r18, 0x7F	; 127
     cb4:	30 40       	sbci	r19, 0x00	; 0
     cb6:	13 96       	adiw	r26, 0x03	; 3
     cb8:	3c 93       	st	X, r19
     cba:	2e 93       	st	-X, r18
     cbc:	12 97       	sbiw	r26, 0x02	; 2
     cbe:	83 e0       	ldi	r24, 0x03	; 3
     cc0:	8c 93       	st	X, r24
     cc2:	87 e0       	ldi	r24, 0x07	; 7
     cc4:	44 0f       	add	r20, r20
     cc6:	55 1f       	adc	r21, r21
     cc8:	66 1f       	adc	r22, r22
     cca:	77 1f       	adc	r23, r23
     ccc:	8a 95       	dec	r24
     cce:	d1 f7       	brne	.-12     	; 0xcc4 <__unpack_f+0xd4>
     cd0:	70 64       	ori	r23, 0x40	; 64
     cd2:	14 96       	adiw	r26, 0x04	; 4
     cd4:	4d 93       	st	X+, r20
     cd6:	5d 93       	st	X+, r21
     cd8:	6d 93       	st	X+, r22
     cda:	7c 93       	st	X, r23
     cdc:	17 97       	sbiw	r26, 0x07	; 7
     cde:	08 95       	ret

00000ce0 <__fpcmp_parts_f>:
     ce0:	1f 93       	push	r17
     ce2:	dc 01       	movw	r26, r24
     ce4:	fb 01       	movw	r30, r22
     ce6:	9c 91       	ld	r25, X
     ce8:	92 30       	cpi	r25, 0x02	; 2
     cea:	08 f4       	brcc	.+2      	; 0xcee <__fpcmp_parts_f+0xe>
     cec:	47 c0       	rjmp	.+142    	; 0xd7c <__fpcmp_parts_f+0x9c>
     cee:	80 81       	ld	r24, Z
     cf0:	82 30       	cpi	r24, 0x02	; 2
     cf2:	08 f4       	brcc	.+2      	; 0xcf6 <__fpcmp_parts_f+0x16>
     cf4:	43 c0       	rjmp	.+134    	; 0xd7c <__fpcmp_parts_f+0x9c>
     cf6:	94 30       	cpi	r25, 0x04	; 4
     cf8:	51 f4       	brne	.+20     	; 0xd0e <__fpcmp_parts_f+0x2e>
     cfa:	11 96       	adiw	r26, 0x01	; 1
     cfc:	1c 91       	ld	r17, X
     cfe:	84 30       	cpi	r24, 0x04	; 4
     d00:	99 f5       	brne	.+102    	; 0xd68 <__fpcmp_parts_f+0x88>
     d02:	81 81       	ldd	r24, Z+1	; 0x01
     d04:	68 2f       	mov	r22, r24
     d06:	70 e0       	ldi	r23, 0x00	; 0
     d08:	61 1b       	sub	r22, r17
     d0a:	71 09       	sbc	r23, r1
     d0c:	3f c0       	rjmp	.+126    	; 0xd8c <__fpcmp_parts_f+0xac>
     d0e:	84 30       	cpi	r24, 0x04	; 4
     d10:	21 f0       	breq	.+8      	; 0xd1a <__fpcmp_parts_f+0x3a>
     d12:	92 30       	cpi	r25, 0x02	; 2
     d14:	31 f4       	brne	.+12     	; 0xd22 <__fpcmp_parts_f+0x42>
     d16:	82 30       	cpi	r24, 0x02	; 2
     d18:	b9 f1       	breq	.+110    	; 0xd88 <__fpcmp_parts_f+0xa8>
     d1a:	81 81       	ldd	r24, Z+1	; 0x01
     d1c:	88 23       	and	r24, r24
     d1e:	89 f1       	breq	.+98     	; 0xd82 <__fpcmp_parts_f+0xa2>
     d20:	2d c0       	rjmp	.+90     	; 0xd7c <__fpcmp_parts_f+0x9c>
     d22:	11 96       	adiw	r26, 0x01	; 1
     d24:	1c 91       	ld	r17, X
     d26:	11 97       	sbiw	r26, 0x01	; 1
     d28:	82 30       	cpi	r24, 0x02	; 2
     d2a:	f1 f0       	breq	.+60     	; 0xd68 <__fpcmp_parts_f+0x88>
     d2c:	81 81       	ldd	r24, Z+1	; 0x01
     d2e:	18 17       	cp	r17, r24
     d30:	d9 f4       	brne	.+54     	; 0xd68 <__fpcmp_parts_f+0x88>
     d32:	12 96       	adiw	r26, 0x02	; 2
     d34:	2d 91       	ld	r18, X+
     d36:	3c 91       	ld	r19, X
     d38:	13 97       	sbiw	r26, 0x03	; 3
     d3a:	82 81       	ldd	r24, Z+2	; 0x02
     d3c:	93 81       	ldd	r25, Z+3	; 0x03
     d3e:	82 17       	cp	r24, r18
     d40:	93 07       	cpc	r25, r19
     d42:	94 f0       	brlt	.+36     	; 0xd68 <__fpcmp_parts_f+0x88>
     d44:	28 17       	cp	r18, r24
     d46:	39 07       	cpc	r19, r25
     d48:	bc f0       	brlt	.+46     	; 0xd78 <__fpcmp_parts_f+0x98>
     d4a:	14 96       	adiw	r26, 0x04	; 4
     d4c:	8d 91       	ld	r24, X+
     d4e:	9d 91       	ld	r25, X+
     d50:	0d 90       	ld	r0, X+
     d52:	bc 91       	ld	r27, X
     d54:	a0 2d       	mov	r26, r0
     d56:	24 81       	ldd	r18, Z+4	; 0x04
     d58:	35 81       	ldd	r19, Z+5	; 0x05
     d5a:	46 81       	ldd	r20, Z+6	; 0x06
     d5c:	57 81       	ldd	r21, Z+7	; 0x07
     d5e:	28 17       	cp	r18, r24
     d60:	39 07       	cpc	r19, r25
     d62:	4a 07       	cpc	r20, r26
     d64:	5b 07       	cpc	r21, r27
     d66:	18 f4       	brcc	.+6      	; 0xd6e <__fpcmp_parts_f+0x8e>
     d68:	11 23       	and	r17, r17
     d6a:	41 f0       	breq	.+16     	; 0xd7c <__fpcmp_parts_f+0x9c>
     d6c:	0a c0       	rjmp	.+20     	; 0xd82 <__fpcmp_parts_f+0xa2>
     d6e:	82 17       	cp	r24, r18
     d70:	93 07       	cpc	r25, r19
     d72:	a4 07       	cpc	r26, r20
     d74:	b5 07       	cpc	r27, r21
     d76:	40 f4       	brcc	.+16     	; 0xd88 <__fpcmp_parts_f+0xa8>
     d78:	11 23       	and	r17, r17
     d7a:	19 f0       	breq	.+6      	; 0xd82 <__fpcmp_parts_f+0xa2>
     d7c:	61 e0       	ldi	r22, 0x01	; 1
     d7e:	70 e0       	ldi	r23, 0x00	; 0
     d80:	05 c0       	rjmp	.+10     	; 0xd8c <__fpcmp_parts_f+0xac>
     d82:	6f ef       	ldi	r22, 0xFF	; 255
     d84:	7f ef       	ldi	r23, 0xFF	; 255
     d86:	02 c0       	rjmp	.+4      	; 0xd8c <__fpcmp_parts_f+0xac>
     d88:	60 e0       	ldi	r22, 0x00	; 0
     d8a:	70 e0       	ldi	r23, 0x00	; 0
     d8c:	cb 01       	movw	r24, r22
     d8e:	1f 91       	pop	r17
     d90:	08 95       	ret

00000d92 <ADC_voidinit>:
#include "ADC_config.h"
#include "ADC_private.h"


void ADC_voidinit(u8 copy_u8Channel)
{
     d92:	df 93       	push	r29
     d94:	cf 93       	push	r28
     d96:	0f 92       	push	r0
     d98:	cd b7       	in	r28, 0x3d	; 61
     d9a:	de b7       	in	r29, 0x3e	; 62
     d9c:	89 83       	std	Y+1, r24	; 0x01
	//1- Make Channel selected I/p
	CLEAR_BIT(DDRA,copy_u8Channel);
     d9e:	aa e3       	ldi	r26, 0x3A	; 58
     da0:	b0 e0       	ldi	r27, 0x00	; 0
     da2:	ea e3       	ldi	r30, 0x3A	; 58
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	80 81       	ld	r24, Z
     da8:	48 2f       	mov	r20, r24
     daa:	89 81       	ldd	r24, Y+1	; 0x01
     dac:	28 2f       	mov	r18, r24
     dae:	30 e0       	ldi	r19, 0x00	; 0
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	02 2e       	mov	r0, r18
     db6:	02 c0       	rjmp	.+4      	; 0xdbc <ADC_voidinit+0x2a>
     db8:	88 0f       	add	r24, r24
     dba:	99 1f       	adc	r25, r25
     dbc:	0a 94       	dec	r0
     dbe:	e2 f7       	brpl	.-8      	; 0xdb8 <ADC_voidinit+0x26>
     dc0:	80 95       	com	r24
     dc2:	84 23       	and	r24, r20
     dc4:	8c 93       	st	X, r24
	copy_u8Channel&=0x07;
     dc6:	89 81       	ldd	r24, Y+1	; 0x01
     dc8:	87 70       	andi	r24, 0x07	; 7
     dca:	89 83       	std	Y+1, r24	; 0x01
		/*clearing the MUX0...MUX4 */
		ADMUX &=0xE0;
     dcc:	a7 e2       	ldi	r26, 0x27	; 39
     dce:	b0 e0       	ldi	r27, 0x00	; 0
     dd0:	e7 e2       	ldi	r30, 0x27	; 39
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	80 81       	ld	r24, Z
     dd6:	80 7e       	andi	r24, 0xE0	; 224
     dd8:	8c 93       	st	X, r24
		/*to choose the required channel number in bits MUX0....MUX4*/
		ADMUX |= copy_u8Channel;
     dda:	a7 e2       	ldi	r26, 0x27	; 39
     ddc:	b0 e0       	ldi	r27, 0x00	; 0
     dde:	e7 e2       	ldi	r30, 0x27	; 39
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	90 81       	ld	r25, Z
     de4:	89 81       	ldd	r24, Y+1	; 0x01
     de6:	89 2b       	or	r24, r25
     de8:	8c 93       	st	X, r24
		ADCSRA |= 0x04;
	#elif ADC_PRESCALER == 32
		ADCSRA &= 0xF8;
		ADCSRA |= 0x05;
	#elif ADC_PRESCALER == 64
		ADCSRA &= 0xF8;
     dea:	a6 e2       	ldi	r26, 0x26	; 38
     dec:	b0 e0       	ldi	r27, 0x00	; 0
     dee:	e6 e2       	ldi	r30, 0x26	; 38
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	80 81       	ld	r24, Z
     df4:	88 7f       	andi	r24, 0xF8	; 248
     df6:	8c 93       	st	X, r24
		ADCSRA |= 0x06;
     df8:	a6 e2       	ldi	r26, 0x26	; 38
     dfa:	b0 e0       	ldi	r27, 0x00	; 0
     dfc:	e6 e2       	ldi	r30, 0x26	; 38
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
     e02:	86 60       	ori	r24, 0x06	; 6
     e04:	8c 93       	st	X, r24
	#endif
	//3- Select Voltage reference for ADC 
	#if   ADC_VOLT_REF == 0
		ADMUX &= 0x3F;
	#elif ADC_VOLT_REF == 1
		CLEAR_BIT(ADMUX, REFS1);
     e06:	a7 e2       	ldi	r26, 0x27	; 39
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	e7 e2       	ldi	r30, 0x27	; 39
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	8f 77       	andi	r24, 0x7F	; 127
     e12:	8c 93       	st	X, r24
		SET_BIT(ADMUX, REFS0);
     e14:	a7 e2       	ldi	r26, 0x27	; 39
     e16:	b0 e0       	ldi	r27, 0x00	; 0
     e18:	e7 e2       	ldi	r30, 0x27	; 39
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	80 64       	ori	r24, 0x40	; 64
     e20:	8c 93       	st	X, r24
		SET_BIT(ADMUX, REFS0);
	#endif
	
	//4- Select Type of Storing of the output
	#if ADC_STORE == 0
		CLEAR_BIT(ADMUX, ADLAR);
     e22:	a7 e2       	ldi	r26, 0x27	; 39
     e24:	b0 e0       	ldi	r27, 0x00	; 0
     e26:	e7 e2       	ldi	r30, 0x27	; 39
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	80 81       	ld	r24, Z
     e2c:	8f 7d       	andi	r24, 0xDF	; 223
     e2e:	8c 93       	st	X, r24
	#else 
		SET_BIT(ADMUX, ADLAR);
	#endif 
	
	//5- Turn on ADC
	SET_BIT(ADCSRA, ADEN);
     e30:	a6 e2       	ldi	r26, 0x26	; 38
     e32:	b0 e0       	ldi	r27, 0x00	; 0
     e34:	e6 e2       	ldi	r30, 0x26	; 38
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	80 81       	ld	r24, Z
     e3a:	80 68       	ori	r24, 0x80	; 128
     e3c:	8c 93       	st	X, r24
	
}
     e3e:	0f 90       	pop	r0
     e40:	cf 91       	pop	r28
     e42:	df 91       	pop	r29
     e44:	08 95       	ret

00000e46 <ADC_u16Read>:

u16  ADC_u16Read(void)
{
     e46:	df 93       	push	r29
     e48:	cf 93       	push	r28
     e4a:	00 d0       	rcall	.+0      	; 0xe4c <ADC_u16Read+0x6>
     e4c:	cd b7       	in	r28, 0x3d	; 61
     e4e:	de b7       	in	r29, 0x3e	; 62
	u16 Return_val;
	//1- Activate Start of Conversion
	SET_BIT(ADCSRA, ADSC);
     e50:	a6 e2       	ldi	r26, 0x26	; 38
     e52:	b0 e0       	ldi	r27, 0x00	; 0
     e54:	e6 e2       	ldi	r30, 0x26	; 38
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	80 64       	ori	r24, 0x40	; 64
     e5c:	8c 93       	st	X, r24
	//2- Wait until conversion Ended
	while(GET_BIT(ADCSRA, ADIF)==0);
     e5e:	e6 e2       	ldi	r30, 0x26	; 38
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	80 81       	ld	r24, Z
     e64:	88 2f       	mov	r24, r24
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	80 71       	andi	r24, 0x10	; 16
     e6a:	90 70       	andi	r25, 0x00	; 0
     e6c:	95 95       	asr	r25
     e6e:	87 95       	ror	r24
     e70:	95 95       	asr	r25
     e72:	87 95       	ror	r24
     e74:	95 95       	asr	r25
     e76:	87 95       	ror	r24
     e78:	95 95       	asr	r25
     e7a:	87 95       	ror	r24
     e7c:	00 97       	sbiw	r24, 0x00	; 0
     e7e:	79 f3       	breq	.-34     	; 0xe5e <ADC_u16Read+0x18>
	//3- Clear Interrupt Flag after Ended
	SET_BIT(ADCSRA, ADIF);
     e80:	a6 e2       	ldi	r26, 0x26	; 38
     e82:	b0 e0       	ldi	r27, 0x00	; 0
     e84:	e6 e2       	ldi	r30, 0x26	; 38
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	80 81       	ld	r24, Z
     e8a:	80 61       	ori	r24, 0x10	; 16
     e8c:	8c 93       	st	X, r24
	//4- Read ADCL then ADCH in order
	Return_val = ADCL;
     e8e:	e4 e2       	ldi	r30, 0x24	; 36
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	88 2f       	mov	r24, r24
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	9a 83       	std	Y+2, r25	; 0x02
     e9a:	89 83       	std	Y+1, r24	; 0x01
	Return_val |= (ADCH << 8);
     e9c:	e5 e2       	ldi	r30, 0x25	; 37
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	88 2f       	mov	r24, r24
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	98 2f       	mov	r25, r24
     ea8:	88 27       	eor	r24, r24
     eaa:	9c 01       	movw	r18, r24
     eac:	89 81       	ldd	r24, Y+1	; 0x01
     eae:	9a 81       	ldd	r25, Y+2	; 0x02
     eb0:	82 2b       	or	r24, r18
     eb2:	93 2b       	or	r25, r19
     eb4:	9a 83       	std	Y+2, r25	; 0x02
     eb6:	89 83       	std	Y+1, r24	; 0x01
	return Return_val;
     eb8:	89 81       	ldd	r24, Y+1	; 0x01
     eba:	9a 81       	ldd	r25, Y+2	; 0x02
}
     ebc:	0f 90       	pop	r0
     ebe:	0f 90       	pop	r0
     ec0:	cf 91       	pop	r28
     ec2:	df 91       	pop	r29
     ec4:	08 95       	ret

00000ec6 <EXTI_voidInit>:
void (* Global_CBINT2)(void);



	void EXTI_voidInit(u8 copy_u8IntNum , void (* copy_CB)(void))
	{
     ec6:	df 93       	push	r29
     ec8:	cf 93       	push	r28
     eca:	00 d0       	rcall	.+0      	; 0xecc <EXTI_voidInit+0x6>
     ecc:	00 d0       	rcall	.+0      	; 0xece <EXTI_voidInit+0x8>
     ece:	0f 92       	push	r0
     ed0:	cd b7       	in	r28, 0x3d	; 61
     ed2:	de b7       	in	r29, 0x3e	; 62
     ed4:	89 83       	std	Y+1, r24	; 0x01
     ed6:	7b 83       	std	Y+3, r23	; 0x03
     ed8:	6a 83       	std	Y+2, r22	; 0x02
		SET_BIT(SREG , GI);
     eda:	af e5       	ldi	r26, 0x5F	; 95
     edc:	b0 e0       	ldi	r27, 0x00	; 0
     ede:	ef e5       	ldi	r30, 0x5F	; 95
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	80 81       	ld	r24, Z
     ee4:	80 68       	ori	r24, 0x80	; 128
     ee6:	8c 93       	st	X, r24
		
		switch (copy_u8IntNum) 
     ee8:	89 81       	ldd	r24, Y+1	; 0x01
     eea:	28 2f       	mov	r18, r24
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	3d 83       	std	Y+5, r19	; 0x05
     ef0:	2c 83       	std	Y+4, r18	; 0x04
     ef2:	8c 81       	ldd	r24, Y+4	; 0x04
     ef4:	9d 81       	ldd	r25, Y+5	; 0x05
     ef6:	81 30       	cpi	r24, 0x01	; 1
     ef8:	91 05       	cpc	r25, r1
     efa:	31 f1       	breq	.+76     	; 0xf48 <EXTI_voidInit+0x82>
     efc:	2c 81       	ldd	r18, Y+4	; 0x04
     efe:	3d 81       	ldd	r19, Y+5	; 0x05
     f00:	22 30       	cpi	r18, 0x02	; 2
     f02:	31 05       	cpc	r19, r1
     f04:	b1 f1       	breq	.+108    	; 0xf72 <EXTI_voidInit+0xac>
     f06:	8c 81       	ldd	r24, Y+4	; 0x04
     f08:	9d 81       	ldd	r25, Y+5	; 0x05
     f0a:	00 97       	sbiw	r24, 0x00	; 0
     f0c:	09 f0       	breq	.+2      	; 0xf10 <EXTI_voidInit+0x4a>
     f0e:	45 c0       	rjmp	.+138    	; 0xf9a <EXTI_voidInit+0xd4>
		{
			case EXTI_INT0 :
			SET_BIT (GICR , INT0 );
     f10:	ab e5       	ldi	r26, 0x5B	; 91
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	eb e5       	ldi	r30, 0x5B	; 91
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	80 64       	ori	r24, 0x40	; 64
     f1c:	8c 93       	st	X, r24
			SET_BIT(GIFR, INTF0);
     f1e:	aa e5       	ldi	r26, 0x5A	; 90
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	ea e5       	ldi	r30, 0x5A	; 90
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	80 64       	ori	r24, 0x40	; 64
     f2a:	8c 93       	st	X, r24
			CLEAR_BIT(DDRD , 2 );
     f2c:	a1 e3       	ldi	r26, 0x31	; 49
     f2e:	b0 e0       	ldi	r27, 0x00	; 0
     f30:	e1 e3       	ldi	r30, 0x31	; 49
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	8b 7f       	andi	r24, 0xFB	; 251
     f38:	8c 93       	st	X, r24
			Global_CBINT0 = copy_CB ;
     f3a:	8a 81       	ldd	r24, Y+2	; 0x02
     f3c:	9b 81       	ldd	r25, Y+3	; 0x03
     f3e:	90 93 7b 01 	sts	0x017B, r25
     f42:	80 93 7a 01 	sts	0x017A, r24
     f46:	29 c0       	rjmp	.+82     	; 0xf9a <EXTI_voidInit+0xd4>
			break ; 
			
			case EXTI_INT1 :
			SET_BIT (GICR , INT1 );
     f48:	ab e5       	ldi	r26, 0x5B	; 91
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	eb e5       	ldi	r30, 0x5B	; 91
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	80 81       	ld	r24, Z
     f52:	80 68       	ori	r24, 0x80	; 128
     f54:	8c 93       	st	X, r24
			CLEAR_BIT(DDRD , 3 );
     f56:	a1 e3       	ldi	r26, 0x31	; 49
     f58:	b0 e0       	ldi	r27, 0x00	; 0
     f5a:	e1 e3       	ldi	r30, 0x31	; 49
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	87 7f       	andi	r24, 0xF7	; 247
     f62:	8c 93       	st	X, r24
			Global_CBINT1 = copy_CB ;
     f64:	8a 81       	ldd	r24, Y+2	; 0x02
     f66:	9b 81       	ldd	r25, Y+3	; 0x03
     f68:	90 93 7d 01 	sts	0x017D, r25
     f6c:	80 93 7c 01 	sts	0x017C, r24
     f70:	14 c0       	rjmp	.+40     	; 0xf9a <EXTI_voidInit+0xd4>
			break ; 
			
			case EXTI_INT2 :
			SET_BIT (GICR , INT2 );
     f72:	ab e5       	ldi	r26, 0x5B	; 91
     f74:	b0 e0       	ldi	r27, 0x00	; 0
     f76:	eb e5       	ldi	r30, 0x5B	; 91
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	80 62       	ori	r24, 0x20	; 32
     f7e:	8c 93       	st	X, r24
			CLEAR_BIT(DDRB , 2 );
     f80:	a7 e3       	ldi	r26, 0x37	; 55
     f82:	b0 e0       	ldi	r27, 0x00	; 0
     f84:	e7 e3       	ldi	r30, 0x37	; 55
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	8b 7f       	andi	r24, 0xFB	; 251
     f8c:	8c 93       	st	X, r24
			Global_CBINT2 = copy_CB ;
     f8e:	8a 81       	ldd	r24, Y+2	; 0x02
     f90:	9b 81       	ldd	r25, Y+3	; 0x03
     f92:	90 93 79 01 	sts	0x0179, r25
     f96:	80 93 78 01 	sts	0x0178, r24
			
			default :
			break ;
			
		}
	}
     f9a:	0f 90       	pop	r0
     f9c:	0f 90       	pop	r0
     f9e:	0f 90       	pop	r0
     fa0:	0f 90       	pop	r0
     fa2:	0f 90       	pop	r0
     fa4:	cf 91       	pop	r28
     fa6:	df 91       	pop	r29
     fa8:	08 95       	ret

00000faa <__vector_1>:
	ISR(INT0_vect)
	{
     faa:	1f 92       	push	r1
     fac:	0f 92       	push	r0
     fae:	0f b6       	in	r0, 0x3f	; 63
     fb0:	0f 92       	push	r0
     fb2:	11 24       	eor	r1, r1
     fb4:	2f 93       	push	r18
     fb6:	3f 93       	push	r19
     fb8:	4f 93       	push	r20
     fba:	5f 93       	push	r21
     fbc:	6f 93       	push	r22
     fbe:	7f 93       	push	r23
     fc0:	8f 93       	push	r24
     fc2:	9f 93       	push	r25
     fc4:	af 93       	push	r26
     fc6:	bf 93       	push	r27
     fc8:	ef 93       	push	r30
     fca:	ff 93       	push	r31
     fcc:	df 93       	push	r29
     fce:	cf 93       	push	r28
     fd0:	cd b7       	in	r28, 0x3d	; 61
     fd2:	de b7       	in	r29, 0x3e	; 62
		(*Global_CBINT0)();
     fd4:	e0 91 7a 01 	lds	r30, 0x017A
     fd8:	f0 91 7b 01 	lds	r31, 0x017B
     fdc:	09 95       	icall
	}
     fde:	cf 91       	pop	r28
     fe0:	df 91       	pop	r29
     fe2:	ff 91       	pop	r31
     fe4:	ef 91       	pop	r30
     fe6:	bf 91       	pop	r27
     fe8:	af 91       	pop	r26
     fea:	9f 91       	pop	r25
     fec:	8f 91       	pop	r24
     fee:	7f 91       	pop	r23
     ff0:	6f 91       	pop	r22
     ff2:	5f 91       	pop	r21
     ff4:	4f 91       	pop	r20
     ff6:	3f 91       	pop	r19
     ff8:	2f 91       	pop	r18
     ffa:	0f 90       	pop	r0
     ffc:	0f be       	out	0x3f, r0	; 63
     ffe:	0f 90       	pop	r0
    1000:	1f 90       	pop	r1
    1002:	18 95       	reti

00001004 <__vector_2>:
	ISR(INT1_vect)
	{
    1004:	1f 92       	push	r1
    1006:	0f 92       	push	r0
    1008:	0f b6       	in	r0, 0x3f	; 63
    100a:	0f 92       	push	r0
    100c:	11 24       	eor	r1, r1
    100e:	2f 93       	push	r18
    1010:	3f 93       	push	r19
    1012:	4f 93       	push	r20
    1014:	5f 93       	push	r21
    1016:	6f 93       	push	r22
    1018:	7f 93       	push	r23
    101a:	8f 93       	push	r24
    101c:	9f 93       	push	r25
    101e:	af 93       	push	r26
    1020:	bf 93       	push	r27
    1022:	ef 93       	push	r30
    1024:	ff 93       	push	r31
    1026:	df 93       	push	r29
    1028:	cf 93       	push	r28
    102a:	cd b7       	in	r28, 0x3d	; 61
    102c:	de b7       	in	r29, 0x3e	; 62
		(*Global_CBINT1)();
    102e:	e0 91 7c 01 	lds	r30, 0x017C
    1032:	f0 91 7d 01 	lds	r31, 0x017D
    1036:	09 95       	icall
	}
    1038:	cf 91       	pop	r28
    103a:	df 91       	pop	r29
    103c:	ff 91       	pop	r31
    103e:	ef 91       	pop	r30
    1040:	bf 91       	pop	r27
    1042:	af 91       	pop	r26
    1044:	9f 91       	pop	r25
    1046:	8f 91       	pop	r24
    1048:	7f 91       	pop	r23
    104a:	6f 91       	pop	r22
    104c:	5f 91       	pop	r21
    104e:	4f 91       	pop	r20
    1050:	3f 91       	pop	r19
    1052:	2f 91       	pop	r18
    1054:	0f 90       	pop	r0
    1056:	0f be       	out	0x3f, r0	; 63
    1058:	0f 90       	pop	r0
    105a:	1f 90       	pop	r1
    105c:	18 95       	reti

0000105e <__vector_3>:
	ISR(INT2_vect)
	{
    105e:	1f 92       	push	r1
    1060:	0f 92       	push	r0
    1062:	0f b6       	in	r0, 0x3f	; 63
    1064:	0f 92       	push	r0
    1066:	11 24       	eor	r1, r1
    1068:	2f 93       	push	r18
    106a:	3f 93       	push	r19
    106c:	4f 93       	push	r20
    106e:	5f 93       	push	r21
    1070:	6f 93       	push	r22
    1072:	7f 93       	push	r23
    1074:	8f 93       	push	r24
    1076:	9f 93       	push	r25
    1078:	af 93       	push	r26
    107a:	bf 93       	push	r27
    107c:	ef 93       	push	r30
    107e:	ff 93       	push	r31
    1080:	df 93       	push	r29
    1082:	cf 93       	push	r28
    1084:	cd b7       	in	r28, 0x3d	; 61
    1086:	de b7       	in	r29, 0x3e	; 62
		(*Global_CBINT2)();
    1088:	e0 91 78 01 	lds	r30, 0x0178
    108c:	f0 91 79 01 	lds	r31, 0x0179
    1090:	09 95       	icall
	}
    1092:	cf 91       	pop	r28
    1094:	df 91       	pop	r29
    1096:	ff 91       	pop	r31
    1098:	ef 91       	pop	r30
    109a:	bf 91       	pop	r27
    109c:	af 91       	pop	r26
    109e:	9f 91       	pop	r25
    10a0:	8f 91       	pop	r24
    10a2:	7f 91       	pop	r23
    10a4:	6f 91       	pop	r22
    10a6:	5f 91       	pop	r21
    10a8:	4f 91       	pop	r20
    10aa:	3f 91       	pop	r19
    10ac:	2f 91       	pop	r18
    10ae:	0f 90       	pop	r0
    10b0:	0f be       	out	0x3f, r0	; 63
    10b2:	0f 90       	pop	r0
    10b4:	1f 90       	pop	r1
    10b6:	18 95       	reti

000010b8 <GPIO_voidSetPinDDR>:




	void GPIO_voidSetPinDDR (u8  copy_u8Port ,u8 copy_u8Pin , u8 copy_u8Mode )
	{
    10b8:	df 93       	push	r29
    10ba:	cf 93       	push	r28
    10bc:	00 d0       	rcall	.+0      	; 0x10be <GPIO_voidSetPinDDR+0x6>
    10be:	00 d0       	rcall	.+0      	; 0x10c0 <GPIO_voidSetPinDDR+0x8>
    10c0:	0f 92       	push	r0
    10c2:	cd b7       	in	r28, 0x3d	; 61
    10c4:	de b7       	in	r29, 0x3e	; 62
    10c6:	89 83       	std	Y+1, r24	; 0x01
    10c8:	6a 83       	std	Y+2, r22	; 0x02
    10ca:	4b 83       	std	Y+3, r20	; 0x03
		switch(copy_u8Port)
    10cc:	89 81       	ldd	r24, Y+1	; 0x01
    10ce:	28 2f       	mov	r18, r24
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	3d 83       	std	Y+5, r19	; 0x05
    10d4:	2c 83       	std	Y+4, r18	; 0x04
    10d6:	8c 81       	ldd	r24, Y+4	; 0x04
    10d8:	9d 81       	ldd	r25, Y+5	; 0x05
    10da:	81 30       	cpi	r24, 0x01	; 1
    10dc:	91 05       	cpc	r25, r1
    10de:	09 f4       	brne	.+2      	; 0x10e2 <GPIO_voidSetPinDDR+0x2a>
    10e0:	43 c0       	rjmp	.+134    	; 0x1168 <GPIO_voidSetPinDDR+0xb0>
    10e2:	2c 81       	ldd	r18, Y+4	; 0x04
    10e4:	3d 81       	ldd	r19, Y+5	; 0x05
    10e6:	22 30       	cpi	r18, 0x02	; 2
    10e8:	31 05       	cpc	r19, r1
    10ea:	2c f4       	brge	.+10     	; 0x10f6 <GPIO_voidSetPinDDR+0x3e>
    10ec:	8c 81       	ldd	r24, Y+4	; 0x04
    10ee:	9d 81       	ldd	r25, Y+5	; 0x05
    10f0:	00 97       	sbiw	r24, 0x00	; 0
    10f2:	71 f0       	breq	.+28     	; 0x1110 <GPIO_voidSetPinDDR+0x58>
    10f4:	bc c0       	rjmp	.+376    	; 0x126e <GPIO_voidSetPinDDR+0x1b6>
    10f6:	2c 81       	ldd	r18, Y+4	; 0x04
    10f8:	3d 81       	ldd	r19, Y+5	; 0x05
    10fa:	22 30       	cpi	r18, 0x02	; 2
    10fc:	31 05       	cpc	r19, r1
    10fe:	09 f4       	brne	.+2      	; 0x1102 <GPIO_voidSetPinDDR+0x4a>
    1100:	5f c0       	rjmp	.+190    	; 0x11c0 <GPIO_voidSetPinDDR+0x108>
    1102:	8c 81       	ldd	r24, Y+4	; 0x04
    1104:	9d 81       	ldd	r25, Y+5	; 0x05
    1106:	83 30       	cpi	r24, 0x03	; 3
    1108:	91 05       	cpc	r25, r1
    110a:	09 f4       	brne	.+2      	; 0x110e <GPIO_voidSetPinDDR+0x56>
    110c:	85 c0       	rjmp	.+266    	; 0x1218 <GPIO_voidSetPinDDR+0x160>
    110e:	af c0       	rjmp	.+350    	; 0x126e <GPIO_voidSetPinDDR+0x1b6>
		{
			case GPIOA :
				if(copy_u8Mode ==OUTPUT )
    1110:	8b 81       	ldd	r24, Y+3	; 0x03
    1112:	81 30       	cpi	r24, 0x01	; 1
    1114:	a1 f4       	brne	.+40     	; 0x113e <GPIO_voidSetPinDDR+0x86>
				{
					SET_BIT(DDRA ,copy_u8Pin);
    1116:	aa e3       	ldi	r26, 0x3A	; 58
    1118:	b0 e0       	ldi	r27, 0x00	; 0
    111a:	ea e3       	ldi	r30, 0x3A	; 58
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	80 81       	ld	r24, Z
    1120:	48 2f       	mov	r20, r24
    1122:	8a 81       	ldd	r24, Y+2	; 0x02
    1124:	28 2f       	mov	r18, r24
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	02 2e       	mov	r0, r18
    112e:	02 c0       	rjmp	.+4      	; 0x1134 <GPIO_voidSetPinDDR+0x7c>
    1130:	88 0f       	add	r24, r24
    1132:	99 1f       	adc	r25, r25
    1134:	0a 94       	dec	r0
    1136:	e2 f7       	brpl	.-8      	; 0x1130 <GPIO_voidSetPinDDR+0x78>
    1138:	84 2b       	or	r24, r20
    113a:	8c 93       	st	X, r24
    113c:	98 c0       	rjmp	.+304    	; 0x126e <GPIO_voidSetPinDDR+0x1b6>
				}
				else {
					CLEAR_BIT(DDRA,copy_u8Pin);
    113e:	aa e3       	ldi	r26, 0x3A	; 58
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	ea e3       	ldi	r30, 0x3A	; 58
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	48 2f       	mov	r20, r24
    114a:	8a 81       	ldd	r24, Y+2	; 0x02
    114c:	28 2f       	mov	r18, r24
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	02 2e       	mov	r0, r18
    1156:	02 c0       	rjmp	.+4      	; 0x115c <GPIO_voidSetPinDDR+0xa4>
    1158:	88 0f       	add	r24, r24
    115a:	99 1f       	adc	r25, r25
    115c:	0a 94       	dec	r0
    115e:	e2 f7       	brpl	.-8      	; 0x1158 <GPIO_voidSetPinDDR+0xa0>
    1160:	80 95       	com	r24
    1162:	84 23       	and	r24, r20
    1164:	8c 93       	st	X, r24
    1166:	83 c0       	rjmp	.+262    	; 0x126e <GPIO_voidSetPinDDR+0x1b6>
				}
				break;
			case GPIOB :
				if(copy_u8Mode ==OUTPUT )
    1168:	8b 81       	ldd	r24, Y+3	; 0x03
    116a:	81 30       	cpi	r24, 0x01	; 1
    116c:	a1 f4       	brne	.+40     	; 0x1196 <GPIO_voidSetPinDDR+0xde>
				{
					SET_BIT(DDRB ,copy_u8Pin);
    116e:	a7 e3       	ldi	r26, 0x37	; 55
    1170:	b0 e0       	ldi	r27, 0x00	; 0
    1172:	e7 e3       	ldi	r30, 0x37	; 55
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	80 81       	ld	r24, Z
    1178:	48 2f       	mov	r20, r24
    117a:	8a 81       	ldd	r24, Y+2	; 0x02
    117c:	28 2f       	mov	r18, r24
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	02 2e       	mov	r0, r18
    1186:	02 c0       	rjmp	.+4      	; 0x118c <GPIO_voidSetPinDDR+0xd4>
    1188:	88 0f       	add	r24, r24
    118a:	99 1f       	adc	r25, r25
    118c:	0a 94       	dec	r0
    118e:	e2 f7       	brpl	.-8      	; 0x1188 <GPIO_voidSetPinDDR+0xd0>
    1190:	84 2b       	or	r24, r20
    1192:	8c 93       	st	X, r24
    1194:	6c c0       	rjmp	.+216    	; 0x126e <GPIO_voidSetPinDDR+0x1b6>
				}
				else {
					CLEAR_BIT(DDRB,copy_u8Pin);
    1196:	a7 e3       	ldi	r26, 0x37	; 55
    1198:	b0 e0       	ldi	r27, 0x00	; 0
    119a:	e7 e3       	ldi	r30, 0x37	; 55
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	80 81       	ld	r24, Z
    11a0:	48 2f       	mov	r20, r24
    11a2:	8a 81       	ldd	r24, Y+2	; 0x02
    11a4:	28 2f       	mov	r18, r24
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	02 2e       	mov	r0, r18
    11ae:	02 c0       	rjmp	.+4      	; 0x11b4 <GPIO_voidSetPinDDR+0xfc>
    11b0:	88 0f       	add	r24, r24
    11b2:	99 1f       	adc	r25, r25
    11b4:	0a 94       	dec	r0
    11b6:	e2 f7       	brpl	.-8      	; 0x11b0 <GPIO_voidSetPinDDR+0xf8>
    11b8:	80 95       	com	r24
    11ba:	84 23       	and	r24, r20
    11bc:	8c 93       	st	X, r24
    11be:	57 c0       	rjmp	.+174    	; 0x126e <GPIO_voidSetPinDDR+0x1b6>
				}
				break;
			case GPIOC :
				if(copy_u8Mode ==OUTPUT )
    11c0:	8b 81       	ldd	r24, Y+3	; 0x03
    11c2:	81 30       	cpi	r24, 0x01	; 1
    11c4:	a1 f4       	brne	.+40     	; 0x11ee <GPIO_voidSetPinDDR+0x136>
				{
					SET_BIT(DDRC ,copy_u8Pin);
    11c6:	a4 e3       	ldi	r26, 0x34	; 52
    11c8:	b0 e0       	ldi	r27, 0x00	; 0
    11ca:	e4 e3       	ldi	r30, 0x34	; 52
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	48 2f       	mov	r20, r24
    11d2:	8a 81       	ldd	r24, Y+2	; 0x02
    11d4:	28 2f       	mov	r18, r24
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	81 e0       	ldi	r24, 0x01	; 1
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	02 2e       	mov	r0, r18
    11de:	02 c0       	rjmp	.+4      	; 0x11e4 <GPIO_voidSetPinDDR+0x12c>
    11e0:	88 0f       	add	r24, r24
    11e2:	99 1f       	adc	r25, r25
    11e4:	0a 94       	dec	r0
    11e6:	e2 f7       	brpl	.-8      	; 0x11e0 <GPIO_voidSetPinDDR+0x128>
    11e8:	84 2b       	or	r24, r20
    11ea:	8c 93       	st	X, r24
    11ec:	40 c0       	rjmp	.+128    	; 0x126e <GPIO_voidSetPinDDR+0x1b6>
				}
				else {
					CLEAR_BIT(DDRC,copy_u8Pin);
    11ee:	a4 e3       	ldi	r26, 0x34	; 52
    11f0:	b0 e0       	ldi	r27, 0x00	; 0
    11f2:	e4 e3       	ldi	r30, 0x34	; 52
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	80 81       	ld	r24, Z
    11f8:	48 2f       	mov	r20, r24
    11fa:	8a 81       	ldd	r24, Y+2	; 0x02
    11fc:	28 2f       	mov	r18, r24
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	02 2e       	mov	r0, r18
    1206:	02 c0       	rjmp	.+4      	; 0x120c <GPIO_voidSetPinDDR+0x154>
    1208:	88 0f       	add	r24, r24
    120a:	99 1f       	adc	r25, r25
    120c:	0a 94       	dec	r0
    120e:	e2 f7       	brpl	.-8      	; 0x1208 <GPIO_voidSetPinDDR+0x150>
    1210:	80 95       	com	r24
    1212:	84 23       	and	r24, r20
    1214:	8c 93       	st	X, r24
    1216:	2b c0       	rjmp	.+86     	; 0x126e <GPIO_voidSetPinDDR+0x1b6>
				}
				break;
			case GPIOD :
				if(copy_u8Mode ==OUTPUT )
    1218:	8b 81       	ldd	r24, Y+3	; 0x03
    121a:	81 30       	cpi	r24, 0x01	; 1
    121c:	a1 f4       	brne	.+40     	; 0x1246 <GPIO_voidSetPinDDR+0x18e>
				{
					SET_BIT(DDRD ,copy_u8Pin);
    121e:	a1 e3       	ldi	r26, 0x31	; 49
    1220:	b0 e0       	ldi	r27, 0x00	; 0
    1222:	e1 e3       	ldi	r30, 0x31	; 49
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	80 81       	ld	r24, Z
    1228:	48 2f       	mov	r20, r24
    122a:	8a 81       	ldd	r24, Y+2	; 0x02
    122c:	28 2f       	mov	r18, r24
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	02 2e       	mov	r0, r18
    1236:	02 c0       	rjmp	.+4      	; 0x123c <GPIO_voidSetPinDDR+0x184>
    1238:	88 0f       	add	r24, r24
    123a:	99 1f       	adc	r25, r25
    123c:	0a 94       	dec	r0
    123e:	e2 f7       	brpl	.-8      	; 0x1238 <GPIO_voidSetPinDDR+0x180>
    1240:	84 2b       	or	r24, r20
    1242:	8c 93       	st	X, r24
    1244:	14 c0       	rjmp	.+40     	; 0x126e <GPIO_voidSetPinDDR+0x1b6>
				}
				else {
					CLEAR_BIT(DDRD,copy_u8Pin);
    1246:	a1 e3       	ldi	r26, 0x31	; 49
    1248:	b0 e0       	ldi	r27, 0x00	; 0
    124a:	e1 e3       	ldi	r30, 0x31	; 49
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	80 81       	ld	r24, Z
    1250:	48 2f       	mov	r20, r24
    1252:	8a 81       	ldd	r24, Y+2	; 0x02
    1254:	28 2f       	mov	r18, r24
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	02 2e       	mov	r0, r18
    125e:	02 c0       	rjmp	.+4      	; 0x1264 <GPIO_voidSetPinDDR+0x1ac>
    1260:	88 0f       	add	r24, r24
    1262:	99 1f       	adc	r25, r25
    1264:	0a 94       	dec	r0
    1266:	e2 f7       	brpl	.-8      	; 0x1260 <GPIO_voidSetPinDDR+0x1a8>
    1268:	80 95       	com	r24
    126a:	84 23       	and	r24, r20
    126c:	8c 93       	st	X, r24
				}
				break;	
			default:
				break;
		}
	}
    126e:	0f 90       	pop	r0
    1270:	0f 90       	pop	r0
    1272:	0f 90       	pop	r0
    1274:	0f 90       	pop	r0
    1276:	0f 90       	pop	r0
    1278:	cf 91       	pop	r28
    127a:	df 91       	pop	r29
    127c:	08 95       	ret

0000127e <GPIO_voidWritePin>:
	
	void GPIO_voidWritePin (u8  copy_u8Port ,u8 copy_u8Pin , u8 copy_u8Value )
	{
    127e:	df 93       	push	r29
    1280:	cf 93       	push	r28
    1282:	00 d0       	rcall	.+0      	; 0x1284 <GPIO_voidWritePin+0x6>
    1284:	00 d0       	rcall	.+0      	; 0x1286 <GPIO_voidWritePin+0x8>
    1286:	0f 92       	push	r0
    1288:	cd b7       	in	r28, 0x3d	; 61
    128a:	de b7       	in	r29, 0x3e	; 62
    128c:	89 83       	std	Y+1, r24	; 0x01
    128e:	6a 83       	std	Y+2, r22	; 0x02
    1290:	4b 83       	std	Y+3, r20	; 0x03
		switch(copy_u8Port)
    1292:	89 81       	ldd	r24, Y+1	; 0x01
    1294:	28 2f       	mov	r18, r24
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	3d 83       	std	Y+5, r19	; 0x05
    129a:	2c 83       	std	Y+4, r18	; 0x04
    129c:	8c 81       	ldd	r24, Y+4	; 0x04
    129e:	9d 81       	ldd	r25, Y+5	; 0x05
    12a0:	81 30       	cpi	r24, 0x01	; 1
    12a2:	91 05       	cpc	r25, r1
    12a4:	09 f4       	brne	.+2      	; 0x12a8 <GPIO_voidWritePin+0x2a>
    12a6:	43 c0       	rjmp	.+134    	; 0x132e <GPIO_voidWritePin+0xb0>
    12a8:	2c 81       	ldd	r18, Y+4	; 0x04
    12aa:	3d 81       	ldd	r19, Y+5	; 0x05
    12ac:	22 30       	cpi	r18, 0x02	; 2
    12ae:	31 05       	cpc	r19, r1
    12b0:	2c f4       	brge	.+10     	; 0x12bc <GPIO_voidWritePin+0x3e>
    12b2:	8c 81       	ldd	r24, Y+4	; 0x04
    12b4:	9d 81       	ldd	r25, Y+5	; 0x05
    12b6:	00 97       	sbiw	r24, 0x00	; 0
    12b8:	71 f0       	breq	.+28     	; 0x12d6 <GPIO_voidWritePin+0x58>
    12ba:	bc c0       	rjmp	.+376    	; 0x1434 <GPIO_voidWritePin+0x1b6>
    12bc:	2c 81       	ldd	r18, Y+4	; 0x04
    12be:	3d 81       	ldd	r19, Y+5	; 0x05
    12c0:	22 30       	cpi	r18, 0x02	; 2
    12c2:	31 05       	cpc	r19, r1
    12c4:	09 f4       	brne	.+2      	; 0x12c8 <GPIO_voidWritePin+0x4a>
    12c6:	5f c0       	rjmp	.+190    	; 0x1386 <GPIO_voidWritePin+0x108>
    12c8:	8c 81       	ldd	r24, Y+4	; 0x04
    12ca:	9d 81       	ldd	r25, Y+5	; 0x05
    12cc:	83 30       	cpi	r24, 0x03	; 3
    12ce:	91 05       	cpc	r25, r1
    12d0:	09 f4       	brne	.+2      	; 0x12d4 <GPIO_voidWritePin+0x56>
    12d2:	85 c0       	rjmp	.+266    	; 0x13de <GPIO_voidWritePin+0x160>
    12d4:	af c0       	rjmp	.+350    	; 0x1434 <GPIO_voidWritePin+0x1b6>
		{
			case GPIOA :
				if(copy_u8Value ==HIGH )
    12d6:	8b 81       	ldd	r24, Y+3	; 0x03
    12d8:	81 30       	cpi	r24, 0x01	; 1
    12da:	a1 f4       	brne	.+40     	; 0x1304 <GPIO_voidWritePin+0x86>
				{
					SET_BIT(PORTA ,copy_u8Pin);
    12dc:	ab e3       	ldi	r26, 0x3B	; 59
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	eb e3       	ldi	r30, 0x3B	; 59
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	48 2f       	mov	r20, r24
    12e8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ea:	28 2f       	mov	r18, r24
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	02 2e       	mov	r0, r18
    12f4:	02 c0       	rjmp	.+4      	; 0x12fa <GPIO_voidWritePin+0x7c>
    12f6:	88 0f       	add	r24, r24
    12f8:	99 1f       	adc	r25, r25
    12fa:	0a 94       	dec	r0
    12fc:	e2 f7       	brpl	.-8      	; 0x12f6 <GPIO_voidWritePin+0x78>
    12fe:	84 2b       	or	r24, r20
    1300:	8c 93       	st	X, r24
    1302:	98 c0       	rjmp	.+304    	; 0x1434 <GPIO_voidWritePin+0x1b6>
				}
				else {
					CLEAR_BIT(PORTA,copy_u8Pin);
    1304:	ab e3       	ldi	r26, 0x3B	; 59
    1306:	b0 e0       	ldi	r27, 0x00	; 0
    1308:	eb e3       	ldi	r30, 0x3B	; 59
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	80 81       	ld	r24, Z
    130e:	48 2f       	mov	r20, r24
    1310:	8a 81       	ldd	r24, Y+2	; 0x02
    1312:	28 2f       	mov	r18, r24
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	02 2e       	mov	r0, r18
    131c:	02 c0       	rjmp	.+4      	; 0x1322 <GPIO_voidWritePin+0xa4>
    131e:	88 0f       	add	r24, r24
    1320:	99 1f       	adc	r25, r25
    1322:	0a 94       	dec	r0
    1324:	e2 f7       	brpl	.-8      	; 0x131e <GPIO_voidWritePin+0xa0>
    1326:	80 95       	com	r24
    1328:	84 23       	and	r24, r20
    132a:	8c 93       	st	X, r24
    132c:	83 c0       	rjmp	.+262    	; 0x1434 <GPIO_voidWritePin+0x1b6>
				}
				break;
			case GPIOB :
				if(copy_u8Value ==HIGH )
    132e:	8b 81       	ldd	r24, Y+3	; 0x03
    1330:	81 30       	cpi	r24, 0x01	; 1
    1332:	a1 f4       	brne	.+40     	; 0x135c <GPIO_voidWritePin+0xde>
				{
					SET_BIT(PORTB ,copy_u8Pin);
    1334:	a8 e3       	ldi	r26, 0x38	; 56
    1336:	b0 e0       	ldi	r27, 0x00	; 0
    1338:	e8 e3       	ldi	r30, 0x38	; 56
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	80 81       	ld	r24, Z
    133e:	48 2f       	mov	r20, r24
    1340:	8a 81       	ldd	r24, Y+2	; 0x02
    1342:	28 2f       	mov	r18, r24
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	02 2e       	mov	r0, r18
    134c:	02 c0       	rjmp	.+4      	; 0x1352 <GPIO_voidWritePin+0xd4>
    134e:	88 0f       	add	r24, r24
    1350:	99 1f       	adc	r25, r25
    1352:	0a 94       	dec	r0
    1354:	e2 f7       	brpl	.-8      	; 0x134e <GPIO_voidWritePin+0xd0>
    1356:	84 2b       	or	r24, r20
    1358:	8c 93       	st	X, r24
    135a:	6c c0       	rjmp	.+216    	; 0x1434 <GPIO_voidWritePin+0x1b6>
				}
				else {
					CLEAR_BIT(PORTB,copy_u8Pin);
    135c:	a8 e3       	ldi	r26, 0x38	; 56
    135e:	b0 e0       	ldi	r27, 0x00	; 0
    1360:	e8 e3       	ldi	r30, 0x38	; 56
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	80 81       	ld	r24, Z
    1366:	48 2f       	mov	r20, r24
    1368:	8a 81       	ldd	r24, Y+2	; 0x02
    136a:	28 2f       	mov	r18, r24
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	02 2e       	mov	r0, r18
    1374:	02 c0       	rjmp	.+4      	; 0x137a <GPIO_voidWritePin+0xfc>
    1376:	88 0f       	add	r24, r24
    1378:	99 1f       	adc	r25, r25
    137a:	0a 94       	dec	r0
    137c:	e2 f7       	brpl	.-8      	; 0x1376 <GPIO_voidWritePin+0xf8>
    137e:	80 95       	com	r24
    1380:	84 23       	and	r24, r20
    1382:	8c 93       	st	X, r24
    1384:	57 c0       	rjmp	.+174    	; 0x1434 <GPIO_voidWritePin+0x1b6>
				}
				break;
			case GPIOC :
				if(copy_u8Value ==HIGH )
    1386:	8b 81       	ldd	r24, Y+3	; 0x03
    1388:	81 30       	cpi	r24, 0x01	; 1
    138a:	a1 f4       	brne	.+40     	; 0x13b4 <GPIO_voidWritePin+0x136>
				{
					SET_BIT(PORTC ,copy_u8Pin);
    138c:	a5 e3       	ldi	r26, 0x35	; 53
    138e:	b0 e0       	ldi	r27, 0x00	; 0
    1390:	e5 e3       	ldi	r30, 0x35	; 53
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	80 81       	ld	r24, Z
    1396:	48 2f       	mov	r20, r24
    1398:	8a 81       	ldd	r24, Y+2	; 0x02
    139a:	28 2f       	mov	r18, r24
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	02 2e       	mov	r0, r18
    13a4:	02 c0       	rjmp	.+4      	; 0x13aa <GPIO_voidWritePin+0x12c>
    13a6:	88 0f       	add	r24, r24
    13a8:	99 1f       	adc	r25, r25
    13aa:	0a 94       	dec	r0
    13ac:	e2 f7       	brpl	.-8      	; 0x13a6 <GPIO_voidWritePin+0x128>
    13ae:	84 2b       	or	r24, r20
    13b0:	8c 93       	st	X, r24
    13b2:	40 c0       	rjmp	.+128    	; 0x1434 <GPIO_voidWritePin+0x1b6>
				}
				else {
					CLEAR_BIT(PORTC,copy_u8Pin);
    13b4:	a5 e3       	ldi	r26, 0x35	; 53
    13b6:	b0 e0       	ldi	r27, 0x00	; 0
    13b8:	e5 e3       	ldi	r30, 0x35	; 53
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	80 81       	ld	r24, Z
    13be:	48 2f       	mov	r20, r24
    13c0:	8a 81       	ldd	r24, Y+2	; 0x02
    13c2:	28 2f       	mov	r18, r24
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	02 2e       	mov	r0, r18
    13cc:	02 c0       	rjmp	.+4      	; 0x13d2 <GPIO_voidWritePin+0x154>
    13ce:	88 0f       	add	r24, r24
    13d0:	99 1f       	adc	r25, r25
    13d2:	0a 94       	dec	r0
    13d4:	e2 f7       	brpl	.-8      	; 0x13ce <GPIO_voidWritePin+0x150>
    13d6:	80 95       	com	r24
    13d8:	84 23       	and	r24, r20
    13da:	8c 93       	st	X, r24
    13dc:	2b c0       	rjmp	.+86     	; 0x1434 <GPIO_voidWritePin+0x1b6>
				}
				break;
			case GPIOD :
				if(copy_u8Value == HIGH )
    13de:	8b 81       	ldd	r24, Y+3	; 0x03
    13e0:	81 30       	cpi	r24, 0x01	; 1
    13e2:	a1 f4       	brne	.+40     	; 0x140c <GPIO_voidWritePin+0x18e>
				{
					SET_BIT(PORTD ,copy_u8Pin);
    13e4:	a2 e3       	ldi	r26, 0x32	; 50
    13e6:	b0 e0       	ldi	r27, 0x00	; 0
    13e8:	e2 e3       	ldi	r30, 0x32	; 50
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	48 2f       	mov	r20, r24
    13f0:	8a 81       	ldd	r24, Y+2	; 0x02
    13f2:	28 2f       	mov	r18, r24
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	81 e0       	ldi	r24, 0x01	; 1
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	02 2e       	mov	r0, r18
    13fc:	02 c0       	rjmp	.+4      	; 0x1402 <GPIO_voidWritePin+0x184>
    13fe:	88 0f       	add	r24, r24
    1400:	99 1f       	adc	r25, r25
    1402:	0a 94       	dec	r0
    1404:	e2 f7       	brpl	.-8      	; 0x13fe <GPIO_voidWritePin+0x180>
    1406:	84 2b       	or	r24, r20
    1408:	8c 93       	st	X, r24
    140a:	14 c0       	rjmp	.+40     	; 0x1434 <GPIO_voidWritePin+0x1b6>
				}
				else {
					CLEAR_BIT(PORTD,copy_u8Pin);
    140c:	a2 e3       	ldi	r26, 0x32	; 50
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	e2 e3       	ldi	r30, 0x32	; 50
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	48 2f       	mov	r20, r24
    1418:	8a 81       	ldd	r24, Y+2	; 0x02
    141a:	28 2f       	mov	r18, r24
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	02 2e       	mov	r0, r18
    1424:	02 c0       	rjmp	.+4      	; 0x142a <GPIO_voidWritePin+0x1ac>
    1426:	88 0f       	add	r24, r24
    1428:	99 1f       	adc	r25, r25
    142a:	0a 94       	dec	r0
    142c:	e2 f7       	brpl	.-8      	; 0x1426 <GPIO_voidWritePin+0x1a8>
    142e:	80 95       	com	r24
    1430:	84 23       	and	r24, r20
    1432:	8c 93       	st	X, r24
				break;	
			default:
				break;
		}
		
	}
    1434:	0f 90       	pop	r0
    1436:	0f 90       	pop	r0
    1438:	0f 90       	pop	r0
    143a:	0f 90       	pop	r0
    143c:	0f 90       	pop	r0
    143e:	cf 91       	pop	r28
    1440:	df 91       	pop	r29
    1442:	08 95       	ret

00001444 <GPIO_u8ReadPin>:
	
	u8	GPIO_u8ReadPin(	u8  copy_u8Port ,u8 copy_u8Pin )
	{
    1444:	df 93       	push	r29
    1446:	cf 93       	push	r28
    1448:	00 d0       	rcall	.+0      	; 0x144a <GPIO_u8ReadPin+0x6>
    144a:	00 d0       	rcall	.+0      	; 0x144c <GPIO_u8ReadPin+0x8>
    144c:	0f 92       	push	r0
    144e:	cd b7       	in	r28, 0x3d	; 61
    1450:	de b7       	in	r29, 0x3e	; 62
    1452:	8a 83       	std	Y+2, r24	; 0x02
    1454:	6b 83       	std	Y+3, r22	; 0x03
		u8 Local_u8ReturnValue ;
		switch(copy_u8Port){
    1456:	8a 81       	ldd	r24, Y+2	; 0x02
    1458:	28 2f       	mov	r18, r24
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	3d 83       	std	Y+5, r19	; 0x05
    145e:	2c 83       	std	Y+4, r18	; 0x04
    1460:	4c 81       	ldd	r20, Y+4	; 0x04
    1462:	5d 81       	ldd	r21, Y+5	; 0x05
    1464:	41 30       	cpi	r20, 0x01	; 1
    1466:	51 05       	cpc	r21, r1
    1468:	b1 f1       	breq	.+108    	; 0x14d6 <GPIO_u8ReadPin+0x92>
    146a:	8c 81       	ldd	r24, Y+4	; 0x04
    146c:	9d 81       	ldd	r25, Y+5	; 0x05
    146e:	82 30       	cpi	r24, 0x02	; 2
    1470:	91 05       	cpc	r25, r1
    1472:	34 f4       	brge	.+12     	; 0x1480 <GPIO_u8ReadPin+0x3c>
    1474:	2c 81       	ldd	r18, Y+4	; 0x04
    1476:	3d 81       	ldd	r19, Y+5	; 0x05
    1478:	21 15       	cp	r18, r1
    147a:	31 05       	cpc	r19, r1
    147c:	71 f0       	breq	.+28     	; 0x149a <GPIO_u8ReadPin+0x56>
    147e:	84 c0       	rjmp	.+264    	; 0x1588 <GPIO_u8ReadPin+0x144>
    1480:	4c 81       	ldd	r20, Y+4	; 0x04
    1482:	5d 81       	ldd	r21, Y+5	; 0x05
    1484:	42 30       	cpi	r20, 0x02	; 2
    1486:	51 05       	cpc	r21, r1
    1488:	09 f4       	brne	.+2      	; 0x148c <GPIO_u8ReadPin+0x48>
    148a:	43 c0       	rjmp	.+134    	; 0x1512 <GPIO_u8ReadPin+0xce>
    148c:	8c 81       	ldd	r24, Y+4	; 0x04
    148e:	9d 81       	ldd	r25, Y+5	; 0x05
    1490:	83 30       	cpi	r24, 0x03	; 3
    1492:	91 05       	cpc	r25, r1
    1494:	09 f4       	brne	.+2      	; 0x1498 <GPIO_u8ReadPin+0x54>
    1496:	5b c0       	rjmp	.+182    	; 0x154e <GPIO_u8ReadPin+0x10a>
    1498:	77 c0       	rjmp	.+238    	; 0x1588 <GPIO_u8ReadPin+0x144>
			case GPIOA :
				Local_u8ReturnValue = GET_BIT(PINA,copy_u8Pin);
    149a:	e9 e3       	ldi	r30, 0x39	; 57
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	80 81       	ld	r24, Z
    14a0:	48 2f       	mov	r20, r24
    14a2:	50 e0       	ldi	r21, 0x00	; 0
    14a4:	8b 81       	ldd	r24, Y+3	; 0x03
    14a6:	28 2f       	mov	r18, r24
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	81 e0       	ldi	r24, 0x01	; 1
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	02 c0       	rjmp	.+4      	; 0x14b4 <GPIO_u8ReadPin+0x70>
    14b0:	88 0f       	add	r24, r24
    14b2:	99 1f       	adc	r25, r25
    14b4:	2a 95       	dec	r18
    14b6:	e2 f7       	brpl	.-8      	; 0x14b0 <GPIO_u8ReadPin+0x6c>
    14b8:	9a 01       	movw	r18, r20
    14ba:	28 23       	and	r18, r24
    14bc:	39 23       	and	r19, r25
    14be:	8b 81       	ldd	r24, Y+3	; 0x03
    14c0:	88 2f       	mov	r24, r24
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	a9 01       	movw	r20, r18
    14c6:	02 c0       	rjmp	.+4      	; 0x14cc <GPIO_u8ReadPin+0x88>
    14c8:	55 95       	asr	r21
    14ca:	47 95       	ror	r20
    14cc:	8a 95       	dec	r24
    14ce:	e2 f7       	brpl	.-8      	; 0x14c8 <GPIO_u8ReadPin+0x84>
    14d0:	ca 01       	movw	r24, r20
    14d2:	89 83       	std	Y+1, r24	; 0x01
    14d4:	59 c0       	rjmp	.+178    	; 0x1588 <GPIO_u8ReadPin+0x144>
				break ;
			case GPIOB :
				Local_u8ReturnValue = GET_BIT(PINB,copy_u8Pin);
    14d6:	e6 e3       	ldi	r30, 0x36	; 54
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	80 81       	ld	r24, Z
    14dc:	48 2f       	mov	r20, r24
    14de:	50 e0       	ldi	r21, 0x00	; 0
    14e0:	8b 81       	ldd	r24, Y+3	; 0x03
    14e2:	28 2f       	mov	r18, r24
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	02 c0       	rjmp	.+4      	; 0x14f0 <GPIO_u8ReadPin+0xac>
    14ec:	88 0f       	add	r24, r24
    14ee:	99 1f       	adc	r25, r25
    14f0:	2a 95       	dec	r18
    14f2:	e2 f7       	brpl	.-8      	; 0x14ec <GPIO_u8ReadPin+0xa8>
    14f4:	9a 01       	movw	r18, r20
    14f6:	28 23       	and	r18, r24
    14f8:	39 23       	and	r19, r25
    14fa:	8b 81       	ldd	r24, Y+3	; 0x03
    14fc:	88 2f       	mov	r24, r24
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	a9 01       	movw	r20, r18
    1502:	02 c0       	rjmp	.+4      	; 0x1508 <GPIO_u8ReadPin+0xc4>
    1504:	55 95       	asr	r21
    1506:	47 95       	ror	r20
    1508:	8a 95       	dec	r24
    150a:	e2 f7       	brpl	.-8      	; 0x1504 <GPIO_u8ReadPin+0xc0>
    150c:	ca 01       	movw	r24, r20
    150e:	89 83       	std	Y+1, r24	; 0x01
    1510:	3b c0       	rjmp	.+118    	; 0x1588 <GPIO_u8ReadPin+0x144>
				break ;
			case GPIOC :
				Local_u8ReturnValue = GET_BIT(PINC,copy_u8Pin);
    1512:	e3 e3       	ldi	r30, 0x33	; 51
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	80 81       	ld	r24, Z
    1518:	48 2f       	mov	r20, r24
    151a:	50 e0       	ldi	r21, 0x00	; 0
    151c:	8b 81       	ldd	r24, Y+3	; 0x03
    151e:	28 2f       	mov	r18, r24
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	81 e0       	ldi	r24, 0x01	; 1
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	02 c0       	rjmp	.+4      	; 0x152c <GPIO_u8ReadPin+0xe8>
    1528:	88 0f       	add	r24, r24
    152a:	99 1f       	adc	r25, r25
    152c:	2a 95       	dec	r18
    152e:	e2 f7       	brpl	.-8      	; 0x1528 <GPIO_u8ReadPin+0xe4>
    1530:	9a 01       	movw	r18, r20
    1532:	28 23       	and	r18, r24
    1534:	39 23       	and	r19, r25
    1536:	8b 81       	ldd	r24, Y+3	; 0x03
    1538:	88 2f       	mov	r24, r24
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	a9 01       	movw	r20, r18
    153e:	02 c0       	rjmp	.+4      	; 0x1544 <GPIO_u8ReadPin+0x100>
    1540:	55 95       	asr	r21
    1542:	47 95       	ror	r20
    1544:	8a 95       	dec	r24
    1546:	e2 f7       	brpl	.-8      	; 0x1540 <GPIO_u8ReadPin+0xfc>
    1548:	ca 01       	movw	r24, r20
    154a:	89 83       	std	Y+1, r24	; 0x01
    154c:	1d c0       	rjmp	.+58     	; 0x1588 <GPIO_u8ReadPin+0x144>
				break ;
			case GPIOD :
				Local_u8ReturnValue = GET_BIT(PIND,copy_u8Pin);
    154e:	e0 e3       	ldi	r30, 0x30	; 48
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 81       	ld	r24, Z
    1554:	48 2f       	mov	r20, r24
    1556:	50 e0       	ldi	r21, 0x00	; 0
    1558:	8b 81       	ldd	r24, Y+3	; 0x03
    155a:	28 2f       	mov	r18, r24
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	81 e0       	ldi	r24, 0x01	; 1
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	02 c0       	rjmp	.+4      	; 0x1568 <GPIO_u8ReadPin+0x124>
    1564:	88 0f       	add	r24, r24
    1566:	99 1f       	adc	r25, r25
    1568:	2a 95       	dec	r18
    156a:	e2 f7       	brpl	.-8      	; 0x1564 <GPIO_u8ReadPin+0x120>
    156c:	9a 01       	movw	r18, r20
    156e:	28 23       	and	r18, r24
    1570:	39 23       	and	r19, r25
    1572:	8b 81       	ldd	r24, Y+3	; 0x03
    1574:	88 2f       	mov	r24, r24
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	a9 01       	movw	r20, r18
    157a:	02 c0       	rjmp	.+4      	; 0x1580 <GPIO_u8ReadPin+0x13c>
    157c:	55 95       	asr	r21
    157e:	47 95       	ror	r20
    1580:	8a 95       	dec	r24
    1582:	e2 f7       	brpl	.-8      	; 0x157c <GPIO_u8ReadPin+0x138>
    1584:	ca 01       	movw	r24, r20
    1586:	89 83       	std	Y+1, r24	; 0x01
				break ;
			default:
			break;
		}
		return Local_u8ReturnValue ;
    1588:	89 81       	ldd	r24, Y+1	; 0x01
		
	}
    158a:	0f 90       	pop	r0
    158c:	0f 90       	pop	r0
    158e:	0f 90       	pop	r0
    1590:	0f 90       	pop	r0
    1592:	0f 90       	pop	r0
    1594:	cf 91       	pop	r28
    1596:	df 91       	pop	r29
    1598:	08 95       	ret

0000159a <GPIO_voidTogPin>:
	
	void GPIO_voidTogPin 	( u8 copy_u8Port , u8 copy_u8Pin )
	{
    159a:	df 93       	push	r29
    159c:	cf 93       	push	r28
    159e:	00 d0       	rcall	.+0      	; 0x15a0 <GPIO_voidTogPin+0x6>
    15a0:	00 d0       	rcall	.+0      	; 0x15a2 <GPIO_voidTogPin+0x8>
    15a2:	cd b7       	in	r28, 0x3d	; 61
    15a4:	de b7       	in	r29, 0x3e	; 62
    15a6:	89 83       	std	Y+1, r24	; 0x01
    15a8:	6a 83       	std	Y+2, r22	; 0x02
		switch(copy_u8Port){
    15aa:	89 81       	ldd	r24, Y+1	; 0x01
    15ac:	28 2f       	mov	r18, r24
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	3c 83       	std	Y+4, r19	; 0x04
    15b2:	2b 83       	std	Y+3, r18	; 0x03
    15b4:	8b 81       	ldd	r24, Y+3	; 0x03
    15b6:	9c 81       	ldd	r25, Y+4	; 0x04
    15b8:	81 30       	cpi	r24, 0x01	; 1
    15ba:	91 05       	cpc	r25, r1
    15bc:	49 f1       	breq	.+82     	; 0x1610 <GPIO_voidTogPin+0x76>
    15be:	2b 81       	ldd	r18, Y+3	; 0x03
    15c0:	3c 81       	ldd	r19, Y+4	; 0x04
    15c2:	22 30       	cpi	r18, 0x02	; 2
    15c4:	31 05       	cpc	r19, r1
    15c6:	2c f4       	brge	.+10     	; 0x15d2 <GPIO_voidTogPin+0x38>
    15c8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ca:	9c 81       	ldd	r25, Y+4	; 0x04
    15cc:	00 97       	sbiw	r24, 0x00	; 0
    15ce:	61 f0       	breq	.+24     	; 0x15e8 <GPIO_voidTogPin+0x4e>
    15d0:	5a c0       	rjmp	.+180    	; 0x1686 <GPIO_voidTogPin+0xec>
    15d2:	2b 81       	ldd	r18, Y+3	; 0x03
    15d4:	3c 81       	ldd	r19, Y+4	; 0x04
    15d6:	22 30       	cpi	r18, 0x02	; 2
    15d8:	31 05       	cpc	r19, r1
    15da:	71 f1       	breq	.+92     	; 0x1638 <GPIO_voidTogPin+0x9e>
    15dc:	8b 81       	ldd	r24, Y+3	; 0x03
    15de:	9c 81       	ldd	r25, Y+4	; 0x04
    15e0:	83 30       	cpi	r24, 0x03	; 3
    15e2:	91 05       	cpc	r25, r1
    15e4:	e9 f1       	breq	.+122    	; 0x1660 <GPIO_voidTogPin+0xc6>
    15e6:	4f c0       	rjmp	.+158    	; 0x1686 <GPIO_voidTogPin+0xec>
			case GPIOA :
				TOG_BIT(PORTA,copy_u8Pin);
    15e8:	ab e3       	ldi	r26, 0x3B	; 59
    15ea:	b0 e0       	ldi	r27, 0x00	; 0
    15ec:	eb e3       	ldi	r30, 0x3B	; 59
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	80 81       	ld	r24, Z
    15f2:	48 2f       	mov	r20, r24
    15f4:	8a 81       	ldd	r24, Y+2	; 0x02
    15f6:	28 2f       	mov	r18, r24
    15f8:	30 e0       	ldi	r19, 0x00	; 0
    15fa:	81 e0       	ldi	r24, 0x01	; 1
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	02 2e       	mov	r0, r18
    1600:	02 c0       	rjmp	.+4      	; 0x1606 <GPIO_voidTogPin+0x6c>
    1602:	88 0f       	add	r24, r24
    1604:	99 1f       	adc	r25, r25
    1606:	0a 94       	dec	r0
    1608:	e2 f7       	brpl	.-8      	; 0x1602 <GPIO_voidTogPin+0x68>
    160a:	84 27       	eor	r24, r20
    160c:	8c 93       	st	X, r24
    160e:	3b c0       	rjmp	.+118    	; 0x1686 <GPIO_voidTogPin+0xec>
				break ;             
			case GPIOB :            
				TOG_BIT(PORTB,copy_u8Pin);
    1610:	a8 e3       	ldi	r26, 0x38	; 56
    1612:	b0 e0       	ldi	r27, 0x00	; 0
    1614:	e8 e3       	ldi	r30, 0x38	; 56
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 81       	ld	r24, Z
    161a:	48 2f       	mov	r20, r24
    161c:	8a 81       	ldd	r24, Y+2	; 0x02
    161e:	28 2f       	mov	r18, r24
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	81 e0       	ldi	r24, 0x01	; 1
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	02 2e       	mov	r0, r18
    1628:	02 c0       	rjmp	.+4      	; 0x162e <GPIO_voidTogPin+0x94>
    162a:	88 0f       	add	r24, r24
    162c:	99 1f       	adc	r25, r25
    162e:	0a 94       	dec	r0
    1630:	e2 f7       	brpl	.-8      	; 0x162a <GPIO_voidTogPin+0x90>
    1632:	84 27       	eor	r24, r20
    1634:	8c 93       	st	X, r24
    1636:	27 c0       	rjmp	.+78     	; 0x1686 <GPIO_voidTogPin+0xec>
				break ;             
			case GPIOC :            
				TOG_BIT(PORTC,copy_u8Pin);
    1638:	a5 e3       	ldi	r26, 0x35	; 53
    163a:	b0 e0       	ldi	r27, 0x00	; 0
    163c:	e5 e3       	ldi	r30, 0x35	; 53
    163e:	f0 e0       	ldi	r31, 0x00	; 0
    1640:	80 81       	ld	r24, Z
    1642:	48 2f       	mov	r20, r24
    1644:	8a 81       	ldd	r24, Y+2	; 0x02
    1646:	28 2f       	mov	r18, r24
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	81 e0       	ldi	r24, 0x01	; 1
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	02 2e       	mov	r0, r18
    1650:	02 c0       	rjmp	.+4      	; 0x1656 <GPIO_voidTogPin+0xbc>
    1652:	88 0f       	add	r24, r24
    1654:	99 1f       	adc	r25, r25
    1656:	0a 94       	dec	r0
    1658:	e2 f7       	brpl	.-8      	; 0x1652 <GPIO_voidTogPin+0xb8>
    165a:	84 27       	eor	r24, r20
    165c:	8c 93       	st	X, r24
    165e:	13 c0       	rjmp	.+38     	; 0x1686 <GPIO_voidTogPin+0xec>
				break ;             
			case GPIOD : 
				TOG_BIT(PORTD,copy_u8Pin);
    1660:	a2 e3       	ldi	r26, 0x32	; 50
    1662:	b0 e0       	ldi	r27, 0x00	; 0
    1664:	e2 e3       	ldi	r30, 0x32	; 50
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	80 81       	ld	r24, Z
    166a:	48 2f       	mov	r20, r24
    166c:	8a 81       	ldd	r24, Y+2	; 0x02
    166e:	28 2f       	mov	r18, r24
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	81 e0       	ldi	r24, 0x01	; 1
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	02 2e       	mov	r0, r18
    1678:	02 c0       	rjmp	.+4      	; 0x167e <GPIO_voidTogPin+0xe4>
    167a:	88 0f       	add	r24, r24
    167c:	99 1f       	adc	r25, r25
    167e:	0a 94       	dec	r0
    1680:	e2 f7       	brpl	.-8      	; 0x167a <GPIO_voidTogPin+0xe0>
    1682:	84 27       	eor	r24, r20
    1684:	8c 93       	st	X, r24
			default:
			break;
		}
		
		
	}
    1686:	0f 90       	pop	r0
    1688:	0f 90       	pop	r0
    168a:	0f 90       	pop	r0
    168c:	0f 90       	pop	r0
    168e:	cf 91       	pop	r28
    1690:	df 91       	pop	r29
    1692:	08 95       	ret

00001694 <GPIO_voidSetPortDDR>:
	void GPIO_voidSetPortDDR (u8  copy_u8Port , u8 copy_u8Mode )
	{
    1694:	df 93       	push	r29
    1696:	cf 93       	push	r28
    1698:	00 d0       	rcall	.+0      	; 0x169a <GPIO_voidSetPortDDR+0x6>
    169a:	00 d0       	rcall	.+0      	; 0x169c <GPIO_voidSetPortDDR+0x8>
    169c:	cd b7       	in	r28, 0x3d	; 61
    169e:	de b7       	in	r29, 0x3e	; 62
    16a0:	89 83       	std	Y+1, r24	; 0x01
    16a2:	6a 83       	std	Y+2, r22	; 0x02
		switch(copy_u8Port)
    16a4:	89 81       	ldd	r24, Y+1	; 0x01
    16a6:	28 2f       	mov	r18, r24
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	3c 83       	std	Y+4, r19	; 0x04
    16ac:	2b 83       	std	Y+3, r18	; 0x03
    16ae:	8b 81       	ldd	r24, Y+3	; 0x03
    16b0:	9c 81       	ldd	r25, Y+4	; 0x04
    16b2:	81 30       	cpi	r24, 0x01	; 1
    16b4:	91 05       	cpc	r25, r1
    16b6:	09 f1       	breq	.+66     	; 0x16fa <GPIO_voidSetPortDDR+0x66>
    16b8:	2b 81       	ldd	r18, Y+3	; 0x03
    16ba:	3c 81       	ldd	r19, Y+4	; 0x04
    16bc:	22 30       	cpi	r18, 0x02	; 2
    16be:	31 05       	cpc	r19, r1
    16c0:	2c f4       	brge	.+10     	; 0x16cc <GPIO_voidSetPortDDR+0x38>
    16c2:	8b 81       	ldd	r24, Y+3	; 0x03
    16c4:	9c 81       	ldd	r25, Y+4	; 0x04
    16c6:	00 97       	sbiw	r24, 0x00	; 0
    16c8:	61 f0       	breq	.+24     	; 0x16e2 <GPIO_voidSetPortDDR+0x4e>
    16ca:	3a c0       	rjmp	.+116    	; 0x1740 <GPIO_voidSetPortDDR+0xac>
    16cc:	2b 81       	ldd	r18, Y+3	; 0x03
    16ce:	3c 81       	ldd	r19, Y+4	; 0x04
    16d0:	22 30       	cpi	r18, 0x02	; 2
    16d2:	31 05       	cpc	r19, r1
    16d4:	f1 f0       	breq	.+60     	; 0x1712 <GPIO_voidSetPortDDR+0x7e>
    16d6:	8b 81       	ldd	r24, Y+3	; 0x03
    16d8:	9c 81       	ldd	r25, Y+4	; 0x04
    16da:	83 30       	cpi	r24, 0x03	; 3
    16dc:	91 05       	cpc	r25, r1
    16de:	29 f1       	breq	.+74     	; 0x172a <GPIO_voidSetPortDDR+0x96>
    16e0:	2f c0       	rjmp	.+94     	; 0x1740 <GPIO_voidSetPortDDR+0xac>
		{
			case GPIOA :
				if(copy_u8Mode ==OUTPUT )
    16e2:	8a 81       	ldd	r24, Y+2	; 0x02
    16e4:	81 30       	cpi	r24, 0x01	; 1
    16e6:	29 f4       	brne	.+10     	; 0x16f2 <GPIO_voidSetPortDDR+0x5e>
				{
					DDRA= 0xFF;
    16e8:	ea e3       	ldi	r30, 0x3A	; 58
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	8f ef       	ldi	r24, 0xFF	; 255
    16ee:	80 83       	st	Z, r24
    16f0:	27 c0       	rjmp	.+78     	; 0x1740 <GPIO_voidSetPortDDR+0xac>
				}
				else {
					DDRA = 0x00 ;
    16f2:	ea e3       	ldi	r30, 0x3A	; 58
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	10 82       	st	Z, r1
    16f8:	23 c0       	rjmp	.+70     	; 0x1740 <GPIO_voidSetPortDDR+0xac>
				}
				break;
			case GPIOB :
				if(copy_u8Mode ==OUTPUT )
    16fa:	8a 81       	ldd	r24, Y+2	; 0x02
    16fc:	81 30       	cpi	r24, 0x01	; 1
    16fe:	29 f4       	brne	.+10     	; 0x170a <GPIO_voidSetPortDDR+0x76>
				{
					DDRB = 0xFF;
    1700:	e7 e3       	ldi	r30, 0x37	; 55
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	8f ef       	ldi	r24, 0xFF	; 255
    1706:	80 83       	st	Z, r24
    1708:	1b c0       	rjmp	.+54     	; 0x1740 <GPIO_voidSetPortDDR+0xac>
				}
				else {
					DDRB = 0x00;
    170a:	e7 e3       	ldi	r30, 0x37	; 55
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	10 82       	st	Z, r1
    1710:	17 c0       	rjmp	.+46     	; 0x1740 <GPIO_voidSetPortDDR+0xac>
				}
				break;
			case GPIOC :
				if(copy_u8Mode ==OUTPUT )
    1712:	8a 81       	ldd	r24, Y+2	; 0x02
    1714:	81 30       	cpi	r24, 0x01	; 1
    1716:	29 f4       	brne	.+10     	; 0x1722 <GPIO_voidSetPortDDR+0x8e>
				{
					DDRC = 0xFF ;
    1718:	e4 e3       	ldi	r30, 0x34	; 52
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	8f ef       	ldi	r24, 0xFF	; 255
    171e:	80 83       	st	Z, r24
    1720:	0f c0       	rjmp	.+30     	; 0x1740 <GPIO_voidSetPortDDR+0xac>
				}
				else {
					DDRC = 0x00 ;
    1722:	e4 e3       	ldi	r30, 0x34	; 52
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	10 82       	st	Z, r1
    1728:	0b c0       	rjmp	.+22     	; 0x1740 <GPIO_voidSetPortDDR+0xac>
				}
				break;
			case GPIOD :
				if(copy_u8Mode ==OUTPUT )
    172a:	8a 81       	ldd	r24, Y+2	; 0x02
    172c:	81 30       	cpi	r24, 0x01	; 1
    172e:	29 f4       	brne	.+10     	; 0x173a <GPIO_voidSetPortDDR+0xa6>
				{
					DDRD = 0xFF;
    1730:	e1 e3       	ldi	r30, 0x31	; 49
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	8f ef       	ldi	r24, 0xFF	; 255
    1736:	80 83       	st	Z, r24
    1738:	03 c0       	rjmp	.+6      	; 0x1740 <GPIO_voidSetPortDDR+0xac>
				}
				else {
					DDRD = 0x00;
    173a:	e1 e3       	ldi	r30, 0x31	; 49
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	10 82       	st	Z, r1
				}
				break;	
			default:
				break;
		}
	}
    1740:	0f 90       	pop	r0
    1742:	0f 90       	pop	r0
    1744:	0f 90       	pop	r0
    1746:	0f 90       	pop	r0
    1748:	cf 91       	pop	r28
    174a:	df 91       	pop	r29
    174c:	08 95       	ret

0000174e <GPIO_voidWritePort>:
	void	GPIO_voidWritePort (u8 copy_u8Port , u8 copy_u8Value)
	{
    174e:	df 93       	push	r29
    1750:	cf 93       	push	r28
    1752:	00 d0       	rcall	.+0      	; 0x1754 <GPIO_voidWritePort+0x6>
    1754:	00 d0       	rcall	.+0      	; 0x1756 <GPIO_voidWritePort+0x8>
    1756:	cd b7       	in	r28, 0x3d	; 61
    1758:	de b7       	in	r29, 0x3e	; 62
    175a:	89 83       	std	Y+1, r24	; 0x01
    175c:	6a 83       	std	Y+2, r22	; 0x02
			switch(copy_u8Port)
    175e:	89 81       	ldd	r24, Y+1	; 0x01
    1760:	28 2f       	mov	r18, r24
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	3c 83       	std	Y+4, r19	; 0x04
    1766:	2b 83       	std	Y+3, r18	; 0x03
    1768:	8b 81       	ldd	r24, Y+3	; 0x03
    176a:	9c 81       	ldd	r25, Y+4	; 0x04
    176c:	81 30       	cpi	r24, 0x01	; 1
    176e:	91 05       	cpc	r25, r1
    1770:	d1 f0       	breq	.+52     	; 0x17a6 <GPIO_voidWritePort+0x58>
    1772:	2b 81       	ldd	r18, Y+3	; 0x03
    1774:	3c 81       	ldd	r19, Y+4	; 0x04
    1776:	22 30       	cpi	r18, 0x02	; 2
    1778:	31 05       	cpc	r19, r1
    177a:	2c f4       	brge	.+10     	; 0x1786 <GPIO_voidWritePort+0x38>
    177c:	8b 81       	ldd	r24, Y+3	; 0x03
    177e:	9c 81       	ldd	r25, Y+4	; 0x04
    1780:	00 97       	sbiw	r24, 0x00	; 0
    1782:	61 f0       	breq	.+24     	; 0x179c <GPIO_voidWritePort+0x4e>
    1784:	1e c0       	rjmp	.+60     	; 0x17c2 <GPIO_voidWritePort+0x74>
    1786:	2b 81       	ldd	r18, Y+3	; 0x03
    1788:	3c 81       	ldd	r19, Y+4	; 0x04
    178a:	22 30       	cpi	r18, 0x02	; 2
    178c:	31 05       	cpc	r19, r1
    178e:	81 f0       	breq	.+32     	; 0x17b0 <GPIO_voidWritePort+0x62>
    1790:	8b 81       	ldd	r24, Y+3	; 0x03
    1792:	9c 81       	ldd	r25, Y+4	; 0x04
    1794:	83 30       	cpi	r24, 0x03	; 3
    1796:	91 05       	cpc	r25, r1
    1798:	81 f0       	breq	.+32     	; 0x17ba <GPIO_voidWritePort+0x6c>
    179a:	13 c0       	rjmp	.+38     	; 0x17c2 <GPIO_voidWritePort+0x74>
		{
			case GPIOA :
				PORTA = copy_u8Value ;
    179c:	eb e3       	ldi	r30, 0x3B	; 59
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	8a 81       	ldd	r24, Y+2	; 0x02
    17a2:	80 83       	st	Z, r24
    17a4:	0e c0       	rjmp	.+28     	; 0x17c2 <GPIO_voidWritePort+0x74>
				break;
			case GPIOB :
				PORTB = copy_u8Value;
    17a6:	e8 e3       	ldi	r30, 0x38	; 56
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	8a 81       	ldd	r24, Y+2	; 0x02
    17ac:	80 83       	st	Z, r24
    17ae:	09 c0       	rjmp	.+18     	; 0x17c2 <GPIO_voidWritePort+0x74>
				break;
			case GPIOC :
				PORTC = copy_u8Value;
    17b0:	e5 e3       	ldi	r30, 0x35	; 53
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	8a 81       	ldd	r24, Y+2	; 0x02
    17b6:	80 83       	st	Z, r24
    17b8:	04 c0       	rjmp	.+8      	; 0x17c2 <GPIO_voidWritePort+0x74>
				break;
			case GPIOD :
				PORTD = copy_u8Value;
    17ba:	e2 e3       	ldi	r30, 0x32	; 50
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	8a 81       	ldd	r24, Y+2	; 0x02
    17c0:	80 83       	st	Z, r24
				break;
		}
		
			
			
		}
    17c2:	0f 90       	pop	r0
    17c4:	0f 90       	pop	r0
    17c6:	0f 90       	pop	r0
    17c8:	0f 90       	pop	r0
    17ca:	cf 91       	pop	r28
    17cc:	df 91       	pop	r29
    17ce:	08 95       	ret

000017d0 <GPIO_voidSetLowNippleDDR>:
	void GPIO_voidSetLowNippleDDR(u8 copy_u8Port , u8 copy_u8Mode)
	{
    17d0:	df 93       	push	r29
    17d2:	cf 93       	push	r28
    17d4:	00 d0       	rcall	.+0      	; 0x17d6 <GPIO_voidSetLowNippleDDR+0x6>
    17d6:	0f 92       	push	r0
    17d8:	cd b7       	in	r28, 0x3d	; 61
    17da:	de b7       	in	r29, 0x3e	; 62
    17dc:	8a 83       	std	Y+2, r24	; 0x02
    17de:	6b 83       	std	Y+3, r22	; 0x03
		u8 i ;
		for (i= 0 ; i<4 ; i++){
    17e0:	19 82       	std	Y+1, r1	; 0x01
    17e2:	08 c0       	rjmp	.+16     	; 0x17f4 <GPIO_voidSetLowNippleDDR+0x24>
			GPIO_voidSetPinDDR(copy_u8Port , i ,copy_u8Mode );
    17e4:	8a 81       	ldd	r24, Y+2	; 0x02
    17e6:	69 81       	ldd	r22, Y+1	; 0x01
    17e8:	4b 81       	ldd	r20, Y+3	; 0x03
    17ea:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <GPIO_voidSetPinDDR>
			
		}
	void GPIO_voidSetLowNippleDDR(u8 copy_u8Port , u8 copy_u8Mode)
	{
		u8 i ;
		for (i= 0 ; i<4 ; i++){
    17ee:	89 81       	ldd	r24, Y+1	; 0x01
    17f0:	8f 5f       	subi	r24, 0xFF	; 255
    17f2:	89 83       	std	Y+1, r24	; 0x01
    17f4:	89 81       	ldd	r24, Y+1	; 0x01
    17f6:	84 30       	cpi	r24, 0x04	; 4
    17f8:	a8 f3       	brcs	.-22     	; 0x17e4 <GPIO_voidSetLowNippleDDR+0x14>
			GPIO_voidSetPinDDR(copy_u8Port , i ,copy_u8Mode );
		}
	}
    17fa:	0f 90       	pop	r0
    17fc:	0f 90       	pop	r0
    17fe:	0f 90       	pop	r0
    1800:	cf 91       	pop	r28
    1802:	df 91       	pop	r29
    1804:	08 95       	ret

00001806 <GPIO_voidSetHighNippleDDR>:
	void GPIO_voidSetHighNippleDDR(u8 copy_u8Port , u8 copy_u8Mode)
	{
    1806:	df 93       	push	r29
    1808:	cf 93       	push	r28
    180a:	00 d0       	rcall	.+0      	; 0x180c <GPIO_voidSetHighNippleDDR+0x6>
    180c:	0f 92       	push	r0
    180e:	cd b7       	in	r28, 0x3d	; 61
    1810:	de b7       	in	r29, 0x3e	; 62
    1812:	8a 83       	std	Y+2, r24	; 0x02
    1814:	6b 83       	std	Y+3, r22	; 0x03
		u8 i ;
		for (i= 4 ; i<8 ; i++){
    1816:	84 e0       	ldi	r24, 0x04	; 4
    1818:	89 83       	std	Y+1, r24	; 0x01
    181a:	08 c0       	rjmp	.+16     	; 0x182c <GPIO_voidSetHighNippleDDR+0x26>
			GPIO_voidSetPinDDR(copy_u8Port , i ,copy_u8Mode );
    181c:	8a 81       	ldd	r24, Y+2	; 0x02
    181e:	69 81       	ldd	r22, Y+1	; 0x01
    1820:	4b 81       	ldd	r20, Y+3	; 0x03
    1822:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <GPIO_voidSetPinDDR>
		}
	}
	void GPIO_voidSetHighNippleDDR(u8 copy_u8Port , u8 copy_u8Mode)
	{
		u8 i ;
		for (i= 4 ; i<8 ; i++){
    1826:	89 81       	ldd	r24, Y+1	; 0x01
    1828:	8f 5f       	subi	r24, 0xFF	; 255
    182a:	89 83       	std	Y+1, r24	; 0x01
    182c:	89 81       	ldd	r24, Y+1	; 0x01
    182e:	88 30       	cpi	r24, 0x08	; 8
    1830:	a8 f3       	brcs	.-22     	; 0x181c <GPIO_voidSetHighNippleDDR+0x16>
			GPIO_voidSetPinDDR(copy_u8Port , i ,copy_u8Mode );
		}
	}
    1832:	0f 90       	pop	r0
    1834:	0f 90       	pop	r0
    1836:	0f 90       	pop	r0
    1838:	cf 91       	pop	r28
    183a:	df 91       	pop	r29
    183c:	08 95       	ret

0000183e <GPIO_voidWriteLowNipple>:
	void GPIO_voidWriteLowNipple (u8 copy_u8Port , u8 copy_u8Value )
	{
    183e:	df 93       	push	r29
    1840:	cf 93       	push	r28
    1842:	00 d0       	rcall	.+0      	; 0x1844 <GPIO_voidWriteLowNipple+0x6>
    1844:	00 d0       	rcall	.+0      	; 0x1846 <GPIO_voidWriteLowNipple+0x8>
    1846:	cd b7       	in	r28, 0x3d	; 61
    1848:	de b7       	in	r29, 0x3e	; 62
    184a:	89 83       	std	Y+1, r24	; 0x01
    184c:	6a 83       	std	Y+2, r22	; 0x02
		copy_u8Value &= 0x0F;
    184e:	8a 81       	ldd	r24, Y+2	; 0x02
    1850:	8f 70       	andi	r24, 0x0F	; 15
    1852:	8a 83       	std	Y+2, r24	; 0x02
		switch (copy_u8Port) {
    1854:	89 81       	ldd	r24, Y+1	; 0x01
    1856:	28 2f       	mov	r18, r24
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	3c 83       	std	Y+4, r19	; 0x04
    185c:	2b 83       	std	Y+3, r18	; 0x03
    185e:	8b 81       	ldd	r24, Y+3	; 0x03
    1860:	9c 81       	ldd	r25, Y+4	; 0x04
    1862:	81 30       	cpi	r24, 0x01	; 1
    1864:	91 05       	cpc	r25, r1
    1866:	29 f1       	breq	.+74     	; 0x18b2 <GPIO_voidWriteLowNipple+0x74>
    1868:	2b 81       	ldd	r18, Y+3	; 0x03
    186a:	3c 81       	ldd	r19, Y+4	; 0x04
    186c:	22 30       	cpi	r18, 0x02	; 2
    186e:	31 05       	cpc	r19, r1
    1870:	2c f4       	brge	.+10     	; 0x187c <GPIO_voidWriteLowNipple+0x3e>
    1872:	8b 81       	ldd	r24, Y+3	; 0x03
    1874:	9c 81       	ldd	r25, Y+4	; 0x04
    1876:	00 97       	sbiw	r24, 0x00	; 0
    1878:	61 f0       	breq	.+24     	; 0x1892 <GPIO_voidWriteLowNipple+0x54>
    187a:	4a c0       	rjmp	.+148    	; 0x1910 <GPIO_voidWriteLowNipple+0xd2>
    187c:	2b 81       	ldd	r18, Y+3	; 0x03
    187e:	3c 81       	ldd	r19, Y+4	; 0x04
    1880:	22 30       	cpi	r18, 0x02	; 2
    1882:	31 05       	cpc	r19, r1
    1884:	31 f1       	breq	.+76     	; 0x18d2 <GPIO_voidWriteLowNipple+0x94>
    1886:	8b 81       	ldd	r24, Y+3	; 0x03
    1888:	9c 81       	ldd	r25, Y+4	; 0x04
    188a:	83 30       	cpi	r24, 0x03	; 3
    188c:	91 05       	cpc	r25, r1
    188e:	89 f1       	breq	.+98     	; 0x18f2 <GPIO_voidWriteLowNipple+0xb4>
    1890:	3f c0       	rjmp	.+126    	; 0x1910 <GPIO_voidWriteLowNipple+0xd2>
			case GPIOA :
				PORTA &= 0xF0 ; 
    1892:	ab e3       	ldi	r26, 0x3B	; 59
    1894:	b0 e0       	ldi	r27, 0x00	; 0
    1896:	eb e3       	ldi	r30, 0x3B	; 59
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	80 81       	ld	r24, Z
    189c:	80 7f       	andi	r24, 0xF0	; 240
    189e:	8c 93       	st	X, r24
				PORTA |= copy_u8Value ;
    18a0:	ab e3       	ldi	r26, 0x3B	; 59
    18a2:	b0 e0       	ldi	r27, 0x00	; 0
    18a4:	eb e3       	ldi	r30, 0x3B	; 59
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	90 81       	ld	r25, Z
    18aa:	8a 81       	ldd	r24, Y+2	; 0x02
    18ac:	89 2b       	or	r24, r25
    18ae:	8c 93       	st	X, r24
    18b0:	2f c0       	rjmp	.+94     	; 0x1910 <GPIO_voidWriteLowNipple+0xd2>
				break;
			case GPIOB :
				PORTB &= 0xF0 ; 
    18b2:	a8 e3       	ldi	r26, 0x38	; 56
    18b4:	b0 e0       	ldi	r27, 0x00	; 0
    18b6:	e8 e3       	ldi	r30, 0x38	; 56
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	80 81       	ld	r24, Z
    18bc:	80 7f       	andi	r24, 0xF0	; 240
    18be:	8c 93       	st	X, r24
				PORTB |= copy_u8Value ;
    18c0:	a8 e3       	ldi	r26, 0x38	; 56
    18c2:	b0 e0       	ldi	r27, 0x00	; 0
    18c4:	e8 e3       	ldi	r30, 0x38	; 56
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	90 81       	ld	r25, Z
    18ca:	8a 81       	ldd	r24, Y+2	; 0x02
    18cc:	89 2b       	or	r24, r25
    18ce:	8c 93       	st	X, r24
    18d0:	1f c0       	rjmp	.+62     	; 0x1910 <GPIO_voidWriteLowNipple+0xd2>
				break;
			case GPIOC :
				PORTC &= 0xF0 ; 
    18d2:	a5 e3       	ldi	r26, 0x35	; 53
    18d4:	b0 e0       	ldi	r27, 0x00	; 0
    18d6:	e5 e3       	ldi	r30, 0x35	; 53
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	80 81       	ld	r24, Z
    18dc:	80 7f       	andi	r24, 0xF0	; 240
    18de:	8c 93       	st	X, r24
				PORTC |= copy_u8Value ;
    18e0:	a5 e3       	ldi	r26, 0x35	; 53
    18e2:	b0 e0       	ldi	r27, 0x00	; 0
    18e4:	e5 e3       	ldi	r30, 0x35	; 53
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	90 81       	ld	r25, Z
    18ea:	8a 81       	ldd	r24, Y+2	; 0x02
    18ec:	89 2b       	or	r24, r25
    18ee:	8c 93       	st	X, r24
    18f0:	0f c0       	rjmp	.+30     	; 0x1910 <GPIO_voidWriteLowNipple+0xd2>
				break;
			case GPIOD :
				PORTD &= 0xF0 ; 
    18f2:	a2 e3       	ldi	r26, 0x32	; 50
    18f4:	b0 e0       	ldi	r27, 0x00	; 0
    18f6:	e2 e3       	ldi	r30, 0x32	; 50
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	80 81       	ld	r24, Z
    18fc:	80 7f       	andi	r24, 0xF0	; 240
    18fe:	8c 93       	st	X, r24
				PORTD |= copy_u8Value ;
    1900:	a2 e3       	ldi	r26, 0x32	; 50
    1902:	b0 e0       	ldi	r27, 0x00	; 0
    1904:	e2 e3       	ldi	r30, 0x32	; 50
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	90 81       	ld	r25, Z
    190a:	8a 81       	ldd	r24, Y+2	; 0x02
    190c:	89 2b       	or	r24, r25
    190e:	8c 93       	st	X, r24
				break;	
		}
	}
    1910:	0f 90       	pop	r0
    1912:	0f 90       	pop	r0
    1914:	0f 90       	pop	r0
    1916:	0f 90       	pop	r0
    1918:	cf 91       	pop	r28
    191a:	df 91       	pop	r29
    191c:	08 95       	ret

0000191e <GPIO_voidWriteHighNipple>:
	void GPIO_voidWriteHighNipple (u8 copy_u8Port , u8 copy_u8Value )
	{
    191e:	df 93       	push	r29
    1920:	cf 93       	push	r28
    1922:	00 d0       	rcall	.+0      	; 0x1924 <GPIO_voidWriteHighNipple+0x6>
    1924:	00 d0       	rcall	.+0      	; 0x1926 <GPIO_voidWriteHighNipple+0x8>
    1926:	cd b7       	in	r28, 0x3d	; 61
    1928:	de b7       	in	r29, 0x3e	; 62
    192a:	89 83       	std	Y+1, r24	; 0x01
    192c:	6a 83       	std	Y+2, r22	; 0x02
		copy_u8Value &= 0xF0;
    192e:	8a 81       	ldd	r24, Y+2	; 0x02
    1930:	80 7f       	andi	r24, 0xF0	; 240
    1932:	8a 83       	std	Y+2, r24	; 0x02
		switch (copy_u8Port) {
    1934:	89 81       	ldd	r24, Y+1	; 0x01
    1936:	28 2f       	mov	r18, r24
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	3c 83       	std	Y+4, r19	; 0x04
    193c:	2b 83       	std	Y+3, r18	; 0x03
    193e:	8b 81       	ldd	r24, Y+3	; 0x03
    1940:	9c 81       	ldd	r25, Y+4	; 0x04
    1942:	81 30       	cpi	r24, 0x01	; 1
    1944:	91 05       	cpc	r25, r1
    1946:	29 f1       	breq	.+74     	; 0x1992 <GPIO_voidWriteHighNipple+0x74>
    1948:	2b 81       	ldd	r18, Y+3	; 0x03
    194a:	3c 81       	ldd	r19, Y+4	; 0x04
    194c:	22 30       	cpi	r18, 0x02	; 2
    194e:	31 05       	cpc	r19, r1
    1950:	2c f4       	brge	.+10     	; 0x195c <GPIO_voidWriteHighNipple+0x3e>
    1952:	8b 81       	ldd	r24, Y+3	; 0x03
    1954:	9c 81       	ldd	r25, Y+4	; 0x04
    1956:	00 97       	sbiw	r24, 0x00	; 0
    1958:	61 f0       	breq	.+24     	; 0x1972 <GPIO_voidWriteHighNipple+0x54>
    195a:	4a c0       	rjmp	.+148    	; 0x19f0 <GPIO_voidWriteHighNipple+0xd2>
    195c:	2b 81       	ldd	r18, Y+3	; 0x03
    195e:	3c 81       	ldd	r19, Y+4	; 0x04
    1960:	22 30       	cpi	r18, 0x02	; 2
    1962:	31 05       	cpc	r19, r1
    1964:	31 f1       	breq	.+76     	; 0x19b2 <GPIO_voidWriteHighNipple+0x94>
    1966:	8b 81       	ldd	r24, Y+3	; 0x03
    1968:	9c 81       	ldd	r25, Y+4	; 0x04
    196a:	83 30       	cpi	r24, 0x03	; 3
    196c:	91 05       	cpc	r25, r1
    196e:	89 f1       	breq	.+98     	; 0x19d2 <GPIO_voidWriteHighNipple+0xb4>
    1970:	3f c0       	rjmp	.+126    	; 0x19f0 <GPIO_voidWriteHighNipple+0xd2>
			case GPIOA :
				PORTA &= 0x0F ; 
    1972:	ab e3       	ldi	r26, 0x3B	; 59
    1974:	b0 e0       	ldi	r27, 0x00	; 0
    1976:	eb e3       	ldi	r30, 0x3B	; 59
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	80 81       	ld	r24, Z
    197c:	8f 70       	andi	r24, 0x0F	; 15
    197e:	8c 93       	st	X, r24
				PORTA |= copy_u8Value ;
    1980:	ab e3       	ldi	r26, 0x3B	; 59
    1982:	b0 e0       	ldi	r27, 0x00	; 0
    1984:	eb e3       	ldi	r30, 0x3B	; 59
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	90 81       	ld	r25, Z
    198a:	8a 81       	ldd	r24, Y+2	; 0x02
    198c:	89 2b       	or	r24, r25
    198e:	8c 93       	st	X, r24
    1990:	2f c0       	rjmp	.+94     	; 0x19f0 <GPIO_voidWriteHighNipple+0xd2>
				break;
			case GPIOB :
				PORTB &= 0x0F ; 
    1992:	a8 e3       	ldi	r26, 0x38	; 56
    1994:	b0 e0       	ldi	r27, 0x00	; 0
    1996:	e8 e3       	ldi	r30, 0x38	; 56
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	80 81       	ld	r24, Z
    199c:	8f 70       	andi	r24, 0x0F	; 15
    199e:	8c 93       	st	X, r24
				PORTB |= copy_u8Value ;
    19a0:	a8 e3       	ldi	r26, 0x38	; 56
    19a2:	b0 e0       	ldi	r27, 0x00	; 0
    19a4:	e8 e3       	ldi	r30, 0x38	; 56
    19a6:	f0 e0       	ldi	r31, 0x00	; 0
    19a8:	90 81       	ld	r25, Z
    19aa:	8a 81       	ldd	r24, Y+2	; 0x02
    19ac:	89 2b       	or	r24, r25
    19ae:	8c 93       	st	X, r24
    19b0:	1f c0       	rjmp	.+62     	; 0x19f0 <GPIO_voidWriteHighNipple+0xd2>
				break;
			case GPIOC :
				PORTC &= 0x0F ; 
    19b2:	a5 e3       	ldi	r26, 0x35	; 53
    19b4:	b0 e0       	ldi	r27, 0x00	; 0
    19b6:	e5 e3       	ldi	r30, 0x35	; 53
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	80 81       	ld	r24, Z
    19bc:	8f 70       	andi	r24, 0x0F	; 15
    19be:	8c 93       	st	X, r24
				PORTC |= copy_u8Value ;
    19c0:	a5 e3       	ldi	r26, 0x35	; 53
    19c2:	b0 e0       	ldi	r27, 0x00	; 0
    19c4:	e5 e3       	ldi	r30, 0x35	; 53
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	90 81       	ld	r25, Z
    19ca:	8a 81       	ldd	r24, Y+2	; 0x02
    19cc:	89 2b       	or	r24, r25
    19ce:	8c 93       	st	X, r24
    19d0:	0f c0       	rjmp	.+30     	; 0x19f0 <GPIO_voidWriteHighNipple+0xd2>
				break;
			case GPIOD :
				PORTD &= 0x0F ; 
    19d2:	a2 e3       	ldi	r26, 0x32	; 50
    19d4:	b0 e0       	ldi	r27, 0x00	; 0
    19d6:	e2 e3       	ldi	r30, 0x32	; 50
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	80 81       	ld	r24, Z
    19dc:	8f 70       	andi	r24, 0x0F	; 15
    19de:	8c 93       	st	X, r24
				PORTD |= copy_u8Value ;
    19e0:	a2 e3       	ldi	r26, 0x32	; 50
    19e2:	b0 e0       	ldi	r27, 0x00	; 0
    19e4:	e2 e3       	ldi	r30, 0x32	; 50
    19e6:	f0 e0       	ldi	r31, 0x00	; 0
    19e8:	90 81       	ld	r25, Z
    19ea:	8a 81       	ldd	r24, Y+2	; 0x02
    19ec:	89 2b       	or	r24, r25
    19ee:	8c 93       	st	X, r24
				break;	
		}
	}
    19f0:	0f 90       	pop	r0
    19f2:	0f 90       	pop	r0
    19f4:	0f 90       	pop	r0
    19f6:	0f 90       	pop	r0
    19f8:	cf 91       	pop	r28
    19fa:	df 91       	pop	r29
    19fc:	08 95       	ret

000019fe <LCD_voidInit>:
#include "util/delay.h"



void LCD_voidInit()
{
    19fe:	0f 93       	push	r16
    1a00:	1f 93       	push	r17
    1a02:	df 93       	push	r29
    1a04:	cf 93       	push	r28
    1a06:	cd b7       	in	r28, 0x3d	; 61
    1a08:	de b7       	in	r29, 0x3e	; 62
    1a0a:	c4 55       	subi	r28, 0x54	; 84
    1a0c:	d0 40       	sbci	r29, 0x00	; 0
    1a0e:	0f b6       	in	r0, 0x3f	; 63
    1a10:	f8 94       	cli
    1a12:	de bf       	out	0x3e, r29	; 62
    1a14:	0f be       	out	0x3f, r0	; 63
    1a16:	cd bf       	out	0x3d, r28	; 61
    1a18:	fe 01       	movw	r30, r28
    1a1a:	ef 5a       	subi	r30, 0xAF	; 175
    1a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1e:	80 e0       	ldi	r24, 0x00	; 0
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	a0 e2       	ldi	r26, 0x20	; 32
    1a24:	b2 e4       	ldi	r27, 0x42	; 66
    1a26:	80 83       	st	Z, r24
    1a28:	91 83       	std	Z+1, r25	; 0x01
    1a2a:	a2 83       	std	Z+2, r26	; 0x02
    1a2c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a2e:	8e 01       	movw	r16, r28
    1a30:	03 5b       	subi	r16, 0xB3	; 179
    1a32:	1f 4f       	sbci	r17, 0xFF	; 255
    1a34:	fe 01       	movw	r30, r28
    1a36:	ef 5a       	subi	r30, 0xAF	; 175
    1a38:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3a:	60 81       	ld	r22, Z
    1a3c:	71 81       	ldd	r23, Z+1	; 0x01
    1a3e:	82 81       	ldd	r24, Z+2	; 0x02
    1a40:	93 81       	ldd	r25, Z+3	; 0x03
    1a42:	20 e0       	ldi	r18, 0x00	; 0
    1a44:	30 e0       	ldi	r19, 0x00	; 0
    1a46:	4a ef       	ldi	r20, 0xFA	; 250
    1a48:	54 e4       	ldi	r21, 0x44	; 68
    1a4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a4e:	dc 01       	movw	r26, r24
    1a50:	cb 01       	movw	r24, r22
    1a52:	f8 01       	movw	r30, r16
    1a54:	80 83       	st	Z, r24
    1a56:	91 83       	std	Z+1, r25	; 0x01
    1a58:	a2 83       	std	Z+2, r26	; 0x02
    1a5a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a5c:	fe 01       	movw	r30, r28
    1a5e:	e3 5b       	subi	r30, 0xB3	; 179
    1a60:	ff 4f       	sbci	r31, 0xFF	; 255
    1a62:	60 81       	ld	r22, Z
    1a64:	71 81       	ldd	r23, Z+1	; 0x01
    1a66:	82 81       	ldd	r24, Z+2	; 0x02
    1a68:	93 81       	ldd	r25, Z+3	; 0x03
    1a6a:	20 e0       	ldi	r18, 0x00	; 0
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	40 e8       	ldi	r20, 0x80	; 128
    1a70:	5f e3       	ldi	r21, 0x3F	; 63
    1a72:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a76:	88 23       	and	r24, r24
    1a78:	44 f4       	brge	.+16     	; 0x1a8a <LCD_voidInit+0x8c>
		__ticks = 1;
    1a7a:	fe 01       	movw	r30, r28
    1a7c:	e5 5b       	subi	r30, 0xB5	; 181
    1a7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a80:	81 e0       	ldi	r24, 0x01	; 1
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	91 83       	std	Z+1, r25	; 0x01
    1a86:	80 83       	st	Z, r24
    1a88:	64 c0       	rjmp	.+200    	; 0x1b52 <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    1a8a:	fe 01       	movw	r30, r28
    1a8c:	e3 5b       	subi	r30, 0xB3	; 179
    1a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a90:	60 81       	ld	r22, Z
    1a92:	71 81       	ldd	r23, Z+1	; 0x01
    1a94:	82 81       	ldd	r24, Z+2	; 0x02
    1a96:	93 81       	ldd	r25, Z+3	; 0x03
    1a98:	20 e0       	ldi	r18, 0x00	; 0
    1a9a:	3f ef       	ldi	r19, 0xFF	; 255
    1a9c:	4f e7       	ldi	r20, 0x7F	; 127
    1a9e:	57 e4       	ldi	r21, 0x47	; 71
    1aa0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1aa4:	18 16       	cp	r1, r24
    1aa6:	0c f0       	brlt	.+2      	; 0x1aaa <LCD_voidInit+0xac>
    1aa8:	43 c0       	rjmp	.+134    	; 0x1b30 <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aaa:	fe 01       	movw	r30, r28
    1aac:	ef 5a       	subi	r30, 0xAF	; 175
    1aae:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab0:	60 81       	ld	r22, Z
    1ab2:	71 81       	ldd	r23, Z+1	; 0x01
    1ab4:	82 81       	ldd	r24, Z+2	; 0x02
    1ab6:	93 81       	ldd	r25, Z+3	; 0x03
    1ab8:	20 e0       	ldi	r18, 0x00	; 0
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	40 e2       	ldi	r20, 0x20	; 32
    1abe:	51 e4       	ldi	r21, 0x41	; 65
    1ac0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ac4:	dc 01       	movw	r26, r24
    1ac6:	cb 01       	movw	r24, r22
    1ac8:	8e 01       	movw	r16, r28
    1aca:	05 5b       	subi	r16, 0xB5	; 181
    1acc:	1f 4f       	sbci	r17, 0xFF	; 255
    1ace:	bc 01       	movw	r22, r24
    1ad0:	cd 01       	movw	r24, r26
    1ad2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad6:	dc 01       	movw	r26, r24
    1ad8:	cb 01       	movw	r24, r22
    1ada:	f8 01       	movw	r30, r16
    1adc:	91 83       	std	Z+1, r25	; 0x01
    1ade:	80 83       	st	Z, r24
    1ae0:	1f c0       	rjmp	.+62     	; 0x1b20 <LCD_voidInit+0x122>
    1ae2:	fe 01       	movw	r30, r28
    1ae4:	e7 5b       	subi	r30, 0xB7	; 183
    1ae6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae8:	88 ec       	ldi	r24, 0xC8	; 200
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	91 83       	std	Z+1, r25	; 0x01
    1aee:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1af0:	fe 01       	movw	r30, r28
    1af2:	e7 5b       	subi	r30, 0xB7	; 183
    1af4:	ff 4f       	sbci	r31, 0xFF	; 255
    1af6:	80 81       	ld	r24, Z
    1af8:	91 81       	ldd	r25, Z+1	; 0x01
    1afa:	01 97       	sbiw	r24, 0x01	; 1
    1afc:	f1 f7       	brne	.-4      	; 0x1afa <LCD_voidInit+0xfc>
    1afe:	fe 01       	movw	r30, r28
    1b00:	e7 5b       	subi	r30, 0xB7	; 183
    1b02:	ff 4f       	sbci	r31, 0xFF	; 255
    1b04:	91 83       	std	Z+1, r25	; 0x01
    1b06:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b08:	de 01       	movw	r26, r28
    1b0a:	a5 5b       	subi	r26, 0xB5	; 181
    1b0c:	bf 4f       	sbci	r27, 0xFF	; 255
    1b0e:	fe 01       	movw	r30, r28
    1b10:	e5 5b       	subi	r30, 0xB5	; 181
    1b12:	ff 4f       	sbci	r31, 0xFF	; 255
    1b14:	80 81       	ld	r24, Z
    1b16:	91 81       	ldd	r25, Z+1	; 0x01
    1b18:	01 97       	sbiw	r24, 0x01	; 1
    1b1a:	11 96       	adiw	r26, 0x01	; 1
    1b1c:	9c 93       	st	X, r25
    1b1e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b20:	fe 01       	movw	r30, r28
    1b22:	e5 5b       	subi	r30, 0xB5	; 181
    1b24:	ff 4f       	sbci	r31, 0xFF	; 255
    1b26:	80 81       	ld	r24, Z
    1b28:	91 81       	ldd	r25, Z+1	; 0x01
    1b2a:	00 97       	sbiw	r24, 0x00	; 0
    1b2c:	d1 f6       	brne	.-76     	; 0x1ae2 <LCD_voidInit+0xe4>
    1b2e:	27 c0       	rjmp	.+78     	; 0x1b7e <LCD_voidInit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b30:	8e 01       	movw	r16, r28
    1b32:	05 5b       	subi	r16, 0xB5	; 181
    1b34:	1f 4f       	sbci	r17, 0xFF	; 255
    1b36:	fe 01       	movw	r30, r28
    1b38:	e3 5b       	subi	r30, 0xB3	; 179
    1b3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3c:	60 81       	ld	r22, Z
    1b3e:	71 81       	ldd	r23, Z+1	; 0x01
    1b40:	82 81       	ldd	r24, Z+2	; 0x02
    1b42:	93 81       	ldd	r25, Z+3	; 0x03
    1b44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b48:	dc 01       	movw	r26, r24
    1b4a:	cb 01       	movw	r24, r22
    1b4c:	f8 01       	movw	r30, r16
    1b4e:	91 83       	std	Z+1, r25	; 0x01
    1b50:	80 83       	st	Z, r24
    1b52:	de 01       	movw	r26, r28
    1b54:	a9 5b       	subi	r26, 0xB9	; 185
    1b56:	bf 4f       	sbci	r27, 0xFF	; 255
    1b58:	fe 01       	movw	r30, r28
    1b5a:	e5 5b       	subi	r30, 0xB5	; 181
    1b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5e:	80 81       	ld	r24, Z
    1b60:	91 81       	ldd	r25, Z+1	; 0x01
    1b62:	8d 93       	st	X+, r24
    1b64:	9c 93       	st	X, r25
    1b66:	fe 01       	movw	r30, r28
    1b68:	e9 5b       	subi	r30, 0xB9	; 185
    1b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6c:	80 81       	ld	r24, Z
    1b6e:	91 81       	ldd	r25, Z+1	; 0x01
    1b70:	01 97       	sbiw	r24, 0x01	; 1
    1b72:	f1 f7       	brne	.-4      	; 0x1b70 <LCD_voidInit+0x172>
    1b74:	fe 01       	movw	r30, r28
    1b76:	e9 5b       	subi	r30, 0xB9	; 185
    1b78:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7a:	91 83       	std	Z+1, r25	; 0x01
    1b7c:	80 83       	st	Z, r24
	_delay_ms(40);
	
	GPIO_voidSetPinDDR(LCD_RSPORT , LCD_RSPIN , OUTPUT);
    1b7e:	81 e0       	ldi	r24, 0x01	; 1
    1b80:	64 e0       	ldi	r22, 0x04	; 4
    1b82:	41 e0       	ldi	r20, 0x01	; 1
    1b84:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <GPIO_voidSetPinDDR>
	GPIO_voidSetPinDDR(LCD_RWPORT , LCD_RWPIN , OUTPUT);
    1b88:	81 e0       	ldi	r24, 0x01	; 1
    1b8a:	67 e0       	ldi	r22, 0x07	; 7
    1b8c:	41 e0       	ldi	r20, 0x01	; 1
    1b8e:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <GPIO_voidSetPinDDR>
	GPIO_voidSetPinDDR(LCD_ENPORT , LCD_ENPIN , OUTPUT);
    1b92:	81 e0       	ldi	r24, 0x01	; 1
    1b94:	65 e0       	ldi	r22, 0x05	; 5
    1b96:	41 e0       	ldi	r20, 0x01	; 1
    1b98:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <GPIO_voidSetPinDDR>
		LCD_voidSendCmd(LCD_ENTRY_MODE);
		_delay_ms(1);
		
	#elif LCD_MODE == 1 
		#if LCD_NIBBLE == 0 
			GPIO_voidSetLowNippleDDR(LCD_PORT , OUTPUT);
    1b9c:	81 e0       	ldi	r24, 0x01	; 1
    1b9e:	61 e0       	ldi	r22, 0x01	; 1
    1ba0:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <GPIO_voidSetLowNippleDDR>
			LCD_voidSendCmd(LCD_RETURN_HOME);
    1ba4:	82 e0       	ldi	r24, 0x02	; 2
    1ba6:	0e 94 3a 10 	call	0x2074	; 0x2074 <LCD_voidSendCmd>
    1baa:	fe 01       	movw	r30, r28
    1bac:	ed 5b       	subi	r30, 0xBD	; 189
    1bae:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb0:	80 e0       	ldi	r24, 0x00	; 0
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	a0 e7       	ldi	r26, 0x70	; 112
    1bb6:	b1 e4       	ldi	r27, 0x41	; 65
    1bb8:	80 83       	st	Z, r24
    1bba:	91 83       	std	Z+1, r25	; 0x01
    1bbc:	a2 83       	std	Z+2, r26	; 0x02
    1bbe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bc0:	8e 01       	movw	r16, r28
    1bc2:	01 5c       	subi	r16, 0xC1	; 193
    1bc4:	1f 4f       	sbci	r17, 0xFF	; 255
    1bc6:	fe 01       	movw	r30, r28
    1bc8:	ed 5b       	subi	r30, 0xBD	; 189
    1bca:	ff 4f       	sbci	r31, 0xFF	; 255
    1bcc:	60 81       	ld	r22, Z
    1bce:	71 81       	ldd	r23, Z+1	; 0x01
    1bd0:	82 81       	ldd	r24, Z+2	; 0x02
    1bd2:	93 81       	ldd	r25, Z+3	; 0x03
    1bd4:	20 e0       	ldi	r18, 0x00	; 0
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	4a ef       	ldi	r20, 0xFA	; 250
    1bda:	54 e4       	ldi	r21, 0x44	; 68
    1bdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1be0:	dc 01       	movw	r26, r24
    1be2:	cb 01       	movw	r24, r22
    1be4:	f8 01       	movw	r30, r16
    1be6:	80 83       	st	Z, r24
    1be8:	91 83       	std	Z+1, r25	; 0x01
    1bea:	a2 83       	std	Z+2, r26	; 0x02
    1bec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1bee:	fe 01       	movw	r30, r28
    1bf0:	ff 96       	adiw	r30, 0x3f	; 63
    1bf2:	60 81       	ld	r22, Z
    1bf4:	71 81       	ldd	r23, Z+1	; 0x01
    1bf6:	82 81       	ldd	r24, Z+2	; 0x02
    1bf8:	93 81       	ldd	r25, Z+3	; 0x03
    1bfa:	20 e0       	ldi	r18, 0x00	; 0
    1bfc:	30 e0       	ldi	r19, 0x00	; 0
    1bfe:	40 e8       	ldi	r20, 0x80	; 128
    1c00:	5f e3       	ldi	r21, 0x3F	; 63
    1c02:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c06:	88 23       	and	r24, r24
    1c08:	2c f4       	brge	.+10     	; 0x1c14 <LCD_voidInit+0x216>
		__ticks = 1;
    1c0a:	81 e0       	ldi	r24, 0x01	; 1
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	9e af       	std	Y+62, r25	; 0x3e
    1c10:	8d af       	std	Y+61, r24	; 0x3d
    1c12:	46 c0       	rjmp	.+140    	; 0x1ca0 <LCD_voidInit+0x2a2>
	else if (__tmp > 65535)
    1c14:	fe 01       	movw	r30, r28
    1c16:	ff 96       	adiw	r30, 0x3f	; 63
    1c18:	60 81       	ld	r22, Z
    1c1a:	71 81       	ldd	r23, Z+1	; 0x01
    1c1c:	82 81       	ldd	r24, Z+2	; 0x02
    1c1e:	93 81       	ldd	r25, Z+3	; 0x03
    1c20:	20 e0       	ldi	r18, 0x00	; 0
    1c22:	3f ef       	ldi	r19, 0xFF	; 255
    1c24:	4f e7       	ldi	r20, 0x7F	; 127
    1c26:	57 e4       	ldi	r21, 0x47	; 71
    1c28:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c2c:	18 16       	cp	r1, r24
    1c2e:	64 f5       	brge	.+88     	; 0x1c88 <LCD_voidInit+0x28a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c30:	fe 01       	movw	r30, r28
    1c32:	ed 5b       	subi	r30, 0xBD	; 189
    1c34:	ff 4f       	sbci	r31, 0xFF	; 255
    1c36:	60 81       	ld	r22, Z
    1c38:	71 81       	ldd	r23, Z+1	; 0x01
    1c3a:	82 81       	ldd	r24, Z+2	; 0x02
    1c3c:	93 81       	ldd	r25, Z+3	; 0x03
    1c3e:	20 e0       	ldi	r18, 0x00	; 0
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	40 e2       	ldi	r20, 0x20	; 32
    1c44:	51 e4       	ldi	r21, 0x41	; 65
    1c46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c4a:	dc 01       	movw	r26, r24
    1c4c:	cb 01       	movw	r24, r22
    1c4e:	bc 01       	movw	r22, r24
    1c50:	cd 01       	movw	r24, r26
    1c52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c56:	dc 01       	movw	r26, r24
    1c58:	cb 01       	movw	r24, r22
    1c5a:	9e af       	std	Y+62, r25	; 0x3e
    1c5c:	8d af       	std	Y+61, r24	; 0x3d
    1c5e:	0f c0       	rjmp	.+30     	; 0x1c7e <LCD_voidInit+0x280>
    1c60:	88 ec       	ldi	r24, 0xC8	; 200
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	9c af       	std	Y+60, r25	; 0x3c
    1c66:	8b af       	std	Y+59, r24	; 0x3b
    1c68:	8b ad       	ldd	r24, Y+59	; 0x3b
    1c6a:	9c ad       	ldd	r25, Y+60	; 0x3c
    1c6c:	01 97       	sbiw	r24, 0x01	; 1
    1c6e:	f1 f7       	brne	.-4      	; 0x1c6c <LCD_voidInit+0x26e>
    1c70:	9c af       	std	Y+60, r25	; 0x3c
    1c72:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c74:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c76:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c78:	01 97       	sbiw	r24, 0x01	; 1
    1c7a:	9e af       	std	Y+62, r25	; 0x3e
    1c7c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c7e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c80:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c82:	00 97       	sbiw	r24, 0x00	; 0
    1c84:	69 f7       	brne	.-38     	; 0x1c60 <LCD_voidInit+0x262>
    1c86:	16 c0       	rjmp	.+44     	; 0x1cb4 <LCD_voidInit+0x2b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c88:	fe 01       	movw	r30, r28
    1c8a:	ff 96       	adiw	r30, 0x3f	; 63
    1c8c:	60 81       	ld	r22, Z
    1c8e:	71 81       	ldd	r23, Z+1	; 0x01
    1c90:	82 81       	ldd	r24, Z+2	; 0x02
    1c92:	93 81       	ldd	r25, Z+3	; 0x03
    1c94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c98:	dc 01       	movw	r26, r24
    1c9a:	cb 01       	movw	r24, r22
    1c9c:	9e af       	std	Y+62, r25	; 0x3e
    1c9e:	8d af       	std	Y+61, r24	; 0x3d
    1ca0:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ca2:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ca4:	9a af       	std	Y+58, r25	; 0x3a
    1ca6:	89 af       	std	Y+57, r24	; 0x39
    1ca8:	89 ad       	ldd	r24, Y+57	; 0x39
    1caa:	9a ad       	ldd	r25, Y+58	; 0x3a
    1cac:	01 97       	sbiw	r24, 0x01	; 1
    1cae:	f1 f7       	brne	.-4      	; 0x1cac <LCD_voidInit+0x2ae>
    1cb0:	9a af       	std	Y+58, r25	; 0x3a
    1cb2:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(15);
			LCD_voidSendCmd(LCD_Function_4BIT_2Lines);
    1cb4:	88 e2       	ldi	r24, 0x28	; 40
    1cb6:	0e 94 3a 10 	call	0x2074	; 0x2074 <LCD_voidSendCmd>
    1cba:	80 e0       	ldi	r24, 0x00	; 0
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	a0 e8       	ldi	r26, 0x80	; 128
    1cc0:	bf e3       	ldi	r27, 0x3F	; 63
    1cc2:	8d ab       	std	Y+53, r24	; 0x35
    1cc4:	9e ab       	std	Y+54, r25	; 0x36
    1cc6:	af ab       	std	Y+55, r26	; 0x37
    1cc8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cca:	6d a9       	ldd	r22, Y+53	; 0x35
    1ccc:	7e a9       	ldd	r23, Y+54	; 0x36
    1cce:	8f a9       	ldd	r24, Y+55	; 0x37
    1cd0:	98 ad       	ldd	r25, Y+56	; 0x38
    1cd2:	20 e0       	ldi	r18, 0x00	; 0
    1cd4:	30 e0       	ldi	r19, 0x00	; 0
    1cd6:	4a ef       	ldi	r20, 0xFA	; 250
    1cd8:	54 e4       	ldi	r21, 0x44	; 68
    1cda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cde:	dc 01       	movw	r26, r24
    1ce0:	cb 01       	movw	r24, r22
    1ce2:	89 ab       	std	Y+49, r24	; 0x31
    1ce4:	9a ab       	std	Y+50, r25	; 0x32
    1ce6:	ab ab       	std	Y+51, r26	; 0x33
    1ce8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1cea:	69 a9       	ldd	r22, Y+49	; 0x31
    1cec:	7a a9       	ldd	r23, Y+50	; 0x32
    1cee:	8b a9       	ldd	r24, Y+51	; 0x33
    1cf0:	9c a9       	ldd	r25, Y+52	; 0x34
    1cf2:	20 e0       	ldi	r18, 0x00	; 0
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	40 e8       	ldi	r20, 0x80	; 128
    1cf8:	5f e3       	ldi	r21, 0x3F	; 63
    1cfa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cfe:	88 23       	and	r24, r24
    1d00:	2c f4       	brge	.+10     	; 0x1d0c <LCD_voidInit+0x30e>
		__ticks = 1;
    1d02:	81 e0       	ldi	r24, 0x01	; 1
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	98 ab       	std	Y+48, r25	; 0x30
    1d08:	8f a7       	std	Y+47, r24	; 0x2f
    1d0a:	3f c0       	rjmp	.+126    	; 0x1d8a <LCD_voidInit+0x38c>
	else if (__tmp > 65535)
    1d0c:	69 a9       	ldd	r22, Y+49	; 0x31
    1d0e:	7a a9       	ldd	r23, Y+50	; 0x32
    1d10:	8b a9       	ldd	r24, Y+51	; 0x33
    1d12:	9c a9       	ldd	r25, Y+52	; 0x34
    1d14:	20 e0       	ldi	r18, 0x00	; 0
    1d16:	3f ef       	ldi	r19, 0xFF	; 255
    1d18:	4f e7       	ldi	r20, 0x7F	; 127
    1d1a:	57 e4       	ldi	r21, 0x47	; 71
    1d1c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d20:	18 16       	cp	r1, r24
    1d22:	4c f5       	brge	.+82     	; 0x1d76 <LCD_voidInit+0x378>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d24:	6d a9       	ldd	r22, Y+53	; 0x35
    1d26:	7e a9       	ldd	r23, Y+54	; 0x36
    1d28:	8f a9       	ldd	r24, Y+55	; 0x37
    1d2a:	98 ad       	ldd	r25, Y+56	; 0x38
    1d2c:	20 e0       	ldi	r18, 0x00	; 0
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	40 e2       	ldi	r20, 0x20	; 32
    1d32:	51 e4       	ldi	r21, 0x41	; 65
    1d34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d38:	dc 01       	movw	r26, r24
    1d3a:	cb 01       	movw	r24, r22
    1d3c:	bc 01       	movw	r22, r24
    1d3e:	cd 01       	movw	r24, r26
    1d40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d44:	dc 01       	movw	r26, r24
    1d46:	cb 01       	movw	r24, r22
    1d48:	98 ab       	std	Y+48, r25	; 0x30
    1d4a:	8f a7       	std	Y+47, r24	; 0x2f
    1d4c:	0f c0       	rjmp	.+30     	; 0x1d6c <LCD_voidInit+0x36e>
    1d4e:	88 ec       	ldi	r24, 0xC8	; 200
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	9e a7       	std	Y+46, r25	; 0x2e
    1d54:	8d a7       	std	Y+45, r24	; 0x2d
    1d56:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d58:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d5a:	01 97       	sbiw	r24, 0x01	; 1
    1d5c:	f1 f7       	brne	.-4      	; 0x1d5a <LCD_voidInit+0x35c>
    1d5e:	9e a7       	std	Y+46, r25	; 0x2e
    1d60:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d62:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d64:	98 a9       	ldd	r25, Y+48	; 0x30
    1d66:	01 97       	sbiw	r24, 0x01	; 1
    1d68:	98 ab       	std	Y+48, r25	; 0x30
    1d6a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d6c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d6e:	98 a9       	ldd	r25, Y+48	; 0x30
    1d70:	00 97       	sbiw	r24, 0x00	; 0
    1d72:	69 f7       	brne	.-38     	; 0x1d4e <LCD_voidInit+0x350>
    1d74:	14 c0       	rjmp	.+40     	; 0x1d9e <LCD_voidInit+0x3a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d76:	69 a9       	ldd	r22, Y+49	; 0x31
    1d78:	7a a9       	ldd	r23, Y+50	; 0x32
    1d7a:	8b a9       	ldd	r24, Y+51	; 0x33
    1d7c:	9c a9       	ldd	r25, Y+52	; 0x34
    1d7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d82:	dc 01       	movw	r26, r24
    1d84:	cb 01       	movw	r24, r22
    1d86:	98 ab       	std	Y+48, r25	; 0x30
    1d88:	8f a7       	std	Y+47, r24	; 0x2f
    1d8a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d8c:	98 a9       	ldd	r25, Y+48	; 0x30
    1d8e:	9c a7       	std	Y+44, r25	; 0x2c
    1d90:	8b a7       	std	Y+43, r24	; 0x2b
    1d92:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d94:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d96:	01 97       	sbiw	r24, 0x01	; 1
    1d98:	f1 f7       	brne	.-4      	; 0x1d96 <LCD_voidInit+0x398>
    1d9a:	9c a7       	std	Y+44, r25	; 0x2c
    1d9c:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(1);
		    LCD_voidSendCmd(LCD_DISP_ON_CURSOR_ON);
    1d9e:	8e e0       	ldi	r24, 0x0E	; 14
    1da0:	0e 94 3a 10 	call	0x2074	; 0x2074 <LCD_voidSendCmd>
    1da4:	80 e0       	ldi	r24, 0x00	; 0
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	a0 e8       	ldi	r26, 0x80	; 128
    1daa:	bf e3       	ldi	r27, 0x3F	; 63
    1dac:	8f a3       	std	Y+39, r24	; 0x27
    1dae:	98 a7       	std	Y+40, r25	; 0x28
    1db0:	a9 a7       	std	Y+41, r26	; 0x29
    1db2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1db4:	6f a1       	ldd	r22, Y+39	; 0x27
    1db6:	78 a5       	ldd	r23, Y+40	; 0x28
    1db8:	89 a5       	ldd	r24, Y+41	; 0x29
    1dba:	9a a5       	ldd	r25, Y+42	; 0x2a
    1dbc:	20 e0       	ldi	r18, 0x00	; 0
    1dbe:	30 e0       	ldi	r19, 0x00	; 0
    1dc0:	4a ef       	ldi	r20, 0xFA	; 250
    1dc2:	54 e4       	ldi	r21, 0x44	; 68
    1dc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc8:	dc 01       	movw	r26, r24
    1dca:	cb 01       	movw	r24, r22
    1dcc:	8b a3       	std	Y+35, r24	; 0x23
    1dce:	9c a3       	std	Y+36, r25	; 0x24
    1dd0:	ad a3       	std	Y+37, r26	; 0x25
    1dd2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1dd4:	6b a1       	ldd	r22, Y+35	; 0x23
    1dd6:	7c a1       	ldd	r23, Y+36	; 0x24
    1dd8:	8d a1       	ldd	r24, Y+37	; 0x25
    1dda:	9e a1       	ldd	r25, Y+38	; 0x26
    1ddc:	20 e0       	ldi	r18, 0x00	; 0
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	40 e8       	ldi	r20, 0x80	; 128
    1de2:	5f e3       	ldi	r21, 0x3F	; 63
    1de4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1de8:	88 23       	and	r24, r24
    1dea:	2c f4       	brge	.+10     	; 0x1df6 <LCD_voidInit+0x3f8>
		__ticks = 1;
    1dec:	81 e0       	ldi	r24, 0x01	; 1
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	9a a3       	std	Y+34, r25	; 0x22
    1df2:	89 a3       	std	Y+33, r24	; 0x21
    1df4:	3f c0       	rjmp	.+126    	; 0x1e74 <LCD_voidInit+0x476>
	else if (__tmp > 65535)
    1df6:	6b a1       	ldd	r22, Y+35	; 0x23
    1df8:	7c a1       	ldd	r23, Y+36	; 0x24
    1dfa:	8d a1       	ldd	r24, Y+37	; 0x25
    1dfc:	9e a1       	ldd	r25, Y+38	; 0x26
    1dfe:	20 e0       	ldi	r18, 0x00	; 0
    1e00:	3f ef       	ldi	r19, 0xFF	; 255
    1e02:	4f e7       	ldi	r20, 0x7F	; 127
    1e04:	57 e4       	ldi	r21, 0x47	; 71
    1e06:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e0a:	18 16       	cp	r1, r24
    1e0c:	4c f5       	brge	.+82     	; 0x1e60 <LCD_voidInit+0x462>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e0e:	6f a1       	ldd	r22, Y+39	; 0x27
    1e10:	78 a5       	ldd	r23, Y+40	; 0x28
    1e12:	89 a5       	ldd	r24, Y+41	; 0x29
    1e14:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e16:	20 e0       	ldi	r18, 0x00	; 0
    1e18:	30 e0       	ldi	r19, 0x00	; 0
    1e1a:	40 e2       	ldi	r20, 0x20	; 32
    1e1c:	51 e4       	ldi	r21, 0x41	; 65
    1e1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e22:	dc 01       	movw	r26, r24
    1e24:	cb 01       	movw	r24, r22
    1e26:	bc 01       	movw	r22, r24
    1e28:	cd 01       	movw	r24, r26
    1e2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e2e:	dc 01       	movw	r26, r24
    1e30:	cb 01       	movw	r24, r22
    1e32:	9a a3       	std	Y+34, r25	; 0x22
    1e34:	89 a3       	std	Y+33, r24	; 0x21
    1e36:	0f c0       	rjmp	.+30     	; 0x1e56 <LCD_voidInit+0x458>
    1e38:	88 ec       	ldi	r24, 0xC8	; 200
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	98 a3       	std	Y+32, r25	; 0x20
    1e3e:	8f 8f       	std	Y+31, r24	; 0x1f
    1e40:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e42:	98 a1       	ldd	r25, Y+32	; 0x20
    1e44:	01 97       	sbiw	r24, 0x01	; 1
    1e46:	f1 f7       	brne	.-4      	; 0x1e44 <LCD_voidInit+0x446>
    1e48:	98 a3       	std	Y+32, r25	; 0x20
    1e4a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e4c:	89 a1       	ldd	r24, Y+33	; 0x21
    1e4e:	9a a1       	ldd	r25, Y+34	; 0x22
    1e50:	01 97       	sbiw	r24, 0x01	; 1
    1e52:	9a a3       	std	Y+34, r25	; 0x22
    1e54:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e56:	89 a1       	ldd	r24, Y+33	; 0x21
    1e58:	9a a1       	ldd	r25, Y+34	; 0x22
    1e5a:	00 97       	sbiw	r24, 0x00	; 0
    1e5c:	69 f7       	brne	.-38     	; 0x1e38 <LCD_voidInit+0x43a>
    1e5e:	14 c0       	rjmp	.+40     	; 0x1e88 <LCD_voidInit+0x48a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e60:	6b a1       	ldd	r22, Y+35	; 0x23
    1e62:	7c a1       	ldd	r23, Y+36	; 0x24
    1e64:	8d a1       	ldd	r24, Y+37	; 0x25
    1e66:	9e a1       	ldd	r25, Y+38	; 0x26
    1e68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e6c:	dc 01       	movw	r26, r24
    1e6e:	cb 01       	movw	r24, r22
    1e70:	9a a3       	std	Y+34, r25	; 0x22
    1e72:	89 a3       	std	Y+33, r24	; 0x21
    1e74:	89 a1       	ldd	r24, Y+33	; 0x21
    1e76:	9a a1       	ldd	r25, Y+34	; 0x22
    1e78:	9e 8f       	std	Y+30, r25	; 0x1e
    1e7a:	8d 8f       	std	Y+29, r24	; 0x1d
    1e7c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e7e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e80:	01 97       	sbiw	r24, 0x01	; 1
    1e82:	f1 f7       	brne	.-4      	; 0x1e80 <LCD_voidInit+0x482>
    1e84:	9e 8f       	std	Y+30, r25	; 0x1e
    1e86:	8d 8f       	std	Y+29, r24	; 0x1d
		    _delay_ms(1);
		    LCD_voidSendCmd(LCD_CLEAR_SCREEN);
    1e88:	81 e0       	ldi	r24, 0x01	; 1
    1e8a:	0e 94 3a 10 	call	0x2074	; 0x2074 <LCD_voidSendCmd>
    1e8e:	80 e0       	ldi	r24, 0x00	; 0
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	a0 e2       	ldi	r26, 0x20	; 32
    1e94:	b1 e4       	ldi	r27, 0x41	; 65
    1e96:	89 8f       	std	Y+25, r24	; 0x19
    1e98:	9a 8f       	std	Y+26, r25	; 0x1a
    1e9a:	ab 8f       	std	Y+27, r26	; 0x1b
    1e9c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e9e:	69 8d       	ldd	r22, Y+25	; 0x19
    1ea0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ea2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ea4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ea6:	20 e0       	ldi	r18, 0x00	; 0
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	4a ef       	ldi	r20, 0xFA	; 250
    1eac:	54 e4       	ldi	r21, 0x44	; 68
    1eae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eb2:	dc 01       	movw	r26, r24
    1eb4:	cb 01       	movw	r24, r22
    1eb6:	8d 8b       	std	Y+21, r24	; 0x15
    1eb8:	9e 8b       	std	Y+22, r25	; 0x16
    1eba:	af 8b       	std	Y+23, r26	; 0x17
    1ebc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ebe:	6d 89       	ldd	r22, Y+21	; 0x15
    1ec0:	7e 89       	ldd	r23, Y+22	; 0x16
    1ec2:	8f 89       	ldd	r24, Y+23	; 0x17
    1ec4:	98 8d       	ldd	r25, Y+24	; 0x18
    1ec6:	20 e0       	ldi	r18, 0x00	; 0
    1ec8:	30 e0       	ldi	r19, 0x00	; 0
    1eca:	40 e8       	ldi	r20, 0x80	; 128
    1ecc:	5f e3       	ldi	r21, 0x3F	; 63
    1ece:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ed2:	88 23       	and	r24, r24
    1ed4:	2c f4       	brge	.+10     	; 0x1ee0 <LCD_voidInit+0x4e2>
		__ticks = 1;
    1ed6:	81 e0       	ldi	r24, 0x01	; 1
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	9c 8b       	std	Y+20, r25	; 0x14
    1edc:	8b 8b       	std	Y+19, r24	; 0x13
    1ede:	3f c0       	rjmp	.+126    	; 0x1f5e <LCD_voidInit+0x560>
	else if (__tmp > 65535)
    1ee0:	6d 89       	ldd	r22, Y+21	; 0x15
    1ee2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ee4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ee6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ee8:	20 e0       	ldi	r18, 0x00	; 0
    1eea:	3f ef       	ldi	r19, 0xFF	; 255
    1eec:	4f e7       	ldi	r20, 0x7F	; 127
    1eee:	57 e4       	ldi	r21, 0x47	; 71
    1ef0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ef4:	18 16       	cp	r1, r24
    1ef6:	4c f5       	brge	.+82     	; 0x1f4a <LCD_voidInit+0x54c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ef8:	69 8d       	ldd	r22, Y+25	; 0x19
    1efa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1efc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1efe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f00:	20 e0       	ldi	r18, 0x00	; 0
    1f02:	30 e0       	ldi	r19, 0x00	; 0
    1f04:	40 e2       	ldi	r20, 0x20	; 32
    1f06:	51 e4       	ldi	r21, 0x41	; 65
    1f08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f0c:	dc 01       	movw	r26, r24
    1f0e:	cb 01       	movw	r24, r22
    1f10:	bc 01       	movw	r22, r24
    1f12:	cd 01       	movw	r24, r26
    1f14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f18:	dc 01       	movw	r26, r24
    1f1a:	cb 01       	movw	r24, r22
    1f1c:	9c 8b       	std	Y+20, r25	; 0x14
    1f1e:	8b 8b       	std	Y+19, r24	; 0x13
    1f20:	0f c0       	rjmp	.+30     	; 0x1f40 <LCD_voidInit+0x542>
    1f22:	88 ec       	ldi	r24, 0xC8	; 200
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	9a 8b       	std	Y+18, r25	; 0x12
    1f28:	89 8b       	std	Y+17, r24	; 0x11
    1f2a:	89 89       	ldd	r24, Y+17	; 0x11
    1f2c:	9a 89       	ldd	r25, Y+18	; 0x12
    1f2e:	01 97       	sbiw	r24, 0x01	; 1
    1f30:	f1 f7       	brne	.-4      	; 0x1f2e <LCD_voidInit+0x530>
    1f32:	9a 8b       	std	Y+18, r25	; 0x12
    1f34:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f36:	8b 89       	ldd	r24, Y+19	; 0x13
    1f38:	9c 89       	ldd	r25, Y+20	; 0x14
    1f3a:	01 97       	sbiw	r24, 0x01	; 1
    1f3c:	9c 8b       	std	Y+20, r25	; 0x14
    1f3e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f40:	8b 89       	ldd	r24, Y+19	; 0x13
    1f42:	9c 89       	ldd	r25, Y+20	; 0x14
    1f44:	00 97       	sbiw	r24, 0x00	; 0
    1f46:	69 f7       	brne	.-38     	; 0x1f22 <LCD_voidInit+0x524>
    1f48:	14 c0       	rjmp	.+40     	; 0x1f72 <LCD_voidInit+0x574>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f4a:	6d 89       	ldd	r22, Y+21	; 0x15
    1f4c:	7e 89       	ldd	r23, Y+22	; 0x16
    1f4e:	8f 89       	ldd	r24, Y+23	; 0x17
    1f50:	98 8d       	ldd	r25, Y+24	; 0x18
    1f52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f56:	dc 01       	movw	r26, r24
    1f58:	cb 01       	movw	r24, r22
    1f5a:	9c 8b       	std	Y+20, r25	; 0x14
    1f5c:	8b 8b       	std	Y+19, r24	; 0x13
    1f5e:	8b 89       	ldd	r24, Y+19	; 0x13
    1f60:	9c 89       	ldd	r25, Y+20	; 0x14
    1f62:	98 8b       	std	Y+16, r25	; 0x10
    1f64:	8f 87       	std	Y+15, r24	; 0x0f
    1f66:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f68:	98 89       	ldd	r25, Y+16	; 0x10
    1f6a:	01 97       	sbiw	r24, 0x01	; 1
    1f6c:	f1 f7       	brne	.-4      	; 0x1f6a <LCD_voidInit+0x56c>
    1f6e:	98 8b       	std	Y+16, r25	; 0x10
    1f70:	8f 87       	std	Y+15, r24	; 0x0f
		    _delay_ms(10);
		    LCD_voidSendCmd(LCD_ENTRY_MODE);
    1f72:	86 e0       	ldi	r24, 0x06	; 6
    1f74:	0e 94 3a 10 	call	0x2074	; 0x2074 <LCD_voidSendCmd>
    1f78:	80 e0       	ldi	r24, 0x00	; 0
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	a0 e8       	ldi	r26, 0x80	; 128
    1f7e:	bf e3       	ldi	r27, 0x3F	; 63
    1f80:	8b 87       	std	Y+11, r24	; 0x0b
    1f82:	9c 87       	std	Y+12, r25	; 0x0c
    1f84:	ad 87       	std	Y+13, r26	; 0x0d
    1f86:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f88:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f8a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f90:	20 e0       	ldi	r18, 0x00	; 0
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	4a ef       	ldi	r20, 0xFA	; 250
    1f96:	54 e4       	ldi	r21, 0x44	; 68
    1f98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f9c:	dc 01       	movw	r26, r24
    1f9e:	cb 01       	movw	r24, r22
    1fa0:	8f 83       	std	Y+7, r24	; 0x07
    1fa2:	98 87       	std	Y+8, r25	; 0x08
    1fa4:	a9 87       	std	Y+9, r26	; 0x09
    1fa6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fa8:	6f 81       	ldd	r22, Y+7	; 0x07
    1faa:	78 85       	ldd	r23, Y+8	; 0x08
    1fac:	89 85       	ldd	r24, Y+9	; 0x09
    1fae:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fb0:	20 e0       	ldi	r18, 0x00	; 0
    1fb2:	30 e0       	ldi	r19, 0x00	; 0
    1fb4:	40 e8       	ldi	r20, 0x80	; 128
    1fb6:	5f e3       	ldi	r21, 0x3F	; 63
    1fb8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fbc:	88 23       	and	r24, r24
    1fbe:	2c f4       	brge	.+10     	; 0x1fca <LCD_voidInit+0x5cc>
		__ticks = 1;
    1fc0:	81 e0       	ldi	r24, 0x01	; 1
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	9e 83       	std	Y+6, r25	; 0x06
    1fc6:	8d 83       	std	Y+5, r24	; 0x05
    1fc8:	3f c0       	rjmp	.+126    	; 0x2048 <LCD_voidInit+0x64a>
	else if (__tmp > 65535)
    1fca:	6f 81       	ldd	r22, Y+7	; 0x07
    1fcc:	78 85       	ldd	r23, Y+8	; 0x08
    1fce:	89 85       	ldd	r24, Y+9	; 0x09
    1fd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fd2:	20 e0       	ldi	r18, 0x00	; 0
    1fd4:	3f ef       	ldi	r19, 0xFF	; 255
    1fd6:	4f e7       	ldi	r20, 0x7F	; 127
    1fd8:	57 e4       	ldi	r21, 0x47	; 71
    1fda:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fde:	18 16       	cp	r1, r24
    1fe0:	4c f5       	brge	.+82     	; 0x2034 <LCD_voidInit+0x636>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fe2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fe4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fe6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fe8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fea:	20 e0       	ldi	r18, 0x00	; 0
    1fec:	30 e0       	ldi	r19, 0x00	; 0
    1fee:	40 e2       	ldi	r20, 0x20	; 32
    1ff0:	51 e4       	ldi	r21, 0x41	; 65
    1ff2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ff6:	dc 01       	movw	r26, r24
    1ff8:	cb 01       	movw	r24, r22
    1ffa:	bc 01       	movw	r22, r24
    1ffc:	cd 01       	movw	r24, r26
    1ffe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2002:	dc 01       	movw	r26, r24
    2004:	cb 01       	movw	r24, r22
    2006:	9e 83       	std	Y+6, r25	; 0x06
    2008:	8d 83       	std	Y+5, r24	; 0x05
    200a:	0f c0       	rjmp	.+30     	; 0x202a <LCD_voidInit+0x62c>
    200c:	88 ec       	ldi	r24, 0xC8	; 200
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	9c 83       	std	Y+4, r25	; 0x04
    2012:	8b 83       	std	Y+3, r24	; 0x03
    2014:	8b 81       	ldd	r24, Y+3	; 0x03
    2016:	9c 81       	ldd	r25, Y+4	; 0x04
    2018:	01 97       	sbiw	r24, 0x01	; 1
    201a:	f1 f7       	brne	.-4      	; 0x2018 <LCD_voidInit+0x61a>
    201c:	9c 83       	std	Y+4, r25	; 0x04
    201e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2020:	8d 81       	ldd	r24, Y+5	; 0x05
    2022:	9e 81       	ldd	r25, Y+6	; 0x06
    2024:	01 97       	sbiw	r24, 0x01	; 1
    2026:	9e 83       	std	Y+6, r25	; 0x06
    2028:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    202a:	8d 81       	ldd	r24, Y+5	; 0x05
    202c:	9e 81       	ldd	r25, Y+6	; 0x06
    202e:	00 97       	sbiw	r24, 0x00	; 0
    2030:	69 f7       	brne	.-38     	; 0x200c <LCD_voidInit+0x60e>
    2032:	14 c0       	rjmp	.+40     	; 0x205c <LCD_voidInit+0x65e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2034:	6f 81       	ldd	r22, Y+7	; 0x07
    2036:	78 85       	ldd	r23, Y+8	; 0x08
    2038:	89 85       	ldd	r24, Y+9	; 0x09
    203a:	9a 85       	ldd	r25, Y+10	; 0x0a
    203c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2040:	dc 01       	movw	r26, r24
    2042:	cb 01       	movw	r24, r22
    2044:	9e 83       	std	Y+6, r25	; 0x06
    2046:	8d 83       	std	Y+5, r24	; 0x05
    2048:	8d 81       	ldd	r24, Y+5	; 0x05
    204a:	9e 81       	ldd	r25, Y+6	; 0x06
    204c:	9a 83       	std	Y+2, r25	; 0x02
    204e:	89 83       	std	Y+1, r24	; 0x01
    2050:	89 81       	ldd	r24, Y+1	; 0x01
    2052:	9a 81       	ldd	r25, Y+2	; 0x02
    2054:	01 97       	sbiw	r24, 0x01	; 1
    2056:	f1 f7       	brne	.-4      	; 0x2054 <LCD_voidInit+0x656>
    2058:	9a 83       	std	Y+2, r25	; 0x02
    205a:	89 83       	std	Y+1, r24	; 0x01
	#endif
	
	
	

}
    205c:	cc 5a       	subi	r28, 0xAC	; 172
    205e:	df 4f       	sbci	r29, 0xFF	; 255
    2060:	0f b6       	in	r0, 0x3f	; 63
    2062:	f8 94       	cli
    2064:	de bf       	out	0x3e, r29	; 62
    2066:	0f be       	out	0x3f, r0	; 63
    2068:	cd bf       	out	0x3d, r28	; 61
    206a:	cf 91       	pop	r28
    206c:	df 91       	pop	r29
    206e:	1f 91       	pop	r17
    2070:	0f 91       	pop	r16
    2072:	08 95       	ret

00002074 <LCD_voidSendCmd>:

void LCD_voidSendCmd(u8 copy_u8Cmd)
{
    2074:	df 93       	push	r29
    2076:	cf 93       	push	r28
    2078:	cd b7       	in	r28, 0x3d	; 61
    207a:	de b7       	in	r29, 0x3e	; 62
    207c:	2f 97       	sbiw	r28, 0x0f	; 15
    207e:	0f b6       	in	r0, 0x3f	; 63
    2080:	f8 94       	cli
    2082:	de bf       	out	0x3e, r29	; 62
    2084:	0f be       	out	0x3f, r0	; 63
    2086:	cd bf       	out	0x3d, r28	; 61
    2088:	8f 87       	std	Y+15, r24	; 0x0f
		GPIO_voidWritePin  (LCD_RWPORT , LCD_RWPIN , 0);
		LCD_voidSendEnPulse();
		
	#elif LCD_MODE == 1 
		#if LCD_NIBBLE == 0 
			GPIO_voidWriteLowNipple(LCD_PORT , copy_u8Cmd>>4);
    208a:	8f 85       	ldd	r24, Y+15	; 0x0f
    208c:	98 2f       	mov	r25, r24
    208e:	92 95       	swap	r25
    2090:	9f 70       	andi	r25, 0x0F	; 15
    2092:	81 e0       	ldi	r24, 0x01	; 1
    2094:	69 2f       	mov	r22, r25
    2096:	0e 94 1f 0c 	call	0x183e	; 0x183e <GPIO_voidWriteLowNipple>
			GPIO_voidWritePin  (LCD_RSPORT , LCD_RSPIN , 0);
    209a:	81 e0       	ldi	r24, 0x01	; 1
    209c:	64 e0       	ldi	r22, 0x04	; 4
    209e:	40 e0       	ldi	r20, 0x00	; 0
    20a0:	0e 94 3f 09 	call	0x127e	; 0x127e <GPIO_voidWritePin>
			GPIO_voidWritePin  (LCD_RWPORT , LCD_RWPIN , 0);
    20a4:	81 e0       	ldi	r24, 0x01	; 1
    20a6:	67 e0       	ldi	r22, 0x07	; 7
    20a8:	40 e0       	ldi	r20, 0x00	; 0
    20aa:	0e 94 3f 09 	call	0x127e	; 0x127e <GPIO_voidWritePin>
			LCD_voidSendEnPulse();
    20ae:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <LCD_voidSendEnPulse>
		
			GPIO_voidWriteLowNipple(LCD_PORT , copy_u8Cmd);
    20b2:	81 e0       	ldi	r24, 0x01	; 1
    20b4:	6f 85       	ldd	r22, Y+15	; 0x0f
    20b6:	0e 94 1f 0c 	call	0x183e	; 0x183e <GPIO_voidWriteLowNipple>
			GPIO_voidWritePin  (LCD_RSPORT , LCD_RSPIN , 0);
    20ba:	81 e0       	ldi	r24, 0x01	; 1
    20bc:	64 e0       	ldi	r22, 0x04	; 4
    20be:	40 e0       	ldi	r20, 0x00	; 0
    20c0:	0e 94 3f 09 	call	0x127e	; 0x127e <GPIO_voidWritePin>
			GPIO_voidWritePin  (LCD_RWPORT , LCD_RWPIN , 0);
    20c4:	81 e0       	ldi	r24, 0x01	; 1
    20c6:	67 e0       	ldi	r22, 0x07	; 7
    20c8:	40 e0       	ldi	r20, 0x00	; 0
    20ca:	0e 94 3f 09 	call	0x127e	; 0x127e <GPIO_voidWritePin>
			LCD_voidSendEnPulse();
    20ce:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <LCD_voidSendEnPulse>
    20d2:	80 e0       	ldi	r24, 0x00	; 0
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	a0 e0       	ldi	r26, 0x00	; 0
    20d8:	b0 e4       	ldi	r27, 0x40	; 64
    20da:	8b 87       	std	Y+11, r24	; 0x0b
    20dc:	9c 87       	std	Y+12, r25	; 0x0c
    20de:	ad 87       	std	Y+13, r26	; 0x0d
    20e0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    20e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    20e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    20e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    20ea:	20 e0       	ldi	r18, 0x00	; 0
    20ec:	30 e0       	ldi	r19, 0x00	; 0
    20ee:	4a ef       	ldi	r20, 0xFA	; 250
    20f0:	54 e4       	ldi	r21, 0x44	; 68
    20f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20f6:	dc 01       	movw	r26, r24
    20f8:	cb 01       	movw	r24, r22
    20fa:	8f 83       	std	Y+7, r24	; 0x07
    20fc:	98 87       	std	Y+8, r25	; 0x08
    20fe:	a9 87       	std	Y+9, r26	; 0x09
    2100:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2102:	6f 81       	ldd	r22, Y+7	; 0x07
    2104:	78 85       	ldd	r23, Y+8	; 0x08
    2106:	89 85       	ldd	r24, Y+9	; 0x09
    2108:	9a 85       	ldd	r25, Y+10	; 0x0a
    210a:	20 e0       	ldi	r18, 0x00	; 0
    210c:	30 e0       	ldi	r19, 0x00	; 0
    210e:	40 e8       	ldi	r20, 0x80	; 128
    2110:	5f e3       	ldi	r21, 0x3F	; 63
    2112:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2116:	88 23       	and	r24, r24
    2118:	2c f4       	brge	.+10     	; 0x2124 <LCD_voidSendCmd+0xb0>
		__ticks = 1;
    211a:	81 e0       	ldi	r24, 0x01	; 1
    211c:	90 e0       	ldi	r25, 0x00	; 0
    211e:	9e 83       	std	Y+6, r25	; 0x06
    2120:	8d 83       	std	Y+5, r24	; 0x05
    2122:	3f c0       	rjmp	.+126    	; 0x21a2 <LCD_voidSendCmd+0x12e>
	else if (__tmp > 65535)
    2124:	6f 81       	ldd	r22, Y+7	; 0x07
    2126:	78 85       	ldd	r23, Y+8	; 0x08
    2128:	89 85       	ldd	r24, Y+9	; 0x09
    212a:	9a 85       	ldd	r25, Y+10	; 0x0a
    212c:	20 e0       	ldi	r18, 0x00	; 0
    212e:	3f ef       	ldi	r19, 0xFF	; 255
    2130:	4f e7       	ldi	r20, 0x7F	; 127
    2132:	57 e4       	ldi	r21, 0x47	; 71
    2134:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2138:	18 16       	cp	r1, r24
    213a:	4c f5       	brge	.+82     	; 0x218e <LCD_voidSendCmd+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    213c:	6b 85       	ldd	r22, Y+11	; 0x0b
    213e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2140:	8d 85       	ldd	r24, Y+13	; 0x0d
    2142:	9e 85       	ldd	r25, Y+14	; 0x0e
    2144:	20 e0       	ldi	r18, 0x00	; 0
    2146:	30 e0       	ldi	r19, 0x00	; 0
    2148:	40 e2       	ldi	r20, 0x20	; 32
    214a:	51 e4       	ldi	r21, 0x41	; 65
    214c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2150:	dc 01       	movw	r26, r24
    2152:	cb 01       	movw	r24, r22
    2154:	bc 01       	movw	r22, r24
    2156:	cd 01       	movw	r24, r26
    2158:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    215c:	dc 01       	movw	r26, r24
    215e:	cb 01       	movw	r24, r22
    2160:	9e 83       	std	Y+6, r25	; 0x06
    2162:	8d 83       	std	Y+5, r24	; 0x05
    2164:	0f c0       	rjmp	.+30     	; 0x2184 <LCD_voidSendCmd+0x110>
    2166:	88 ec       	ldi	r24, 0xC8	; 200
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	9c 83       	std	Y+4, r25	; 0x04
    216c:	8b 83       	std	Y+3, r24	; 0x03
    216e:	8b 81       	ldd	r24, Y+3	; 0x03
    2170:	9c 81       	ldd	r25, Y+4	; 0x04
    2172:	01 97       	sbiw	r24, 0x01	; 1
    2174:	f1 f7       	brne	.-4      	; 0x2172 <LCD_voidSendCmd+0xfe>
    2176:	9c 83       	std	Y+4, r25	; 0x04
    2178:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    217a:	8d 81       	ldd	r24, Y+5	; 0x05
    217c:	9e 81       	ldd	r25, Y+6	; 0x06
    217e:	01 97       	sbiw	r24, 0x01	; 1
    2180:	9e 83       	std	Y+6, r25	; 0x06
    2182:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2184:	8d 81       	ldd	r24, Y+5	; 0x05
    2186:	9e 81       	ldd	r25, Y+6	; 0x06
    2188:	00 97       	sbiw	r24, 0x00	; 0
    218a:	69 f7       	brne	.-38     	; 0x2166 <LCD_voidSendCmd+0xf2>
    218c:	14 c0       	rjmp	.+40     	; 0x21b6 <LCD_voidSendCmd+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    218e:	6f 81       	ldd	r22, Y+7	; 0x07
    2190:	78 85       	ldd	r23, Y+8	; 0x08
    2192:	89 85       	ldd	r24, Y+9	; 0x09
    2194:	9a 85       	ldd	r25, Y+10	; 0x0a
    2196:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    219a:	dc 01       	movw	r26, r24
    219c:	cb 01       	movw	r24, r22
    219e:	9e 83       	std	Y+6, r25	; 0x06
    21a0:	8d 83       	std	Y+5, r24	; 0x05
    21a2:	8d 81       	ldd	r24, Y+5	; 0x05
    21a4:	9e 81       	ldd	r25, Y+6	; 0x06
    21a6:	9a 83       	std	Y+2, r25	; 0x02
    21a8:	89 83       	std	Y+1, r24	; 0x01
    21aa:	89 81       	ldd	r24, Y+1	; 0x01
    21ac:	9a 81       	ldd	r25, Y+2	; 0x02
    21ae:	01 97       	sbiw	r24, 0x01	; 1
    21b0:	f1 f7       	brne	.-4      	; 0x21ae <LCD_voidSendCmd+0x13a>
    21b2:	9a 83       	std	Y+2, r25	; 0x02
    21b4:	89 83       	std	Y+1, r24	; 0x01
			LCD_voidSendEnPulse();
			_delay_ms(2);
		#endif
	#endif
	
}
    21b6:	2f 96       	adiw	r28, 0x0f	; 15
    21b8:	0f b6       	in	r0, 0x3f	; 63
    21ba:	f8 94       	cli
    21bc:	de bf       	out	0x3e, r29	; 62
    21be:	0f be       	out	0x3f, r0	; 63
    21c0:	cd bf       	out	0x3d, r28	; 61
    21c2:	cf 91       	pop	r28
    21c4:	df 91       	pop	r29
    21c6:	08 95       	ret

000021c8 <LCD_voidSendEnPulse>:
void LCD_voidSendEnPulse ()
{
    21c8:	df 93       	push	r29
    21ca:	cf 93       	push	r28
    21cc:	cd b7       	in	r28, 0x3d	; 61
    21ce:	de b7       	in	r29, 0x3e	; 62
    21d0:	2e 97       	sbiw	r28, 0x0e	; 14
    21d2:	0f b6       	in	r0, 0x3f	; 63
    21d4:	f8 94       	cli
    21d6:	de bf       	out	0x3e, r29	; 62
    21d8:	0f be       	out	0x3f, r0	; 63
    21da:	cd bf       	out	0x3d, r28	; 61
	GPIO_voidWritePin  (LCD_ENPORT , LCD_ENPIN , 1);
    21dc:	81 e0       	ldi	r24, 0x01	; 1
    21de:	65 e0       	ldi	r22, 0x05	; 5
    21e0:	41 e0       	ldi	r20, 0x01	; 1
    21e2:	0e 94 3f 09 	call	0x127e	; 0x127e <GPIO_voidWritePin>
    21e6:	80 e0       	ldi	r24, 0x00	; 0
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	a0 e0       	ldi	r26, 0x00	; 0
    21ec:	b0 e4       	ldi	r27, 0x40	; 64
    21ee:	8b 87       	std	Y+11, r24	; 0x0b
    21f0:	9c 87       	std	Y+12, r25	; 0x0c
    21f2:	ad 87       	std	Y+13, r26	; 0x0d
    21f4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    21f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    21fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    21fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    21fe:	20 e0       	ldi	r18, 0x00	; 0
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	4a ef       	ldi	r20, 0xFA	; 250
    2204:	54 e4       	ldi	r21, 0x44	; 68
    2206:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    220a:	dc 01       	movw	r26, r24
    220c:	cb 01       	movw	r24, r22
    220e:	8f 83       	std	Y+7, r24	; 0x07
    2210:	98 87       	std	Y+8, r25	; 0x08
    2212:	a9 87       	std	Y+9, r26	; 0x09
    2214:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2216:	6f 81       	ldd	r22, Y+7	; 0x07
    2218:	78 85       	ldd	r23, Y+8	; 0x08
    221a:	89 85       	ldd	r24, Y+9	; 0x09
    221c:	9a 85       	ldd	r25, Y+10	; 0x0a
    221e:	20 e0       	ldi	r18, 0x00	; 0
    2220:	30 e0       	ldi	r19, 0x00	; 0
    2222:	40 e8       	ldi	r20, 0x80	; 128
    2224:	5f e3       	ldi	r21, 0x3F	; 63
    2226:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    222a:	88 23       	and	r24, r24
    222c:	2c f4       	brge	.+10     	; 0x2238 <LCD_voidSendEnPulse+0x70>
		__ticks = 1;
    222e:	81 e0       	ldi	r24, 0x01	; 1
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	9e 83       	std	Y+6, r25	; 0x06
    2234:	8d 83       	std	Y+5, r24	; 0x05
    2236:	3f c0       	rjmp	.+126    	; 0x22b6 <LCD_voidSendEnPulse+0xee>
	else if (__tmp > 65535)
    2238:	6f 81       	ldd	r22, Y+7	; 0x07
    223a:	78 85       	ldd	r23, Y+8	; 0x08
    223c:	89 85       	ldd	r24, Y+9	; 0x09
    223e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2240:	20 e0       	ldi	r18, 0x00	; 0
    2242:	3f ef       	ldi	r19, 0xFF	; 255
    2244:	4f e7       	ldi	r20, 0x7F	; 127
    2246:	57 e4       	ldi	r21, 0x47	; 71
    2248:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    224c:	18 16       	cp	r1, r24
    224e:	4c f5       	brge	.+82     	; 0x22a2 <LCD_voidSendEnPulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2250:	6b 85       	ldd	r22, Y+11	; 0x0b
    2252:	7c 85       	ldd	r23, Y+12	; 0x0c
    2254:	8d 85       	ldd	r24, Y+13	; 0x0d
    2256:	9e 85       	ldd	r25, Y+14	; 0x0e
    2258:	20 e0       	ldi	r18, 0x00	; 0
    225a:	30 e0       	ldi	r19, 0x00	; 0
    225c:	40 e2       	ldi	r20, 0x20	; 32
    225e:	51 e4       	ldi	r21, 0x41	; 65
    2260:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2264:	dc 01       	movw	r26, r24
    2266:	cb 01       	movw	r24, r22
    2268:	bc 01       	movw	r22, r24
    226a:	cd 01       	movw	r24, r26
    226c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2270:	dc 01       	movw	r26, r24
    2272:	cb 01       	movw	r24, r22
    2274:	9e 83       	std	Y+6, r25	; 0x06
    2276:	8d 83       	std	Y+5, r24	; 0x05
    2278:	0f c0       	rjmp	.+30     	; 0x2298 <LCD_voidSendEnPulse+0xd0>
    227a:	88 ec       	ldi	r24, 0xC8	; 200
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	9c 83       	std	Y+4, r25	; 0x04
    2280:	8b 83       	std	Y+3, r24	; 0x03
    2282:	8b 81       	ldd	r24, Y+3	; 0x03
    2284:	9c 81       	ldd	r25, Y+4	; 0x04
    2286:	01 97       	sbiw	r24, 0x01	; 1
    2288:	f1 f7       	brne	.-4      	; 0x2286 <LCD_voidSendEnPulse+0xbe>
    228a:	9c 83       	std	Y+4, r25	; 0x04
    228c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    228e:	8d 81       	ldd	r24, Y+5	; 0x05
    2290:	9e 81       	ldd	r25, Y+6	; 0x06
    2292:	01 97       	sbiw	r24, 0x01	; 1
    2294:	9e 83       	std	Y+6, r25	; 0x06
    2296:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2298:	8d 81       	ldd	r24, Y+5	; 0x05
    229a:	9e 81       	ldd	r25, Y+6	; 0x06
    229c:	00 97       	sbiw	r24, 0x00	; 0
    229e:	69 f7       	brne	.-38     	; 0x227a <LCD_voidSendEnPulse+0xb2>
    22a0:	14 c0       	rjmp	.+40     	; 0x22ca <LCD_voidSendEnPulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22a2:	6f 81       	ldd	r22, Y+7	; 0x07
    22a4:	78 85       	ldd	r23, Y+8	; 0x08
    22a6:	89 85       	ldd	r24, Y+9	; 0x09
    22a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    22aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ae:	dc 01       	movw	r26, r24
    22b0:	cb 01       	movw	r24, r22
    22b2:	9e 83       	std	Y+6, r25	; 0x06
    22b4:	8d 83       	std	Y+5, r24	; 0x05
    22b6:	8d 81       	ldd	r24, Y+5	; 0x05
    22b8:	9e 81       	ldd	r25, Y+6	; 0x06
    22ba:	9a 83       	std	Y+2, r25	; 0x02
    22bc:	89 83       	std	Y+1, r24	; 0x01
    22be:	89 81       	ldd	r24, Y+1	; 0x01
    22c0:	9a 81       	ldd	r25, Y+2	; 0x02
    22c2:	01 97       	sbiw	r24, 0x01	; 1
    22c4:	f1 f7       	brne	.-4      	; 0x22c2 <LCD_voidSendEnPulse+0xfa>
    22c6:	9a 83       	std	Y+2, r25	; 0x02
    22c8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	GPIO_voidWritePin  (LCD_ENPORT , LCD_ENPIN , 0);
    22ca:	81 e0       	ldi	r24, 0x01	; 1
    22cc:	65 e0       	ldi	r22, 0x05	; 5
    22ce:	40 e0       	ldi	r20, 0x00	; 0
    22d0:	0e 94 3f 09 	call	0x127e	; 0x127e <GPIO_voidWritePin>

}
    22d4:	2e 96       	adiw	r28, 0x0e	; 14
    22d6:	0f b6       	in	r0, 0x3f	; 63
    22d8:	f8 94       	cli
    22da:	de bf       	out	0x3e, r29	; 62
    22dc:	0f be       	out	0x3f, r0	; 63
    22de:	cd bf       	out	0x3d, r28	; 61
    22e0:	cf 91       	pop	r28
    22e2:	df 91       	pop	r29
    22e4:	08 95       	ret

000022e6 <LCD_voidMoveCrusor>:
void LCD_voidMoveCrusor(u8 copy_u8Line , u8 copy_u8Position)
{
    22e6:	df 93       	push	r29
    22e8:	cf 93       	push	r28
    22ea:	cd b7       	in	r28, 0x3d	; 61
    22ec:	de b7       	in	r29, 0x3e	; 62
    22ee:	61 97       	sbiw	r28, 0x11	; 17
    22f0:	0f b6       	in	r0, 0x3f	; 63
    22f2:	f8 94       	cli
    22f4:	de bf       	out	0x3e, r29	; 62
    22f6:	0f be       	out	0x3f, r0	; 63
    22f8:	cd bf       	out	0x3d, r28	; 61
    22fa:	88 8b       	std	Y+16, r24	; 0x10
    22fc:	69 8b       	std	Y+17, r22	; 0x11
	u8 data ;
if(copy_u8Line < 1 || copy_u8Line > 2 || copy_u8Position >16 || copy_u8Position <1 )	
    22fe:	88 89       	ldd	r24, Y+16	; 0x10
    2300:	88 23       	and	r24, r24
    2302:	49 f0       	breq	.+18     	; 0x2316 <LCD_voidMoveCrusor+0x30>
    2304:	88 89       	ldd	r24, Y+16	; 0x10
    2306:	83 30       	cpi	r24, 0x03	; 3
    2308:	30 f4       	brcc	.+12     	; 0x2316 <LCD_voidMoveCrusor+0x30>
    230a:	89 89       	ldd	r24, Y+17	; 0x11
    230c:	81 31       	cpi	r24, 0x11	; 17
    230e:	18 f4       	brcc	.+6      	; 0x2316 <LCD_voidMoveCrusor+0x30>
    2310:	89 89       	ldd	r24, Y+17	; 0x11
    2312:	88 23       	and	r24, r24
    2314:	19 f4       	brne	.+6      	; 0x231c <LCD_voidMoveCrusor+0x36>
{
	data = 0x80 ;
    2316:	80 e8       	ldi	r24, 0x80	; 128
    2318:	8f 87       	std	Y+15, r24	; 0x0f
    231a:	0d c0       	rjmp	.+26     	; 0x2336 <LCD_voidMoveCrusor+0x50>
}
else if (copy_u8Line ==1)
    231c:	88 89       	ldd	r24, Y+16	; 0x10
    231e:	81 30       	cpi	r24, 0x01	; 1
    2320:	21 f4       	brne	.+8      	; 0x232a <LCD_voidMoveCrusor+0x44>
{
	data = 0x80 +(copy_u8Position -1);
    2322:	89 89       	ldd	r24, Y+17	; 0x11
    2324:	81 58       	subi	r24, 0x81	; 129
    2326:	8f 87       	std	Y+15, r24	; 0x0f
    2328:	06 c0       	rjmp	.+12     	; 0x2336 <LCD_voidMoveCrusor+0x50>
}
else if (copy_u8Line==2)
    232a:	88 89       	ldd	r24, Y+16	; 0x10
    232c:	82 30       	cpi	r24, 0x02	; 2
    232e:	19 f4       	brne	.+6      	; 0x2336 <LCD_voidMoveCrusor+0x50>
{
	data = 0xC0 + (copy_u8Position -1 );
    2330:	89 89       	ldd	r24, Y+17	; 0x11
    2332:	81 54       	subi	r24, 0x41	; 65
    2334:	8f 87       	std	Y+15, r24	; 0x0f
}
LCD_voidSendCmd(data);
    2336:	8f 85       	ldd	r24, Y+15	; 0x0f
    2338:	0e 94 3a 10 	call	0x2074	; 0x2074 <LCD_voidSendCmd>
    233c:	80 e0       	ldi	r24, 0x00	; 0
    233e:	90 e0       	ldi	r25, 0x00	; 0
    2340:	a0 e8       	ldi	r26, 0x80	; 128
    2342:	bf e3       	ldi	r27, 0x3F	; 63
    2344:	8b 87       	std	Y+11, r24	; 0x0b
    2346:	9c 87       	std	Y+12, r25	; 0x0c
    2348:	ad 87       	std	Y+13, r26	; 0x0d
    234a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    234c:	6b 85       	ldd	r22, Y+11	; 0x0b
    234e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2350:	8d 85       	ldd	r24, Y+13	; 0x0d
    2352:	9e 85       	ldd	r25, Y+14	; 0x0e
    2354:	20 e0       	ldi	r18, 0x00	; 0
    2356:	30 e0       	ldi	r19, 0x00	; 0
    2358:	4a ef       	ldi	r20, 0xFA	; 250
    235a:	54 e4       	ldi	r21, 0x44	; 68
    235c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2360:	dc 01       	movw	r26, r24
    2362:	cb 01       	movw	r24, r22
    2364:	8f 83       	std	Y+7, r24	; 0x07
    2366:	98 87       	std	Y+8, r25	; 0x08
    2368:	a9 87       	std	Y+9, r26	; 0x09
    236a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    236c:	6f 81       	ldd	r22, Y+7	; 0x07
    236e:	78 85       	ldd	r23, Y+8	; 0x08
    2370:	89 85       	ldd	r24, Y+9	; 0x09
    2372:	9a 85       	ldd	r25, Y+10	; 0x0a
    2374:	20 e0       	ldi	r18, 0x00	; 0
    2376:	30 e0       	ldi	r19, 0x00	; 0
    2378:	40 e8       	ldi	r20, 0x80	; 128
    237a:	5f e3       	ldi	r21, 0x3F	; 63
    237c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2380:	88 23       	and	r24, r24
    2382:	2c f4       	brge	.+10     	; 0x238e <LCD_voidMoveCrusor+0xa8>
		__ticks = 1;
    2384:	81 e0       	ldi	r24, 0x01	; 1
    2386:	90 e0       	ldi	r25, 0x00	; 0
    2388:	9e 83       	std	Y+6, r25	; 0x06
    238a:	8d 83       	std	Y+5, r24	; 0x05
    238c:	3f c0       	rjmp	.+126    	; 0x240c <LCD_voidMoveCrusor+0x126>
	else if (__tmp > 65535)
    238e:	6f 81       	ldd	r22, Y+7	; 0x07
    2390:	78 85       	ldd	r23, Y+8	; 0x08
    2392:	89 85       	ldd	r24, Y+9	; 0x09
    2394:	9a 85       	ldd	r25, Y+10	; 0x0a
    2396:	20 e0       	ldi	r18, 0x00	; 0
    2398:	3f ef       	ldi	r19, 0xFF	; 255
    239a:	4f e7       	ldi	r20, 0x7F	; 127
    239c:	57 e4       	ldi	r21, 0x47	; 71
    239e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23a2:	18 16       	cp	r1, r24
    23a4:	4c f5       	brge	.+82     	; 0x23f8 <LCD_voidMoveCrusor+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    23a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    23aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    23ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    23ae:	20 e0       	ldi	r18, 0x00	; 0
    23b0:	30 e0       	ldi	r19, 0x00	; 0
    23b2:	40 e2       	ldi	r20, 0x20	; 32
    23b4:	51 e4       	ldi	r21, 0x41	; 65
    23b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ba:	dc 01       	movw	r26, r24
    23bc:	cb 01       	movw	r24, r22
    23be:	bc 01       	movw	r22, r24
    23c0:	cd 01       	movw	r24, r26
    23c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23c6:	dc 01       	movw	r26, r24
    23c8:	cb 01       	movw	r24, r22
    23ca:	9e 83       	std	Y+6, r25	; 0x06
    23cc:	8d 83       	std	Y+5, r24	; 0x05
    23ce:	0f c0       	rjmp	.+30     	; 0x23ee <LCD_voidMoveCrusor+0x108>
    23d0:	88 ec       	ldi	r24, 0xC8	; 200
    23d2:	90 e0       	ldi	r25, 0x00	; 0
    23d4:	9c 83       	std	Y+4, r25	; 0x04
    23d6:	8b 83       	std	Y+3, r24	; 0x03
    23d8:	8b 81       	ldd	r24, Y+3	; 0x03
    23da:	9c 81       	ldd	r25, Y+4	; 0x04
    23dc:	01 97       	sbiw	r24, 0x01	; 1
    23de:	f1 f7       	brne	.-4      	; 0x23dc <LCD_voidMoveCrusor+0xf6>
    23e0:	9c 83       	std	Y+4, r25	; 0x04
    23e2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23e4:	8d 81       	ldd	r24, Y+5	; 0x05
    23e6:	9e 81       	ldd	r25, Y+6	; 0x06
    23e8:	01 97       	sbiw	r24, 0x01	; 1
    23ea:	9e 83       	std	Y+6, r25	; 0x06
    23ec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ee:	8d 81       	ldd	r24, Y+5	; 0x05
    23f0:	9e 81       	ldd	r25, Y+6	; 0x06
    23f2:	00 97       	sbiw	r24, 0x00	; 0
    23f4:	69 f7       	brne	.-38     	; 0x23d0 <LCD_voidMoveCrusor+0xea>
    23f6:	14 c0       	rjmp	.+40     	; 0x2420 <LCD_voidMoveCrusor+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23f8:	6f 81       	ldd	r22, Y+7	; 0x07
    23fa:	78 85       	ldd	r23, Y+8	; 0x08
    23fc:	89 85       	ldd	r24, Y+9	; 0x09
    23fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2400:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2404:	dc 01       	movw	r26, r24
    2406:	cb 01       	movw	r24, r22
    2408:	9e 83       	std	Y+6, r25	; 0x06
    240a:	8d 83       	std	Y+5, r24	; 0x05
    240c:	8d 81       	ldd	r24, Y+5	; 0x05
    240e:	9e 81       	ldd	r25, Y+6	; 0x06
    2410:	9a 83       	std	Y+2, r25	; 0x02
    2412:	89 83       	std	Y+1, r24	; 0x01
    2414:	89 81       	ldd	r24, Y+1	; 0x01
    2416:	9a 81       	ldd	r25, Y+2	; 0x02
    2418:	01 97       	sbiw	r24, 0x01	; 1
    241a:	f1 f7       	brne	.-4      	; 0x2418 <LCD_voidMoveCrusor+0x132>
    241c:	9a 83       	std	Y+2, r25	; 0x02
    241e:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(1);
}
    2420:	61 96       	adiw	r28, 0x11	; 17
    2422:	0f b6       	in	r0, 0x3f	; 63
    2424:	f8 94       	cli
    2426:	de bf       	out	0x3e, r29	; 62
    2428:	0f be       	out	0x3f, r0	; 63
    242a:	cd bf       	out	0x3d, r28	; 61
    242c:	cf 91       	pop	r28
    242e:	df 91       	pop	r29
    2430:	08 95       	ret

00002432 <LCD_voidClearScreen>:
void LCD_voidClearScreen()
{
    2432:	df 93       	push	r29
    2434:	cf 93       	push	r28
    2436:	cd b7       	in	r28, 0x3d	; 61
    2438:	de b7       	in	r29, 0x3e	; 62
    243a:	2e 97       	sbiw	r28, 0x0e	; 14
    243c:	0f b6       	in	r0, 0x3f	; 63
    243e:	f8 94       	cli
    2440:	de bf       	out	0x3e, r29	; 62
    2442:	0f be       	out	0x3f, r0	; 63
    2444:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCmd(LCD_CLEAR_SCREEN);
    2446:	81 e0       	ldi	r24, 0x01	; 1
    2448:	0e 94 3a 10 	call	0x2074	; 0x2074 <LCD_voidSendCmd>
    244c:	80 e0       	ldi	r24, 0x00	; 0
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	a0 e2       	ldi	r26, 0x20	; 32
    2452:	b1 e4       	ldi	r27, 0x41	; 65
    2454:	8b 87       	std	Y+11, r24	; 0x0b
    2456:	9c 87       	std	Y+12, r25	; 0x0c
    2458:	ad 87       	std	Y+13, r26	; 0x0d
    245a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    245c:	6b 85       	ldd	r22, Y+11	; 0x0b
    245e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2460:	8d 85       	ldd	r24, Y+13	; 0x0d
    2462:	9e 85       	ldd	r25, Y+14	; 0x0e
    2464:	20 e0       	ldi	r18, 0x00	; 0
    2466:	30 e0       	ldi	r19, 0x00	; 0
    2468:	4a ef       	ldi	r20, 0xFA	; 250
    246a:	54 e4       	ldi	r21, 0x44	; 68
    246c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2470:	dc 01       	movw	r26, r24
    2472:	cb 01       	movw	r24, r22
    2474:	8f 83       	std	Y+7, r24	; 0x07
    2476:	98 87       	std	Y+8, r25	; 0x08
    2478:	a9 87       	std	Y+9, r26	; 0x09
    247a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    247c:	6f 81       	ldd	r22, Y+7	; 0x07
    247e:	78 85       	ldd	r23, Y+8	; 0x08
    2480:	89 85       	ldd	r24, Y+9	; 0x09
    2482:	9a 85       	ldd	r25, Y+10	; 0x0a
    2484:	20 e0       	ldi	r18, 0x00	; 0
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	40 e8       	ldi	r20, 0x80	; 128
    248a:	5f e3       	ldi	r21, 0x3F	; 63
    248c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2490:	88 23       	and	r24, r24
    2492:	2c f4       	brge	.+10     	; 0x249e <LCD_voidClearScreen+0x6c>
		__ticks = 1;
    2494:	81 e0       	ldi	r24, 0x01	; 1
    2496:	90 e0       	ldi	r25, 0x00	; 0
    2498:	9e 83       	std	Y+6, r25	; 0x06
    249a:	8d 83       	std	Y+5, r24	; 0x05
    249c:	3f c0       	rjmp	.+126    	; 0x251c <LCD_voidClearScreen+0xea>
	else if (__tmp > 65535)
    249e:	6f 81       	ldd	r22, Y+7	; 0x07
    24a0:	78 85       	ldd	r23, Y+8	; 0x08
    24a2:	89 85       	ldd	r24, Y+9	; 0x09
    24a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    24a6:	20 e0       	ldi	r18, 0x00	; 0
    24a8:	3f ef       	ldi	r19, 0xFF	; 255
    24aa:	4f e7       	ldi	r20, 0x7F	; 127
    24ac:	57 e4       	ldi	r21, 0x47	; 71
    24ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24b2:	18 16       	cp	r1, r24
    24b4:	4c f5       	brge	.+82     	; 0x2508 <LCD_voidClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    24b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    24ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    24bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    24be:	20 e0       	ldi	r18, 0x00	; 0
    24c0:	30 e0       	ldi	r19, 0x00	; 0
    24c2:	40 e2       	ldi	r20, 0x20	; 32
    24c4:	51 e4       	ldi	r21, 0x41	; 65
    24c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ca:	dc 01       	movw	r26, r24
    24cc:	cb 01       	movw	r24, r22
    24ce:	bc 01       	movw	r22, r24
    24d0:	cd 01       	movw	r24, r26
    24d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24d6:	dc 01       	movw	r26, r24
    24d8:	cb 01       	movw	r24, r22
    24da:	9e 83       	std	Y+6, r25	; 0x06
    24dc:	8d 83       	std	Y+5, r24	; 0x05
    24de:	0f c0       	rjmp	.+30     	; 0x24fe <LCD_voidClearScreen+0xcc>
    24e0:	88 ec       	ldi	r24, 0xC8	; 200
    24e2:	90 e0       	ldi	r25, 0x00	; 0
    24e4:	9c 83       	std	Y+4, r25	; 0x04
    24e6:	8b 83       	std	Y+3, r24	; 0x03
    24e8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ea:	9c 81       	ldd	r25, Y+4	; 0x04
    24ec:	01 97       	sbiw	r24, 0x01	; 1
    24ee:	f1 f7       	brne	.-4      	; 0x24ec <LCD_voidClearScreen+0xba>
    24f0:	9c 83       	std	Y+4, r25	; 0x04
    24f2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24f4:	8d 81       	ldd	r24, Y+5	; 0x05
    24f6:	9e 81       	ldd	r25, Y+6	; 0x06
    24f8:	01 97       	sbiw	r24, 0x01	; 1
    24fa:	9e 83       	std	Y+6, r25	; 0x06
    24fc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2500:	9e 81       	ldd	r25, Y+6	; 0x06
    2502:	00 97       	sbiw	r24, 0x00	; 0
    2504:	69 f7       	brne	.-38     	; 0x24e0 <LCD_voidClearScreen+0xae>
    2506:	14 c0       	rjmp	.+40     	; 0x2530 <LCD_voidClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2508:	6f 81       	ldd	r22, Y+7	; 0x07
    250a:	78 85       	ldd	r23, Y+8	; 0x08
    250c:	89 85       	ldd	r24, Y+9	; 0x09
    250e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2510:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2514:	dc 01       	movw	r26, r24
    2516:	cb 01       	movw	r24, r22
    2518:	9e 83       	std	Y+6, r25	; 0x06
    251a:	8d 83       	std	Y+5, r24	; 0x05
    251c:	8d 81       	ldd	r24, Y+5	; 0x05
    251e:	9e 81       	ldd	r25, Y+6	; 0x06
    2520:	9a 83       	std	Y+2, r25	; 0x02
    2522:	89 83       	std	Y+1, r24	; 0x01
    2524:	89 81       	ldd	r24, Y+1	; 0x01
    2526:	9a 81       	ldd	r25, Y+2	; 0x02
    2528:	01 97       	sbiw	r24, 0x01	; 1
    252a:	f1 f7       	brne	.-4      	; 0x2528 <LCD_voidClearScreen+0xf6>
    252c:	9a 83       	std	Y+2, r25	; 0x02
    252e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    2530:	2e 96       	adiw	r28, 0x0e	; 14
    2532:	0f b6       	in	r0, 0x3f	; 63
    2534:	f8 94       	cli
    2536:	de bf       	out	0x3e, r29	; 62
    2538:	0f be       	out	0x3f, r0	; 63
    253a:	cd bf       	out	0x3d, r28	; 61
    253c:	cf 91       	pop	r28
    253e:	df 91       	pop	r29
    2540:	08 95       	ret

00002542 <LCD_voidDispChar>:
void LCD_voidDispChar(u8 copy_u8char)
{
    2542:	df 93       	push	r29
    2544:	cf 93       	push	r28
    2546:	cd b7       	in	r28, 0x3d	; 61
    2548:	de b7       	in	r29, 0x3e	; 62
    254a:	2f 97       	sbiw	r28, 0x0f	; 15
    254c:	0f b6       	in	r0, 0x3f	; 63
    254e:	f8 94       	cli
    2550:	de bf       	out	0x3e, r29	; 62
    2552:	0f be       	out	0x3f, r0	; 63
    2554:	cd bf       	out	0x3d, r28	; 61
    2556:	8f 87       	std	Y+15, r24	; 0x0f
		GPIO_voidWritePin  (LCD_RWPORT , LCD_RWPIN , 0);
		LCD_voidSendEnPulse();
		
	#elif LCD_MODE == 1 
		#if LCD_NIBBLE == 0 
			GPIO_voidWriteLowNipple(LCD_PORT , copy_u8char>>4);
    2558:	8f 85       	ldd	r24, Y+15	; 0x0f
    255a:	98 2f       	mov	r25, r24
    255c:	92 95       	swap	r25
    255e:	9f 70       	andi	r25, 0x0F	; 15
    2560:	81 e0       	ldi	r24, 0x01	; 1
    2562:	69 2f       	mov	r22, r25
    2564:	0e 94 1f 0c 	call	0x183e	; 0x183e <GPIO_voidWriteLowNipple>
			GPIO_voidWritePin  (LCD_RSPORT , LCD_RSPIN , 1);
    2568:	81 e0       	ldi	r24, 0x01	; 1
    256a:	64 e0       	ldi	r22, 0x04	; 4
    256c:	41 e0       	ldi	r20, 0x01	; 1
    256e:	0e 94 3f 09 	call	0x127e	; 0x127e <GPIO_voidWritePin>
			GPIO_voidWritePin  (LCD_RWPORT , LCD_RWPIN , 0);
    2572:	81 e0       	ldi	r24, 0x01	; 1
    2574:	67 e0       	ldi	r22, 0x07	; 7
    2576:	40 e0       	ldi	r20, 0x00	; 0
    2578:	0e 94 3f 09 	call	0x127e	; 0x127e <GPIO_voidWritePin>
			LCD_voidSendEnPulse();
    257c:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <LCD_voidSendEnPulse>
		
			GPIO_voidWriteLowNipple(LCD_PORT , copy_u8char);
    2580:	81 e0       	ldi	r24, 0x01	; 1
    2582:	6f 85       	ldd	r22, Y+15	; 0x0f
    2584:	0e 94 1f 0c 	call	0x183e	; 0x183e <GPIO_voidWriteLowNipple>
			GPIO_voidWritePin  (LCD_RSPORT , LCD_RSPIN , 1);
    2588:	81 e0       	ldi	r24, 0x01	; 1
    258a:	64 e0       	ldi	r22, 0x04	; 4
    258c:	41 e0       	ldi	r20, 0x01	; 1
    258e:	0e 94 3f 09 	call	0x127e	; 0x127e <GPIO_voidWritePin>
			GPIO_voidWritePin  (LCD_RWPORT , LCD_RWPIN , 0);
    2592:	81 e0       	ldi	r24, 0x01	; 1
    2594:	67 e0       	ldi	r22, 0x07	; 7
    2596:	40 e0       	ldi	r20, 0x00	; 0
    2598:	0e 94 3f 09 	call	0x127e	; 0x127e <GPIO_voidWritePin>
			LCD_voidSendEnPulse();
    259c:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <LCD_voidSendEnPulse>
    25a0:	80 e0       	ldi	r24, 0x00	; 0
    25a2:	90 e0       	ldi	r25, 0x00	; 0
    25a4:	a0 e0       	ldi	r26, 0x00	; 0
    25a6:	b0 e4       	ldi	r27, 0x40	; 64
    25a8:	8b 87       	std	Y+11, r24	; 0x0b
    25aa:	9c 87       	std	Y+12, r25	; 0x0c
    25ac:	ad 87       	std	Y+13, r26	; 0x0d
    25ae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    25b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    25b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    25b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    25b8:	20 e0       	ldi	r18, 0x00	; 0
    25ba:	30 e0       	ldi	r19, 0x00	; 0
    25bc:	4a ef       	ldi	r20, 0xFA	; 250
    25be:	54 e4       	ldi	r21, 0x44	; 68
    25c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25c4:	dc 01       	movw	r26, r24
    25c6:	cb 01       	movw	r24, r22
    25c8:	8f 83       	std	Y+7, r24	; 0x07
    25ca:	98 87       	std	Y+8, r25	; 0x08
    25cc:	a9 87       	std	Y+9, r26	; 0x09
    25ce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25d0:	6f 81       	ldd	r22, Y+7	; 0x07
    25d2:	78 85       	ldd	r23, Y+8	; 0x08
    25d4:	89 85       	ldd	r24, Y+9	; 0x09
    25d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    25d8:	20 e0       	ldi	r18, 0x00	; 0
    25da:	30 e0       	ldi	r19, 0x00	; 0
    25dc:	40 e8       	ldi	r20, 0x80	; 128
    25de:	5f e3       	ldi	r21, 0x3F	; 63
    25e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25e4:	88 23       	and	r24, r24
    25e6:	2c f4       	brge	.+10     	; 0x25f2 <LCD_voidDispChar+0xb0>
		__ticks = 1;
    25e8:	81 e0       	ldi	r24, 0x01	; 1
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	9e 83       	std	Y+6, r25	; 0x06
    25ee:	8d 83       	std	Y+5, r24	; 0x05
    25f0:	3f c0       	rjmp	.+126    	; 0x2670 <LCD_voidDispChar+0x12e>
	else if (__tmp > 65535)
    25f2:	6f 81       	ldd	r22, Y+7	; 0x07
    25f4:	78 85       	ldd	r23, Y+8	; 0x08
    25f6:	89 85       	ldd	r24, Y+9	; 0x09
    25f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    25fa:	20 e0       	ldi	r18, 0x00	; 0
    25fc:	3f ef       	ldi	r19, 0xFF	; 255
    25fe:	4f e7       	ldi	r20, 0x7F	; 127
    2600:	57 e4       	ldi	r21, 0x47	; 71
    2602:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2606:	18 16       	cp	r1, r24
    2608:	4c f5       	brge	.+82     	; 0x265c <LCD_voidDispChar+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    260a:	6b 85       	ldd	r22, Y+11	; 0x0b
    260c:	7c 85       	ldd	r23, Y+12	; 0x0c
    260e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2610:	9e 85       	ldd	r25, Y+14	; 0x0e
    2612:	20 e0       	ldi	r18, 0x00	; 0
    2614:	30 e0       	ldi	r19, 0x00	; 0
    2616:	40 e2       	ldi	r20, 0x20	; 32
    2618:	51 e4       	ldi	r21, 0x41	; 65
    261a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    261e:	dc 01       	movw	r26, r24
    2620:	cb 01       	movw	r24, r22
    2622:	bc 01       	movw	r22, r24
    2624:	cd 01       	movw	r24, r26
    2626:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    262a:	dc 01       	movw	r26, r24
    262c:	cb 01       	movw	r24, r22
    262e:	9e 83       	std	Y+6, r25	; 0x06
    2630:	8d 83       	std	Y+5, r24	; 0x05
    2632:	0f c0       	rjmp	.+30     	; 0x2652 <LCD_voidDispChar+0x110>
    2634:	88 ec       	ldi	r24, 0xC8	; 200
    2636:	90 e0       	ldi	r25, 0x00	; 0
    2638:	9c 83       	std	Y+4, r25	; 0x04
    263a:	8b 83       	std	Y+3, r24	; 0x03
    263c:	8b 81       	ldd	r24, Y+3	; 0x03
    263e:	9c 81       	ldd	r25, Y+4	; 0x04
    2640:	01 97       	sbiw	r24, 0x01	; 1
    2642:	f1 f7       	brne	.-4      	; 0x2640 <LCD_voidDispChar+0xfe>
    2644:	9c 83       	std	Y+4, r25	; 0x04
    2646:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2648:	8d 81       	ldd	r24, Y+5	; 0x05
    264a:	9e 81       	ldd	r25, Y+6	; 0x06
    264c:	01 97       	sbiw	r24, 0x01	; 1
    264e:	9e 83       	std	Y+6, r25	; 0x06
    2650:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2652:	8d 81       	ldd	r24, Y+5	; 0x05
    2654:	9e 81       	ldd	r25, Y+6	; 0x06
    2656:	00 97       	sbiw	r24, 0x00	; 0
    2658:	69 f7       	brne	.-38     	; 0x2634 <LCD_voidDispChar+0xf2>
    265a:	14 c0       	rjmp	.+40     	; 0x2684 <LCD_voidDispChar+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    265c:	6f 81       	ldd	r22, Y+7	; 0x07
    265e:	78 85       	ldd	r23, Y+8	; 0x08
    2660:	89 85       	ldd	r24, Y+9	; 0x09
    2662:	9a 85       	ldd	r25, Y+10	; 0x0a
    2664:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2668:	dc 01       	movw	r26, r24
    266a:	cb 01       	movw	r24, r22
    266c:	9e 83       	std	Y+6, r25	; 0x06
    266e:	8d 83       	std	Y+5, r24	; 0x05
    2670:	8d 81       	ldd	r24, Y+5	; 0x05
    2672:	9e 81       	ldd	r25, Y+6	; 0x06
    2674:	9a 83       	std	Y+2, r25	; 0x02
    2676:	89 83       	std	Y+1, r24	; 0x01
    2678:	89 81       	ldd	r24, Y+1	; 0x01
    267a:	9a 81       	ldd	r25, Y+2	; 0x02
    267c:	01 97       	sbiw	r24, 0x01	; 1
    267e:	f1 f7       	brne	.-4      	; 0x267c <LCD_voidDispChar+0x13a>
    2680:	9a 83       	std	Y+2, r25	; 0x02
    2682:	89 83       	std	Y+1, r24	; 0x01
			LCD_voidSendEnPulse();
			_delay_ms(2);
		#endif
	#endif
		
}
    2684:	2f 96       	adiw	r28, 0x0f	; 15
    2686:	0f b6       	in	r0, 0x3f	; 63
    2688:	f8 94       	cli
    268a:	de bf       	out	0x3e, r29	; 62
    268c:	0f be       	out	0x3f, r0	; 63
    268e:	cd bf       	out	0x3d, r28	; 61
    2690:	cf 91       	pop	r28
    2692:	df 91       	pop	r29
    2694:	08 95       	ret

00002696 <LCD_voidDispString>:
void LCD_voidDispString(u8 *copy_u8String)
{
    2696:	df 93       	push	r29
    2698:	cf 93       	push	r28
    269a:	00 d0       	rcall	.+0      	; 0x269c <LCD_voidDispString+0x6>
    269c:	cd b7       	in	r28, 0x3d	; 61
    269e:	de b7       	in	r29, 0x3e	; 62
    26a0:	9a 83       	std	Y+2, r25	; 0x02
    26a2:	89 83       	std	Y+1, r24	; 0x01
    26a4:	0a c0       	rjmp	.+20     	; 0x26ba <LCD_voidDispString+0x24>
	while ((*copy_u8String) != '\0')
	{
		LCD_voidDispChar (*copy_u8String);
    26a6:	e9 81       	ldd	r30, Y+1	; 0x01
    26a8:	fa 81       	ldd	r31, Y+2	; 0x02
    26aa:	80 81       	ld	r24, Z
    26ac:	0e 94 a1 12 	call	0x2542	; 0x2542 <LCD_voidDispChar>
		copy_u8String ++ ;
    26b0:	89 81       	ldd	r24, Y+1	; 0x01
    26b2:	9a 81       	ldd	r25, Y+2	; 0x02
    26b4:	01 96       	adiw	r24, 0x01	; 1
    26b6:	9a 83       	std	Y+2, r25	; 0x02
    26b8:	89 83       	std	Y+1, r24	; 0x01
	#endif
		
}
void LCD_voidDispString(u8 *copy_u8String)
{
	while ((*copy_u8String) != '\0')
    26ba:	e9 81       	ldd	r30, Y+1	; 0x01
    26bc:	fa 81       	ldd	r31, Y+2	; 0x02
    26be:	80 81       	ld	r24, Z
    26c0:	88 23       	and	r24, r24
    26c2:	89 f7       	brne	.-30     	; 0x26a6 <LCD_voidDispString+0x10>
	{
		LCD_voidDispChar (*copy_u8String);
		copy_u8String ++ ;
	}
}
    26c4:	0f 90       	pop	r0
    26c6:	0f 90       	pop	r0
    26c8:	cf 91       	pop	r28
    26ca:	df 91       	pop	r29
    26cc:	08 95       	ret

000026ce <LCD_voidDispNumber>:

void LCD_voidDispNumber (f32 copy_f32Num)
{
    26ce:	df 93       	push	r29
    26d0:	cf 93       	push	r28
    26d2:	00 d0       	rcall	.+0      	; 0x26d4 <LCD_voidDispNumber+0x6>
    26d4:	00 d0       	rcall	.+0      	; 0x26d6 <LCD_voidDispNumber+0x8>
    26d6:	0f 92       	push	r0
    26d8:	cd b7       	in	r28, 0x3d	; 61
    26da:	de b7       	in	r29, 0x3e	; 62
    26dc:	6a 83       	std	Y+2, r22	; 0x02
    26de:	7b 83       	std	Y+3, r23	; 0x03
    26e0:	8c 83       	std	Y+4, r24	; 0x04
    26e2:	9d 83       	std	Y+5, r25	; 0x05
	u8 str[1];
	sprintf(str,"%d",(u8)copy_f32Num);
    26e4:	6a 81       	ldd	r22, Y+2	; 0x02
    26e6:	7b 81       	ldd	r23, Y+3	; 0x03
    26e8:	8c 81       	ldd	r24, Y+4	; 0x04
    26ea:	9d 81       	ldd	r25, Y+5	; 0x05
    26ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f0:	dc 01       	movw	r26, r24
    26f2:	cb 01       	movw	r24, r22
    26f4:	28 2f       	mov	r18, r24
    26f6:	30 e0       	ldi	r19, 0x00	; 0
    26f8:	00 d0       	rcall	.+0      	; 0x26fa <LCD_voidDispNumber+0x2c>
    26fa:	00 d0       	rcall	.+0      	; 0x26fc <LCD_voidDispNumber+0x2e>
    26fc:	00 d0       	rcall	.+0      	; 0x26fe <LCD_voidDispNumber+0x30>
    26fe:	ed b7       	in	r30, 0x3d	; 61
    2700:	fe b7       	in	r31, 0x3e	; 62
    2702:	31 96       	adiw	r30, 0x01	; 1
    2704:	ce 01       	movw	r24, r28
    2706:	01 96       	adiw	r24, 0x01	; 1
    2708:	91 83       	std	Z+1, r25	; 0x01
    270a:	80 83       	st	Z, r24
    270c:	80 e6       	ldi	r24, 0x60	; 96
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	93 83       	std	Z+3, r25	; 0x03
    2712:	82 83       	std	Z+2, r24	; 0x02
    2714:	35 83       	std	Z+5, r19	; 0x05
    2716:	24 83       	std	Z+4, r18	; 0x04
    2718:	0e 94 84 16 	call	0x2d08	; 0x2d08 <sprintf>
    271c:	8d b7       	in	r24, 0x3d	; 61
    271e:	9e b7       	in	r25, 0x3e	; 62
    2720:	06 96       	adiw	r24, 0x06	; 6
    2722:	0f b6       	in	r0, 0x3f	; 63
    2724:	f8 94       	cli
    2726:	9e bf       	out	0x3e, r25	; 62
    2728:	0f be       	out	0x3f, r0	; 63
    272a:	8d bf       	out	0x3d, r24	; 61
	LCD_voidDispString(str);
    272c:	ce 01       	movw	r24, r28
    272e:	01 96       	adiw	r24, 0x01	; 1
    2730:	0e 94 4b 13 	call	0x2696	; 0x2696 <LCD_voidDispString>
	LCD_voidDispChar('.');
    2734:	8e e2       	ldi	r24, 0x2E	; 46
    2736:	0e 94 a1 12 	call	0x2542	; 0x2542 <LCD_voidDispChar>
	copy_f32Num = ((copy_f32Num-(u8)copy_f32Num)*100);
    273a:	6a 81       	ldd	r22, Y+2	; 0x02
    273c:	7b 81       	ldd	r23, Y+3	; 0x03
    273e:	8c 81       	ldd	r24, Y+4	; 0x04
    2740:	9d 81       	ldd	r25, Y+5	; 0x05
    2742:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2746:	dc 01       	movw	r26, r24
    2748:	cb 01       	movw	r24, r22
    274a:	88 2f       	mov	r24, r24
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	aa 27       	eor	r26, r26
    2750:	97 fd       	sbrc	r25, 7
    2752:	a0 95       	com	r26
    2754:	ba 2f       	mov	r27, r26
    2756:	bc 01       	movw	r22, r24
    2758:	cd 01       	movw	r24, r26
    275a:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    275e:	9b 01       	movw	r18, r22
    2760:	ac 01       	movw	r20, r24
    2762:	6a 81       	ldd	r22, Y+2	; 0x02
    2764:	7b 81       	ldd	r23, Y+3	; 0x03
    2766:	8c 81       	ldd	r24, Y+4	; 0x04
    2768:	9d 81       	ldd	r25, Y+5	; 0x05
    276a:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    276e:	dc 01       	movw	r26, r24
    2770:	cb 01       	movw	r24, r22
    2772:	bc 01       	movw	r22, r24
    2774:	cd 01       	movw	r24, r26
    2776:	20 e0       	ldi	r18, 0x00	; 0
    2778:	30 e0       	ldi	r19, 0x00	; 0
    277a:	48 ec       	ldi	r20, 0xC8	; 200
    277c:	52 e4       	ldi	r21, 0x42	; 66
    277e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2782:	dc 01       	movw	r26, r24
    2784:	cb 01       	movw	r24, r22
    2786:	8a 83       	std	Y+2, r24	; 0x02
    2788:	9b 83       	std	Y+3, r25	; 0x03
    278a:	ac 83       	std	Y+4, r26	; 0x04
    278c:	bd 83       	std	Y+5, r27	; 0x05
	sprintf(str,"%d",(u8)copy_f32Num);
    278e:	6a 81       	ldd	r22, Y+2	; 0x02
    2790:	7b 81       	ldd	r23, Y+3	; 0x03
    2792:	8c 81       	ldd	r24, Y+4	; 0x04
    2794:	9d 81       	ldd	r25, Y+5	; 0x05
    2796:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    279a:	dc 01       	movw	r26, r24
    279c:	cb 01       	movw	r24, r22
    279e:	28 2f       	mov	r18, r24
    27a0:	30 e0       	ldi	r19, 0x00	; 0
    27a2:	00 d0       	rcall	.+0      	; 0x27a4 <LCD_voidDispNumber+0xd6>
    27a4:	00 d0       	rcall	.+0      	; 0x27a6 <LCD_voidDispNumber+0xd8>
    27a6:	00 d0       	rcall	.+0      	; 0x27a8 <LCD_voidDispNumber+0xda>
    27a8:	ed b7       	in	r30, 0x3d	; 61
    27aa:	fe b7       	in	r31, 0x3e	; 62
    27ac:	31 96       	adiw	r30, 0x01	; 1
    27ae:	ce 01       	movw	r24, r28
    27b0:	01 96       	adiw	r24, 0x01	; 1
    27b2:	91 83       	std	Z+1, r25	; 0x01
    27b4:	80 83       	st	Z, r24
    27b6:	80 e6       	ldi	r24, 0x60	; 96
    27b8:	90 e0       	ldi	r25, 0x00	; 0
    27ba:	93 83       	std	Z+3, r25	; 0x03
    27bc:	82 83       	std	Z+2, r24	; 0x02
    27be:	35 83       	std	Z+5, r19	; 0x05
    27c0:	24 83       	std	Z+4, r18	; 0x04
    27c2:	0e 94 84 16 	call	0x2d08	; 0x2d08 <sprintf>
    27c6:	8d b7       	in	r24, 0x3d	; 61
    27c8:	9e b7       	in	r25, 0x3e	; 62
    27ca:	06 96       	adiw	r24, 0x06	; 6
    27cc:	0f b6       	in	r0, 0x3f	; 63
    27ce:	f8 94       	cli
    27d0:	9e bf       	out	0x3e, r25	; 62
    27d2:	0f be       	out	0x3f, r0	; 63
    27d4:	8d bf       	out	0x3d, r24	; 61
	LCD_voidDispString(str);
    27d6:	ce 01       	movw	r24, r28
    27d8:	01 96       	adiw	r24, 0x01	; 1
    27da:	0e 94 4b 13 	call	0x2696	; 0x2696 <LCD_voidDispString>
}
    27de:	0f 90       	pop	r0
    27e0:	0f 90       	pop	r0
    27e2:	0f 90       	pop	r0
    27e4:	0f 90       	pop	r0
    27e6:	0f 90       	pop	r0
    27e8:	cf 91       	pop	r28
    27ea:	df 91       	pop	r29
    27ec:	08 95       	ret

000027ee <LED_voidTurnOn>:




void LED_voidTurnOn(u8 copy_u8port , u8 copy_u8pin)
{
    27ee:	df 93       	push	r29
    27f0:	cf 93       	push	r28
    27f2:	00 d0       	rcall	.+0      	; 0x27f4 <LED_voidTurnOn+0x6>
    27f4:	cd b7       	in	r28, 0x3d	; 61
    27f6:	de b7       	in	r29, 0x3e	; 62
    27f8:	89 83       	std	Y+1, r24	; 0x01
    27fa:	6a 83       	std	Y+2, r22	; 0x02
	GPIO_voidSetPinDDR(copy_u8port , copy_u8pin , OUTPUT );
    27fc:	89 81       	ldd	r24, Y+1	; 0x01
    27fe:	6a 81       	ldd	r22, Y+2	; 0x02
    2800:	41 e0       	ldi	r20, 0x01	; 1
    2802:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <GPIO_voidSetPinDDR>
	GPIO_voidWritePin (copy_u8port , copy_u8pin , HIGH);
    2806:	89 81       	ldd	r24, Y+1	; 0x01
    2808:	6a 81       	ldd	r22, Y+2	; 0x02
    280a:	41 e0       	ldi	r20, 0x01	; 1
    280c:	0e 94 3f 09 	call	0x127e	; 0x127e <GPIO_voidWritePin>
}
    2810:	0f 90       	pop	r0
    2812:	0f 90       	pop	r0
    2814:	cf 91       	pop	r28
    2816:	df 91       	pop	r29
    2818:	08 95       	ret

0000281a <LED_voidTurnOff>:
void LED_voidTurnOff(u8 copy_u8port , u8 copy_u8pin)
{
    281a:	df 93       	push	r29
    281c:	cf 93       	push	r28
    281e:	00 d0       	rcall	.+0      	; 0x2820 <LED_voidTurnOff+0x6>
    2820:	cd b7       	in	r28, 0x3d	; 61
    2822:	de b7       	in	r29, 0x3e	; 62
    2824:	89 83       	std	Y+1, r24	; 0x01
    2826:	6a 83       	std	Y+2, r22	; 0x02
	GPIO_voidSetPinDDR(copy_u8port , copy_u8pin , OUTPUT );
    2828:	89 81       	ldd	r24, Y+1	; 0x01
    282a:	6a 81       	ldd	r22, Y+2	; 0x02
    282c:	41 e0       	ldi	r20, 0x01	; 1
    282e:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <GPIO_voidSetPinDDR>
	GPIO_voidWritePin (copy_u8port , copy_u8pin , LOW);
    2832:	89 81       	ldd	r24, Y+1	; 0x01
    2834:	6a 81       	ldd	r22, Y+2	; 0x02
    2836:	40 e0       	ldi	r20, 0x00	; 0
    2838:	0e 94 3f 09 	call	0x127e	; 0x127e <GPIO_voidWritePin>
}
    283c:	0f 90       	pop	r0
    283e:	0f 90       	pop	r0
    2840:	cf 91       	pop	r28
    2842:	df 91       	pop	r29
    2844:	08 95       	ret

00002846 <LED_voidTogLed>:
void LED_voidTogLed (u8 copy_u8port , u8 copy_u8pin )
{
    2846:	df 93       	push	r29
    2848:	cf 93       	push	r28
    284a:	00 d0       	rcall	.+0      	; 0x284c <LED_voidTogLed+0x6>
    284c:	cd b7       	in	r28, 0x3d	; 61
    284e:	de b7       	in	r29, 0x3e	; 62
    2850:	89 83       	std	Y+1, r24	; 0x01
    2852:	6a 83       	std	Y+2, r22	; 0x02
	GPIO_voidSetPinDDR(copy_u8port , copy_u8pin , OUTPUT );
    2854:	89 81       	ldd	r24, Y+1	; 0x01
    2856:	6a 81       	ldd	r22, Y+2	; 0x02
    2858:	41 e0       	ldi	r20, 0x01	; 1
    285a:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <GPIO_voidSetPinDDR>
	GPIO_voidTogPin(copy_u8port , copy_u8pin);
    285e:	89 81       	ldd	r24, Y+1	; 0x01
    2860:	6a 81       	ldd	r22, Y+2	; 0x02
    2862:	0e 94 cd 0a 	call	0x159a	; 0x159a <GPIO_voidTogPin>
}
    2866:	0f 90       	pop	r0
    2868:	0f 90       	pop	r0
    286a:	cf 91       	pop	r28
    286c:	df 91       	pop	r29
    286e:	08 95       	ret

00002870 <LM35_voidInit>:

#include "ADC_interface.h"


void LM35_voidInit (u8 copy_u8Channel)
{
    2870:	df 93       	push	r29
    2872:	cf 93       	push	r28
    2874:	0f 92       	push	r0
    2876:	cd b7       	in	r28, 0x3d	; 61
    2878:	de b7       	in	r29, 0x3e	; 62
    287a:	89 83       	std	Y+1, r24	; 0x01
	ADC_voidinit(copy_u8Channel);
    287c:	89 81       	ldd	r24, Y+1	; 0x01
    287e:	0e 94 c9 06 	call	0xd92	; 0xd92 <ADC_voidinit>
}
    2882:	0f 90       	pop	r0
    2884:	cf 91       	pop	r28
    2886:	df 91       	pop	r29
    2888:	08 95       	ret

0000288a <LM35_voidRead>:
u8 LM35_voidRead (void)
{
    288a:	df 93       	push	r29
    288c:	cf 93       	push	r28
    288e:	00 d0       	rcall	.+0      	; 0x2890 <LM35_voidRead+0x6>
    2890:	0f 92       	push	r0
    2892:	cd b7       	in	r28, 0x3d	; 61
    2894:	de b7       	in	r29, 0x3e	; 62
	u16 LM35_read;

	u8 Temp ;

	LM35_read = ADC_u16Read() ;
    2896:	0e 94 23 07 	call	0xe46	; 0xe46 <ADC_u16Read>
    289a:	9b 83       	std	Y+3, r25	; 0x03
    289c:	8a 83       	std	Y+2, r24	; 0x02
	#if VREF == 2560
	Temp = LM35_read*.25 ;
	#elif VREF == 5000
	Temp = LM35_read * 0.48828125 ;
    289e:	8a 81       	ldd	r24, Y+2	; 0x02
    28a0:	9b 81       	ldd	r25, Y+3	; 0x03
    28a2:	cc 01       	movw	r24, r24
    28a4:	a0 e0       	ldi	r26, 0x00	; 0
    28a6:	b0 e0       	ldi	r27, 0x00	; 0
    28a8:	bc 01       	movw	r22, r24
    28aa:	cd 01       	movw	r24, r26
    28ac:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__floatunsisf>
    28b0:	dc 01       	movw	r26, r24
    28b2:	cb 01       	movw	r24, r22
    28b4:	bc 01       	movw	r22, r24
    28b6:	cd 01       	movw	r24, r26
    28b8:	20 e0       	ldi	r18, 0x00	; 0
    28ba:	30 e0       	ldi	r19, 0x00	; 0
    28bc:	4a ef       	ldi	r20, 0xFA	; 250
    28be:	5e e3       	ldi	r21, 0x3E	; 62
    28c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28c4:	dc 01       	movw	r26, r24
    28c6:	cb 01       	movw	r24, r22
    28c8:	bc 01       	movw	r22, r24
    28ca:	cd 01       	movw	r24, r26
    28cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28d0:	dc 01       	movw	r26, r24
    28d2:	cb 01       	movw	r24, r22
    28d4:	89 83       	std	Y+1, r24	; 0x01
	#endif
	return Temp;
    28d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    28d8:	0f 90       	pop	r0
    28da:	0f 90       	pop	r0
    28dc:	0f 90       	pop	r0
    28de:	cf 91       	pop	r28
    28e0:	df 91       	pop	r29
    28e2:	08 95       	ret

000028e4 <SWITCH_voidInit>:

#define F_CPU 8000000UL
#include "util/delay.h"

void SWITCH_voidInit(u8 copy_u8Port , u8 copy_u8Pin )
{
    28e4:	df 93       	push	r29
    28e6:	cf 93       	push	r28
    28e8:	00 d0       	rcall	.+0      	; 0x28ea <SWITCH_voidInit+0x6>
    28ea:	cd b7       	in	r28, 0x3d	; 61
    28ec:	de b7       	in	r29, 0x3e	; 62
    28ee:	89 83       	std	Y+1, r24	; 0x01
    28f0:	6a 83       	std	Y+2, r22	; 0x02
	GPIO_voidSetPinDDR(copy_u8Port , copy_u8Pin ,INPUT);
    28f2:	89 81       	ldd	r24, Y+1	; 0x01
    28f4:	6a 81       	ldd	r22, Y+2	; 0x02
    28f6:	40 e0       	ldi	r20, 0x00	; 0
    28f8:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <GPIO_voidSetPinDDR>
	#if PULLUP_RES == 0 
	GPIO_voidWritePin (copy_u8Port , copy_u8Pin , HIGH );
    28fc:	89 81       	ldd	r24, Y+1	; 0x01
    28fe:	6a 81       	ldd	r22, Y+2	; 0x02
    2900:	41 e0       	ldi	r20, 0x01	; 1
    2902:	0e 94 3f 09 	call	0x127e	; 0x127e <GPIO_voidWritePin>
	#endif
	
}
    2906:	0f 90       	pop	r0
    2908:	0f 90       	pop	r0
    290a:	cf 91       	pop	r28
    290c:	df 91       	pop	r29
    290e:	08 95       	ret

00002910 <SWITCH_u8Read>:

u8 	SWITCH_u8Read(u8 copy_u8Port , u8 copy_u8Pin )
{
    2910:	df 93       	push	r29
    2912:	cf 93       	push	r28
    2914:	cd b7       	in	r28, 0x3d	; 61
    2916:	de b7       	in	r29, 0x3e	; 62
    2918:	61 97       	sbiw	r28, 0x11	; 17
    291a:	0f b6       	in	r0, 0x3f	; 63
    291c:	f8 94       	cli
    291e:	de bf       	out	0x3e, r29	; 62
    2920:	0f be       	out	0x3f, r0	; 63
    2922:	cd bf       	out	0x3d, r28	; 61
    2924:	88 8b       	std	Y+16, r24	; 0x10
    2926:	69 8b       	std	Y+17, r22	; 0x11
    2928:	80 e0       	ldi	r24, 0x00	; 0
    292a:	90 e0       	ldi	r25, 0x00	; 0
    292c:	a8 e4       	ldi	r26, 0x48	; 72
    292e:	b2 e4       	ldi	r27, 0x42	; 66
    2930:	8b 87       	std	Y+11, r24	; 0x0b
    2932:	9c 87       	std	Y+12, r25	; 0x0c
    2934:	ad 87       	std	Y+13, r26	; 0x0d
    2936:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2938:	6b 85       	ldd	r22, Y+11	; 0x0b
    293a:	7c 85       	ldd	r23, Y+12	; 0x0c
    293c:	8d 85       	ldd	r24, Y+13	; 0x0d
    293e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2940:	20 e0       	ldi	r18, 0x00	; 0
    2942:	30 e0       	ldi	r19, 0x00	; 0
    2944:	4a ef       	ldi	r20, 0xFA	; 250
    2946:	54 e4       	ldi	r21, 0x44	; 68
    2948:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    294c:	dc 01       	movw	r26, r24
    294e:	cb 01       	movw	r24, r22
    2950:	8f 83       	std	Y+7, r24	; 0x07
    2952:	98 87       	std	Y+8, r25	; 0x08
    2954:	a9 87       	std	Y+9, r26	; 0x09
    2956:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2958:	6f 81       	ldd	r22, Y+7	; 0x07
    295a:	78 85       	ldd	r23, Y+8	; 0x08
    295c:	89 85       	ldd	r24, Y+9	; 0x09
    295e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2960:	20 e0       	ldi	r18, 0x00	; 0
    2962:	30 e0       	ldi	r19, 0x00	; 0
    2964:	40 e8       	ldi	r20, 0x80	; 128
    2966:	5f e3       	ldi	r21, 0x3F	; 63
    2968:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    296c:	88 23       	and	r24, r24
    296e:	2c f4       	brge	.+10     	; 0x297a <SWITCH_u8Read+0x6a>
		__ticks = 1;
    2970:	81 e0       	ldi	r24, 0x01	; 1
    2972:	90 e0       	ldi	r25, 0x00	; 0
    2974:	9e 83       	std	Y+6, r25	; 0x06
    2976:	8d 83       	std	Y+5, r24	; 0x05
    2978:	3f c0       	rjmp	.+126    	; 0x29f8 <SWITCH_u8Read+0xe8>
	else if (__tmp > 65535)
    297a:	6f 81       	ldd	r22, Y+7	; 0x07
    297c:	78 85       	ldd	r23, Y+8	; 0x08
    297e:	89 85       	ldd	r24, Y+9	; 0x09
    2980:	9a 85       	ldd	r25, Y+10	; 0x0a
    2982:	20 e0       	ldi	r18, 0x00	; 0
    2984:	3f ef       	ldi	r19, 0xFF	; 255
    2986:	4f e7       	ldi	r20, 0x7F	; 127
    2988:	57 e4       	ldi	r21, 0x47	; 71
    298a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    298e:	18 16       	cp	r1, r24
    2990:	4c f5       	brge	.+82     	; 0x29e4 <SWITCH_u8Read+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2992:	6b 85       	ldd	r22, Y+11	; 0x0b
    2994:	7c 85       	ldd	r23, Y+12	; 0x0c
    2996:	8d 85       	ldd	r24, Y+13	; 0x0d
    2998:	9e 85       	ldd	r25, Y+14	; 0x0e
    299a:	20 e0       	ldi	r18, 0x00	; 0
    299c:	30 e0       	ldi	r19, 0x00	; 0
    299e:	40 e2       	ldi	r20, 0x20	; 32
    29a0:	51 e4       	ldi	r21, 0x41	; 65
    29a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29a6:	dc 01       	movw	r26, r24
    29a8:	cb 01       	movw	r24, r22
    29aa:	bc 01       	movw	r22, r24
    29ac:	cd 01       	movw	r24, r26
    29ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29b2:	dc 01       	movw	r26, r24
    29b4:	cb 01       	movw	r24, r22
    29b6:	9e 83       	std	Y+6, r25	; 0x06
    29b8:	8d 83       	std	Y+5, r24	; 0x05
    29ba:	0f c0       	rjmp	.+30     	; 0x29da <SWITCH_u8Read+0xca>
    29bc:	88 ec       	ldi	r24, 0xC8	; 200
    29be:	90 e0       	ldi	r25, 0x00	; 0
    29c0:	9c 83       	std	Y+4, r25	; 0x04
    29c2:	8b 83       	std	Y+3, r24	; 0x03
    29c4:	8b 81       	ldd	r24, Y+3	; 0x03
    29c6:	9c 81       	ldd	r25, Y+4	; 0x04
    29c8:	01 97       	sbiw	r24, 0x01	; 1
    29ca:	f1 f7       	brne	.-4      	; 0x29c8 <SWITCH_u8Read+0xb8>
    29cc:	9c 83       	std	Y+4, r25	; 0x04
    29ce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29d0:	8d 81       	ldd	r24, Y+5	; 0x05
    29d2:	9e 81       	ldd	r25, Y+6	; 0x06
    29d4:	01 97       	sbiw	r24, 0x01	; 1
    29d6:	9e 83       	std	Y+6, r25	; 0x06
    29d8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29da:	8d 81       	ldd	r24, Y+5	; 0x05
    29dc:	9e 81       	ldd	r25, Y+6	; 0x06
    29de:	00 97       	sbiw	r24, 0x00	; 0
    29e0:	69 f7       	brne	.-38     	; 0x29bc <SWITCH_u8Read+0xac>
    29e2:	14 c0       	rjmp	.+40     	; 0x2a0c <SWITCH_u8Read+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29e4:	6f 81       	ldd	r22, Y+7	; 0x07
    29e6:	78 85       	ldd	r23, Y+8	; 0x08
    29e8:	89 85       	ldd	r24, Y+9	; 0x09
    29ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    29ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29f0:	dc 01       	movw	r26, r24
    29f2:	cb 01       	movw	r24, r22
    29f4:	9e 83       	std	Y+6, r25	; 0x06
    29f6:	8d 83       	std	Y+5, r24	; 0x05
    29f8:	8d 81       	ldd	r24, Y+5	; 0x05
    29fa:	9e 81       	ldd	r25, Y+6	; 0x06
    29fc:	9a 83       	std	Y+2, r25	; 0x02
    29fe:	89 83       	std	Y+1, r24	; 0x01
    2a00:	89 81       	ldd	r24, Y+1	; 0x01
    2a02:	9a 81       	ldd	r25, Y+2	; 0x02
    2a04:	01 97       	sbiw	r24, 0x01	; 1
    2a06:	f1 f7       	brne	.-4      	; 0x2a04 <SWITCH_u8Read+0xf4>
    2a08:	9a 83       	std	Y+2, r25	; 0x02
    2a0a:	89 83       	std	Y+1, r24	; 0x01
	u8 Local_u8ReturnValue ;
	_delay_ms(50);
	Local_u8ReturnValue = GPIO_u8ReadPin(copy_u8Port , copy_u8Pin);
    2a0c:	88 89       	ldd	r24, Y+16	; 0x10
    2a0e:	69 89       	ldd	r22, Y+17	; 0x11
    2a10:	0e 94 22 0a 	call	0x1444	; 0x1444 <GPIO_u8ReadPin>
    2a14:	8f 87       	std	Y+15, r24	; 0x0f
	return Local_u8ReturnValue ;
    2a16:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    2a18:	61 96       	adiw	r28, 0x11	; 17
    2a1a:	0f b6       	in	r0, 0x3f	; 63
    2a1c:	f8 94       	cli
    2a1e:	de bf       	out	0x3e, r29	; 62
    2a20:	0f be       	out	0x3f, r0	; 63
    2a22:	cd bf       	out	0x3d, r28	; 61
    2a24:	cf 91       	pop	r28
    2a26:	df 91       	pop	r29
    2a28:	08 95       	ret

00002a2a <SWITCH_voidInterrupt>:

void SWITCH_voidInterrupt(u8 copy_u8IntNum , void (*copy_voidFun)(void))
{
    2a2a:	df 93       	push	r29
    2a2c:	cf 93       	push	r28
    2a2e:	00 d0       	rcall	.+0      	; 0x2a30 <SWITCH_voidInterrupt+0x6>
    2a30:	0f 92       	push	r0
    2a32:	cd b7       	in	r28, 0x3d	; 61
    2a34:	de b7       	in	r29, 0x3e	; 62
    2a36:	89 83       	std	Y+1, r24	; 0x01
    2a38:	7b 83       	std	Y+3, r23	; 0x03
    2a3a:	6a 83       	std	Y+2, r22	; 0x02
	EXTI_voidInit(copy_u8IntNum , copy_voidFun );
    2a3c:	89 81       	ldd	r24, Y+1	; 0x01
    2a3e:	88 2f       	mov	r24, r24
    2a40:	90 e0       	ldi	r25, 0x00	; 0
    2a42:	2a 81       	ldd	r18, Y+2	; 0x02
    2a44:	3b 81       	ldd	r19, Y+3	; 0x03
    2a46:	b9 01       	movw	r22, r18
    2a48:	0e 94 63 07 	call	0xec6	; 0xec6 <EXTI_voidInit>
}
    2a4c:	0f 90       	pop	r0
    2a4e:	0f 90       	pop	r0
    2a50:	0f 90       	pop	r0
    2a52:	cf 91       	pop	r28
    2a54:	df 91       	pop	r29
    2a56:	08 95       	ret

00002a58 <TempUp>:


u8 CondTemp = 24 ;

void TempUp (void)
{
    2a58:	df 93       	push	r29
    2a5a:	cf 93       	push	r28
    2a5c:	cd b7       	in	r28, 0x3d	; 61
    2a5e:	de b7       	in	r29, 0x3e	; 62
	if (CondTemp <= 25)
    2a60:	80 91 77 01 	lds	r24, 0x0177
    2a64:	8a 31       	cpi	r24, 0x1A	; 26
    2a66:	28 f4       	brcc	.+10     	; 0x2a72 <TempUp+0x1a>
	CondTemp++;
    2a68:	80 91 77 01 	lds	r24, 0x0177
    2a6c:	8f 5f       	subi	r24, 0xFF	; 255
    2a6e:	80 93 77 01 	sts	0x0177, r24
}
    2a72:	cf 91       	pop	r28
    2a74:	df 91       	pop	r29
    2a76:	08 95       	ret

00002a78 <TempDn>:
void TempDn (void)
{
    2a78:	df 93       	push	r29
    2a7a:	cf 93       	push	r28
    2a7c:	cd b7       	in	r28, 0x3d	; 61
    2a7e:	de b7       	in	r29, 0x3e	; 62
	if (CondTemp >= 16)
    2a80:	80 91 77 01 	lds	r24, 0x0177
    2a84:	80 31       	cpi	r24, 0x10	; 16
    2a86:	28 f0       	brcs	.+10     	; 0x2a92 <TempDn+0x1a>
	{
	CondTemp-- ;
    2a88:	80 91 77 01 	lds	r24, 0x0177
    2a8c:	81 50       	subi	r24, 0x01	; 1
    2a8e:	80 93 77 01 	sts	0x0177, r24
	}
}
    2a92:	cf 91       	pop	r28
    2a94:	df 91       	pop	r29
    2a96:	08 95       	ret

00002a98 <main>:




int main (void )
{
    2a98:	df 93       	push	r29
    2a9a:	cf 93       	push	r28
    2a9c:	cd b7       	in	r28, 0x3d	; 61
    2a9e:	de b7       	in	r29, 0x3e	; 62
    2aa0:	61 97       	sbiw	r28, 0x11	; 17
    2aa2:	0f b6       	in	r0, 0x3f	; 63
    2aa4:	f8 94       	cli
    2aa6:	de bf       	out	0x3e, r29	; 62
    2aa8:	0f be       	out	0x3f, r0	; 63
    2aaa:	cd bf       	out	0x3d, r28	; 61
	LM35_voidInit(ADC1);
    2aac:	81 e0       	ldi	r24, 0x01	; 1
    2aae:	0e 94 38 14 	call	0x2870	; 0x2870 <LM35_voidInit>
	LCD_voidInit();
    2ab2:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <LCD_voidInit>
	SWITCH_voidInit(GPIOD , 2);
    2ab6:	83 e0       	ldi	r24, 0x03	; 3
    2ab8:	62 e0       	ldi	r22, 0x02	; 2
    2aba:	0e 94 72 14 	call	0x28e4	; 0x28e4 <SWITCH_voidInit>
	SWITCH_voidInit(GPIOD , 3);
    2abe:	83 e0       	ldi	r24, 0x03	; 3
    2ac0:	63 e0       	ldi	r22, 0x03	; 3
    2ac2:	0e 94 72 14 	call	0x28e4	; 0x28e4 <SWITCH_voidInit>

	SWITCH_voidInterrupt(EXTI_INT0 ,&TempUp);
    2ac6:	2c e2       	ldi	r18, 0x2C	; 44
    2ac8:	35 e1       	ldi	r19, 0x15	; 21
    2aca:	80 e0       	ldi	r24, 0x00	; 0
    2acc:	b9 01       	movw	r22, r18
    2ace:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <SWITCH_voidInterrupt>
	SWITCH_voidInterrupt(EXTI_INT1 , &TempDn);
    2ad2:	2c e3       	ldi	r18, 0x3C	; 60
    2ad4:	35 e1       	ldi	r19, 0x15	; 21
    2ad6:	81 e0       	ldi	r24, 0x01	; 1
    2ad8:	b9 01       	movw	r22, r18
    2ada:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <SWITCH_voidInterrupt>
	u8 Temp ;
	u8 FANSW , HEATSW ;
	while (1)
		{
		Temp =LM35_voidRead();
    2ade:	0e 94 45 14 	call	0x288a	; 0x288a <LM35_voidRead>
    2ae2:	89 8b       	std	Y+17, r24	; 0x11
		LCD_voidMoveCrusor(1,1);
    2ae4:	81 e0       	ldi	r24, 0x01	; 1
    2ae6:	61 e0       	ldi	r22, 0x01	; 1
    2ae8:	0e 94 73 11 	call	0x22e6	; 0x22e6 <LCD_voidMoveCrusor>
		LCD_voidDispString("Temp=");
    2aec:	83 e6       	ldi	r24, 0x63	; 99
    2aee:	90 e0       	ldi	r25, 0x00	; 0
    2af0:	0e 94 4b 13 	call	0x2696	; 0x2696 <LCD_voidDispString>
		LCD_voidDispNumber(Temp);
    2af4:	89 89       	ldd	r24, Y+17	; 0x11
    2af6:	88 2f       	mov	r24, r24
    2af8:	90 e0       	ldi	r25, 0x00	; 0
    2afa:	a0 e0       	ldi	r26, 0x00	; 0
    2afc:	b0 e0       	ldi	r27, 0x00	; 0
    2afe:	bc 01       	movw	r22, r24
    2b00:	cd 01       	movw	r24, r26
    2b02:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__floatunsisf>
    2b06:	dc 01       	movw	r26, r24
    2b08:	cb 01       	movw	r24, r22
    2b0a:	bc 01       	movw	r22, r24
    2b0c:	cd 01       	movw	r24, r26
    2b0e:	0e 94 67 13 	call	0x26ce	; 0x26ce <LCD_voidDispNumber>
		LCD_voidMoveCrusor(2,1);
    2b12:	82 e0       	ldi	r24, 0x02	; 2
    2b14:	61 e0       	ldi	r22, 0x01	; 1
    2b16:	0e 94 73 11 	call	0x22e6	; 0x22e6 <LCD_voidMoveCrusor>
		LCD_voidDispString("cond=");
    2b1a:	89 e6       	ldi	r24, 0x69	; 105
    2b1c:	90 e0       	ldi	r25, 0x00	; 0
    2b1e:	0e 94 4b 13 	call	0x2696	; 0x2696 <LCD_voidDispString>
		LCD_voidDispNumber(CondTemp);
    2b22:	80 91 77 01 	lds	r24, 0x0177
    2b26:	88 2f       	mov	r24, r24
    2b28:	90 e0       	ldi	r25, 0x00	; 0
    2b2a:	a0 e0       	ldi	r26, 0x00	; 0
    2b2c:	b0 e0       	ldi	r27, 0x00	; 0
    2b2e:	bc 01       	movw	r22, r24
    2b30:	cd 01       	movw	r24, r26
    2b32:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__floatunsisf>
    2b36:	dc 01       	movw	r26, r24
    2b38:	cb 01       	movw	r24, r22
    2b3a:	bc 01       	movw	r22, r24
    2b3c:	cd 01       	movw	r24, r26
    2b3e:	0e 94 67 13 	call	0x26ce	; 0x26ce <LCD_voidDispNumber>
    2b42:	80 e0       	ldi	r24, 0x00	; 0
    2b44:	90 e0       	ldi	r25, 0x00	; 0
    2b46:	aa e7       	ldi	r26, 0x7A	; 122
    2b48:	b4 e4       	ldi	r27, 0x44	; 68
    2b4a:	8b 87       	std	Y+11, r24	; 0x0b
    2b4c:	9c 87       	std	Y+12, r25	; 0x0c
    2b4e:	ad 87       	std	Y+13, r26	; 0x0d
    2b50:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b52:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b54:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b56:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b58:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b5a:	20 e0       	ldi	r18, 0x00	; 0
    2b5c:	30 e0       	ldi	r19, 0x00	; 0
    2b5e:	4a ef       	ldi	r20, 0xFA	; 250
    2b60:	54 e4       	ldi	r21, 0x44	; 68
    2b62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b66:	dc 01       	movw	r26, r24
    2b68:	cb 01       	movw	r24, r22
    2b6a:	8f 83       	std	Y+7, r24	; 0x07
    2b6c:	98 87       	std	Y+8, r25	; 0x08
    2b6e:	a9 87       	std	Y+9, r26	; 0x09
    2b70:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b72:	6f 81       	ldd	r22, Y+7	; 0x07
    2b74:	78 85       	ldd	r23, Y+8	; 0x08
    2b76:	89 85       	ldd	r24, Y+9	; 0x09
    2b78:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b7a:	20 e0       	ldi	r18, 0x00	; 0
    2b7c:	30 e0       	ldi	r19, 0x00	; 0
    2b7e:	40 e8       	ldi	r20, 0x80	; 128
    2b80:	5f e3       	ldi	r21, 0x3F	; 63
    2b82:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b86:	88 23       	and	r24, r24
    2b88:	2c f4       	brge	.+10     	; 0x2b94 <main+0xfc>
		__ticks = 1;
    2b8a:	81 e0       	ldi	r24, 0x01	; 1
    2b8c:	90 e0       	ldi	r25, 0x00	; 0
    2b8e:	9e 83       	std	Y+6, r25	; 0x06
    2b90:	8d 83       	std	Y+5, r24	; 0x05
    2b92:	3f c0       	rjmp	.+126    	; 0x2c12 <main+0x17a>
	else if (__tmp > 65535)
    2b94:	6f 81       	ldd	r22, Y+7	; 0x07
    2b96:	78 85       	ldd	r23, Y+8	; 0x08
    2b98:	89 85       	ldd	r24, Y+9	; 0x09
    2b9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b9c:	20 e0       	ldi	r18, 0x00	; 0
    2b9e:	3f ef       	ldi	r19, 0xFF	; 255
    2ba0:	4f e7       	ldi	r20, 0x7F	; 127
    2ba2:	57 e4       	ldi	r21, 0x47	; 71
    2ba4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ba8:	18 16       	cp	r1, r24
    2baa:	4c f5       	brge	.+82     	; 0x2bfe <main+0x166>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bac:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bae:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bb0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bb2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bb4:	20 e0       	ldi	r18, 0x00	; 0
    2bb6:	30 e0       	ldi	r19, 0x00	; 0
    2bb8:	40 e2       	ldi	r20, 0x20	; 32
    2bba:	51 e4       	ldi	r21, 0x41	; 65
    2bbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bc0:	dc 01       	movw	r26, r24
    2bc2:	cb 01       	movw	r24, r22
    2bc4:	bc 01       	movw	r22, r24
    2bc6:	cd 01       	movw	r24, r26
    2bc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bcc:	dc 01       	movw	r26, r24
    2bce:	cb 01       	movw	r24, r22
    2bd0:	9e 83       	std	Y+6, r25	; 0x06
    2bd2:	8d 83       	std	Y+5, r24	; 0x05
    2bd4:	0f c0       	rjmp	.+30     	; 0x2bf4 <main+0x15c>
    2bd6:	88 ec       	ldi	r24, 0xC8	; 200
    2bd8:	90 e0       	ldi	r25, 0x00	; 0
    2bda:	9c 83       	std	Y+4, r25	; 0x04
    2bdc:	8b 83       	std	Y+3, r24	; 0x03
    2bde:	8b 81       	ldd	r24, Y+3	; 0x03
    2be0:	9c 81       	ldd	r25, Y+4	; 0x04
    2be2:	01 97       	sbiw	r24, 0x01	; 1
    2be4:	f1 f7       	brne	.-4      	; 0x2be2 <main+0x14a>
    2be6:	9c 83       	std	Y+4, r25	; 0x04
    2be8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bea:	8d 81       	ldd	r24, Y+5	; 0x05
    2bec:	9e 81       	ldd	r25, Y+6	; 0x06
    2bee:	01 97       	sbiw	r24, 0x01	; 1
    2bf0:	9e 83       	std	Y+6, r25	; 0x06
    2bf2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bf4:	8d 81       	ldd	r24, Y+5	; 0x05
    2bf6:	9e 81       	ldd	r25, Y+6	; 0x06
    2bf8:	00 97       	sbiw	r24, 0x00	; 0
    2bfa:	69 f7       	brne	.-38     	; 0x2bd6 <main+0x13e>
    2bfc:	14 c0       	rjmp	.+40     	; 0x2c26 <main+0x18e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bfe:	6f 81       	ldd	r22, Y+7	; 0x07
    2c00:	78 85       	ldd	r23, Y+8	; 0x08
    2c02:	89 85       	ldd	r24, Y+9	; 0x09
    2c04:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c0a:	dc 01       	movw	r26, r24
    2c0c:	cb 01       	movw	r24, r22
    2c0e:	9e 83       	std	Y+6, r25	; 0x06
    2c10:	8d 83       	std	Y+5, r24	; 0x05
    2c12:	8d 81       	ldd	r24, Y+5	; 0x05
    2c14:	9e 81       	ldd	r25, Y+6	; 0x06
    2c16:	9a 83       	std	Y+2, r25	; 0x02
    2c18:	89 83       	std	Y+1, r24	; 0x01
    2c1a:	89 81       	ldd	r24, Y+1	; 0x01
    2c1c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c1e:	01 97       	sbiw	r24, 0x01	; 1
    2c20:	f1 f7       	brne	.-4      	; 0x2c1e <main+0x186>
    2c22:	9a 83       	std	Y+2, r25	; 0x02
    2c24:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms (1000);
		FANSW = SWITCH_u8Read(GPIOD , 0);
    2c26:	83 e0       	ldi	r24, 0x03	; 3
    2c28:	60 e0       	ldi	r22, 0x00	; 0
    2c2a:	0e 94 88 14 	call	0x2910	; 0x2910 <SWITCH_u8Read>
    2c2e:	88 8b       	std	Y+16, r24	; 0x10
		HEATSW = SWITCH_u8Read(GPIOD , 1);
    2c30:	83 e0       	ldi	r24, 0x03	; 3
    2c32:	61 e0       	ldi	r22, 0x01	; 1
    2c34:	0e 94 88 14 	call	0x2910	; 0x2910 <SWITCH_u8Read>
    2c38:	8f 87       	std	Y+15, r24	; 0x0f

		if (FANSW == 0 && Temp > CondTemp)
    2c3a:	88 89       	ldd	r24, Y+16	; 0x10
    2c3c:	88 23       	and	r24, r24
    2c3e:	51 f4       	brne	.+20     	; 0x2c54 <main+0x1bc>
    2c40:	90 91 77 01 	lds	r25, 0x0177
    2c44:	89 89       	ldd	r24, Y+17	; 0x11
    2c46:	98 17       	cp	r25, r24
    2c48:	28 f4       	brcc	.+10     	; 0x2c54 <main+0x1bc>
		{
			LED_voidTurnOn(GPIOD , 4);
    2c4a:	83 e0       	ldi	r24, 0x03	; 3
    2c4c:	64 e0       	ldi	r22, 0x04	; 4
    2c4e:	0e 94 f7 13 	call	0x27ee	; 0x27ee <LED_voidTurnOn>
    2c52:	0c c0       	rjmp	.+24     	; 0x2c6c <main+0x1d4>

		}
		else if (Temp < CondTemp || FANSW != 0)
    2c54:	90 91 77 01 	lds	r25, 0x0177
    2c58:	89 89       	ldd	r24, Y+17	; 0x11
    2c5a:	89 17       	cp	r24, r25
    2c5c:	18 f0       	brcs	.+6      	; 0x2c64 <main+0x1cc>
    2c5e:	88 89       	ldd	r24, Y+16	; 0x10
    2c60:	88 23       	and	r24, r24
    2c62:	21 f0       	breq	.+8      	; 0x2c6c <main+0x1d4>
		{
			LED_voidTurnOff(GPIOD , 4);
    2c64:	83 e0       	ldi	r24, 0x03	; 3
    2c66:	64 e0       	ldi	r22, 0x04	; 4
    2c68:	0e 94 0d 14 	call	0x281a	; 0x281a <LED_voidTurnOff>
		}
		if (HEATSW == 0 && Temp < 15)
    2c6c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c6e:	88 23       	and	r24, r24
    2c70:	41 f4       	brne	.+16     	; 0x2c82 <main+0x1ea>
    2c72:	89 89       	ldd	r24, Y+17	; 0x11
    2c74:	8f 30       	cpi	r24, 0x0F	; 15
    2c76:	28 f4       	brcc	.+10     	; 0x2c82 <main+0x1ea>
		{
			LED_voidTurnOn(GPIOD , 5);
    2c78:	83 e0       	ldi	r24, 0x03	; 3
    2c7a:	65 e0       	ldi	r22, 0x05	; 5
    2c7c:	0e 94 f7 13 	call	0x27ee	; 0x27ee <LED_voidTurnOn>
    2c80:	2e cf       	rjmp	.-420    	; 0x2ade <main+0x46>

		}
		else if (Temp > 15 || HEATSW != 0)
    2c82:	89 89       	ldd	r24, Y+17	; 0x11
    2c84:	80 31       	cpi	r24, 0x10	; 16
    2c86:	20 f4       	brcc	.+8      	; 0x2c90 <main+0x1f8>
    2c88:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c8a:	88 23       	and	r24, r24
    2c8c:	09 f4       	brne	.+2      	; 0x2c90 <main+0x1f8>
    2c8e:	27 cf       	rjmp	.-434    	; 0x2ade <main+0x46>
		{
			LED_voidTurnOff(GPIOD , 5);
    2c90:	83 e0       	ldi	r24, 0x03	; 3
    2c92:	65 e0       	ldi	r22, 0x05	; 5
    2c94:	0e 94 0d 14 	call	0x281a	; 0x281a <LED_voidTurnOff>
    2c98:	22 cf       	rjmp	.-444    	; 0x2ade <main+0x46>

00002c9a <__prologue_saves__>:
    2c9a:	2f 92       	push	r2
    2c9c:	3f 92       	push	r3
    2c9e:	4f 92       	push	r4
    2ca0:	5f 92       	push	r5
    2ca2:	6f 92       	push	r6
    2ca4:	7f 92       	push	r7
    2ca6:	8f 92       	push	r8
    2ca8:	9f 92       	push	r9
    2caa:	af 92       	push	r10
    2cac:	bf 92       	push	r11
    2cae:	cf 92       	push	r12
    2cb0:	df 92       	push	r13
    2cb2:	ef 92       	push	r14
    2cb4:	ff 92       	push	r15
    2cb6:	0f 93       	push	r16
    2cb8:	1f 93       	push	r17
    2cba:	cf 93       	push	r28
    2cbc:	df 93       	push	r29
    2cbe:	cd b7       	in	r28, 0x3d	; 61
    2cc0:	de b7       	in	r29, 0x3e	; 62
    2cc2:	ca 1b       	sub	r28, r26
    2cc4:	db 0b       	sbc	r29, r27
    2cc6:	0f b6       	in	r0, 0x3f	; 63
    2cc8:	f8 94       	cli
    2cca:	de bf       	out	0x3e, r29	; 62
    2ccc:	0f be       	out	0x3f, r0	; 63
    2cce:	cd bf       	out	0x3d, r28	; 61
    2cd0:	09 94       	ijmp

00002cd2 <__epilogue_restores__>:
    2cd2:	2a 88       	ldd	r2, Y+18	; 0x12
    2cd4:	39 88       	ldd	r3, Y+17	; 0x11
    2cd6:	48 88       	ldd	r4, Y+16	; 0x10
    2cd8:	5f 84       	ldd	r5, Y+15	; 0x0f
    2cda:	6e 84       	ldd	r6, Y+14	; 0x0e
    2cdc:	7d 84       	ldd	r7, Y+13	; 0x0d
    2cde:	8c 84       	ldd	r8, Y+12	; 0x0c
    2ce0:	9b 84       	ldd	r9, Y+11	; 0x0b
    2ce2:	aa 84       	ldd	r10, Y+10	; 0x0a
    2ce4:	b9 84       	ldd	r11, Y+9	; 0x09
    2ce6:	c8 84       	ldd	r12, Y+8	; 0x08
    2ce8:	df 80       	ldd	r13, Y+7	; 0x07
    2cea:	ee 80       	ldd	r14, Y+6	; 0x06
    2cec:	fd 80       	ldd	r15, Y+5	; 0x05
    2cee:	0c 81       	ldd	r16, Y+4	; 0x04
    2cf0:	1b 81       	ldd	r17, Y+3	; 0x03
    2cf2:	aa 81       	ldd	r26, Y+2	; 0x02
    2cf4:	b9 81       	ldd	r27, Y+1	; 0x01
    2cf6:	ce 0f       	add	r28, r30
    2cf8:	d1 1d       	adc	r29, r1
    2cfa:	0f b6       	in	r0, 0x3f	; 63
    2cfc:	f8 94       	cli
    2cfe:	de bf       	out	0x3e, r29	; 62
    2d00:	0f be       	out	0x3f, r0	; 63
    2d02:	cd bf       	out	0x3d, r28	; 61
    2d04:	ed 01       	movw	r28, r26
    2d06:	08 95       	ret

00002d08 <sprintf>:
    2d08:	ae e0       	ldi	r26, 0x0E	; 14
    2d0a:	b0 e0       	ldi	r27, 0x00	; 0
    2d0c:	ea e8       	ldi	r30, 0x8A	; 138
    2d0e:	f6 e1       	ldi	r31, 0x16	; 22
    2d10:	0c 94 5b 16 	jmp	0x2cb6	; 0x2cb6 <__prologue_saves__+0x1c>
    2d14:	0d 89       	ldd	r16, Y+21	; 0x15
    2d16:	1e 89       	ldd	r17, Y+22	; 0x16
    2d18:	86 e0       	ldi	r24, 0x06	; 6
    2d1a:	8c 83       	std	Y+4, r24	; 0x04
    2d1c:	1a 83       	std	Y+2, r17	; 0x02
    2d1e:	09 83       	std	Y+1, r16	; 0x01
    2d20:	8f ef       	ldi	r24, 0xFF	; 255
    2d22:	9f e7       	ldi	r25, 0x7F	; 127
    2d24:	9e 83       	std	Y+6, r25	; 0x06
    2d26:	8d 83       	std	Y+5, r24	; 0x05
    2d28:	9e 01       	movw	r18, r28
    2d2a:	27 5e       	subi	r18, 0xE7	; 231
    2d2c:	3f 4f       	sbci	r19, 0xFF	; 255
    2d2e:	ce 01       	movw	r24, r28
    2d30:	01 96       	adiw	r24, 0x01	; 1
    2d32:	6f 89       	ldd	r22, Y+23	; 0x17
    2d34:	78 8d       	ldd	r23, Y+24	; 0x18
    2d36:	a9 01       	movw	r20, r18
    2d38:	0e 94 a8 16 	call	0x2d50	; 0x2d50 <vfprintf>
    2d3c:	2f 81       	ldd	r18, Y+7	; 0x07
    2d3e:	38 85       	ldd	r19, Y+8	; 0x08
    2d40:	02 0f       	add	r16, r18
    2d42:	13 1f       	adc	r17, r19
    2d44:	f8 01       	movw	r30, r16
    2d46:	10 82       	st	Z, r1
    2d48:	2e 96       	adiw	r28, 0x0e	; 14
    2d4a:	e4 e0       	ldi	r30, 0x04	; 4
    2d4c:	0c 94 77 16 	jmp	0x2cee	; 0x2cee <__epilogue_restores__+0x1c>

00002d50 <vfprintf>:
    2d50:	ab e0       	ldi	r26, 0x0B	; 11
    2d52:	b0 e0       	ldi	r27, 0x00	; 0
    2d54:	ee ea       	ldi	r30, 0xAE	; 174
    2d56:	f6 e1       	ldi	r31, 0x16	; 22
    2d58:	0c 94 4d 16 	jmp	0x2c9a	; 0x2c9a <__prologue_saves__>
    2d5c:	3c 01       	movw	r6, r24
    2d5e:	2b 01       	movw	r4, r22
    2d60:	5a 01       	movw	r10, r20
    2d62:	fc 01       	movw	r30, r24
    2d64:	17 82       	std	Z+7, r1	; 0x07
    2d66:	16 82       	std	Z+6, r1	; 0x06
    2d68:	83 81       	ldd	r24, Z+3	; 0x03
    2d6a:	81 fd       	sbrc	r24, 1
    2d6c:	03 c0       	rjmp	.+6      	; 0x2d74 <vfprintf+0x24>
    2d6e:	6f ef       	ldi	r22, 0xFF	; 255
    2d70:	7f ef       	ldi	r23, 0xFF	; 255
    2d72:	c6 c1       	rjmp	.+908    	; 0x3100 <vfprintf+0x3b0>
    2d74:	9a e0       	ldi	r25, 0x0A	; 10
    2d76:	89 2e       	mov	r8, r25
    2d78:	1e 01       	movw	r2, r28
    2d7a:	08 94       	sec
    2d7c:	21 1c       	adc	r2, r1
    2d7e:	31 1c       	adc	r3, r1
    2d80:	f3 01       	movw	r30, r6
    2d82:	23 81       	ldd	r18, Z+3	; 0x03
    2d84:	f2 01       	movw	r30, r4
    2d86:	23 fd       	sbrc	r18, 3
    2d88:	85 91       	lpm	r24, Z+
    2d8a:	23 ff       	sbrs	r18, 3
    2d8c:	81 91       	ld	r24, Z+
    2d8e:	2f 01       	movw	r4, r30
    2d90:	88 23       	and	r24, r24
    2d92:	09 f4       	brne	.+2      	; 0x2d96 <vfprintf+0x46>
    2d94:	b2 c1       	rjmp	.+868    	; 0x30fa <vfprintf+0x3aa>
    2d96:	85 32       	cpi	r24, 0x25	; 37
    2d98:	39 f4       	brne	.+14     	; 0x2da8 <vfprintf+0x58>
    2d9a:	23 fd       	sbrc	r18, 3
    2d9c:	85 91       	lpm	r24, Z+
    2d9e:	23 ff       	sbrs	r18, 3
    2da0:	81 91       	ld	r24, Z+
    2da2:	2f 01       	movw	r4, r30
    2da4:	85 32       	cpi	r24, 0x25	; 37
    2da6:	29 f4       	brne	.+10     	; 0x2db2 <vfprintf+0x62>
    2da8:	90 e0       	ldi	r25, 0x00	; 0
    2daa:	b3 01       	movw	r22, r6
    2dac:	0e 94 9b 18 	call	0x3136	; 0x3136 <fputc>
    2db0:	e7 cf       	rjmp	.-50     	; 0x2d80 <vfprintf+0x30>
    2db2:	98 2f       	mov	r25, r24
    2db4:	ff 24       	eor	r15, r15
    2db6:	ee 24       	eor	r14, r14
    2db8:	99 24       	eor	r9, r9
    2dba:	ff e1       	ldi	r31, 0x1F	; 31
    2dbc:	ff 15       	cp	r31, r15
    2dbe:	d0 f0       	brcs	.+52     	; 0x2df4 <vfprintf+0xa4>
    2dc0:	9b 32       	cpi	r25, 0x2B	; 43
    2dc2:	69 f0       	breq	.+26     	; 0x2dde <vfprintf+0x8e>
    2dc4:	9c 32       	cpi	r25, 0x2C	; 44
    2dc6:	28 f4       	brcc	.+10     	; 0x2dd2 <vfprintf+0x82>
    2dc8:	90 32       	cpi	r25, 0x20	; 32
    2dca:	59 f0       	breq	.+22     	; 0x2de2 <vfprintf+0x92>
    2dcc:	93 32       	cpi	r25, 0x23	; 35
    2dce:	91 f4       	brne	.+36     	; 0x2df4 <vfprintf+0xa4>
    2dd0:	0e c0       	rjmp	.+28     	; 0x2dee <vfprintf+0x9e>
    2dd2:	9d 32       	cpi	r25, 0x2D	; 45
    2dd4:	49 f0       	breq	.+18     	; 0x2de8 <vfprintf+0x98>
    2dd6:	90 33       	cpi	r25, 0x30	; 48
    2dd8:	69 f4       	brne	.+26     	; 0x2df4 <vfprintf+0xa4>
    2dda:	41 e0       	ldi	r20, 0x01	; 1
    2ddc:	24 c0       	rjmp	.+72     	; 0x2e26 <vfprintf+0xd6>
    2dde:	52 e0       	ldi	r21, 0x02	; 2
    2de0:	f5 2a       	or	r15, r21
    2de2:	84 e0       	ldi	r24, 0x04	; 4
    2de4:	f8 2a       	or	r15, r24
    2de6:	28 c0       	rjmp	.+80     	; 0x2e38 <vfprintf+0xe8>
    2de8:	98 e0       	ldi	r25, 0x08	; 8
    2dea:	f9 2a       	or	r15, r25
    2dec:	25 c0       	rjmp	.+74     	; 0x2e38 <vfprintf+0xe8>
    2dee:	e0 e1       	ldi	r30, 0x10	; 16
    2df0:	fe 2a       	or	r15, r30
    2df2:	22 c0       	rjmp	.+68     	; 0x2e38 <vfprintf+0xe8>
    2df4:	f7 fc       	sbrc	r15, 7
    2df6:	29 c0       	rjmp	.+82     	; 0x2e4a <vfprintf+0xfa>
    2df8:	89 2f       	mov	r24, r25
    2dfa:	80 53       	subi	r24, 0x30	; 48
    2dfc:	8a 30       	cpi	r24, 0x0A	; 10
    2dfe:	70 f4       	brcc	.+28     	; 0x2e1c <vfprintf+0xcc>
    2e00:	f6 fe       	sbrs	r15, 6
    2e02:	05 c0       	rjmp	.+10     	; 0x2e0e <vfprintf+0xbe>
    2e04:	98 9c       	mul	r9, r8
    2e06:	90 2c       	mov	r9, r0
    2e08:	11 24       	eor	r1, r1
    2e0a:	98 0e       	add	r9, r24
    2e0c:	15 c0       	rjmp	.+42     	; 0x2e38 <vfprintf+0xe8>
    2e0e:	e8 9c       	mul	r14, r8
    2e10:	e0 2c       	mov	r14, r0
    2e12:	11 24       	eor	r1, r1
    2e14:	e8 0e       	add	r14, r24
    2e16:	f0 e2       	ldi	r31, 0x20	; 32
    2e18:	ff 2a       	or	r15, r31
    2e1a:	0e c0       	rjmp	.+28     	; 0x2e38 <vfprintf+0xe8>
    2e1c:	9e 32       	cpi	r25, 0x2E	; 46
    2e1e:	29 f4       	brne	.+10     	; 0x2e2a <vfprintf+0xda>
    2e20:	f6 fc       	sbrc	r15, 6
    2e22:	6b c1       	rjmp	.+726    	; 0x30fa <vfprintf+0x3aa>
    2e24:	40 e4       	ldi	r20, 0x40	; 64
    2e26:	f4 2a       	or	r15, r20
    2e28:	07 c0       	rjmp	.+14     	; 0x2e38 <vfprintf+0xe8>
    2e2a:	9c 36       	cpi	r25, 0x6C	; 108
    2e2c:	19 f4       	brne	.+6      	; 0x2e34 <vfprintf+0xe4>
    2e2e:	50 e8       	ldi	r21, 0x80	; 128
    2e30:	f5 2a       	or	r15, r21
    2e32:	02 c0       	rjmp	.+4      	; 0x2e38 <vfprintf+0xe8>
    2e34:	98 36       	cpi	r25, 0x68	; 104
    2e36:	49 f4       	brne	.+18     	; 0x2e4a <vfprintf+0xfa>
    2e38:	f2 01       	movw	r30, r4
    2e3a:	23 fd       	sbrc	r18, 3
    2e3c:	95 91       	lpm	r25, Z+
    2e3e:	23 ff       	sbrs	r18, 3
    2e40:	91 91       	ld	r25, Z+
    2e42:	2f 01       	movw	r4, r30
    2e44:	99 23       	and	r25, r25
    2e46:	09 f0       	breq	.+2      	; 0x2e4a <vfprintf+0xfa>
    2e48:	b8 cf       	rjmp	.-144    	; 0x2dba <vfprintf+0x6a>
    2e4a:	89 2f       	mov	r24, r25
    2e4c:	85 54       	subi	r24, 0x45	; 69
    2e4e:	83 30       	cpi	r24, 0x03	; 3
    2e50:	18 f0       	brcs	.+6      	; 0x2e58 <vfprintf+0x108>
    2e52:	80 52       	subi	r24, 0x20	; 32
    2e54:	83 30       	cpi	r24, 0x03	; 3
    2e56:	38 f4       	brcc	.+14     	; 0x2e66 <vfprintf+0x116>
    2e58:	44 e0       	ldi	r20, 0x04	; 4
    2e5a:	50 e0       	ldi	r21, 0x00	; 0
    2e5c:	a4 0e       	add	r10, r20
    2e5e:	b5 1e       	adc	r11, r21
    2e60:	5f e3       	ldi	r21, 0x3F	; 63
    2e62:	59 83       	std	Y+1, r21	; 0x01
    2e64:	0f c0       	rjmp	.+30     	; 0x2e84 <vfprintf+0x134>
    2e66:	93 36       	cpi	r25, 0x63	; 99
    2e68:	31 f0       	breq	.+12     	; 0x2e76 <vfprintf+0x126>
    2e6a:	93 37       	cpi	r25, 0x73	; 115
    2e6c:	79 f0       	breq	.+30     	; 0x2e8c <vfprintf+0x13c>
    2e6e:	93 35       	cpi	r25, 0x53	; 83
    2e70:	09 f0       	breq	.+2      	; 0x2e74 <vfprintf+0x124>
    2e72:	56 c0       	rjmp	.+172    	; 0x2f20 <vfprintf+0x1d0>
    2e74:	20 c0       	rjmp	.+64     	; 0x2eb6 <vfprintf+0x166>
    2e76:	f5 01       	movw	r30, r10
    2e78:	80 81       	ld	r24, Z
    2e7a:	89 83       	std	Y+1, r24	; 0x01
    2e7c:	42 e0       	ldi	r20, 0x02	; 2
    2e7e:	50 e0       	ldi	r21, 0x00	; 0
    2e80:	a4 0e       	add	r10, r20
    2e82:	b5 1e       	adc	r11, r21
    2e84:	61 01       	movw	r12, r2
    2e86:	01 e0       	ldi	r16, 0x01	; 1
    2e88:	10 e0       	ldi	r17, 0x00	; 0
    2e8a:	12 c0       	rjmp	.+36     	; 0x2eb0 <vfprintf+0x160>
    2e8c:	f5 01       	movw	r30, r10
    2e8e:	c0 80       	ld	r12, Z
    2e90:	d1 80       	ldd	r13, Z+1	; 0x01
    2e92:	f6 fc       	sbrc	r15, 6
    2e94:	03 c0       	rjmp	.+6      	; 0x2e9c <vfprintf+0x14c>
    2e96:	6f ef       	ldi	r22, 0xFF	; 255
    2e98:	7f ef       	ldi	r23, 0xFF	; 255
    2e9a:	02 c0       	rjmp	.+4      	; 0x2ea0 <vfprintf+0x150>
    2e9c:	69 2d       	mov	r22, r9
    2e9e:	70 e0       	ldi	r23, 0x00	; 0
    2ea0:	42 e0       	ldi	r20, 0x02	; 2
    2ea2:	50 e0       	ldi	r21, 0x00	; 0
    2ea4:	a4 0e       	add	r10, r20
    2ea6:	b5 1e       	adc	r11, r21
    2ea8:	c6 01       	movw	r24, r12
    2eaa:	0e 94 90 18 	call	0x3120	; 0x3120 <strnlen>
    2eae:	8c 01       	movw	r16, r24
    2eb0:	5f e7       	ldi	r21, 0x7F	; 127
    2eb2:	f5 22       	and	r15, r21
    2eb4:	14 c0       	rjmp	.+40     	; 0x2ede <vfprintf+0x18e>
    2eb6:	f5 01       	movw	r30, r10
    2eb8:	c0 80       	ld	r12, Z
    2eba:	d1 80       	ldd	r13, Z+1	; 0x01
    2ebc:	f6 fc       	sbrc	r15, 6
    2ebe:	03 c0       	rjmp	.+6      	; 0x2ec6 <vfprintf+0x176>
    2ec0:	6f ef       	ldi	r22, 0xFF	; 255
    2ec2:	7f ef       	ldi	r23, 0xFF	; 255
    2ec4:	02 c0       	rjmp	.+4      	; 0x2eca <vfprintf+0x17a>
    2ec6:	69 2d       	mov	r22, r9
    2ec8:	70 e0       	ldi	r23, 0x00	; 0
    2eca:	42 e0       	ldi	r20, 0x02	; 2
    2ecc:	50 e0       	ldi	r21, 0x00	; 0
    2ece:	a4 0e       	add	r10, r20
    2ed0:	b5 1e       	adc	r11, r21
    2ed2:	c6 01       	movw	r24, r12
    2ed4:	0e 94 85 18 	call	0x310a	; 0x310a <strnlen_P>
    2ed8:	8c 01       	movw	r16, r24
    2eda:	50 e8       	ldi	r21, 0x80	; 128
    2edc:	f5 2a       	or	r15, r21
    2ede:	f3 fe       	sbrs	r15, 3
    2ee0:	07 c0       	rjmp	.+14     	; 0x2ef0 <vfprintf+0x1a0>
    2ee2:	1a c0       	rjmp	.+52     	; 0x2f18 <vfprintf+0x1c8>
    2ee4:	80 e2       	ldi	r24, 0x20	; 32
    2ee6:	90 e0       	ldi	r25, 0x00	; 0
    2ee8:	b3 01       	movw	r22, r6
    2eea:	0e 94 9b 18 	call	0x3136	; 0x3136 <fputc>
    2eee:	ea 94       	dec	r14
    2ef0:	8e 2d       	mov	r24, r14
    2ef2:	90 e0       	ldi	r25, 0x00	; 0
    2ef4:	08 17       	cp	r16, r24
    2ef6:	19 07       	cpc	r17, r25
    2ef8:	a8 f3       	brcs	.-22     	; 0x2ee4 <vfprintf+0x194>
    2efa:	0e c0       	rjmp	.+28     	; 0x2f18 <vfprintf+0x1c8>
    2efc:	f6 01       	movw	r30, r12
    2efe:	f7 fc       	sbrc	r15, 7
    2f00:	85 91       	lpm	r24, Z+
    2f02:	f7 fe       	sbrs	r15, 7
    2f04:	81 91       	ld	r24, Z+
    2f06:	6f 01       	movw	r12, r30
    2f08:	90 e0       	ldi	r25, 0x00	; 0
    2f0a:	b3 01       	movw	r22, r6
    2f0c:	0e 94 9b 18 	call	0x3136	; 0x3136 <fputc>
    2f10:	e1 10       	cpse	r14, r1
    2f12:	ea 94       	dec	r14
    2f14:	01 50       	subi	r16, 0x01	; 1
    2f16:	10 40       	sbci	r17, 0x00	; 0
    2f18:	01 15       	cp	r16, r1
    2f1a:	11 05       	cpc	r17, r1
    2f1c:	79 f7       	brne	.-34     	; 0x2efc <vfprintf+0x1ac>
    2f1e:	ea c0       	rjmp	.+468    	; 0x30f4 <vfprintf+0x3a4>
    2f20:	94 36       	cpi	r25, 0x64	; 100
    2f22:	11 f0       	breq	.+4      	; 0x2f28 <vfprintf+0x1d8>
    2f24:	99 36       	cpi	r25, 0x69	; 105
    2f26:	69 f5       	brne	.+90     	; 0x2f82 <vfprintf+0x232>
    2f28:	f7 fe       	sbrs	r15, 7
    2f2a:	08 c0       	rjmp	.+16     	; 0x2f3c <vfprintf+0x1ec>
    2f2c:	f5 01       	movw	r30, r10
    2f2e:	20 81       	ld	r18, Z
    2f30:	31 81       	ldd	r19, Z+1	; 0x01
    2f32:	42 81       	ldd	r20, Z+2	; 0x02
    2f34:	53 81       	ldd	r21, Z+3	; 0x03
    2f36:	84 e0       	ldi	r24, 0x04	; 4
    2f38:	90 e0       	ldi	r25, 0x00	; 0
    2f3a:	0a c0       	rjmp	.+20     	; 0x2f50 <vfprintf+0x200>
    2f3c:	f5 01       	movw	r30, r10
    2f3e:	80 81       	ld	r24, Z
    2f40:	91 81       	ldd	r25, Z+1	; 0x01
    2f42:	9c 01       	movw	r18, r24
    2f44:	44 27       	eor	r20, r20
    2f46:	37 fd       	sbrc	r19, 7
    2f48:	40 95       	com	r20
    2f4a:	54 2f       	mov	r21, r20
    2f4c:	82 e0       	ldi	r24, 0x02	; 2
    2f4e:	90 e0       	ldi	r25, 0x00	; 0
    2f50:	a8 0e       	add	r10, r24
    2f52:	b9 1e       	adc	r11, r25
    2f54:	9f e6       	ldi	r25, 0x6F	; 111
    2f56:	f9 22       	and	r15, r25
    2f58:	57 ff       	sbrs	r21, 7
    2f5a:	09 c0       	rjmp	.+18     	; 0x2f6e <vfprintf+0x21e>
    2f5c:	50 95       	com	r21
    2f5e:	40 95       	com	r20
    2f60:	30 95       	com	r19
    2f62:	21 95       	neg	r18
    2f64:	3f 4f       	sbci	r19, 0xFF	; 255
    2f66:	4f 4f       	sbci	r20, 0xFF	; 255
    2f68:	5f 4f       	sbci	r21, 0xFF	; 255
    2f6a:	e0 e8       	ldi	r30, 0x80	; 128
    2f6c:	fe 2a       	or	r15, r30
    2f6e:	ca 01       	movw	r24, r20
    2f70:	b9 01       	movw	r22, r18
    2f72:	a1 01       	movw	r20, r2
    2f74:	2a e0       	ldi	r18, 0x0A	; 10
    2f76:	30 e0       	ldi	r19, 0x00	; 0
    2f78:	0e 94 c7 18 	call	0x318e	; 0x318e <__ultoa_invert>
    2f7c:	d8 2e       	mov	r13, r24
    2f7e:	d2 18       	sub	r13, r2
    2f80:	40 c0       	rjmp	.+128    	; 0x3002 <vfprintf+0x2b2>
    2f82:	95 37       	cpi	r25, 0x75	; 117
    2f84:	29 f4       	brne	.+10     	; 0x2f90 <vfprintf+0x240>
    2f86:	1f 2d       	mov	r17, r15
    2f88:	1f 7e       	andi	r17, 0xEF	; 239
    2f8a:	2a e0       	ldi	r18, 0x0A	; 10
    2f8c:	30 e0       	ldi	r19, 0x00	; 0
    2f8e:	1d c0       	rjmp	.+58     	; 0x2fca <vfprintf+0x27a>
    2f90:	1f 2d       	mov	r17, r15
    2f92:	19 7f       	andi	r17, 0xF9	; 249
    2f94:	9f 36       	cpi	r25, 0x6F	; 111
    2f96:	61 f0       	breq	.+24     	; 0x2fb0 <vfprintf+0x260>
    2f98:	90 37       	cpi	r25, 0x70	; 112
    2f9a:	20 f4       	brcc	.+8      	; 0x2fa4 <vfprintf+0x254>
    2f9c:	98 35       	cpi	r25, 0x58	; 88
    2f9e:	09 f0       	breq	.+2      	; 0x2fa2 <vfprintf+0x252>
    2fa0:	ac c0       	rjmp	.+344    	; 0x30fa <vfprintf+0x3aa>
    2fa2:	0f c0       	rjmp	.+30     	; 0x2fc2 <vfprintf+0x272>
    2fa4:	90 37       	cpi	r25, 0x70	; 112
    2fa6:	39 f0       	breq	.+14     	; 0x2fb6 <vfprintf+0x266>
    2fa8:	98 37       	cpi	r25, 0x78	; 120
    2faa:	09 f0       	breq	.+2      	; 0x2fae <vfprintf+0x25e>
    2fac:	a6 c0       	rjmp	.+332    	; 0x30fa <vfprintf+0x3aa>
    2fae:	04 c0       	rjmp	.+8      	; 0x2fb8 <vfprintf+0x268>
    2fb0:	28 e0       	ldi	r18, 0x08	; 8
    2fb2:	30 e0       	ldi	r19, 0x00	; 0
    2fb4:	0a c0       	rjmp	.+20     	; 0x2fca <vfprintf+0x27a>
    2fb6:	10 61       	ori	r17, 0x10	; 16
    2fb8:	14 fd       	sbrc	r17, 4
    2fba:	14 60       	ori	r17, 0x04	; 4
    2fbc:	20 e1       	ldi	r18, 0x10	; 16
    2fbe:	30 e0       	ldi	r19, 0x00	; 0
    2fc0:	04 c0       	rjmp	.+8      	; 0x2fca <vfprintf+0x27a>
    2fc2:	14 fd       	sbrc	r17, 4
    2fc4:	16 60       	ori	r17, 0x06	; 6
    2fc6:	20 e1       	ldi	r18, 0x10	; 16
    2fc8:	32 e0       	ldi	r19, 0x02	; 2
    2fca:	17 ff       	sbrs	r17, 7
    2fcc:	08 c0       	rjmp	.+16     	; 0x2fde <vfprintf+0x28e>
    2fce:	f5 01       	movw	r30, r10
    2fd0:	60 81       	ld	r22, Z
    2fd2:	71 81       	ldd	r23, Z+1	; 0x01
    2fd4:	82 81       	ldd	r24, Z+2	; 0x02
    2fd6:	93 81       	ldd	r25, Z+3	; 0x03
    2fd8:	44 e0       	ldi	r20, 0x04	; 4
    2fda:	50 e0       	ldi	r21, 0x00	; 0
    2fdc:	08 c0       	rjmp	.+16     	; 0x2fee <vfprintf+0x29e>
    2fde:	f5 01       	movw	r30, r10
    2fe0:	80 81       	ld	r24, Z
    2fe2:	91 81       	ldd	r25, Z+1	; 0x01
    2fe4:	bc 01       	movw	r22, r24
    2fe6:	80 e0       	ldi	r24, 0x00	; 0
    2fe8:	90 e0       	ldi	r25, 0x00	; 0
    2fea:	42 e0       	ldi	r20, 0x02	; 2
    2fec:	50 e0       	ldi	r21, 0x00	; 0
    2fee:	a4 0e       	add	r10, r20
    2ff0:	b5 1e       	adc	r11, r21
    2ff2:	a1 01       	movw	r20, r2
    2ff4:	0e 94 c7 18 	call	0x318e	; 0x318e <__ultoa_invert>
    2ff8:	d8 2e       	mov	r13, r24
    2ffa:	d2 18       	sub	r13, r2
    2ffc:	8f e7       	ldi	r24, 0x7F	; 127
    2ffe:	f8 2e       	mov	r15, r24
    3000:	f1 22       	and	r15, r17
    3002:	f6 fe       	sbrs	r15, 6
    3004:	0b c0       	rjmp	.+22     	; 0x301c <vfprintf+0x2cc>
    3006:	5e ef       	ldi	r21, 0xFE	; 254
    3008:	f5 22       	and	r15, r21
    300a:	d9 14       	cp	r13, r9
    300c:	38 f4       	brcc	.+14     	; 0x301c <vfprintf+0x2cc>
    300e:	f4 fe       	sbrs	r15, 4
    3010:	07 c0       	rjmp	.+14     	; 0x3020 <vfprintf+0x2d0>
    3012:	f2 fc       	sbrc	r15, 2
    3014:	05 c0       	rjmp	.+10     	; 0x3020 <vfprintf+0x2d0>
    3016:	8f ee       	ldi	r24, 0xEF	; 239
    3018:	f8 22       	and	r15, r24
    301a:	02 c0       	rjmp	.+4      	; 0x3020 <vfprintf+0x2d0>
    301c:	1d 2d       	mov	r17, r13
    301e:	01 c0       	rjmp	.+2      	; 0x3022 <vfprintf+0x2d2>
    3020:	19 2d       	mov	r17, r9
    3022:	f4 fe       	sbrs	r15, 4
    3024:	0d c0       	rjmp	.+26     	; 0x3040 <vfprintf+0x2f0>
    3026:	fe 01       	movw	r30, r28
    3028:	ed 0d       	add	r30, r13
    302a:	f1 1d       	adc	r31, r1
    302c:	80 81       	ld	r24, Z
    302e:	80 33       	cpi	r24, 0x30	; 48
    3030:	19 f4       	brne	.+6      	; 0x3038 <vfprintf+0x2e8>
    3032:	99 ee       	ldi	r25, 0xE9	; 233
    3034:	f9 22       	and	r15, r25
    3036:	08 c0       	rjmp	.+16     	; 0x3048 <vfprintf+0x2f8>
    3038:	1f 5f       	subi	r17, 0xFF	; 255
    303a:	f2 fe       	sbrs	r15, 2
    303c:	05 c0       	rjmp	.+10     	; 0x3048 <vfprintf+0x2f8>
    303e:	03 c0       	rjmp	.+6      	; 0x3046 <vfprintf+0x2f6>
    3040:	8f 2d       	mov	r24, r15
    3042:	86 78       	andi	r24, 0x86	; 134
    3044:	09 f0       	breq	.+2      	; 0x3048 <vfprintf+0x2f8>
    3046:	1f 5f       	subi	r17, 0xFF	; 255
    3048:	0f 2d       	mov	r16, r15
    304a:	f3 fc       	sbrc	r15, 3
    304c:	14 c0       	rjmp	.+40     	; 0x3076 <vfprintf+0x326>
    304e:	f0 fe       	sbrs	r15, 0
    3050:	0f c0       	rjmp	.+30     	; 0x3070 <vfprintf+0x320>
    3052:	1e 15       	cp	r17, r14
    3054:	10 f0       	brcs	.+4      	; 0x305a <vfprintf+0x30a>
    3056:	9d 2c       	mov	r9, r13
    3058:	0b c0       	rjmp	.+22     	; 0x3070 <vfprintf+0x320>
    305a:	9d 2c       	mov	r9, r13
    305c:	9e 0c       	add	r9, r14
    305e:	91 1a       	sub	r9, r17
    3060:	1e 2d       	mov	r17, r14
    3062:	06 c0       	rjmp	.+12     	; 0x3070 <vfprintf+0x320>
    3064:	80 e2       	ldi	r24, 0x20	; 32
    3066:	90 e0       	ldi	r25, 0x00	; 0
    3068:	b3 01       	movw	r22, r6
    306a:	0e 94 9b 18 	call	0x3136	; 0x3136 <fputc>
    306e:	1f 5f       	subi	r17, 0xFF	; 255
    3070:	1e 15       	cp	r17, r14
    3072:	c0 f3       	brcs	.-16     	; 0x3064 <vfprintf+0x314>
    3074:	04 c0       	rjmp	.+8      	; 0x307e <vfprintf+0x32e>
    3076:	1e 15       	cp	r17, r14
    3078:	10 f4       	brcc	.+4      	; 0x307e <vfprintf+0x32e>
    307a:	e1 1a       	sub	r14, r17
    307c:	01 c0       	rjmp	.+2      	; 0x3080 <vfprintf+0x330>
    307e:	ee 24       	eor	r14, r14
    3080:	04 ff       	sbrs	r16, 4
    3082:	0f c0       	rjmp	.+30     	; 0x30a2 <vfprintf+0x352>
    3084:	80 e3       	ldi	r24, 0x30	; 48
    3086:	90 e0       	ldi	r25, 0x00	; 0
    3088:	b3 01       	movw	r22, r6
    308a:	0e 94 9b 18 	call	0x3136	; 0x3136 <fputc>
    308e:	02 ff       	sbrs	r16, 2
    3090:	1d c0       	rjmp	.+58     	; 0x30cc <vfprintf+0x37c>
    3092:	01 fd       	sbrc	r16, 1
    3094:	03 c0       	rjmp	.+6      	; 0x309c <vfprintf+0x34c>
    3096:	88 e7       	ldi	r24, 0x78	; 120
    3098:	90 e0       	ldi	r25, 0x00	; 0
    309a:	0e c0       	rjmp	.+28     	; 0x30b8 <vfprintf+0x368>
    309c:	88 e5       	ldi	r24, 0x58	; 88
    309e:	90 e0       	ldi	r25, 0x00	; 0
    30a0:	0b c0       	rjmp	.+22     	; 0x30b8 <vfprintf+0x368>
    30a2:	80 2f       	mov	r24, r16
    30a4:	86 78       	andi	r24, 0x86	; 134
    30a6:	91 f0       	breq	.+36     	; 0x30cc <vfprintf+0x37c>
    30a8:	01 ff       	sbrs	r16, 1
    30aa:	02 c0       	rjmp	.+4      	; 0x30b0 <vfprintf+0x360>
    30ac:	8b e2       	ldi	r24, 0x2B	; 43
    30ae:	01 c0       	rjmp	.+2      	; 0x30b2 <vfprintf+0x362>
    30b0:	80 e2       	ldi	r24, 0x20	; 32
    30b2:	f7 fc       	sbrc	r15, 7
    30b4:	8d e2       	ldi	r24, 0x2D	; 45
    30b6:	90 e0       	ldi	r25, 0x00	; 0
    30b8:	b3 01       	movw	r22, r6
    30ba:	0e 94 9b 18 	call	0x3136	; 0x3136 <fputc>
    30be:	06 c0       	rjmp	.+12     	; 0x30cc <vfprintf+0x37c>
    30c0:	80 e3       	ldi	r24, 0x30	; 48
    30c2:	90 e0       	ldi	r25, 0x00	; 0
    30c4:	b3 01       	movw	r22, r6
    30c6:	0e 94 9b 18 	call	0x3136	; 0x3136 <fputc>
    30ca:	9a 94       	dec	r9
    30cc:	d9 14       	cp	r13, r9
    30ce:	c0 f3       	brcs	.-16     	; 0x30c0 <vfprintf+0x370>
    30d0:	da 94       	dec	r13
    30d2:	f1 01       	movw	r30, r2
    30d4:	ed 0d       	add	r30, r13
    30d6:	f1 1d       	adc	r31, r1
    30d8:	80 81       	ld	r24, Z
    30da:	90 e0       	ldi	r25, 0x00	; 0
    30dc:	b3 01       	movw	r22, r6
    30de:	0e 94 9b 18 	call	0x3136	; 0x3136 <fputc>
    30e2:	dd 20       	and	r13, r13
    30e4:	a9 f7       	brne	.-22     	; 0x30d0 <vfprintf+0x380>
    30e6:	06 c0       	rjmp	.+12     	; 0x30f4 <vfprintf+0x3a4>
    30e8:	80 e2       	ldi	r24, 0x20	; 32
    30ea:	90 e0       	ldi	r25, 0x00	; 0
    30ec:	b3 01       	movw	r22, r6
    30ee:	0e 94 9b 18 	call	0x3136	; 0x3136 <fputc>
    30f2:	ea 94       	dec	r14
    30f4:	ee 20       	and	r14, r14
    30f6:	c1 f7       	brne	.-16     	; 0x30e8 <vfprintf+0x398>
    30f8:	43 ce       	rjmp	.-890    	; 0x2d80 <vfprintf+0x30>
    30fa:	f3 01       	movw	r30, r6
    30fc:	66 81       	ldd	r22, Z+6	; 0x06
    30fe:	77 81       	ldd	r23, Z+7	; 0x07
    3100:	cb 01       	movw	r24, r22
    3102:	2b 96       	adiw	r28, 0x0b	; 11
    3104:	e2 e1       	ldi	r30, 0x12	; 18
    3106:	0c 94 69 16 	jmp	0x2cd2	; 0x2cd2 <__epilogue_restores__>

0000310a <strnlen_P>:
    310a:	fc 01       	movw	r30, r24
    310c:	05 90       	lpm	r0, Z+
    310e:	61 50       	subi	r22, 0x01	; 1
    3110:	70 40       	sbci	r23, 0x00	; 0
    3112:	01 10       	cpse	r0, r1
    3114:	d8 f7       	brcc	.-10     	; 0x310c <strnlen_P+0x2>
    3116:	80 95       	com	r24
    3118:	90 95       	com	r25
    311a:	8e 0f       	add	r24, r30
    311c:	9f 1f       	adc	r25, r31
    311e:	08 95       	ret

00003120 <strnlen>:
    3120:	fc 01       	movw	r30, r24
    3122:	61 50       	subi	r22, 0x01	; 1
    3124:	70 40       	sbci	r23, 0x00	; 0
    3126:	01 90       	ld	r0, Z+
    3128:	01 10       	cpse	r0, r1
    312a:	d8 f7       	brcc	.-10     	; 0x3122 <strnlen+0x2>
    312c:	80 95       	com	r24
    312e:	90 95       	com	r25
    3130:	8e 0f       	add	r24, r30
    3132:	9f 1f       	adc	r25, r31
    3134:	08 95       	ret

00003136 <fputc>:
    3136:	0f 93       	push	r16
    3138:	1f 93       	push	r17
    313a:	cf 93       	push	r28
    313c:	df 93       	push	r29
    313e:	8c 01       	movw	r16, r24
    3140:	eb 01       	movw	r28, r22
    3142:	8b 81       	ldd	r24, Y+3	; 0x03
    3144:	81 ff       	sbrs	r24, 1
    3146:	1b c0       	rjmp	.+54     	; 0x317e <fputc+0x48>
    3148:	82 ff       	sbrs	r24, 2
    314a:	0d c0       	rjmp	.+26     	; 0x3166 <fputc+0x30>
    314c:	2e 81       	ldd	r18, Y+6	; 0x06
    314e:	3f 81       	ldd	r19, Y+7	; 0x07
    3150:	8c 81       	ldd	r24, Y+4	; 0x04
    3152:	9d 81       	ldd	r25, Y+5	; 0x05
    3154:	28 17       	cp	r18, r24
    3156:	39 07       	cpc	r19, r25
    3158:	64 f4       	brge	.+24     	; 0x3172 <fputc+0x3c>
    315a:	e8 81       	ld	r30, Y
    315c:	f9 81       	ldd	r31, Y+1	; 0x01
    315e:	01 93       	st	Z+, r16
    3160:	f9 83       	std	Y+1, r31	; 0x01
    3162:	e8 83       	st	Y, r30
    3164:	06 c0       	rjmp	.+12     	; 0x3172 <fputc+0x3c>
    3166:	e8 85       	ldd	r30, Y+8	; 0x08
    3168:	f9 85       	ldd	r31, Y+9	; 0x09
    316a:	80 2f       	mov	r24, r16
    316c:	09 95       	icall
    316e:	89 2b       	or	r24, r25
    3170:	31 f4       	brne	.+12     	; 0x317e <fputc+0x48>
    3172:	8e 81       	ldd	r24, Y+6	; 0x06
    3174:	9f 81       	ldd	r25, Y+7	; 0x07
    3176:	01 96       	adiw	r24, 0x01	; 1
    3178:	9f 83       	std	Y+7, r25	; 0x07
    317a:	8e 83       	std	Y+6, r24	; 0x06
    317c:	02 c0       	rjmp	.+4      	; 0x3182 <fputc+0x4c>
    317e:	0f ef       	ldi	r16, 0xFF	; 255
    3180:	1f ef       	ldi	r17, 0xFF	; 255
    3182:	c8 01       	movw	r24, r16
    3184:	df 91       	pop	r29
    3186:	cf 91       	pop	r28
    3188:	1f 91       	pop	r17
    318a:	0f 91       	pop	r16
    318c:	08 95       	ret

0000318e <__ultoa_invert>:
    318e:	fa 01       	movw	r30, r20
    3190:	aa 27       	eor	r26, r26
    3192:	28 30       	cpi	r18, 0x08	; 8
    3194:	51 f1       	breq	.+84     	; 0x31ea <__ultoa_invert+0x5c>
    3196:	20 31       	cpi	r18, 0x10	; 16
    3198:	81 f1       	breq	.+96     	; 0x31fa <__ultoa_invert+0x6c>
    319a:	e8 94       	clt
    319c:	6f 93       	push	r22
    319e:	6e 7f       	andi	r22, 0xFE	; 254
    31a0:	6e 5f       	subi	r22, 0xFE	; 254
    31a2:	7f 4f       	sbci	r23, 0xFF	; 255
    31a4:	8f 4f       	sbci	r24, 0xFF	; 255
    31a6:	9f 4f       	sbci	r25, 0xFF	; 255
    31a8:	af 4f       	sbci	r26, 0xFF	; 255
    31aa:	b1 e0       	ldi	r27, 0x01	; 1
    31ac:	3e d0       	rcall	.+124    	; 0x322a <__ultoa_invert+0x9c>
    31ae:	b4 e0       	ldi	r27, 0x04	; 4
    31b0:	3c d0       	rcall	.+120    	; 0x322a <__ultoa_invert+0x9c>
    31b2:	67 0f       	add	r22, r23
    31b4:	78 1f       	adc	r23, r24
    31b6:	89 1f       	adc	r24, r25
    31b8:	9a 1f       	adc	r25, r26
    31ba:	a1 1d       	adc	r26, r1
    31bc:	68 0f       	add	r22, r24
    31be:	79 1f       	adc	r23, r25
    31c0:	8a 1f       	adc	r24, r26
    31c2:	91 1d       	adc	r25, r1
    31c4:	a1 1d       	adc	r26, r1
    31c6:	6a 0f       	add	r22, r26
    31c8:	71 1d       	adc	r23, r1
    31ca:	81 1d       	adc	r24, r1
    31cc:	91 1d       	adc	r25, r1
    31ce:	a1 1d       	adc	r26, r1
    31d0:	20 d0       	rcall	.+64     	; 0x3212 <__ultoa_invert+0x84>
    31d2:	09 f4       	brne	.+2      	; 0x31d6 <__ultoa_invert+0x48>
    31d4:	68 94       	set
    31d6:	3f 91       	pop	r19
    31d8:	2a e0       	ldi	r18, 0x0A	; 10
    31da:	26 9f       	mul	r18, r22
    31dc:	11 24       	eor	r1, r1
    31de:	30 19       	sub	r19, r0
    31e0:	30 5d       	subi	r19, 0xD0	; 208
    31e2:	31 93       	st	Z+, r19
    31e4:	de f6       	brtc	.-74     	; 0x319c <__ultoa_invert+0xe>
    31e6:	cf 01       	movw	r24, r30
    31e8:	08 95       	ret
    31ea:	46 2f       	mov	r20, r22
    31ec:	47 70       	andi	r20, 0x07	; 7
    31ee:	40 5d       	subi	r20, 0xD0	; 208
    31f0:	41 93       	st	Z+, r20
    31f2:	b3 e0       	ldi	r27, 0x03	; 3
    31f4:	0f d0       	rcall	.+30     	; 0x3214 <__ultoa_invert+0x86>
    31f6:	c9 f7       	brne	.-14     	; 0x31ea <__ultoa_invert+0x5c>
    31f8:	f6 cf       	rjmp	.-20     	; 0x31e6 <__ultoa_invert+0x58>
    31fa:	46 2f       	mov	r20, r22
    31fc:	4f 70       	andi	r20, 0x0F	; 15
    31fe:	40 5d       	subi	r20, 0xD0	; 208
    3200:	4a 33       	cpi	r20, 0x3A	; 58
    3202:	18 f0       	brcs	.+6      	; 0x320a <__ultoa_invert+0x7c>
    3204:	49 5d       	subi	r20, 0xD9	; 217
    3206:	31 fd       	sbrc	r19, 1
    3208:	40 52       	subi	r20, 0x20	; 32
    320a:	41 93       	st	Z+, r20
    320c:	02 d0       	rcall	.+4      	; 0x3212 <__ultoa_invert+0x84>
    320e:	a9 f7       	brne	.-22     	; 0x31fa <__ultoa_invert+0x6c>
    3210:	ea cf       	rjmp	.-44     	; 0x31e6 <__ultoa_invert+0x58>
    3212:	b4 e0       	ldi	r27, 0x04	; 4
    3214:	a6 95       	lsr	r26
    3216:	97 95       	ror	r25
    3218:	87 95       	ror	r24
    321a:	77 95       	ror	r23
    321c:	67 95       	ror	r22
    321e:	ba 95       	dec	r27
    3220:	c9 f7       	brne	.-14     	; 0x3214 <__ultoa_invert+0x86>
    3222:	00 97       	sbiw	r24, 0x00	; 0
    3224:	61 05       	cpc	r22, r1
    3226:	71 05       	cpc	r23, r1
    3228:	08 95       	ret
    322a:	9b 01       	movw	r18, r22
    322c:	ac 01       	movw	r20, r24
    322e:	0a 2e       	mov	r0, r26
    3230:	06 94       	lsr	r0
    3232:	57 95       	ror	r21
    3234:	47 95       	ror	r20
    3236:	37 95       	ror	r19
    3238:	27 95       	ror	r18
    323a:	ba 95       	dec	r27
    323c:	c9 f7       	brne	.-14     	; 0x3230 <__ultoa_invert+0xa2>
    323e:	62 0f       	add	r22, r18
    3240:	73 1f       	adc	r23, r19
    3242:	84 1f       	adc	r24, r20
    3244:	95 1f       	adc	r25, r21
    3246:	a0 1d       	adc	r26, r0
    3248:	08 95       	ret

0000324a <_exit>:
    324a:	f8 94       	cli

0000324c <__stop_program>:
    324c:	ff cf       	rjmp	.-2      	; 0x324c <__stop_program>
