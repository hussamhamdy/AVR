
LCD_TRY.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002602  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00002602  00002696  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800078  00800078  000026ae  2**0
                  ALLOC
  3 .stab         00001eb4  00000000  00000000  000026b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000efa  00000000  00000000  00004564  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000545e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000559e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000570e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007357  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008242  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008ff0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009150  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000093dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009bab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 0e 06 	jmp	0xc1c	; 0xc1c <__vector_1>
       8:	0c 94 3b 06 	jmp	0xc76	; 0xc76 <__vector_2>
       c:	0c 94 68 06 	jmp	0xcd0	; 0xcd0 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e0       	ldi	r30, 0x02	; 2
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 37       	cpi	r26, 0x7E	; 126
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b6 12 	call	0x256c	; 0x256c <main>
      8a:	0c 94 ff 12 	jmp	0x25fe	; 0x25fe <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c8 12 	jmp	0x2590	; 0x2590 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e4 12 	jmp	0x25c8	; 0x25c8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d4 12 	jmp	0x25a8	; 0x25a8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f0 12 	jmp	0x25e0	; 0x25e0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d4 12 	jmp	0x25a8	; 0x25a8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f0 12 	jmp	0x25e0	; 0x25e0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c8 12 	jmp	0x2590	; 0x2590 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e4 12 	jmp	0x25c8	; 0x25c8 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d4 12 	jmp	0x25a8	; 0x25a8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 f0 12 	jmp	0x25e0	; 0x25e0 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 d4 12 	jmp	0x25a8	; 0x25a8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 f0 12 	jmp	0x25e0	; 0x25e0 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 d4 12 	jmp	0x25a8	; 0x25a8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 f0 12 	jmp	0x25e0	; 0x25e0 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 d8 12 	jmp	0x25b0	; 0x25b0 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 f4 12 	jmp	0x25e8	; 0x25e8 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <EXTI_voidInit>:
void (* Global_CBINT2)(void);



	void EXTI_voidInit(u8 copy_u8IntNum , void (* copy_CB)(void))
	{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <EXTI_voidInit+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <EXTI_voidInit+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	7b 83       	std	Y+3, r23	; 0x03
     b58:	6a 83       	std	Y+2, r22	; 0x02
		SET_BIT(SREG , GI);
     b5a:	af e5       	ldi	r26, 0x5F	; 95
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	ef e5       	ldi	r30, 0x5F	; 95
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	80 81       	ld	r24, Z
     b64:	80 68       	ori	r24, 0x80	; 128
     b66:	8c 93       	st	X, r24
		
		switch (copy_u8IntNum) 
     b68:	89 81       	ldd	r24, Y+1	; 0x01
     b6a:	28 2f       	mov	r18, r24
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	3d 83       	std	Y+5, r19	; 0x05
     b70:	2c 83       	std	Y+4, r18	; 0x04
     b72:	8c 81       	ldd	r24, Y+4	; 0x04
     b74:	9d 81       	ldd	r25, Y+5	; 0x05
     b76:	81 30       	cpi	r24, 0x01	; 1
     b78:	91 05       	cpc	r25, r1
     b7a:	f9 f0       	breq	.+62     	; 0xbba <EXTI_voidInit+0x74>
     b7c:	2c 81       	ldd	r18, Y+4	; 0x04
     b7e:	3d 81       	ldd	r19, Y+5	; 0x05
     b80:	22 30       	cpi	r18, 0x02	; 2
     b82:	31 05       	cpc	r19, r1
     b84:	79 f1       	breq	.+94     	; 0xbe4 <EXTI_voidInit+0x9e>
     b86:	8c 81       	ldd	r24, Y+4	; 0x04
     b88:	9d 81       	ldd	r25, Y+5	; 0x05
     b8a:	00 97       	sbiw	r24, 0x00	; 0
     b8c:	09 f0       	breq	.+2      	; 0xb90 <EXTI_voidInit+0x4a>
     b8e:	3e c0       	rjmp	.+124    	; 0xc0c <EXTI_voidInit+0xc6>
		{
			case EXTI_INT0 :
			SET_BIT (GICR , INT0 );
     b90:	ab e5       	ldi	r26, 0x5B	; 91
     b92:	b0 e0       	ldi	r27, 0x00	; 0
     b94:	eb e5       	ldi	r30, 0x5B	; 91
     b96:	f0 e0       	ldi	r31, 0x00	; 0
     b98:	80 81       	ld	r24, Z
     b9a:	80 64       	ori	r24, 0x40	; 64
     b9c:	8c 93       	st	X, r24
			CLEAR_BIT(DDRD , 2 );
     b9e:	a1 e3       	ldi	r26, 0x31	; 49
     ba0:	b0 e0       	ldi	r27, 0x00	; 0
     ba2:	e1 e3       	ldi	r30, 0x31	; 49
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	80 81       	ld	r24, Z
     ba8:	8b 7f       	andi	r24, 0xFB	; 251
     baa:	8c 93       	st	X, r24
			Global_CBINT0 = copy_CB ;
     bac:	8a 81       	ldd	r24, Y+2	; 0x02
     bae:	9b 81       	ldd	r25, Y+3	; 0x03
     bb0:	90 93 7b 00 	sts	0x007B, r25
     bb4:	80 93 7a 00 	sts	0x007A, r24
     bb8:	29 c0       	rjmp	.+82     	; 0xc0c <EXTI_voidInit+0xc6>
			break ; 
			
			case EXTI_INT1 :
			SET_BIT (GICR , INT1 );
     bba:	ab e5       	ldi	r26, 0x5B	; 91
     bbc:	b0 e0       	ldi	r27, 0x00	; 0
     bbe:	eb e5       	ldi	r30, 0x5B	; 91
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	80 81       	ld	r24, Z
     bc4:	80 68       	ori	r24, 0x80	; 128
     bc6:	8c 93       	st	X, r24
			CLEAR_BIT(DDRD , 3 );
     bc8:	a1 e3       	ldi	r26, 0x31	; 49
     bca:	b0 e0       	ldi	r27, 0x00	; 0
     bcc:	e1 e3       	ldi	r30, 0x31	; 49
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	80 81       	ld	r24, Z
     bd2:	87 7f       	andi	r24, 0xF7	; 247
     bd4:	8c 93       	st	X, r24
			Global_CBINT1 = copy_CB ;
     bd6:	8a 81       	ldd	r24, Y+2	; 0x02
     bd8:	9b 81       	ldd	r25, Y+3	; 0x03
     bda:	90 93 7d 00 	sts	0x007D, r25
     bde:	80 93 7c 00 	sts	0x007C, r24
     be2:	14 c0       	rjmp	.+40     	; 0xc0c <EXTI_voidInit+0xc6>
			break ; 
			
			case EXTI_INT2 :
			SET_BIT (GICR , INT2 );
     be4:	ab e5       	ldi	r26, 0x5B	; 91
     be6:	b0 e0       	ldi	r27, 0x00	; 0
     be8:	eb e5       	ldi	r30, 0x5B	; 91
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	80 81       	ld	r24, Z
     bee:	80 62       	ori	r24, 0x20	; 32
     bf0:	8c 93       	st	X, r24
			CLEAR_BIT(DDRB , 2 );
     bf2:	a7 e3       	ldi	r26, 0x37	; 55
     bf4:	b0 e0       	ldi	r27, 0x00	; 0
     bf6:	e7 e3       	ldi	r30, 0x37	; 55
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	80 81       	ld	r24, Z
     bfc:	8b 7f       	andi	r24, 0xFB	; 251
     bfe:	8c 93       	st	X, r24
			Global_CBINT2 = copy_CB ;
     c00:	8a 81       	ldd	r24, Y+2	; 0x02
     c02:	9b 81       	ldd	r25, Y+3	; 0x03
     c04:	90 93 79 00 	sts	0x0079, r25
     c08:	80 93 78 00 	sts	0x0078, r24
			
			default :
			break ;
			
		}
	}
     c0c:	0f 90       	pop	r0
     c0e:	0f 90       	pop	r0
     c10:	0f 90       	pop	r0
     c12:	0f 90       	pop	r0
     c14:	0f 90       	pop	r0
     c16:	cf 91       	pop	r28
     c18:	df 91       	pop	r29
     c1a:	08 95       	ret

00000c1c <__vector_1>:
	ISR(INT0_vect)
	{
     c1c:	1f 92       	push	r1
     c1e:	0f 92       	push	r0
     c20:	0f b6       	in	r0, 0x3f	; 63
     c22:	0f 92       	push	r0
     c24:	11 24       	eor	r1, r1
     c26:	2f 93       	push	r18
     c28:	3f 93       	push	r19
     c2a:	4f 93       	push	r20
     c2c:	5f 93       	push	r21
     c2e:	6f 93       	push	r22
     c30:	7f 93       	push	r23
     c32:	8f 93       	push	r24
     c34:	9f 93       	push	r25
     c36:	af 93       	push	r26
     c38:	bf 93       	push	r27
     c3a:	ef 93       	push	r30
     c3c:	ff 93       	push	r31
     c3e:	df 93       	push	r29
     c40:	cf 93       	push	r28
     c42:	cd b7       	in	r28, 0x3d	; 61
     c44:	de b7       	in	r29, 0x3e	; 62
		(*Global_CBINT0)();
     c46:	e0 91 7a 00 	lds	r30, 0x007A
     c4a:	f0 91 7b 00 	lds	r31, 0x007B
     c4e:	09 95       	icall
	}
     c50:	cf 91       	pop	r28
     c52:	df 91       	pop	r29
     c54:	ff 91       	pop	r31
     c56:	ef 91       	pop	r30
     c58:	bf 91       	pop	r27
     c5a:	af 91       	pop	r26
     c5c:	9f 91       	pop	r25
     c5e:	8f 91       	pop	r24
     c60:	7f 91       	pop	r23
     c62:	6f 91       	pop	r22
     c64:	5f 91       	pop	r21
     c66:	4f 91       	pop	r20
     c68:	3f 91       	pop	r19
     c6a:	2f 91       	pop	r18
     c6c:	0f 90       	pop	r0
     c6e:	0f be       	out	0x3f, r0	; 63
     c70:	0f 90       	pop	r0
     c72:	1f 90       	pop	r1
     c74:	18 95       	reti

00000c76 <__vector_2>:
	ISR(INT1_vect)
	{
     c76:	1f 92       	push	r1
     c78:	0f 92       	push	r0
     c7a:	0f b6       	in	r0, 0x3f	; 63
     c7c:	0f 92       	push	r0
     c7e:	11 24       	eor	r1, r1
     c80:	2f 93       	push	r18
     c82:	3f 93       	push	r19
     c84:	4f 93       	push	r20
     c86:	5f 93       	push	r21
     c88:	6f 93       	push	r22
     c8a:	7f 93       	push	r23
     c8c:	8f 93       	push	r24
     c8e:	9f 93       	push	r25
     c90:	af 93       	push	r26
     c92:	bf 93       	push	r27
     c94:	ef 93       	push	r30
     c96:	ff 93       	push	r31
     c98:	df 93       	push	r29
     c9a:	cf 93       	push	r28
     c9c:	cd b7       	in	r28, 0x3d	; 61
     c9e:	de b7       	in	r29, 0x3e	; 62
		(*Global_CBINT1)();
     ca0:	e0 91 7c 00 	lds	r30, 0x007C
     ca4:	f0 91 7d 00 	lds	r31, 0x007D
     ca8:	09 95       	icall
	}
     caa:	cf 91       	pop	r28
     cac:	df 91       	pop	r29
     cae:	ff 91       	pop	r31
     cb0:	ef 91       	pop	r30
     cb2:	bf 91       	pop	r27
     cb4:	af 91       	pop	r26
     cb6:	9f 91       	pop	r25
     cb8:	8f 91       	pop	r24
     cba:	7f 91       	pop	r23
     cbc:	6f 91       	pop	r22
     cbe:	5f 91       	pop	r21
     cc0:	4f 91       	pop	r20
     cc2:	3f 91       	pop	r19
     cc4:	2f 91       	pop	r18
     cc6:	0f 90       	pop	r0
     cc8:	0f be       	out	0x3f, r0	; 63
     cca:	0f 90       	pop	r0
     ccc:	1f 90       	pop	r1
     cce:	18 95       	reti

00000cd0 <__vector_3>:
	ISR(INT2_vect)
	{
     cd0:	1f 92       	push	r1
     cd2:	0f 92       	push	r0
     cd4:	0f b6       	in	r0, 0x3f	; 63
     cd6:	0f 92       	push	r0
     cd8:	11 24       	eor	r1, r1
     cda:	2f 93       	push	r18
     cdc:	3f 93       	push	r19
     cde:	4f 93       	push	r20
     ce0:	5f 93       	push	r21
     ce2:	6f 93       	push	r22
     ce4:	7f 93       	push	r23
     ce6:	8f 93       	push	r24
     ce8:	9f 93       	push	r25
     cea:	af 93       	push	r26
     cec:	bf 93       	push	r27
     cee:	ef 93       	push	r30
     cf0:	ff 93       	push	r31
     cf2:	df 93       	push	r29
     cf4:	cf 93       	push	r28
     cf6:	cd b7       	in	r28, 0x3d	; 61
     cf8:	de b7       	in	r29, 0x3e	; 62
		(*Global_CBINT2)();
     cfa:	e0 91 78 00 	lds	r30, 0x0078
     cfe:	f0 91 79 00 	lds	r31, 0x0079
     d02:	09 95       	icall
	}
     d04:	cf 91       	pop	r28
     d06:	df 91       	pop	r29
     d08:	ff 91       	pop	r31
     d0a:	ef 91       	pop	r30
     d0c:	bf 91       	pop	r27
     d0e:	af 91       	pop	r26
     d10:	9f 91       	pop	r25
     d12:	8f 91       	pop	r24
     d14:	7f 91       	pop	r23
     d16:	6f 91       	pop	r22
     d18:	5f 91       	pop	r21
     d1a:	4f 91       	pop	r20
     d1c:	3f 91       	pop	r19
     d1e:	2f 91       	pop	r18
     d20:	0f 90       	pop	r0
     d22:	0f be       	out	0x3f, r0	; 63
     d24:	0f 90       	pop	r0
     d26:	1f 90       	pop	r1
     d28:	18 95       	reti

00000d2a <GPIO_voidSetPinDDR>:




	void GPIO_voidSetPinDDR (u8  copy_u8Port ,u8 copy_u8Pin , u8 copy_u8Mode )
	{
     d2a:	df 93       	push	r29
     d2c:	cf 93       	push	r28
     d2e:	00 d0       	rcall	.+0      	; 0xd30 <GPIO_voidSetPinDDR+0x6>
     d30:	00 d0       	rcall	.+0      	; 0xd32 <GPIO_voidSetPinDDR+0x8>
     d32:	0f 92       	push	r0
     d34:	cd b7       	in	r28, 0x3d	; 61
     d36:	de b7       	in	r29, 0x3e	; 62
     d38:	89 83       	std	Y+1, r24	; 0x01
     d3a:	6a 83       	std	Y+2, r22	; 0x02
     d3c:	4b 83       	std	Y+3, r20	; 0x03
		switch(copy_u8Port)
     d3e:	89 81       	ldd	r24, Y+1	; 0x01
     d40:	28 2f       	mov	r18, r24
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	3d 83       	std	Y+5, r19	; 0x05
     d46:	2c 83       	std	Y+4, r18	; 0x04
     d48:	8c 81       	ldd	r24, Y+4	; 0x04
     d4a:	9d 81       	ldd	r25, Y+5	; 0x05
     d4c:	81 30       	cpi	r24, 0x01	; 1
     d4e:	91 05       	cpc	r25, r1
     d50:	09 f4       	brne	.+2      	; 0xd54 <GPIO_voidSetPinDDR+0x2a>
     d52:	43 c0       	rjmp	.+134    	; 0xdda <GPIO_voidSetPinDDR+0xb0>
     d54:	2c 81       	ldd	r18, Y+4	; 0x04
     d56:	3d 81       	ldd	r19, Y+5	; 0x05
     d58:	22 30       	cpi	r18, 0x02	; 2
     d5a:	31 05       	cpc	r19, r1
     d5c:	2c f4       	brge	.+10     	; 0xd68 <GPIO_voidSetPinDDR+0x3e>
     d5e:	8c 81       	ldd	r24, Y+4	; 0x04
     d60:	9d 81       	ldd	r25, Y+5	; 0x05
     d62:	00 97       	sbiw	r24, 0x00	; 0
     d64:	71 f0       	breq	.+28     	; 0xd82 <GPIO_voidSetPinDDR+0x58>
     d66:	bc c0       	rjmp	.+376    	; 0xee0 <GPIO_voidSetPinDDR+0x1b6>
     d68:	2c 81       	ldd	r18, Y+4	; 0x04
     d6a:	3d 81       	ldd	r19, Y+5	; 0x05
     d6c:	22 30       	cpi	r18, 0x02	; 2
     d6e:	31 05       	cpc	r19, r1
     d70:	09 f4       	brne	.+2      	; 0xd74 <GPIO_voidSetPinDDR+0x4a>
     d72:	5f c0       	rjmp	.+190    	; 0xe32 <GPIO_voidSetPinDDR+0x108>
     d74:	8c 81       	ldd	r24, Y+4	; 0x04
     d76:	9d 81       	ldd	r25, Y+5	; 0x05
     d78:	83 30       	cpi	r24, 0x03	; 3
     d7a:	91 05       	cpc	r25, r1
     d7c:	09 f4       	brne	.+2      	; 0xd80 <GPIO_voidSetPinDDR+0x56>
     d7e:	85 c0       	rjmp	.+266    	; 0xe8a <GPIO_voidSetPinDDR+0x160>
     d80:	af c0       	rjmp	.+350    	; 0xee0 <GPIO_voidSetPinDDR+0x1b6>
		{
			case GPIOA :
				if(copy_u8Mode ==OUTPUT )
     d82:	8b 81       	ldd	r24, Y+3	; 0x03
     d84:	81 30       	cpi	r24, 0x01	; 1
     d86:	a1 f4       	brne	.+40     	; 0xdb0 <GPIO_voidSetPinDDR+0x86>
				{
					SET_BIT(DDRA ,copy_u8Pin);
     d88:	aa e3       	ldi	r26, 0x3A	; 58
     d8a:	b0 e0       	ldi	r27, 0x00	; 0
     d8c:	ea e3       	ldi	r30, 0x3A	; 58
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	80 81       	ld	r24, Z
     d92:	48 2f       	mov	r20, r24
     d94:	8a 81       	ldd	r24, Y+2	; 0x02
     d96:	28 2f       	mov	r18, r24
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	02 2e       	mov	r0, r18
     da0:	02 c0       	rjmp	.+4      	; 0xda6 <GPIO_voidSetPinDDR+0x7c>
     da2:	88 0f       	add	r24, r24
     da4:	99 1f       	adc	r25, r25
     da6:	0a 94       	dec	r0
     da8:	e2 f7       	brpl	.-8      	; 0xda2 <GPIO_voidSetPinDDR+0x78>
     daa:	84 2b       	or	r24, r20
     dac:	8c 93       	st	X, r24
     dae:	98 c0       	rjmp	.+304    	; 0xee0 <GPIO_voidSetPinDDR+0x1b6>
				}
				else {
					CLEAR_BIT(DDRA,copy_u8Pin);
     db0:	aa e3       	ldi	r26, 0x3A	; 58
     db2:	b0 e0       	ldi	r27, 0x00	; 0
     db4:	ea e3       	ldi	r30, 0x3A	; 58
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	80 81       	ld	r24, Z
     dba:	48 2f       	mov	r20, r24
     dbc:	8a 81       	ldd	r24, Y+2	; 0x02
     dbe:	28 2f       	mov	r18, r24
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	02 2e       	mov	r0, r18
     dc8:	02 c0       	rjmp	.+4      	; 0xdce <GPIO_voidSetPinDDR+0xa4>
     dca:	88 0f       	add	r24, r24
     dcc:	99 1f       	adc	r25, r25
     dce:	0a 94       	dec	r0
     dd0:	e2 f7       	brpl	.-8      	; 0xdca <GPIO_voidSetPinDDR+0xa0>
     dd2:	80 95       	com	r24
     dd4:	84 23       	and	r24, r20
     dd6:	8c 93       	st	X, r24
     dd8:	83 c0       	rjmp	.+262    	; 0xee0 <GPIO_voidSetPinDDR+0x1b6>
				}
				break;
			case GPIOB :
				if(copy_u8Mode ==OUTPUT )
     dda:	8b 81       	ldd	r24, Y+3	; 0x03
     ddc:	81 30       	cpi	r24, 0x01	; 1
     dde:	a1 f4       	brne	.+40     	; 0xe08 <GPIO_voidSetPinDDR+0xde>
				{
					SET_BIT(DDRB ,copy_u8Pin);
     de0:	a7 e3       	ldi	r26, 0x37	; 55
     de2:	b0 e0       	ldi	r27, 0x00	; 0
     de4:	e7 e3       	ldi	r30, 0x37	; 55
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	80 81       	ld	r24, Z
     dea:	48 2f       	mov	r20, r24
     dec:	8a 81       	ldd	r24, Y+2	; 0x02
     dee:	28 2f       	mov	r18, r24
     df0:	30 e0       	ldi	r19, 0x00	; 0
     df2:	81 e0       	ldi	r24, 0x01	; 1
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	02 2e       	mov	r0, r18
     df8:	02 c0       	rjmp	.+4      	; 0xdfe <GPIO_voidSetPinDDR+0xd4>
     dfa:	88 0f       	add	r24, r24
     dfc:	99 1f       	adc	r25, r25
     dfe:	0a 94       	dec	r0
     e00:	e2 f7       	brpl	.-8      	; 0xdfa <GPIO_voidSetPinDDR+0xd0>
     e02:	84 2b       	or	r24, r20
     e04:	8c 93       	st	X, r24
     e06:	6c c0       	rjmp	.+216    	; 0xee0 <GPIO_voidSetPinDDR+0x1b6>
				}
				else {
					CLEAR_BIT(DDRB,copy_u8Pin);
     e08:	a7 e3       	ldi	r26, 0x37	; 55
     e0a:	b0 e0       	ldi	r27, 0x00	; 0
     e0c:	e7 e3       	ldi	r30, 0x37	; 55
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	80 81       	ld	r24, Z
     e12:	48 2f       	mov	r20, r24
     e14:	8a 81       	ldd	r24, Y+2	; 0x02
     e16:	28 2f       	mov	r18, r24
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	02 2e       	mov	r0, r18
     e20:	02 c0       	rjmp	.+4      	; 0xe26 <GPIO_voidSetPinDDR+0xfc>
     e22:	88 0f       	add	r24, r24
     e24:	99 1f       	adc	r25, r25
     e26:	0a 94       	dec	r0
     e28:	e2 f7       	brpl	.-8      	; 0xe22 <GPIO_voidSetPinDDR+0xf8>
     e2a:	80 95       	com	r24
     e2c:	84 23       	and	r24, r20
     e2e:	8c 93       	st	X, r24
     e30:	57 c0       	rjmp	.+174    	; 0xee0 <GPIO_voidSetPinDDR+0x1b6>
				}
				break;
			case GPIOC :
				if(copy_u8Mode ==OUTPUT )
     e32:	8b 81       	ldd	r24, Y+3	; 0x03
     e34:	81 30       	cpi	r24, 0x01	; 1
     e36:	a1 f4       	brne	.+40     	; 0xe60 <GPIO_voidSetPinDDR+0x136>
				{
					SET_BIT(DDRC ,copy_u8Pin);
     e38:	a4 e3       	ldi	r26, 0x34	; 52
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	e4 e3       	ldi	r30, 0x34	; 52
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 81       	ld	r24, Z
     e42:	48 2f       	mov	r20, r24
     e44:	8a 81       	ldd	r24, Y+2	; 0x02
     e46:	28 2f       	mov	r18, r24
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	02 2e       	mov	r0, r18
     e50:	02 c0       	rjmp	.+4      	; 0xe56 <GPIO_voidSetPinDDR+0x12c>
     e52:	88 0f       	add	r24, r24
     e54:	99 1f       	adc	r25, r25
     e56:	0a 94       	dec	r0
     e58:	e2 f7       	brpl	.-8      	; 0xe52 <GPIO_voidSetPinDDR+0x128>
     e5a:	84 2b       	or	r24, r20
     e5c:	8c 93       	st	X, r24
     e5e:	40 c0       	rjmp	.+128    	; 0xee0 <GPIO_voidSetPinDDR+0x1b6>
				}
				else {
					CLEAR_BIT(DDRC,copy_u8Pin);
     e60:	a4 e3       	ldi	r26, 0x34	; 52
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	e4 e3       	ldi	r30, 0x34	; 52
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	48 2f       	mov	r20, r24
     e6c:	8a 81       	ldd	r24, Y+2	; 0x02
     e6e:	28 2f       	mov	r18, r24
     e70:	30 e0       	ldi	r19, 0x00	; 0
     e72:	81 e0       	ldi	r24, 0x01	; 1
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	02 2e       	mov	r0, r18
     e78:	02 c0       	rjmp	.+4      	; 0xe7e <GPIO_voidSetPinDDR+0x154>
     e7a:	88 0f       	add	r24, r24
     e7c:	99 1f       	adc	r25, r25
     e7e:	0a 94       	dec	r0
     e80:	e2 f7       	brpl	.-8      	; 0xe7a <GPIO_voidSetPinDDR+0x150>
     e82:	80 95       	com	r24
     e84:	84 23       	and	r24, r20
     e86:	8c 93       	st	X, r24
     e88:	2b c0       	rjmp	.+86     	; 0xee0 <GPIO_voidSetPinDDR+0x1b6>
				}
				break;
			case GPIOD :
				if(copy_u8Mode ==OUTPUT )
     e8a:	8b 81       	ldd	r24, Y+3	; 0x03
     e8c:	81 30       	cpi	r24, 0x01	; 1
     e8e:	a1 f4       	brne	.+40     	; 0xeb8 <GPIO_voidSetPinDDR+0x18e>
				{
					SET_BIT(DDRD ,copy_u8Pin);
     e90:	a1 e3       	ldi	r26, 0x31	; 49
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	e1 e3       	ldi	r30, 0x31	; 49
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	48 2f       	mov	r20, r24
     e9c:	8a 81       	ldd	r24, Y+2	; 0x02
     e9e:	28 2f       	mov	r18, r24
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	02 2e       	mov	r0, r18
     ea8:	02 c0       	rjmp	.+4      	; 0xeae <GPIO_voidSetPinDDR+0x184>
     eaa:	88 0f       	add	r24, r24
     eac:	99 1f       	adc	r25, r25
     eae:	0a 94       	dec	r0
     eb0:	e2 f7       	brpl	.-8      	; 0xeaa <GPIO_voidSetPinDDR+0x180>
     eb2:	84 2b       	or	r24, r20
     eb4:	8c 93       	st	X, r24
     eb6:	14 c0       	rjmp	.+40     	; 0xee0 <GPIO_voidSetPinDDR+0x1b6>
				}
				else {
					CLEAR_BIT(DDRD,copy_u8Pin);
     eb8:	a1 e3       	ldi	r26, 0x31	; 49
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	e1 e3       	ldi	r30, 0x31	; 49
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	48 2f       	mov	r20, r24
     ec4:	8a 81       	ldd	r24, Y+2	; 0x02
     ec6:	28 2f       	mov	r18, r24
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	02 2e       	mov	r0, r18
     ed0:	02 c0       	rjmp	.+4      	; 0xed6 <GPIO_voidSetPinDDR+0x1ac>
     ed2:	88 0f       	add	r24, r24
     ed4:	99 1f       	adc	r25, r25
     ed6:	0a 94       	dec	r0
     ed8:	e2 f7       	brpl	.-8      	; 0xed2 <GPIO_voidSetPinDDR+0x1a8>
     eda:	80 95       	com	r24
     edc:	84 23       	and	r24, r20
     ede:	8c 93       	st	X, r24
				}
				break;	
			default:
				break;
		}
	}
     ee0:	0f 90       	pop	r0
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	cf 91       	pop	r28
     eec:	df 91       	pop	r29
     eee:	08 95       	ret

00000ef0 <GPIO_voidWritePin>:
	
	void GPIO_voidWritePin (u8  copy_u8Port ,u8 copy_u8Pin , u8 copy_u8Value )
	{
     ef0:	df 93       	push	r29
     ef2:	cf 93       	push	r28
     ef4:	00 d0       	rcall	.+0      	; 0xef6 <GPIO_voidWritePin+0x6>
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <GPIO_voidWritePin+0x8>
     ef8:	0f 92       	push	r0
     efa:	cd b7       	in	r28, 0x3d	; 61
     efc:	de b7       	in	r29, 0x3e	; 62
     efe:	89 83       	std	Y+1, r24	; 0x01
     f00:	6a 83       	std	Y+2, r22	; 0x02
     f02:	4b 83       	std	Y+3, r20	; 0x03
		switch(copy_u8Port)
     f04:	89 81       	ldd	r24, Y+1	; 0x01
     f06:	28 2f       	mov	r18, r24
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	3d 83       	std	Y+5, r19	; 0x05
     f0c:	2c 83       	std	Y+4, r18	; 0x04
     f0e:	8c 81       	ldd	r24, Y+4	; 0x04
     f10:	9d 81       	ldd	r25, Y+5	; 0x05
     f12:	81 30       	cpi	r24, 0x01	; 1
     f14:	91 05       	cpc	r25, r1
     f16:	09 f4       	brne	.+2      	; 0xf1a <GPIO_voidWritePin+0x2a>
     f18:	43 c0       	rjmp	.+134    	; 0xfa0 <GPIO_voidWritePin+0xb0>
     f1a:	2c 81       	ldd	r18, Y+4	; 0x04
     f1c:	3d 81       	ldd	r19, Y+5	; 0x05
     f1e:	22 30       	cpi	r18, 0x02	; 2
     f20:	31 05       	cpc	r19, r1
     f22:	2c f4       	brge	.+10     	; 0xf2e <GPIO_voidWritePin+0x3e>
     f24:	8c 81       	ldd	r24, Y+4	; 0x04
     f26:	9d 81       	ldd	r25, Y+5	; 0x05
     f28:	00 97       	sbiw	r24, 0x00	; 0
     f2a:	71 f0       	breq	.+28     	; 0xf48 <GPIO_voidWritePin+0x58>
     f2c:	bc c0       	rjmp	.+376    	; 0x10a6 <GPIO_voidWritePin+0x1b6>
     f2e:	2c 81       	ldd	r18, Y+4	; 0x04
     f30:	3d 81       	ldd	r19, Y+5	; 0x05
     f32:	22 30       	cpi	r18, 0x02	; 2
     f34:	31 05       	cpc	r19, r1
     f36:	09 f4       	brne	.+2      	; 0xf3a <GPIO_voidWritePin+0x4a>
     f38:	5f c0       	rjmp	.+190    	; 0xff8 <GPIO_voidWritePin+0x108>
     f3a:	8c 81       	ldd	r24, Y+4	; 0x04
     f3c:	9d 81       	ldd	r25, Y+5	; 0x05
     f3e:	83 30       	cpi	r24, 0x03	; 3
     f40:	91 05       	cpc	r25, r1
     f42:	09 f4       	brne	.+2      	; 0xf46 <GPIO_voidWritePin+0x56>
     f44:	85 c0       	rjmp	.+266    	; 0x1050 <GPIO_voidWritePin+0x160>
     f46:	af c0       	rjmp	.+350    	; 0x10a6 <GPIO_voidWritePin+0x1b6>
		{
			case GPIOA :
				if(copy_u8Value ==HIGH )
     f48:	8b 81       	ldd	r24, Y+3	; 0x03
     f4a:	81 30       	cpi	r24, 0x01	; 1
     f4c:	a1 f4       	brne	.+40     	; 0xf76 <GPIO_voidWritePin+0x86>
				{
					SET_BIT(PORTA ,copy_u8Pin);
     f4e:	ab e3       	ldi	r26, 0x3B	; 59
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	eb e3       	ldi	r30, 0x3B	; 59
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	48 2f       	mov	r20, r24
     f5a:	8a 81       	ldd	r24, Y+2	; 0x02
     f5c:	28 2f       	mov	r18, r24
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	02 2e       	mov	r0, r18
     f66:	02 c0       	rjmp	.+4      	; 0xf6c <GPIO_voidWritePin+0x7c>
     f68:	88 0f       	add	r24, r24
     f6a:	99 1f       	adc	r25, r25
     f6c:	0a 94       	dec	r0
     f6e:	e2 f7       	brpl	.-8      	; 0xf68 <GPIO_voidWritePin+0x78>
     f70:	84 2b       	or	r24, r20
     f72:	8c 93       	st	X, r24
     f74:	98 c0       	rjmp	.+304    	; 0x10a6 <GPIO_voidWritePin+0x1b6>
				}
				else {
					CLEAR_BIT(PORTA,copy_u8Pin);
     f76:	ab e3       	ldi	r26, 0x3B	; 59
     f78:	b0 e0       	ldi	r27, 0x00	; 0
     f7a:	eb e3       	ldi	r30, 0x3B	; 59
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	48 2f       	mov	r20, r24
     f82:	8a 81       	ldd	r24, Y+2	; 0x02
     f84:	28 2f       	mov	r18, r24
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	02 2e       	mov	r0, r18
     f8e:	02 c0       	rjmp	.+4      	; 0xf94 <GPIO_voidWritePin+0xa4>
     f90:	88 0f       	add	r24, r24
     f92:	99 1f       	adc	r25, r25
     f94:	0a 94       	dec	r0
     f96:	e2 f7       	brpl	.-8      	; 0xf90 <GPIO_voidWritePin+0xa0>
     f98:	80 95       	com	r24
     f9a:	84 23       	and	r24, r20
     f9c:	8c 93       	st	X, r24
     f9e:	83 c0       	rjmp	.+262    	; 0x10a6 <GPIO_voidWritePin+0x1b6>
				}
				break;
			case GPIOB :
				if(copy_u8Value ==HIGH )
     fa0:	8b 81       	ldd	r24, Y+3	; 0x03
     fa2:	81 30       	cpi	r24, 0x01	; 1
     fa4:	a1 f4       	brne	.+40     	; 0xfce <GPIO_voidWritePin+0xde>
				{
					SET_BIT(PORTB ,copy_u8Pin);
     fa6:	a8 e3       	ldi	r26, 0x38	; 56
     fa8:	b0 e0       	ldi	r27, 0x00	; 0
     faa:	e8 e3       	ldi	r30, 0x38	; 56
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	48 2f       	mov	r20, r24
     fb2:	8a 81       	ldd	r24, Y+2	; 0x02
     fb4:	28 2f       	mov	r18, r24
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	02 2e       	mov	r0, r18
     fbe:	02 c0       	rjmp	.+4      	; 0xfc4 <GPIO_voidWritePin+0xd4>
     fc0:	88 0f       	add	r24, r24
     fc2:	99 1f       	adc	r25, r25
     fc4:	0a 94       	dec	r0
     fc6:	e2 f7       	brpl	.-8      	; 0xfc0 <GPIO_voidWritePin+0xd0>
     fc8:	84 2b       	or	r24, r20
     fca:	8c 93       	st	X, r24
     fcc:	6c c0       	rjmp	.+216    	; 0x10a6 <GPIO_voidWritePin+0x1b6>
				}
				else {
					CLEAR_BIT(PORTB,copy_u8Pin);
     fce:	a8 e3       	ldi	r26, 0x38	; 56
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	e8 e3       	ldi	r30, 0x38	; 56
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	48 2f       	mov	r20, r24
     fda:	8a 81       	ldd	r24, Y+2	; 0x02
     fdc:	28 2f       	mov	r18, r24
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	02 2e       	mov	r0, r18
     fe6:	02 c0       	rjmp	.+4      	; 0xfec <GPIO_voidWritePin+0xfc>
     fe8:	88 0f       	add	r24, r24
     fea:	99 1f       	adc	r25, r25
     fec:	0a 94       	dec	r0
     fee:	e2 f7       	brpl	.-8      	; 0xfe8 <GPIO_voidWritePin+0xf8>
     ff0:	80 95       	com	r24
     ff2:	84 23       	and	r24, r20
     ff4:	8c 93       	st	X, r24
     ff6:	57 c0       	rjmp	.+174    	; 0x10a6 <GPIO_voidWritePin+0x1b6>
				}
				break;
			case GPIOC :
				if(copy_u8Value ==HIGH )
     ff8:	8b 81       	ldd	r24, Y+3	; 0x03
     ffa:	81 30       	cpi	r24, 0x01	; 1
     ffc:	a1 f4       	brne	.+40     	; 0x1026 <GPIO_voidWritePin+0x136>
				{
					SET_BIT(PORTC ,copy_u8Pin);
     ffe:	a5 e3       	ldi	r26, 0x35	; 53
    1000:	b0 e0       	ldi	r27, 0x00	; 0
    1002:	e5 e3       	ldi	r30, 0x35	; 53
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	80 81       	ld	r24, Z
    1008:	48 2f       	mov	r20, r24
    100a:	8a 81       	ldd	r24, Y+2	; 0x02
    100c:	28 2f       	mov	r18, r24
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	02 2e       	mov	r0, r18
    1016:	02 c0       	rjmp	.+4      	; 0x101c <GPIO_voidWritePin+0x12c>
    1018:	88 0f       	add	r24, r24
    101a:	99 1f       	adc	r25, r25
    101c:	0a 94       	dec	r0
    101e:	e2 f7       	brpl	.-8      	; 0x1018 <GPIO_voidWritePin+0x128>
    1020:	84 2b       	or	r24, r20
    1022:	8c 93       	st	X, r24
    1024:	40 c0       	rjmp	.+128    	; 0x10a6 <GPIO_voidWritePin+0x1b6>
				}
				else {
					CLEAR_BIT(PORTC,copy_u8Pin);
    1026:	a5 e3       	ldi	r26, 0x35	; 53
    1028:	b0 e0       	ldi	r27, 0x00	; 0
    102a:	e5 e3       	ldi	r30, 0x35	; 53
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 81       	ld	r24, Z
    1030:	48 2f       	mov	r20, r24
    1032:	8a 81       	ldd	r24, Y+2	; 0x02
    1034:	28 2f       	mov	r18, r24
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	02 2e       	mov	r0, r18
    103e:	02 c0       	rjmp	.+4      	; 0x1044 <GPIO_voidWritePin+0x154>
    1040:	88 0f       	add	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	0a 94       	dec	r0
    1046:	e2 f7       	brpl	.-8      	; 0x1040 <GPIO_voidWritePin+0x150>
    1048:	80 95       	com	r24
    104a:	84 23       	and	r24, r20
    104c:	8c 93       	st	X, r24
    104e:	2b c0       	rjmp	.+86     	; 0x10a6 <GPIO_voidWritePin+0x1b6>
				}
				break;
			case GPIOD :
				if(copy_u8Value == HIGH )
    1050:	8b 81       	ldd	r24, Y+3	; 0x03
    1052:	81 30       	cpi	r24, 0x01	; 1
    1054:	a1 f4       	brne	.+40     	; 0x107e <GPIO_voidWritePin+0x18e>
				{
					SET_BIT(PORTD ,copy_u8Pin);
    1056:	a2 e3       	ldi	r26, 0x32	; 50
    1058:	b0 e0       	ldi	r27, 0x00	; 0
    105a:	e2 e3       	ldi	r30, 0x32	; 50
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	80 81       	ld	r24, Z
    1060:	48 2f       	mov	r20, r24
    1062:	8a 81       	ldd	r24, Y+2	; 0x02
    1064:	28 2f       	mov	r18, r24
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	81 e0       	ldi	r24, 0x01	; 1
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	02 2e       	mov	r0, r18
    106e:	02 c0       	rjmp	.+4      	; 0x1074 <GPIO_voidWritePin+0x184>
    1070:	88 0f       	add	r24, r24
    1072:	99 1f       	adc	r25, r25
    1074:	0a 94       	dec	r0
    1076:	e2 f7       	brpl	.-8      	; 0x1070 <GPIO_voidWritePin+0x180>
    1078:	84 2b       	or	r24, r20
    107a:	8c 93       	st	X, r24
    107c:	14 c0       	rjmp	.+40     	; 0x10a6 <GPIO_voidWritePin+0x1b6>
				}
				else {
					CLEAR_BIT(PORTD,copy_u8Pin);
    107e:	a2 e3       	ldi	r26, 0x32	; 50
    1080:	b0 e0       	ldi	r27, 0x00	; 0
    1082:	e2 e3       	ldi	r30, 0x32	; 50
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	80 81       	ld	r24, Z
    1088:	48 2f       	mov	r20, r24
    108a:	8a 81       	ldd	r24, Y+2	; 0x02
    108c:	28 2f       	mov	r18, r24
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	81 e0       	ldi	r24, 0x01	; 1
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	02 2e       	mov	r0, r18
    1096:	02 c0       	rjmp	.+4      	; 0x109c <GPIO_voidWritePin+0x1ac>
    1098:	88 0f       	add	r24, r24
    109a:	99 1f       	adc	r25, r25
    109c:	0a 94       	dec	r0
    109e:	e2 f7       	brpl	.-8      	; 0x1098 <GPIO_voidWritePin+0x1a8>
    10a0:	80 95       	com	r24
    10a2:	84 23       	and	r24, r20
    10a4:	8c 93       	st	X, r24
				break;	
			default:
				break;
		}
		
	}
    10a6:	0f 90       	pop	r0
    10a8:	0f 90       	pop	r0
    10aa:	0f 90       	pop	r0
    10ac:	0f 90       	pop	r0
    10ae:	0f 90       	pop	r0
    10b0:	cf 91       	pop	r28
    10b2:	df 91       	pop	r29
    10b4:	08 95       	ret

000010b6 <GPIO_u8ReadPin>:
	
	u8	GPIO_u8ReadPin(	u8  copy_u8Port ,u8 copy_u8Pin )
	{
    10b6:	df 93       	push	r29
    10b8:	cf 93       	push	r28
    10ba:	00 d0       	rcall	.+0      	; 0x10bc <GPIO_u8ReadPin+0x6>
    10bc:	00 d0       	rcall	.+0      	; 0x10be <GPIO_u8ReadPin+0x8>
    10be:	0f 92       	push	r0
    10c0:	cd b7       	in	r28, 0x3d	; 61
    10c2:	de b7       	in	r29, 0x3e	; 62
    10c4:	8a 83       	std	Y+2, r24	; 0x02
    10c6:	6b 83       	std	Y+3, r22	; 0x03
		u8 Local_u8ReturnValue ;
		switch(copy_u8Port){
    10c8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ca:	28 2f       	mov	r18, r24
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	3d 83       	std	Y+5, r19	; 0x05
    10d0:	2c 83       	std	Y+4, r18	; 0x04
    10d2:	4c 81       	ldd	r20, Y+4	; 0x04
    10d4:	5d 81       	ldd	r21, Y+5	; 0x05
    10d6:	41 30       	cpi	r20, 0x01	; 1
    10d8:	51 05       	cpc	r21, r1
    10da:	b1 f1       	breq	.+108    	; 0x1148 <GPIO_u8ReadPin+0x92>
    10dc:	8c 81       	ldd	r24, Y+4	; 0x04
    10de:	9d 81       	ldd	r25, Y+5	; 0x05
    10e0:	82 30       	cpi	r24, 0x02	; 2
    10e2:	91 05       	cpc	r25, r1
    10e4:	34 f4       	brge	.+12     	; 0x10f2 <GPIO_u8ReadPin+0x3c>
    10e6:	2c 81       	ldd	r18, Y+4	; 0x04
    10e8:	3d 81       	ldd	r19, Y+5	; 0x05
    10ea:	21 15       	cp	r18, r1
    10ec:	31 05       	cpc	r19, r1
    10ee:	71 f0       	breq	.+28     	; 0x110c <GPIO_u8ReadPin+0x56>
    10f0:	84 c0       	rjmp	.+264    	; 0x11fa <GPIO_u8ReadPin+0x144>
    10f2:	4c 81       	ldd	r20, Y+4	; 0x04
    10f4:	5d 81       	ldd	r21, Y+5	; 0x05
    10f6:	42 30       	cpi	r20, 0x02	; 2
    10f8:	51 05       	cpc	r21, r1
    10fa:	09 f4       	brne	.+2      	; 0x10fe <GPIO_u8ReadPin+0x48>
    10fc:	43 c0       	rjmp	.+134    	; 0x1184 <GPIO_u8ReadPin+0xce>
    10fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1100:	9d 81       	ldd	r25, Y+5	; 0x05
    1102:	83 30       	cpi	r24, 0x03	; 3
    1104:	91 05       	cpc	r25, r1
    1106:	09 f4       	brne	.+2      	; 0x110a <GPIO_u8ReadPin+0x54>
    1108:	5b c0       	rjmp	.+182    	; 0x11c0 <GPIO_u8ReadPin+0x10a>
    110a:	77 c0       	rjmp	.+238    	; 0x11fa <GPIO_u8ReadPin+0x144>
			case GPIOA :
				Local_u8ReturnValue = GET_BIT(PINA,copy_u8Pin);
    110c:	e9 e3       	ldi	r30, 0x39	; 57
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	48 2f       	mov	r20, r24
    1114:	50 e0       	ldi	r21, 0x00	; 0
    1116:	8b 81       	ldd	r24, Y+3	; 0x03
    1118:	28 2f       	mov	r18, r24
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	02 c0       	rjmp	.+4      	; 0x1126 <GPIO_u8ReadPin+0x70>
    1122:	88 0f       	add	r24, r24
    1124:	99 1f       	adc	r25, r25
    1126:	2a 95       	dec	r18
    1128:	e2 f7       	brpl	.-8      	; 0x1122 <GPIO_u8ReadPin+0x6c>
    112a:	9a 01       	movw	r18, r20
    112c:	28 23       	and	r18, r24
    112e:	39 23       	and	r19, r25
    1130:	8b 81       	ldd	r24, Y+3	; 0x03
    1132:	88 2f       	mov	r24, r24
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	a9 01       	movw	r20, r18
    1138:	02 c0       	rjmp	.+4      	; 0x113e <GPIO_u8ReadPin+0x88>
    113a:	55 95       	asr	r21
    113c:	47 95       	ror	r20
    113e:	8a 95       	dec	r24
    1140:	e2 f7       	brpl	.-8      	; 0x113a <GPIO_u8ReadPin+0x84>
    1142:	ca 01       	movw	r24, r20
    1144:	89 83       	std	Y+1, r24	; 0x01
    1146:	59 c0       	rjmp	.+178    	; 0x11fa <GPIO_u8ReadPin+0x144>
				break ;
			case GPIOB :
				Local_u8ReturnValue = GET_BIT(PINB,copy_u8Pin);
    1148:	e6 e3       	ldi	r30, 0x36	; 54
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
    114e:	48 2f       	mov	r20, r24
    1150:	50 e0       	ldi	r21, 0x00	; 0
    1152:	8b 81       	ldd	r24, Y+3	; 0x03
    1154:	28 2f       	mov	r18, r24
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	02 c0       	rjmp	.+4      	; 0x1162 <GPIO_u8ReadPin+0xac>
    115e:	88 0f       	add	r24, r24
    1160:	99 1f       	adc	r25, r25
    1162:	2a 95       	dec	r18
    1164:	e2 f7       	brpl	.-8      	; 0x115e <GPIO_u8ReadPin+0xa8>
    1166:	9a 01       	movw	r18, r20
    1168:	28 23       	and	r18, r24
    116a:	39 23       	and	r19, r25
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	88 2f       	mov	r24, r24
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	a9 01       	movw	r20, r18
    1174:	02 c0       	rjmp	.+4      	; 0x117a <GPIO_u8ReadPin+0xc4>
    1176:	55 95       	asr	r21
    1178:	47 95       	ror	r20
    117a:	8a 95       	dec	r24
    117c:	e2 f7       	brpl	.-8      	; 0x1176 <GPIO_u8ReadPin+0xc0>
    117e:	ca 01       	movw	r24, r20
    1180:	89 83       	std	Y+1, r24	; 0x01
    1182:	3b c0       	rjmp	.+118    	; 0x11fa <GPIO_u8ReadPin+0x144>
				break ;
			case GPIOC :
				Local_u8ReturnValue = GET_BIT(PINC,copy_u8Pin);
    1184:	e3 e3       	ldi	r30, 0x33	; 51
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	80 81       	ld	r24, Z
    118a:	48 2f       	mov	r20, r24
    118c:	50 e0       	ldi	r21, 0x00	; 0
    118e:	8b 81       	ldd	r24, Y+3	; 0x03
    1190:	28 2f       	mov	r18, r24
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	02 c0       	rjmp	.+4      	; 0x119e <GPIO_u8ReadPin+0xe8>
    119a:	88 0f       	add	r24, r24
    119c:	99 1f       	adc	r25, r25
    119e:	2a 95       	dec	r18
    11a0:	e2 f7       	brpl	.-8      	; 0x119a <GPIO_u8ReadPin+0xe4>
    11a2:	9a 01       	movw	r18, r20
    11a4:	28 23       	and	r18, r24
    11a6:	39 23       	and	r19, r25
    11a8:	8b 81       	ldd	r24, Y+3	; 0x03
    11aa:	88 2f       	mov	r24, r24
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	a9 01       	movw	r20, r18
    11b0:	02 c0       	rjmp	.+4      	; 0x11b6 <GPIO_u8ReadPin+0x100>
    11b2:	55 95       	asr	r21
    11b4:	47 95       	ror	r20
    11b6:	8a 95       	dec	r24
    11b8:	e2 f7       	brpl	.-8      	; 0x11b2 <GPIO_u8ReadPin+0xfc>
    11ba:	ca 01       	movw	r24, r20
    11bc:	89 83       	std	Y+1, r24	; 0x01
    11be:	1d c0       	rjmp	.+58     	; 0x11fa <GPIO_u8ReadPin+0x144>
				break ;
			case GPIOD :
				Local_u8ReturnValue = GET_BIT(PIND,copy_u8Pin);
    11c0:	e0 e3       	ldi	r30, 0x30	; 48
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	80 81       	ld	r24, Z
    11c6:	48 2f       	mov	r20, r24
    11c8:	50 e0       	ldi	r21, 0x00	; 0
    11ca:	8b 81       	ldd	r24, Y+3	; 0x03
    11cc:	28 2f       	mov	r18, r24
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	02 c0       	rjmp	.+4      	; 0x11da <GPIO_u8ReadPin+0x124>
    11d6:	88 0f       	add	r24, r24
    11d8:	99 1f       	adc	r25, r25
    11da:	2a 95       	dec	r18
    11dc:	e2 f7       	brpl	.-8      	; 0x11d6 <GPIO_u8ReadPin+0x120>
    11de:	9a 01       	movw	r18, r20
    11e0:	28 23       	and	r18, r24
    11e2:	39 23       	and	r19, r25
    11e4:	8b 81       	ldd	r24, Y+3	; 0x03
    11e6:	88 2f       	mov	r24, r24
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	a9 01       	movw	r20, r18
    11ec:	02 c0       	rjmp	.+4      	; 0x11f2 <GPIO_u8ReadPin+0x13c>
    11ee:	55 95       	asr	r21
    11f0:	47 95       	ror	r20
    11f2:	8a 95       	dec	r24
    11f4:	e2 f7       	brpl	.-8      	; 0x11ee <GPIO_u8ReadPin+0x138>
    11f6:	ca 01       	movw	r24, r20
    11f8:	89 83       	std	Y+1, r24	; 0x01
				break ;
			default:
			break;
		}
		return Local_u8ReturnValue ;
    11fa:	89 81       	ldd	r24, Y+1	; 0x01
		
	}
    11fc:	0f 90       	pop	r0
    11fe:	0f 90       	pop	r0
    1200:	0f 90       	pop	r0
    1202:	0f 90       	pop	r0
    1204:	0f 90       	pop	r0
    1206:	cf 91       	pop	r28
    1208:	df 91       	pop	r29
    120a:	08 95       	ret

0000120c <GPIO_voidTogPin>:
	
	void GPIO_voidTogPin 	( u8 copy_u8Port , u8 copy_u8Pin )
	{
    120c:	df 93       	push	r29
    120e:	cf 93       	push	r28
    1210:	00 d0       	rcall	.+0      	; 0x1212 <GPIO_voidTogPin+0x6>
    1212:	00 d0       	rcall	.+0      	; 0x1214 <GPIO_voidTogPin+0x8>
    1214:	cd b7       	in	r28, 0x3d	; 61
    1216:	de b7       	in	r29, 0x3e	; 62
    1218:	89 83       	std	Y+1, r24	; 0x01
    121a:	6a 83       	std	Y+2, r22	; 0x02
		switch(copy_u8Port){
    121c:	89 81       	ldd	r24, Y+1	; 0x01
    121e:	28 2f       	mov	r18, r24
    1220:	30 e0       	ldi	r19, 0x00	; 0
    1222:	3c 83       	std	Y+4, r19	; 0x04
    1224:	2b 83       	std	Y+3, r18	; 0x03
    1226:	8b 81       	ldd	r24, Y+3	; 0x03
    1228:	9c 81       	ldd	r25, Y+4	; 0x04
    122a:	81 30       	cpi	r24, 0x01	; 1
    122c:	91 05       	cpc	r25, r1
    122e:	49 f1       	breq	.+82     	; 0x1282 <GPIO_voidTogPin+0x76>
    1230:	2b 81       	ldd	r18, Y+3	; 0x03
    1232:	3c 81       	ldd	r19, Y+4	; 0x04
    1234:	22 30       	cpi	r18, 0x02	; 2
    1236:	31 05       	cpc	r19, r1
    1238:	2c f4       	brge	.+10     	; 0x1244 <GPIO_voidTogPin+0x38>
    123a:	8b 81       	ldd	r24, Y+3	; 0x03
    123c:	9c 81       	ldd	r25, Y+4	; 0x04
    123e:	00 97       	sbiw	r24, 0x00	; 0
    1240:	61 f0       	breq	.+24     	; 0x125a <GPIO_voidTogPin+0x4e>
    1242:	5a c0       	rjmp	.+180    	; 0x12f8 <GPIO_voidTogPin+0xec>
    1244:	2b 81       	ldd	r18, Y+3	; 0x03
    1246:	3c 81       	ldd	r19, Y+4	; 0x04
    1248:	22 30       	cpi	r18, 0x02	; 2
    124a:	31 05       	cpc	r19, r1
    124c:	71 f1       	breq	.+92     	; 0x12aa <GPIO_voidTogPin+0x9e>
    124e:	8b 81       	ldd	r24, Y+3	; 0x03
    1250:	9c 81       	ldd	r25, Y+4	; 0x04
    1252:	83 30       	cpi	r24, 0x03	; 3
    1254:	91 05       	cpc	r25, r1
    1256:	e9 f1       	breq	.+122    	; 0x12d2 <GPIO_voidTogPin+0xc6>
    1258:	4f c0       	rjmp	.+158    	; 0x12f8 <GPIO_voidTogPin+0xec>
			case GPIOA :
				TOG_BIT(PORTA,copy_u8Pin);
    125a:	ab e3       	ldi	r26, 0x3B	; 59
    125c:	b0 e0       	ldi	r27, 0x00	; 0
    125e:	eb e3       	ldi	r30, 0x3B	; 59
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	80 81       	ld	r24, Z
    1264:	48 2f       	mov	r20, r24
    1266:	8a 81       	ldd	r24, Y+2	; 0x02
    1268:	28 2f       	mov	r18, r24
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	02 2e       	mov	r0, r18
    1272:	02 c0       	rjmp	.+4      	; 0x1278 <GPIO_voidTogPin+0x6c>
    1274:	88 0f       	add	r24, r24
    1276:	99 1f       	adc	r25, r25
    1278:	0a 94       	dec	r0
    127a:	e2 f7       	brpl	.-8      	; 0x1274 <GPIO_voidTogPin+0x68>
    127c:	84 27       	eor	r24, r20
    127e:	8c 93       	st	X, r24
    1280:	3b c0       	rjmp	.+118    	; 0x12f8 <GPIO_voidTogPin+0xec>
				break ;             
			case GPIOB :            
				TOG_BIT(PORTB,copy_u8Pin);
    1282:	a8 e3       	ldi	r26, 0x38	; 56
    1284:	b0 e0       	ldi	r27, 0x00	; 0
    1286:	e8 e3       	ldi	r30, 0x38	; 56
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	80 81       	ld	r24, Z
    128c:	48 2f       	mov	r20, r24
    128e:	8a 81       	ldd	r24, Y+2	; 0x02
    1290:	28 2f       	mov	r18, r24
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	02 2e       	mov	r0, r18
    129a:	02 c0       	rjmp	.+4      	; 0x12a0 <GPIO_voidTogPin+0x94>
    129c:	88 0f       	add	r24, r24
    129e:	99 1f       	adc	r25, r25
    12a0:	0a 94       	dec	r0
    12a2:	e2 f7       	brpl	.-8      	; 0x129c <GPIO_voidTogPin+0x90>
    12a4:	84 27       	eor	r24, r20
    12a6:	8c 93       	st	X, r24
    12a8:	27 c0       	rjmp	.+78     	; 0x12f8 <GPIO_voidTogPin+0xec>
				break ;             
			case GPIOC :            
				TOG_BIT(PORTC,copy_u8Pin);
    12aa:	a5 e3       	ldi	r26, 0x35	; 53
    12ac:	b0 e0       	ldi	r27, 0x00	; 0
    12ae:	e5 e3       	ldi	r30, 0x35	; 53
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	80 81       	ld	r24, Z
    12b4:	48 2f       	mov	r20, r24
    12b6:	8a 81       	ldd	r24, Y+2	; 0x02
    12b8:	28 2f       	mov	r18, r24
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	02 2e       	mov	r0, r18
    12c2:	02 c0       	rjmp	.+4      	; 0x12c8 <GPIO_voidTogPin+0xbc>
    12c4:	88 0f       	add	r24, r24
    12c6:	99 1f       	adc	r25, r25
    12c8:	0a 94       	dec	r0
    12ca:	e2 f7       	brpl	.-8      	; 0x12c4 <GPIO_voidTogPin+0xb8>
    12cc:	84 27       	eor	r24, r20
    12ce:	8c 93       	st	X, r24
    12d0:	13 c0       	rjmp	.+38     	; 0x12f8 <GPIO_voidTogPin+0xec>
				break ;             
			case GPIOD : 
				TOG_BIT(PORTD,copy_u8Pin);
    12d2:	a2 e3       	ldi	r26, 0x32	; 50
    12d4:	b0 e0       	ldi	r27, 0x00	; 0
    12d6:	e2 e3       	ldi	r30, 0x32	; 50
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	80 81       	ld	r24, Z
    12dc:	48 2f       	mov	r20, r24
    12de:	8a 81       	ldd	r24, Y+2	; 0x02
    12e0:	28 2f       	mov	r18, r24
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	02 2e       	mov	r0, r18
    12ea:	02 c0       	rjmp	.+4      	; 0x12f0 <GPIO_voidTogPin+0xe4>
    12ec:	88 0f       	add	r24, r24
    12ee:	99 1f       	adc	r25, r25
    12f0:	0a 94       	dec	r0
    12f2:	e2 f7       	brpl	.-8      	; 0x12ec <GPIO_voidTogPin+0xe0>
    12f4:	84 27       	eor	r24, r20
    12f6:	8c 93       	st	X, r24
			default:
			break;
		}
		
		
	}
    12f8:	0f 90       	pop	r0
    12fa:	0f 90       	pop	r0
    12fc:	0f 90       	pop	r0
    12fe:	0f 90       	pop	r0
    1300:	cf 91       	pop	r28
    1302:	df 91       	pop	r29
    1304:	08 95       	ret

00001306 <GPIO_voidSetPortDDR>:
	void GPIO_voidSetPortDDR (u8  copy_u8Port , u8 copy_u8Mode )
	{
    1306:	df 93       	push	r29
    1308:	cf 93       	push	r28
    130a:	00 d0       	rcall	.+0      	; 0x130c <GPIO_voidSetPortDDR+0x6>
    130c:	00 d0       	rcall	.+0      	; 0x130e <GPIO_voidSetPortDDR+0x8>
    130e:	cd b7       	in	r28, 0x3d	; 61
    1310:	de b7       	in	r29, 0x3e	; 62
    1312:	89 83       	std	Y+1, r24	; 0x01
    1314:	6a 83       	std	Y+2, r22	; 0x02
		switch(copy_u8Port)
    1316:	89 81       	ldd	r24, Y+1	; 0x01
    1318:	28 2f       	mov	r18, r24
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	3c 83       	std	Y+4, r19	; 0x04
    131e:	2b 83       	std	Y+3, r18	; 0x03
    1320:	8b 81       	ldd	r24, Y+3	; 0x03
    1322:	9c 81       	ldd	r25, Y+4	; 0x04
    1324:	81 30       	cpi	r24, 0x01	; 1
    1326:	91 05       	cpc	r25, r1
    1328:	09 f1       	breq	.+66     	; 0x136c <GPIO_voidSetPortDDR+0x66>
    132a:	2b 81       	ldd	r18, Y+3	; 0x03
    132c:	3c 81       	ldd	r19, Y+4	; 0x04
    132e:	22 30       	cpi	r18, 0x02	; 2
    1330:	31 05       	cpc	r19, r1
    1332:	2c f4       	brge	.+10     	; 0x133e <GPIO_voidSetPortDDR+0x38>
    1334:	8b 81       	ldd	r24, Y+3	; 0x03
    1336:	9c 81       	ldd	r25, Y+4	; 0x04
    1338:	00 97       	sbiw	r24, 0x00	; 0
    133a:	61 f0       	breq	.+24     	; 0x1354 <GPIO_voidSetPortDDR+0x4e>
    133c:	3a c0       	rjmp	.+116    	; 0x13b2 <GPIO_voidSetPortDDR+0xac>
    133e:	2b 81       	ldd	r18, Y+3	; 0x03
    1340:	3c 81       	ldd	r19, Y+4	; 0x04
    1342:	22 30       	cpi	r18, 0x02	; 2
    1344:	31 05       	cpc	r19, r1
    1346:	f1 f0       	breq	.+60     	; 0x1384 <GPIO_voidSetPortDDR+0x7e>
    1348:	8b 81       	ldd	r24, Y+3	; 0x03
    134a:	9c 81       	ldd	r25, Y+4	; 0x04
    134c:	83 30       	cpi	r24, 0x03	; 3
    134e:	91 05       	cpc	r25, r1
    1350:	29 f1       	breq	.+74     	; 0x139c <GPIO_voidSetPortDDR+0x96>
    1352:	2f c0       	rjmp	.+94     	; 0x13b2 <GPIO_voidSetPortDDR+0xac>
		{
			case GPIOA :
				if(copy_u8Mode ==OUTPUT )
    1354:	8a 81       	ldd	r24, Y+2	; 0x02
    1356:	81 30       	cpi	r24, 0x01	; 1
    1358:	29 f4       	brne	.+10     	; 0x1364 <GPIO_voidSetPortDDR+0x5e>
				{
					DDRA= 0xFF;
    135a:	ea e3       	ldi	r30, 0x3A	; 58
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	8f ef       	ldi	r24, 0xFF	; 255
    1360:	80 83       	st	Z, r24
    1362:	27 c0       	rjmp	.+78     	; 0x13b2 <GPIO_voidSetPortDDR+0xac>
				}
				else {
					DDRA = 0x00 ;
    1364:	ea e3       	ldi	r30, 0x3A	; 58
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	10 82       	st	Z, r1
    136a:	23 c0       	rjmp	.+70     	; 0x13b2 <GPIO_voidSetPortDDR+0xac>
				}
				break;
			case GPIOB :
				if(copy_u8Mode ==OUTPUT )
    136c:	8a 81       	ldd	r24, Y+2	; 0x02
    136e:	81 30       	cpi	r24, 0x01	; 1
    1370:	29 f4       	brne	.+10     	; 0x137c <GPIO_voidSetPortDDR+0x76>
				{
					DDRB = 0xFF;
    1372:	e7 e3       	ldi	r30, 0x37	; 55
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	8f ef       	ldi	r24, 0xFF	; 255
    1378:	80 83       	st	Z, r24
    137a:	1b c0       	rjmp	.+54     	; 0x13b2 <GPIO_voidSetPortDDR+0xac>
				}
				else {
					DDRB = 0x00;
    137c:	e7 e3       	ldi	r30, 0x37	; 55
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	10 82       	st	Z, r1
    1382:	17 c0       	rjmp	.+46     	; 0x13b2 <GPIO_voidSetPortDDR+0xac>
				}
				break;
			case GPIOC :
				if(copy_u8Mode ==OUTPUT )
    1384:	8a 81       	ldd	r24, Y+2	; 0x02
    1386:	81 30       	cpi	r24, 0x01	; 1
    1388:	29 f4       	brne	.+10     	; 0x1394 <GPIO_voidSetPortDDR+0x8e>
				{
					DDRC = 0xFF ;
    138a:	e4 e3       	ldi	r30, 0x34	; 52
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	8f ef       	ldi	r24, 0xFF	; 255
    1390:	80 83       	st	Z, r24
    1392:	0f c0       	rjmp	.+30     	; 0x13b2 <GPIO_voidSetPortDDR+0xac>
				}
				else {
					DDRC = 0x00 ;
    1394:	e4 e3       	ldi	r30, 0x34	; 52
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	10 82       	st	Z, r1
    139a:	0b c0       	rjmp	.+22     	; 0x13b2 <GPIO_voidSetPortDDR+0xac>
				}
				break;
			case GPIOD :
				if(copy_u8Mode ==OUTPUT )
    139c:	8a 81       	ldd	r24, Y+2	; 0x02
    139e:	81 30       	cpi	r24, 0x01	; 1
    13a0:	29 f4       	brne	.+10     	; 0x13ac <GPIO_voidSetPortDDR+0xa6>
				{
					DDRD = 0xFF;
    13a2:	e1 e3       	ldi	r30, 0x31	; 49
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	8f ef       	ldi	r24, 0xFF	; 255
    13a8:	80 83       	st	Z, r24
    13aa:	03 c0       	rjmp	.+6      	; 0x13b2 <GPIO_voidSetPortDDR+0xac>
				}
				else {
					DDRD = 0x00;
    13ac:	e1 e3       	ldi	r30, 0x31	; 49
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	10 82       	st	Z, r1
				}
				break;	
			default:
				break;
		}
	}
    13b2:	0f 90       	pop	r0
    13b4:	0f 90       	pop	r0
    13b6:	0f 90       	pop	r0
    13b8:	0f 90       	pop	r0
    13ba:	cf 91       	pop	r28
    13bc:	df 91       	pop	r29
    13be:	08 95       	ret

000013c0 <GPIO_voidWritePort>:
	void	GPIO_voidWritePort (u8 copy_u8Port , u8 copy_u8Value)
	{
    13c0:	df 93       	push	r29
    13c2:	cf 93       	push	r28
    13c4:	00 d0       	rcall	.+0      	; 0x13c6 <GPIO_voidWritePort+0x6>
    13c6:	00 d0       	rcall	.+0      	; 0x13c8 <GPIO_voidWritePort+0x8>
    13c8:	cd b7       	in	r28, 0x3d	; 61
    13ca:	de b7       	in	r29, 0x3e	; 62
    13cc:	89 83       	std	Y+1, r24	; 0x01
    13ce:	6a 83       	std	Y+2, r22	; 0x02
			switch(copy_u8Port)
    13d0:	89 81       	ldd	r24, Y+1	; 0x01
    13d2:	28 2f       	mov	r18, r24
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	3c 83       	std	Y+4, r19	; 0x04
    13d8:	2b 83       	std	Y+3, r18	; 0x03
    13da:	8b 81       	ldd	r24, Y+3	; 0x03
    13dc:	9c 81       	ldd	r25, Y+4	; 0x04
    13de:	81 30       	cpi	r24, 0x01	; 1
    13e0:	91 05       	cpc	r25, r1
    13e2:	d1 f0       	breq	.+52     	; 0x1418 <GPIO_voidWritePort+0x58>
    13e4:	2b 81       	ldd	r18, Y+3	; 0x03
    13e6:	3c 81       	ldd	r19, Y+4	; 0x04
    13e8:	22 30       	cpi	r18, 0x02	; 2
    13ea:	31 05       	cpc	r19, r1
    13ec:	2c f4       	brge	.+10     	; 0x13f8 <GPIO_voidWritePort+0x38>
    13ee:	8b 81       	ldd	r24, Y+3	; 0x03
    13f0:	9c 81       	ldd	r25, Y+4	; 0x04
    13f2:	00 97       	sbiw	r24, 0x00	; 0
    13f4:	61 f0       	breq	.+24     	; 0x140e <GPIO_voidWritePort+0x4e>
    13f6:	1e c0       	rjmp	.+60     	; 0x1434 <GPIO_voidWritePort+0x74>
    13f8:	2b 81       	ldd	r18, Y+3	; 0x03
    13fa:	3c 81       	ldd	r19, Y+4	; 0x04
    13fc:	22 30       	cpi	r18, 0x02	; 2
    13fe:	31 05       	cpc	r19, r1
    1400:	81 f0       	breq	.+32     	; 0x1422 <GPIO_voidWritePort+0x62>
    1402:	8b 81       	ldd	r24, Y+3	; 0x03
    1404:	9c 81       	ldd	r25, Y+4	; 0x04
    1406:	83 30       	cpi	r24, 0x03	; 3
    1408:	91 05       	cpc	r25, r1
    140a:	81 f0       	breq	.+32     	; 0x142c <GPIO_voidWritePort+0x6c>
    140c:	13 c0       	rjmp	.+38     	; 0x1434 <GPIO_voidWritePort+0x74>
		{
			case GPIOA :
				PORTA = copy_u8Value ;
    140e:	eb e3       	ldi	r30, 0x3B	; 59
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	8a 81       	ldd	r24, Y+2	; 0x02
    1414:	80 83       	st	Z, r24
    1416:	0e c0       	rjmp	.+28     	; 0x1434 <GPIO_voidWritePort+0x74>
				break;
			case GPIOB :
				PORTB = copy_u8Value;
    1418:	e8 e3       	ldi	r30, 0x38	; 56
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	8a 81       	ldd	r24, Y+2	; 0x02
    141e:	80 83       	st	Z, r24
    1420:	09 c0       	rjmp	.+18     	; 0x1434 <GPIO_voidWritePort+0x74>
				break;
			case GPIOC :
				PORTC = copy_u8Value;
    1422:	e5 e3       	ldi	r30, 0x35	; 53
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	8a 81       	ldd	r24, Y+2	; 0x02
    1428:	80 83       	st	Z, r24
    142a:	04 c0       	rjmp	.+8      	; 0x1434 <GPIO_voidWritePort+0x74>
				break;
			case GPIOD :
				PORTD = copy_u8Value;
    142c:	e2 e3       	ldi	r30, 0x32	; 50
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	8a 81       	ldd	r24, Y+2	; 0x02
    1432:	80 83       	st	Z, r24
				break;
		}
		
			
			
		}
    1434:	0f 90       	pop	r0
    1436:	0f 90       	pop	r0
    1438:	0f 90       	pop	r0
    143a:	0f 90       	pop	r0
    143c:	cf 91       	pop	r28
    143e:	df 91       	pop	r29
    1440:	08 95       	ret

00001442 <GPIO_voidSetLowNippleDDR>:
	void GPIO_voidSetLowNippleDDR(u8 copy_u8Port , u8 copy_u8Mode)
	{
    1442:	df 93       	push	r29
    1444:	cf 93       	push	r28
    1446:	00 d0       	rcall	.+0      	; 0x1448 <GPIO_voidSetLowNippleDDR+0x6>
    1448:	0f 92       	push	r0
    144a:	cd b7       	in	r28, 0x3d	; 61
    144c:	de b7       	in	r29, 0x3e	; 62
    144e:	8a 83       	std	Y+2, r24	; 0x02
    1450:	6b 83       	std	Y+3, r22	; 0x03
		u8 i ;
		for (i= 0 ; i<4 ; i++){
    1452:	19 82       	std	Y+1, r1	; 0x01
    1454:	08 c0       	rjmp	.+16     	; 0x1466 <GPIO_voidSetLowNippleDDR+0x24>
			GPIO_voidSetPinDDR(copy_u8Port , i ,copy_u8Mode );
    1456:	8a 81       	ldd	r24, Y+2	; 0x02
    1458:	69 81       	ldd	r22, Y+1	; 0x01
    145a:	4b 81       	ldd	r20, Y+3	; 0x03
    145c:	0e 94 95 06 	call	0xd2a	; 0xd2a <GPIO_voidSetPinDDR>
			
		}
	void GPIO_voidSetLowNippleDDR(u8 copy_u8Port , u8 copy_u8Mode)
	{
		u8 i ;
		for (i= 0 ; i<4 ; i++){
    1460:	89 81       	ldd	r24, Y+1	; 0x01
    1462:	8f 5f       	subi	r24, 0xFF	; 255
    1464:	89 83       	std	Y+1, r24	; 0x01
    1466:	89 81       	ldd	r24, Y+1	; 0x01
    1468:	84 30       	cpi	r24, 0x04	; 4
    146a:	a8 f3       	brcs	.-22     	; 0x1456 <GPIO_voidSetLowNippleDDR+0x14>
			GPIO_voidSetPinDDR(copy_u8Port , i ,copy_u8Mode );
		}
	}
    146c:	0f 90       	pop	r0
    146e:	0f 90       	pop	r0
    1470:	0f 90       	pop	r0
    1472:	cf 91       	pop	r28
    1474:	df 91       	pop	r29
    1476:	08 95       	ret

00001478 <GPIO_voidSetHighNippleDDR>:
	void GPIO_voidSetHighNippleDDR(u8 copy_u8Port , u8 copy_u8Mode)
	{
    1478:	df 93       	push	r29
    147a:	cf 93       	push	r28
    147c:	00 d0       	rcall	.+0      	; 0x147e <GPIO_voidSetHighNippleDDR+0x6>
    147e:	0f 92       	push	r0
    1480:	cd b7       	in	r28, 0x3d	; 61
    1482:	de b7       	in	r29, 0x3e	; 62
    1484:	8a 83       	std	Y+2, r24	; 0x02
    1486:	6b 83       	std	Y+3, r22	; 0x03
		u8 i ;
		for (i= 4 ; i<8 ; i++){
    1488:	84 e0       	ldi	r24, 0x04	; 4
    148a:	89 83       	std	Y+1, r24	; 0x01
    148c:	08 c0       	rjmp	.+16     	; 0x149e <GPIO_voidSetHighNippleDDR+0x26>
			GPIO_voidSetPinDDR(copy_u8Port , i ,copy_u8Mode );
    148e:	8a 81       	ldd	r24, Y+2	; 0x02
    1490:	69 81       	ldd	r22, Y+1	; 0x01
    1492:	4b 81       	ldd	r20, Y+3	; 0x03
    1494:	0e 94 95 06 	call	0xd2a	; 0xd2a <GPIO_voidSetPinDDR>
		}
	}
	void GPIO_voidSetHighNippleDDR(u8 copy_u8Port , u8 copy_u8Mode)
	{
		u8 i ;
		for (i= 4 ; i<8 ; i++){
    1498:	89 81       	ldd	r24, Y+1	; 0x01
    149a:	8f 5f       	subi	r24, 0xFF	; 255
    149c:	89 83       	std	Y+1, r24	; 0x01
    149e:	89 81       	ldd	r24, Y+1	; 0x01
    14a0:	88 30       	cpi	r24, 0x08	; 8
    14a2:	a8 f3       	brcs	.-22     	; 0x148e <GPIO_voidSetHighNippleDDR+0x16>
			GPIO_voidSetPinDDR(copy_u8Port , i ,copy_u8Mode );
		}
	}
    14a4:	0f 90       	pop	r0
    14a6:	0f 90       	pop	r0
    14a8:	0f 90       	pop	r0
    14aa:	cf 91       	pop	r28
    14ac:	df 91       	pop	r29
    14ae:	08 95       	ret

000014b0 <GPIO_voidWriteLowNipple>:
	void GPIO_voidWriteLowNipple (u8 copy_u8Port , u8 copy_u8Value )
	{
    14b0:	df 93       	push	r29
    14b2:	cf 93       	push	r28
    14b4:	00 d0       	rcall	.+0      	; 0x14b6 <GPIO_voidWriteLowNipple+0x6>
    14b6:	00 d0       	rcall	.+0      	; 0x14b8 <GPIO_voidWriteLowNipple+0x8>
    14b8:	cd b7       	in	r28, 0x3d	; 61
    14ba:	de b7       	in	r29, 0x3e	; 62
    14bc:	89 83       	std	Y+1, r24	; 0x01
    14be:	6a 83       	std	Y+2, r22	; 0x02
		copy_u8Value &= 0x0F;
    14c0:	8a 81       	ldd	r24, Y+2	; 0x02
    14c2:	8f 70       	andi	r24, 0x0F	; 15
    14c4:	8a 83       	std	Y+2, r24	; 0x02
		switch (copy_u8Port) {
    14c6:	89 81       	ldd	r24, Y+1	; 0x01
    14c8:	28 2f       	mov	r18, r24
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	3c 83       	std	Y+4, r19	; 0x04
    14ce:	2b 83       	std	Y+3, r18	; 0x03
    14d0:	8b 81       	ldd	r24, Y+3	; 0x03
    14d2:	9c 81       	ldd	r25, Y+4	; 0x04
    14d4:	81 30       	cpi	r24, 0x01	; 1
    14d6:	91 05       	cpc	r25, r1
    14d8:	29 f1       	breq	.+74     	; 0x1524 <GPIO_voidWriteLowNipple+0x74>
    14da:	2b 81       	ldd	r18, Y+3	; 0x03
    14dc:	3c 81       	ldd	r19, Y+4	; 0x04
    14de:	22 30       	cpi	r18, 0x02	; 2
    14e0:	31 05       	cpc	r19, r1
    14e2:	2c f4       	brge	.+10     	; 0x14ee <GPIO_voidWriteLowNipple+0x3e>
    14e4:	8b 81       	ldd	r24, Y+3	; 0x03
    14e6:	9c 81       	ldd	r25, Y+4	; 0x04
    14e8:	00 97       	sbiw	r24, 0x00	; 0
    14ea:	61 f0       	breq	.+24     	; 0x1504 <GPIO_voidWriteLowNipple+0x54>
    14ec:	4a c0       	rjmp	.+148    	; 0x1582 <GPIO_voidWriteLowNipple+0xd2>
    14ee:	2b 81       	ldd	r18, Y+3	; 0x03
    14f0:	3c 81       	ldd	r19, Y+4	; 0x04
    14f2:	22 30       	cpi	r18, 0x02	; 2
    14f4:	31 05       	cpc	r19, r1
    14f6:	31 f1       	breq	.+76     	; 0x1544 <GPIO_voidWriteLowNipple+0x94>
    14f8:	8b 81       	ldd	r24, Y+3	; 0x03
    14fa:	9c 81       	ldd	r25, Y+4	; 0x04
    14fc:	83 30       	cpi	r24, 0x03	; 3
    14fe:	91 05       	cpc	r25, r1
    1500:	89 f1       	breq	.+98     	; 0x1564 <GPIO_voidWriteLowNipple+0xb4>
    1502:	3f c0       	rjmp	.+126    	; 0x1582 <GPIO_voidWriteLowNipple+0xd2>
			case GPIOA :
				PORTA &= 0xF0 ; 
    1504:	ab e3       	ldi	r26, 0x3B	; 59
    1506:	b0 e0       	ldi	r27, 0x00	; 0
    1508:	eb e3       	ldi	r30, 0x3B	; 59
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	80 81       	ld	r24, Z
    150e:	80 7f       	andi	r24, 0xF0	; 240
    1510:	8c 93       	st	X, r24
				PORTA |= copy_u8Value ;
    1512:	ab e3       	ldi	r26, 0x3B	; 59
    1514:	b0 e0       	ldi	r27, 0x00	; 0
    1516:	eb e3       	ldi	r30, 0x3B	; 59
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	90 81       	ld	r25, Z
    151c:	8a 81       	ldd	r24, Y+2	; 0x02
    151e:	89 2b       	or	r24, r25
    1520:	8c 93       	st	X, r24
    1522:	2f c0       	rjmp	.+94     	; 0x1582 <GPIO_voidWriteLowNipple+0xd2>
				break;
			case GPIOB :
				PORTB &= 0xF0 ; 
    1524:	a8 e3       	ldi	r26, 0x38	; 56
    1526:	b0 e0       	ldi	r27, 0x00	; 0
    1528:	e8 e3       	ldi	r30, 0x38	; 56
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	80 81       	ld	r24, Z
    152e:	80 7f       	andi	r24, 0xF0	; 240
    1530:	8c 93       	st	X, r24
				PORTB |= copy_u8Value ;
    1532:	a8 e3       	ldi	r26, 0x38	; 56
    1534:	b0 e0       	ldi	r27, 0x00	; 0
    1536:	e8 e3       	ldi	r30, 0x38	; 56
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	90 81       	ld	r25, Z
    153c:	8a 81       	ldd	r24, Y+2	; 0x02
    153e:	89 2b       	or	r24, r25
    1540:	8c 93       	st	X, r24
    1542:	1f c0       	rjmp	.+62     	; 0x1582 <GPIO_voidWriteLowNipple+0xd2>
				break;
			case GPIOC :
				PORTC &= 0xF0 ; 
    1544:	a5 e3       	ldi	r26, 0x35	; 53
    1546:	b0 e0       	ldi	r27, 0x00	; 0
    1548:	e5 e3       	ldi	r30, 0x35	; 53
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	80 7f       	andi	r24, 0xF0	; 240
    1550:	8c 93       	st	X, r24
				PORTC |= copy_u8Value ;
    1552:	a5 e3       	ldi	r26, 0x35	; 53
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	e5 e3       	ldi	r30, 0x35	; 53
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	90 81       	ld	r25, Z
    155c:	8a 81       	ldd	r24, Y+2	; 0x02
    155e:	89 2b       	or	r24, r25
    1560:	8c 93       	st	X, r24
    1562:	0f c0       	rjmp	.+30     	; 0x1582 <GPIO_voidWriteLowNipple+0xd2>
				break;
			case GPIOD :
				PORTD &= 0xF0 ; 
    1564:	a2 e3       	ldi	r26, 0x32	; 50
    1566:	b0 e0       	ldi	r27, 0x00	; 0
    1568:	e2 e3       	ldi	r30, 0x32	; 50
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	80 81       	ld	r24, Z
    156e:	80 7f       	andi	r24, 0xF0	; 240
    1570:	8c 93       	st	X, r24
				PORTD |= copy_u8Value ;
    1572:	a2 e3       	ldi	r26, 0x32	; 50
    1574:	b0 e0       	ldi	r27, 0x00	; 0
    1576:	e2 e3       	ldi	r30, 0x32	; 50
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	90 81       	ld	r25, Z
    157c:	8a 81       	ldd	r24, Y+2	; 0x02
    157e:	89 2b       	or	r24, r25
    1580:	8c 93       	st	X, r24
				break;	
		}
	}
    1582:	0f 90       	pop	r0
    1584:	0f 90       	pop	r0
    1586:	0f 90       	pop	r0
    1588:	0f 90       	pop	r0
    158a:	cf 91       	pop	r28
    158c:	df 91       	pop	r29
    158e:	08 95       	ret

00001590 <GPIO_voidWriteHighNipple>:
	void GPIO_voidWriteHighNipple (u8 copy_u8Port , u8 copy_u8Value )
	{
    1590:	df 93       	push	r29
    1592:	cf 93       	push	r28
    1594:	00 d0       	rcall	.+0      	; 0x1596 <GPIO_voidWriteHighNipple+0x6>
    1596:	00 d0       	rcall	.+0      	; 0x1598 <GPIO_voidWriteHighNipple+0x8>
    1598:	cd b7       	in	r28, 0x3d	; 61
    159a:	de b7       	in	r29, 0x3e	; 62
    159c:	89 83       	std	Y+1, r24	; 0x01
    159e:	6a 83       	std	Y+2, r22	; 0x02
		copy_u8Value &= 0xF0;
    15a0:	8a 81       	ldd	r24, Y+2	; 0x02
    15a2:	80 7f       	andi	r24, 0xF0	; 240
    15a4:	8a 83       	std	Y+2, r24	; 0x02
		switch (copy_u8Port) {
    15a6:	89 81       	ldd	r24, Y+1	; 0x01
    15a8:	28 2f       	mov	r18, r24
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	3c 83       	std	Y+4, r19	; 0x04
    15ae:	2b 83       	std	Y+3, r18	; 0x03
    15b0:	8b 81       	ldd	r24, Y+3	; 0x03
    15b2:	9c 81       	ldd	r25, Y+4	; 0x04
    15b4:	81 30       	cpi	r24, 0x01	; 1
    15b6:	91 05       	cpc	r25, r1
    15b8:	29 f1       	breq	.+74     	; 0x1604 <GPIO_voidWriteHighNipple+0x74>
    15ba:	2b 81       	ldd	r18, Y+3	; 0x03
    15bc:	3c 81       	ldd	r19, Y+4	; 0x04
    15be:	22 30       	cpi	r18, 0x02	; 2
    15c0:	31 05       	cpc	r19, r1
    15c2:	2c f4       	brge	.+10     	; 0x15ce <GPIO_voidWriteHighNipple+0x3e>
    15c4:	8b 81       	ldd	r24, Y+3	; 0x03
    15c6:	9c 81       	ldd	r25, Y+4	; 0x04
    15c8:	00 97       	sbiw	r24, 0x00	; 0
    15ca:	61 f0       	breq	.+24     	; 0x15e4 <GPIO_voidWriteHighNipple+0x54>
    15cc:	4a c0       	rjmp	.+148    	; 0x1662 <GPIO_voidWriteHighNipple+0xd2>
    15ce:	2b 81       	ldd	r18, Y+3	; 0x03
    15d0:	3c 81       	ldd	r19, Y+4	; 0x04
    15d2:	22 30       	cpi	r18, 0x02	; 2
    15d4:	31 05       	cpc	r19, r1
    15d6:	31 f1       	breq	.+76     	; 0x1624 <GPIO_voidWriteHighNipple+0x94>
    15d8:	8b 81       	ldd	r24, Y+3	; 0x03
    15da:	9c 81       	ldd	r25, Y+4	; 0x04
    15dc:	83 30       	cpi	r24, 0x03	; 3
    15de:	91 05       	cpc	r25, r1
    15e0:	89 f1       	breq	.+98     	; 0x1644 <GPIO_voidWriteHighNipple+0xb4>
    15e2:	3f c0       	rjmp	.+126    	; 0x1662 <GPIO_voidWriteHighNipple+0xd2>
			case GPIOA :
				PORTA &= 0x0F ; 
    15e4:	ab e3       	ldi	r26, 0x3B	; 59
    15e6:	b0 e0       	ldi	r27, 0x00	; 0
    15e8:	eb e3       	ldi	r30, 0x3B	; 59
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	80 81       	ld	r24, Z
    15ee:	8f 70       	andi	r24, 0x0F	; 15
    15f0:	8c 93       	st	X, r24
				PORTA |= copy_u8Value ;
    15f2:	ab e3       	ldi	r26, 0x3B	; 59
    15f4:	b0 e0       	ldi	r27, 0x00	; 0
    15f6:	eb e3       	ldi	r30, 0x3B	; 59
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	90 81       	ld	r25, Z
    15fc:	8a 81       	ldd	r24, Y+2	; 0x02
    15fe:	89 2b       	or	r24, r25
    1600:	8c 93       	st	X, r24
    1602:	2f c0       	rjmp	.+94     	; 0x1662 <GPIO_voidWriteHighNipple+0xd2>
				break;
			case GPIOB :
				PORTB &= 0x0F ; 
    1604:	a8 e3       	ldi	r26, 0x38	; 56
    1606:	b0 e0       	ldi	r27, 0x00	; 0
    1608:	e8 e3       	ldi	r30, 0x38	; 56
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	80 81       	ld	r24, Z
    160e:	8f 70       	andi	r24, 0x0F	; 15
    1610:	8c 93       	st	X, r24
				PORTB |= copy_u8Value ;
    1612:	a8 e3       	ldi	r26, 0x38	; 56
    1614:	b0 e0       	ldi	r27, 0x00	; 0
    1616:	e8 e3       	ldi	r30, 0x38	; 56
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	90 81       	ld	r25, Z
    161c:	8a 81       	ldd	r24, Y+2	; 0x02
    161e:	89 2b       	or	r24, r25
    1620:	8c 93       	st	X, r24
    1622:	1f c0       	rjmp	.+62     	; 0x1662 <GPIO_voidWriteHighNipple+0xd2>
				break;
			case GPIOC :
				PORTC &= 0x0F ; 
    1624:	a5 e3       	ldi	r26, 0x35	; 53
    1626:	b0 e0       	ldi	r27, 0x00	; 0
    1628:	e5 e3       	ldi	r30, 0x35	; 53
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	80 81       	ld	r24, Z
    162e:	8f 70       	andi	r24, 0x0F	; 15
    1630:	8c 93       	st	X, r24
				PORTC |= copy_u8Value ;
    1632:	a5 e3       	ldi	r26, 0x35	; 53
    1634:	b0 e0       	ldi	r27, 0x00	; 0
    1636:	e5 e3       	ldi	r30, 0x35	; 53
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	90 81       	ld	r25, Z
    163c:	8a 81       	ldd	r24, Y+2	; 0x02
    163e:	89 2b       	or	r24, r25
    1640:	8c 93       	st	X, r24
    1642:	0f c0       	rjmp	.+30     	; 0x1662 <GPIO_voidWriteHighNipple+0xd2>
				break;
			case GPIOD :
				PORTD &= 0x0F ; 
    1644:	a2 e3       	ldi	r26, 0x32	; 50
    1646:	b0 e0       	ldi	r27, 0x00	; 0
    1648:	e2 e3       	ldi	r30, 0x32	; 50
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	80 81       	ld	r24, Z
    164e:	8f 70       	andi	r24, 0x0F	; 15
    1650:	8c 93       	st	X, r24
				PORTD |= copy_u8Value ;
    1652:	a2 e3       	ldi	r26, 0x32	; 50
    1654:	b0 e0       	ldi	r27, 0x00	; 0
    1656:	e2 e3       	ldi	r30, 0x32	; 50
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	90 81       	ld	r25, Z
    165c:	8a 81       	ldd	r24, Y+2	; 0x02
    165e:	89 2b       	or	r24, r25
    1660:	8c 93       	st	X, r24
				break;	
		}
	}
    1662:	0f 90       	pop	r0
    1664:	0f 90       	pop	r0
    1666:	0f 90       	pop	r0
    1668:	0f 90       	pop	r0
    166a:	cf 91       	pop	r28
    166c:	df 91       	pop	r29
    166e:	08 95       	ret

00001670 <Keypad_voidinit>:
#include "KEYPAD_private.h"

u8 Keypad [4][4] = { {'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A', '0','=','+'}};

void Keypad_voidinit (u8 copy_u8Port )
{
    1670:	df 93       	push	r29
    1672:	cf 93       	push	r28
    1674:	0f 92       	push	r0
    1676:	cd b7       	in	r28, 0x3d	; 61
    1678:	de b7       	in	r29, 0x3e	; 62
    167a:	89 83       	std	Y+1, r24	; 0x01
	GPIO_voidSetLowNippleDDR (copy_u8Port , OUTPUT);
    167c:	89 81       	ldd	r24, Y+1	; 0x01
    167e:	61 e0       	ldi	r22, 0x01	; 1
    1680:	0e 94 21 0a 	call	0x1442	; 0x1442 <GPIO_voidSetLowNippleDDR>
	GPIO_voidSetHighNippleDDR (copy_u8Port , INPUT);
    1684:	89 81       	ldd	r24, Y+1	; 0x01
    1686:	60 e0       	ldi	r22, 0x00	; 0
    1688:	0e 94 3c 0a 	call	0x1478	; 0x1478 <GPIO_voidSetHighNippleDDR>
	GPIO_voidSetHighNippleDDR (copy_u8Port , 0xF0);
    168c:	89 81       	ldd	r24, Y+1	; 0x01
    168e:	60 ef       	ldi	r22, 0xF0	; 240
    1690:	0e 94 3c 0a 	call	0x1478	; 0x1478 <GPIO_voidSetHighNippleDDR>
}
    1694:	0f 90       	pop	r0
    1696:	cf 91       	pop	r28
    1698:	df 91       	pop	r29
    169a:	08 95       	ret

0000169c <Keypad_voidCheckVal>:
u8 Keypad_voidCheckVal (u8 copy_u8Port)
{
    169c:	df 93       	push	r29
    169e:	cf 93       	push	r28
    16a0:	00 d0       	rcall	.+0      	; 0x16a2 <Keypad_voidCheckVal+0x6>
    16a2:	00 d0       	rcall	.+0      	; 0x16a4 <Keypad_voidCheckVal+0x8>
    16a4:	0f 92       	push	r0
    16a6:	cd b7       	in	r28, 0x3d	; 61
    16a8:	de b7       	in	r29, 0x3e	; 62
    16aa:	8d 83       	std	Y+5, r24	; 0x05


	u8 Row , Column , Return  , Value = 0xFF;
    16ac:	8f ef       	ldi	r24, 0xFF	; 255
    16ae:	89 83       	std	Y+1, r24	; 0x01
	for (Row = 0 ; Row < 4 ; Row ++)
    16b0:	1c 82       	std	Y+4, r1	; 0x04
    16b2:	8c 81       	ldd	r24, Y+4	; 0x04
    16b4:	84 30       	cpi	r24, 0x04	; 4
    16b6:	78 f5       	brcc	.+94     	; 0x1716 <Keypad_voidCheckVal+0x7a>
		{
			GPIO_voidWriteLowNipple	(copy_u8Port , 0x0F);
    16b8:	8d 81       	ldd	r24, Y+5	; 0x05
    16ba:	6f e0       	ldi	r22, 0x0F	; 15
    16bc:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <GPIO_voidWriteLowNipple>
			GPIO_voidWritePin (copy_u8Port , Row , LOW );
    16c0:	8d 81       	ldd	r24, Y+5	; 0x05
    16c2:	6c 81       	ldd	r22, Y+4	; 0x04
    16c4:	40 e0       	ldi	r20, 0x00	; 0
    16c6:	0e 94 78 07 	call	0xef0	; 0xef0 <GPIO_voidWritePin>
			
			for (Column = 0 ; Column <4 ; Column ++ )
    16ca:	1b 82       	std	Y+3, r1	; 0x03
    16cc:	21 c0       	rjmp	.+66     	; 0x1710 <Keypad_voidCheckVal+0x74>
			{
				
			Return=GPIO_u8ReadPin(copy_u8Port , Column+4);
    16ce:	8b 81       	ldd	r24, Y+3	; 0x03
    16d0:	98 2f       	mov	r25, r24
    16d2:	9c 5f       	subi	r25, 0xFC	; 252
    16d4:	8d 81       	ldd	r24, Y+5	; 0x05
    16d6:	69 2f       	mov	r22, r25
    16d8:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <GPIO_u8ReadPin>
    16dc:	8a 83       	std	Y+2, r24	; 0x02
		
			if (Return == 0 )
    16de:	8a 81       	ldd	r24, Y+2	; 0x02
    16e0:	88 23       	and	r24, r24
    16e2:	99 f4       	brne	.+38     	; 0x170a <Keypad_voidCheckVal+0x6e>
			{
				Value = Keypad [Row][Column];
    16e4:	8c 81       	ldd	r24, Y+4	; 0x04
    16e6:	48 2f       	mov	r20, r24
    16e8:	50 e0       	ldi	r21, 0x00	; 0
    16ea:	8b 81       	ldd	r24, Y+3	; 0x03
    16ec:	28 2f       	mov	r18, r24
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	ca 01       	movw	r24, r20
    16f2:	88 0f       	add	r24, r24
    16f4:	99 1f       	adc	r25, r25
    16f6:	88 0f       	add	r24, r24
    16f8:	99 1f       	adc	r25, r25
    16fa:	82 0f       	add	r24, r18
    16fc:	93 1f       	adc	r25, r19
    16fe:	fc 01       	movw	r30, r24
    1700:	e8 59       	subi	r30, 0x98	; 152
    1702:	ff 4f       	sbci	r31, 0xFF	; 255
    1704:	80 81       	ld	r24, Z
    1706:	89 83       	std	Y+1, r24	; 0x01
    1708:	06 c0       	rjmp	.+12     	; 0x1716 <Keypad_voidCheckVal+0x7a>
	for (Row = 0 ; Row < 4 ; Row ++)
		{
			GPIO_voidWriteLowNipple	(copy_u8Port , 0x0F);
			GPIO_voidWritePin (copy_u8Port , Row , LOW );
			
			for (Column = 0 ; Column <4 ; Column ++ )
    170a:	8b 81       	ldd	r24, Y+3	; 0x03
    170c:	8f 5f       	subi	r24, 0xFF	; 255
    170e:	8b 83       	std	Y+3, r24	; 0x03
    1710:	8b 81       	ldd	r24, Y+3	; 0x03
    1712:	84 30       	cpi	r24, 0x04	; 4
    1714:	e0 f2       	brcs	.-72     	; 0x16ce <Keypad_voidCheckVal+0x32>
				
			}

			break;
		}
		return Value ;
    1716:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    1718:	0f 90       	pop	r0
    171a:	0f 90       	pop	r0
    171c:	0f 90       	pop	r0
    171e:	0f 90       	pop	r0
    1720:	0f 90       	pop	r0
    1722:	cf 91       	pop	r28
    1724:	df 91       	pop	r29
    1726:	08 95       	ret

00001728 <LCD_voidInit>:
#include "util/delay.h"



void LCD_voidInit()
{
    1728:	0f 93       	push	r16
    172a:	1f 93       	push	r17
    172c:	df 93       	push	r29
    172e:	cf 93       	push	r28
    1730:	cd b7       	in	r28, 0x3d	; 61
    1732:	de b7       	in	r29, 0x3e	; 62
    1734:	c4 55       	subi	r28, 0x54	; 84
    1736:	d0 40       	sbci	r29, 0x00	; 0
    1738:	0f b6       	in	r0, 0x3f	; 63
    173a:	f8 94       	cli
    173c:	de bf       	out	0x3e, r29	; 62
    173e:	0f be       	out	0x3f, r0	; 63
    1740:	cd bf       	out	0x3d, r28	; 61
    1742:	fe 01       	movw	r30, r28
    1744:	ef 5a       	subi	r30, 0xAF	; 175
    1746:	ff 4f       	sbci	r31, 0xFF	; 255
    1748:	80 e0       	ldi	r24, 0x00	; 0
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	a0 e2       	ldi	r26, 0x20	; 32
    174e:	b2 e4       	ldi	r27, 0x42	; 66
    1750:	80 83       	st	Z, r24
    1752:	91 83       	std	Z+1, r25	; 0x01
    1754:	a2 83       	std	Z+2, r26	; 0x02
    1756:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1758:	8e 01       	movw	r16, r28
    175a:	03 5b       	subi	r16, 0xB3	; 179
    175c:	1f 4f       	sbci	r17, 0xFF	; 255
    175e:	fe 01       	movw	r30, r28
    1760:	ef 5a       	subi	r30, 0xAF	; 175
    1762:	ff 4f       	sbci	r31, 0xFF	; 255
    1764:	60 81       	ld	r22, Z
    1766:	71 81       	ldd	r23, Z+1	; 0x01
    1768:	82 81       	ldd	r24, Z+2	; 0x02
    176a:	93 81       	ldd	r25, Z+3	; 0x03
    176c:	20 e0       	ldi	r18, 0x00	; 0
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	4a ef       	ldi	r20, 0xFA	; 250
    1772:	54 e4       	ldi	r21, 0x44	; 68
    1774:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1778:	dc 01       	movw	r26, r24
    177a:	cb 01       	movw	r24, r22
    177c:	f8 01       	movw	r30, r16
    177e:	80 83       	st	Z, r24
    1780:	91 83       	std	Z+1, r25	; 0x01
    1782:	a2 83       	std	Z+2, r26	; 0x02
    1784:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1786:	fe 01       	movw	r30, r28
    1788:	e3 5b       	subi	r30, 0xB3	; 179
    178a:	ff 4f       	sbci	r31, 0xFF	; 255
    178c:	60 81       	ld	r22, Z
    178e:	71 81       	ldd	r23, Z+1	; 0x01
    1790:	82 81       	ldd	r24, Z+2	; 0x02
    1792:	93 81       	ldd	r25, Z+3	; 0x03
    1794:	20 e0       	ldi	r18, 0x00	; 0
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	40 e8       	ldi	r20, 0x80	; 128
    179a:	5f e3       	ldi	r21, 0x3F	; 63
    179c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17a0:	88 23       	and	r24, r24
    17a2:	44 f4       	brge	.+16     	; 0x17b4 <LCD_voidInit+0x8c>
		__ticks = 1;
    17a4:	fe 01       	movw	r30, r28
    17a6:	e5 5b       	subi	r30, 0xB5	; 181
    17a8:	ff 4f       	sbci	r31, 0xFF	; 255
    17aa:	81 e0       	ldi	r24, 0x01	; 1
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	91 83       	std	Z+1, r25	; 0x01
    17b0:	80 83       	st	Z, r24
    17b2:	64 c0       	rjmp	.+200    	; 0x187c <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    17b4:	fe 01       	movw	r30, r28
    17b6:	e3 5b       	subi	r30, 0xB3	; 179
    17b8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ba:	60 81       	ld	r22, Z
    17bc:	71 81       	ldd	r23, Z+1	; 0x01
    17be:	82 81       	ldd	r24, Z+2	; 0x02
    17c0:	93 81       	ldd	r25, Z+3	; 0x03
    17c2:	20 e0       	ldi	r18, 0x00	; 0
    17c4:	3f ef       	ldi	r19, 0xFF	; 255
    17c6:	4f e7       	ldi	r20, 0x7F	; 127
    17c8:	57 e4       	ldi	r21, 0x47	; 71
    17ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17ce:	18 16       	cp	r1, r24
    17d0:	0c f0       	brlt	.+2      	; 0x17d4 <LCD_voidInit+0xac>
    17d2:	43 c0       	rjmp	.+134    	; 0x185a <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17d4:	fe 01       	movw	r30, r28
    17d6:	ef 5a       	subi	r30, 0xAF	; 175
    17d8:	ff 4f       	sbci	r31, 0xFF	; 255
    17da:	60 81       	ld	r22, Z
    17dc:	71 81       	ldd	r23, Z+1	; 0x01
    17de:	82 81       	ldd	r24, Z+2	; 0x02
    17e0:	93 81       	ldd	r25, Z+3	; 0x03
    17e2:	20 e0       	ldi	r18, 0x00	; 0
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	40 e2       	ldi	r20, 0x20	; 32
    17e8:	51 e4       	ldi	r21, 0x41	; 65
    17ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ee:	dc 01       	movw	r26, r24
    17f0:	cb 01       	movw	r24, r22
    17f2:	8e 01       	movw	r16, r28
    17f4:	05 5b       	subi	r16, 0xB5	; 181
    17f6:	1f 4f       	sbci	r17, 0xFF	; 255
    17f8:	bc 01       	movw	r22, r24
    17fa:	cd 01       	movw	r24, r26
    17fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1800:	dc 01       	movw	r26, r24
    1802:	cb 01       	movw	r24, r22
    1804:	f8 01       	movw	r30, r16
    1806:	91 83       	std	Z+1, r25	; 0x01
    1808:	80 83       	st	Z, r24
    180a:	1f c0       	rjmp	.+62     	; 0x184a <LCD_voidInit+0x122>
    180c:	fe 01       	movw	r30, r28
    180e:	e7 5b       	subi	r30, 0xB7	; 183
    1810:	ff 4f       	sbci	r31, 0xFF	; 255
    1812:	88 ec       	ldi	r24, 0xC8	; 200
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	91 83       	std	Z+1, r25	; 0x01
    1818:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    181a:	fe 01       	movw	r30, r28
    181c:	e7 5b       	subi	r30, 0xB7	; 183
    181e:	ff 4f       	sbci	r31, 0xFF	; 255
    1820:	80 81       	ld	r24, Z
    1822:	91 81       	ldd	r25, Z+1	; 0x01
    1824:	01 97       	sbiw	r24, 0x01	; 1
    1826:	f1 f7       	brne	.-4      	; 0x1824 <LCD_voidInit+0xfc>
    1828:	fe 01       	movw	r30, r28
    182a:	e7 5b       	subi	r30, 0xB7	; 183
    182c:	ff 4f       	sbci	r31, 0xFF	; 255
    182e:	91 83       	std	Z+1, r25	; 0x01
    1830:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1832:	de 01       	movw	r26, r28
    1834:	a5 5b       	subi	r26, 0xB5	; 181
    1836:	bf 4f       	sbci	r27, 0xFF	; 255
    1838:	fe 01       	movw	r30, r28
    183a:	e5 5b       	subi	r30, 0xB5	; 181
    183c:	ff 4f       	sbci	r31, 0xFF	; 255
    183e:	80 81       	ld	r24, Z
    1840:	91 81       	ldd	r25, Z+1	; 0x01
    1842:	01 97       	sbiw	r24, 0x01	; 1
    1844:	11 96       	adiw	r26, 0x01	; 1
    1846:	9c 93       	st	X, r25
    1848:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    184a:	fe 01       	movw	r30, r28
    184c:	e5 5b       	subi	r30, 0xB5	; 181
    184e:	ff 4f       	sbci	r31, 0xFF	; 255
    1850:	80 81       	ld	r24, Z
    1852:	91 81       	ldd	r25, Z+1	; 0x01
    1854:	00 97       	sbiw	r24, 0x00	; 0
    1856:	d1 f6       	brne	.-76     	; 0x180c <LCD_voidInit+0xe4>
    1858:	27 c0       	rjmp	.+78     	; 0x18a8 <LCD_voidInit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    185a:	8e 01       	movw	r16, r28
    185c:	05 5b       	subi	r16, 0xB5	; 181
    185e:	1f 4f       	sbci	r17, 0xFF	; 255
    1860:	fe 01       	movw	r30, r28
    1862:	e3 5b       	subi	r30, 0xB3	; 179
    1864:	ff 4f       	sbci	r31, 0xFF	; 255
    1866:	60 81       	ld	r22, Z
    1868:	71 81       	ldd	r23, Z+1	; 0x01
    186a:	82 81       	ldd	r24, Z+2	; 0x02
    186c:	93 81       	ldd	r25, Z+3	; 0x03
    186e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1872:	dc 01       	movw	r26, r24
    1874:	cb 01       	movw	r24, r22
    1876:	f8 01       	movw	r30, r16
    1878:	91 83       	std	Z+1, r25	; 0x01
    187a:	80 83       	st	Z, r24
    187c:	de 01       	movw	r26, r28
    187e:	a9 5b       	subi	r26, 0xB9	; 185
    1880:	bf 4f       	sbci	r27, 0xFF	; 255
    1882:	fe 01       	movw	r30, r28
    1884:	e5 5b       	subi	r30, 0xB5	; 181
    1886:	ff 4f       	sbci	r31, 0xFF	; 255
    1888:	80 81       	ld	r24, Z
    188a:	91 81       	ldd	r25, Z+1	; 0x01
    188c:	8d 93       	st	X+, r24
    188e:	9c 93       	st	X, r25
    1890:	fe 01       	movw	r30, r28
    1892:	e9 5b       	subi	r30, 0xB9	; 185
    1894:	ff 4f       	sbci	r31, 0xFF	; 255
    1896:	80 81       	ld	r24, Z
    1898:	91 81       	ldd	r25, Z+1	; 0x01
    189a:	01 97       	sbiw	r24, 0x01	; 1
    189c:	f1 f7       	brne	.-4      	; 0x189a <LCD_voidInit+0x172>
    189e:	fe 01       	movw	r30, r28
    18a0:	e9 5b       	subi	r30, 0xB9	; 185
    18a2:	ff 4f       	sbci	r31, 0xFF	; 255
    18a4:	91 83       	std	Z+1, r25	; 0x01
    18a6:	80 83       	st	Z, r24
	_delay_ms(40);
	
	GPIO_voidSetPinDDR(LCD_RSPORT , LCD_RSPIN , OUTPUT);
    18a8:	82 e0       	ldi	r24, 0x02	; 2
    18aa:	60 e0       	ldi	r22, 0x00	; 0
    18ac:	41 e0       	ldi	r20, 0x01	; 1
    18ae:	0e 94 95 06 	call	0xd2a	; 0xd2a <GPIO_voidSetPinDDR>
	GPIO_voidSetPinDDR(LCD_RWPORT , LCD_RWPIN , OUTPUT);
    18b2:	82 e0       	ldi	r24, 0x02	; 2
    18b4:	61 e0       	ldi	r22, 0x01	; 1
    18b6:	41 e0       	ldi	r20, 0x01	; 1
    18b8:	0e 94 95 06 	call	0xd2a	; 0xd2a <GPIO_voidSetPinDDR>
	GPIO_voidSetPinDDR(LCD_ENPORT , LCD_ENPIN , OUTPUT);
    18bc:	82 e0       	ldi	r24, 0x02	; 2
    18be:	62 e0       	ldi	r22, 0x02	; 2
    18c0:	41 e0       	ldi	r20, 0x01	; 1
    18c2:	0e 94 95 06 	call	0xd2a	; 0xd2a <GPIO_voidSetPinDDR>
		LCD_voidSendCmd(LCD_ENTRY_MODE);
		_delay_ms(1);
		
	#elif LCD_MODE == 1
		#if LCD_NIBBLE == 0 
			GPIO_voidSetLowNippleDDR(LCD_PORT , OUTPUT);
    18c6:	80 e0       	ldi	r24, 0x00	; 0
    18c8:	61 e0       	ldi	r22, 0x01	; 1
    18ca:	0e 94 21 0a 	call	0x1442	; 0x1442 <GPIO_voidSetLowNippleDDR>
			LCD_voidSendCmd(LCD_RETURN_HOME);
    18ce:	82 e0       	ldi	r24, 0x02	; 2
    18d0:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <LCD_voidSendCmd>
    18d4:	fe 01       	movw	r30, r28
    18d6:	ed 5b       	subi	r30, 0xBD	; 189
    18d8:	ff 4f       	sbci	r31, 0xFF	; 255
    18da:	80 e0       	ldi	r24, 0x00	; 0
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	a0 e7       	ldi	r26, 0x70	; 112
    18e0:	b1 e4       	ldi	r27, 0x41	; 65
    18e2:	80 83       	st	Z, r24
    18e4:	91 83       	std	Z+1, r25	; 0x01
    18e6:	a2 83       	std	Z+2, r26	; 0x02
    18e8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18ea:	8e 01       	movw	r16, r28
    18ec:	01 5c       	subi	r16, 0xC1	; 193
    18ee:	1f 4f       	sbci	r17, 0xFF	; 255
    18f0:	fe 01       	movw	r30, r28
    18f2:	ed 5b       	subi	r30, 0xBD	; 189
    18f4:	ff 4f       	sbci	r31, 0xFF	; 255
    18f6:	60 81       	ld	r22, Z
    18f8:	71 81       	ldd	r23, Z+1	; 0x01
    18fa:	82 81       	ldd	r24, Z+2	; 0x02
    18fc:	93 81       	ldd	r25, Z+3	; 0x03
    18fe:	20 e0       	ldi	r18, 0x00	; 0
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	4a ef       	ldi	r20, 0xFA	; 250
    1904:	54 e4       	ldi	r21, 0x44	; 68
    1906:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    190a:	dc 01       	movw	r26, r24
    190c:	cb 01       	movw	r24, r22
    190e:	f8 01       	movw	r30, r16
    1910:	80 83       	st	Z, r24
    1912:	91 83       	std	Z+1, r25	; 0x01
    1914:	a2 83       	std	Z+2, r26	; 0x02
    1916:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1918:	fe 01       	movw	r30, r28
    191a:	ff 96       	adiw	r30, 0x3f	; 63
    191c:	60 81       	ld	r22, Z
    191e:	71 81       	ldd	r23, Z+1	; 0x01
    1920:	82 81       	ldd	r24, Z+2	; 0x02
    1922:	93 81       	ldd	r25, Z+3	; 0x03
    1924:	20 e0       	ldi	r18, 0x00	; 0
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	40 e8       	ldi	r20, 0x80	; 128
    192a:	5f e3       	ldi	r21, 0x3F	; 63
    192c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1930:	88 23       	and	r24, r24
    1932:	2c f4       	brge	.+10     	; 0x193e <LCD_voidInit+0x216>
		__ticks = 1;
    1934:	81 e0       	ldi	r24, 0x01	; 1
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	9e af       	std	Y+62, r25	; 0x3e
    193a:	8d af       	std	Y+61, r24	; 0x3d
    193c:	46 c0       	rjmp	.+140    	; 0x19ca <LCD_voidInit+0x2a2>
	else if (__tmp > 65535)
    193e:	fe 01       	movw	r30, r28
    1940:	ff 96       	adiw	r30, 0x3f	; 63
    1942:	60 81       	ld	r22, Z
    1944:	71 81       	ldd	r23, Z+1	; 0x01
    1946:	82 81       	ldd	r24, Z+2	; 0x02
    1948:	93 81       	ldd	r25, Z+3	; 0x03
    194a:	20 e0       	ldi	r18, 0x00	; 0
    194c:	3f ef       	ldi	r19, 0xFF	; 255
    194e:	4f e7       	ldi	r20, 0x7F	; 127
    1950:	57 e4       	ldi	r21, 0x47	; 71
    1952:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1956:	18 16       	cp	r1, r24
    1958:	64 f5       	brge	.+88     	; 0x19b2 <LCD_voidInit+0x28a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    195a:	fe 01       	movw	r30, r28
    195c:	ed 5b       	subi	r30, 0xBD	; 189
    195e:	ff 4f       	sbci	r31, 0xFF	; 255
    1960:	60 81       	ld	r22, Z
    1962:	71 81       	ldd	r23, Z+1	; 0x01
    1964:	82 81       	ldd	r24, Z+2	; 0x02
    1966:	93 81       	ldd	r25, Z+3	; 0x03
    1968:	20 e0       	ldi	r18, 0x00	; 0
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	40 e2       	ldi	r20, 0x20	; 32
    196e:	51 e4       	ldi	r21, 0x41	; 65
    1970:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1974:	dc 01       	movw	r26, r24
    1976:	cb 01       	movw	r24, r22
    1978:	bc 01       	movw	r22, r24
    197a:	cd 01       	movw	r24, r26
    197c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1980:	dc 01       	movw	r26, r24
    1982:	cb 01       	movw	r24, r22
    1984:	9e af       	std	Y+62, r25	; 0x3e
    1986:	8d af       	std	Y+61, r24	; 0x3d
    1988:	0f c0       	rjmp	.+30     	; 0x19a8 <LCD_voidInit+0x280>
    198a:	88 ec       	ldi	r24, 0xC8	; 200
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	9c af       	std	Y+60, r25	; 0x3c
    1990:	8b af       	std	Y+59, r24	; 0x3b
    1992:	8b ad       	ldd	r24, Y+59	; 0x3b
    1994:	9c ad       	ldd	r25, Y+60	; 0x3c
    1996:	01 97       	sbiw	r24, 0x01	; 1
    1998:	f1 f7       	brne	.-4      	; 0x1996 <LCD_voidInit+0x26e>
    199a:	9c af       	std	Y+60, r25	; 0x3c
    199c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    199e:	8d ad       	ldd	r24, Y+61	; 0x3d
    19a0:	9e ad       	ldd	r25, Y+62	; 0x3e
    19a2:	01 97       	sbiw	r24, 0x01	; 1
    19a4:	9e af       	std	Y+62, r25	; 0x3e
    19a6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19a8:	8d ad       	ldd	r24, Y+61	; 0x3d
    19aa:	9e ad       	ldd	r25, Y+62	; 0x3e
    19ac:	00 97       	sbiw	r24, 0x00	; 0
    19ae:	69 f7       	brne	.-38     	; 0x198a <LCD_voidInit+0x262>
    19b0:	16 c0       	rjmp	.+44     	; 0x19de <LCD_voidInit+0x2b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19b2:	fe 01       	movw	r30, r28
    19b4:	ff 96       	adiw	r30, 0x3f	; 63
    19b6:	60 81       	ld	r22, Z
    19b8:	71 81       	ldd	r23, Z+1	; 0x01
    19ba:	82 81       	ldd	r24, Z+2	; 0x02
    19bc:	93 81       	ldd	r25, Z+3	; 0x03
    19be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19c2:	dc 01       	movw	r26, r24
    19c4:	cb 01       	movw	r24, r22
    19c6:	9e af       	std	Y+62, r25	; 0x3e
    19c8:	8d af       	std	Y+61, r24	; 0x3d
    19ca:	8d ad       	ldd	r24, Y+61	; 0x3d
    19cc:	9e ad       	ldd	r25, Y+62	; 0x3e
    19ce:	9a af       	std	Y+58, r25	; 0x3a
    19d0:	89 af       	std	Y+57, r24	; 0x39
    19d2:	89 ad       	ldd	r24, Y+57	; 0x39
    19d4:	9a ad       	ldd	r25, Y+58	; 0x3a
    19d6:	01 97       	sbiw	r24, 0x01	; 1
    19d8:	f1 f7       	brne	.-4      	; 0x19d6 <LCD_voidInit+0x2ae>
    19da:	9a af       	std	Y+58, r25	; 0x3a
    19dc:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(15);
			LCD_voidSendCmd(LCD_Function_4BIT_2Lines);
    19de:	88 e2       	ldi	r24, 0x28	; 40
    19e0:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <LCD_voidSendCmd>
    19e4:	80 e0       	ldi	r24, 0x00	; 0
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	a0 e8       	ldi	r26, 0x80	; 128
    19ea:	bf e3       	ldi	r27, 0x3F	; 63
    19ec:	8d ab       	std	Y+53, r24	; 0x35
    19ee:	9e ab       	std	Y+54, r25	; 0x36
    19f0:	af ab       	std	Y+55, r26	; 0x37
    19f2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19f4:	6d a9       	ldd	r22, Y+53	; 0x35
    19f6:	7e a9       	ldd	r23, Y+54	; 0x36
    19f8:	8f a9       	ldd	r24, Y+55	; 0x37
    19fa:	98 ad       	ldd	r25, Y+56	; 0x38
    19fc:	20 e0       	ldi	r18, 0x00	; 0
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	4a ef       	ldi	r20, 0xFA	; 250
    1a02:	54 e4       	ldi	r21, 0x44	; 68
    1a04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a08:	dc 01       	movw	r26, r24
    1a0a:	cb 01       	movw	r24, r22
    1a0c:	89 ab       	std	Y+49, r24	; 0x31
    1a0e:	9a ab       	std	Y+50, r25	; 0x32
    1a10:	ab ab       	std	Y+51, r26	; 0x33
    1a12:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1a14:	69 a9       	ldd	r22, Y+49	; 0x31
    1a16:	7a a9       	ldd	r23, Y+50	; 0x32
    1a18:	8b a9       	ldd	r24, Y+51	; 0x33
    1a1a:	9c a9       	ldd	r25, Y+52	; 0x34
    1a1c:	20 e0       	ldi	r18, 0x00	; 0
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	40 e8       	ldi	r20, 0x80	; 128
    1a22:	5f e3       	ldi	r21, 0x3F	; 63
    1a24:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a28:	88 23       	and	r24, r24
    1a2a:	2c f4       	brge	.+10     	; 0x1a36 <LCD_voidInit+0x30e>
		__ticks = 1;
    1a2c:	81 e0       	ldi	r24, 0x01	; 1
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	98 ab       	std	Y+48, r25	; 0x30
    1a32:	8f a7       	std	Y+47, r24	; 0x2f
    1a34:	3f c0       	rjmp	.+126    	; 0x1ab4 <LCD_voidInit+0x38c>
	else if (__tmp > 65535)
    1a36:	69 a9       	ldd	r22, Y+49	; 0x31
    1a38:	7a a9       	ldd	r23, Y+50	; 0x32
    1a3a:	8b a9       	ldd	r24, Y+51	; 0x33
    1a3c:	9c a9       	ldd	r25, Y+52	; 0x34
    1a3e:	20 e0       	ldi	r18, 0x00	; 0
    1a40:	3f ef       	ldi	r19, 0xFF	; 255
    1a42:	4f e7       	ldi	r20, 0x7F	; 127
    1a44:	57 e4       	ldi	r21, 0x47	; 71
    1a46:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a4a:	18 16       	cp	r1, r24
    1a4c:	4c f5       	brge	.+82     	; 0x1aa0 <LCD_voidInit+0x378>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a4e:	6d a9       	ldd	r22, Y+53	; 0x35
    1a50:	7e a9       	ldd	r23, Y+54	; 0x36
    1a52:	8f a9       	ldd	r24, Y+55	; 0x37
    1a54:	98 ad       	ldd	r25, Y+56	; 0x38
    1a56:	20 e0       	ldi	r18, 0x00	; 0
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	40 e2       	ldi	r20, 0x20	; 32
    1a5c:	51 e4       	ldi	r21, 0x41	; 65
    1a5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a62:	dc 01       	movw	r26, r24
    1a64:	cb 01       	movw	r24, r22
    1a66:	bc 01       	movw	r22, r24
    1a68:	cd 01       	movw	r24, r26
    1a6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a6e:	dc 01       	movw	r26, r24
    1a70:	cb 01       	movw	r24, r22
    1a72:	98 ab       	std	Y+48, r25	; 0x30
    1a74:	8f a7       	std	Y+47, r24	; 0x2f
    1a76:	0f c0       	rjmp	.+30     	; 0x1a96 <LCD_voidInit+0x36e>
    1a78:	88 ec       	ldi	r24, 0xC8	; 200
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	9e a7       	std	Y+46, r25	; 0x2e
    1a7e:	8d a7       	std	Y+45, r24	; 0x2d
    1a80:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a82:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a84:	01 97       	sbiw	r24, 0x01	; 1
    1a86:	f1 f7       	brne	.-4      	; 0x1a84 <LCD_voidInit+0x35c>
    1a88:	9e a7       	std	Y+46, r25	; 0x2e
    1a8a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a8c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a8e:	98 a9       	ldd	r25, Y+48	; 0x30
    1a90:	01 97       	sbiw	r24, 0x01	; 1
    1a92:	98 ab       	std	Y+48, r25	; 0x30
    1a94:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a96:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a98:	98 a9       	ldd	r25, Y+48	; 0x30
    1a9a:	00 97       	sbiw	r24, 0x00	; 0
    1a9c:	69 f7       	brne	.-38     	; 0x1a78 <LCD_voidInit+0x350>
    1a9e:	14 c0       	rjmp	.+40     	; 0x1ac8 <LCD_voidInit+0x3a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aa0:	69 a9       	ldd	r22, Y+49	; 0x31
    1aa2:	7a a9       	ldd	r23, Y+50	; 0x32
    1aa4:	8b a9       	ldd	r24, Y+51	; 0x33
    1aa6:	9c a9       	ldd	r25, Y+52	; 0x34
    1aa8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aac:	dc 01       	movw	r26, r24
    1aae:	cb 01       	movw	r24, r22
    1ab0:	98 ab       	std	Y+48, r25	; 0x30
    1ab2:	8f a7       	std	Y+47, r24	; 0x2f
    1ab4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ab6:	98 a9       	ldd	r25, Y+48	; 0x30
    1ab8:	9c a7       	std	Y+44, r25	; 0x2c
    1aba:	8b a7       	std	Y+43, r24	; 0x2b
    1abc:	8b a5       	ldd	r24, Y+43	; 0x2b
    1abe:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ac0:	01 97       	sbiw	r24, 0x01	; 1
    1ac2:	f1 f7       	brne	.-4      	; 0x1ac0 <LCD_voidInit+0x398>
    1ac4:	9c a7       	std	Y+44, r25	; 0x2c
    1ac6:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(1);
		    LCD_voidSendCmd(LCD_DISP_ON_CURSOR_ON);
    1ac8:	8e e0       	ldi	r24, 0x0E	; 14
    1aca:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <LCD_voidSendCmd>
    1ace:	80 e0       	ldi	r24, 0x00	; 0
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	a0 e8       	ldi	r26, 0x80	; 128
    1ad4:	bf e3       	ldi	r27, 0x3F	; 63
    1ad6:	8f a3       	std	Y+39, r24	; 0x27
    1ad8:	98 a7       	std	Y+40, r25	; 0x28
    1ada:	a9 a7       	std	Y+41, r26	; 0x29
    1adc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ade:	6f a1       	ldd	r22, Y+39	; 0x27
    1ae0:	78 a5       	ldd	r23, Y+40	; 0x28
    1ae2:	89 a5       	ldd	r24, Y+41	; 0x29
    1ae4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ae6:	20 e0       	ldi	r18, 0x00	; 0
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	4a ef       	ldi	r20, 0xFA	; 250
    1aec:	54 e4       	ldi	r21, 0x44	; 68
    1aee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1af2:	dc 01       	movw	r26, r24
    1af4:	cb 01       	movw	r24, r22
    1af6:	8b a3       	std	Y+35, r24	; 0x23
    1af8:	9c a3       	std	Y+36, r25	; 0x24
    1afa:	ad a3       	std	Y+37, r26	; 0x25
    1afc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1afe:	6b a1       	ldd	r22, Y+35	; 0x23
    1b00:	7c a1       	ldd	r23, Y+36	; 0x24
    1b02:	8d a1       	ldd	r24, Y+37	; 0x25
    1b04:	9e a1       	ldd	r25, Y+38	; 0x26
    1b06:	20 e0       	ldi	r18, 0x00	; 0
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	40 e8       	ldi	r20, 0x80	; 128
    1b0c:	5f e3       	ldi	r21, 0x3F	; 63
    1b0e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b12:	88 23       	and	r24, r24
    1b14:	2c f4       	brge	.+10     	; 0x1b20 <LCD_voidInit+0x3f8>
		__ticks = 1;
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	9a a3       	std	Y+34, r25	; 0x22
    1b1c:	89 a3       	std	Y+33, r24	; 0x21
    1b1e:	3f c0       	rjmp	.+126    	; 0x1b9e <LCD_voidInit+0x476>
	else if (__tmp > 65535)
    1b20:	6b a1       	ldd	r22, Y+35	; 0x23
    1b22:	7c a1       	ldd	r23, Y+36	; 0x24
    1b24:	8d a1       	ldd	r24, Y+37	; 0x25
    1b26:	9e a1       	ldd	r25, Y+38	; 0x26
    1b28:	20 e0       	ldi	r18, 0x00	; 0
    1b2a:	3f ef       	ldi	r19, 0xFF	; 255
    1b2c:	4f e7       	ldi	r20, 0x7F	; 127
    1b2e:	57 e4       	ldi	r21, 0x47	; 71
    1b30:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b34:	18 16       	cp	r1, r24
    1b36:	4c f5       	brge	.+82     	; 0x1b8a <LCD_voidInit+0x462>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b38:	6f a1       	ldd	r22, Y+39	; 0x27
    1b3a:	78 a5       	ldd	r23, Y+40	; 0x28
    1b3c:	89 a5       	ldd	r24, Y+41	; 0x29
    1b3e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b40:	20 e0       	ldi	r18, 0x00	; 0
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	40 e2       	ldi	r20, 0x20	; 32
    1b46:	51 e4       	ldi	r21, 0x41	; 65
    1b48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b4c:	dc 01       	movw	r26, r24
    1b4e:	cb 01       	movw	r24, r22
    1b50:	bc 01       	movw	r22, r24
    1b52:	cd 01       	movw	r24, r26
    1b54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b58:	dc 01       	movw	r26, r24
    1b5a:	cb 01       	movw	r24, r22
    1b5c:	9a a3       	std	Y+34, r25	; 0x22
    1b5e:	89 a3       	std	Y+33, r24	; 0x21
    1b60:	0f c0       	rjmp	.+30     	; 0x1b80 <LCD_voidInit+0x458>
    1b62:	88 ec       	ldi	r24, 0xC8	; 200
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	98 a3       	std	Y+32, r25	; 0x20
    1b68:	8f 8f       	std	Y+31, r24	; 0x1f
    1b6a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b6c:	98 a1       	ldd	r25, Y+32	; 0x20
    1b6e:	01 97       	sbiw	r24, 0x01	; 1
    1b70:	f1 f7       	brne	.-4      	; 0x1b6e <LCD_voidInit+0x446>
    1b72:	98 a3       	std	Y+32, r25	; 0x20
    1b74:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b76:	89 a1       	ldd	r24, Y+33	; 0x21
    1b78:	9a a1       	ldd	r25, Y+34	; 0x22
    1b7a:	01 97       	sbiw	r24, 0x01	; 1
    1b7c:	9a a3       	std	Y+34, r25	; 0x22
    1b7e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b80:	89 a1       	ldd	r24, Y+33	; 0x21
    1b82:	9a a1       	ldd	r25, Y+34	; 0x22
    1b84:	00 97       	sbiw	r24, 0x00	; 0
    1b86:	69 f7       	brne	.-38     	; 0x1b62 <LCD_voidInit+0x43a>
    1b88:	14 c0       	rjmp	.+40     	; 0x1bb2 <LCD_voidInit+0x48a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b8a:	6b a1       	ldd	r22, Y+35	; 0x23
    1b8c:	7c a1       	ldd	r23, Y+36	; 0x24
    1b8e:	8d a1       	ldd	r24, Y+37	; 0x25
    1b90:	9e a1       	ldd	r25, Y+38	; 0x26
    1b92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b96:	dc 01       	movw	r26, r24
    1b98:	cb 01       	movw	r24, r22
    1b9a:	9a a3       	std	Y+34, r25	; 0x22
    1b9c:	89 a3       	std	Y+33, r24	; 0x21
    1b9e:	89 a1       	ldd	r24, Y+33	; 0x21
    1ba0:	9a a1       	ldd	r25, Y+34	; 0x22
    1ba2:	9e 8f       	std	Y+30, r25	; 0x1e
    1ba4:	8d 8f       	std	Y+29, r24	; 0x1d
    1ba6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ba8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1baa:	01 97       	sbiw	r24, 0x01	; 1
    1bac:	f1 f7       	brne	.-4      	; 0x1baa <LCD_voidInit+0x482>
    1bae:	9e 8f       	std	Y+30, r25	; 0x1e
    1bb0:	8d 8f       	std	Y+29, r24	; 0x1d
		    _delay_ms(1);
		    LCD_voidSendCmd(LCD_CLEAR_SCREEN);
    1bb2:	81 e0       	ldi	r24, 0x01	; 1
    1bb4:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <LCD_voidSendCmd>
    1bb8:	80 e0       	ldi	r24, 0x00	; 0
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	a0 e2       	ldi	r26, 0x20	; 32
    1bbe:	b1 e4       	ldi	r27, 0x41	; 65
    1bc0:	89 8f       	std	Y+25, r24	; 0x19
    1bc2:	9a 8f       	std	Y+26, r25	; 0x1a
    1bc4:	ab 8f       	std	Y+27, r26	; 0x1b
    1bc6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bc8:	69 8d       	ldd	r22, Y+25	; 0x19
    1bca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bcc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bd0:	20 e0       	ldi	r18, 0x00	; 0
    1bd2:	30 e0       	ldi	r19, 0x00	; 0
    1bd4:	4a ef       	ldi	r20, 0xFA	; 250
    1bd6:	54 e4       	ldi	r21, 0x44	; 68
    1bd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bdc:	dc 01       	movw	r26, r24
    1bde:	cb 01       	movw	r24, r22
    1be0:	8d 8b       	std	Y+21, r24	; 0x15
    1be2:	9e 8b       	std	Y+22, r25	; 0x16
    1be4:	af 8b       	std	Y+23, r26	; 0x17
    1be6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1be8:	6d 89       	ldd	r22, Y+21	; 0x15
    1bea:	7e 89       	ldd	r23, Y+22	; 0x16
    1bec:	8f 89       	ldd	r24, Y+23	; 0x17
    1bee:	98 8d       	ldd	r25, Y+24	; 0x18
    1bf0:	20 e0       	ldi	r18, 0x00	; 0
    1bf2:	30 e0       	ldi	r19, 0x00	; 0
    1bf4:	40 e8       	ldi	r20, 0x80	; 128
    1bf6:	5f e3       	ldi	r21, 0x3F	; 63
    1bf8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bfc:	88 23       	and	r24, r24
    1bfe:	2c f4       	brge	.+10     	; 0x1c0a <LCD_voidInit+0x4e2>
		__ticks = 1;
    1c00:	81 e0       	ldi	r24, 0x01	; 1
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	9c 8b       	std	Y+20, r25	; 0x14
    1c06:	8b 8b       	std	Y+19, r24	; 0x13
    1c08:	3f c0       	rjmp	.+126    	; 0x1c88 <LCD_voidInit+0x560>
	else if (__tmp > 65535)
    1c0a:	6d 89       	ldd	r22, Y+21	; 0x15
    1c0c:	7e 89       	ldd	r23, Y+22	; 0x16
    1c0e:	8f 89       	ldd	r24, Y+23	; 0x17
    1c10:	98 8d       	ldd	r25, Y+24	; 0x18
    1c12:	20 e0       	ldi	r18, 0x00	; 0
    1c14:	3f ef       	ldi	r19, 0xFF	; 255
    1c16:	4f e7       	ldi	r20, 0x7F	; 127
    1c18:	57 e4       	ldi	r21, 0x47	; 71
    1c1a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c1e:	18 16       	cp	r1, r24
    1c20:	4c f5       	brge	.+82     	; 0x1c74 <LCD_voidInit+0x54c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c22:	69 8d       	ldd	r22, Y+25	; 0x19
    1c24:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c26:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c28:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c2a:	20 e0       	ldi	r18, 0x00	; 0
    1c2c:	30 e0       	ldi	r19, 0x00	; 0
    1c2e:	40 e2       	ldi	r20, 0x20	; 32
    1c30:	51 e4       	ldi	r21, 0x41	; 65
    1c32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c36:	dc 01       	movw	r26, r24
    1c38:	cb 01       	movw	r24, r22
    1c3a:	bc 01       	movw	r22, r24
    1c3c:	cd 01       	movw	r24, r26
    1c3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c42:	dc 01       	movw	r26, r24
    1c44:	cb 01       	movw	r24, r22
    1c46:	9c 8b       	std	Y+20, r25	; 0x14
    1c48:	8b 8b       	std	Y+19, r24	; 0x13
    1c4a:	0f c0       	rjmp	.+30     	; 0x1c6a <LCD_voidInit+0x542>
    1c4c:	88 ec       	ldi	r24, 0xC8	; 200
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	9a 8b       	std	Y+18, r25	; 0x12
    1c52:	89 8b       	std	Y+17, r24	; 0x11
    1c54:	89 89       	ldd	r24, Y+17	; 0x11
    1c56:	9a 89       	ldd	r25, Y+18	; 0x12
    1c58:	01 97       	sbiw	r24, 0x01	; 1
    1c5a:	f1 f7       	brne	.-4      	; 0x1c58 <LCD_voidInit+0x530>
    1c5c:	9a 8b       	std	Y+18, r25	; 0x12
    1c5e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c60:	8b 89       	ldd	r24, Y+19	; 0x13
    1c62:	9c 89       	ldd	r25, Y+20	; 0x14
    1c64:	01 97       	sbiw	r24, 0x01	; 1
    1c66:	9c 8b       	std	Y+20, r25	; 0x14
    1c68:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c6a:	8b 89       	ldd	r24, Y+19	; 0x13
    1c6c:	9c 89       	ldd	r25, Y+20	; 0x14
    1c6e:	00 97       	sbiw	r24, 0x00	; 0
    1c70:	69 f7       	brne	.-38     	; 0x1c4c <LCD_voidInit+0x524>
    1c72:	14 c0       	rjmp	.+40     	; 0x1c9c <LCD_voidInit+0x574>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c74:	6d 89       	ldd	r22, Y+21	; 0x15
    1c76:	7e 89       	ldd	r23, Y+22	; 0x16
    1c78:	8f 89       	ldd	r24, Y+23	; 0x17
    1c7a:	98 8d       	ldd	r25, Y+24	; 0x18
    1c7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c80:	dc 01       	movw	r26, r24
    1c82:	cb 01       	movw	r24, r22
    1c84:	9c 8b       	std	Y+20, r25	; 0x14
    1c86:	8b 8b       	std	Y+19, r24	; 0x13
    1c88:	8b 89       	ldd	r24, Y+19	; 0x13
    1c8a:	9c 89       	ldd	r25, Y+20	; 0x14
    1c8c:	98 8b       	std	Y+16, r25	; 0x10
    1c8e:	8f 87       	std	Y+15, r24	; 0x0f
    1c90:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c92:	98 89       	ldd	r25, Y+16	; 0x10
    1c94:	01 97       	sbiw	r24, 0x01	; 1
    1c96:	f1 f7       	brne	.-4      	; 0x1c94 <LCD_voidInit+0x56c>
    1c98:	98 8b       	std	Y+16, r25	; 0x10
    1c9a:	8f 87       	std	Y+15, r24	; 0x0f
		    _delay_ms(10);
		    LCD_voidSendCmd(LCD_ENTRY_MODE);
    1c9c:	86 e0       	ldi	r24, 0x06	; 6
    1c9e:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <LCD_voidSendCmd>
    1ca2:	80 e0       	ldi	r24, 0x00	; 0
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	a0 e8       	ldi	r26, 0x80	; 128
    1ca8:	bf e3       	ldi	r27, 0x3F	; 63
    1caa:	8b 87       	std	Y+11, r24	; 0x0b
    1cac:	9c 87       	std	Y+12, r25	; 0x0c
    1cae:	ad 87       	std	Y+13, r26	; 0x0d
    1cb0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cb2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cb4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cb6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cb8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cba:	20 e0       	ldi	r18, 0x00	; 0
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	4a ef       	ldi	r20, 0xFA	; 250
    1cc0:	54 e4       	ldi	r21, 0x44	; 68
    1cc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cc6:	dc 01       	movw	r26, r24
    1cc8:	cb 01       	movw	r24, r22
    1cca:	8f 83       	std	Y+7, r24	; 0x07
    1ccc:	98 87       	std	Y+8, r25	; 0x08
    1cce:	a9 87       	std	Y+9, r26	; 0x09
    1cd0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cd2:	6f 81       	ldd	r22, Y+7	; 0x07
    1cd4:	78 85       	ldd	r23, Y+8	; 0x08
    1cd6:	89 85       	ldd	r24, Y+9	; 0x09
    1cd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cda:	20 e0       	ldi	r18, 0x00	; 0
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	40 e8       	ldi	r20, 0x80	; 128
    1ce0:	5f e3       	ldi	r21, 0x3F	; 63
    1ce2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ce6:	88 23       	and	r24, r24
    1ce8:	2c f4       	brge	.+10     	; 0x1cf4 <LCD_voidInit+0x5cc>
		__ticks = 1;
    1cea:	81 e0       	ldi	r24, 0x01	; 1
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	9e 83       	std	Y+6, r25	; 0x06
    1cf0:	8d 83       	std	Y+5, r24	; 0x05
    1cf2:	3f c0       	rjmp	.+126    	; 0x1d72 <LCD_voidInit+0x64a>
	else if (__tmp > 65535)
    1cf4:	6f 81       	ldd	r22, Y+7	; 0x07
    1cf6:	78 85       	ldd	r23, Y+8	; 0x08
    1cf8:	89 85       	ldd	r24, Y+9	; 0x09
    1cfa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cfc:	20 e0       	ldi	r18, 0x00	; 0
    1cfe:	3f ef       	ldi	r19, 0xFF	; 255
    1d00:	4f e7       	ldi	r20, 0x7F	; 127
    1d02:	57 e4       	ldi	r21, 0x47	; 71
    1d04:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d08:	18 16       	cp	r1, r24
    1d0a:	4c f5       	brge	.+82     	; 0x1d5e <LCD_voidInit+0x636>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d10:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d12:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d14:	20 e0       	ldi	r18, 0x00	; 0
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	40 e2       	ldi	r20, 0x20	; 32
    1d1a:	51 e4       	ldi	r21, 0x41	; 65
    1d1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d20:	dc 01       	movw	r26, r24
    1d22:	cb 01       	movw	r24, r22
    1d24:	bc 01       	movw	r22, r24
    1d26:	cd 01       	movw	r24, r26
    1d28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d2c:	dc 01       	movw	r26, r24
    1d2e:	cb 01       	movw	r24, r22
    1d30:	9e 83       	std	Y+6, r25	; 0x06
    1d32:	8d 83       	std	Y+5, r24	; 0x05
    1d34:	0f c0       	rjmp	.+30     	; 0x1d54 <LCD_voidInit+0x62c>
    1d36:	88 ec       	ldi	r24, 0xC8	; 200
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	9c 83       	std	Y+4, r25	; 0x04
    1d3c:	8b 83       	std	Y+3, r24	; 0x03
    1d3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d40:	9c 81       	ldd	r25, Y+4	; 0x04
    1d42:	01 97       	sbiw	r24, 0x01	; 1
    1d44:	f1 f7       	brne	.-4      	; 0x1d42 <LCD_voidInit+0x61a>
    1d46:	9c 83       	std	Y+4, r25	; 0x04
    1d48:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d4e:	01 97       	sbiw	r24, 0x01	; 1
    1d50:	9e 83       	std	Y+6, r25	; 0x06
    1d52:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d54:	8d 81       	ldd	r24, Y+5	; 0x05
    1d56:	9e 81       	ldd	r25, Y+6	; 0x06
    1d58:	00 97       	sbiw	r24, 0x00	; 0
    1d5a:	69 f7       	brne	.-38     	; 0x1d36 <LCD_voidInit+0x60e>
    1d5c:	14 c0       	rjmp	.+40     	; 0x1d86 <LCD_voidInit+0x65e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d5e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d60:	78 85       	ldd	r23, Y+8	; 0x08
    1d62:	89 85       	ldd	r24, Y+9	; 0x09
    1d64:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d6a:	dc 01       	movw	r26, r24
    1d6c:	cb 01       	movw	r24, r22
    1d6e:	9e 83       	std	Y+6, r25	; 0x06
    1d70:	8d 83       	std	Y+5, r24	; 0x05
    1d72:	8d 81       	ldd	r24, Y+5	; 0x05
    1d74:	9e 81       	ldd	r25, Y+6	; 0x06
    1d76:	9a 83       	std	Y+2, r25	; 0x02
    1d78:	89 83       	std	Y+1, r24	; 0x01
    1d7a:	89 81       	ldd	r24, Y+1	; 0x01
    1d7c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d7e:	01 97       	sbiw	r24, 0x01	; 1
    1d80:	f1 f7       	brne	.-4      	; 0x1d7e <LCD_voidInit+0x656>
    1d82:	9a 83       	std	Y+2, r25	; 0x02
    1d84:	89 83       	std	Y+1, r24	; 0x01
	#endif
	
	
	

}
    1d86:	cc 5a       	subi	r28, 0xAC	; 172
    1d88:	df 4f       	sbci	r29, 0xFF	; 255
    1d8a:	0f b6       	in	r0, 0x3f	; 63
    1d8c:	f8 94       	cli
    1d8e:	de bf       	out	0x3e, r29	; 62
    1d90:	0f be       	out	0x3f, r0	; 63
    1d92:	cd bf       	out	0x3d, r28	; 61
    1d94:	cf 91       	pop	r28
    1d96:	df 91       	pop	r29
    1d98:	1f 91       	pop	r17
    1d9a:	0f 91       	pop	r16
    1d9c:	08 95       	ret

00001d9e <LCD_voidSendCmd>:

void LCD_voidSendCmd(u8 copy_u8Cmd)
{
    1d9e:	df 93       	push	r29
    1da0:	cf 93       	push	r28
    1da2:	cd b7       	in	r28, 0x3d	; 61
    1da4:	de b7       	in	r29, 0x3e	; 62
    1da6:	2f 97       	sbiw	r28, 0x0f	; 15
    1da8:	0f b6       	in	r0, 0x3f	; 63
    1daa:	f8 94       	cli
    1dac:	de bf       	out	0x3e, r29	; 62
    1dae:	0f be       	out	0x3f, r0	; 63
    1db0:	cd bf       	out	0x3d, r28	; 61
    1db2:	8f 87       	std	Y+15, r24	; 0x0f
		GPIO_voidWritePin  (LCD_RWPORT , LCD_RWPIN , 0);
		LCD_voidSendEnPulse();
		
	#elif LCD_MODE == 1
		#if LCD_NIBBLE == 0 
			GPIO_voidWriteLowNipple(LCD_PORT , copy_u8Cmd>>4);
    1db4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1db6:	98 2f       	mov	r25, r24
    1db8:	92 95       	swap	r25
    1dba:	9f 70       	andi	r25, 0x0F	; 15
    1dbc:	80 e0       	ldi	r24, 0x00	; 0
    1dbe:	69 2f       	mov	r22, r25
    1dc0:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <GPIO_voidWriteLowNipple>
			GPIO_voidWritePin  (LCD_RSPORT , LCD_RSPIN , 0);
    1dc4:	82 e0       	ldi	r24, 0x02	; 2
    1dc6:	60 e0       	ldi	r22, 0x00	; 0
    1dc8:	40 e0       	ldi	r20, 0x00	; 0
    1dca:	0e 94 78 07 	call	0xef0	; 0xef0 <GPIO_voidWritePin>
			GPIO_voidWritePin  (LCD_RWPORT , LCD_RWPIN , 0);
    1dce:	82 e0       	ldi	r24, 0x02	; 2
    1dd0:	61 e0       	ldi	r22, 0x01	; 1
    1dd2:	40 e0       	ldi	r20, 0x00	; 0
    1dd4:	0e 94 78 07 	call	0xef0	; 0xef0 <GPIO_voidWritePin>
			LCD_voidSendEnPulse();
    1dd8:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <LCD_voidSendEnPulse>
		
			GPIO_voidWriteLowNipple(LCD_PORT , copy_u8Cmd);
    1ddc:	80 e0       	ldi	r24, 0x00	; 0
    1dde:	6f 85       	ldd	r22, Y+15	; 0x0f
    1de0:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <GPIO_voidWriteLowNipple>
			GPIO_voidWritePin  (LCD_RSPORT , LCD_RSPIN , 0);
    1de4:	82 e0       	ldi	r24, 0x02	; 2
    1de6:	60 e0       	ldi	r22, 0x00	; 0
    1de8:	40 e0       	ldi	r20, 0x00	; 0
    1dea:	0e 94 78 07 	call	0xef0	; 0xef0 <GPIO_voidWritePin>
			GPIO_voidWritePin  (LCD_RWPORT , LCD_RWPIN , 0);
    1dee:	82 e0       	ldi	r24, 0x02	; 2
    1df0:	61 e0       	ldi	r22, 0x01	; 1
    1df2:	40 e0       	ldi	r20, 0x00	; 0
    1df4:	0e 94 78 07 	call	0xef0	; 0xef0 <GPIO_voidWritePin>
			LCD_voidSendEnPulse();
    1df8:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <LCD_voidSendEnPulse>
    1dfc:	80 e0       	ldi	r24, 0x00	; 0
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	a0 e0       	ldi	r26, 0x00	; 0
    1e02:	b0 e4       	ldi	r27, 0x40	; 64
    1e04:	8b 87       	std	Y+11, r24	; 0x0b
    1e06:	9c 87       	std	Y+12, r25	; 0x0c
    1e08:	ad 87       	std	Y+13, r26	; 0x0d
    1e0a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e10:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e12:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e14:	20 e0       	ldi	r18, 0x00	; 0
    1e16:	30 e0       	ldi	r19, 0x00	; 0
    1e18:	4a ef       	ldi	r20, 0xFA	; 250
    1e1a:	54 e4       	ldi	r21, 0x44	; 68
    1e1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e20:	dc 01       	movw	r26, r24
    1e22:	cb 01       	movw	r24, r22
    1e24:	8f 83       	std	Y+7, r24	; 0x07
    1e26:	98 87       	std	Y+8, r25	; 0x08
    1e28:	a9 87       	std	Y+9, r26	; 0x09
    1e2a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e2c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e2e:	78 85       	ldd	r23, Y+8	; 0x08
    1e30:	89 85       	ldd	r24, Y+9	; 0x09
    1e32:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e34:	20 e0       	ldi	r18, 0x00	; 0
    1e36:	30 e0       	ldi	r19, 0x00	; 0
    1e38:	40 e8       	ldi	r20, 0x80	; 128
    1e3a:	5f e3       	ldi	r21, 0x3F	; 63
    1e3c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e40:	88 23       	and	r24, r24
    1e42:	2c f4       	brge	.+10     	; 0x1e4e <LCD_voidSendCmd+0xb0>
		__ticks = 1;
    1e44:	81 e0       	ldi	r24, 0x01	; 1
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	9e 83       	std	Y+6, r25	; 0x06
    1e4a:	8d 83       	std	Y+5, r24	; 0x05
    1e4c:	3f c0       	rjmp	.+126    	; 0x1ecc <LCD_voidSendCmd+0x12e>
	else if (__tmp > 65535)
    1e4e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e50:	78 85       	ldd	r23, Y+8	; 0x08
    1e52:	89 85       	ldd	r24, Y+9	; 0x09
    1e54:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e56:	20 e0       	ldi	r18, 0x00	; 0
    1e58:	3f ef       	ldi	r19, 0xFF	; 255
    1e5a:	4f e7       	ldi	r20, 0x7F	; 127
    1e5c:	57 e4       	ldi	r21, 0x47	; 71
    1e5e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e62:	18 16       	cp	r1, r24
    1e64:	4c f5       	brge	.+82     	; 0x1eb8 <LCD_voidSendCmd+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e66:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e68:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e6e:	20 e0       	ldi	r18, 0x00	; 0
    1e70:	30 e0       	ldi	r19, 0x00	; 0
    1e72:	40 e2       	ldi	r20, 0x20	; 32
    1e74:	51 e4       	ldi	r21, 0x41	; 65
    1e76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e7a:	dc 01       	movw	r26, r24
    1e7c:	cb 01       	movw	r24, r22
    1e7e:	bc 01       	movw	r22, r24
    1e80:	cd 01       	movw	r24, r26
    1e82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e86:	dc 01       	movw	r26, r24
    1e88:	cb 01       	movw	r24, r22
    1e8a:	9e 83       	std	Y+6, r25	; 0x06
    1e8c:	8d 83       	std	Y+5, r24	; 0x05
    1e8e:	0f c0       	rjmp	.+30     	; 0x1eae <LCD_voidSendCmd+0x110>
    1e90:	88 ec       	ldi	r24, 0xC8	; 200
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	9c 83       	std	Y+4, r25	; 0x04
    1e96:	8b 83       	std	Y+3, r24	; 0x03
    1e98:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e9c:	01 97       	sbiw	r24, 0x01	; 1
    1e9e:	f1 f7       	brne	.-4      	; 0x1e9c <LCD_voidSendCmd+0xfe>
    1ea0:	9c 83       	std	Y+4, r25	; 0x04
    1ea2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ea4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ea6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ea8:	01 97       	sbiw	r24, 0x01	; 1
    1eaa:	9e 83       	std	Y+6, r25	; 0x06
    1eac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eae:	8d 81       	ldd	r24, Y+5	; 0x05
    1eb0:	9e 81       	ldd	r25, Y+6	; 0x06
    1eb2:	00 97       	sbiw	r24, 0x00	; 0
    1eb4:	69 f7       	brne	.-38     	; 0x1e90 <LCD_voidSendCmd+0xf2>
    1eb6:	14 c0       	rjmp	.+40     	; 0x1ee0 <LCD_voidSendCmd+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eb8:	6f 81       	ldd	r22, Y+7	; 0x07
    1eba:	78 85       	ldd	r23, Y+8	; 0x08
    1ebc:	89 85       	ldd	r24, Y+9	; 0x09
    1ebe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ec0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ec4:	dc 01       	movw	r26, r24
    1ec6:	cb 01       	movw	r24, r22
    1ec8:	9e 83       	std	Y+6, r25	; 0x06
    1eca:	8d 83       	std	Y+5, r24	; 0x05
    1ecc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ece:	9e 81       	ldd	r25, Y+6	; 0x06
    1ed0:	9a 83       	std	Y+2, r25	; 0x02
    1ed2:	89 83       	std	Y+1, r24	; 0x01
    1ed4:	89 81       	ldd	r24, Y+1	; 0x01
    1ed6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ed8:	01 97       	sbiw	r24, 0x01	; 1
    1eda:	f1 f7       	brne	.-4      	; 0x1ed8 <LCD_voidSendCmd+0x13a>
    1edc:	9a 83       	std	Y+2, r25	; 0x02
    1ede:	89 83       	std	Y+1, r24	; 0x01
			LCD_voidSendEnPulse();
			_delay_ms(2);
		#endif
	#endif
	
}
    1ee0:	2f 96       	adiw	r28, 0x0f	; 15
    1ee2:	0f b6       	in	r0, 0x3f	; 63
    1ee4:	f8 94       	cli
    1ee6:	de bf       	out	0x3e, r29	; 62
    1ee8:	0f be       	out	0x3f, r0	; 63
    1eea:	cd bf       	out	0x3d, r28	; 61
    1eec:	cf 91       	pop	r28
    1eee:	df 91       	pop	r29
    1ef0:	08 95       	ret

00001ef2 <LCD_voidSendEnPulse>:
void LCD_voidSendEnPulse ()
{
    1ef2:	df 93       	push	r29
    1ef4:	cf 93       	push	r28
    1ef6:	cd b7       	in	r28, 0x3d	; 61
    1ef8:	de b7       	in	r29, 0x3e	; 62
    1efa:	2e 97       	sbiw	r28, 0x0e	; 14
    1efc:	0f b6       	in	r0, 0x3f	; 63
    1efe:	f8 94       	cli
    1f00:	de bf       	out	0x3e, r29	; 62
    1f02:	0f be       	out	0x3f, r0	; 63
    1f04:	cd bf       	out	0x3d, r28	; 61
	GPIO_voidWritePin  (LCD_ENPORT , LCD_ENPIN , 1);
    1f06:	82 e0       	ldi	r24, 0x02	; 2
    1f08:	62 e0       	ldi	r22, 0x02	; 2
    1f0a:	41 e0       	ldi	r20, 0x01	; 1
    1f0c:	0e 94 78 07 	call	0xef0	; 0xef0 <GPIO_voidWritePin>
    1f10:	80 e0       	ldi	r24, 0x00	; 0
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	a0 e0       	ldi	r26, 0x00	; 0
    1f16:	b0 e4       	ldi	r27, 0x40	; 64
    1f18:	8b 87       	std	Y+11, r24	; 0x0b
    1f1a:	9c 87       	std	Y+12, r25	; 0x0c
    1f1c:	ad 87       	std	Y+13, r26	; 0x0d
    1f1e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f20:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f22:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f24:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f26:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f28:	20 e0       	ldi	r18, 0x00	; 0
    1f2a:	30 e0       	ldi	r19, 0x00	; 0
    1f2c:	4a ef       	ldi	r20, 0xFA	; 250
    1f2e:	54 e4       	ldi	r21, 0x44	; 68
    1f30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f34:	dc 01       	movw	r26, r24
    1f36:	cb 01       	movw	r24, r22
    1f38:	8f 83       	std	Y+7, r24	; 0x07
    1f3a:	98 87       	std	Y+8, r25	; 0x08
    1f3c:	a9 87       	std	Y+9, r26	; 0x09
    1f3e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f40:	6f 81       	ldd	r22, Y+7	; 0x07
    1f42:	78 85       	ldd	r23, Y+8	; 0x08
    1f44:	89 85       	ldd	r24, Y+9	; 0x09
    1f46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f48:	20 e0       	ldi	r18, 0x00	; 0
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	40 e8       	ldi	r20, 0x80	; 128
    1f4e:	5f e3       	ldi	r21, 0x3F	; 63
    1f50:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f54:	88 23       	and	r24, r24
    1f56:	2c f4       	brge	.+10     	; 0x1f62 <LCD_voidSendEnPulse+0x70>
		__ticks = 1;
    1f58:	81 e0       	ldi	r24, 0x01	; 1
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	9e 83       	std	Y+6, r25	; 0x06
    1f5e:	8d 83       	std	Y+5, r24	; 0x05
    1f60:	3f c0       	rjmp	.+126    	; 0x1fe0 <LCD_voidSendEnPulse+0xee>
	else if (__tmp > 65535)
    1f62:	6f 81       	ldd	r22, Y+7	; 0x07
    1f64:	78 85       	ldd	r23, Y+8	; 0x08
    1f66:	89 85       	ldd	r24, Y+9	; 0x09
    1f68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f6a:	20 e0       	ldi	r18, 0x00	; 0
    1f6c:	3f ef       	ldi	r19, 0xFF	; 255
    1f6e:	4f e7       	ldi	r20, 0x7F	; 127
    1f70:	57 e4       	ldi	r21, 0x47	; 71
    1f72:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f76:	18 16       	cp	r1, r24
    1f78:	4c f5       	brge	.+82     	; 0x1fcc <LCD_voidSendEnPulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f80:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f82:	20 e0       	ldi	r18, 0x00	; 0
    1f84:	30 e0       	ldi	r19, 0x00	; 0
    1f86:	40 e2       	ldi	r20, 0x20	; 32
    1f88:	51 e4       	ldi	r21, 0x41	; 65
    1f8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f8e:	dc 01       	movw	r26, r24
    1f90:	cb 01       	movw	r24, r22
    1f92:	bc 01       	movw	r22, r24
    1f94:	cd 01       	movw	r24, r26
    1f96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f9a:	dc 01       	movw	r26, r24
    1f9c:	cb 01       	movw	r24, r22
    1f9e:	9e 83       	std	Y+6, r25	; 0x06
    1fa0:	8d 83       	std	Y+5, r24	; 0x05
    1fa2:	0f c0       	rjmp	.+30     	; 0x1fc2 <LCD_voidSendEnPulse+0xd0>
    1fa4:	88 ec       	ldi	r24, 0xC8	; 200
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	9c 83       	std	Y+4, r25	; 0x04
    1faa:	8b 83       	std	Y+3, r24	; 0x03
    1fac:	8b 81       	ldd	r24, Y+3	; 0x03
    1fae:	9c 81       	ldd	r25, Y+4	; 0x04
    1fb0:	01 97       	sbiw	r24, 0x01	; 1
    1fb2:	f1 f7       	brne	.-4      	; 0x1fb0 <LCD_voidSendEnPulse+0xbe>
    1fb4:	9c 83       	std	Y+4, r25	; 0x04
    1fb6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fb8:	8d 81       	ldd	r24, Y+5	; 0x05
    1fba:	9e 81       	ldd	r25, Y+6	; 0x06
    1fbc:	01 97       	sbiw	r24, 0x01	; 1
    1fbe:	9e 83       	std	Y+6, r25	; 0x06
    1fc0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fc2:	8d 81       	ldd	r24, Y+5	; 0x05
    1fc4:	9e 81       	ldd	r25, Y+6	; 0x06
    1fc6:	00 97       	sbiw	r24, 0x00	; 0
    1fc8:	69 f7       	brne	.-38     	; 0x1fa4 <LCD_voidSendEnPulse+0xb2>
    1fca:	14 c0       	rjmp	.+40     	; 0x1ff4 <LCD_voidSendEnPulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fcc:	6f 81       	ldd	r22, Y+7	; 0x07
    1fce:	78 85       	ldd	r23, Y+8	; 0x08
    1fd0:	89 85       	ldd	r24, Y+9	; 0x09
    1fd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fd8:	dc 01       	movw	r26, r24
    1fda:	cb 01       	movw	r24, r22
    1fdc:	9e 83       	std	Y+6, r25	; 0x06
    1fde:	8d 83       	std	Y+5, r24	; 0x05
    1fe0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe2:	9e 81       	ldd	r25, Y+6	; 0x06
    1fe4:	9a 83       	std	Y+2, r25	; 0x02
    1fe6:	89 83       	std	Y+1, r24	; 0x01
    1fe8:	89 81       	ldd	r24, Y+1	; 0x01
    1fea:	9a 81       	ldd	r25, Y+2	; 0x02
    1fec:	01 97       	sbiw	r24, 0x01	; 1
    1fee:	f1 f7       	brne	.-4      	; 0x1fec <LCD_voidSendEnPulse+0xfa>
    1ff0:	9a 83       	std	Y+2, r25	; 0x02
    1ff2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	GPIO_voidWritePin  (LCD_ENPORT , LCD_ENPIN , 0);
    1ff4:	82 e0       	ldi	r24, 0x02	; 2
    1ff6:	62 e0       	ldi	r22, 0x02	; 2
    1ff8:	40 e0       	ldi	r20, 0x00	; 0
    1ffa:	0e 94 78 07 	call	0xef0	; 0xef0 <GPIO_voidWritePin>

}
    1ffe:	2e 96       	adiw	r28, 0x0e	; 14
    2000:	0f b6       	in	r0, 0x3f	; 63
    2002:	f8 94       	cli
    2004:	de bf       	out	0x3e, r29	; 62
    2006:	0f be       	out	0x3f, r0	; 63
    2008:	cd bf       	out	0x3d, r28	; 61
    200a:	cf 91       	pop	r28
    200c:	df 91       	pop	r29
    200e:	08 95       	ret

00002010 <LCD_voidMoveCrusor>:
void LCD_voidMoveCrusor(u8 copy_u8Line , u8 copy_u8Position)
{
    2010:	df 93       	push	r29
    2012:	cf 93       	push	r28
    2014:	cd b7       	in	r28, 0x3d	; 61
    2016:	de b7       	in	r29, 0x3e	; 62
    2018:	61 97       	sbiw	r28, 0x11	; 17
    201a:	0f b6       	in	r0, 0x3f	; 63
    201c:	f8 94       	cli
    201e:	de bf       	out	0x3e, r29	; 62
    2020:	0f be       	out	0x3f, r0	; 63
    2022:	cd bf       	out	0x3d, r28	; 61
    2024:	88 8b       	std	Y+16, r24	; 0x10
    2026:	69 8b       	std	Y+17, r22	; 0x11
	u8 data ;
if(copy_u8Line < 1 || copy_u8Line > 2 || copy_u8Position >16 || copy_u8Position <1 )	
    2028:	88 89       	ldd	r24, Y+16	; 0x10
    202a:	88 23       	and	r24, r24
    202c:	49 f0       	breq	.+18     	; 0x2040 <LCD_voidMoveCrusor+0x30>
    202e:	88 89       	ldd	r24, Y+16	; 0x10
    2030:	83 30       	cpi	r24, 0x03	; 3
    2032:	30 f4       	brcc	.+12     	; 0x2040 <LCD_voidMoveCrusor+0x30>
    2034:	89 89       	ldd	r24, Y+17	; 0x11
    2036:	81 31       	cpi	r24, 0x11	; 17
    2038:	18 f4       	brcc	.+6      	; 0x2040 <LCD_voidMoveCrusor+0x30>
    203a:	89 89       	ldd	r24, Y+17	; 0x11
    203c:	88 23       	and	r24, r24
    203e:	19 f4       	brne	.+6      	; 0x2046 <LCD_voidMoveCrusor+0x36>
{
	data = 0x80 ;
    2040:	80 e8       	ldi	r24, 0x80	; 128
    2042:	8f 87       	std	Y+15, r24	; 0x0f
    2044:	0d c0       	rjmp	.+26     	; 0x2060 <LCD_voidMoveCrusor+0x50>
}
else if (copy_u8Line ==1)
    2046:	88 89       	ldd	r24, Y+16	; 0x10
    2048:	81 30       	cpi	r24, 0x01	; 1
    204a:	21 f4       	brne	.+8      	; 0x2054 <LCD_voidMoveCrusor+0x44>
{
	data = 0x80 +(copy_u8Position -1);
    204c:	89 89       	ldd	r24, Y+17	; 0x11
    204e:	81 58       	subi	r24, 0x81	; 129
    2050:	8f 87       	std	Y+15, r24	; 0x0f
    2052:	06 c0       	rjmp	.+12     	; 0x2060 <LCD_voidMoveCrusor+0x50>
}
else if (copy_u8Line==2)
    2054:	88 89       	ldd	r24, Y+16	; 0x10
    2056:	82 30       	cpi	r24, 0x02	; 2
    2058:	19 f4       	brne	.+6      	; 0x2060 <LCD_voidMoveCrusor+0x50>
{
	data = 0xC0 + (copy_u8Position -1 );
    205a:	89 89       	ldd	r24, Y+17	; 0x11
    205c:	81 54       	subi	r24, 0x41	; 65
    205e:	8f 87       	std	Y+15, r24	; 0x0f
}
LCD_voidSendCmd(data);
    2060:	8f 85       	ldd	r24, Y+15	; 0x0f
    2062:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <LCD_voidSendCmd>
    2066:	80 e0       	ldi	r24, 0x00	; 0
    2068:	90 e0       	ldi	r25, 0x00	; 0
    206a:	a0 e8       	ldi	r26, 0x80	; 128
    206c:	bf e3       	ldi	r27, 0x3F	; 63
    206e:	8b 87       	std	Y+11, r24	; 0x0b
    2070:	9c 87       	std	Y+12, r25	; 0x0c
    2072:	ad 87       	std	Y+13, r26	; 0x0d
    2074:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2076:	6b 85       	ldd	r22, Y+11	; 0x0b
    2078:	7c 85       	ldd	r23, Y+12	; 0x0c
    207a:	8d 85       	ldd	r24, Y+13	; 0x0d
    207c:	9e 85       	ldd	r25, Y+14	; 0x0e
    207e:	20 e0       	ldi	r18, 0x00	; 0
    2080:	30 e0       	ldi	r19, 0x00	; 0
    2082:	4a ef       	ldi	r20, 0xFA	; 250
    2084:	54 e4       	ldi	r21, 0x44	; 68
    2086:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    208a:	dc 01       	movw	r26, r24
    208c:	cb 01       	movw	r24, r22
    208e:	8f 83       	std	Y+7, r24	; 0x07
    2090:	98 87       	std	Y+8, r25	; 0x08
    2092:	a9 87       	std	Y+9, r26	; 0x09
    2094:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2096:	6f 81       	ldd	r22, Y+7	; 0x07
    2098:	78 85       	ldd	r23, Y+8	; 0x08
    209a:	89 85       	ldd	r24, Y+9	; 0x09
    209c:	9a 85       	ldd	r25, Y+10	; 0x0a
    209e:	20 e0       	ldi	r18, 0x00	; 0
    20a0:	30 e0       	ldi	r19, 0x00	; 0
    20a2:	40 e8       	ldi	r20, 0x80	; 128
    20a4:	5f e3       	ldi	r21, 0x3F	; 63
    20a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20aa:	88 23       	and	r24, r24
    20ac:	2c f4       	brge	.+10     	; 0x20b8 <LCD_voidMoveCrusor+0xa8>
		__ticks = 1;
    20ae:	81 e0       	ldi	r24, 0x01	; 1
    20b0:	90 e0       	ldi	r25, 0x00	; 0
    20b2:	9e 83       	std	Y+6, r25	; 0x06
    20b4:	8d 83       	std	Y+5, r24	; 0x05
    20b6:	3f c0       	rjmp	.+126    	; 0x2136 <LCD_voidMoveCrusor+0x126>
	else if (__tmp > 65535)
    20b8:	6f 81       	ldd	r22, Y+7	; 0x07
    20ba:	78 85       	ldd	r23, Y+8	; 0x08
    20bc:	89 85       	ldd	r24, Y+9	; 0x09
    20be:	9a 85       	ldd	r25, Y+10	; 0x0a
    20c0:	20 e0       	ldi	r18, 0x00	; 0
    20c2:	3f ef       	ldi	r19, 0xFF	; 255
    20c4:	4f e7       	ldi	r20, 0x7F	; 127
    20c6:	57 e4       	ldi	r21, 0x47	; 71
    20c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20cc:	18 16       	cp	r1, r24
    20ce:	4c f5       	brge	.+82     	; 0x2122 <LCD_voidMoveCrusor+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    20d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    20d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    20d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    20d8:	20 e0       	ldi	r18, 0x00	; 0
    20da:	30 e0       	ldi	r19, 0x00	; 0
    20dc:	40 e2       	ldi	r20, 0x20	; 32
    20de:	51 e4       	ldi	r21, 0x41	; 65
    20e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20e4:	dc 01       	movw	r26, r24
    20e6:	cb 01       	movw	r24, r22
    20e8:	bc 01       	movw	r22, r24
    20ea:	cd 01       	movw	r24, r26
    20ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f0:	dc 01       	movw	r26, r24
    20f2:	cb 01       	movw	r24, r22
    20f4:	9e 83       	std	Y+6, r25	; 0x06
    20f6:	8d 83       	std	Y+5, r24	; 0x05
    20f8:	0f c0       	rjmp	.+30     	; 0x2118 <LCD_voidMoveCrusor+0x108>
    20fa:	88 ec       	ldi	r24, 0xC8	; 200
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	9c 83       	std	Y+4, r25	; 0x04
    2100:	8b 83       	std	Y+3, r24	; 0x03
    2102:	8b 81       	ldd	r24, Y+3	; 0x03
    2104:	9c 81       	ldd	r25, Y+4	; 0x04
    2106:	01 97       	sbiw	r24, 0x01	; 1
    2108:	f1 f7       	brne	.-4      	; 0x2106 <LCD_voidMoveCrusor+0xf6>
    210a:	9c 83       	std	Y+4, r25	; 0x04
    210c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    210e:	8d 81       	ldd	r24, Y+5	; 0x05
    2110:	9e 81       	ldd	r25, Y+6	; 0x06
    2112:	01 97       	sbiw	r24, 0x01	; 1
    2114:	9e 83       	std	Y+6, r25	; 0x06
    2116:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2118:	8d 81       	ldd	r24, Y+5	; 0x05
    211a:	9e 81       	ldd	r25, Y+6	; 0x06
    211c:	00 97       	sbiw	r24, 0x00	; 0
    211e:	69 f7       	brne	.-38     	; 0x20fa <LCD_voidMoveCrusor+0xea>
    2120:	14 c0       	rjmp	.+40     	; 0x214a <LCD_voidMoveCrusor+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2122:	6f 81       	ldd	r22, Y+7	; 0x07
    2124:	78 85       	ldd	r23, Y+8	; 0x08
    2126:	89 85       	ldd	r24, Y+9	; 0x09
    2128:	9a 85       	ldd	r25, Y+10	; 0x0a
    212a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    212e:	dc 01       	movw	r26, r24
    2130:	cb 01       	movw	r24, r22
    2132:	9e 83       	std	Y+6, r25	; 0x06
    2134:	8d 83       	std	Y+5, r24	; 0x05
    2136:	8d 81       	ldd	r24, Y+5	; 0x05
    2138:	9e 81       	ldd	r25, Y+6	; 0x06
    213a:	9a 83       	std	Y+2, r25	; 0x02
    213c:	89 83       	std	Y+1, r24	; 0x01
    213e:	89 81       	ldd	r24, Y+1	; 0x01
    2140:	9a 81       	ldd	r25, Y+2	; 0x02
    2142:	01 97       	sbiw	r24, 0x01	; 1
    2144:	f1 f7       	brne	.-4      	; 0x2142 <LCD_voidMoveCrusor+0x132>
    2146:	9a 83       	std	Y+2, r25	; 0x02
    2148:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(1);
}
    214a:	61 96       	adiw	r28, 0x11	; 17
    214c:	0f b6       	in	r0, 0x3f	; 63
    214e:	f8 94       	cli
    2150:	de bf       	out	0x3e, r29	; 62
    2152:	0f be       	out	0x3f, r0	; 63
    2154:	cd bf       	out	0x3d, r28	; 61
    2156:	cf 91       	pop	r28
    2158:	df 91       	pop	r29
    215a:	08 95       	ret

0000215c <LCD_voidClearScreen>:
void LCD_voidClearScreen()
{
    215c:	df 93       	push	r29
    215e:	cf 93       	push	r28
    2160:	cd b7       	in	r28, 0x3d	; 61
    2162:	de b7       	in	r29, 0x3e	; 62
    2164:	2e 97       	sbiw	r28, 0x0e	; 14
    2166:	0f b6       	in	r0, 0x3f	; 63
    2168:	f8 94       	cli
    216a:	de bf       	out	0x3e, r29	; 62
    216c:	0f be       	out	0x3f, r0	; 63
    216e:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCmd(LCD_CLEAR_SCREEN);
    2170:	81 e0       	ldi	r24, 0x01	; 1
    2172:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <LCD_voidSendCmd>
    2176:	80 e0       	ldi	r24, 0x00	; 0
    2178:	90 e0       	ldi	r25, 0x00	; 0
    217a:	a0 e2       	ldi	r26, 0x20	; 32
    217c:	b1 e4       	ldi	r27, 0x41	; 65
    217e:	8b 87       	std	Y+11, r24	; 0x0b
    2180:	9c 87       	std	Y+12, r25	; 0x0c
    2182:	ad 87       	std	Y+13, r26	; 0x0d
    2184:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2186:	6b 85       	ldd	r22, Y+11	; 0x0b
    2188:	7c 85       	ldd	r23, Y+12	; 0x0c
    218a:	8d 85       	ldd	r24, Y+13	; 0x0d
    218c:	9e 85       	ldd	r25, Y+14	; 0x0e
    218e:	20 e0       	ldi	r18, 0x00	; 0
    2190:	30 e0       	ldi	r19, 0x00	; 0
    2192:	4a ef       	ldi	r20, 0xFA	; 250
    2194:	54 e4       	ldi	r21, 0x44	; 68
    2196:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    219a:	dc 01       	movw	r26, r24
    219c:	cb 01       	movw	r24, r22
    219e:	8f 83       	std	Y+7, r24	; 0x07
    21a0:	98 87       	std	Y+8, r25	; 0x08
    21a2:	a9 87       	std	Y+9, r26	; 0x09
    21a4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21a6:	6f 81       	ldd	r22, Y+7	; 0x07
    21a8:	78 85       	ldd	r23, Y+8	; 0x08
    21aa:	89 85       	ldd	r24, Y+9	; 0x09
    21ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ae:	20 e0       	ldi	r18, 0x00	; 0
    21b0:	30 e0       	ldi	r19, 0x00	; 0
    21b2:	40 e8       	ldi	r20, 0x80	; 128
    21b4:	5f e3       	ldi	r21, 0x3F	; 63
    21b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21ba:	88 23       	and	r24, r24
    21bc:	2c f4       	brge	.+10     	; 0x21c8 <LCD_voidClearScreen+0x6c>
		__ticks = 1;
    21be:	81 e0       	ldi	r24, 0x01	; 1
    21c0:	90 e0       	ldi	r25, 0x00	; 0
    21c2:	9e 83       	std	Y+6, r25	; 0x06
    21c4:	8d 83       	std	Y+5, r24	; 0x05
    21c6:	3f c0       	rjmp	.+126    	; 0x2246 <LCD_voidClearScreen+0xea>
	else if (__tmp > 65535)
    21c8:	6f 81       	ldd	r22, Y+7	; 0x07
    21ca:	78 85       	ldd	r23, Y+8	; 0x08
    21cc:	89 85       	ldd	r24, Y+9	; 0x09
    21ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    21d0:	20 e0       	ldi	r18, 0x00	; 0
    21d2:	3f ef       	ldi	r19, 0xFF	; 255
    21d4:	4f e7       	ldi	r20, 0x7F	; 127
    21d6:	57 e4       	ldi	r21, 0x47	; 71
    21d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21dc:	18 16       	cp	r1, r24
    21de:	4c f5       	brge	.+82     	; 0x2232 <LCD_voidClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    21e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    21e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    21e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    21e8:	20 e0       	ldi	r18, 0x00	; 0
    21ea:	30 e0       	ldi	r19, 0x00	; 0
    21ec:	40 e2       	ldi	r20, 0x20	; 32
    21ee:	51 e4       	ldi	r21, 0x41	; 65
    21f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21f4:	dc 01       	movw	r26, r24
    21f6:	cb 01       	movw	r24, r22
    21f8:	bc 01       	movw	r22, r24
    21fa:	cd 01       	movw	r24, r26
    21fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2200:	dc 01       	movw	r26, r24
    2202:	cb 01       	movw	r24, r22
    2204:	9e 83       	std	Y+6, r25	; 0x06
    2206:	8d 83       	std	Y+5, r24	; 0x05
    2208:	0f c0       	rjmp	.+30     	; 0x2228 <LCD_voidClearScreen+0xcc>
    220a:	88 ec       	ldi	r24, 0xC8	; 200
    220c:	90 e0       	ldi	r25, 0x00	; 0
    220e:	9c 83       	std	Y+4, r25	; 0x04
    2210:	8b 83       	std	Y+3, r24	; 0x03
    2212:	8b 81       	ldd	r24, Y+3	; 0x03
    2214:	9c 81       	ldd	r25, Y+4	; 0x04
    2216:	01 97       	sbiw	r24, 0x01	; 1
    2218:	f1 f7       	brne	.-4      	; 0x2216 <LCD_voidClearScreen+0xba>
    221a:	9c 83       	std	Y+4, r25	; 0x04
    221c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    221e:	8d 81       	ldd	r24, Y+5	; 0x05
    2220:	9e 81       	ldd	r25, Y+6	; 0x06
    2222:	01 97       	sbiw	r24, 0x01	; 1
    2224:	9e 83       	std	Y+6, r25	; 0x06
    2226:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2228:	8d 81       	ldd	r24, Y+5	; 0x05
    222a:	9e 81       	ldd	r25, Y+6	; 0x06
    222c:	00 97       	sbiw	r24, 0x00	; 0
    222e:	69 f7       	brne	.-38     	; 0x220a <LCD_voidClearScreen+0xae>
    2230:	14 c0       	rjmp	.+40     	; 0x225a <LCD_voidClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2232:	6f 81       	ldd	r22, Y+7	; 0x07
    2234:	78 85       	ldd	r23, Y+8	; 0x08
    2236:	89 85       	ldd	r24, Y+9	; 0x09
    2238:	9a 85       	ldd	r25, Y+10	; 0x0a
    223a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    223e:	dc 01       	movw	r26, r24
    2240:	cb 01       	movw	r24, r22
    2242:	9e 83       	std	Y+6, r25	; 0x06
    2244:	8d 83       	std	Y+5, r24	; 0x05
    2246:	8d 81       	ldd	r24, Y+5	; 0x05
    2248:	9e 81       	ldd	r25, Y+6	; 0x06
    224a:	9a 83       	std	Y+2, r25	; 0x02
    224c:	89 83       	std	Y+1, r24	; 0x01
    224e:	89 81       	ldd	r24, Y+1	; 0x01
    2250:	9a 81       	ldd	r25, Y+2	; 0x02
    2252:	01 97       	sbiw	r24, 0x01	; 1
    2254:	f1 f7       	brne	.-4      	; 0x2252 <LCD_voidClearScreen+0xf6>
    2256:	9a 83       	std	Y+2, r25	; 0x02
    2258:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    225a:	2e 96       	adiw	r28, 0x0e	; 14
    225c:	0f b6       	in	r0, 0x3f	; 63
    225e:	f8 94       	cli
    2260:	de bf       	out	0x3e, r29	; 62
    2262:	0f be       	out	0x3f, r0	; 63
    2264:	cd bf       	out	0x3d, r28	; 61
    2266:	cf 91       	pop	r28
    2268:	df 91       	pop	r29
    226a:	08 95       	ret

0000226c <LCD_voidDispChar>:
void LCD_voidDispChar(u8 copy_u8char)
{
    226c:	df 93       	push	r29
    226e:	cf 93       	push	r28
    2270:	cd b7       	in	r28, 0x3d	; 61
    2272:	de b7       	in	r29, 0x3e	; 62
    2274:	2f 97       	sbiw	r28, 0x0f	; 15
    2276:	0f b6       	in	r0, 0x3f	; 63
    2278:	f8 94       	cli
    227a:	de bf       	out	0x3e, r29	; 62
    227c:	0f be       	out	0x3f, r0	; 63
    227e:	cd bf       	out	0x3d, r28	; 61
    2280:	8f 87       	std	Y+15, r24	; 0x0f
		GPIO_voidWritePin  (LCD_RWPORT , LCD_RWPIN , 0);
		LCD_voidSendEnPulse();
		
	#elif LCD_MODE == 1
		#if LCD_NIBBLE == 0 
			GPIO_voidWriteLowNipple(LCD_PORT , copy_u8char>>4);
    2282:	8f 85       	ldd	r24, Y+15	; 0x0f
    2284:	98 2f       	mov	r25, r24
    2286:	92 95       	swap	r25
    2288:	9f 70       	andi	r25, 0x0F	; 15
    228a:	80 e0       	ldi	r24, 0x00	; 0
    228c:	69 2f       	mov	r22, r25
    228e:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <GPIO_voidWriteLowNipple>
			GPIO_voidWritePin  (LCD_RSPORT , LCD_RSPIN , 1);
    2292:	82 e0       	ldi	r24, 0x02	; 2
    2294:	60 e0       	ldi	r22, 0x00	; 0
    2296:	41 e0       	ldi	r20, 0x01	; 1
    2298:	0e 94 78 07 	call	0xef0	; 0xef0 <GPIO_voidWritePin>
			GPIO_voidWritePin  (LCD_RWPORT , LCD_RWPIN , 0);
    229c:	82 e0       	ldi	r24, 0x02	; 2
    229e:	61 e0       	ldi	r22, 0x01	; 1
    22a0:	40 e0       	ldi	r20, 0x00	; 0
    22a2:	0e 94 78 07 	call	0xef0	; 0xef0 <GPIO_voidWritePin>
			LCD_voidSendEnPulse();
    22a6:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <LCD_voidSendEnPulse>
		
			GPIO_voidWriteLowNipple(LCD_PORT , copy_u8char);
    22aa:	80 e0       	ldi	r24, 0x00	; 0
    22ac:	6f 85       	ldd	r22, Y+15	; 0x0f
    22ae:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <GPIO_voidWriteLowNipple>
			GPIO_voidWritePin  (LCD_RSPORT , LCD_RSPIN , 1);
    22b2:	82 e0       	ldi	r24, 0x02	; 2
    22b4:	60 e0       	ldi	r22, 0x00	; 0
    22b6:	41 e0       	ldi	r20, 0x01	; 1
    22b8:	0e 94 78 07 	call	0xef0	; 0xef0 <GPIO_voidWritePin>
			GPIO_voidWritePin  (LCD_RWPORT , LCD_RWPIN , 0);
    22bc:	82 e0       	ldi	r24, 0x02	; 2
    22be:	61 e0       	ldi	r22, 0x01	; 1
    22c0:	40 e0       	ldi	r20, 0x00	; 0
    22c2:	0e 94 78 07 	call	0xef0	; 0xef0 <GPIO_voidWritePin>
			LCD_voidSendEnPulse();
    22c6:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <LCD_voidSendEnPulse>
    22ca:	80 e0       	ldi	r24, 0x00	; 0
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	a0 e0       	ldi	r26, 0x00	; 0
    22d0:	b0 e4       	ldi	r27, 0x40	; 64
    22d2:	8b 87       	std	Y+11, r24	; 0x0b
    22d4:	9c 87       	std	Y+12, r25	; 0x0c
    22d6:	ad 87       	std	Y+13, r26	; 0x0d
    22d8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22da:	6b 85       	ldd	r22, Y+11	; 0x0b
    22dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    22de:	8d 85       	ldd	r24, Y+13	; 0x0d
    22e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    22e2:	20 e0       	ldi	r18, 0x00	; 0
    22e4:	30 e0       	ldi	r19, 0x00	; 0
    22e6:	4a ef       	ldi	r20, 0xFA	; 250
    22e8:	54 e4       	ldi	r21, 0x44	; 68
    22ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ee:	dc 01       	movw	r26, r24
    22f0:	cb 01       	movw	r24, r22
    22f2:	8f 83       	std	Y+7, r24	; 0x07
    22f4:	98 87       	std	Y+8, r25	; 0x08
    22f6:	a9 87       	std	Y+9, r26	; 0x09
    22f8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22fa:	6f 81       	ldd	r22, Y+7	; 0x07
    22fc:	78 85       	ldd	r23, Y+8	; 0x08
    22fe:	89 85       	ldd	r24, Y+9	; 0x09
    2300:	9a 85       	ldd	r25, Y+10	; 0x0a
    2302:	20 e0       	ldi	r18, 0x00	; 0
    2304:	30 e0       	ldi	r19, 0x00	; 0
    2306:	40 e8       	ldi	r20, 0x80	; 128
    2308:	5f e3       	ldi	r21, 0x3F	; 63
    230a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    230e:	88 23       	and	r24, r24
    2310:	2c f4       	brge	.+10     	; 0x231c <LCD_voidDispChar+0xb0>
		__ticks = 1;
    2312:	81 e0       	ldi	r24, 0x01	; 1
    2314:	90 e0       	ldi	r25, 0x00	; 0
    2316:	9e 83       	std	Y+6, r25	; 0x06
    2318:	8d 83       	std	Y+5, r24	; 0x05
    231a:	3f c0       	rjmp	.+126    	; 0x239a <LCD_voidDispChar+0x12e>
	else if (__tmp > 65535)
    231c:	6f 81       	ldd	r22, Y+7	; 0x07
    231e:	78 85       	ldd	r23, Y+8	; 0x08
    2320:	89 85       	ldd	r24, Y+9	; 0x09
    2322:	9a 85       	ldd	r25, Y+10	; 0x0a
    2324:	20 e0       	ldi	r18, 0x00	; 0
    2326:	3f ef       	ldi	r19, 0xFF	; 255
    2328:	4f e7       	ldi	r20, 0x7F	; 127
    232a:	57 e4       	ldi	r21, 0x47	; 71
    232c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2330:	18 16       	cp	r1, r24
    2332:	4c f5       	brge	.+82     	; 0x2386 <LCD_voidDispChar+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2334:	6b 85       	ldd	r22, Y+11	; 0x0b
    2336:	7c 85       	ldd	r23, Y+12	; 0x0c
    2338:	8d 85       	ldd	r24, Y+13	; 0x0d
    233a:	9e 85       	ldd	r25, Y+14	; 0x0e
    233c:	20 e0       	ldi	r18, 0x00	; 0
    233e:	30 e0       	ldi	r19, 0x00	; 0
    2340:	40 e2       	ldi	r20, 0x20	; 32
    2342:	51 e4       	ldi	r21, 0x41	; 65
    2344:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2348:	dc 01       	movw	r26, r24
    234a:	cb 01       	movw	r24, r22
    234c:	bc 01       	movw	r22, r24
    234e:	cd 01       	movw	r24, r26
    2350:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2354:	dc 01       	movw	r26, r24
    2356:	cb 01       	movw	r24, r22
    2358:	9e 83       	std	Y+6, r25	; 0x06
    235a:	8d 83       	std	Y+5, r24	; 0x05
    235c:	0f c0       	rjmp	.+30     	; 0x237c <LCD_voidDispChar+0x110>
    235e:	88 ec       	ldi	r24, 0xC8	; 200
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	9c 83       	std	Y+4, r25	; 0x04
    2364:	8b 83       	std	Y+3, r24	; 0x03
    2366:	8b 81       	ldd	r24, Y+3	; 0x03
    2368:	9c 81       	ldd	r25, Y+4	; 0x04
    236a:	01 97       	sbiw	r24, 0x01	; 1
    236c:	f1 f7       	brne	.-4      	; 0x236a <LCD_voidDispChar+0xfe>
    236e:	9c 83       	std	Y+4, r25	; 0x04
    2370:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2372:	8d 81       	ldd	r24, Y+5	; 0x05
    2374:	9e 81       	ldd	r25, Y+6	; 0x06
    2376:	01 97       	sbiw	r24, 0x01	; 1
    2378:	9e 83       	std	Y+6, r25	; 0x06
    237a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    237c:	8d 81       	ldd	r24, Y+5	; 0x05
    237e:	9e 81       	ldd	r25, Y+6	; 0x06
    2380:	00 97       	sbiw	r24, 0x00	; 0
    2382:	69 f7       	brne	.-38     	; 0x235e <LCD_voidDispChar+0xf2>
    2384:	14 c0       	rjmp	.+40     	; 0x23ae <LCD_voidDispChar+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2386:	6f 81       	ldd	r22, Y+7	; 0x07
    2388:	78 85       	ldd	r23, Y+8	; 0x08
    238a:	89 85       	ldd	r24, Y+9	; 0x09
    238c:	9a 85       	ldd	r25, Y+10	; 0x0a
    238e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2392:	dc 01       	movw	r26, r24
    2394:	cb 01       	movw	r24, r22
    2396:	9e 83       	std	Y+6, r25	; 0x06
    2398:	8d 83       	std	Y+5, r24	; 0x05
    239a:	8d 81       	ldd	r24, Y+5	; 0x05
    239c:	9e 81       	ldd	r25, Y+6	; 0x06
    239e:	9a 83       	std	Y+2, r25	; 0x02
    23a0:	89 83       	std	Y+1, r24	; 0x01
    23a2:	89 81       	ldd	r24, Y+1	; 0x01
    23a4:	9a 81       	ldd	r25, Y+2	; 0x02
    23a6:	01 97       	sbiw	r24, 0x01	; 1
    23a8:	f1 f7       	brne	.-4      	; 0x23a6 <LCD_voidDispChar+0x13a>
    23aa:	9a 83       	std	Y+2, r25	; 0x02
    23ac:	89 83       	std	Y+1, r24	; 0x01
			LCD_voidSendEnPulse();
			_delay_ms(2);
		#endif
	#endif
		
}
    23ae:	2f 96       	adiw	r28, 0x0f	; 15
    23b0:	0f b6       	in	r0, 0x3f	; 63
    23b2:	f8 94       	cli
    23b4:	de bf       	out	0x3e, r29	; 62
    23b6:	0f be       	out	0x3f, r0	; 63
    23b8:	cd bf       	out	0x3d, r28	; 61
    23ba:	cf 91       	pop	r28
    23bc:	df 91       	pop	r29
    23be:	08 95       	ret

000023c0 <LCD_voidDispString>:
void LCD_voidDispString(u8 *copy_u8String)
{
    23c0:	df 93       	push	r29
    23c2:	cf 93       	push	r28
    23c4:	00 d0       	rcall	.+0      	; 0x23c6 <LCD_voidDispString+0x6>
    23c6:	cd b7       	in	r28, 0x3d	; 61
    23c8:	de b7       	in	r29, 0x3e	; 62
    23ca:	9a 83       	std	Y+2, r25	; 0x02
    23cc:	89 83       	std	Y+1, r24	; 0x01
    23ce:	0a c0       	rjmp	.+20     	; 0x23e4 <LCD_voidDispString+0x24>
	while ((*copy_u8String) != '\0')
	{
		LCD_voidDispChar (*copy_u8String);
    23d0:	e9 81       	ldd	r30, Y+1	; 0x01
    23d2:	fa 81       	ldd	r31, Y+2	; 0x02
    23d4:	80 81       	ld	r24, Z
    23d6:	0e 94 36 11 	call	0x226c	; 0x226c <LCD_voidDispChar>
		copy_u8String ++ ;
    23da:	89 81       	ldd	r24, Y+1	; 0x01
    23dc:	9a 81       	ldd	r25, Y+2	; 0x02
    23de:	01 96       	adiw	r24, 0x01	; 1
    23e0:	9a 83       	std	Y+2, r25	; 0x02
    23e2:	89 83       	std	Y+1, r24	; 0x01
	#endif
		
}
void LCD_voidDispString(u8 *copy_u8String)
{
	while ((*copy_u8String) != '\0')
    23e4:	e9 81       	ldd	r30, Y+1	; 0x01
    23e6:	fa 81       	ldd	r31, Y+2	; 0x02
    23e8:	80 81       	ld	r24, Z
    23ea:	88 23       	and	r24, r24
    23ec:	89 f7       	brne	.-30     	; 0x23d0 <LCD_voidDispString+0x10>
	{
		LCD_voidDispChar (*copy_u8String);
		copy_u8String ++ ;
	}
}
    23ee:	0f 90       	pop	r0
    23f0:	0f 90       	pop	r0
    23f2:	cf 91       	pop	r28
    23f4:	df 91       	pop	r29
    23f6:	08 95       	ret

000023f8 <SWITCH_voidIntit>:

#define F_CPU 8000000UL
#include "util/delay.h"

void SWITCH_voidIntit(u8 copy_u8Port , u8 copy_u8Pin )
{
    23f8:	df 93       	push	r29
    23fa:	cf 93       	push	r28
    23fc:	00 d0       	rcall	.+0      	; 0x23fe <SWITCH_voidIntit+0x6>
    23fe:	cd b7       	in	r28, 0x3d	; 61
    2400:	de b7       	in	r29, 0x3e	; 62
    2402:	89 83       	std	Y+1, r24	; 0x01
    2404:	6a 83       	std	Y+2, r22	; 0x02
	GPIO_voidSetPinDDR(copy_u8Port , copy_u8Pin ,INPUT);
    2406:	89 81       	ldd	r24, Y+1	; 0x01
    2408:	6a 81       	ldd	r22, Y+2	; 0x02
    240a:	40 e0       	ldi	r20, 0x00	; 0
    240c:	0e 94 95 06 	call	0xd2a	; 0xd2a <GPIO_voidSetPinDDR>
	#if PULLUP_RES == 0 
	GPIO_voidWritePin (copy_u8Port , copy_u8Pin , HIGH );
    2410:	89 81       	ldd	r24, Y+1	; 0x01
    2412:	6a 81       	ldd	r22, Y+2	; 0x02
    2414:	41 e0       	ldi	r20, 0x01	; 1
    2416:	0e 94 78 07 	call	0xef0	; 0xef0 <GPIO_voidWritePin>
	#endif
	
}
    241a:	0f 90       	pop	r0
    241c:	0f 90       	pop	r0
    241e:	cf 91       	pop	r28
    2420:	df 91       	pop	r29
    2422:	08 95       	ret

00002424 <SWITCH_u8Read>:

u8 	SWITCH_u8Read(u8 copy_u8Port , u8 copy_u8Pin )
{
    2424:	df 93       	push	r29
    2426:	cf 93       	push	r28
    2428:	cd b7       	in	r28, 0x3d	; 61
    242a:	de b7       	in	r29, 0x3e	; 62
    242c:	61 97       	sbiw	r28, 0x11	; 17
    242e:	0f b6       	in	r0, 0x3f	; 63
    2430:	f8 94       	cli
    2432:	de bf       	out	0x3e, r29	; 62
    2434:	0f be       	out	0x3f, r0	; 63
    2436:	cd bf       	out	0x3d, r28	; 61
    2438:	88 8b       	std	Y+16, r24	; 0x10
    243a:	69 8b       	std	Y+17, r22	; 0x11
    243c:	80 e0       	ldi	r24, 0x00	; 0
    243e:	90 e0       	ldi	r25, 0x00	; 0
    2440:	a8 e4       	ldi	r26, 0x48	; 72
    2442:	b2 e4       	ldi	r27, 0x42	; 66
    2444:	8b 87       	std	Y+11, r24	; 0x0b
    2446:	9c 87       	std	Y+12, r25	; 0x0c
    2448:	ad 87       	std	Y+13, r26	; 0x0d
    244a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    244c:	6b 85       	ldd	r22, Y+11	; 0x0b
    244e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2450:	8d 85       	ldd	r24, Y+13	; 0x0d
    2452:	9e 85       	ldd	r25, Y+14	; 0x0e
    2454:	20 e0       	ldi	r18, 0x00	; 0
    2456:	30 e0       	ldi	r19, 0x00	; 0
    2458:	4a ef       	ldi	r20, 0xFA	; 250
    245a:	54 e4       	ldi	r21, 0x44	; 68
    245c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2460:	dc 01       	movw	r26, r24
    2462:	cb 01       	movw	r24, r22
    2464:	8f 83       	std	Y+7, r24	; 0x07
    2466:	98 87       	std	Y+8, r25	; 0x08
    2468:	a9 87       	std	Y+9, r26	; 0x09
    246a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    246c:	6f 81       	ldd	r22, Y+7	; 0x07
    246e:	78 85       	ldd	r23, Y+8	; 0x08
    2470:	89 85       	ldd	r24, Y+9	; 0x09
    2472:	9a 85       	ldd	r25, Y+10	; 0x0a
    2474:	20 e0       	ldi	r18, 0x00	; 0
    2476:	30 e0       	ldi	r19, 0x00	; 0
    2478:	40 e8       	ldi	r20, 0x80	; 128
    247a:	5f e3       	ldi	r21, 0x3F	; 63
    247c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2480:	88 23       	and	r24, r24
    2482:	2c f4       	brge	.+10     	; 0x248e <SWITCH_u8Read+0x6a>
		__ticks = 1;
    2484:	81 e0       	ldi	r24, 0x01	; 1
    2486:	90 e0       	ldi	r25, 0x00	; 0
    2488:	9e 83       	std	Y+6, r25	; 0x06
    248a:	8d 83       	std	Y+5, r24	; 0x05
    248c:	3f c0       	rjmp	.+126    	; 0x250c <SWITCH_u8Read+0xe8>
	else if (__tmp > 65535)
    248e:	6f 81       	ldd	r22, Y+7	; 0x07
    2490:	78 85       	ldd	r23, Y+8	; 0x08
    2492:	89 85       	ldd	r24, Y+9	; 0x09
    2494:	9a 85       	ldd	r25, Y+10	; 0x0a
    2496:	20 e0       	ldi	r18, 0x00	; 0
    2498:	3f ef       	ldi	r19, 0xFF	; 255
    249a:	4f e7       	ldi	r20, 0x7F	; 127
    249c:	57 e4       	ldi	r21, 0x47	; 71
    249e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24a2:	18 16       	cp	r1, r24
    24a4:	4c f5       	brge	.+82     	; 0x24f8 <SWITCH_u8Read+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    24a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    24aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    24ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    24ae:	20 e0       	ldi	r18, 0x00	; 0
    24b0:	30 e0       	ldi	r19, 0x00	; 0
    24b2:	40 e2       	ldi	r20, 0x20	; 32
    24b4:	51 e4       	ldi	r21, 0x41	; 65
    24b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ba:	dc 01       	movw	r26, r24
    24bc:	cb 01       	movw	r24, r22
    24be:	bc 01       	movw	r22, r24
    24c0:	cd 01       	movw	r24, r26
    24c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24c6:	dc 01       	movw	r26, r24
    24c8:	cb 01       	movw	r24, r22
    24ca:	9e 83       	std	Y+6, r25	; 0x06
    24cc:	8d 83       	std	Y+5, r24	; 0x05
    24ce:	0f c0       	rjmp	.+30     	; 0x24ee <SWITCH_u8Read+0xca>
    24d0:	88 ec       	ldi	r24, 0xC8	; 200
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	9c 83       	std	Y+4, r25	; 0x04
    24d6:	8b 83       	std	Y+3, r24	; 0x03
    24d8:	8b 81       	ldd	r24, Y+3	; 0x03
    24da:	9c 81       	ldd	r25, Y+4	; 0x04
    24dc:	01 97       	sbiw	r24, 0x01	; 1
    24de:	f1 f7       	brne	.-4      	; 0x24dc <SWITCH_u8Read+0xb8>
    24e0:	9c 83       	std	Y+4, r25	; 0x04
    24e2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24e4:	8d 81       	ldd	r24, Y+5	; 0x05
    24e6:	9e 81       	ldd	r25, Y+6	; 0x06
    24e8:	01 97       	sbiw	r24, 0x01	; 1
    24ea:	9e 83       	std	Y+6, r25	; 0x06
    24ec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ee:	8d 81       	ldd	r24, Y+5	; 0x05
    24f0:	9e 81       	ldd	r25, Y+6	; 0x06
    24f2:	00 97       	sbiw	r24, 0x00	; 0
    24f4:	69 f7       	brne	.-38     	; 0x24d0 <SWITCH_u8Read+0xac>
    24f6:	14 c0       	rjmp	.+40     	; 0x2520 <SWITCH_u8Read+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24f8:	6f 81       	ldd	r22, Y+7	; 0x07
    24fa:	78 85       	ldd	r23, Y+8	; 0x08
    24fc:	89 85       	ldd	r24, Y+9	; 0x09
    24fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2500:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2504:	dc 01       	movw	r26, r24
    2506:	cb 01       	movw	r24, r22
    2508:	9e 83       	std	Y+6, r25	; 0x06
    250a:	8d 83       	std	Y+5, r24	; 0x05
    250c:	8d 81       	ldd	r24, Y+5	; 0x05
    250e:	9e 81       	ldd	r25, Y+6	; 0x06
    2510:	9a 83       	std	Y+2, r25	; 0x02
    2512:	89 83       	std	Y+1, r24	; 0x01
    2514:	89 81       	ldd	r24, Y+1	; 0x01
    2516:	9a 81       	ldd	r25, Y+2	; 0x02
    2518:	01 97       	sbiw	r24, 0x01	; 1
    251a:	f1 f7       	brne	.-4      	; 0x2518 <SWITCH_u8Read+0xf4>
    251c:	9a 83       	std	Y+2, r25	; 0x02
    251e:	89 83       	std	Y+1, r24	; 0x01
	u8 Local_u8ReturnValue ;
	_delay_ms(50);
	Local_u8ReturnValue = GPIO_u8ReadPin(copy_u8Port , copy_u8Pin);
    2520:	88 89       	ldd	r24, Y+16	; 0x10
    2522:	69 89       	ldd	r22, Y+17	; 0x11
    2524:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <GPIO_u8ReadPin>
    2528:	8f 87       	std	Y+15, r24	; 0x0f
	return Local_u8ReturnValue ;
    252a:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    252c:	61 96       	adiw	r28, 0x11	; 17
    252e:	0f b6       	in	r0, 0x3f	; 63
    2530:	f8 94       	cli
    2532:	de bf       	out	0x3e, r29	; 62
    2534:	0f be       	out	0x3f, r0	; 63
    2536:	cd bf       	out	0x3d, r28	; 61
    2538:	cf 91       	pop	r28
    253a:	df 91       	pop	r29
    253c:	08 95       	ret

0000253e <SWITCH_voidInterrupt>:

void SWITCH_voidInterrupt(u8 copy_u8IntNum , void (*copy_voidFun)(void))
{
    253e:	df 93       	push	r29
    2540:	cf 93       	push	r28
    2542:	00 d0       	rcall	.+0      	; 0x2544 <SWITCH_voidInterrupt+0x6>
    2544:	0f 92       	push	r0
    2546:	cd b7       	in	r28, 0x3d	; 61
    2548:	de b7       	in	r29, 0x3e	; 62
    254a:	89 83       	std	Y+1, r24	; 0x01
    254c:	7b 83       	std	Y+3, r23	; 0x03
    254e:	6a 83       	std	Y+2, r22	; 0x02
	EXTI_voidInit(copy_u8IntNum , copy_voidFun );
    2550:	89 81       	ldd	r24, Y+1	; 0x01
    2552:	88 2f       	mov	r24, r24
    2554:	90 e0       	ldi	r25, 0x00	; 0
    2556:	2a 81       	ldd	r18, Y+2	; 0x02
    2558:	3b 81       	ldd	r19, Y+3	; 0x03
    255a:	b9 01       	movw	r22, r18
    255c:	0e 94 a3 05 	call	0xb46	; 0xb46 <EXTI_voidInit>
}
    2560:	0f 90       	pop	r0
    2562:	0f 90       	pop	r0
    2564:	0f 90       	pop	r0
    2566:	cf 91       	pop	r28
    2568:	df 91       	pop	r29
    256a:	08 95       	ret

0000256c <main>:

#define F_CPU 8000000UL
#include "util/delay.h"

int main (void)
{
    256c:	df 93       	push	r29
    256e:	cf 93       	push	r28
    2570:	0f 92       	push	r0
    2572:	cd b7       	in	r28, 0x3d	; 61
    2574:	de b7       	in	r29, 0x3e	; 62
	LCD_voidInit();
    2576:	0e 94 94 0b 	call	0x1728	; 0x1728 <LCD_voidInit>
	Keypad_voidinit(GPIOD);
    257a:	83 e0       	ldi	r24, 0x03	; 3
    257c:	0e 94 38 0b 	call	0x1670	; 0x1670 <Keypad_voidinit>
	u8 Key;
	while (1)
	{
		if (Key != 256)
		{
			Key = Keypad_voidCheckVal(GPIOD);
    2580:	83 e0       	ldi	r24, 0x03	; 3
    2582:	0e 94 4e 0b 	call	0x169c	; 0x169c <Keypad_voidCheckVal>
    2586:	89 83       	std	Y+1, r24	; 0x01
			LCD_voidDispChar(Key);
    2588:	89 81       	ldd	r24, Y+1	; 0x01
    258a:	0e 94 36 11 	call	0x226c	; 0x226c <LCD_voidDispChar>
    258e:	f8 cf       	rjmp	.-16     	; 0x2580 <main+0x14>

00002590 <__prologue_saves__>:
    2590:	2f 92       	push	r2
    2592:	3f 92       	push	r3
    2594:	4f 92       	push	r4
    2596:	5f 92       	push	r5
    2598:	6f 92       	push	r6
    259a:	7f 92       	push	r7
    259c:	8f 92       	push	r8
    259e:	9f 92       	push	r9
    25a0:	af 92       	push	r10
    25a2:	bf 92       	push	r11
    25a4:	cf 92       	push	r12
    25a6:	df 92       	push	r13
    25a8:	ef 92       	push	r14
    25aa:	ff 92       	push	r15
    25ac:	0f 93       	push	r16
    25ae:	1f 93       	push	r17
    25b0:	cf 93       	push	r28
    25b2:	df 93       	push	r29
    25b4:	cd b7       	in	r28, 0x3d	; 61
    25b6:	de b7       	in	r29, 0x3e	; 62
    25b8:	ca 1b       	sub	r28, r26
    25ba:	db 0b       	sbc	r29, r27
    25bc:	0f b6       	in	r0, 0x3f	; 63
    25be:	f8 94       	cli
    25c0:	de bf       	out	0x3e, r29	; 62
    25c2:	0f be       	out	0x3f, r0	; 63
    25c4:	cd bf       	out	0x3d, r28	; 61
    25c6:	09 94       	ijmp

000025c8 <__epilogue_restores__>:
    25c8:	2a 88       	ldd	r2, Y+18	; 0x12
    25ca:	39 88       	ldd	r3, Y+17	; 0x11
    25cc:	48 88       	ldd	r4, Y+16	; 0x10
    25ce:	5f 84       	ldd	r5, Y+15	; 0x0f
    25d0:	6e 84       	ldd	r6, Y+14	; 0x0e
    25d2:	7d 84       	ldd	r7, Y+13	; 0x0d
    25d4:	8c 84       	ldd	r8, Y+12	; 0x0c
    25d6:	9b 84       	ldd	r9, Y+11	; 0x0b
    25d8:	aa 84       	ldd	r10, Y+10	; 0x0a
    25da:	b9 84       	ldd	r11, Y+9	; 0x09
    25dc:	c8 84       	ldd	r12, Y+8	; 0x08
    25de:	df 80       	ldd	r13, Y+7	; 0x07
    25e0:	ee 80       	ldd	r14, Y+6	; 0x06
    25e2:	fd 80       	ldd	r15, Y+5	; 0x05
    25e4:	0c 81       	ldd	r16, Y+4	; 0x04
    25e6:	1b 81       	ldd	r17, Y+3	; 0x03
    25e8:	aa 81       	ldd	r26, Y+2	; 0x02
    25ea:	b9 81       	ldd	r27, Y+1	; 0x01
    25ec:	ce 0f       	add	r28, r30
    25ee:	d1 1d       	adc	r29, r1
    25f0:	0f b6       	in	r0, 0x3f	; 63
    25f2:	f8 94       	cli
    25f4:	de bf       	out	0x3e, r29	; 62
    25f6:	0f be       	out	0x3f, r0	; 63
    25f8:	cd bf       	out	0x3d, r28	; 61
    25fa:	ed 01       	movw	r28, r26
    25fc:	08 95       	ret

000025fe <_exit>:
    25fe:	f8 94       	cli

00002600 <__stop_program>:
    2600:	ff cf       	rjmp	.-2      	; 0x2600 <__stop_program>
