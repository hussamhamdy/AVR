
LED_ANIM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000023d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000023d4  00002468  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800068  00800068  00002470  2**0
                  ALLOC
  3 .stab         00001938  00000000  00000000  00002470  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e69  00000000  00000000  00003da8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00004c11  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00004d71  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00004f00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00006f45  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00008046  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00008fc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  00009148  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000940a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009c98  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 c1 06 	jmp	0xd82	; 0xd82 <__vector_1>
       8:	0c 94 ee 06 	jmp	0xddc	; 0xddc <__vector_2>
       c:	0c 94 1b 07 	jmp	0xe36	; 0xe36 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a4 37       	cpi	r26, 0x74	; 116
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e4 ed       	ldi	r30, 0xD4	; 212
      78:	f3 e2       	ldi	r31, 0x23	; 35
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 e6 10 	call	0x21cc	; 0x21cc <main>
      8a:	0c 94 e8 11 	jmp	0x23d0	; 0x23d0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b1 11 	jmp	0x2362	; 0x2362 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 cd 11 	jmp	0x239a	; 0x239a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 bd 11 	jmp	0x237a	; 0x237a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d9 11 	jmp	0x23b2	; 0x23b2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 bd 11 	jmp	0x237a	; 0x237a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d9 11 	jmp	0x23b2	; 0x23b2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b1 11 	jmp	0x2362	; 0x2362 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 cd 11 	jmp	0x239a	; 0x239a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b9 11 	jmp	0x2372	; 0x2372 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 d5 11 	jmp	0x23aa	; 0x23aa <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 bd 11 	jmp	0x237a	; 0x237a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 d9 11 	jmp	0x23b2	; 0x23b2 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 bd 11 	jmp	0x237a	; 0x237a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 d9 11 	jmp	0x23b2	; 0x23b2 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 bd 11 	jmp	0x237a	; 0x237a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 d9 11 	jmp	0x23b2	; 0x23b2 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 c1 11 	jmp	0x2382	; 0x2382 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 dd 11 	jmp	0x23ba	; 0x23ba <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <EXTI_voidInit>:
void (* Global_CBINT2)(void);



	void EXTI_voidInit(u8 copy_u8IntNum , void (* copy_CB)(void))
	{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <EXTI_voidInit+0x6>
     ca4:	00 d0       	rcall	.+0      	; 0xca6 <EXTI_voidInit+0x8>
     ca6:	0f 92       	push	r0
     ca8:	cd b7       	in	r28, 0x3d	; 61
     caa:	de b7       	in	r29, 0x3e	; 62
     cac:	89 83       	std	Y+1, r24	; 0x01
     cae:	7b 83       	std	Y+3, r23	; 0x03
     cb0:	6a 83       	std	Y+2, r22	; 0x02
		SET_BIT(SREG , GI);
     cb2:	af e5       	ldi	r26, 0x5F	; 95
     cb4:	b0 e0       	ldi	r27, 0x00	; 0
     cb6:	ef e5       	ldi	r30, 0x5F	; 95
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	80 81       	ld	r24, Z
     cbc:	80 68       	ori	r24, 0x80	; 128
     cbe:	8c 93       	st	X, r24
		
		switch (copy_u8IntNum) 
     cc0:	89 81       	ldd	r24, Y+1	; 0x01
     cc2:	28 2f       	mov	r18, r24
     cc4:	30 e0       	ldi	r19, 0x00	; 0
     cc6:	3d 83       	std	Y+5, r19	; 0x05
     cc8:	2c 83       	std	Y+4, r18	; 0x04
     cca:	8c 81       	ldd	r24, Y+4	; 0x04
     ccc:	9d 81       	ldd	r25, Y+5	; 0x05
     cce:	81 30       	cpi	r24, 0x01	; 1
     cd0:	91 05       	cpc	r25, r1
     cd2:	31 f1       	breq	.+76     	; 0xd20 <EXTI_voidInit+0x82>
     cd4:	2c 81       	ldd	r18, Y+4	; 0x04
     cd6:	3d 81       	ldd	r19, Y+5	; 0x05
     cd8:	22 30       	cpi	r18, 0x02	; 2
     cda:	31 05       	cpc	r19, r1
     cdc:	b1 f1       	breq	.+108    	; 0xd4a <EXTI_voidInit+0xac>
     cde:	8c 81       	ldd	r24, Y+4	; 0x04
     ce0:	9d 81       	ldd	r25, Y+5	; 0x05
     ce2:	00 97       	sbiw	r24, 0x00	; 0
     ce4:	09 f0       	breq	.+2      	; 0xce8 <EXTI_voidInit+0x4a>
     ce6:	45 c0       	rjmp	.+138    	; 0xd72 <EXTI_voidInit+0xd4>
		{
			case EXTI_INT0 :
			SET_BIT (GICR , INT0 );
     ce8:	ab e5       	ldi	r26, 0x5B	; 91
     cea:	b0 e0       	ldi	r27, 0x00	; 0
     cec:	eb e5       	ldi	r30, 0x5B	; 91
     cee:	f0 e0       	ldi	r31, 0x00	; 0
     cf0:	80 81       	ld	r24, Z
     cf2:	80 64       	ori	r24, 0x40	; 64
     cf4:	8c 93       	st	X, r24
			SET_BIT(GIFR, INTF0);
     cf6:	aa e5       	ldi	r26, 0x5A	; 90
     cf8:	b0 e0       	ldi	r27, 0x00	; 0
     cfa:	ea e5       	ldi	r30, 0x5A	; 90
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	80 81       	ld	r24, Z
     d00:	80 64       	ori	r24, 0x40	; 64
     d02:	8c 93       	st	X, r24
			CLEAR_BIT(DDRD , 2 );
     d04:	a1 e3       	ldi	r26, 0x31	; 49
     d06:	b0 e0       	ldi	r27, 0x00	; 0
     d08:	e1 e3       	ldi	r30, 0x31	; 49
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	80 81       	ld	r24, Z
     d0e:	8b 7f       	andi	r24, 0xFB	; 251
     d10:	8c 93       	st	X, r24
			Global_CBINT0 = copy_CB ;
     d12:	8a 81       	ldd	r24, Y+2	; 0x02
     d14:	9b 81       	ldd	r25, Y+3	; 0x03
     d16:	90 93 6b 00 	sts	0x006B, r25
     d1a:	80 93 6a 00 	sts	0x006A, r24
     d1e:	29 c0       	rjmp	.+82     	; 0xd72 <EXTI_voidInit+0xd4>
			break ; 
			
			case EXTI_INT1 :
			SET_BIT (GICR , INT1 );
     d20:	ab e5       	ldi	r26, 0x5B	; 91
     d22:	b0 e0       	ldi	r27, 0x00	; 0
     d24:	eb e5       	ldi	r30, 0x5B	; 91
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	80 81       	ld	r24, Z
     d2a:	80 68       	ori	r24, 0x80	; 128
     d2c:	8c 93       	st	X, r24
			CLEAR_BIT(DDRD , 3 );
     d2e:	a1 e3       	ldi	r26, 0x31	; 49
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	e1 e3       	ldi	r30, 0x31	; 49
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	80 81       	ld	r24, Z
     d38:	87 7f       	andi	r24, 0xF7	; 247
     d3a:	8c 93       	st	X, r24
			Global_CBINT1 = copy_CB ;
     d3c:	8a 81       	ldd	r24, Y+2	; 0x02
     d3e:	9b 81       	ldd	r25, Y+3	; 0x03
     d40:	90 93 6d 00 	sts	0x006D, r25
     d44:	80 93 6c 00 	sts	0x006C, r24
     d48:	14 c0       	rjmp	.+40     	; 0xd72 <EXTI_voidInit+0xd4>
			break ; 
			
			case EXTI_INT2 :
			SET_BIT (GICR , INT2 );
     d4a:	ab e5       	ldi	r26, 0x5B	; 91
     d4c:	b0 e0       	ldi	r27, 0x00	; 0
     d4e:	eb e5       	ldi	r30, 0x5B	; 91
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	80 81       	ld	r24, Z
     d54:	80 62       	ori	r24, 0x20	; 32
     d56:	8c 93       	st	X, r24
			CLEAR_BIT(DDRB , 2 );
     d58:	a7 e3       	ldi	r26, 0x37	; 55
     d5a:	b0 e0       	ldi	r27, 0x00	; 0
     d5c:	e7 e3       	ldi	r30, 0x37	; 55
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	80 81       	ld	r24, Z
     d62:	8b 7f       	andi	r24, 0xFB	; 251
     d64:	8c 93       	st	X, r24
			Global_CBINT2 = copy_CB ;
     d66:	8a 81       	ldd	r24, Y+2	; 0x02
     d68:	9b 81       	ldd	r25, Y+3	; 0x03
     d6a:	90 93 69 00 	sts	0x0069, r25
     d6e:	80 93 68 00 	sts	0x0068, r24
			
			default :
			break ;
			
		}
	}
     d72:	0f 90       	pop	r0
     d74:	0f 90       	pop	r0
     d76:	0f 90       	pop	r0
     d78:	0f 90       	pop	r0
     d7a:	0f 90       	pop	r0
     d7c:	cf 91       	pop	r28
     d7e:	df 91       	pop	r29
     d80:	08 95       	ret

00000d82 <__vector_1>:
	ISR(INT0_vect)
	{
     d82:	1f 92       	push	r1
     d84:	0f 92       	push	r0
     d86:	0f b6       	in	r0, 0x3f	; 63
     d88:	0f 92       	push	r0
     d8a:	11 24       	eor	r1, r1
     d8c:	2f 93       	push	r18
     d8e:	3f 93       	push	r19
     d90:	4f 93       	push	r20
     d92:	5f 93       	push	r21
     d94:	6f 93       	push	r22
     d96:	7f 93       	push	r23
     d98:	8f 93       	push	r24
     d9a:	9f 93       	push	r25
     d9c:	af 93       	push	r26
     d9e:	bf 93       	push	r27
     da0:	ef 93       	push	r30
     da2:	ff 93       	push	r31
     da4:	df 93       	push	r29
     da6:	cf 93       	push	r28
     da8:	cd b7       	in	r28, 0x3d	; 61
     daa:	de b7       	in	r29, 0x3e	; 62
		(*Global_CBINT0)();
     dac:	e0 91 6a 00 	lds	r30, 0x006A
     db0:	f0 91 6b 00 	lds	r31, 0x006B
     db4:	09 95       	icall
	}
     db6:	cf 91       	pop	r28
     db8:	df 91       	pop	r29
     dba:	ff 91       	pop	r31
     dbc:	ef 91       	pop	r30
     dbe:	bf 91       	pop	r27
     dc0:	af 91       	pop	r26
     dc2:	9f 91       	pop	r25
     dc4:	8f 91       	pop	r24
     dc6:	7f 91       	pop	r23
     dc8:	6f 91       	pop	r22
     dca:	5f 91       	pop	r21
     dcc:	4f 91       	pop	r20
     dce:	3f 91       	pop	r19
     dd0:	2f 91       	pop	r18
     dd2:	0f 90       	pop	r0
     dd4:	0f be       	out	0x3f, r0	; 63
     dd6:	0f 90       	pop	r0
     dd8:	1f 90       	pop	r1
     dda:	18 95       	reti

00000ddc <__vector_2>:
	ISR(INT1_vect)
	{
     ddc:	1f 92       	push	r1
     dde:	0f 92       	push	r0
     de0:	0f b6       	in	r0, 0x3f	; 63
     de2:	0f 92       	push	r0
     de4:	11 24       	eor	r1, r1
     de6:	2f 93       	push	r18
     de8:	3f 93       	push	r19
     dea:	4f 93       	push	r20
     dec:	5f 93       	push	r21
     dee:	6f 93       	push	r22
     df0:	7f 93       	push	r23
     df2:	8f 93       	push	r24
     df4:	9f 93       	push	r25
     df6:	af 93       	push	r26
     df8:	bf 93       	push	r27
     dfa:	ef 93       	push	r30
     dfc:	ff 93       	push	r31
     dfe:	df 93       	push	r29
     e00:	cf 93       	push	r28
     e02:	cd b7       	in	r28, 0x3d	; 61
     e04:	de b7       	in	r29, 0x3e	; 62
		(*Global_CBINT1)();
     e06:	e0 91 6c 00 	lds	r30, 0x006C
     e0a:	f0 91 6d 00 	lds	r31, 0x006D
     e0e:	09 95       	icall
	}
     e10:	cf 91       	pop	r28
     e12:	df 91       	pop	r29
     e14:	ff 91       	pop	r31
     e16:	ef 91       	pop	r30
     e18:	bf 91       	pop	r27
     e1a:	af 91       	pop	r26
     e1c:	9f 91       	pop	r25
     e1e:	8f 91       	pop	r24
     e20:	7f 91       	pop	r23
     e22:	6f 91       	pop	r22
     e24:	5f 91       	pop	r21
     e26:	4f 91       	pop	r20
     e28:	3f 91       	pop	r19
     e2a:	2f 91       	pop	r18
     e2c:	0f 90       	pop	r0
     e2e:	0f be       	out	0x3f, r0	; 63
     e30:	0f 90       	pop	r0
     e32:	1f 90       	pop	r1
     e34:	18 95       	reti

00000e36 <__vector_3>:
	ISR(INT2_vect)
	{
     e36:	1f 92       	push	r1
     e38:	0f 92       	push	r0
     e3a:	0f b6       	in	r0, 0x3f	; 63
     e3c:	0f 92       	push	r0
     e3e:	11 24       	eor	r1, r1
     e40:	2f 93       	push	r18
     e42:	3f 93       	push	r19
     e44:	4f 93       	push	r20
     e46:	5f 93       	push	r21
     e48:	6f 93       	push	r22
     e4a:	7f 93       	push	r23
     e4c:	8f 93       	push	r24
     e4e:	9f 93       	push	r25
     e50:	af 93       	push	r26
     e52:	bf 93       	push	r27
     e54:	ef 93       	push	r30
     e56:	ff 93       	push	r31
     e58:	df 93       	push	r29
     e5a:	cf 93       	push	r28
     e5c:	cd b7       	in	r28, 0x3d	; 61
     e5e:	de b7       	in	r29, 0x3e	; 62
		(*Global_CBINT2)();
     e60:	e0 91 68 00 	lds	r30, 0x0068
     e64:	f0 91 69 00 	lds	r31, 0x0069
     e68:	09 95       	icall
	}
     e6a:	cf 91       	pop	r28
     e6c:	df 91       	pop	r29
     e6e:	ff 91       	pop	r31
     e70:	ef 91       	pop	r30
     e72:	bf 91       	pop	r27
     e74:	af 91       	pop	r26
     e76:	9f 91       	pop	r25
     e78:	8f 91       	pop	r24
     e7a:	7f 91       	pop	r23
     e7c:	6f 91       	pop	r22
     e7e:	5f 91       	pop	r21
     e80:	4f 91       	pop	r20
     e82:	3f 91       	pop	r19
     e84:	2f 91       	pop	r18
     e86:	0f 90       	pop	r0
     e88:	0f be       	out	0x3f, r0	; 63
     e8a:	0f 90       	pop	r0
     e8c:	1f 90       	pop	r1
     e8e:	18 95       	reti

00000e90 <GPIO_voidSetPinDDR>:




	void GPIO_voidSetPinDDR (u8  copy_u8Port ,u8 copy_u8Pin , u8 copy_u8Mode )
	{
     e90:	df 93       	push	r29
     e92:	cf 93       	push	r28
     e94:	00 d0       	rcall	.+0      	; 0xe96 <GPIO_voidSetPinDDR+0x6>
     e96:	00 d0       	rcall	.+0      	; 0xe98 <GPIO_voidSetPinDDR+0x8>
     e98:	0f 92       	push	r0
     e9a:	cd b7       	in	r28, 0x3d	; 61
     e9c:	de b7       	in	r29, 0x3e	; 62
     e9e:	89 83       	std	Y+1, r24	; 0x01
     ea0:	6a 83       	std	Y+2, r22	; 0x02
     ea2:	4b 83       	std	Y+3, r20	; 0x03
		switch(copy_u8Port)
     ea4:	89 81       	ldd	r24, Y+1	; 0x01
     ea6:	28 2f       	mov	r18, r24
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	3d 83       	std	Y+5, r19	; 0x05
     eac:	2c 83       	std	Y+4, r18	; 0x04
     eae:	8c 81       	ldd	r24, Y+4	; 0x04
     eb0:	9d 81       	ldd	r25, Y+5	; 0x05
     eb2:	81 30       	cpi	r24, 0x01	; 1
     eb4:	91 05       	cpc	r25, r1
     eb6:	09 f4       	brne	.+2      	; 0xeba <GPIO_voidSetPinDDR+0x2a>
     eb8:	43 c0       	rjmp	.+134    	; 0xf40 <GPIO_voidSetPinDDR+0xb0>
     eba:	2c 81       	ldd	r18, Y+4	; 0x04
     ebc:	3d 81       	ldd	r19, Y+5	; 0x05
     ebe:	22 30       	cpi	r18, 0x02	; 2
     ec0:	31 05       	cpc	r19, r1
     ec2:	2c f4       	brge	.+10     	; 0xece <GPIO_voidSetPinDDR+0x3e>
     ec4:	8c 81       	ldd	r24, Y+4	; 0x04
     ec6:	9d 81       	ldd	r25, Y+5	; 0x05
     ec8:	00 97       	sbiw	r24, 0x00	; 0
     eca:	71 f0       	breq	.+28     	; 0xee8 <GPIO_voidSetPinDDR+0x58>
     ecc:	bc c0       	rjmp	.+376    	; 0x1046 <GPIO_voidSetPinDDR+0x1b6>
     ece:	2c 81       	ldd	r18, Y+4	; 0x04
     ed0:	3d 81       	ldd	r19, Y+5	; 0x05
     ed2:	22 30       	cpi	r18, 0x02	; 2
     ed4:	31 05       	cpc	r19, r1
     ed6:	09 f4       	brne	.+2      	; 0xeda <GPIO_voidSetPinDDR+0x4a>
     ed8:	5f c0       	rjmp	.+190    	; 0xf98 <GPIO_voidSetPinDDR+0x108>
     eda:	8c 81       	ldd	r24, Y+4	; 0x04
     edc:	9d 81       	ldd	r25, Y+5	; 0x05
     ede:	83 30       	cpi	r24, 0x03	; 3
     ee0:	91 05       	cpc	r25, r1
     ee2:	09 f4       	brne	.+2      	; 0xee6 <GPIO_voidSetPinDDR+0x56>
     ee4:	85 c0       	rjmp	.+266    	; 0xff0 <GPIO_voidSetPinDDR+0x160>
     ee6:	af c0       	rjmp	.+350    	; 0x1046 <GPIO_voidSetPinDDR+0x1b6>
		{
			case GPIOA :
				if(copy_u8Mode ==OUTPUT )
     ee8:	8b 81       	ldd	r24, Y+3	; 0x03
     eea:	81 30       	cpi	r24, 0x01	; 1
     eec:	a1 f4       	brne	.+40     	; 0xf16 <GPIO_voidSetPinDDR+0x86>
				{
					SET_BIT(DDRA ,copy_u8Pin);
     eee:	aa e3       	ldi	r26, 0x3A	; 58
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	ea e3       	ldi	r30, 0x3A	; 58
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	48 2f       	mov	r20, r24
     efa:	8a 81       	ldd	r24, Y+2	; 0x02
     efc:	28 2f       	mov	r18, r24
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	02 2e       	mov	r0, r18
     f06:	02 c0       	rjmp	.+4      	; 0xf0c <GPIO_voidSetPinDDR+0x7c>
     f08:	88 0f       	add	r24, r24
     f0a:	99 1f       	adc	r25, r25
     f0c:	0a 94       	dec	r0
     f0e:	e2 f7       	brpl	.-8      	; 0xf08 <GPIO_voidSetPinDDR+0x78>
     f10:	84 2b       	or	r24, r20
     f12:	8c 93       	st	X, r24
     f14:	98 c0       	rjmp	.+304    	; 0x1046 <GPIO_voidSetPinDDR+0x1b6>
				}
				else {
					CLEAR_BIT(DDRA,copy_u8Pin);
     f16:	aa e3       	ldi	r26, 0x3A	; 58
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	ea e3       	ldi	r30, 0x3A	; 58
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	48 2f       	mov	r20, r24
     f22:	8a 81       	ldd	r24, Y+2	; 0x02
     f24:	28 2f       	mov	r18, r24
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	02 2e       	mov	r0, r18
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <GPIO_voidSetPinDDR+0xa4>
     f30:	88 0f       	add	r24, r24
     f32:	99 1f       	adc	r25, r25
     f34:	0a 94       	dec	r0
     f36:	e2 f7       	brpl	.-8      	; 0xf30 <GPIO_voidSetPinDDR+0xa0>
     f38:	80 95       	com	r24
     f3a:	84 23       	and	r24, r20
     f3c:	8c 93       	st	X, r24
     f3e:	83 c0       	rjmp	.+262    	; 0x1046 <GPIO_voidSetPinDDR+0x1b6>
				}
				break;
			case GPIOB :
				if(copy_u8Mode ==OUTPUT )
     f40:	8b 81       	ldd	r24, Y+3	; 0x03
     f42:	81 30       	cpi	r24, 0x01	; 1
     f44:	a1 f4       	brne	.+40     	; 0xf6e <GPIO_voidSetPinDDR+0xde>
				{
					SET_BIT(DDRB ,copy_u8Pin);
     f46:	a7 e3       	ldi	r26, 0x37	; 55
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	e7 e3       	ldi	r30, 0x37	; 55
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	48 2f       	mov	r20, r24
     f52:	8a 81       	ldd	r24, Y+2	; 0x02
     f54:	28 2f       	mov	r18, r24
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	02 2e       	mov	r0, r18
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <GPIO_voidSetPinDDR+0xd4>
     f60:	88 0f       	add	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	0a 94       	dec	r0
     f66:	e2 f7       	brpl	.-8      	; 0xf60 <GPIO_voidSetPinDDR+0xd0>
     f68:	84 2b       	or	r24, r20
     f6a:	8c 93       	st	X, r24
     f6c:	6c c0       	rjmp	.+216    	; 0x1046 <GPIO_voidSetPinDDR+0x1b6>
				}
				else {
					CLEAR_BIT(DDRB,copy_u8Pin);
     f6e:	a7 e3       	ldi	r26, 0x37	; 55
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	e7 e3       	ldi	r30, 0x37	; 55
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	48 2f       	mov	r20, r24
     f7a:	8a 81       	ldd	r24, Y+2	; 0x02
     f7c:	28 2f       	mov	r18, r24
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	02 2e       	mov	r0, r18
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <GPIO_voidSetPinDDR+0xfc>
     f88:	88 0f       	add	r24, r24
     f8a:	99 1f       	adc	r25, r25
     f8c:	0a 94       	dec	r0
     f8e:	e2 f7       	brpl	.-8      	; 0xf88 <GPIO_voidSetPinDDR+0xf8>
     f90:	80 95       	com	r24
     f92:	84 23       	and	r24, r20
     f94:	8c 93       	st	X, r24
     f96:	57 c0       	rjmp	.+174    	; 0x1046 <GPIO_voidSetPinDDR+0x1b6>
				}
				break;
			case GPIOC :
				if(copy_u8Mode ==OUTPUT )
     f98:	8b 81       	ldd	r24, Y+3	; 0x03
     f9a:	81 30       	cpi	r24, 0x01	; 1
     f9c:	a1 f4       	brne	.+40     	; 0xfc6 <GPIO_voidSetPinDDR+0x136>
				{
					SET_BIT(DDRC ,copy_u8Pin);
     f9e:	a4 e3       	ldi	r26, 0x34	; 52
     fa0:	b0 e0       	ldi	r27, 0x00	; 0
     fa2:	e4 e3       	ldi	r30, 0x34	; 52
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	48 2f       	mov	r20, r24
     faa:	8a 81       	ldd	r24, Y+2	; 0x02
     fac:	28 2f       	mov	r18, r24
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	81 e0       	ldi	r24, 0x01	; 1
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	02 2e       	mov	r0, r18
     fb6:	02 c0       	rjmp	.+4      	; 0xfbc <GPIO_voidSetPinDDR+0x12c>
     fb8:	88 0f       	add	r24, r24
     fba:	99 1f       	adc	r25, r25
     fbc:	0a 94       	dec	r0
     fbe:	e2 f7       	brpl	.-8      	; 0xfb8 <GPIO_voidSetPinDDR+0x128>
     fc0:	84 2b       	or	r24, r20
     fc2:	8c 93       	st	X, r24
     fc4:	40 c0       	rjmp	.+128    	; 0x1046 <GPIO_voidSetPinDDR+0x1b6>
				}
				else {
					CLEAR_BIT(DDRC,copy_u8Pin);
     fc6:	a4 e3       	ldi	r26, 0x34	; 52
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	e4 e3       	ldi	r30, 0x34	; 52
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	48 2f       	mov	r20, r24
     fd2:	8a 81       	ldd	r24, Y+2	; 0x02
     fd4:	28 2f       	mov	r18, r24
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	02 2e       	mov	r0, r18
     fde:	02 c0       	rjmp	.+4      	; 0xfe4 <GPIO_voidSetPinDDR+0x154>
     fe0:	88 0f       	add	r24, r24
     fe2:	99 1f       	adc	r25, r25
     fe4:	0a 94       	dec	r0
     fe6:	e2 f7       	brpl	.-8      	; 0xfe0 <GPIO_voidSetPinDDR+0x150>
     fe8:	80 95       	com	r24
     fea:	84 23       	and	r24, r20
     fec:	8c 93       	st	X, r24
     fee:	2b c0       	rjmp	.+86     	; 0x1046 <GPIO_voidSetPinDDR+0x1b6>
				}
				break;
			case GPIOD :
				if(copy_u8Mode ==OUTPUT )
     ff0:	8b 81       	ldd	r24, Y+3	; 0x03
     ff2:	81 30       	cpi	r24, 0x01	; 1
     ff4:	a1 f4       	brne	.+40     	; 0x101e <GPIO_voidSetPinDDR+0x18e>
				{
					SET_BIT(DDRD ,copy_u8Pin);
     ff6:	a1 e3       	ldi	r26, 0x31	; 49
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	e1 e3       	ldi	r30, 0x31	; 49
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	48 2f       	mov	r20, r24
    1002:	8a 81       	ldd	r24, Y+2	; 0x02
    1004:	28 2f       	mov	r18, r24
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	02 2e       	mov	r0, r18
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <GPIO_voidSetPinDDR+0x184>
    1010:	88 0f       	add	r24, r24
    1012:	99 1f       	adc	r25, r25
    1014:	0a 94       	dec	r0
    1016:	e2 f7       	brpl	.-8      	; 0x1010 <GPIO_voidSetPinDDR+0x180>
    1018:	84 2b       	or	r24, r20
    101a:	8c 93       	st	X, r24
    101c:	14 c0       	rjmp	.+40     	; 0x1046 <GPIO_voidSetPinDDR+0x1b6>
				}
				else {
					CLEAR_BIT(DDRD,copy_u8Pin);
    101e:	a1 e3       	ldi	r26, 0x31	; 49
    1020:	b0 e0       	ldi	r27, 0x00	; 0
    1022:	e1 e3       	ldi	r30, 0x31	; 49
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	80 81       	ld	r24, Z
    1028:	48 2f       	mov	r20, r24
    102a:	8a 81       	ldd	r24, Y+2	; 0x02
    102c:	28 2f       	mov	r18, r24
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	02 2e       	mov	r0, r18
    1036:	02 c0       	rjmp	.+4      	; 0x103c <GPIO_voidSetPinDDR+0x1ac>
    1038:	88 0f       	add	r24, r24
    103a:	99 1f       	adc	r25, r25
    103c:	0a 94       	dec	r0
    103e:	e2 f7       	brpl	.-8      	; 0x1038 <GPIO_voidSetPinDDR+0x1a8>
    1040:	80 95       	com	r24
    1042:	84 23       	and	r24, r20
    1044:	8c 93       	st	X, r24
				}
				break;	
			default:
				break;
		}
	}
    1046:	0f 90       	pop	r0
    1048:	0f 90       	pop	r0
    104a:	0f 90       	pop	r0
    104c:	0f 90       	pop	r0
    104e:	0f 90       	pop	r0
    1050:	cf 91       	pop	r28
    1052:	df 91       	pop	r29
    1054:	08 95       	ret

00001056 <GPIO_voidWritePin>:
	
	void GPIO_voidWritePin (u8  copy_u8Port ,u8 copy_u8Pin , u8 copy_u8Value )
	{
    1056:	df 93       	push	r29
    1058:	cf 93       	push	r28
    105a:	00 d0       	rcall	.+0      	; 0x105c <GPIO_voidWritePin+0x6>
    105c:	00 d0       	rcall	.+0      	; 0x105e <GPIO_voidWritePin+0x8>
    105e:	0f 92       	push	r0
    1060:	cd b7       	in	r28, 0x3d	; 61
    1062:	de b7       	in	r29, 0x3e	; 62
    1064:	89 83       	std	Y+1, r24	; 0x01
    1066:	6a 83       	std	Y+2, r22	; 0x02
    1068:	4b 83       	std	Y+3, r20	; 0x03
		switch(copy_u8Port)
    106a:	89 81       	ldd	r24, Y+1	; 0x01
    106c:	28 2f       	mov	r18, r24
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	3d 83       	std	Y+5, r19	; 0x05
    1072:	2c 83       	std	Y+4, r18	; 0x04
    1074:	8c 81       	ldd	r24, Y+4	; 0x04
    1076:	9d 81       	ldd	r25, Y+5	; 0x05
    1078:	81 30       	cpi	r24, 0x01	; 1
    107a:	91 05       	cpc	r25, r1
    107c:	09 f4       	brne	.+2      	; 0x1080 <GPIO_voidWritePin+0x2a>
    107e:	43 c0       	rjmp	.+134    	; 0x1106 <GPIO_voidWritePin+0xb0>
    1080:	2c 81       	ldd	r18, Y+4	; 0x04
    1082:	3d 81       	ldd	r19, Y+5	; 0x05
    1084:	22 30       	cpi	r18, 0x02	; 2
    1086:	31 05       	cpc	r19, r1
    1088:	2c f4       	brge	.+10     	; 0x1094 <GPIO_voidWritePin+0x3e>
    108a:	8c 81       	ldd	r24, Y+4	; 0x04
    108c:	9d 81       	ldd	r25, Y+5	; 0x05
    108e:	00 97       	sbiw	r24, 0x00	; 0
    1090:	71 f0       	breq	.+28     	; 0x10ae <GPIO_voidWritePin+0x58>
    1092:	bc c0       	rjmp	.+376    	; 0x120c <GPIO_voidWritePin+0x1b6>
    1094:	2c 81       	ldd	r18, Y+4	; 0x04
    1096:	3d 81       	ldd	r19, Y+5	; 0x05
    1098:	22 30       	cpi	r18, 0x02	; 2
    109a:	31 05       	cpc	r19, r1
    109c:	09 f4       	brne	.+2      	; 0x10a0 <GPIO_voidWritePin+0x4a>
    109e:	5f c0       	rjmp	.+190    	; 0x115e <GPIO_voidWritePin+0x108>
    10a0:	8c 81       	ldd	r24, Y+4	; 0x04
    10a2:	9d 81       	ldd	r25, Y+5	; 0x05
    10a4:	83 30       	cpi	r24, 0x03	; 3
    10a6:	91 05       	cpc	r25, r1
    10a8:	09 f4       	brne	.+2      	; 0x10ac <GPIO_voidWritePin+0x56>
    10aa:	85 c0       	rjmp	.+266    	; 0x11b6 <GPIO_voidWritePin+0x160>
    10ac:	af c0       	rjmp	.+350    	; 0x120c <GPIO_voidWritePin+0x1b6>
		{
			case GPIOA :
				if(copy_u8Value ==HIGH )
    10ae:	8b 81       	ldd	r24, Y+3	; 0x03
    10b0:	81 30       	cpi	r24, 0x01	; 1
    10b2:	a1 f4       	brne	.+40     	; 0x10dc <GPIO_voidWritePin+0x86>
				{
					SET_BIT(PORTA ,copy_u8Pin);
    10b4:	ab e3       	ldi	r26, 0x3B	; 59
    10b6:	b0 e0       	ldi	r27, 0x00	; 0
    10b8:	eb e3       	ldi	r30, 0x3B	; 59
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	48 2f       	mov	r20, r24
    10c0:	8a 81       	ldd	r24, Y+2	; 0x02
    10c2:	28 2f       	mov	r18, r24
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	81 e0       	ldi	r24, 0x01	; 1
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	02 2e       	mov	r0, r18
    10cc:	02 c0       	rjmp	.+4      	; 0x10d2 <GPIO_voidWritePin+0x7c>
    10ce:	88 0f       	add	r24, r24
    10d0:	99 1f       	adc	r25, r25
    10d2:	0a 94       	dec	r0
    10d4:	e2 f7       	brpl	.-8      	; 0x10ce <GPIO_voidWritePin+0x78>
    10d6:	84 2b       	or	r24, r20
    10d8:	8c 93       	st	X, r24
    10da:	98 c0       	rjmp	.+304    	; 0x120c <GPIO_voidWritePin+0x1b6>
				}
				else {
					CLEAR_BIT(PORTA,copy_u8Pin);
    10dc:	ab e3       	ldi	r26, 0x3B	; 59
    10de:	b0 e0       	ldi	r27, 0x00	; 0
    10e0:	eb e3       	ldi	r30, 0x3B	; 59
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	80 81       	ld	r24, Z
    10e6:	48 2f       	mov	r20, r24
    10e8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ea:	28 2f       	mov	r18, r24
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	02 2e       	mov	r0, r18
    10f4:	02 c0       	rjmp	.+4      	; 0x10fa <GPIO_voidWritePin+0xa4>
    10f6:	88 0f       	add	r24, r24
    10f8:	99 1f       	adc	r25, r25
    10fa:	0a 94       	dec	r0
    10fc:	e2 f7       	brpl	.-8      	; 0x10f6 <GPIO_voidWritePin+0xa0>
    10fe:	80 95       	com	r24
    1100:	84 23       	and	r24, r20
    1102:	8c 93       	st	X, r24
    1104:	83 c0       	rjmp	.+262    	; 0x120c <GPIO_voidWritePin+0x1b6>
				}
				break;
			case GPIOB :
				if(copy_u8Value ==HIGH )
    1106:	8b 81       	ldd	r24, Y+3	; 0x03
    1108:	81 30       	cpi	r24, 0x01	; 1
    110a:	a1 f4       	brne	.+40     	; 0x1134 <GPIO_voidWritePin+0xde>
				{
					SET_BIT(PORTB ,copy_u8Pin);
    110c:	a8 e3       	ldi	r26, 0x38	; 56
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	e8 e3       	ldi	r30, 0x38	; 56
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	48 2f       	mov	r20, r24
    1118:	8a 81       	ldd	r24, Y+2	; 0x02
    111a:	28 2f       	mov	r18, r24
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	02 2e       	mov	r0, r18
    1124:	02 c0       	rjmp	.+4      	; 0x112a <GPIO_voidWritePin+0xd4>
    1126:	88 0f       	add	r24, r24
    1128:	99 1f       	adc	r25, r25
    112a:	0a 94       	dec	r0
    112c:	e2 f7       	brpl	.-8      	; 0x1126 <GPIO_voidWritePin+0xd0>
    112e:	84 2b       	or	r24, r20
    1130:	8c 93       	st	X, r24
    1132:	6c c0       	rjmp	.+216    	; 0x120c <GPIO_voidWritePin+0x1b6>
				}
				else {
					CLEAR_BIT(PORTB,copy_u8Pin);
    1134:	a8 e3       	ldi	r26, 0x38	; 56
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	e8 e3       	ldi	r30, 0x38	; 56
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	48 2f       	mov	r20, r24
    1140:	8a 81       	ldd	r24, Y+2	; 0x02
    1142:	28 2f       	mov	r18, r24
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	02 2e       	mov	r0, r18
    114c:	02 c0       	rjmp	.+4      	; 0x1152 <GPIO_voidWritePin+0xfc>
    114e:	88 0f       	add	r24, r24
    1150:	99 1f       	adc	r25, r25
    1152:	0a 94       	dec	r0
    1154:	e2 f7       	brpl	.-8      	; 0x114e <GPIO_voidWritePin+0xf8>
    1156:	80 95       	com	r24
    1158:	84 23       	and	r24, r20
    115a:	8c 93       	st	X, r24
    115c:	57 c0       	rjmp	.+174    	; 0x120c <GPIO_voidWritePin+0x1b6>
				}
				break;
			case GPIOC :
				if(copy_u8Value ==HIGH )
    115e:	8b 81       	ldd	r24, Y+3	; 0x03
    1160:	81 30       	cpi	r24, 0x01	; 1
    1162:	a1 f4       	brne	.+40     	; 0x118c <GPIO_voidWritePin+0x136>
				{
					SET_BIT(PORTC ,copy_u8Pin);
    1164:	a5 e3       	ldi	r26, 0x35	; 53
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	e5 e3       	ldi	r30, 0x35	; 53
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	48 2f       	mov	r20, r24
    1170:	8a 81       	ldd	r24, Y+2	; 0x02
    1172:	28 2f       	mov	r18, r24
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	02 2e       	mov	r0, r18
    117c:	02 c0       	rjmp	.+4      	; 0x1182 <GPIO_voidWritePin+0x12c>
    117e:	88 0f       	add	r24, r24
    1180:	99 1f       	adc	r25, r25
    1182:	0a 94       	dec	r0
    1184:	e2 f7       	brpl	.-8      	; 0x117e <GPIO_voidWritePin+0x128>
    1186:	84 2b       	or	r24, r20
    1188:	8c 93       	st	X, r24
    118a:	40 c0       	rjmp	.+128    	; 0x120c <GPIO_voidWritePin+0x1b6>
				}
				else {
					CLEAR_BIT(PORTC,copy_u8Pin);
    118c:	a5 e3       	ldi	r26, 0x35	; 53
    118e:	b0 e0       	ldi	r27, 0x00	; 0
    1190:	e5 e3       	ldi	r30, 0x35	; 53
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	80 81       	ld	r24, Z
    1196:	48 2f       	mov	r20, r24
    1198:	8a 81       	ldd	r24, Y+2	; 0x02
    119a:	28 2f       	mov	r18, r24
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	81 e0       	ldi	r24, 0x01	; 1
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	02 2e       	mov	r0, r18
    11a4:	02 c0       	rjmp	.+4      	; 0x11aa <GPIO_voidWritePin+0x154>
    11a6:	88 0f       	add	r24, r24
    11a8:	99 1f       	adc	r25, r25
    11aa:	0a 94       	dec	r0
    11ac:	e2 f7       	brpl	.-8      	; 0x11a6 <GPIO_voidWritePin+0x150>
    11ae:	80 95       	com	r24
    11b0:	84 23       	and	r24, r20
    11b2:	8c 93       	st	X, r24
    11b4:	2b c0       	rjmp	.+86     	; 0x120c <GPIO_voidWritePin+0x1b6>
				}
				break;
			case GPIOD :
				if(copy_u8Value == HIGH )
    11b6:	8b 81       	ldd	r24, Y+3	; 0x03
    11b8:	81 30       	cpi	r24, 0x01	; 1
    11ba:	a1 f4       	brne	.+40     	; 0x11e4 <GPIO_voidWritePin+0x18e>
				{
					SET_BIT(PORTD ,copy_u8Pin);
    11bc:	a2 e3       	ldi	r26, 0x32	; 50
    11be:	b0 e0       	ldi	r27, 0x00	; 0
    11c0:	e2 e3       	ldi	r30, 0x32	; 50
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	80 81       	ld	r24, Z
    11c6:	48 2f       	mov	r20, r24
    11c8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ca:	28 2f       	mov	r18, r24
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	02 2e       	mov	r0, r18
    11d4:	02 c0       	rjmp	.+4      	; 0x11da <GPIO_voidWritePin+0x184>
    11d6:	88 0f       	add	r24, r24
    11d8:	99 1f       	adc	r25, r25
    11da:	0a 94       	dec	r0
    11dc:	e2 f7       	brpl	.-8      	; 0x11d6 <GPIO_voidWritePin+0x180>
    11de:	84 2b       	or	r24, r20
    11e0:	8c 93       	st	X, r24
    11e2:	14 c0       	rjmp	.+40     	; 0x120c <GPIO_voidWritePin+0x1b6>
				}
				else {
					CLEAR_BIT(PORTD,copy_u8Pin);
    11e4:	a2 e3       	ldi	r26, 0x32	; 50
    11e6:	b0 e0       	ldi	r27, 0x00	; 0
    11e8:	e2 e3       	ldi	r30, 0x32	; 50
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	80 81       	ld	r24, Z
    11ee:	48 2f       	mov	r20, r24
    11f0:	8a 81       	ldd	r24, Y+2	; 0x02
    11f2:	28 2f       	mov	r18, r24
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	02 2e       	mov	r0, r18
    11fc:	02 c0       	rjmp	.+4      	; 0x1202 <GPIO_voidWritePin+0x1ac>
    11fe:	88 0f       	add	r24, r24
    1200:	99 1f       	adc	r25, r25
    1202:	0a 94       	dec	r0
    1204:	e2 f7       	brpl	.-8      	; 0x11fe <GPIO_voidWritePin+0x1a8>
    1206:	80 95       	com	r24
    1208:	84 23       	and	r24, r20
    120a:	8c 93       	st	X, r24
				break;	
			default:
				break;
		}
		
	}
    120c:	0f 90       	pop	r0
    120e:	0f 90       	pop	r0
    1210:	0f 90       	pop	r0
    1212:	0f 90       	pop	r0
    1214:	0f 90       	pop	r0
    1216:	cf 91       	pop	r28
    1218:	df 91       	pop	r29
    121a:	08 95       	ret

0000121c <GPIO_u8ReadPin>:
	
	u8	GPIO_u8ReadPin(	u8  copy_u8Port ,u8 copy_u8Pin )
	{
    121c:	df 93       	push	r29
    121e:	cf 93       	push	r28
    1220:	00 d0       	rcall	.+0      	; 0x1222 <GPIO_u8ReadPin+0x6>
    1222:	00 d0       	rcall	.+0      	; 0x1224 <GPIO_u8ReadPin+0x8>
    1224:	0f 92       	push	r0
    1226:	cd b7       	in	r28, 0x3d	; 61
    1228:	de b7       	in	r29, 0x3e	; 62
    122a:	8a 83       	std	Y+2, r24	; 0x02
    122c:	6b 83       	std	Y+3, r22	; 0x03
		u8 Local_u8ReturnValue ;
		switch(copy_u8Port){
    122e:	8a 81       	ldd	r24, Y+2	; 0x02
    1230:	28 2f       	mov	r18, r24
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	3d 83       	std	Y+5, r19	; 0x05
    1236:	2c 83       	std	Y+4, r18	; 0x04
    1238:	4c 81       	ldd	r20, Y+4	; 0x04
    123a:	5d 81       	ldd	r21, Y+5	; 0x05
    123c:	41 30       	cpi	r20, 0x01	; 1
    123e:	51 05       	cpc	r21, r1
    1240:	b1 f1       	breq	.+108    	; 0x12ae <GPIO_u8ReadPin+0x92>
    1242:	8c 81       	ldd	r24, Y+4	; 0x04
    1244:	9d 81       	ldd	r25, Y+5	; 0x05
    1246:	82 30       	cpi	r24, 0x02	; 2
    1248:	91 05       	cpc	r25, r1
    124a:	34 f4       	brge	.+12     	; 0x1258 <GPIO_u8ReadPin+0x3c>
    124c:	2c 81       	ldd	r18, Y+4	; 0x04
    124e:	3d 81       	ldd	r19, Y+5	; 0x05
    1250:	21 15       	cp	r18, r1
    1252:	31 05       	cpc	r19, r1
    1254:	71 f0       	breq	.+28     	; 0x1272 <GPIO_u8ReadPin+0x56>
    1256:	84 c0       	rjmp	.+264    	; 0x1360 <GPIO_u8ReadPin+0x144>
    1258:	4c 81       	ldd	r20, Y+4	; 0x04
    125a:	5d 81       	ldd	r21, Y+5	; 0x05
    125c:	42 30       	cpi	r20, 0x02	; 2
    125e:	51 05       	cpc	r21, r1
    1260:	09 f4       	brne	.+2      	; 0x1264 <GPIO_u8ReadPin+0x48>
    1262:	43 c0       	rjmp	.+134    	; 0x12ea <GPIO_u8ReadPin+0xce>
    1264:	8c 81       	ldd	r24, Y+4	; 0x04
    1266:	9d 81       	ldd	r25, Y+5	; 0x05
    1268:	83 30       	cpi	r24, 0x03	; 3
    126a:	91 05       	cpc	r25, r1
    126c:	09 f4       	brne	.+2      	; 0x1270 <GPIO_u8ReadPin+0x54>
    126e:	5b c0       	rjmp	.+182    	; 0x1326 <GPIO_u8ReadPin+0x10a>
    1270:	77 c0       	rjmp	.+238    	; 0x1360 <GPIO_u8ReadPin+0x144>
			case GPIOA :
				Local_u8ReturnValue = GET_BIT(PINA,copy_u8Pin);
    1272:	e9 e3       	ldi	r30, 0x39	; 57
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	80 81       	ld	r24, Z
    1278:	48 2f       	mov	r20, r24
    127a:	50 e0       	ldi	r21, 0x00	; 0
    127c:	8b 81       	ldd	r24, Y+3	; 0x03
    127e:	28 2f       	mov	r18, r24
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	02 c0       	rjmp	.+4      	; 0x128c <GPIO_u8ReadPin+0x70>
    1288:	88 0f       	add	r24, r24
    128a:	99 1f       	adc	r25, r25
    128c:	2a 95       	dec	r18
    128e:	e2 f7       	brpl	.-8      	; 0x1288 <GPIO_u8ReadPin+0x6c>
    1290:	9a 01       	movw	r18, r20
    1292:	28 23       	and	r18, r24
    1294:	39 23       	and	r19, r25
    1296:	8b 81       	ldd	r24, Y+3	; 0x03
    1298:	88 2f       	mov	r24, r24
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	a9 01       	movw	r20, r18
    129e:	02 c0       	rjmp	.+4      	; 0x12a4 <GPIO_u8ReadPin+0x88>
    12a0:	55 95       	asr	r21
    12a2:	47 95       	ror	r20
    12a4:	8a 95       	dec	r24
    12a6:	e2 f7       	brpl	.-8      	; 0x12a0 <GPIO_u8ReadPin+0x84>
    12a8:	ca 01       	movw	r24, r20
    12aa:	89 83       	std	Y+1, r24	; 0x01
    12ac:	59 c0       	rjmp	.+178    	; 0x1360 <GPIO_u8ReadPin+0x144>
				break ;
			case GPIOB :
				Local_u8ReturnValue = GET_BIT(PINB,copy_u8Pin);
    12ae:	e6 e3       	ldi	r30, 0x36	; 54
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	80 81       	ld	r24, Z
    12b4:	48 2f       	mov	r20, r24
    12b6:	50 e0       	ldi	r21, 0x00	; 0
    12b8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ba:	28 2f       	mov	r18, r24
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	02 c0       	rjmp	.+4      	; 0x12c8 <GPIO_u8ReadPin+0xac>
    12c4:	88 0f       	add	r24, r24
    12c6:	99 1f       	adc	r25, r25
    12c8:	2a 95       	dec	r18
    12ca:	e2 f7       	brpl	.-8      	; 0x12c4 <GPIO_u8ReadPin+0xa8>
    12cc:	9a 01       	movw	r18, r20
    12ce:	28 23       	and	r18, r24
    12d0:	39 23       	and	r19, r25
    12d2:	8b 81       	ldd	r24, Y+3	; 0x03
    12d4:	88 2f       	mov	r24, r24
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	a9 01       	movw	r20, r18
    12da:	02 c0       	rjmp	.+4      	; 0x12e0 <GPIO_u8ReadPin+0xc4>
    12dc:	55 95       	asr	r21
    12de:	47 95       	ror	r20
    12e0:	8a 95       	dec	r24
    12e2:	e2 f7       	brpl	.-8      	; 0x12dc <GPIO_u8ReadPin+0xc0>
    12e4:	ca 01       	movw	r24, r20
    12e6:	89 83       	std	Y+1, r24	; 0x01
    12e8:	3b c0       	rjmp	.+118    	; 0x1360 <GPIO_u8ReadPin+0x144>
				break ;
			case GPIOC :
				Local_u8ReturnValue = GET_BIT(PINC,copy_u8Pin);
    12ea:	e3 e3       	ldi	r30, 0x33	; 51
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	80 81       	ld	r24, Z
    12f0:	48 2f       	mov	r20, r24
    12f2:	50 e0       	ldi	r21, 0x00	; 0
    12f4:	8b 81       	ldd	r24, Y+3	; 0x03
    12f6:	28 2f       	mov	r18, r24
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	02 c0       	rjmp	.+4      	; 0x1304 <GPIO_u8ReadPin+0xe8>
    1300:	88 0f       	add	r24, r24
    1302:	99 1f       	adc	r25, r25
    1304:	2a 95       	dec	r18
    1306:	e2 f7       	brpl	.-8      	; 0x1300 <GPIO_u8ReadPin+0xe4>
    1308:	9a 01       	movw	r18, r20
    130a:	28 23       	and	r18, r24
    130c:	39 23       	and	r19, r25
    130e:	8b 81       	ldd	r24, Y+3	; 0x03
    1310:	88 2f       	mov	r24, r24
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	a9 01       	movw	r20, r18
    1316:	02 c0       	rjmp	.+4      	; 0x131c <GPIO_u8ReadPin+0x100>
    1318:	55 95       	asr	r21
    131a:	47 95       	ror	r20
    131c:	8a 95       	dec	r24
    131e:	e2 f7       	brpl	.-8      	; 0x1318 <GPIO_u8ReadPin+0xfc>
    1320:	ca 01       	movw	r24, r20
    1322:	89 83       	std	Y+1, r24	; 0x01
    1324:	1d c0       	rjmp	.+58     	; 0x1360 <GPIO_u8ReadPin+0x144>
				break ;
			case GPIOD :
				Local_u8ReturnValue = GET_BIT(PIND,copy_u8Pin);
    1326:	e0 e3       	ldi	r30, 0x30	; 48
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	80 81       	ld	r24, Z
    132c:	48 2f       	mov	r20, r24
    132e:	50 e0       	ldi	r21, 0x00	; 0
    1330:	8b 81       	ldd	r24, Y+3	; 0x03
    1332:	28 2f       	mov	r18, r24
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	02 c0       	rjmp	.+4      	; 0x1340 <GPIO_u8ReadPin+0x124>
    133c:	88 0f       	add	r24, r24
    133e:	99 1f       	adc	r25, r25
    1340:	2a 95       	dec	r18
    1342:	e2 f7       	brpl	.-8      	; 0x133c <GPIO_u8ReadPin+0x120>
    1344:	9a 01       	movw	r18, r20
    1346:	28 23       	and	r18, r24
    1348:	39 23       	and	r19, r25
    134a:	8b 81       	ldd	r24, Y+3	; 0x03
    134c:	88 2f       	mov	r24, r24
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	a9 01       	movw	r20, r18
    1352:	02 c0       	rjmp	.+4      	; 0x1358 <GPIO_u8ReadPin+0x13c>
    1354:	55 95       	asr	r21
    1356:	47 95       	ror	r20
    1358:	8a 95       	dec	r24
    135a:	e2 f7       	brpl	.-8      	; 0x1354 <GPIO_u8ReadPin+0x138>
    135c:	ca 01       	movw	r24, r20
    135e:	89 83       	std	Y+1, r24	; 0x01
				break ;
			default:
			break;
		}
		return Local_u8ReturnValue ;
    1360:	89 81       	ldd	r24, Y+1	; 0x01
		
	}
    1362:	0f 90       	pop	r0
    1364:	0f 90       	pop	r0
    1366:	0f 90       	pop	r0
    1368:	0f 90       	pop	r0
    136a:	0f 90       	pop	r0
    136c:	cf 91       	pop	r28
    136e:	df 91       	pop	r29
    1370:	08 95       	ret

00001372 <GPIO_voidTogPin>:
	
	void GPIO_voidTogPin 	( u8 copy_u8Port , u8 copy_u8Pin )
	{
    1372:	df 93       	push	r29
    1374:	cf 93       	push	r28
    1376:	00 d0       	rcall	.+0      	; 0x1378 <GPIO_voidTogPin+0x6>
    1378:	00 d0       	rcall	.+0      	; 0x137a <GPIO_voidTogPin+0x8>
    137a:	cd b7       	in	r28, 0x3d	; 61
    137c:	de b7       	in	r29, 0x3e	; 62
    137e:	89 83       	std	Y+1, r24	; 0x01
    1380:	6a 83       	std	Y+2, r22	; 0x02
		switch(copy_u8Port){
    1382:	89 81       	ldd	r24, Y+1	; 0x01
    1384:	28 2f       	mov	r18, r24
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	3c 83       	std	Y+4, r19	; 0x04
    138a:	2b 83       	std	Y+3, r18	; 0x03
    138c:	8b 81       	ldd	r24, Y+3	; 0x03
    138e:	9c 81       	ldd	r25, Y+4	; 0x04
    1390:	81 30       	cpi	r24, 0x01	; 1
    1392:	91 05       	cpc	r25, r1
    1394:	49 f1       	breq	.+82     	; 0x13e8 <GPIO_voidTogPin+0x76>
    1396:	2b 81       	ldd	r18, Y+3	; 0x03
    1398:	3c 81       	ldd	r19, Y+4	; 0x04
    139a:	22 30       	cpi	r18, 0x02	; 2
    139c:	31 05       	cpc	r19, r1
    139e:	2c f4       	brge	.+10     	; 0x13aa <GPIO_voidTogPin+0x38>
    13a0:	8b 81       	ldd	r24, Y+3	; 0x03
    13a2:	9c 81       	ldd	r25, Y+4	; 0x04
    13a4:	00 97       	sbiw	r24, 0x00	; 0
    13a6:	61 f0       	breq	.+24     	; 0x13c0 <GPIO_voidTogPin+0x4e>
    13a8:	5a c0       	rjmp	.+180    	; 0x145e <GPIO_voidTogPin+0xec>
    13aa:	2b 81       	ldd	r18, Y+3	; 0x03
    13ac:	3c 81       	ldd	r19, Y+4	; 0x04
    13ae:	22 30       	cpi	r18, 0x02	; 2
    13b0:	31 05       	cpc	r19, r1
    13b2:	71 f1       	breq	.+92     	; 0x1410 <GPIO_voidTogPin+0x9e>
    13b4:	8b 81       	ldd	r24, Y+3	; 0x03
    13b6:	9c 81       	ldd	r25, Y+4	; 0x04
    13b8:	83 30       	cpi	r24, 0x03	; 3
    13ba:	91 05       	cpc	r25, r1
    13bc:	e9 f1       	breq	.+122    	; 0x1438 <GPIO_voidTogPin+0xc6>
    13be:	4f c0       	rjmp	.+158    	; 0x145e <GPIO_voidTogPin+0xec>
			case GPIOA :
				TOG_BIT(PORTA,copy_u8Pin);
    13c0:	ab e3       	ldi	r26, 0x3B	; 59
    13c2:	b0 e0       	ldi	r27, 0x00	; 0
    13c4:	eb e3       	ldi	r30, 0x3B	; 59
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	80 81       	ld	r24, Z
    13ca:	48 2f       	mov	r20, r24
    13cc:	8a 81       	ldd	r24, Y+2	; 0x02
    13ce:	28 2f       	mov	r18, r24
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	02 2e       	mov	r0, r18
    13d8:	02 c0       	rjmp	.+4      	; 0x13de <GPIO_voidTogPin+0x6c>
    13da:	88 0f       	add	r24, r24
    13dc:	99 1f       	adc	r25, r25
    13de:	0a 94       	dec	r0
    13e0:	e2 f7       	brpl	.-8      	; 0x13da <GPIO_voidTogPin+0x68>
    13e2:	84 27       	eor	r24, r20
    13e4:	8c 93       	st	X, r24
    13e6:	3b c0       	rjmp	.+118    	; 0x145e <GPIO_voidTogPin+0xec>
				break ;             
			case GPIOB :            
				TOG_BIT(PORTB,copy_u8Pin);
    13e8:	a8 e3       	ldi	r26, 0x38	; 56
    13ea:	b0 e0       	ldi	r27, 0x00	; 0
    13ec:	e8 e3       	ldi	r30, 0x38	; 56
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	80 81       	ld	r24, Z
    13f2:	48 2f       	mov	r20, r24
    13f4:	8a 81       	ldd	r24, Y+2	; 0x02
    13f6:	28 2f       	mov	r18, r24
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	02 2e       	mov	r0, r18
    1400:	02 c0       	rjmp	.+4      	; 0x1406 <GPIO_voidTogPin+0x94>
    1402:	88 0f       	add	r24, r24
    1404:	99 1f       	adc	r25, r25
    1406:	0a 94       	dec	r0
    1408:	e2 f7       	brpl	.-8      	; 0x1402 <GPIO_voidTogPin+0x90>
    140a:	84 27       	eor	r24, r20
    140c:	8c 93       	st	X, r24
    140e:	27 c0       	rjmp	.+78     	; 0x145e <GPIO_voidTogPin+0xec>
				break ;             
			case GPIOC :            
				TOG_BIT(PORTC,copy_u8Pin);
    1410:	a5 e3       	ldi	r26, 0x35	; 53
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	e5 e3       	ldi	r30, 0x35	; 53
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	48 2f       	mov	r20, r24
    141c:	8a 81       	ldd	r24, Y+2	; 0x02
    141e:	28 2f       	mov	r18, r24
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	81 e0       	ldi	r24, 0x01	; 1
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	02 2e       	mov	r0, r18
    1428:	02 c0       	rjmp	.+4      	; 0x142e <GPIO_voidTogPin+0xbc>
    142a:	88 0f       	add	r24, r24
    142c:	99 1f       	adc	r25, r25
    142e:	0a 94       	dec	r0
    1430:	e2 f7       	brpl	.-8      	; 0x142a <GPIO_voidTogPin+0xb8>
    1432:	84 27       	eor	r24, r20
    1434:	8c 93       	st	X, r24
    1436:	13 c0       	rjmp	.+38     	; 0x145e <GPIO_voidTogPin+0xec>
				break ;             
			case GPIOD : 
				TOG_BIT(PORTD,copy_u8Pin);
    1438:	a2 e3       	ldi	r26, 0x32	; 50
    143a:	b0 e0       	ldi	r27, 0x00	; 0
    143c:	e2 e3       	ldi	r30, 0x32	; 50
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	80 81       	ld	r24, Z
    1442:	48 2f       	mov	r20, r24
    1444:	8a 81       	ldd	r24, Y+2	; 0x02
    1446:	28 2f       	mov	r18, r24
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	02 2e       	mov	r0, r18
    1450:	02 c0       	rjmp	.+4      	; 0x1456 <GPIO_voidTogPin+0xe4>
    1452:	88 0f       	add	r24, r24
    1454:	99 1f       	adc	r25, r25
    1456:	0a 94       	dec	r0
    1458:	e2 f7       	brpl	.-8      	; 0x1452 <GPIO_voidTogPin+0xe0>
    145a:	84 27       	eor	r24, r20
    145c:	8c 93       	st	X, r24
			default:
			break;
		}
		
		
	}
    145e:	0f 90       	pop	r0
    1460:	0f 90       	pop	r0
    1462:	0f 90       	pop	r0
    1464:	0f 90       	pop	r0
    1466:	cf 91       	pop	r28
    1468:	df 91       	pop	r29
    146a:	08 95       	ret

0000146c <GPIO_voidSetPortDDR>:
	void GPIO_voidSetPortDDR (u8  copy_u8Port , u8 copy_u8Mode )
	{
    146c:	df 93       	push	r29
    146e:	cf 93       	push	r28
    1470:	00 d0       	rcall	.+0      	; 0x1472 <GPIO_voidSetPortDDR+0x6>
    1472:	00 d0       	rcall	.+0      	; 0x1474 <GPIO_voidSetPortDDR+0x8>
    1474:	cd b7       	in	r28, 0x3d	; 61
    1476:	de b7       	in	r29, 0x3e	; 62
    1478:	89 83       	std	Y+1, r24	; 0x01
    147a:	6a 83       	std	Y+2, r22	; 0x02
		switch(copy_u8Port)
    147c:	89 81       	ldd	r24, Y+1	; 0x01
    147e:	28 2f       	mov	r18, r24
    1480:	30 e0       	ldi	r19, 0x00	; 0
    1482:	3c 83       	std	Y+4, r19	; 0x04
    1484:	2b 83       	std	Y+3, r18	; 0x03
    1486:	8b 81       	ldd	r24, Y+3	; 0x03
    1488:	9c 81       	ldd	r25, Y+4	; 0x04
    148a:	81 30       	cpi	r24, 0x01	; 1
    148c:	91 05       	cpc	r25, r1
    148e:	09 f1       	breq	.+66     	; 0x14d2 <GPIO_voidSetPortDDR+0x66>
    1490:	2b 81       	ldd	r18, Y+3	; 0x03
    1492:	3c 81       	ldd	r19, Y+4	; 0x04
    1494:	22 30       	cpi	r18, 0x02	; 2
    1496:	31 05       	cpc	r19, r1
    1498:	2c f4       	brge	.+10     	; 0x14a4 <GPIO_voidSetPortDDR+0x38>
    149a:	8b 81       	ldd	r24, Y+3	; 0x03
    149c:	9c 81       	ldd	r25, Y+4	; 0x04
    149e:	00 97       	sbiw	r24, 0x00	; 0
    14a0:	61 f0       	breq	.+24     	; 0x14ba <GPIO_voidSetPortDDR+0x4e>
    14a2:	3a c0       	rjmp	.+116    	; 0x1518 <GPIO_voidSetPortDDR+0xac>
    14a4:	2b 81       	ldd	r18, Y+3	; 0x03
    14a6:	3c 81       	ldd	r19, Y+4	; 0x04
    14a8:	22 30       	cpi	r18, 0x02	; 2
    14aa:	31 05       	cpc	r19, r1
    14ac:	f1 f0       	breq	.+60     	; 0x14ea <GPIO_voidSetPortDDR+0x7e>
    14ae:	8b 81       	ldd	r24, Y+3	; 0x03
    14b0:	9c 81       	ldd	r25, Y+4	; 0x04
    14b2:	83 30       	cpi	r24, 0x03	; 3
    14b4:	91 05       	cpc	r25, r1
    14b6:	29 f1       	breq	.+74     	; 0x1502 <GPIO_voidSetPortDDR+0x96>
    14b8:	2f c0       	rjmp	.+94     	; 0x1518 <GPIO_voidSetPortDDR+0xac>
		{
			case GPIOA :
				if(copy_u8Mode ==OUTPUT )
    14ba:	8a 81       	ldd	r24, Y+2	; 0x02
    14bc:	81 30       	cpi	r24, 0x01	; 1
    14be:	29 f4       	brne	.+10     	; 0x14ca <GPIO_voidSetPortDDR+0x5e>
				{
					DDRA= 0xFF;
    14c0:	ea e3       	ldi	r30, 0x3A	; 58
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	8f ef       	ldi	r24, 0xFF	; 255
    14c6:	80 83       	st	Z, r24
    14c8:	27 c0       	rjmp	.+78     	; 0x1518 <GPIO_voidSetPortDDR+0xac>
				}
				else {
					DDRA = 0x00 ;
    14ca:	ea e3       	ldi	r30, 0x3A	; 58
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	10 82       	st	Z, r1
    14d0:	23 c0       	rjmp	.+70     	; 0x1518 <GPIO_voidSetPortDDR+0xac>
				}
				break;
			case GPIOB :
				if(copy_u8Mode ==OUTPUT )
    14d2:	8a 81       	ldd	r24, Y+2	; 0x02
    14d4:	81 30       	cpi	r24, 0x01	; 1
    14d6:	29 f4       	brne	.+10     	; 0x14e2 <GPIO_voidSetPortDDR+0x76>
				{
					DDRB = 0xFF;
    14d8:	e7 e3       	ldi	r30, 0x37	; 55
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	8f ef       	ldi	r24, 0xFF	; 255
    14de:	80 83       	st	Z, r24
    14e0:	1b c0       	rjmp	.+54     	; 0x1518 <GPIO_voidSetPortDDR+0xac>
				}
				else {
					DDRB = 0x00;
    14e2:	e7 e3       	ldi	r30, 0x37	; 55
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	10 82       	st	Z, r1
    14e8:	17 c0       	rjmp	.+46     	; 0x1518 <GPIO_voidSetPortDDR+0xac>
				}
				break;
			case GPIOC :
				if(copy_u8Mode ==OUTPUT )
    14ea:	8a 81       	ldd	r24, Y+2	; 0x02
    14ec:	81 30       	cpi	r24, 0x01	; 1
    14ee:	29 f4       	brne	.+10     	; 0x14fa <GPIO_voidSetPortDDR+0x8e>
				{
					DDRC = 0xFF ;
    14f0:	e4 e3       	ldi	r30, 0x34	; 52
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	8f ef       	ldi	r24, 0xFF	; 255
    14f6:	80 83       	st	Z, r24
    14f8:	0f c0       	rjmp	.+30     	; 0x1518 <GPIO_voidSetPortDDR+0xac>
				}
				else {
					DDRC = 0x00 ;
    14fa:	e4 e3       	ldi	r30, 0x34	; 52
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	10 82       	st	Z, r1
    1500:	0b c0       	rjmp	.+22     	; 0x1518 <GPIO_voidSetPortDDR+0xac>
				}
				break;
			case GPIOD :
				if(copy_u8Mode ==OUTPUT )
    1502:	8a 81       	ldd	r24, Y+2	; 0x02
    1504:	81 30       	cpi	r24, 0x01	; 1
    1506:	29 f4       	brne	.+10     	; 0x1512 <GPIO_voidSetPortDDR+0xa6>
				{
					DDRD = 0xFF;
    1508:	e1 e3       	ldi	r30, 0x31	; 49
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	8f ef       	ldi	r24, 0xFF	; 255
    150e:	80 83       	st	Z, r24
    1510:	03 c0       	rjmp	.+6      	; 0x1518 <GPIO_voidSetPortDDR+0xac>
				}
				else {
					DDRD = 0x00;
    1512:	e1 e3       	ldi	r30, 0x31	; 49
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	10 82       	st	Z, r1
				}
				break;	
			default:
				break;
		}
	}
    1518:	0f 90       	pop	r0
    151a:	0f 90       	pop	r0
    151c:	0f 90       	pop	r0
    151e:	0f 90       	pop	r0
    1520:	cf 91       	pop	r28
    1522:	df 91       	pop	r29
    1524:	08 95       	ret

00001526 <GPIO_voidWritePort>:
	void	GPIO_voidWritePort (u8 copy_u8Port , u8 copy_u8Value)
	{
    1526:	df 93       	push	r29
    1528:	cf 93       	push	r28
    152a:	00 d0       	rcall	.+0      	; 0x152c <GPIO_voidWritePort+0x6>
    152c:	00 d0       	rcall	.+0      	; 0x152e <GPIO_voidWritePort+0x8>
    152e:	cd b7       	in	r28, 0x3d	; 61
    1530:	de b7       	in	r29, 0x3e	; 62
    1532:	89 83       	std	Y+1, r24	; 0x01
    1534:	6a 83       	std	Y+2, r22	; 0x02
			switch(copy_u8Port)
    1536:	89 81       	ldd	r24, Y+1	; 0x01
    1538:	28 2f       	mov	r18, r24
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	3c 83       	std	Y+4, r19	; 0x04
    153e:	2b 83       	std	Y+3, r18	; 0x03
    1540:	8b 81       	ldd	r24, Y+3	; 0x03
    1542:	9c 81       	ldd	r25, Y+4	; 0x04
    1544:	81 30       	cpi	r24, 0x01	; 1
    1546:	91 05       	cpc	r25, r1
    1548:	d1 f0       	breq	.+52     	; 0x157e <GPIO_voidWritePort+0x58>
    154a:	2b 81       	ldd	r18, Y+3	; 0x03
    154c:	3c 81       	ldd	r19, Y+4	; 0x04
    154e:	22 30       	cpi	r18, 0x02	; 2
    1550:	31 05       	cpc	r19, r1
    1552:	2c f4       	brge	.+10     	; 0x155e <GPIO_voidWritePort+0x38>
    1554:	8b 81       	ldd	r24, Y+3	; 0x03
    1556:	9c 81       	ldd	r25, Y+4	; 0x04
    1558:	00 97       	sbiw	r24, 0x00	; 0
    155a:	61 f0       	breq	.+24     	; 0x1574 <GPIO_voidWritePort+0x4e>
    155c:	1e c0       	rjmp	.+60     	; 0x159a <GPIO_voidWritePort+0x74>
    155e:	2b 81       	ldd	r18, Y+3	; 0x03
    1560:	3c 81       	ldd	r19, Y+4	; 0x04
    1562:	22 30       	cpi	r18, 0x02	; 2
    1564:	31 05       	cpc	r19, r1
    1566:	81 f0       	breq	.+32     	; 0x1588 <GPIO_voidWritePort+0x62>
    1568:	8b 81       	ldd	r24, Y+3	; 0x03
    156a:	9c 81       	ldd	r25, Y+4	; 0x04
    156c:	83 30       	cpi	r24, 0x03	; 3
    156e:	91 05       	cpc	r25, r1
    1570:	81 f0       	breq	.+32     	; 0x1592 <GPIO_voidWritePort+0x6c>
    1572:	13 c0       	rjmp	.+38     	; 0x159a <GPIO_voidWritePort+0x74>
		{
			case GPIOA :
				PORTA = copy_u8Value ;
    1574:	eb e3       	ldi	r30, 0x3B	; 59
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	8a 81       	ldd	r24, Y+2	; 0x02
    157a:	80 83       	st	Z, r24
    157c:	0e c0       	rjmp	.+28     	; 0x159a <GPIO_voidWritePort+0x74>
				break;
			case GPIOB :
				PORTB = copy_u8Value;
    157e:	e8 e3       	ldi	r30, 0x38	; 56
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	8a 81       	ldd	r24, Y+2	; 0x02
    1584:	80 83       	st	Z, r24
    1586:	09 c0       	rjmp	.+18     	; 0x159a <GPIO_voidWritePort+0x74>
				break;
			case GPIOC :
				PORTC = copy_u8Value;
    1588:	e5 e3       	ldi	r30, 0x35	; 53
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	8a 81       	ldd	r24, Y+2	; 0x02
    158e:	80 83       	st	Z, r24
    1590:	04 c0       	rjmp	.+8      	; 0x159a <GPIO_voidWritePort+0x74>
				break;
			case GPIOD :
				PORTD = copy_u8Value;
    1592:	e2 e3       	ldi	r30, 0x32	; 50
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	8a 81       	ldd	r24, Y+2	; 0x02
    1598:	80 83       	st	Z, r24
				break;
		}
		
			
			
		}
    159a:	0f 90       	pop	r0
    159c:	0f 90       	pop	r0
    159e:	0f 90       	pop	r0
    15a0:	0f 90       	pop	r0
    15a2:	cf 91       	pop	r28
    15a4:	df 91       	pop	r29
    15a6:	08 95       	ret

000015a8 <GPIO_voidSetLowNippleDDR>:
	void GPIO_voidSetLowNippleDDR(u8 copy_u8Port , u8 copy_u8Mode)
	{
    15a8:	df 93       	push	r29
    15aa:	cf 93       	push	r28
    15ac:	00 d0       	rcall	.+0      	; 0x15ae <GPIO_voidSetLowNippleDDR+0x6>
    15ae:	0f 92       	push	r0
    15b0:	cd b7       	in	r28, 0x3d	; 61
    15b2:	de b7       	in	r29, 0x3e	; 62
    15b4:	8a 83       	std	Y+2, r24	; 0x02
    15b6:	6b 83       	std	Y+3, r22	; 0x03
		u8 i ;
		for (i= 0 ; i<4 ; i++){
    15b8:	19 82       	std	Y+1, r1	; 0x01
    15ba:	08 c0       	rjmp	.+16     	; 0x15cc <GPIO_voidSetLowNippleDDR+0x24>
			GPIO_voidSetPinDDR(copy_u8Port , i ,copy_u8Mode );
    15bc:	8a 81       	ldd	r24, Y+2	; 0x02
    15be:	69 81       	ldd	r22, Y+1	; 0x01
    15c0:	4b 81       	ldd	r20, Y+3	; 0x03
    15c2:	0e 94 48 07 	call	0xe90	; 0xe90 <GPIO_voidSetPinDDR>
			
		}
	void GPIO_voidSetLowNippleDDR(u8 copy_u8Port , u8 copy_u8Mode)
	{
		u8 i ;
		for (i= 0 ; i<4 ; i++){
    15c6:	89 81       	ldd	r24, Y+1	; 0x01
    15c8:	8f 5f       	subi	r24, 0xFF	; 255
    15ca:	89 83       	std	Y+1, r24	; 0x01
    15cc:	89 81       	ldd	r24, Y+1	; 0x01
    15ce:	84 30       	cpi	r24, 0x04	; 4
    15d0:	a8 f3       	brcs	.-22     	; 0x15bc <GPIO_voidSetLowNippleDDR+0x14>
			GPIO_voidSetPinDDR(copy_u8Port , i ,copy_u8Mode );
		}
	}
    15d2:	0f 90       	pop	r0
    15d4:	0f 90       	pop	r0
    15d6:	0f 90       	pop	r0
    15d8:	cf 91       	pop	r28
    15da:	df 91       	pop	r29
    15dc:	08 95       	ret

000015de <GPIO_voidSetHighNippleDDR>:
	void GPIO_voidSetHighNippleDDR(u8 copy_u8Port , u8 copy_u8Mode)
	{
    15de:	df 93       	push	r29
    15e0:	cf 93       	push	r28
    15e2:	00 d0       	rcall	.+0      	; 0x15e4 <GPIO_voidSetHighNippleDDR+0x6>
    15e4:	0f 92       	push	r0
    15e6:	cd b7       	in	r28, 0x3d	; 61
    15e8:	de b7       	in	r29, 0x3e	; 62
    15ea:	8a 83       	std	Y+2, r24	; 0x02
    15ec:	6b 83       	std	Y+3, r22	; 0x03
		u8 i ;
		for (i= 4 ; i<8 ; i++){
    15ee:	84 e0       	ldi	r24, 0x04	; 4
    15f0:	89 83       	std	Y+1, r24	; 0x01
    15f2:	08 c0       	rjmp	.+16     	; 0x1604 <GPIO_voidSetHighNippleDDR+0x26>
			GPIO_voidSetPinDDR(copy_u8Port , i ,copy_u8Mode );
    15f4:	8a 81       	ldd	r24, Y+2	; 0x02
    15f6:	69 81       	ldd	r22, Y+1	; 0x01
    15f8:	4b 81       	ldd	r20, Y+3	; 0x03
    15fa:	0e 94 48 07 	call	0xe90	; 0xe90 <GPIO_voidSetPinDDR>
		}
	}
	void GPIO_voidSetHighNippleDDR(u8 copy_u8Port , u8 copy_u8Mode)
	{
		u8 i ;
		for (i= 4 ; i<8 ; i++){
    15fe:	89 81       	ldd	r24, Y+1	; 0x01
    1600:	8f 5f       	subi	r24, 0xFF	; 255
    1602:	89 83       	std	Y+1, r24	; 0x01
    1604:	89 81       	ldd	r24, Y+1	; 0x01
    1606:	88 30       	cpi	r24, 0x08	; 8
    1608:	a8 f3       	brcs	.-22     	; 0x15f4 <GPIO_voidSetHighNippleDDR+0x16>
			GPIO_voidSetPinDDR(copy_u8Port , i ,copy_u8Mode );
		}
	}
    160a:	0f 90       	pop	r0
    160c:	0f 90       	pop	r0
    160e:	0f 90       	pop	r0
    1610:	cf 91       	pop	r28
    1612:	df 91       	pop	r29
    1614:	08 95       	ret

00001616 <GPIO_voidWriteLowNipple>:
	void GPIO_voidWriteLowNipple (u8 copy_u8Port , u8 copy_u8Value )
	{
    1616:	df 93       	push	r29
    1618:	cf 93       	push	r28
    161a:	00 d0       	rcall	.+0      	; 0x161c <GPIO_voidWriteLowNipple+0x6>
    161c:	00 d0       	rcall	.+0      	; 0x161e <GPIO_voidWriteLowNipple+0x8>
    161e:	cd b7       	in	r28, 0x3d	; 61
    1620:	de b7       	in	r29, 0x3e	; 62
    1622:	89 83       	std	Y+1, r24	; 0x01
    1624:	6a 83       	std	Y+2, r22	; 0x02
		copy_u8Value &= 0x0F;
    1626:	8a 81       	ldd	r24, Y+2	; 0x02
    1628:	8f 70       	andi	r24, 0x0F	; 15
    162a:	8a 83       	std	Y+2, r24	; 0x02
		switch (copy_u8Port) {
    162c:	89 81       	ldd	r24, Y+1	; 0x01
    162e:	28 2f       	mov	r18, r24
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	3c 83       	std	Y+4, r19	; 0x04
    1634:	2b 83       	std	Y+3, r18	; 0x03
    1636:	8b 81       	ldd	r24, Y+3	; 0x03
    1638:	9c 81       	ldd	r25, Y+4	; 0x04
    163a:	81 30       	cpi	r24, 0x01	; 1
    163c:	91 05       	cpc	r25, r1
    163e:	29 f1       	breq	.+74     	; 0x168a <GPIO_voidWriteLowNipple+0x74>
    1640:	2b 81       	ldd	r18, Y+3	; 0x03
    1642:	3c 81       	ldd	r19, Y+4	; 0x04
    1644:	22 30       	cpi	r18, 0x02	; 2
    1646:	31 05       	cpc	r19, r1
    1648:	2c f4       	brge	.+10     	; 0x1654 <GPIO_voidWriteLowNipple+0x3e>
    164a:	8b 81       	ldd	r24, Y+3	; 0x03
    164c:	9c 81       	ldd	r25, Y+4	; 0x04
    164e:	00 97       	sbiw	r24, 0x00	; 0
    1650:	61 f0       	breq	.+24     	; 0x166a <GPIO_voidWriteLowNipple+0x54>
    1652:	4a c0       	rjmp	.+148    	; 0x16e8 <GPIO_voidWriteLowNipple+0xd2>
    1654:	2b 81       	ldd	r18, Y+3	; 0x03
    1656:	3c 81       	ldd	r19, Y+4	; 0x04
    1658:	22 30       	cpi	r18, 0x02	; 2
    165a:	31 05       	cpc	r19, r1
    165c:	31 f1       	breq	.+76     	; 0x16aa <GPIO_voidWriteLowNipple+0x94>
    165e:	8b 81       	ldd	r24, Y+3	; 0x03
    1660:	9c 81       	ldd	r25, Y+4	; 0x04
    1662:	83 30       	cpi	r24, 0x03	; 3
    1664:	91 05       	cpc	r25, r1
    1666:	89 f1       	breq	.+98     	; 0x16ca <GPIO_voidWriteLowNipple+0xb4>
    1668:	3f c0       	rjmp	.+126    	; 0x16e8 <GPIO_voidWriteLowNipple+0xd2>
			case GPIOA :
				PORTA &= 0xF0 ; 
    166a:	ab e3       	ldi	r26, 0x3B	; 59
    166c:	b0 e0       	ldi	r27, 0x00	; 0
    166e:	eb e3       	ldi	r30, 0x3B	; 59
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	80 81       	ld	r24, Z
    1674:	80 7f       	andi	r24, 0xF0	; 240
    1676:	8c 93       	st	X, r24
				PORTA |= copy_u8Value ;
    1678:	ab e3       	ldi	r26, 0x3B	; 59
    167a:	b0 e0       	ldi	r27, 0x00	; 0
    167c:	eb e3       	ldi	r30, 0x3B	; 59
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	90 81       	ld	r25, Z
    1682:	8a 81       	ldd	r24, Y+2	; 0x02
    1684:	89 2b       	or	r24, r25
    1686:	8c 93       	st	X, r24
    1688:	2f c0       	rjmp	.+94     	; 0x16e8 <GPIO_voidWriteLowNipple+0xd2>
				break;
			case GPIOB :
				PORTB &= 0xF0 ; 
    168a:	a8 e3       	ldi	r26, 0x38	; 56
    168c:	b0 e0       	ldi	r27, 0x00	; 0
    168e:	e8 e3       	ldi	r30, 0x38	; 56
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	80 81       	ld	r24, Z
    1694:	80 7f       	andi	r24, 0xF0	; 240
    1696:	8c 93       	st	X, r24
				PORTB |= copy_u8Value ;
    1698:	a8 e3       	ldi	r26, 0x38	; 56
    169a:	b0 e0       	ldi	r27, 0x00	; 0
    169c:	e8 e3       	ldi	r30, 0x38	; 56
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	90 81       	ld	r25, Z
    16a2:	8a 81       	ldd	r24, Y+2	; 0x02
    16a4:	89 2b       	or	r24, r25
    16a6:	8c 93       	st	X, r24
    16a8:	1f c0       	rjmp	.+62     	; 0x16e8 <GPIO_voidWriteLowNipple+0xd2>
				break;
			case GPIOC :
				PORTC &= 0xF0 ; 
    16aa:	a5 e3       	ldi	r26, 0x35	; 53
    16ac:	b0 e0       	ldi	r27, 0x00	; 0
    16ae:	e5 e3       	ldi	r30, 0x35	; 53
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	80 81       	ld	r24, Z
    16b4:	80 7f       	andi	r24, 0xF0	; 240
    16b6:	8c 93       	st	X, r24
				PORTC |= copy_u8Value ;
    16b8:	a5 e3       	ldi	r26, 0x35	; 53
    16ba:	b0 e0       	ldi	r27, 0x00	; 0
    16bc:	e5 e3       	ldi	r30, 0x35	; 53
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	90 81       	ld	r25, Z
    16c2:	8a 81       	ldd	r24, Y+2	; 0x02
    16c4:	89 2b       	or	r24, r25
    16c6:	8c 93       	st	X, r24
    16c8:	0f c0       	rjmp	.+30     	; 0x16e8 <GPIO_voidWriteLowNipple+0xd2>
				break;
			case GPIOD :
				PORTD &= 0xF0 ; 
    16ca:	a2 e3       	ldi	r26, 0x32	; 50
    16cc:	b0 e0       	ldi	r27, 0x00	; 0
    16ce:	e2 e3       	ldi	r30, 0x32	; 50
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	80 81       	ld	r24, Z
    16d4:	80 7f       	andi	r24, 0xF0	; 240
    16d6:	8c 93       	st	X, r24
				PORTD |= copy_u8Value ;
    16d8:	a2 e3       	ldi	r26, 0x32	; 50
    16da:	b0 e0       	ldi	r27, 0x00	; 0
    16dc:	e2 e3       	ldi	r30, 0x32	; 50
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	90 81       	ld	r25, Z
    16e2:	8a 81       	ldd	r24, Y+2	; 0x02
    16e4:	89 2b       	or	r24, r25
    16e6:	8c 93       	st	X, r24
				break;	
		}
	}
    16e8:	0f 90       	pop	r0
    16ea:	0f 90       	pop	r0
    16ec:	0f 90       	pop	r0
    16ee:	0f 90       	pop	r0
    16f0:	cf 91       	pop	r28
    16f2:	df 91       	pop	r29
    16f4:	08 95       	ret

000016f6 <GPIO_voidWriteHighNipple>:
	void GPIO_voidWriteHighNipple (u8 copy_u8Port , u8 copy_u8Value )
	{
    16f6:	df 93       	push	r29
    16f8:	cf 93       	push	r28
    16fa:	00 d0       	rcall	.+0      	; 0x16fc <GPIO_voidWriteHighNipple+0x6>
    16fc:	00 d0       	rcall	.+0      	; 0x16fe <GPIO_voidWriteHighNipple+0x8>
    16fe:	cd b7       	in	r28, 0x3d	; 61
    1700:	de b7       	in	r29, 0x3e	; 62
    1702:	89 83       	std	Y+1, r24	; 0x01
    1704:	6a 83       	std	Y+2, r22	; 0x02
		copy_u8Value &= 0xF0;
    1706:	8a 81       	ldd	r24, Y+2	; 0x02
    1708:	80 7f       	andi	r24, 0xF0	; 240
    170a:	8a 83       	std	Y+2, r24	; 0x02
		switch (copy_u8Port) {
    170c:	89 81       	ldd	r24, Y+1	; 0x01
    170e:	28 2f       	mov	r18, r24
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	3c 83       	std	Y+4, r19	; 0x04
    1714:	2b 83       	std	Y+3, r18	; 0x03
    1716:	8b 81       	ldd	r24, Y+3	; 0x03
    1718:	9c 81       	ldd	r25, Y+4	; 0x04
    171a:	81 30       	cpi	r24, 0x01	; 1
    171c:	91 05       	cpc	r25, r1
    171e:	29 f1       	breq	.+74     	; 0x176a <GPIO_voidWriteHighNipple+0x74>
    1720:	2b 81       	ldd	r18, Y+3	; 0x03
    1722:	3c 81       	ldd	r19, Y+4	; 0x04
    1724:	22 30       	cpi	r18, 0x02	; 2
    1726:	31 05       	cpc	r19, r1
    1728:	2c f4       	brge	.+10     	; 0x1734 <GPIO_voidWriteHighNipple+0x3e>
    172a:	8b 81       	ldd	r24, Y+3	; 0x03
    172c:	9c 81       	ldd	r25, Y+4	; 0x04
    172e:	00 97       	sbiw	r24, 0x00	; 0
    1730:	61 f0       	breq	.+24     	; 0x174a <GPIO_voidWriteHighNipple+0x54>
    1732:	4a c0       	rjmp	.+148    	; 0x17c8 <GPIO_voidWriteHighNipple+0xd2>
    1734:	2b 81       	ldd	r18, Y+3	; 0x03
    1736:	3c 81       	ldd	r19, Y+4	; 0x04
    1738:	22 30       	cpi	r18, 0x02	; 2
    173a:	31 05       	cpc	r19, r1
    173c:	31 f1       	breq	.+76     	; 0x178a <GPIO_voidWriteHighNipple+0x94>
    173e:	8b 81       	ldd	r24, Y+3	; 0x03
    1740:	9c 81       	ldd	r25, Y+4	; 0x04
    1742:	83 30       	cpi	r24, 0x03	; 3
    1744:	91 05       	cpc	r25, r1
    1746:	89 f1       	breq	.+98     	; 0x17aa <GPIO_voidWriteHighNipple+0xb4>
    1748:	3f c0       	rjmp	.+126    	; 0x17c8 <GPIO_voidWriteHighNipple+0xd2>
			case GPIOA :
				PORTA &= 0x0F ; 
    174a:	ab e3       	ldi	r26, 0x3B	; 59
    174c:	b0 e0       	ldi	r27, 0x00	; 0
    174e:	eb e3       	ldi	r30, 0x3B	; 59
    1750:	f0 e0       	ldi	r31, 0x00	; 0
    1752:	80 81       	ld	r24, Z
    1754:	8f 70       	andi	r24, 0x0F	; 15
    1756:	8c 93       	st	X, r24
				PORTA |= copy_u8Value ;
    1758:	ab e3       	ldi	r26, 0x3B	; 59
    175a:	b0 e0       	ldi	r27, 0x00	; 0
    175c:	eb e3       	ldi	r30, 0x3B	; 59
    175e:	f0 e0       	ldi	r31, 0x00	; 0
    1760:	90 81       	ld	r25, Z
    1762:	8a 81       	ldd	r24, Y+2	; 0x02
    1764:	89 2b       	or	r24, r25
    1766:	8c 93       	st	X, r24
    1768:	2f c0       	rjmp	.+94     	; 0x17c8 <GPIO_voidWriteHighNipple+0xd2>
				break;
			case GPIOB :
				PORTB &= 0x0F ; 
    176a:	a8 e3       	ldi	r26, 0x38	; 56
    176c:	b0 e0       	ldi	r27, 0x00	; 0
    176e:	e8 e3       	ldi	r30, 0x38	; 56
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	80 81       	ld	r24, Z
    1774:	8f 70       	andi	r24, 0x0F	; 15
    1776:	8c 93       	st	X, r24
				PORTB |= copy_u8Value ;
    1778:	a8 e3       	ldi	r26, 0x38	; 56
    177a:	b0 e0       	ldi	r27, 0x00	; 0
    177c:	e8 e3       	ldi	r30, 0x38	; 56
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	90 81       	ld	r25, Z
    1782:	8a 81       	ldd	r24, Y+2	; 0x02
    1784:	89 2b       	or	r24, r25
    1786:	8c 93       	st	X, r24
    1788:	1f c0       	rjmp	.+62     	; 0x17c8 <GPIO_voidWriteHighNipple+0xd2>
				break;
			case GPIOC :
				PORTC &= 0x0F ; 
    178a:	a5 e3       	ldi	r26, 0x35	; 53
    178c:	b0 e0       	ldi	r27, 0x00	; 0
    178e:	e5 e3       	ldi	r30, 0x35	; 53
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 81       	ld	r24, Z
    1794:	8f 70       	andi	r24, 0x0F	; 15
    1796:	8c 93       	st	X, r24
				PORTC |= copy_u8Value ;
    1798:	a5 e3       	ldi	r26, 0x35	; 53
    179a:	b0 e0       	ldi	r27, 0x00	; 0
    179c:	e5 e3       	ldi	r30, 0x35	; 53
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	90 81       	ld	r25, Z
    17a2:	8a 81       	ldd	r24, Y+2	; 0x02
    17a4:	89 2b       	or	r24, r25
    17a6:	8c 93       	st	X, r24
    17a8:	0f c0       	rjmp	.+30     	; 0x17c8 <GPIO_voidWriteHighNipple+0xd2>
				break;
			case GPIOD :
				PORTD &= 0x0F ; 
    17aa:	a2 e3       	ldi	r26, 0x32	; 50
    17ac:	b0 e0       	ldi	r27, 0x00	; 0
    17ae:	e2 e3       	ldi	r30, 0x32	; 50
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	80 81       	ld	r24, Z
    17b4:	8f 70       	andi	r24, 0x0F	; 15
    17b6:	8c 93       	st	X, r24
				PORTD |= copy_u8Value ;
    17b8:	a2 e3       	ldi	r26, 0x32	; 50
    17ba:	b0 e0       	ldi	r27, 0x00	; 0
    17bc:	e2 e3       	ldi	r30, 0x32	; 50
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	90 81       	ld	r25, Z
    17c2:	8a 81       	ldd	r24, Y+2	; 0x02
    17c4:	89 2b       	or	r24, r25
    17c6:	8c 93       	st	X, r24
				break;	
		}
	}
    17c8:	0f 90       	pop	r0
    17ca:	0f 90       	pop	r0
    17cc:	0f 90       	pop	r0
    17ce:	0f 90       	pop	r0
    17d0:	cf 91       	pop	r28
    17d2:	df 91       	pop	r29
    17d4:	08 95       	ret

000017d6 <STP_voidIntit>:
#include "util/delay.h"

u8 DataSerPort ,DataSerPin , DataClkPort , DataClkPin , StrPort  , StrPin ;

void STP_voidIntit(u8 copy_u8DataSerPort ,u8 copy_u8DataSerPin , u8 copy_u8DataClkPort ,u8 copy_u8DataClkPin ,u8 copy_u8StrPort ,u8 copy_u8StrPin)
{
    17d6:	ef 92       	push	r14
    17d8:	0f 93       	push	r16
    17da:	df 93       	push	r29
    17dc:	cf 93       	push	r28
    17de:	00 d0       	rcall	.+0      	; 0x17e0 <STP_voidIntit+0xa>
    17e0:	00 d0       	rcall	.+0      	; 0x17e2 <STP_voidIntit+0xc>
    17e2:	00 d0       	rcall	.+0      	; 0x17e4 <STP_voidIntit+0xe>
    17e4:	cd b7       	in	r28, 0x3d	; 61
    17e6:	de b7       	in	r29, 0x3e	; 62
    17e8:	89 83       	std	Y+1, r24	; 0x01
    17ea:	6a 83       	std	Y+2, r22	; 0x02
    17ec:	4b 83       	std	Y+3, r20	; 0x03
    17ee:	2c 83       	std	Y+4, r18	; 0x04
    17f0:	0d 83       	std	Y+5, r16	; 0x05
    17f2:	ee 82       	std	Y+6, r14	; 0x06
	DataSerPort = copy_u8DataSerPort ;
    17f4:	89 81       	ldd	r24, Y+1	; 0x01
    17f6:	80 93 72 00 	sts	0x0072, r24
	DataSerPin = copy_u8DataSerPin;
    17fa:	8a 81       	ldd	r24, Y+2	; 0x02
    17fc:	80 93 73 00 	sts	0x0073, r24
	DataClkPort =  copy_u8DataClkPort ;
    1800:	8b 81       	ldd	r24, Y+3	; 0x03
    1802:	80 93 6f 00 	sts	0x006F, r24
	DataClkPin = copy_u8DataClkPin ;
    1806:	8c 81       	ldd	r24, Y+4	; 0x04
    1808:	80 93 6e 00 	sts	0x006E, r24
	StrPort = copy_u8StrPort ;
    180c:	8d 81       	ldd	r24, Y+5	; 0x05
    180e:	80 93 70 00 	sts	0x0070, r24
	StrPin = copy_u8StrPin ; 
    1812:	8e 81       	ldd	r24, Y+6	; 0x06
    1814:	80 93 71 00 	sts	0x0071, r24
	GPIO_voidSetPinDDR (copy_u8DataSerPort , copy_u8DataSerPin , OUTPUT);
    1818:	89 81       	ldd	r24, Y+1	; 0x01
    181a:	6a 81       	ldd	r22, Y+2	; 0x02
    181c:	41 e0       	ldi	r20, 0x01	; 1
    181e:	0e 94 48 07 	call	0xe90	; 0xe90 <GPIO_voidSetPinDDR>
	GPIO_voidSetPinDDR (copy_u8DataClkPort ,copy_u8DataClkPin , OUTPUT );
    1822:	8b 81       	ldd	r24, Y+3	; 0x03
    1824:	6c 81       	ldd	r22, Y+4	; 0x04
    1826:	41 e0       	ldi	r20, 0x01	; 1
    1828:	0e 94 48 07 	call	0xe90	; 0xe90 <GPIO_voidSetPinDDR>
	GPIO_voidSetPinDDR (copy_u8StrPort , copy_u8StrPin , OUTPUT);
    182c:	8d 81       	ldd	r24, Y+5	; 0x05
    182e:	6e 81       	ldd	r22, Y+6	; 0x06
    1830:	41 e0       	ldi	r20, 0x01	; 1
    1832:	0e 94 48 07 	call	0xe90	; 0xe90 <GPIO_voidSetPinDDR>
}
    1836:	26 96       	adiw	r28, 0x06	; 6
    1838:	0f b6       	in	r0, 0x3f	; 63
    183a:	f8 94       	cli
    183c:	de bf       	out	0x3e, r29	; 62
    183e:	0f be       	out	0x3f, r0	; 63
    1840:	cd bf       	out	0x3d, r28	; 61
    1842:	cf 91       	pop	r28
    1844:	df 91       	pop	r29
    1846:	0f 91       	pop	r16
    1848:	ef 90       	pop	r14
    184a:	08 95       	ret

0000184c <STP_voidSend>:

void STP_voidSend (u8 copy_u8DataSend)
{
    184c:	0f 93       	push	r16
    184e:	1f 93       	push	r17
    1850:	df 93       	push	r29
    1852:	cf 93       	push	r28
    1854:	cd b7       	in	r28, 0x3d	; 61
    1856:	de b7       	in	r29, 0x3e	; 62
    1858:	c2 56       	subi	r28, 0x62	; 98
    185a:	d0 40       	sbci	r29, 0x00	; 0
    185c:	0f b6       	in	r0, 0x3f	; 63
    185e:	f8 94       	cli
    1860:	de bf       	out	0x3e, r29	; 62
    1862:	0f be       	out	0x3f, r0	; 63
    1864:	cd bf       	out	0x3d, r28	; 61
    1866:	fe 01       	movw	r30, r28
    1868:	ee 59       	subi	r30, 0x9E	; 158
    186a:	ff 4f       	sbci	r31, 0xFF	; 255
    186c:	80 83       	st	Z, r24
	u8 Counter  ;
	for (Counter = 8 ; Counter > 0 ; Counter -- )
    186e:	fe 01       	movw	r30, r28
    1870:	ef 59       	subi	r30, 0x9F	; 159
    1872:	ff 4f       	sbci	r31, 0xFF	; 255
    1874:	88 e0       	ldi	r24, 0x08	; 8
    1876:	80 83       	st	Z, r24
    1878:	50 c2       	rjmp	.+1184   	; 0x1d1a <STP_voidSend+0x4ce>
	{
		//Local_u8Data =  GET_BIT (copy_u8DataSend , Counter);
		GPIO_voidWritePin (DataSerPort ,DataSerPin , GET_BIT (copy_u8DataSend , Counter-1) );
    187a:	60 91 72 00 	lds	r22, 0x0072
    187e:	70 91 73 00 	lds	r23, 0x0073
    1882:	fe 01       	movw	r30, r28
    1884:	ee 59       	subi	r30, 0x9E	; 158
    1886:	ff 4f       	sbci	r31, 0xFF	; 255
    1888:	80 81       	ld	r24, Z
    188a:	48 2f       	mov	r20, r24
    188c:	50 e0       	ldi	r21, 0x00	; 0
    188e:	fe 01       	movw	r30, r28
    1890:	ef 59       	subi	r30, 0x9F	; 159
    1892:	ff 4f       	sbci	r31, 0xFF	; 255
    1894:	80 81       	ld	r24, Z
    1896:	88 2f       	mov	r24, r24
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	9c 01       	movw	r18, r24
    189c:	21 50       	subi	r18, 0x01	; 1
    189e:	30 40       	sbci	r19, 0x00	; 0
    18a0:	81 e0       	ldi	r24, 0x01	; 1
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	02 c0       	rjmp	.+4      	; 0x18aa <STP_voidSend+0x5e>
    18a6:	88 0f       	add	r24, r24
    18a8:	99 1f       	adc	r25, r25
    18aa:	2a 95       	dec	r18
    18ac:	e2 f7       	brpl	.-8      	; 0x18a6 <STP_voidSend+0x5a>
    18ae:	9a 01       	movw	r18, r20
    18b0:	28 23       	and	r18, r24
    18b2:	39 23       	and	r19, r25
    18b4:	fe 01       	movw	r30, r28
    18b6:	ef 59       	subi	r30, 0x9F	; 159
    18b8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ba:	80 81       	ld	r24, Z
    18bc:	88 2f       	mov	r24, r24
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	01 97       	sbiw	r24, 0x01	; 1
    18c2:	a9 01       	movw	r20, r18
    18c4:	02 c0       	rjmp	.+4      	; 0x18ca <STP_voidSend+0x7e>
    18c6:	55 95       	asr	r21
    18c8:	47 95       	ror	r20
    18ca:	8a 95       	dec	r24
    18cc:	e2 f7       	brpl	.-8      	; 0x18c6 <STP_voidSend+0x7a>
    18ce:	ca 01       	movw	r24, r20
    18d0:	98 2f       	mov	r25, r24
    18d2:	86 2f       	mov	r24, r22
    18d4:	67 2f       	mov	r22, r23
    18d6:	49 2f       	mov	r20, r25
    18d8:	0e 94 2b 08 	call	0x1056	; 0x1056 <GPIO_voidWritePin>
		GPIO_voidWritePin (DataClkPort , DataClkPin , HIGH);
    18dc:	80 91 6f 00 	lds	r24, 0x006F
    18e0:	90 91 6e 00 	lds	r25, 0x006E
    18e4:	69 2f       	mov	r22, r25
    18e6:	41 e0       	ldi	r20, 0x01	; 1
    18e8:	0e 94 2b 08 	call	0x1056	; 0x1056 <GPIO_voidWritePin>
    18ec:	fe 01       	movw	r30, r28
    18ee:	e3 5a       	subi	r30, 0xA3	; 163
    18f0:	ff 4f       	sbci	r31, 0xFF	; 255
    18f2:	80 e0       	ldi	r24, 0x00	; 0
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	a0 e8       	ldi	r26, 0x80	; 128
    18f8:	bf e3       	ldi	r27, 0x3F	; 63
    18fa:	80 83       	st	Z, r24
    18fc:	91 83       	std	Z+1, r25	; 0x01
    18fe:	a2 83       	std	Z+2, r26	; 0x02
    1900:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1902:	8e 01       	movw	r16, r28
    1904:	07 5a       	subi	r16, 0xA7	; 167
    1906:	1f 4f       	sbci	r17, 0xFF	; 255
    1908:	fe 01       	movw	r30, r28
    190a:	e3 5a       	subi	r30, 0xA3	; 163
    190c:	ff 4f       	sbci	r31, 0xFF	; 255
    190e:	60 81       	ld	r22, Z
    1910:	71 81       	ldd	r23, Z+1	; 0x01
    1912:	82 81       	ldd	r24, Z+2	; 0x02
    1914:	93 81       	ldd	r25, Z+3	; 0x03
    1916:	2b ea       	ldi	r18, 0xAB	; 171
    1918:	3a ea       	ldi	r19, 0xAA	; 170
    191a:	4a e2       	ldi	r20, 0x2A	; 42
    191c:	50 e4       	ldi	r21, 0x40	; 64
    191e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1922:	dc 01       	movw	r26, r24
    1924:	cb 01       	movw	r24, r22
    1926:	f8 01       	movw	r30, r16
    1928:	80 83       	st	Z, r24
    192a:	91 83       	std	Z+1, r25	; 0x01
    192c:	a2 83       	std	Z+2, r26	; 0x02
    192e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1930:	fe 01       	movw	r30, r28
    1932:	e7 5a       	subi	r30, 0xA7	; 167
    1934:	ff 4f       	sbci	r31, 0xFF	; 255
    1936:	60 81       	ld	r22, Z
    1938:	71 81       	ldd	r23, Z+1	; 0x01
    193a:	82 81       	ldd	r24, Z+2	; 0x02
    193c:	93 81       	ldd	r25, Z+3	; 0x03
    193e:	20 e0       	ldi	r18, 0x00	; 0
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	40 e8       	ldi	r20, 0x80	; 128
    1944:	5f e3       	ldi	r21, 0x3F	; 63
    1946:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    194a:	88 23       	and	r24, r24
    194c:	34 f4       	brge	.+12     	; 0x195a <STP_voidSend+0x10e>
		__ticks = 1;
    194e:	fe 01       	movw	r30, r28
    1950:	e8 5a       	subi	r30, 0xA8	; 168
    1952:	ff 4f       	sbci	r31, 0xFF	; 255
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	80 83       	st	Z, r24
    1958:	e0 c0       	rjmp	.+448    	; 0x1b1a <STP_voidSend+0x2ce>
	else if (__tmp > 255)
    195a:	fe 01       	movw	r30, r28
    195c:	e7 5a       	subi	r30, 0xA7	; 167
    195e:	ff 4f       	sbci	r31, 0xFF	; 255
    1960:	60 81       	ld	r22, Z
    1962:	71 81       	ldd	r23, Z+1	; 0x01
    1964:	82 81       	ldd	r24, Z+2	; 0x02
    1966:	93 81       	ldd	r25, Z+3	; 0x03
    1968:	20 e0       	ldi	r18, 0x00	; 0
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	4f e7       	ldi	r20, 0x7F	; 127
    196e:	53 e4       	ldi	r21, 0x43	; 67
    1970:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1974:	18 16       	cp	r1, r24
    1976:	0c f0       	brlt	.+2      	; 0x197a <STP_voidSend+0x12e>
    1978:	c0 c0       	rjmp	.+384    	; 0x1afa <STP_voidSend+0x2ae>
	{
		_delay_ms(__us / 1000.0);
    197a:	fe 01       	movw	r30, r28
    197c:	e3 5a       	subi	r30, 0xA3	; 163
    197e:	ff 4f       	sbci	r31, 0xFF	; 255
    1980:	60 81       	ld	r22, Z
    1982:	71 81       	ldd	r23, Z+1	; 0x01
    1984:	82 81       	ldd	r24, Z+2	; 0x02
    1986:	93 81       	ldd	r25, Z+3	; 0x03
    1988:	20 e0       	ldi	r18, 0x00	; 0
    198a:	30 e0       	ldi	r19, 0x00	; 0
    198c:	4a e7       	ldi	r20, 0x7A	; 122
    198e:	54 e4       	ldi	r21, 0x44	; 68
    1990:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1994:	dc 01       	movw	r26, r24
    1996:	cb 01       	movw	r24, r22
    1998:	fe 01       	movw	r30, r28
    199a:	ec 5a       	subi	r30, 0xAC	; 172
    199c:	ff 4f       	sbci	r31, 0xFF	; 255
    199e:	80 83       	st	Z, r24
    19a0:	91 83       	std	Z+1, r25	; 0x01
    19a2:	a2 83       	std	Z+2, r26	; 0x02
    19a4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19a6:	8e 01       	movw	r16, r28
    19a8:	00 5b       	subi	r16, 0xB0	; 176
    19aa:	1f 4f       	sbci	r17, 0xFF	; 255
    19ac:	fe 01       	movw	r30, r28
    19ae:	ec 5a       	subi	r30, 0xAC	; 172
    19b0:	ff 4f       	sbci	r31, 0xFF	; 255
    19b2:	60 81       	ld	r22, Z
    19b4:	71 81       	ldd	r23, Z+1	; 0x01
    19b6:	82 81       	ldd	r24, Z+2	; 0x02
    19b8:	93 81       	ldd	r25, Z+3	; 0x03
    19ba:	20 e0       	ldi	r18, 0x00	; 0
    19bc:	30 e0       	ldi	r19, 0x00	; 0
    19be:	4a ef       	ldi	r20, 0xFA	; 250
    19c0:	54 e4       	ldi	r21, 0x44	; 68
    19c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19c6:	dc 01       	movw	r26, r24
    19c8:	cb 01       	movw	r24, r22
    19ca:	f8 01       	movw	r30, r16
    19cc:	80 83       	st	Z, r24
    19ce:	91 83       	std	Z+1, r25	; 0x01
    19d0:	a2 83       	std	Z+2, r26	; 0x02
    19d2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19d4:	fe 01       	movw	r30, r28
    19d6:	e0 5b       	subi	r30, 0xB0	; 176
    19d8:	ff 4f       	sbci	r31, 0xFF	; 255
    19da:	60 81       	ld	r22, Z
    19dc:	71 81       	ldd	r23, Z+1	; 0x01
    19de:	82 81       	ldd	r24, Z+2	; 0x02
    19e0:	93 81       	ldd	r25, Z+3	; 0x03
    19e2:	20 e0       	ldi	r18, 0x00	; 0
    19e4:	30 e0       	ldi	r19, 0x00	; 0
    19e6:	40 e8       	ldi	r20, 0x80	; 128
    19e8:	5f e3       	ldi	r21, 0x3F	; 63
    19ea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19ee:	88 23       	and	r24, r24
    19f0:	44 f4       	brge	.+16     	; 0x1a02 <STP_voidSend+0x1b6>
		__ticks = 1;
    19f2:	fe 01       	movw	r30, r28
    19f4:	e2 5b       	subi	r30, 0xB2	; 178
    19f6:	ff 4f       	sbci	r31, 0xFF	; 255
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	91 83       	std	Z+1, r25	; 0x01
    19fe:	80 83       	st	Z, r24
    1a00:	64 c0       	rjmp	.+200    	; 0x1aca <STP_voidSend+0x27e>
	else if (__tmp > 65535)
    1a02:	fe 01       	movw	r30, r28
    1a04:	e0 5b       	subi	r30, 0xB0	; 176
    1a06:	ff 4f       	sbci	r31, 0xFF	; 255
    1a08:	60 81       	ld	r22, Z
    1a0a:	71 81       	ldd	r23, Z+1	; 0x01
    1a0c:	82 81       	ldd	r24, Z+2	; 0x02
    1a0e:	93 81       	ldd	r25, Z+3	; 0x03
    1a10:	20 e0       	ldi	r18, 0x00	; 0
    1a12:	3f ef       	ldi	r19, 0xFF	; 255
    1a14:	4f e7       	ldi	r20, 0x7F	; 127
    1a16:	57 e4       	ldi	r21, 0x47	; 71
    1a18:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a1c:	18 16       	cp	r1, r24
    1a1e:	0c f0       	brlt	.+2      	; 0x1a22 <STP_voidSend+0x1d6>
    1a20:	43 c0       	rjmp	.+134    	; 0x1aa8 <STP_voidSend+0x25c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a22:	fe 01       	movw	r30, r28
    1a24:	ec 5a       	subi	r30, 0xAC	; 172
    1a26:	ff 4f       	sbci	r31, 0xFF	; 255
    1a28:	60 81       	ld	r22, Z
    1a2a:	71 81       	ldd	r23, Z+1	; 0x01
    1a2c:	82 81       	ldd	r24, Z+2	; 0x02
    1a2e:	93 81       	ldd	r25, Z+3	; 0x03
    1a30:	20 e0       	ldi	r18, 0x00	; 0
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	40 e2       	ldi	r20, 0x20	; 32
    1a36:	51 e4       	ldi	r21, 0x41	; 65
    1a38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a3c:	dc 01       	movw	r26, r24
    1a3e:	cb 01       	movw	r24, r22
    1a40:	8e 01       	movw	r16, r28
    1a42:	02 5b       	subi	r16, 0xB2	; 178
    1a44:	1f 4f       	sbci	r17, 0xFF	; 255
    1a46:	bc 01       	movw	r22, r24
    1a48:	cd 01       	movw	r24, r26
    1a4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a4e:	dc 01       	movw	r26, r24
    1a50:	cb 01       	movw	r24, r22
    1a52:	f8 01       	movw	r30, r16
    1a54:	91 83       	std	Z+1, r25	; 0x01
    1a56:	80 83       	st	Z, r24
    1a58:	1f c0       	rjmp	.+62     	; 0x1a98 <STP_voidSend+0x24c>
    1a5a:	fe 01       	movw	r30, r28
    1a5c:	e4 5b       	subi	r30, 0xB4	; 180
    1a5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a60:	88 ec       	ldi	r24, 0xC8	; 200
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	91 83       	std	Z+1, r25	; 0x01
    1a66:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a68:	fe 01       	movw	r30, r28
    1a6a:	e4 5b       	subi	r30, 0xB4	; 180
    1a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6e:	80 81       	ld	r24, Z
    1a70:	91 81       	ldd	r25, Z+1	; 0x01
    1a72:	01 97       	sbiw	r24, 0x01	; 1
    1a74:	f1 f7       	brne	.-4      	; 0x1a72 <STP_voidSend+0x226>
    1a76:	fe 01       	movw	r30, r28
    1a78:	e4 5b       	subi	r30, 0xB4	; 180
    1a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7c:	91 83       	std	Z+1, r25	; 0x01
    1a7e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a80:	de 01       	movw	r26, r28
    1a82:	a2 5b       	subi	r26, 0xB2	; 178
    1a84:	bf 4f       	sbci	r27, 0xFF	; 255
    1a86:	fe 01       	movw	r30, r28
    1a88:	e2 5b       	subi	r30, 0xB2	; 178
    1a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a8c:	80 81       	ld	r24, Z
    1a8e:	91 81       	ldd	r25, Z+1	; 0x01
    1a90:	01 97       	sbiw	r24, 0x01	; 1
    1a92:	11 96       	adiw	r26, 0x01	; 1
    1a94:	9c 93       	st	X, r25
    1a96:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a98:	fe 01       	movw	r30, r28
    1a9a:	e2 5b       	subi	r30, 0xB2	; 178
    1a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9e:	80 81       	ld	r24, Z
    1aa0:	91 81       	ldd	r25, Z+1	; 0x01
    1aa2:	00 97       	sbiw	r24, 0x00	; 0
    1aa4:	d1 f6       	brne	.-76     	; 0x1a5a <STP_voidSend+0x20e>
    1aa6:	4b c0       	rjmp	.+150    	; 0x1b3e <STP_voidSend+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aa8:	8e 01       	movw	r16, r28
    1aaa:	02 5b       	subi	r16, 0xB2	; 178
    1aac:	1f 4f       	sbci	r17, 0xFF	; 255
    1aae:	fe 01       	movw	r30, r28
    1ab0:	e0 5b       	subi	r30, 0xB0	; 176
    1ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab4:	60 81       	ld	r22, Z
    1ab6:	71 81       	ldd	r23, Z+1	; 0x01
    1ab8:	82 81       	ldd	r24, Z+2	; 0x02
    1aba:	93 81       	ldd	r25, Z+3	; 0x03
    1abc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ac0:	dc 01       	movw	r26, r24
    1ac2:	cb 01       	movw	r24, r22
    1ac4:	f8 01       	movw	r30, r16
    1ac6:	91 83       	std	Z+1, r25	; 0x01
    1ac8:	80 83       	st	Z, r24
    1aca:	de 01       	movw	r26, r28
    1acc:	a6 5b       	subi	r26, 0xB6	; 182
    1ace:	bf 4f       	sbci	r27, 0xFF	; 255
    1ad0:	fe 01       	movw	r30, r28
    1ad2:	e2 5b       	subi	r30, 0xB2	; 178
    1ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad6:	80 81       	ld	r24, Z
    1ad8:	91 81       	ldd	r25, Z+1	; 0x01
    1ada:	11 96       	adiw	r26, 0x01	; 1
    1adc:	9c 93       	st	X, r25
    1ade:	8e 93       	st	-X, r24
    1ae0:	fe 01       	movw	r30, r28
    1ae2:	e6 5b       	subi	r30, 0xB6	; 182
    1ae4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae6:	80 81       	ld	r24, Z
    1ae8:	91 81       	ldd	r25, Z+1	; 0x01
    1aea:	01 97       	sbiw	r24, 0x01	; 1
    1aec:	f1 f7       	brne	.-4      	; 0x1aea <STP_voidSend+0x29e>
    1aee:	fe 01       	movw	r30, r28
    1af0:	e6 5b       	subi	r30, 0xB6	; 182
    1af2:	ff 4f       	sbci	r31, 0xFF	; 255
    1af4:	91 83       	std	Z+1, r25	; 0x01
    1af6:	80 83       	st	Z, r24
    1af8:	22 c0       	rjmp	.+68     	; 0x1b3e <STP_voidSend+0x2f2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1afa:	8e 01       	movw	r16, r28
    1afc:	08 5a       	subi	r16, 0xA8	; 168
    1afe:	1f 4f       	sbci	r17, 0xFF	; 255
    1b00:	fe 01       	movw	r30, r28
    1b02:	e7 5a       	subi	r30, 0xA7	; 167
    1b04:	ff 4f       	sbci	r31, 0xFF	; 255
    1b06:	60 81       	ld	r22, Z
    1b08:	71 81       	ldd	r23, Z+1	; 0x01
    1b0a:	82 81       	ldd	r24, Z+2	; 0x02
    1b0c:	93 81       	ldd	r25, Z+3	; 0x03
    1b0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b12:	dc 01       	movw	r26, r24
    1b14:	cb 01       	movw	r24, r22
    1b16:	f8 01       	movw	r30, r16
    1b18:	80 83       	st	Z, r24
    1b1a:	de 01       	movw	r26, r28
    1b1c:	a7 5b       	subi	r26, 0xB7	; 183
    1b1e:	bf 4f       	sbci	r27, 0xFF	; 255
    1b20:	fe 01       	movw	r30, r28
    1b22:	e8 5a       	subi	r30, 0xA8	; 168
    1b24:	ff 4f       	sbci	r31, 0xFF	; 255
    1b26:	80 81       	ld	r24, Z
    1b28:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1b2a:	fe 01       	movw	r30, r28
    1b2c:	e7 5b       	subi	r30, 0xB7	; 183
    1b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b30:	80 81       	ld	r24, Z
    1b32:	8a 95       	dec	r24
    1b34:	f1 f7       	brne	.-4      	; 0x1b32 <STP_voidSend+0x2e6>
    1b36:	fe 01       	movw	r30, r28
    1b38:	e7 5b       	subi	r30, 0xB7	; 183
    1b3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3c:	80 83       	st	Z, r24
		_delay_us(1);
		GPIO_voidWritePin (DataClkPort , DataClkPin , LOW);
    1b3e:	80 91 6f 00 	lds	r24, 0x006F
    1b42:	90 91 6e 00 	lds	r25, 0x006E
    1b46:	69 2f       	mov	r22, r25
    1b48:	40 e0       	ldi	r20, 0x00	; 0
    1b4a:	0e 94 2b 08 	call	0x1056	; 0x1056 <GPIO_voidWritePin>
    1b4e:	fe 01       	movw	r30, r28
    1b50:	eb 5b       	subi	r30, 0xBB	; 187
    1b52:	ff 4f       	sbci	r31, 0xFF	; 255
    1b54:	80 e0       	ldi	r24, 0x00	; 0
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	a0 e8       	ldi	r26, 0x80	; 128
    1b5a:	bf e3       	ldi	r27, 0x3F	; 63
    1b5c:	80 83       	st	Z, r24
    1b5e:	91 83       	std	Z+1, r25	; 0x01
    1b60:	a2 83       	std	Z+2, r26	; 0x02
    1b62:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b64:	8e 01       	movw	r16, r28
    1b66:	0f 5b       	subi	r16, 0xBF	; 191
    1b68:	1f 4f       	sbci	r17, 0xFF	; 255
    1b6a:	fe 01       	movw	r30, r28
    1b6c:	eb 5b       	subi	r30, 0xBB	; 187
    1b6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b70:	60 81       	ld	r22, Z
    1b72:	71 81       	ldd	r23, Z+1	; 0x01
    1b74:	82 81       	ldd	r24, Z+2	; 0x02
    1b76:	93 81       	ldd	r25, Z+3	; 0x03
    1b78:	2b ea       	ldi	r18, 0xAB	; 171
    1b7a:	3a ea       	ldi	r19, 0xAA	; 170
    1b7c:	4a e2       	ldi	r20, 0x2A	; 42
    1b7e:	50 e4       	ldi	r21, 0x40	; 64
    1b80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b84:	dc 01       	movw	r26, r24
    1b86:	cb 01       	movw	r24, r22
    1b88:	f8 01       	movw	r30, r16
    1b8a:	80 83       	st	Z, r24
    1b8c:	91 83       	std	Z+1, r25	; 0x01
    1b8e:	a2 83       	std	Z+2, r26	; 0x02
    1b90:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b92:	fe 01       	movw	r30, r28
    1b94:	ef 5b       	subi	r30, 0xBF	; 191
    1b96:	ff 4f       	sbci	r31, 0xFF	; 255
    1b98:	60 81       	ld	r22, Z
    1b9a:	71 81       	ldd	r23, Z+1	; 0x01
    1b9c:	82 81       	ldd	r24, Z+2	; 0x02
    1b9e:	93 81       	ldd	r25, Z+3	; 0x03
    1ba0:	20 e0       	ldi	r18, 0x00	; 0
    1ba2:	30 e0       	ldi	r19, 0x00	; 0
    1ba4:	40 e8       	ldi	r20, 0x80	; 128
    1ba6:	5f e3       	ldi	r21, 0x3F	; 63
    1ba8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bac:	88 23       	and	r24, r24
    1bae:	34 f4       	brge	.+12     	; 0x1bbc <STP_voidSend+0x370>
		__ticks = 1;
    1bb0:	81 e0       	ldi	r24, 0x01	; 1
    1bb2:	fe 01       	movw	r30, r28
    1bb4:	e0 5c       	subi	r30, 0xC0	; 192
    1bb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb8:	80 83       	st	Z, r24
    1bba:	9d c0       	rjmp	.+314    	; 0x1cf6 <STP_voidSend+0x4aa>
	else if (__tmp > 255)
    1bbc:	fe 01       	movw	r30, r28
    1bbe:	ef 5b       	subi	r30, 0xBF	; 191
    1bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc2:	60 81       	ld	r22, Z
    1bc4:	71 81       	ldd	r23, Z+1	; 0x01
    1bc6:	82 81       	ldd	r24, Z+2	; 0x02
    1bc8:	93 81       	ldd	r25, Z+3	; 0x03
    1bca:	20 e0       	ldi	r18, 0x00	; 0
    1bcc:	30 e0       	ldi	r19, 0x00	; 0
    1bce:	4f e7       	ldi	r20, 0x7F	; 127
    1bd0:	53 e4       	ldi	r21, 0x43	; 67
    1bd2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bd6:	18 16       	cp	r1, r24
    1bd8:	0c f0       	brlt	.+2      	; 0x1bdc <STP_voidSend+0x390>
    1bda:	7e c0       	rjmp	.+252    	; 0x1cd8 <STP_voidSend+0x48c>
	{
		_delay_ms(__us / 1000.0);
    1bdc:	fe 01       	movw	r30, r28
    1bde:	eb 5b       	subi	r30, 0xBB	; 187
    1be0:	ff 4f       	sbci	r31, 0xFF	; 255
    1be2:	60 81       	ld	r22, Z
    1be4:	71 81       	ldd	r23, Z+1	; 0x01
    1be6:	82 81       	ldd	r24, Z+2	; 0x02
    1be8:	93 81       	ldd	r25, Z+3	; 0x03
    1bea:	20 e0       	ldi	r18, 0x00	; 0
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	4a e7       	ldi	r20, 0x7A	; 122
    1bf0:	54 e4       	ldi	r21, 0x44	; 68
    1bf2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1bf6:	dc 01       	movw	r26, r24
    1bf8:	cb 01       	movw	r24, r22
    1bfa:	8c af       	std	Y+60, r24	; 0x3c
    1bfc:	9d af       	std	Y+61, r25	; 0x3d
    1bfe:	ae af       	std	Y+62, r26	; 0x3e
    1c00:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c02:	6c ad       	ldd	r22, Y+60	; 0x3c
    1c04:	7d ad       	ldd	r23, Y+61	; 0x3d
    1c06:	8e ad       	ldd	r24, Y+62	; 0x3e
    1c08:	9f ad       	ldd	r25, Y+63	; 0x3f
    1c0a:	20 e0       	ldi	r18, 0x00	; 0
    1c0c:	30 e0       	ldi	r19, 0x00	; 0
    1c0e:	4a ef       	ldi	r20, 0xFA	; 250
    1c10:	54 e4       	ldi	r21, 0x44	; 68
    1c12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c16:	dc 01       	movw	r26, r24
    1c18:	cb 01       	movw	r24, r22
    1c1a:	88 af       	std	Y+56, r24	; 0x38
    1c1c:	99 af       	std	Y+57, r25	; 0x39
    1c1e:	aa af       	std	Y+58, r26	; 0x3a
    1c20:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    1c22:	68 ad       	ldd	r22, Y+56	; 0x38
    1c24:	79 ad       	ldd	r23, Y+57	; 0x39
    1c26:	8a ad       	ldd	r24, Y+58	; 0x3a
    1c28:	9b ad       	ldd	r25, Y+59	; 0x3b
    1c2a:	20 e0       	ldi	r18, 0x00	; 0
    1c2c:	30 e0       	ldi	r19, 0x00	; 0
    1c2e:	40 e8       	ldi	r20, 0x80	; 128
    1c30:	5f e3       	ldi	r21, 0x3F	; 63
    1c32:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c36:	88 23       	and	r24, r24
    1c38:	2c f4       	brge	.+10     	; 0x1c44 <STP_voidSend+0x3f8>
		__ticks = 1;
    1c3a:	81 e0       	ldi	r24, 0x01	; 1
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	9f ab       	std	Y+55, r25	; 0x37
    1c40:	8e ab       	std	Y+54, r24	; 0x36
    1c42:	3f c0       	rjmp	.+126    	; 0x1cc2 <STP_voidSend+0x476>
	else if (__tmp > 65535)
    1c44:	68 ad       	ldd	r22, Y+56	; 0x38
    1c46:	79 ad       	ldd	r23, Y+57	; 0x39
    1c48:	8a ad       	ldd	r24, Y+58	; 0x3a
    1c4a:	9b ad       	ldd	r25, Y+59	; 0x3b
    1c4c:	20 e0       	ldi	r18, 0x00	; 0
    1c4e:	3f ef       	ldi	r19, 0xFF	; 255
    1c50:	4f e7       	ldi	r20, 0x7F	; 127
    1c52:	57 e4       	ldi	r21, 0x47	; 71
    1c54:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c58:	18 16       	cp	r1, r24
    1c5a:	4c f5       	brge	.+82     	; 0x1cae <STP_voidSend+0x462>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c5c:	6c ad       	ldd	r22, Y+60	; 0x3c
    1c5e:	7d ad       	ldd	r23, Y+61	; 0x3d
    1c60:	8e ad       	ldd	r24, Y+62	; 0x3e
    1c62:	9f ad       	ldd	r25, Y+63	; 0x3f
    1c64:	20 e0       	ldi	r18, 0x00	; 0
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	40 e2       	ldi	r20, 0x20	; 32
    1c6a:	51 e4       	ldi	r21, 0x41	; 65
    1c6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c70:	dc 01       	movw	r26, r24
    1c72:	cb 01       	movw	r24, r22
    1c74:	bc 01       	movw	r22, r24
    1c76:	cd 01       	movw	r24, r26
    1c78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c7c:	dc 01       	movw	r26, r24
    1c7e:	cb 01       	movw	r24, r22
    1c80:	9f ab       	std	Y+55, r25	; 0x37
    1c82:	8e ab       	std	Y+54, r24	; 0x36
    1c84:	0f c0       	rjmp	.+30     	; 0x1ca4 <STP_voidSend+0x458>
    1c86:	88 ec       	ldi	r24, 0xC8	; 200
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	9d ab       	std	Y+53, r25	; 0x35
    1c8c:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c8e:	8c a9       	ldd	r24, Y+52	; 0x34
    1c90:	9d a9       	ldd	r25, Y+53	; 0x35
    1c92:	01 97       	sbiw	r24, 0x01	; 1
    1c94:	f1 f7       	brne	.-4      	; 0x1c92 <STP_voidSend+0x446>
    1c96:	9d ab       	std	Y+53, r25	; 0x35
    1c98:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c9a:	8e a9       	ldd	r24, Y+54	; 0x36
    1c9c:	9f a9       	ldd	r25, Y+55	; 0x37
    1c9e:	01 97       	sbiw	r24, 0x01	; 1
    1ca0:	9f ab       	std	Y+55, r25	; 0x37
    1ca2:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ca4:	8e a9       	ldd	r24, Y+54	; 0x36
    1ca6:	9f a9       	ldd	r25, Y+55	; 0x37
    1ca8:	00 97       	sbiw	r24, 0x00	; 0
    1caa:	69 f7       	brne	.-38     	; 0x1c86 <STP_voidSend+0x43a>
    1cac:	2d c0       	rjmp	.+90     	; 0x1d08 <STP_voidSend+0x4bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cae:	68 ad       	ldd	r22, Y+56	; 0x38
    1cb0:	79 ad       	ldd	r23, Y+57	; 0x39
    1cb2:	8a ad       	ldd	r24, Y+58	; 0x3a
    1cb4:	9b ad       	ldd	r25, Y+59	; 0x3b
    1cb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cba:	dc 01       	movw	r26, r24
    1cbc:	cb 01       	movw	r24, r22
    1cbe:	9f ab       	std	Y+55, r25	; 0x37
    1cc0:	8e ab       	std	Y+54, r24	; 0x36
    1cc2:	8e a9       	ldd	r24, Y+54	; 0x36
    1cc4:	9f a9       	ldd	r25, Y+55	; 0x37
    1cc6:	9b ab       	std	Y+51, r25	; 0x33
    1cc8:	8a ab       	std	Y+50, r24	; 0x32
    1cca:	8a a9       	ldd	r24, Y+50	; 0x32
    1ccc:	9b a9       	ldd	r25, Y+51	; 0x33
    1cce:	01 97       	sbiw	r24, 0x01	; 1
    1cd0:	f1 f7       	brne	.-4      	; 0x1cce <STP_voidSend+0x482>
    1cd2:	9b ab       	std	Y+51, r25	; 0x33
    1cd4:	8a ab       	std	Y+50, r24	; 0x32
    1cd6:	18 c0       	rjmp	.+48     	; 0x1d08 <STP_voidSend+0x4bc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1cd8:	fe 01       	movw	r30, r28
    1cda:	ef 5b       	subi	r30, 0xBF	; 191
    1cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cde:	60 81       	ld	r22, Z
    1ce0:	71 81       	ldd	r23, Z+1	; 0x01
    1ce2:	82 81       	ldd	r24, Z+2	; 0x02
    1ce4:	93 81       	ldd	r25, Z+3	; 0x03
    1ce6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cea:	dc 01       	movw	r26, r24
    1cec:	cb 01       	movw	r24, r22
    1cee:	fe 01       	movw	r30, r28
    1cf0:	e0 5c       	subi	r30, 0xC0	; 192
    1cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf4:	80 83       	st	Z, r24
    1cf6:	fe 01       	movw	r30, r28
    1cf8:	e0 5c       	subi	r30, 0xC0	; 192
    1cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfc:	80 81       	ld	r24, Z
    1cfe:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1d00:	89 a9       	ldd	r24, Y+49	; 0x31
    1d02:	8a 95       	dec	r24
    1d04:	f1 f7       	brne	.-4      	; 0x1d02 <STP_voidSend+0x4b6>
    1d06:	89 ab       	std	Y+49, r24	; 0x31
}

void STP_voidSend (u8 copy_u8DataSend)
{
	u8 Counter  ;
	for (Counter = 8 ; Counter > 0 ; Counter -- )
    1d08:	de 01       	movw	r26, r28
    1d0a:	af 59       	subi	r26, 0x9F	; 159
    1d0c:	bf 4f       	sbci	r27, 0xFF	; 255
    1d0e:	fe 01       	movw	r30, r28
    1d10:	ef 59       	subi	r30, 0x9F	; 159
    1d12:	ff 4f       	sbci	r31, 0xFF	; 255
    1d14:	80 81       	ld	r24, Z
    1d16:	81 50       	subi	r24, 0x01	; 1
    1d18:	8c 93       	st	X, r24
    1d1a:	fe 01       	movw	r30, r28
    1d1c:	ef 59       	subi	r30, 0x9F	; 159
    1d1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d20:	80 81       	ld	r24, Z
    1d22:	88 23       	and	r24, r24
    1d24:	09 f0       	breq	.+2      	; 0x1d28 <STP_voidSend+0x4dc>
    1d26:	a9 cd       	rjmp	.-1198   	; 0x187a <STP_voidSend+0x2e>
		GPIO_voidWritePin (DataClkPort , DataClkPin , HIGH);
		_delay_us(1);
		GPIO_voidWritePin (DataClkPort , DataClkPin , LOW);
		_delay_us(1);
	}
	GPIO_voidWritePin (StrPort , StrPin , HIGH);
    1d28:	80 91 70 00 	lds	r24, 0x0070
    1d2c:	90 91 71 00 	lds	r25, 0x0071
    1d30:	69 2f       	mov	r22, r25
    1d32:	41 e0       	ldi	r20, 0x01	; 1
    1d34:	0e 94 2b 08 	call	0x1056	; 0x1056 <GPIO_voidWritePin>
    1d38:	80 e0       	ldi	r24, 0x00	; 0
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	a0 e8       	ldi	r26, 0x80	; 128
    1d3e:	bf e3       	ldi	r27, 0x3F	; 63
    1d40:	8d a7       	std	Y+45, r24	; 0x2d
    1d42:	9e a7       	std	Y+46, r25	; 0x2e
    1d44:	af a7       	std	Y+47, r26	; 0x2f
    1d46:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1d48:	6d a5       	ldd	r22, Y+45	; 0x2d
    1d4a:	7e a5       	ldd	r23, Y+46	; 0x2e
    1d4c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d4e:	98 a9       	ldd	r25, Y+48	; 0x30
    1d50:	2b ea       	ldi	r18, 0xAB	; 171
    1d52:	3a ea       	ldi	r19, 0xAA	; 170
    1d54:	4a e2       	ldi	r20, 0x2A	; 42
    1d56:	50 e4       	ldi	r21, 0x40	; 64
    1d58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d5c:	dc 01       	movw	r26, r24
    1d5e:	cb 01       	movw	r24, r22
    1d60:	89 a7       	std	Y+41, r24	; 0x29
    1d62:	9a a7       	std	Y+42, r25	; 0x2a
    1d64:	ab a7       	std	Y+43, r26	; 0x2b
    1d66:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1d68:	69 a5       	ldd	r22, Y+41	; 0x29
    1d6a:	7a a5       	ldd	r23, Y+42	; 0x2a
    1d6c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d6e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d70:	20 e0       	ldi	r18, 0x00	; 0
    1d72:	30 e0       	ldi	r19, 0x00	; 0
    1d74:	40 e8       	ldi	r20, 0x80	; 128
    1d76:	5f e3       	ldi	r21, 0x3F	; 63
    1d78:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d7c:	88 23       	and	r24, r24
    1d7e:	1c f4       	brge	.+6      	; 0x1d86 <STP_voidSend+0x53a>
		__ticks = 1;
    1d80:	81 e0       	ldi	r24, 0x01	; 1
    1d82:	88 a7       	std	Y+40, r24	; 0x28
    1d84:	91 c0       	rjmp	.+290    	; 0x1ea8 <STP_voidSend+0x65c>
	else if (__tmp > 255)
    1d86:	69 a5       	ldd	r22, Y+41	; 0x29
    1d88:	7a a5       	ldd	r23, Y+42	; 0x2a
    1d8a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d8c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d8e:	20 e0       	ldi	r18, 0x00	; 0
    1d90:	30 e0       	ldi	r19, 0x00	; 0
    1d92:	4f e7       	ldi	r20, 0x7F	; 127
    1d94:	53 e4       	ldi	r21, 0x43	; 67
    1d96:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d9a:	18 16       	cp	r1, r24
    1d9c:	0c f0       	brlt	.+2      	; 0x1da0 <STP_voidSend+0x554>
    1d9e:	7b c0       	rjmp	.+246    	; 0x1e96 <STP_voidSend+0x64a>
	{
		_delay_ms(__us / 1000.0);
    1da0:	6d a5       	ldd	r22, Y+45	; 0x2d
    1da2:	7e a5       	ldd	r23, Y+46	; 0x2e
    1da4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1da6:	98 a9       	ldd	r25, Y+48	; 0x30
    1da8:	20 e0       	ldi	r18, 0x00	; 0
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	4a e7       	ldi	r20, 0x7A	; 122
    1dae:	54 e4       	ldi	r21, 0x44	; 68
    1db0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1db4:	dc 01       	movw	r26, r24
    1db6:	cb 01       	movw	r24, r22
    1db8:	8c a3       	std	Y+36, r24	; 0x24
    1dba:	9d a3       	std	Y+37, r25	; 0x25
    1dbc:	ae a3       	std	Y+38, r26	; 0x26
    1dbe:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dc0:	6c a1       	ldd	r22, Y+36	; 0x24
    1dc2:	7d a1       	ldd	r23, Y+37	; 0x25
    1dc4:	8e a1       	ldd	r24, Y+38	; 0x26
    1dc6:	9f a1       	ldd	r25, Y+39	; 0x27
    1dc8:	20 e0       	ldi	r18, 0x00	; 0
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	4a ef       	ldi	r20, 0xFA	; 250
    1dce:	54 e4       	ldi	r21, 0x44	; 68
    1dd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dd4:	dc 01       	movw	r26, r24
    1dd6:	cb 01       	movw	r24, r22
    1dd8:	88 a3       	std	Y+32, r24	; 0x20
    1dda:	99 a3       	std	Y+33, r25	; 0x21
    1ddc:	aa a3       	std	Y+34, r26	; 0x22
    1dde:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1de0:	68 a1       	ldd	r22, Y+32	; 0x20
    1de2:	79 a1       	ldd	r23, Y+33	; 0x21
    1de4:	8a a1       	ldd	r24, Y+34	; 0x22
    1de6:	9b a1       	ldd	r25, Y+35	; 0x23
    1de8:	20 e0       	ldi	r18, 0x00	; 0
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	40 e8       	ldi	r20, 0x80	; 128
    1dee:	5f e3       	ldi	r21, 0x3F	; 63
    1df0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1df4:	88 23       	and	r24, r24
    1df6:	2c f4       	brge	.+10     	; 0x1e02 <STP_voidSend+0x5b6>
		__ticks = 1;
    1df8:	81 e0       	ldi	r24, 0x01	; 1
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	9f 8f       	std	Y+31, r25	; 0x1f
    1dfe:	8e 8f       	std	Y+30, r24	; 0x1e
    1e00:	3f c0       	rjmp	.+126    	; 0x1e80 <STP_voidSend+0x634>
	else if (__tmp > 65535)
    1e02:	68 a1       	ldd	r22, Y+32	; 0x20
    1e04:	79 a1       	ldd	r23, Y+33	; 0x21
    1e06:	8a a1       	ldd	r24, Y+34	; 0x22
    1e08:	9b a1       	ldd	r25, Y+35	; 0x23
    1e0a:	20 e0       	ldi	r18, 0x00	; 0
    1e0c:	3f ef       	ldi	r19, 0xFF	; 255
    1e0e:	4f e7       	ldi	r20, 0x7F	; 127
    1e10:	57 e4       	ldi	r21, 0x47	; 71
    1e12:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e16:	18 16       	cp	r1, r24
    1e18:	4c f5       	brge	.+82     	; 0x1e6c <STP_voidSend+0x620>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e1a:	6c a1       	ldd	r22, Y+36	; 0x24
    1e1c:	7d a1       	ldd	r23, Y+37	; 0x25
    1e1e:	8e a1       	ldd	r24, Y+38	; 0x26
    1e20:	9f a1       	ldd	r25, Y+39	; 0x27
    1e22:	20 e0       	ldi	r18, 0x00	; 0
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	40 e2       	ldi	r20, 0x20	; 32
    1e28:	51 e4       	ldi	r21, 0x41	; 65
    1e2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e2e:	dc 01       	movw	r26, r24
    1e30:	cb 01       	movw	r24, r22
    1e32:	bc 01       	movw	r22, r24
    1e34:	cd 01       	movw	r24, r26
    1e36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e3a:	dc 01       	movw	r26, r24
    1e3c:	cb 01       	movw	r24, r22
    1e3e:	9f 8f       	std	Y+31, r25	; 0x1f
    1e40:	8e 8f       	std	Y+30, r24	; 0x1e
    1e42:	0f c0       	rjmp	.+30     	; 0x1e62 <STP_voidSend+0x616>
    1e44:	88 ec       	ldi	r24, 0xC8	; 200
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	9d 8f       	std	Y+29, r25	; 0x1d
    1e4a:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e4c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1e4e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1e50:	01 97       	sbiw	r24, 0x01	; 1
    1e52:	f1 f7       	brne	.-4      	; 0x1e50 <STP_voidSend+0x604>
    1e54:	9d 8f       	std	Y+29, r25	; 0x1d
    1e56:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e58:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1e5a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1e5c:	01 97       	sbiw	r24, 0x01	; 1
    1e5e:	9f 8f       	std	Y+31, r25	; 0x1f
    1e60:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e62:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1e64:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1e66:	00 97       	sbiw	r24, 0x00	; 0
    1e68:	69 f7       	brne	.-38     	; 0x1e44 <STP_voidSend+0x5f8>
    1e6a:	24 c0       	rjmp	.+72     	; 0x1eb4 <STP_voidSend+0x668>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e6c:	68 a1       	ldd	r22, Y+32	; 0x20
    1e6e:	79 a1       	ldd	r23, Y+33	; 0x21
    1e70:	8a a1       	ldd	r24, Y+34	; 0x22
    1e72:	9b a1       	ldd	r25, Y+35	; 0x23
    1e74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e78:	dc 01       	movw	r26, r24
    1e7a:	cb 01       	movw	r24, r22
    1e7c:	9f 8f       	std	Y+31, r25	; 0x1f
    1e7e:	8e 8f       	std	Y+30, r24	; 0x1e
    1e80:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1e82:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1e84:	9b 8f       	std	Y+27, r25	; 0x1b
    1e86:	8a 8f       	std	Y+26, r24	; 0x1a
    1e88:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1e8a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1e8c:	01 97       	sbiw	r24, 0x01	; 1
    1e8e:	f1 f7       	brne	.-4      	; 0x1e8c <STP_voidSend+0x640>
    1e90:	9b 8f       	std	Y+27, r25	; 0x1b
    1e92:	8a 8f       	std	Y+26, r24	; 0x1a
    1e94:	0f c0       	rjmp	.+30     	; 0x1eb4 <STP_voidSend+0x668>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1e96:	69 a5       	ldd	r22, Y+41	; 0x29
    1e98:	7a a5       	ldd	r23, Y+42	; 0x2a
    1e9a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e9c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea2:	dc 01       	movw	r26, r24
    1ea4:	cb 01       	movw	r24, r22
    1ea6:	88 a7       	std	Y+40, r24	; 0x28
    1ea8:	88 a5       	ldd	r24, Y+40	; 0x28
    1eaa:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1eac:	89 8d       	ldd	r24, Y+25	; 0x19
    1eae:	8a 95       	dec	r24
    1eb0:	f1 f7       	brne	.-4      	; 0x1eae <STP_voidSend+0x662>
    1eb2:	89 8f       	std	Y+25, r24	; 0x19
		_delay_us(1);
		GPIO_voidWritePin (StrPort , StrPin , LOW);
    1eb4:	80 91 70 00 	lds	r24, 0x0070
    1eb8:	90 91 71 00 	lds	r25, 0x0071
    1ebc:	69 2f       	mov	r22, r25
    1ebe:	40 e0       	ldi	r20, 0x00	; 0
    1ec0:	0e 94 2b 08 	call	0x1056	; 0x1056 <GPIO_voidWritePin>
    1ec4:	80 e0       	ldi	r24, 0x00	; 0
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	a0 e8       	ldi	r26, 0x80	; 128
    1eca:	bf e3       	ldi	r27, 0x3F	; 63
    1ecc:	8d 8b       	std	Y+21, r24	; 0x15
    1ece:	9e 8b       	std	Y+22, r25	; 0x16
    1ed0:	af 8b       	std	Y+23, r26	; 0x17
    1ed2:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1ed4:	6d 89       	ldd	r22, Y+21	; 0x15
    1ed6:	7e 89       	ldd	r23, Y+22	; 0x16
    1ed8:	8f 89       	ldd	r24, Y+23	; 0x17
    1eda:	98 8d       	ldd	r25, Y+24	; 0x18
    1edc:	2b ea       	ldi	r18, 0xAB	; 171
    1ede:	3a ea       	ldi	r19, 0xAA	; 170
    1ee0:	4a e2       	ldi	r20, 0x2A	; 42
    1ee2:	50 e4       	ldi	r21, 0x40	; 64
    1ee4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ee8:	dc 01       	movw	r26, r24
    1eea:	cb 01       	movw	r24, r22
    1eec:	89 8b       	std	Y+17, r24	; 0x11
    1eee:	9a 8b       	std	Y+18, r25	; 0x12
    1ef0:	ab 8b       	std	Y+19, r26	; 0x13
    1ef2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1ef4:	69 89       	ldd	r22, Y+17	; 0x11
    1ef6:	7a 89       	ldd	r23, Y+18	; 0x12
    1ef8:	8b 89       	ldd	r24, Y+19	; 0x13
    1efa:	9c 89       	ldd	r25, Y+20	; 0x14
    1efc:	20 e0       	ldi	r18, 0x00	; 0
    1efe:	30 e0       	ldi	r19, 0x00	; 0
    1f00:	40 e8       	ldi	r20, 0x80	; 128
    1f02:	5f e3       	ldi	r21, 0x3F	; 63
    1f04:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f08:	88 23       	and	r24, r24
    1f0a:	1c f4       	brge	.+6      	; 0x1f12 <STP_voidSend+0x6c6>
		__ticks = 1;
    1f0c:	81 e0       	ldi	r24, 0x01	; 1
    1f0e:	88 8b       	std	Y+16, r24	; 0x10
    1f10:	91 c0       	rjmp	.+290    	; 0x2034 <STP_voidSend+0x7e8>
	else if (__tmp > 255)
    1f12:	69 89       	ldd	r22, Y+17	; 0x11
    1f14:	7a 89       	ldd	r23, Y+18	; 0x12
    1f16:	8b 89       	ldd	r24, Y+19	; 0x13
    1f18:	9c 89       	ldd	r25, Y+20	; 0x14
    1f1a:	20 e0       	ldi	r18, 0x00	; 0
    1f1c:	30 e0       	ldi	r19, 0x00	; 0
    1f1e:	4f e7       	ldi	r20, 0x7F	; 127
    1f20:	53 e4       	ldi	r21, 0x43	; 67
    1f22:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f26:	18 16       	cp	r1, r24
    1f28:	0c f0       	brlt	.+2      	; 0x1f2c <STP_voidSend+0x6e0>
    1f2a:	7b c0       	rjmp	.+246    	; 0x2022 <STP_voidSend+0x7d6>
	{
		_delay_ms(__us / 1000.0);
    1f2c:	6d 89       	ldd	r22, Y+21	; 0x15
    1f2e:	7e 89       	ldd	r23, Y+22	; 0x16
    1f30:	8f 89       	ldd	r24, Y+23	; 0x17
    1f32:	98 8d       	ldd	r25, Y+24	; 0x18
    1f34:	20 e0       	ldi	r18, 0x00	; 0
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	4a e7       	ldi	r20, 0x7A	; 122
    1f3a:	54 e4       	ldi	r21, 0x44	; 68
    1f3c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1f40:	dc 01       	movw	r26, r24
    1f42:	cb 01       	movw	r24, r22
    1f44:	8c 87       	std	Y+12, r24	; 0x0c
    1f46:	9d 87       	std	Y+13, r25	; 0x0d
    1f48:	ae 87       	std	Y+14, r26	; 0x0e
    1f4a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f4c:	6c 85       	ldd	r22, Y+12	; 0x0c
    1f4e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1f50:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f52:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f54:	20 e0       	ldi	r18, 0x00	; 0
    1f56:	30 e0       	ldi	r19, 0x00	; 0
    1f58:	4a ef       	ldi	r20, 0xFA	; 250
    1f5a:	54 e4       	ldi	r21, 0x44	; 68
    1f5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f60:	dc 01       	movw	r26, r24
    1f62:	cb 01       	movw	r24, r22
    1f64:	88 87       	std	Y+8, r24	; 0x08
    1f66:	99 87       	std	Y+9, r25	; 0x09
    1f68:	aa 87       	std	Y+10, r26	; 0x0a
    1f6a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1f6c:	68 85       	ldd	r22, Y+8	; 0x08
    1f6e:	79 85       	ldd	r23, Y+9	; 0x09
    1f70:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f72:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f74:	20 e0       	ldi	r18, 0x00	; 0
    1f76:	30 e0       	ldi	r19, 0x00	; 0
    1f78:	40 e8       	ldi	r20, 0x80	; 128
    1f7a:	5f e3       	ldi	r21, 0x3F	; 63
    1f7c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f80:	88 23       	and	r24, r24
    1f82:	2c f4       	brge	.+10     	; 0x1f8e <STP_voidSend+0x742>
		__ticks = 1;
    1f84:	81 e0       	ldi	r24, 0x01	; 1
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	9f 83       	std	Y+7, r25	; 0x07
    1f8a:	8e 83       	std	Y+6, r24	; 0x06
    1f8c:	3f c0       	rjmp	.+126    	; 0x200c <STP_voidSend+0x7c0>
	else if (__tmp > 65535)
    1f8e:	68 85       	ldd	r22, Y+8	; 0x08
    1f90:	79 85       	ldd	r23, Y+9	; 0x09
    1f92:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f94:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f96:	20 e0       	ldi	r18, 0x00	; 0
    1f98:	3f ef       	ldi	r19, 0xFF	; 255
    1f9a:	4f e7       	ldi	r20, 0x7F	; 127
    1f9c:	57 e4       	ldi	r21, 0x47	; 71
    1f9e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fa2:	18 16       	cp	r1, r24
    1fa4:	4c f5       	brge	.+82     	; 0x1ff8 <STP_voidSend+0x7ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fa6:	6c 85       	ldd	r22, Y+12	; 0x0c
    1fa8:	7d 85       	ldd	r23, Y+13	; 0x0d
    1faa:	8e 85       	ldd	r24, Y+14	; 0x0e
    1fac:	9f 85       	ldd	r25, Y+15	; 0x0f
    1fae:	20 e0       	ldi	r18, 0x00	; 0
    1fb0:	30 e0       	ldi	r19, 0x00	; 0
    1fb2:	40 e2       	ldi	r20, 0x20	; 32
    1fb4:	51 e4       	ldi	r21, 0x41	; 65
    1fb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fba:	dc 01       	movw	r26, r24
    1fbc:	cb 01       	movw	r24, r22
    1fbe:	bc 01       	movw	r22, r24
    1fc0:	cd 01       	movw	r24, r26
    1fc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fc6:	dc 01       	movw	r26, r24
    1fc8:	cb 01       	movw	r24, r22
    1fca:	9f 83       	std	Y+7, r25	; 0x07
    1fcc:	8e 83       	std	Y+6, r24	; 0x06
    1fce:	0f c0       	rjmp	.+30     	; 0x1fee <STP_voidSend+0x7a2>
    1fd0:	88 ec       	ldi	r24, 0xC8	; 200
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	9d 83       	std	Y+5, r25	; 0x05
    1fd6:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1fd8:	8c 81       	ldd	r24, Y+4	; 0x04
    1fda:	9d 81       	ldd	r25, Y+5	; 0x05
    1fdc:	01 97       	sbiw	r24, 0x01	; 1
    1fde:	f1 f7       	brne	.-4      	; 0x1fdc <STP_voidSend+0x790>
    1fe0:	9d 83       	std	Y+5, r25	; 0x05
    1fe2:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fe4:	8e 81       	ldd	r24, Y+6	; 0x06
    1fe6:	9f 81       	ldd	r25, Y+7	; 0x07
    1fe8:	01 97       	sbiw	r24, 0x01	; 1
    1fea:	9f 83       	std	Y+7, r25	; 0x07
    1fec:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fee:	8e 81       	ldd	r24, Y+6	; 0x06
    1ff0:	9f 81       	ldd	r25, Y+7	; 0x07
    1ff2:	00 97       	sbiw	r24, 0x00	; 0
    1ff4:	69 f7       	brne	.-38     	; 0x1fd0 <STP_voidSend+0x784>
    1ff6:	24 c0       	rjmp	.+72     	; 0x2040 <STP_voidSend+0x7f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ff8:	68 85       	ldd	r22, Y+8	; 0x08
    1ffa:	79 85       	ldd	r23, Y+9	; 0x09
    1ffc:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ffe:	9b 85       	ldd	r25, Y+11	; 0x0b
    2000:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2004:	dc 01       	movw	r26, r24
    2006:	cb 01       	movw	r24, r22
    2008:	9f 83       	std	Y+7, r25	; 0x07
    200a:	8e 83       	std	Y+6, r24	; 0x06
    200c:	8e 81       	ldd	r24, Y+6	; 0x06
    200e:	9f 81       	ldd	r25, Y+7	; 0x07
    2010:	9b 83       	std	Y+3, r25	; 0x03
    2012:	8a 83       	std	Y+2, r24	; 0x02
    2014:	8a 81       	ldd	r24, Y+2	; 0x02
    2016:	9b 81       	ldd	r25, Y+3	; 0x03
    2018:	01 97       	sbiw	r24, 0x01	; 1
    201a:	f1 f7       	brne	.-4      	; 0x2018 <STP_voidSend+0x7cc>
    201c:	9b 83       	std	Y+3, r25	; 0x03
    201e:	8a 83       	std	Y+2, r24	; 0x02
    2020:	0f c0       	rjmp	.+30     	; 0x2040 <STP_voidSend+0x7f4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2022:	69 89       	ldd	r22, Y+17	; 0x11
    2024:	7a 89       	ldd	r23, Y+18	; 0x12
    2026:	8b 89       	ldd	r24, Y+19	; 0x13
    2028:	9c 89       	ldd	r25, Y+20	; 0x14
    202a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    202e:	dc 01       	movw	r26, r24
    2030:	cb 01       	movw	r24, r22
    2032:	88 8b       	std	Y+16, r24	; 0x10
    2034:	88 89       	ldd	r24, Y+16	; 0x10
    2036:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2038:	89 81       	ldd	r24, Y+1	; 0x01
    203a:	8a 95       	dec	r24
    203c:	f1 f7       	brne	.-4      	; 0x203a <STP_voidSend+0x7ee>
    203e:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(1);
	
}
    2040:	ce 59       	subi	r28, 0x9E	; 158
    2042:	df 4f       	sbci	r29, 0xFF	; 255
    2044:	0f b6       	in	r0, 0x3f	; 63
    2046:	f8 94       	cli
    2048:	de bf       	out	0x3e, r29	; 62
    204a:	0f be       	out	0x3f, r0	; 63
    204c:	cd bf       	out	0x3d, r28	; 61
    204e:	cf 91       	pop	r28
    2050:	df 91       	pop	r29
    2052:	1f 91       	pop	r17
    2054:	0f 91       	pop	r16
    2056:	08 95       	ret

00002058 <SWITCH_voidInit>:

#define F_CPU 8000000UL
#include "util/delay.h"

void SWITCH_voidInit(u8 copy_u8Port , u8 copy_u8Pin )
{
    2058:	df 93       	push	r29
    205a:	cf 93       	push	r28
    205c:	00 d0       	rcall	.+0      	; 0x205e <SWITCH_voidInit+0x6>
    205e:	cd b7       	in	r28, 0x3d	; 61
    2060:	de b7       	in	r29, 0x3e	; 62
    2062:	89 83       	std	Y+1, r24	; 0x01
    2064:	6a 83       	std	Y+2, r22	; 0x02
	GPIO_voidSetPinDDR(copy_u8Port , copy_u8Pin ,INPUT);
    2066:	89 81       	ldd	r24, Y+1	; 0x01
    2068:	6a 81       	ldd	r22, Y+2	; 0x02
    206a:	40 e0       	ldi	r20, 0x00	; 0
    206c:	0e 94 48 07 	call	0xe90	; 0xe90 <GPIO_voidSetPinDDR>
	#if PULLUP_RES == 0 
	GPIO_voidWritePin (copy_u8Port , copy_u8Pin , HIGH );
    2070:	89 81       	ldd	r24, Y+1	; 0x01
    2072:	6a 81       	ldd	r22, Y+2	; 0x02
    2074:	41 e0       	ldi	r20, 0x01	; 1
    2076:	0e 94 2b 08 	call	0x1056	; 0x1056 <GPIO_voidWritePin>
	#endif
	
}
    207a:	0f 90       	pop	r0
    207c:	0f 90       	pop	r0
    207e:	cf 91       	pop	r28
    2080:	df 91       	pop	r29
    2082:	08 95       	ret

00002084 <SWITCH_u8Read>:

u8 	SWITCH_u8Read(u8 copy_u8Port , u8 copy_u8Pin )
{
    2084:	df 93       	push	r29
    2086:	cf 93       	push	r28
    2088:	cd b7       	in	r28, 0x3d	; 61
    208a:	de b7       	in	r29, 0x3e	; 62
    208c:	61 97       	sbiw	r28, 0x11	; 17
    208e:	0f b6       	in	r0, 0x3f	; 63
    2090:	f8 94       	cli
    2092:	de bf       	out	0x3e, r29	; 62
    2094:	0f be       	out	0x3f, r0	; 63
    2096:	cd bf       	out	0x3d, r28	; 61
    2098:	88 8b       	std	Y+16, r24	; 0x10
    209a:	69 8b       	std	Y+17, r22	; 0x11
    209c:	80 e0       	ldi	r24, 0x00	; 0
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	a8 e4       	ldi	r26, 0x48	; 72
    20a2:	b2 e4       	ldi	r27, 0x42	; 66
    20a4:	8b 87       	std	Y+11, r24	; 0x0b
    20a6:	9c 87       	std	Y+12, r25	; 0x0c
    20a8:	ad 87       	std	Y+13, r26	; 0x0d
    20aa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    20ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    20b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    20b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    20b4:	20 e0       	ldi	r18, 0x00	; 0
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	4a ef       	ldi	r20, 0xFA	; 250
    20ba:	54 e4       	ldi	r21, 0x44	; 68
    20bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c0:	dc 01       	movw	r26, r24
    20c2:	cb 01       	movw	r24, r22
    20c4:	8f 83       	std	Y+7, r24	; 0x07
    20c6:	98 87       	std	Y+8, r25	; 0x08
    20c8:	a9 87       	std	Y+9, r26	; 0x09
    20ca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20cc:	6f 81       	ldd	r22, Y+7	; 0x07
    20ce:	78 85       	ldd	r23, Y+8	; 0x08
    20d0:	89 85       	ldd	r24, Y+9	; 0x09
    20d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    20d4:	20 e0       	ldi	r18, 0x00	; 0
    20d6:	30 e0       	ldi	r19, 0x00	; 0
    20d8:	40 e8       	ldi	r20, 0x80	; 128
    20da:	5f e3       	ldi	r21, 0x3F	; 63
    20dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20e0:	88 23       	and	r24, r24
    20e2:	2c f4       	brge	.+10     	; 0x20ee <SWITCH_u8Read+0x6a>
		__ticks = 1;
    20e4:	81 e0       	ldi	r24, 0x01	; 1
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	9e 83       	std	Y+6, r25	; 0x06
    20ea:	8d 83       	std	Y+5, r24	; 0x05
    20ec:	3f c0       	rjmp	.+126    	; 0x216c <SWITCH_u8Read+0xe8>
	else if (__tmp > 65535)
    20ee:	6f 81       	ldd	r22, Y+7	; 0x07
    20f0:	78 85       	ldd	r23, Y+8	; 0x08
    20f2:	89 85       	ldd	r24, Y+9	; 0x09
    20f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    20f6:	20 e0       	ldi	r18, 0x00	; 0
    20f8:	3f ef       	ldi	r19, 0xFF	; 255
    20fa:	4f e7       	ldi	r20, 0x7F	; 127
    20fc:	57 e4       	ldi	r21, 0x47	; 71
    20fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2102:	18 16       	cp	r1, r24
    2104:	4c f5       	brge	.+82     	; 0x2158 <SWITCH_u8Read+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2106:	6b 85       	ldd	r22, Y+11	; 0x0b
    2108:	7c 85       	ldd	r23, Y+12	; 0x0c
    210a:	8d 85       	ldd	r24, Y+13	; 0x0d
    210c:	9e 85       	ldd	r25, Y+14	; 0x0e
    210e:	20 e0       	ldi	r18, 0x00	; 0
    2110:	30 e0       	ldi	r19, 0x00	; 0
    2112:	40 e2       	ldi	r20, 0x20	; 32
    2114:	51 e4       	ldi	r21, 0x41	; 65
    2116:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    211a:	dc 01       	movw	r26, r24
    211c:	cb 01       	movw	r24, r22
    211e:	bc 01       	movw	r22, r24
    2120:	cd 01       	movw	r24, r26
    2122:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2126:	dc 01       	movw	r26, r24
    2128:	cb 01       	movw	r24, r22
    212a:	9e 83       	std	Y+6, r25	; 0x06
    212c:	8d 83       	std	Y+5, r24	; 0x05
    212e:	0f c0       	rjmp	.+30     	; 0x214e <SWITCH_u8Read+0xca>
    2130:	88 ec       	ldi	r24, 0xC8	; 200
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	9c 83       	std	Y+4, r25	; 0x04
    2136:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2138:	8b 81       	ldd	r24, Y+3	; 0x03
    213a:	9c 81       	ldd	r25, Y+4	; 0x04
    213c:	01 97       	sbiw	r24, 0x01	; 1
    213e:	f1 f7       	brne	.-4      	; 0x213c <SWITCH_u8Read+0xb8>
    2140:	9c 83       	std	Y+4, r25	; 0x04
    2142:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2144:	8d 81       	ldd	r24, Y+5	; 0x05
    2146:	9e 81       	ldd	r25, Y+6	; 0x06
    2148:	01 97       	sbiw	r24, 0x01	; 1
    214a:	9e 83       	std	Y+6, r25	; 0x06
    214c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    214e:	8d 81       	ldd	r24, Y+5	; 0x05
    2150:	9e 81       	ldd	r25, Y+6	; 0x06
    2152:	00 97       	sbiw	r24, 0x00	; 0
    2154:	69 f7       	brne	.-38     	; 0x2130 <SWITCH_u8Read+0xac>
    2156:	14 c0       	rjmp	.+40     	; 0x2180 <SWITCH_u8Read+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2158:	6f 81       	ldd	r22, Y+7	; 0x07
    215a:	78 85       	ldd	r23, Y+8	; 0x08
    215c:	89 85       	ldd	r24, Y+9	; 0x09
    215e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2160:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2164:	dc 01       	movw	r26, r24
    2166:	cb 01       	movw	r24, r22
    2168:	9e 83       	std	Y+6, r25	; 0x06
    216a:	8d 83       	std	Y+5, r24	; 0x05
    216c:	8d 81       	ldd	r24, Y+5	; 0x05
    216e:	9e 81       	ldd	r25, Y+6	; 0x06
    2170:	9a 83       	std	Y+2, r25	; 0x02
    2172:	89 83       	std	Y+1, r24	; 0x01
    2174:	89 81       	ldd	r24, Y+1	; 0x01
    2176:	9a 81       	ldd	r25, Y+2	; 0x02
    2178:	01 97       	sbiw	r24, 0x01	; 1
    217a:	f1 f7       	brne	.-4      	; 0x2178 <SWITCH_u8Read+0xf4>
    217c:	9a 83       	std	Y+2, r25	; 0x02
    217e:	89 83       	std	Y+1, r24	; 0x01
	u8 Local_u8ReturnValue ;
	_delay_ms(50);
	Local_u8ReturnValue = GPIO_u8ReadPin(copy_u8Port , copy_u8Pin);
    2180:	88 89       	ldd	r24, Y+16	; 0x10
    2182:	69 89       	ldd	r22, Y+17	; 0x11
    2184:	0e 94 0e 09 	call	0x121c	; 0x121c <GPIO_u8ReadPin>
    2188:	8f 87       	std	Y+15, r24	; 0x0f
	return Local_u8ReturnValue ;
    218a:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    218c:	61 96       	adiw	r28, 0x11	; 17
    218e:	0f b6       	in	r0, 0x3f	; 63
    2190:	f8 94       	cli
    2192:	de bf       	out	0x3e, r29	; 62
    2194:	0f be       	out	0x3f, r0	; 63
    2196:	cd bf       	out	0x3d, r28	; 61
    2198:	cf 91       	pop	r28
    219a:	df 91       	pop	r29
    219c:	08 95       	ret

0000219e <SWITCH_voidInterrupt>:

void SWITCH_voidInterrupt(u8 copy_u8IntNum , void (*copy_voidFun)(void))
{
    219e:	df 93       	push	r29
    21a0:	cf 93       	push	r28
    21a2:	00 d0       	rcall	.+0      	; 0x21a4 <SWITCH_voidInterrupt+0x6>
    21a4:	0f 92       	push	r0
    21a6:	cd b7       	in	r28, 0x3d	; 61
    21a8:	de b7       	in	r29, 0x3e	; 62
    21aa:	89 83       	std	Y+1, r24	; 0x01
    21ac:	7b 83       	std	Y+3, r23	; 0x03
    21ae:	6a 83       	std	Y+2, r22	; 0x02
	EXTI_voidInit(copy_u8IntNum , copy_voidFun );
    21b0:	89 81       	ldd	r24, Y+1	; 0x01
    21b2:	88 2f       	mov	r24, r24
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	2a 81       	ldd	r18, Y+2	; 0x02
    21b8:	3b 81       	ldd	r19, Y+3	; 0x03
    21ba:	b9 01       	movw	r22, r18
    21bc:	0e 94 4f 06 	call	0xc9e	; 0xc9e <EXTI_voidInit>
}
    21c0:	0f 90       	pop	r0
    21c2:	0f 90       	pop	r0
    21c4:	0f 90       	pop	r0
    21c6:	cf 91       	pop	r28
    21c8:	df 91       	pop	r29
    21ca:	08 95       	ret

000021cc <main>:

#define F_CPU 80000000UL
#include "util/delay.h"

int main(void)
{
    21cc:	ef 92       	push	r14
    21ce:	0f 93       	push	r16
    21d0:	df 93       	push	r29
    21d2:	cf 93       	push	r28
    21d4:	cd b7       	in	r28, 0x3d	; 61
    21d6:	de b7       	in	r29, 0x3e	; 62
    21d8:	62 97       	sbiw	r28, 0x12	; 18
    21da:	0f b6       	in	r0, 0x3f	; 63
    21dc:	f8 94       	cli
    21de:	de bf       	out	0x3e, r29	; 62
    21e0:	0f be       	out	0x3f, r0	; 63
    21e2:	cd bf       	out	0x3d, r28	; 61
	u8 i , j=0  , X , k;
    21e4:	19 8a       	std	Y+17, r1	; 0x11
	STP_voidIntit(GPIOA , 0 , GPIOA , 1 , GPIOA , 2 );
    21e6:	80 e0       	ldi	r24, 0x00	; 0
    21e8:	60 e0       	ldi	r22, 0x00	; 0
    21ea:	40 e0       	ldi	r20, 0x00	; 0
    21ec:	21 e0       	ldi	r18, 0x01	; 1
    21ee:	00 e0       	ldi	r16, 0x00	; 0
    21f0:	ee 24       	eor	r14, r14
    21f2:	68 94       	set
    21f4:	e1 f8       	bld	r14, 1
    21f6:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <STP_voidIntit>
	SWITCH_voidInit(GPIOC , 0 );
    21fa:	82 e0       	ldi	r24, 0x02	; 2
    21fc:	60 e0       	ldi	r22, 0x00	; 0
    21fe:	0e 94 2c 10 	call	0x2058	; 0x2058 <SWITCH_voidInit>
	while(1){
		i = SWITCH_u8Read(GPIOC , 0);
    2202:	82 e0       	ldi	r24, 0x02	; 2
    2204:	60 e0       	ldi	r22, 0x00	; 0
    2206:	0e 94 42 10 	call	0x2084	; 0x2084 <SWITCH_u8Read>
    220a:	8a 8b       	std	Y+18, r24	; 0x12
		if (i == 0 )
    220c:	8a 89       	ldd	r24, Y+18	; 0x12
    220e:	88 23       	and	r24, r24
    2210:	c1 f7       	brne	.-16     	; 0x2202 <main+0x36>
    2212:	80 e0       	ldi	r24, 0x00	; 0
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	a8 ec       	ldi	r26, 0xC8	; 200
    2218:	b1 e4       	ldi	r27, 0x41	; 65
    221a:	8b 87       	std	Y+11, r24	; 0x0b
    221c:	9c 87       	std	Y+12, r25	; 0x0c
    221e:	ad 87       	std	Y+13, r26	; 0x0d
    2220:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2222:	6b 85       	ldd	r22, Y+11	; 0x0b
    2224:	7c 85       	ldd	r23, Y+12	; 0x0c
    2226:	8d 85       	ldd	r24, Y+13	; 0x0d
    2228:	9e 85       	ldd	r25, Y+14	; 0x0e
    222a:	20 e0       	ldi	r18, 0x00	; 0
    222c:	30 e4       	ldi	r19, 0x40	; 64
    222e:	4c e9       	ldi	r20, 0x9C	; 156
    2230:	56 e4       	ldi	r21, 0x46	; 70
    2232:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2236:	dc 01       	movw	r26, r24
    2238:	cb 01       	movw	r24, r22
    223a:	8f 83       	std	Y+7, r24	; 0x07
    223c:	98 87       	std	Y+8, r25	; 0x08
    223e:	a9 87       	std	Y+9, r26	; 0x09
    2240:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2242:	6f 81       	ldd	r22, Y+7	; 0x07
    2244:	78 85       	ldd	r23, Y+8	; 0x08
    2246:	89 85       	ldd	r24, Y+9	; 0x09
    2248:	9a 85       	ldd	r25, Y+10	; 0x0a
    224a:	20 e0       	ldi	r18, 0x00	; 0
    224c:	30 e0       	ldi	r19, 0x00	; 0
    224e:	40 e8       	ldi	r20, 0x80	; 128
    2250:	5f e3       	ldi	r21, 0x3F	; 63
    2252:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2256:	88 23       	and	r24, r24
    2258:	2c f4       	brge	.+10     	; 0x2264 <main+0x98>
		__ticks = 1;
    225a:	81 e0       	ldi	r24, 0x01	; 1
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	9e 83       	std	Y+6, r25	; 0x06
    2260:	8d 83       	std	Y+5, r24	; 0x05
    2262:	3f c0       	rjmp	.+126    	; 0x22e2 <main+0x116>
	else if (__tmp > 65535)
    2264:	6f 81       	ldd	r22, Y+7	; 0x07
    2266:	78 85       	ldd	r23, Y+8	; 0x08
    2268:	89 85       	ldd	r24, Y+9	; 0x09
    226a:	9a 85       	ldd	r25, Y+10	; 0x0a
    226c:	20 e0       	ldi	r18, 0x00	; 0
    226e:	3f ef       	ldi	r19, 0xFF	; 255
    2270:	4f e7       	ldi	r20, 0x7F	; 127
    2272:	57 e4       	ldi	r21, 0x47	; 71
    2274:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2278:	18 16       	cp	r1, r24
    227a:	4c f5       	brge	.+82     	; 0x22ce <main+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    227c:	6b 85       	ldd	r22, Y+11	; 0x0b
    227e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2280:	8d 85       	ldd	r24, Y+13	; 0x0d
    2282:	9e 85       	ldd	r25, Y+14	; 0x0e
    2284:	20 e0       	ldi	r18, 0x00	; 0
    2286:	30 e0       	ldi	r19, 0x00	; 0
    2288:	40 e2       	ldi	r20, 0x20	; 32
    228a:	51 e4       	ldi	r21, 0x41	; 65
    228c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2290:	dc 01       	movw	r26, r24
    2292:	cb 01       	movw	r24, r22
    2294:	bc 01       	movw	r22, r24
    2296:	cd 01       	movw	r24, r26
    2298:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    229c:	dc 01       	movw	r26, r24
    229e:	cb 01       	movw	r24, r22
    22a0:	9e 83       	std	Y+6, r25	; 0x06
    22a2:	8d 83       	std	Y+5, r24	; 0x05
    22a4:	0f c0       	rjmp	.+30     	; 0x22c4 <main+0xf8>
    22a6:	80 ed       	ldi	r24, 0xD0	; 208
    22a8:	97 e0       	ldi	r25, 0x07	; 7
    22aa:	9c 83       	std	Y+4, r25	; 0x04
    22ac:	8b 83       	std	Y+3, r24	; 0x03
    22ae:	8b 81       	ldd	r24, Y+3	; 0x03
    22b0:	9c 81       	ldd	r25, Y+4	; 0x04
    22b2:	01 97       	sbiw	r24, 0x01	; 1
    22b4:	f1 f7       	brne	.-4      	; 0x22b2 <main+0xe6>
    22b6:	9c 83       	std	Y+4, r25	; 0x04
    22b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22ba:	8d 81       	ldd	r24, Y+5	; 0x05
    22bc:	9e 81       	ldd	r25, Y+6	; 0x06
    22be:	01 97       	sbiw	r24, 0x01	; 1
    22c0:	9e 83       	std	Y+6, r25	; 0x06
    22c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22c4:	8d 81       	ldd	r24, Y+5	; 0x05
    22c6:	9e 81       	ldd	r25, Y+6	; 0x06
    22c8:	00 97       	sbiw	r24, 0x00	; 0
    22ca:	69 f7       	brne	.-38     	; 0x22a6 <main+0xda>
    22cc:	14 c0       	rjmp	.+40     	; 0x22f6 <main+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22ce:	6f 81       	ldd	r22, Y+7	; 0x07
    22d0:	78 85       	ldd	r23, Y+8	; 0x08
    22d2:	89 85       	ldd	r24, Y+9	; 0x09
    22d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    22d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22da:	dc 01       	movw	r26, r24
    22dc:	cb 01       	movw	r24, r22
    22de:	9e 83       	std	Y+6, r25	; 0x06
    22e0:	8d 83       	std	Y+5, r24	; 0x05
    22e2:	8d 81       	ldd	r24, Y+5	; 0x05
    22e4:	9e 81       	ldd	r25, Y+6	; 0x06
    22e6:	9a 83       	std	Y+2, r25	; 0x02
    22e8:	89 83       	std	Y+1, r24	; 0x01
    22ea:	89 81       	ldd	r24, Y+1	; 0x01
    22ec:	9a 81       	ldd	r25, Y+2	; 0x02
    22ee:	01 97       	sbiw	r24, 0x01	; 1
    22f0:	f1 f7       	brne	.-4      	; 0x22ee <main+0x122>
    22f2:	9a 83       	std	Y+2, r25	; 0x02
    22f4:	89 83       	std	Y+1, r24	; 0x01
		{
			_delay_ms (25);
			X =0 ;
    22f6:	18 8a       	std	Y+16, r1	; 0x10
			X = j%10 ;
    22f8:	89 89       	ldd	r24, Y+17	; 0x11
    22fa:	9a e0       	ldi	r25, 0x0A	; 10
    22fc:	69 2f       	mov	r22, r25
    22fe:	0e 94 a5 11 	call	0x234a	; 0x234a <__udivmodqi4>
    2302:	89 2f       	mov	r24, r25
    2304:	88 8b       	std	Y+16, r24	; 0x10
			k = j/10 ;
    2306:	89 89       	ldd	r24, Y+17	; 0x11
    2308:	9a e0       	ldi	r25, 0x0A	; 10
    230a:	69 2f       	mov	r22, r25
    230c:	0e 94 a5 11 	call	0x234a	; 0x234a <__udivmodqi4>
    2310:	8f 87       	std	Y+15, r24	; 0x0f
			X &= 0x0F ;
    2312:	88 89       	ldd	r24, Y+16	; 0x10
    2314:	8f 70       	andi	r24, 0x0F	; 15
    2316:	88 8b       	std	Y+16, r24	; 0x10
			X |= k << 4;
    2318:	8f 85       	ldd	r24, Y+15	; 0x0f
    231a:	88 2f       	mov	r24, r24
    231c:	90 e0       	ldi	r25, 0x00	; 0
    231e:	82 95       	swap	r24
    2320:	92 95       	swap	r25
    2322:	90 7f       	andi	r25, 0xF0	; 240
    2324:	98 27       	eor	r25, r24
    2326:	80 7f       	andi	r24, 0xF0	; 240
    2328:	98 27       	eor	r25, r24
    232a:	98 2f       	mov	r25, r24
    232c:	88 89       	ldd	r24, Y+16	; 0x10
    232e:	89 2b       	or	r24, r25
    2330:	88 8b       	std	Y+16, r24	; 0x10
			STP_voidSend(X);
    2332:	88 89       	ldd	r24, Y+16	; 0x10
    2334:	0e 94 26 0c 	call	0x184c	; 0x184c <STP_voidSend>
			j++ ;
    2338:	89 89       	ldd	r24, Y+17	; 0x11
    233a:	8f 5f       	subi	r24, 0xFF	; 255
    233c:	89 8b       	std	Y+17, r24	; 0x11
			if (j == 100)
    233e:	89 89       	ldd	r24, Y+17	; 0x11
    2340:	84 36       	cpi	r24, 0x64	; 100
    2342:	09 f0       	breq	.+2      	; 0x2346 <main+0x17a>
    2344:	5e cf       	rjmp	.-324    	; 0x2202 <main+0x36>
			{
				j = 0;
    2346:	19 8a       	std	Y+17, r1	; 0x11
    2348:	5c cf       	rjmp	.-328    	; 0x2202 <main+0x36>

0000234a <__udivmodqi4>:
    234a:	99 1b       	sub	r25, r25
    234c:	79 e0       	ldi	r23, 0x09	; 9
    234e:	04 c0       	rjmp	.+8      	; 0x2358 <__udivmodqi4_ep>

00002350 <__udivmodqi4_loop>:
    2350:	99 1f       	adc	r25, r25
    2352:	96 17       	cp	r25, r22
    2354:	08 f0       	brcs	.+2      	; 0x2358 <__udivmodqi4_ep>
    2356:	96 1b       	sub	r25, r22

00002358 <__udivmodqi4_ep>:
    2358:	88 1f       	adc	r24, r24
    235a:	7a 95       	dec	r23
    235c:	c9 f7       	brne	.-14     	; 0x2350 <__udivmodqi4_loop>
    235e:	80 95       	com	r24
    2360:	08 95       	ret

00002362 <__prologue_saves__>:
    2362:	2f 92       	push	r2
    2364:	3f 92       	push	r3
    2366:	4f 92       	push	r4
    2368:	5f 92       	push	r5
    236a:	6f 92       	push	r6
    236c:	7f 92       	push	r7
    236e:	8f 92       	push	r8
    2370:	9f 92       	push	r9
    2372:	af 92       	push	r10
    2374:	bf 92       	push	r11
    2376:	cf 92       	push	r12
    2378:	df 92       	push	r13
    237a:	ef 92       	push	r14
    237c:	ff 92       	push	r15
    237e:	0f 93       	push	r16
    2380:	1f 93       	push	r17
    2382:	cf 93       	push	r28
    2384:	df 93       	push	r29
    2386:	cd b7       	in	r28, 0x3d	; 61
    2388:	de b7       	in	r29, 0x3e	; 62
    238a:	ca 1b       	sub	r28, r26
    238c:	db 0b       	sbc	r29, r27
    238e:	0f b6       	in	r0, 0x3f	; 63
    2390:	f8 94       	cli
    2392:	de bf       	out	0x3e, r29	; 62
    2394:	0f be       	out	0x3f, r0	; 63
    2396:	cd bf       	out	0x3d, r28	; 61
    2398:	09 94       	ijmp

0000239a <__epilogue_restores__>:
    239a:	2a 88       	ldd	r2, Y+18	; 0x12
    239c:	39 88       	ldd	r3, Y+17	; 0x11
    239e:	48 88       	ldd	r4, Y+16	; 0x10
    23a0:	5f 84       	ldd	r5, Y+15	; 0x0f
    23a2:	6e 84       	ldd	r6, Y+14	; 0x0e
    23a4:	7d 84       	ldd	r7, Y+13	; 0x0d
    23a6:	8c 84       	ldd	r8, Y+12	; 0x0c
    23a8:	9b 84       	ldd	r9, Y+11	; 0x0b
    23aa:	aa 84       	ldd	r10, Y+10	; 0x0a
    23ac:	b9 84       	ldd	r11, Y+9	; 0x09
    23ae:	c8 84       	ldd	r12, Y+8	; 0x08
    23b0:	df 80       	ldd	r13, Y+7	; 0x07
    23b2:	ee 80       	ldd	r14, Y+6	; 0x06
    23b4:	fd 80       	ldd	r15, Y+5	; 0x05
    23b6:	0c 81       	ldd	r16, Y+4	; 0x04
    23b8:	1b 81       	ldd	r17, Y+3	; 0x03
    23ba:	aa 81       	ldd	r26, Y+2	; 0x02
    23bc:	b9 81       	ldd	r27, Y+1	; 0x01
    23be:	ce 0f       	add	r28, r30
    23c0:	d1 1d       	adc	r29, r1
    23c2:	0f b6       	in	r0, 0x3f	; 63
    23c4:	f8 94       	cli
    23c6:	de bf       	out	0x3e, r29	; 62
    23c8:	0f be       	out	0x3f, r0	; 63
    23ca:	cd bf       	out	0x3d, r28	; 61
    23cc:	ed 01       	movw	r28, r26
    23ce:	08 95       	ret

000023d0 <_exit>:
    23d0:	f8 94       	cli

000023d2 <__stop_program>:
    23d2:	ff cf       	rjmp	.-2      	; 0x23d2 <__stop_program>
