
SPI_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b86  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010c  00800060  00002b86  00002c1a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080016c  0080016c  00002d26  2**0
                  ALLOC
  3 .stab         00001ab8  00000000  00000000  00002d28  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000bef  00000000  00000000  000047e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  000053cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d1  00000000  00000000  0000554f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002010  00000000  00000000  00005720  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001161  00000000  00000000  00007730  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001003  00000000  00000000  00008891  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  00009894  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002be  00000000  00000000  00009a34  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000090e  00000000  00000000  00009cf2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a600  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e8       	ldi	r30, 0x86	; 134
      68:	fb e2       	ldi	r31, 0x2B	; 43
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 36       	cpi	r26, 0x6C	; 108
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e6       	ldi	r26, 0x6C	; 108
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 37       	cpi	r26, 0x70	; 112
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c7 12 	call	0x258e	; 0x258e <main>
      8a:	0c 94 c1 15 	jmp	0x2b82	; 0x2b82 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e9 12 	jmp	0x25d2	; 0x25d2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 e6       	ldi	r26, 0x63	; 99
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 05 13 	jmp	0x260a	; 0x260a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f5 12 	jmp	0x25ea	; 0x25ea <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 11 13 	jmp	0x2622	; 0x2622 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f5 12 	jmp	0x25ea	; 0x25ea <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 11 13 	jmp	0x2622	; 0x2622 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e9 12 	jmp	0x25d2	; 0x25d2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 e6       	ldi	r24, 0x63	; 99
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 05 13 	jmp	0x260a	; 0x260a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f5 12 	jmp	0x25ea	; 0x25ea <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 11 13 	jmp	0x2622	; 0x2622 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 f5 12 	jmp	0x25ea	; 0x25ea <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 11 13 	jmp	0x2622	; 0x2622 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 f5 12 	jmp	0x25ea	; 0x25ea <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 11 13 	jmp	0x2622	; 0x2622 <__epilogue_restores__+0x18>

00000752 <__floatsisf>:
     752:	a8 e0       	ldi	r26, 0x08	; 8
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 f2 12 	jmp	0x25e4	; 0x25e4 <__prologue_saves__+0x12>
     75e:	9b 01       	movw	r18, r22
     760:	ac 01       	movw	r20, r24
     762:	83 e0       	ldi	r24, 0x03	; 3
     764:	89 83       	std	Y+1, r24	; 0x01
     766:	da 01       	movw	r26, r20
     768:	c9 01       	movw	r24, r18
     76a:	88 27       	eor	r24, r24
     76c:	b7 fd       	sbrc	r27, 7
     76e:	83 95       	inc	r24
     770:	99 27       	eor	r25, r25
     772:	aa 27       	eor	r26, r26
     774:	bb 27       	eor	r27, r27
     776:	b8 2e       	mov	r11, r24
     778:	21 15       	cp	r18, r1
     77a:	31 05       	cpc	r19, r1
     77c:	41 05       	cpc	r20, r1
     77e:	51 05       	cpc	r21, r1
     780:	19 f4       	brne	.+6      	; 0x788 <__floatsisf+0x36>
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	89 83       	std	Y+1, r24	; 0x01
     786:	3a c0       	rjmp	.+116    	; 0x7fc <__floatsisf+0xaa>
     788:	88 23       	and	r24, r24
     78a:	a9 f0       	breq	.+42     	; 0x7b6 <__floatsisf+0x64>
     78c:	20 30       	cpi	r18, 0x00	; 0
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	38 07       	cpc	r19, r24
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	48 07       	cpc	r20, r24
     796:	80 e8       	ldi	r24, 0x80	; 128
     798:	58 07       	cpc	r21, r24
     79a:	29 f4       	brne	.+10     	; 0x7a6 <__floatsisf+0x54>
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	9f ec       	ldi	r25, 0xCF	; 207
     7a4:	30 c0       	rjmp	.+96     	; 0x806 <__floatsisf+0xb4>
     7a6:	ee 24       	eor	r14, r14
     7a8:	ff 24       	eor	r15, r15
     7aa:	87 01       	movw	r16, r14
     7ac:	e2 1a       	sub	r14, r18
     7ae:	f3 0a       	sbc	r15, r19
     7b0:	04 0b       	sbc	r16, r20
     7b2:	15 0b       	sbc	r17, r21
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <__floatsisf+0x68>
     7b6:	79 01       	movw	r14, r18
     7b8:	8a 01       	movw	r16, r20
     7ba:	8e e1       	ldi	r24, 0x1E	; 30
     7bc:	c8 2e       	mov	r12, r24
     7be:	d1 2c       	mov	r13, r1
     7c0:	dc 82       	std	Y+4, r13	; 0x04
     7c2:	cb 82       	std	Y+3, r12	; 0x03
     7c4:	ed 82       	std	Y+5, r14	; 0x05
     7c6:	fe 82       	std	Y+6, r15	; 0x06
     7c8:	0f 83       	std	Y+7, r16	; 0x07
     7ca:	18 87       	std	Y+8, r17	; 0x08
     7cc:	c8 01       	movw	r24, r16
     7ce:	b7 01       	movw	r22, r14
     7d0:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__clzsi2>
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	18 16       	cp	r1, r24
     7d8:	19 06       	cpc	r1, r25
     7da:	84 f4       	brge	.+32     	; 0x7fc <__floatsisf+0xaa>
     7dc:	08 2e       	mov	r0, r24
     7de:	04 c0       	rjmp	.+8      	; 0x7e8 <__floatsisf+0x96>
     7e0:	ee 0c       	add	r14, r14
     7e2:	ff 1c       	adc	r15, r15
     7e4:	00 1f       	adc	r16, r16
     7e6:	11 1f       	adc	r17, r17
     7e8:	0a 94       	dec	r0
     7ea:	d2 f7       	brpl	.-12     	; 0x7e0 <__floatsisf+0x8e>
     7ec:	ed 82       	std	Y+5, r14	; 0x05
     7ee:	fe 82       	std	Y+6, r15	; 0x06
     7f0:	0f 83       	std	Y+7, r16	; 0x07
     7f2:	18 87       	std	Y+8, r17	; 0x08
     7f4:	c8 1a       	sub	r12, r24
     7f6:	d9 0a       	sbc	r13, r25
     7f8:	dc 82       	std	Y+4, r13	; 0x04
     7fa:	cb 82       	std	Y+3, r12	; 0x03
     7fc:	ba 82       	std	Y+2, r11	; 0x02
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     806:	28 96       	adiw	r28, 0x08	; 8
     808:	e9 e0       	ldi	r30, 0x09	; 9
     80a:	0c 94 0e 13 	jmp	0x261c	; 0x261c <__epilogue_restores__+0x12>

0000080e <__fixsfsi>:
     80e:	ac e0       	ldi	r26, 0x0C	; 12
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	ed e0       	ldi	r30, 0x0D	; 13
     814:	f4 e0       	ldi	r31, 0x04	; 4
     816:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__prologue_saves__+0x20>
     81a:	69 83       	std	Y+1, r22	; 0x01
     81c:	7a 83       	std	Y+2, r23	; 0x02
     81e:	8b 83       	std	Y+3, r24	; 0x03
     820:	9c 83       	std	Y+4, r25	; 0x04
     822:	ce 01       	movw	r24, r28
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	be 01       	movw	r22, r28
     828:	6b 5f       	subi	r22, 0xFB	; 251
     82a:	7f 4f       	sbci	r23, 0xFF	; 255
     82c:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     830:	8d 81       	ldd	r24, Y+5	; 0x05
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	61 f1       	breq	.+88     	; 0x88e <__stack+0x2f>
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	50 f1       	brcs	.+84     	; 0x88e <__stack+0x2f>
     83a:	84 30       	cpi	r24, 0x04	; 4
     83c:	21 f4       	brne	.+8      	; 0x846 <__fixsfsi+0x38>
     83e:	8e 81       	ldd	r24, Y+6	; 0x06
     840:	88 23       	and	r24, r24
     842:	51 f1       	breq	.+84     	; 0x898 <__stack+0x39>
     844:	2e c0       	rjmp	.+92     	; 0x8a2 <__stack+0x43>
     846:	2f 81       	ldd	r18, Y+7	; 0x07
     848:	38 85       	ldd	r19, Y+8	; 0x08
     84a:	37 fd       	sbrc	r19, 7
     84c:	20 c0       	rjmp	.+64     	; 0x88e <__stack+0x2f>
     84e:	6e 81       	ldd	r22, Y+6	; 0x06
     850:	2f 31       	cpi	r18, 0x1F	; 31
     852:	31 05       	cpc	r19, r1
     854:	1c f0       	brlt	.+6      	; 0x85c <__fixsfsi+0x4e>
     856:	66 23       	and	r22, r22
     858:	f9 f0       	breq	.+62     	; 0x898 <__stack+0x39>
     85a:	23 c0       	rjmp	.+70     	; 0x8a2 <__stack+0x43>
     85c:	8e e1       	ldi	r24, 0x1E	; 30
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	82 1b       	sub	r24, r18
     862:	93 0b       	sbc	r25, r19
     864:	29 85       	ldd	r18, Y+9	; 0x09
     866:	3a 85       	ldd	r19, Y+10	; 0x0a
     868:	4b 85       	ldd	r20, Y+11	; 0x0b
     86a:	5c 85       	ldd	r21, Y+12	; 0x0c
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	56 95       	lsr	r21
     870:	47 95       	ror	r20
     872:	37 95       	ror	r19
     874:	27 95       	ror	r18
     876:	8a 95       	dec	r24
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	66 23       	and	r22, r22
     87c:	b1 f0       	breq	.+44     	; 0x8aa <__stack+0x4b>
     87e:	50 95       	com	r21
     880:	40 95       	com	r20
     882:	30 95       	com	r19
     884:	21 95       	neg	r18
     886:	3f 4f       	sbci	r19, 0xFF	; 255
     888:	4f 4f       	sbci	r20, 0xFF	; 255
     88a:	5f 4f       	sbci	r21, 0xFF	; 255
     88c:	0e c0       	rjmp	.+28     	; 0x8aa <__stack+0x4b>
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	09 c0       	rjmp	.+18     	; 0x8aa <__stack+0x4b>
     898:	2f ef       	ldi	r18, 0xFF	; 255
     89a:	3f ef       	ldi	r19, 0xFF	; 255
     89c:	4f ef       	ldi	r20, 0xFF	; 255
     89e:	5f e7       	ldi	r21, 0x7F	; 127
     8a0:	04 c0       	rjmp	.+8      	; 0x8aa <__stack+0x4b>
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	50 e8       	ldi	r21, 0x80	; 128
     8aa:	b9 01       	movw	r22, r18
     8ac:	ca 01       	movw	r24, r20
     8ae:	2c 96       	adiw	r28, 0x0c	; 12
     8b0:	e2 e0       	ldi	r30, 0x02	; 2
     8b2:	0c 94 15 13 	jmp	0x262a	; 0x262a <__epilogue_restores__+0x20>

000008b6 <__clzsi2>:
     8b6:	ef 92       	push	r14
     8b8:	ff 92       	push	r15
     8ba:	0f 93       	push	r16
     8bc:	1f 93       	push	r17
     8be:	7b 01       	movw	r14, r22
     8c0:	8c 01       	movw	r16, r24
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	e8 16       	cp	r14, r24
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	f8 06       	cpc	r15, r24
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	08 07       	cpc	r16, r24
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	18 07       	cpc	r17, r24
     8d2:	88 f4       	brcc	.+34     	; 0x8f6 <__clzsi2+0x40>
     8d4:	8f ef       	ldi	r24, 0xFF	; 255
     8d6:	e8 16       	cp	r14, r24
     8d8:	f1 04       	cpc	r15, r1
     8da:	01 05       	cpc	r16, r1
     8dc:	11 05       	cpc	r17, r1
     8de:	31 f0       	breq	.+12     	; 0x8ec <__clzsi2+0x36>
     8e0:	28 f0       	brcs	.+10     	; 0x8ec <__clzsi2+0x36>
     8e2:	88 e0       	ldi	r24, 0x08	; 8
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	b0 e0       	ldi	r27, 0x00	; 0
     8ea:	17 c0       	rjmp	.+46     	; 0x91a <__clzsi2+0x64>
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	a0 e0       	ldi	r26, 0x00	; 0
     8f2:	b0 e0       	ldi	r27, 0x00	; 0
     8f4:	12 c0       	rjmp	.+36     	; 0x91a <__clzsi2+0x64>
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	e8 16       	cp	r14, r24
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	f8 06       	cpc	r15, r24
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	08 07       	cpc	r16, r24
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	18 07       	cpc	r17, r24
     906:	28 f0       	brcs	.+10     	; 0x912 <__clzsi2+0x5c>
     908:	88 e1       	ldi	r24, 0x18	; 24
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e0       	ldi	r26, 0x00	; 0
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	04 c0       	rjmp	.+8      	; 0x91a <__clzsi2+0x64>
     912:	80 e1       	ldi	r24, 0x10	; 16
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a0 e0       	ldi	r26, 0x00	; 0
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	20 e2       	ldi	r18, 0x20	; 32
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	28 1b       	sub	r18, r24
     924:	39 0b       	sbc	r19, r25
     926:	4a 0b       	sbc	r20, r26
     928:	5b 0b       	sbc	r21, r27
     92a:	04 c0       	rjmp	.+8      	; 0x934 <__clzsi2+0x7e>
     92c:	16 95       	lsr	r17
     92e:	07 95       	ror	r16
     930:	f7 94       	ror	r15
     932:	e7 94       	ror	r14
     934:	8a 95       	dec	r24
     936:	d2 f7       	brpl	.-12     	; 0x92c <__clzsi2+0x76>
     938:	f7 01       	movw	r30, r14
     93a:	e5 59       	subi	r30, 0x95	; 149
     93c:	ff 4f       	sbci	r31, 0xFF	; 255
     93e:	80 81       	ld	r24, Z
     940:	28 1b       	sub	r18, r24
     942:	31 09       	sbc	r19, r1
     944:	41 09       	sbc	r20, r1
     946:	51 09       	sbc	r21, r1
     948:	c9 01       	movw	r24, r18
     94a:	1f 91       	pop	r17
     94c:	0f 91       	pop	r16
     94e:	ff 90       	pop	r15
     950:	ef 90       	pop	r14
     952:	08 95       	ret

00000954 <__pack_f>:
     954:	df 92       	push	r13
     956:	ef 92       	push	r14
     958:	ff 92       	push	r15
     95a:	0f 93       	push	r16
     95c:	1f 93       	push	r17
     95e:	fc 01       	movw	r30, r24
     960:	e4 80       	ldd	r14, Z+4	; 0x04
     962:	f5 80       	ldd	r15, Z+5	; 0x05
     964:	06 81       	ldd	r16, Z+6	; 0x06
     966:	17 81       	ldd	r17, Z+7	; 0x07
     968:	d1 80       	ldd	r13, Z+1	; 0x01
     96a:	80 81       	ld	r24, Z
     96c:	82 30       	cpi	r24, 0x02	; 2
     96e:	48 f4       	brcc	.+18     	; 0x982 <__pack_f+0x2e>
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	a0 e1       	ldi	r26, 0x10	; 16
     976:	b0 e0       	ldi	r27, 0x00	; 0
     978:	e8 2a       	or	r14, r24
     97a:	f9 2a       	or	r15, r25
     97c:	0a 2b       	or	r16, r26
     97e:	1b 2b       	or	r17, r27
     980:	a5 c0       	rjmp	.+330    	; 0xacc <__pack_f+0x178>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	09 f4       	brne	.+2      	; 0x988 <__pack_f+0x34>
     986:	9f c0       	rjmp	.+318    	; 0xac6 <__pack_f+0x172>
     988:	82 30       	cpi	r24, 0x02	; 2
     98a:	21 f4       	brne	.+8      	; 0x994 <__pack_f+0x40>
     98c:	ee 24       	eor	r14, r14
     98e:	ff 24       	eor	r15, r15
     990:	87 01       	movw	r16, r14
     992:	05 c0       	rjmp	.+10     	; 0x99e <__pack_f+0x4a>
     994:	e1 14       	cp	r14, r1
     996:	f1 04       	cpc	r15, r1
     998:	01 05       	cpc	r16, r1
     99a:	11 05       	cpc	r17, r1
     99c:	19 f4       	brne	.+6      	; 0x9a4 <__pack_f+0x50>
     99e:	e0 e0       	ldi	r30, 0x00	; 0
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	96 c0       	rjmp	.+300    	; 0xad0 <__pack_f+0x17c>
     9a4:	62 81       	ldd	r22, Z+2	; 0x02
     9a6:	73 81       	ldd	r23, Z+3	; 0x03
     9a8:	9f ef       	ldi	r25, 0xFF	; 255
     9aa:	62 38       	cpi	r22, 0x82	; 130
     9ac:	79 07       	cpc	r23, r25
     9ae:	0c f0       	brlt	.+2      	; 0x9b2 <__pack_f+0x5e>
     9b0:	5b c0       	rjmp	.+182    	; 0xa68 <__pack_f+0x114>
     9b2:	22 e8       	ldi	r18, 0x82	; 130
     9b4:	3f ef       	ldi	r19, 0xFF	; 255
     9b6:	26 1b       	sub	r18, r22
     9b8:	37 0b       	sbc	r19, r23
     9ba:	2a 31       	cpi	r18, 0x1A	; 26
     9bc:	31 05       	cpc	r19, r1
     9be:	2c f0       	brlt	.+10     	; 0x9ca <__pack_f+0x76>
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	40 e0       	ldi	r20, 0x00	; 0
     9c6:	50 e0       	ldi	r21, 0x00	; 0
     9c8:	2a c0       	rjmp	.+84     	; 0xa1e <__pack_f+0xca>
     9ca:	b8 01       	movw	r22, r16
     9cc:	a7 01       	movw	r20, r14
     9ce:	02 2e       	mov	r0, r18
     9d0:	04 c0       	rjmp	.+8      	; 0x9da <__pack_f+0x86>
     9d2:	76 95       	lsr	r23
     9d4:	67 95       	ror	r22
     9d6:	57 95       	ror	r21
     9d8:	47 95       	ror	r20
     9da:	0a 94       	dec	r0
     9dc:	d2 f7       	brpl	.-12     	; 0x9d2 <__pack_f+0x7e>
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	a0 e0       	ldi	r26, 0x00	; 0
     9e4:	b0 e0       	ldi	r27, 0x00	; 0
     9e6:	04 c0       	rjmp	.+8      	; 0x9f0 <__pack_f+0x9c>
     9e8:	88 0f       	add	r24, r24
     9ea:	99 1f       	adc	r25, r25
     9ec:	aa 1f       	adc	r26, r26
     9ee:	bb 1f       	adc	r27, r27
     9f0:	2a 95       	dec	r18
     9f2:	d2 f7       	brpl	.-12     	; 0x9e8 <__pack_f+0x94>
     9f4:	01 97       	sbiw	r24, 0x01	; 1
     9f6:	a1 09       	sbc	r26, r1
     9f8:	b1 09       	sbc	r27, r1
     9fa:	8e 21       	and	r24, r14
     9fc:	9f 21       	and	r25, r15
     9fe:	a0 23       	and	r26, r16
     a00:	b1 23       	and	r27, r17
     a02:	00 97       	sbiw	r24, 0x00	; 0
     a04:	a1 05       	cpc	r26, r1
     a06:	b1 05       	cpc	r27, r1
     a08:	21 f0       	breq	.+8      	; 0xa12 <__pack_f+0xbe>
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	a0 e0       	ldi	r26, 0x00	; 0
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	9a 01       	movw	r18, r20
     a14:	ab 01       	movw	r20, r22
     a16:	28 2b       	or	r18, r24
     a18:	39 2b       	or	r19, r25
     a1a:	4a 2b       	or	r20, r26
     a1c:	5b 2b       	or	r21, r27
     a1e:	da 01       	movw	r26, r20
     a20:	c9 01       	movw	r24, r18
     a22:	8f 77       	andi	r24, 0x7F	; 127
     a24:	90 70       	andi	r25, 0x00	; 0
     a26:	a0 70       	andi	r26, 0x00	; 0
     a28:	b0 70       	andi	r27, 0x00	; 0
     a2a:	80 34       	cpi	r24, 0x40	; 64
     a2c:	91 05       	cpc	r25, r1
     a2e:	a1 05       	cpc	r26, r1
     a30:	b1 05       	cpc	r27, r1
     a32:	39 f4       	brne	.+14     	; 0xa42 <__pack_f+0xee>
     a34:	27 ff       	sbrs	r18, 7
     a36:	09 c0       	rjmp	.+18     	; 0xa4a <__pack_f+0xf6>
     a38:	20 5c       	subi	r18, 0xC0	; 192
     a3a:	3f 4f       	sbci	r19, 0xFF	; 255
     a3c:	4f 4f       	sbci	r20, 0xFF	; 255
     a3e:	5f 4f       	sbci	r21, 0xFF	; 255
     a40:	04 c0       	rjmp	.+8      	; 0xa4a <__pack_f+0xf6>
     a42:	21 5c       	subi	r18, 0xC1	; 193
     a44:	3f 4f       	sbci	r19, 0xFF	; 255
     a46:	4f 4f       	sbci	r20, 0xFF	; 255
     a48:	5f 4f       	sbci	r21, 0xFF	; 255
     a4a:	e0 e0       	ldi	r30, 0x00	; 0
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	20 30       	cpi	r18, 0x00	; 0
     a50:	a0 e0       	ldi	r26, 0x00	; 0
     a52:	3a 07       	cpc	r19, r26
     a54:	a0 e0       	ldi	r26, 0x00	; 0
     a56:	4a 07       	cpc	r20, r26
     a58:	a0 e4       	ldi	r26, 0x40	; 64
     a5a:	5a 07       	cpc	r21, r26
     a5c:	10 f0       	brcs	.+4      	; 0xa62 <__pack_f+0x10e>
     a5e:	e1 e0       	ldi	r30, 0x01	; 1
     a60:	f0 e0       	ldi	r31, 0x00	; 0
     a62:	79 01       	movw	r14, r18
     a64:	8a 01       	movw	r16, r20
     a66:	27 c0       	rjmp	.+78     	; 0xab6 <__pack_f+0x162>
     a68:	60 38       	cpi	r22, 0x80	; 128
     a6a:	71 05       	cpc	r23, r1
     a6c:	64 f5       	brge	.+88     	; 0xac6 <__pack_f+0x172>
     a6e:	fb 01       	movw	r30, r22
     a70:	e1 58       	subi	r30, 0x81	; 129
     a72:	ff 4f       	sbci	r31, 0xFF	; 255
     a74:	d8 01       	movw	r26, r16
     a76:	c7 01       	movw	r24, r14
     a78:	8f 77       	andi	r24, 0x7F	; 127
     a7a:	90 70       	andi	r25, 0x00	; 0
     a7c:	a0 70       	andi	r26, 0x00	; 0
     a7e:	b0 70       	andi	r27, 0x00	; 0
     a80:	80 34       	cpi	r24, 0x40	; 64
     a82:	91 05       	cpc	r25, r1
     a84:	a1 05       	cpc	r26, r1
     a86:	b1 05       	cpc	r27, r1
     a88:	39 f4       	brne	.+14     	; 0xa98 <__pack_f+0x144>
     a8a:	e7 fe       	sbrs	r14, 7
     a8c:	0d c0       	rjmp	.+26     	; 0xaa8 <__pack_f+0x154>
     a8e:	80 e4       	ldi	r24, 0x40	; 64
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	a0 e0       	ldi	r26, 0x00	; 0
     a94:	b0 e0       	ldi	r27, 0x00	; 0
     a96:	04 c0       	rjmp	.+8      	; 0xaa0 <__pack_f+0x14c>
     a98:	8f e3       	ldi	r24, 0x3F	; 63
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	a0 e0       	ldi	r26, 0x00	; 0
     a9e:	b0 e0       	ldi	r27, 0x00	; 0
     aa0:	e8 0e       	add	r14, r24
     aa2:	f9 1e       	adc	r15, r25
     aa4:	0a 1f       	adc	r16, r26
     aa6:	1b 1f       	adc	r17, r27
     aa8:	17 ff       	sbrs	r17, 7
     aaa:	05 c0       	rjmp	.+10     	; 0xab6 <__pack_f+0x162>
     aac:	16 95       	lsr	r17
     aae:	07 95       	ror	r16
     ab0:	f7 94       	ror	r15
     ab2:	e7 94       	ror	r14
     ab4:	31 96       	adiw	r30, 0x01	; 1
     ab6:	87 e0       	ldi	r24, 0x07	; 7
     ab8:	16 95       	lsr	r17
     aba:	07 95       	ror	r16
     abc:	f7 94       	ror	r15
     abe:	e7 94       	ror	r14
     ac0:	8a 95       	dec	r24
     ac2:	d1 f7       	brne	.-12     	; 0xab8 <__pack_f+0x164>
     ac4:	05 c0       	rjmp	.+10     	; 0xad0 <__pack_f+0x17c>
     ac6:	ee 24       	eor	r14, r14
     ac8:	ff 24       	eor	r15, r15
     aca:	87 01       	movw	r16, r14
     acc:	ef ef       	ldi	r30, 0xFF	; 255
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	6e 2f       	mov	r22, r30
     ad2:	67 95       	ror	r22
     ad4:	66 27       	eor	r22, r22
     ad6:	67 95       	ror	r22
     ad8:	90 2f       	mov	r25, r16
     ada:	9f 77       	andi	r25, 0x7F	; 127
     adc:	d7 94       	ror	r13
     ade:	dd 24       	eor	r13, r13
     ae0:	d7 94       	ror	r13
     ae2:	8e 2f       	mov	r24, r30
     ae4:	86 95       	lsr	r24
     ae6:	49 2f       	mov	r20, r25
     ae8:	46 2b       	or	r20, r22
     aea:	58 2f       	mov	r21, r24
     aec:	5d 29       	or	r21, r13
     aee:	b7 01       	movw	r22, r14
     af0:	ca 01       	movw	r24, r20
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	ff 90       	pop	r15
     af8:	ef 90       	pop	r14
     afa:	df 90       	pop	r13
     afc:	08 95       	ret

00000afe <__unpack_f>:
     afe:	fc 01       	movw	r30, r24
     b00:	db 01       	movw	r26, r22
     b02:	40 81       	ld	r20, Z
     b04:	51 81       	ldd	r21, Z+1	; 0x01
     b06:	22 81       	ldd	r18, Z+2	; 0x02
     b08:	62 2f       	mov	r22, r18
     b0a:	6f 77       	andi	r22, 0x7F	; 127
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	22 1f       	adc	r18, r18
     b10:	22 27       	eor	r18, r18
     b12:	22 1f       	adc	r18, r18
     b14:	93 81       	ldd	r25, Z+3	; 0x03
     b16:	89 2f       	mov	r24, r25
     b18:	88 0f       	add	r24, r24
     b1a:	82 2b       	or	r24, r18
     b1c:	28 2f       	mov	r18, r24
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	99 1f       	adc	r25, r25
     b22:	99 27       	eor	r25, r25
     b24:	99 1f       	adc	r25, r25
     b26:	11 96       	adiw	r26, 0x01	; 1
     b28:	9c 93       	st	X, r25
     b2a:	11 97       	sbiw	r26, 0x01	; 1
     b2c:	21 15       	cp	r18, r1
     b2e:	31 05       	cpc	r19, r1
     b30:	a9 f5       	brne	.+106    	; 0xb9c <__unpack_f+0x9e>
     b32:	41 15       	cp	r20, r1
     b34:	51 05       	cpc	r21, r1
     b36:	61 05       	cpc	r22, r1
     b38:	71 05       	cpc	r23, r1
     b3a:	11 f4       	brne	.+4      	; 0xb40 <__unpack_f+0x42>
     b3c:	82 e0       	ldi	r24, 0x02	; 2
     b3e:	37 c0       	rjmp	.+110    	; 0xbae <__unpack_f+0xb0>
     b40:	82 e8       	ldi	r24, 0x82	; 130
     b42:	9f ef       	ldi	r25, 0xFF	; 255
     b44:	13 96       	adiw	r26, 0x03	; 3
     b46:	9c 93       	st	X, r25
     b48:	8e 93       	st	-X, r24
     b4a:	12 97       	sbiw	r26, 0x02	; 2
     b4c:	9a 01       	movw	r18, r20
     b4e:	ab 01       	movw	r20, r22
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	6a 95       	dec	r22
     b5c:	d1 f7       	brne	.-12     	; 0xb52 <__unpack_f+0x54>
     b5e:	83 e0       	ldi	r24, 0x03	; 3
     b60:	8c 93       	st	X, r24
     b62:	0d c0       	rjmp	.+26     	; 0xb7e <__unpack_f+0x80>
     b64:	22 0f       	add	r18, r18
     b66:	33 1f       	adc	r19, r19
     b68:	44 1f       	adc	r20, r20
     b6a:	55 1f       	adc	r21, r21
     b6c:	12 96       	adiw	r26, 0x02	; 2
     b6e:	8d 91       	ld	r24, X+
     b70:	9c 91       	ld	r25, X
     b72:	13 97       	sbiw	r26, 0x03	; 3
     b74:	01 97       	sbiw	r24, 0x01	; 1
     b76:	13 96       	adiw	r26, 0x03	; 3
     b78:	9c 93       	st	X, r25
     b7a:	8e 93       	st	-X, r24
     b7c:	12 97       	sbiw	r26, 0x02	; 2
     b7e:	20 30       	cpi	r18, 0x00	; 0
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	38 07       	cpc	r19, r24
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	48 07       	cpc	r20, r24
     b88:	80 e4       	ldi	r24, 0x40	; 64
     b8a:	58 07       	cpc	r21, r24
     b8c:	58 f3       	brcs	.-42     	; 0xb64 <__unpack_f+0x66>
     b8e:	14 96       	adiw	r26, 0x04	; 4
     b90:	2d 93       	st	X+, r18
     b92:	3d 93       	st	X+, r19
     b94:	4d 93       	st	X+, r20
     b96:	5c 93       	st	X, r21
     b98:	17 97       	sbiw	r26, 0x07	; 7
     b9a:	08 95       	ret
     b9c:	2f 3f       	cpi	r18, 0xFF	; 255
     b9e:	31 05       	cpc	r19, r1
     ba0:	79 f4       	brne	.+30     	; 0xbc0 <__unpack_f+0xc2>
     ba2:	41 15       	cp	r20, r1
     ba4:	51 05       	cpc	r21, r1
     ba6:	61 05       	cpc	r22, r1
     ba8:	71 05       	cpc	r23, r1
     baa:	19 f4       	brne	.+6      	; 0xbb2 <__unpack_f+0xb4>
     bac:	84 e0       	ldi	r24, 0x04	; 4
     bae:	8c 93       	st	X, r24
     bb0:	08 95       	ret
     bb2:	64 ff       	sbrs	r22, 4
     bb4:	03 c0       	rjmp	.+6      	; 0xbbc <__unpack_f+0xbe>
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	8c 93       	st	X, r24
     bba:	12 c0       	rjmp	.+36     	; 0xbe0 <__unpack_f+0xe2>
     bbc:	1c 92       	st	X, r1
     bbe:	10 c0       	rjmp	.+32     	; 0xbe0 <__unpack_f+0xe2>
     bc0:	2f 57       	subi	r18, 0x7F	; 127
     bc2:	30 40       	sbci	r19, 0x00	; 0
     bc4:	13 96       	adiw	r26, 0x03	; 3
     bc6:	3c 93       	st	X, r19
     bc8:	2e 93       	st	-X, r18
     bca:	12 97       	sbiw	r26, 0x02	; 2
     bcc:	83 e0       	ldi	r24, 0x03	; 3
     bce:	8c 93       	st	X, r24
     bd0:	87 e0       	ldi	r24, 0x07	; 7
     bd2:	44 0f       	add	r20, r20
     bd4:	55 1f       	adc	r21, r21
     bd6:	66 1f       	adc	r22, r22
     bd8:	77 1f       	adc	r23, r23
     bda:	8a 95       	dec	r24
     bdc:	d1 f7       	brne	.-12     	; 0xbd2 <__unpack_f+0xd4>
     bde:	70 64       	ori	r23, 0x40	; 64
     be0:	14 96       	adiw	r26, 0x04	; 4
     be2:	4d 93       	st	X+, r20
     be4:	5d 93       	st	X+, r21
     be6:	6d 93       	st	X+, r22
     be8:	7c 93       	st	X, r23
     bea:	17 97       	sbiw	r26, 0x07	; 7
     bec:	08 95       	ret

00000bee <__fpcmp_parts_f>:
     bee:	1f 93       	push	r17
     bf0:	dc 01       	movw	r26, r24
     bf2:	fb 01       	movw	r30, r22
     bf4:	9c 91       	ld	r25, X
     bf6:	92 30       	cpi	r25, 0x02	; 2
     bf8:	08 f4       	brcc	.+2      	; 0xbfc <__fpcmp_parts_f+0xe>
     bfa:	47 c0       	rjmp	.+142    	; 0xc8a <__fpcmp_parts_f+0x9c>
     bfc:	80 81       	ld	r24, Z
     bfe:	82 30       	cpi	r24, 0x02	; 2
     c00:	08 f4       	brcc	.+2      	; 0xc04 <__fpcmp_parts_f+0x16>
     c02:	43 c0       	rjmp	.+134    	; 0xc8a <__fpcmp_parts_f+0x9c>
     c04:	94 30       	cpi	r25, 0x04	; 4
     c06:	51 f4       	brne	.+20     	; 0xc1c <__fpcmp_parts_f+0x2e>
     c08:	11 96       	adiw	r26, 0x01	; 1
     c0a:	1c 91       	ld	r17, X
     c0c:	84 30       	cpi	r24, 0x04	; 4
     c0e:	99 f5       	brne	.+102    	; 0xc76 <__fpcmp_parts_f+0x88>
     c10:	81 81       	ldd	r24, Z+1	; 0x01
     c12:	68 2f       	mov	r22, r24
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	61 1b       	sub	r22, r17
     c18:	71 09       	sbc	r23, r1
     c1a:	3f c0       	rjmp	.+126    	; 0xc9a <__fpcmp_parts_f+0xac>
     c1c:	84 30       	cpi	r24, 0x04	; 4
     c1e:	21 f0       	breq	.+8      	; 0xc28 <__fpcmp_parts_f+0x3a>
     c20:	92 30       	cpi	r25, 0x02	; 2
     c22:	31 f4       	brne	.+12     	; 0xc30 <__fpcmp_parts_f+0x42>
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	b9 f1       	breq	.+110    	; 0xc96 <__fpcmp_parts_f+0xa8>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	88 23       	and	r24, r24
     c2c:	89 f1       	breq	.+98     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c2e:	2d c0       	rjmp	.+90     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c30:	11 96       	adiw	r26, 0x01	; 1
     c32:	1c 91       	ld	r17, X
     c34:	11 97       	sbiw	r26, 0x01	; 1
     c36:	82 30       	cpi	r24, 0x02	; 2
     c38:	f1 f0       	breq	.+60     	; 0xc76 <__fpcmp_parts_f+0x88>
     c3a:	81 81       	ldd	r24, Z+1	; 0x01
     c3c:	18 17       	cp	r17, r24
     c3e:	d9 f4       	brne	.+54     	; 0xc76 <__fpcmp_parts_f+0x88>
     c40:	12 96       	adiw	r26, 0x02	; 2
     c42:	2d 91       	ld	r18, X+
     c44:	3c 91       	ld	r19, X
     c46:	13 97       	sbiw	r26, 0x03	; 3
     c48:	82 81       	ldd	r24, Z+2	; 0x02
     c4a:	93 81       	ldd	r25, Z+3	; 0x03
     c4c:	82 17       	cp	r24, r18
     c4e:	93 07       	cpc	r25, r19
     c50:	94 f0       	brlt	.+36     	; 0xc76 <__fpcmp_parts_f+0x88>
     c52:	28 17       	cp	r18, r24
     c54:	39 07       	cpc	r19, r25
     c56:	bc f0       	brlt	.+46     	; 0xc86 <__fpcmp_parts_f+0x98>
     c58:	14 96       	adiw	r26, 0x04	; 4
     c5a:	8d 91       	ld	r24, X+
     c5c:	9d 91       	ld	r25, X+
     c5e:	0d 90       	ld	r0, X+
     c60:	bc 91       	ld	r27, X
     c62:	a0 2d       	mov	r26, r0
     c64:	24 81       	ldd	r18, Z+4	; 0x04
     c66:	35 81       	ldd	r19, Z+5	; 0x05
     c68:	46 81       	ldd	r20, Z+6	; 0x06
     c6a:	57 81       	ldd	r21, Z+7	; 0x07
     c6c:	28 17       	cp	r18, r24
     c6e:	39 07       	cpc	r19, r25
     c70:	4a 07       	cpc	r20, r26
     c72:	5b 07       	cpc	r21, r27
     c74:	18 f4       	brcc	.+6      	; 0xc7c <__fpcmp_parts_f+0x8e>
     c76:	11 23       	and	r17, r17
     c78:	41 f0       	breq	.+16     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c7a:	0a c0       	rjmp	.+20     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c7c:	82 17       	cp	r24, r18
     c7e:	93 07       	cpc	r25, r19
     c80:	a4 07       	cpc	r26, r20
     c82:	b5 07       	cpc	r27, r21
     c84:	40 f4       	brcc	.+16     	; 0xc96 <__fpcmp_parts_f+0xa8>
     c86:	11 23       	and	r17, r17
     c88:	19 f0       	breq	.+6      	; 0xc90 <__fpcmp_parts_f+0xa2>
     c8a:	61 e0       	ldi	r22, 0x01	; 1
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	05 c0       	rjmp	.+10     	; 0xc9a <__fpcmp_parts_f+0xac>
     c90:	6f ef       	ldi	r22, 0xFF	; 255
     c92:	7f ef       	ldi	r23, 0xFF	; 255
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <__fpcmp_parts_f+0xac>
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	cb 01       	movw	r24, r22
     c9c:	1f 91       	pop	r17
     c9e:	08 95       	ret

00000ca0 <GPIO_voidSetPinDDR>:




	void GPIO_voidSetPinDDR (u8  copy_u8Port ,u8 copy_u8Pin , u8 copy_u8Mode )
	{
     ca0:	df 93       	push	r29
     ca2:	cf 93       	push	r28
     ca4:	00 d0       	rcall	.+0      	; 0xca6 <GPIO_voidSetPinDDR+0x6>
     ca6:	00 d0       	rcall	.+0      	; 0xca8 <GPIO_voidSetPinDDR+0x8>
     ca8:	0f 92       	push	r0
     caa:	cd b7       	in	r28, 0x3d	; 61
     cac:	de b7       	in	r29, 0x3e	; 62
     cae:	89 83       	std	Y+1, r24	; 0x01
     cb0:	6a 83       	std	Y+2, r22	; 0x02
     cb2:	4b 83       	std	Y+3, r20	; 0x03
		switch(copy_u8Port)
     cb4:	89 81       	ldd	r24, Y+1	; 0x01
     cb6:	28 2f       	mov	r18, r24
     cb8:	30 e0       	ldi	r19, 0x00	; 0
     cba:	3d 83       	std	Y+5, r19	; 0x05
     cbc:	2c 83       	std	Y+4, r18	; 0x04
     cbe:	8c 81       	ldd	r24, Y+4	; 0x04
     cc0:	9d 81       	ldd	r25, Y+5	; 0x05
     cc2:	81 30       	cpi	r24, 0x01	; 1
     cc4:	91 05       	cpc	r25, r1
     cc6:	09 f4       	brne	.+2      	; 0xcca <GPIO_voidSetPinDDR+0x2a>
     cc8:	43 c0       	rjmp	.+134    	; 0xd50 <GPIO_voidSetPinDDR+0xb0>
     cca:	2c 81       	ldd	r18, Y+4	; 0x04
     ccc:	3d 81       	ldd	r19, Y+5	; 0x05
     cce:	22 30       	cpi	r18, 0x02	; 2
     cd0:	31 05       	cpc	r19, r1
     cd2:	2c f4       	brge	.+10     	; 0xcde <GPIO_voidSetPinDDR+0x3e>
     cd4:	8c 81       	ldd	r24, Y+4	; 0x04
     cd6:	9d 81       	ldd	r25, Y+5	; 0x05
     cd8:	00 97       	sbiw	r24, 0x00	; 0
     cda:	71 f0       	breq	.+28     	; 0xcf8 <GPIO_voidSetPinDDR+0x58>
     cdc:	bc c0       	rjmp	.+376    	; 0xe56 <GPIO_voidSetPinDDR+0x1b6>
     cde:	2c 81       	ldd	r18, Y+4	; 0x04
     ce0:	3d 81       	ldd	r19, Y+5	; 0x05
     ce2:	22 30       	cpi	r18, 0x02	; 2
     ce4:	31 05       	cpc	r19, r1
     ce6:	09 f4       	brne	.+2      	; 0xcea <GPIO_voidSetPinDDR+0x4a>
     ce8:	5f c0       	rjmp	.+190    	; 0xda8 <GPIO_voidSetPinDDR+0x108>
     cea:	8c 81       	ldd	r24, Y+4	; 0x04
     cec:	9d 81       	ldd	r25, Y+5	; 0x05
     cee:	83 30       	cpi	r24, 0x03	; 3
     cf0:	91 05       	cpc	r25, r1
     cf2:	09 f4       	brne	.+2      	; 0xcf6 <GPIO_voidSetPinDDR+0x56>
     cf4:	85 c0       	rjmp	.+266    	; 0xe00 <GPIO_voidSetPinDDR+0x160>
     cf6:	af c0       	rjmp	.+350    	; 0xe56 <GPIO_voidSetPinDDR+0x1b6>
		{
			case GPIOA :
				if(copy_u8Mode ==OUTPUT )
     cf8:	8b 81       	ldd	r24, Y+3	; 0x03
     cfa:	81 30       	cpi	r24, 0x01	; 1
     cfc:	a1 f4       	brne	.+40     	; 0xd26 <GPIO_voidSetPinDDR+0x86>
				{
					SET_BIT(DDRA ,copy_u8Pin);
     cfe:	aa e3       	ldi	r26, 0x3A	; 58
     d00:	b0 e0       	ldi	r27, 0x00	; 0
     d02:	ea e3       	ldi	r30, 0x3A	; 58
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	80 81       	ld	r24, Z
     d08:	48 2f       	mov	r20, r24
     d0a:	8a 81       	ldd	r24, Y+2	; 0x02
     d0c:	28 2f       	mov	r18, r24
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	02 2e       	mov	r0, r18
     d16:	02 c0       	rjmp	.+4      	; 0xd1c <GPIO_voidSetPinDDR+0x7c>
     d18:	88 0f       	add	r24, r24
     d1a:	99 1f       	adc	r25, r25
     d1c:	0a 94       	dec	r0
     d1e:	e2 f7       	brpl	.-8      	; 0xd18 <GPIO_voidSetPinDDR+0x78>
     d20:	84 2b       	or	r24, r20
     d22:	8c 93       	st	X, r24
     d24:	98 c0       	rjmp	.+304    	; 0xe56 <GPIO_voidSetPinDDR+0x1b6>
				}
				else {
					CLEAR_BIT(DDRA,copy_u8Pin);
     d26:	aa e3       	ldi	r26, 0x3A	; 58
     d28:	b0 e0       	ldi	r27, 0x00	; 0
     d2a:	ea e3       	ldi	r30, 0x3A	; 58
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	80 81       	ld	r24, Z
     d30:	48 2f       	mov	r20, r24
     d32:	8a 81       	ldd	r24, Y+2	; 0x02
     d34:	28 2f       	mov	r18, r24
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	81 e0       	ldi	r24, 0x01	; 1
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	02 2e       	mov	r0, r18
     d3e:	02 c0       	rjmp	.+4      	; 0xd44 <GPIO_voidSetPinDDR+0xa4>
     d40:	88 0f       	add	r24, r24
     d42:	99 1f       	adc	r25, r25
     d44:	0a 94       	dec	r0
     d46:	e2 f7       	brpl	.-8      	; 0xd40 <GPIO_voidSetPinDDR+0xa0>
     d48:	80 95       	com	r24
     d4a:	84 23       	and	r24, r20
     d4c:	8c 93       	st	X, r24
     d4e:	83 c0       	rjmp	.+262    	; 0xe56 <GPIO_voidSetPinDDR+0x1b6>
				}
				break;
			case GPIOB :
				if(copy_u8Mode ==OUTPUT )
     d50:	8b 81       	ldd	r24, Y+3	; 0x03
     d52:	81 30       	cpi	r24, 0x01	; 1
     d54:	a1 f4       	brne	.+40     	; 0xd7e <GPIO_voidSetPinDDR+0xde>
				{
					SET_BIT(DDRB ,copy_u8Pin);
     d56:	a7 e3       	ldi	r26, 0x37	; 55
     d58:	b0 e0       	ldi	r27, 0x00	; 0
     d5a:	e7 e3       	ldi	r30, 0x37	; 55
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	80 81       	ld	r24, Z
     d60:	48 2f       	mov	r20, r24
     d62:	8a 81       	ldd	r24, Y+2	; 0x02
     d64:	28 2f       	mov	r18, r24
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	81 e0       	ldi	r24, 0x01	; 1
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	02 2e       	mov	r0, r18
     d6e:	02 c0       	rjmp	.+4      	; 0xd74 <GPIO_voidSetPinDDR+0xd4>
     d70:	88 0f       	add	r24, r24
     d72:	99 1f       	adc	r25, r25
     d74:	0a 94       	dec	r0
     d76:	e2 f7       	brpl	.-8      	; 0xd70 <GPIO_voidSetPinDDR+0xd0>
     d78:	84 2b       	or	r24, r20
     d7a:	8c 93       	st	X, r24
     d7c:	6c c0       	rjmp	.+216    	; 0xe56 <GPIO_voidSetPinDDR+0x1b6>
				}
				else {
					CLEAR_BIT(DDRB,copy_u8Pin);
     d7e:	a7 e3       	ldi	r26, 0x37	; 55
     d80:	b0 e0       	ldi	r27, 0x00	; 0
     d82:	e7 e3       	ldi	r30, 0x37	; 55
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	80 81       	ld	r24, Z
     d88:	48 2f       	mov	r20, r24
     d8a:	8a 81       	ldd	r24, Y+2	; 0x02
     d8c:	28 2f       	mov	r18, r24
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	02 2e       	mov	r0, r18
     d96:	02 c0       	rjmp	.+4      	; 0xd9c <GPIO_voidSetPinDDR+0xfc>
     d98:	88 0f       	add	r24, r24
     d9a:	99 1f       	adc	r25, r25
     d9c:	0a 94       	dec	r0
     d9e:	e2 f7       	brpl	.-8      	; 0xd98 <GPIO_voidSetPinDDR+0xf8>
     da0:	80 95       	com	r24
     da2:	84 23       	and	r24, r20
     da4:	8c 93       	st	X, r24
     da6:	57 c0       	rjmp	.+174    	; 0xe56 <GPIO_voidSetPinDDR+0x1b6>
				}
				break;
			case GPIOC :
				if(copy_u8Mode ==OUTPUT )
     da8:	8b 81       	ldd	r24, Y+3	; 0x03
     daa:	81 30       	cpi	r24, 0x01	; 1
     dac:	a1 f4       	brne	.+40     	; 0xdd6 <GPIO_voidSetPinDDR+0x136>
				{
					SET_BIT(DDRC ,copy_u8Pin);
     dae:	a4 e3       	ldi	r26, 0x34	; 52
     db0:	b0 e0       	ldi	r27, 0x00	; 0
     db2:	e4 e3       	ldi	r30, 0x34	; 52
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	80 81       	ld	r24, Z
     db8:	48 2f       	mov	r20, r24
     dba:	8a 81       	ldd	r24, Y+2	; 0x02
     dbc:	28 2f       	mov	r18, r24
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	81 e0       	ldi	r24, 0x01	; 1
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	02 2e       	mov	r0, r18
     dc6:	02 c0       	rjmp	.+4      	; 0xdcc <GPIO_voidSetPinDDR+0x12c>
     dc8:	88 0f       	add	r24, r24
     dca:	99 1f       	adc	r25, r25
     dcc:	0a 94       	dec	r0
     dce:	e2 f7       	brpl	.-8      	; 0xdc8 <GPIO_voidSetPinDDR+0x128>
     dd0:	84 2b       	or	r24, r20
     dd2:	8c 93       	st	X, r24
     dd4:	40 c0       	rjmp	.+128    	; 0xe56 <GPIO_voidSetPinDDR+0x1b6>
				}
				else {
					CLEAR_BIT(DDRC,copy_u8Pin);
     dd6:	a4 e3       	ldi	r26, 0x34	; 52
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	e4 e3       	ldi	r30, 0x34	; 52
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	48 2f       	mov	r20, r24
     de2:	8a 81       	ldd	r24, Y+2	; 0x02
     de4:	28 2f       	mov	r18, r24
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	02 2e       	mov	r0, r18
     dee:	02 c0       	rjmp	.+4      	; 0xdf4 <GPIO_voidSetPinDDR+0x154>
     df0:	88 0f       	add	r24, r24
     df2:	99 1f       	adc	r25, r25
     df4:	0a 94       	dec	r0
     df6:	e2 f7       	brpl	.-8      	; 0xdf0 <GPIO_voidSetPinDDR+0x150>
     df8:	80 95       	com	r24
     dfa:	84 23       	and	r24, r20
     dfc:	8c 93       	st	X, r24
     dfe:	2b c0       	rjmp	.+86     	; 0xe56 <GPIO_voidSetPinDDR+0x1b6>
				}
				break;
			case GPIOD :
				if(copy_u8Mode ==OUTPUT )
     e00:	8b 81       	ldd	r24, Y+3	; 0x03
     e02:	81 30       	cpi	r24, 0x01	; 1
     e04:	a1 f4       	brne	.+40     	; 0xe2e <GPIO_voidSetPinDDR+0x18e>
				{
					SET_BIT(DDRD ,copy_u8Pin);
     e06:	a1 e3       	ldi	r26, 0x31	; 49
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	e1 e3       	ldi	r30, 0x31	; 49
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	48 2f       	mov	r20, r24
     e12:	8a 81       	ldd	r24, Y+2	; 0x02
     e14:	28 2f       	mov	r18, r24
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	02 2e       	mov	r0, r18
     e1e:	02 c0       	rjmp	.+4      	; 0xe24 <GPIO_voidSetPinDDR+0x184>
     e20:	88 0f       	add	r24, r24
     e22:	99 1f       	adc	r25, r25
     e24:	0a 94       	dec	r0
     e26:	e2 f7       	brpl	.-8      	; 0xe20 <GPIO_voidSetPinDDR+0x180>
     e28:	84 2b       	or	r24, r20
     e2a:	8c 93       	st	X, r24
     e2c:	14 c0       	rjmp	.+40     	; 0xe56 <GPIO_voidSetPinDDR+0x1b6>
				}
				else {
					CLEAR_BIT(DDRD,copy_u8Pin);
     e2e:	a1 e3       	ldi	r26, 0x31	; 49
     e30:	b0 e0       	ldi	r27, 0x00	; 0
     e32:	e1 e3       	ldi	r30, 0x31	; 49
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	80 81       	ld	r24, Z
     e38:	48 2f       	mov	r20, r24
     e3a:	8a 81       	ldd	r24, Y+2	; 0x02
     e3c:	28 2f       	mov	r18, r24
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	02 2e       	mov	r0, r18
     e46:	02 c0       	rjmp	.+4      	; 0xe4c <GPIO_voidSetPinDDR+0x1ac>
     e48:	88 0f       	add	r24, r24
     e4a:	99 1f       	adc	r25, r25
     e4c:	0a 94       	dec	r0
     e4e:	e2 f7       	brpl	.-8      	; 0xe48 <GPIO_voidSetPinDDR+0x1a8>
     e50:	80 95       	com	r24
     e52:	84 23       	and	r24, r20
     e54:	8c 93       	st	X, r24
				}
				break;	
			default:
				break;
		}
	}
     e56:	0f 90       	pop	r0
     e58:	0f 90       	pop	r0
     e5a:	0f 90       	pop	r0
     e5c:	0f 90       	pop	r0
     e5e:	0f 90       	pop	r0
     e60:	cf 91       	pop	r28
     e62:	df 91       	pop	r29
     e64:	08 95       	ret

00000e66 <GPIO_voidWritePin>:
	
	void GPIO_voidWritePin (u8  copy_u8Port ,u8 copy_u8Pin , u8 copy_u8Value )
	{
     e66:	df 93       	push	r29
     e68:	cf 93       	push	r28
     e6a:	00 d0       	rcall	.+0      	; 0xe6c <GPIO_voidWritePin+0x6>
     e6c:	00 d0       	rcall	.+0      	; 0xe6e <GPIO_voidWritePin+0x8>
     e6e:	0f 92       	push	r0
     e70:	cd b7       	in	r28, 0x3d	; 61
     e72:	de b7       	in	r29, 0x3e	; 62
     e74:	89 83       	std	Y+1, r24	; 0x01
     e76:	6a 83       	std	Y+2, r22	; 0x02
     e78:	4b 83       	std	Y+3, r20	; 0x03
		switch(copy_u8Port)
     e7a:	89 81       	ldd	r24, Y+1	; 0x01
     e7c:	28 2f       	mov	r18, r24
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	3d 83       	std	Y+5, r19	; 0x05
     e82:	2c 83       	std	Y+4, r18	; 0x04
     e84:	8c 81       	ldd	r24, Y+4	; 0x04
     e86:	9d 81       	ldd	r25, Y+5	; 0x05
     e88:	81 30       	cpi	r24, 0x01	; 1
     e8a:	91 05       	cpc	r25, r1
     e8c:	09 f4       	brne	.+2      	; 0xe90 <GPIO_voidWritePin+0x2a>
     e8e:	43 c0       	rjmp	.+134    	; 0xf16 <GPIO_voidWritePin+0xb0>
     e90:	2c 81       	ldd	r18, Y+4	; 0x04
     e92:	3d 81       	ldd	r19, Y+5	; 0x05
     e94:	22 30       	cpi	r18, 0x02	; 2
     e96:	31 05       	cpc	r19, r1
     e98:	2c f4       	brge	.+10     	; 0xea4 <GPIO_voidWritePin+0x3e>
     e9a:	8c 81       	ldd	r24, Y+4	; 0x04
     e9c:	9d 81       	ldd	r25, Y+5	; 0x05
     e9e:	00 97       	sbiw	r24, 0x00	; 0
     ea0:	71 f0       	breq	.+28     	; 0xebe <GPIO_voidWritePin+0x58>
     ea2:	bc c0       	rjmp	.+376    	; 0x101c <GPIO_voidWritePin+0x1b6>
     ea4:	2c 81       	ldd	r18, Y+4	; 0x04
     ea6:	3d 81       	ldd	r19, Y+5	; 0x05
     ea8:	22 30       	cpi	r18, 0x02	; 2
     eaa:	31 05       	cpc	r19, r1
     eac:	09 f4       	brne	.+2      	; 0xeb0 <GPIO_voidWritePin+0x4a>
     eae:	5f c0       	rjmp	.+190    	; 0xf6e <GPIO_voidWritePin+0x108>
     eb0:	8c 81       	ldd	r24, Y+4	; 0x04
     eb2:	9d 81       	ldd	r25, Y+5	; 0x05
     eb4:	83 30       	cpi	r24, 0x03	; 3
     eb6:	91 05       	cpc	r25, r1
     eb8:	09 f4       	brne	.+2      	; 0xebc <GPIO_voidWritePin+0x56>
     eba:	85 c0       	rjmp	.+266    	; 0xfc6 <GPIO_voidWritePin+0x160>
     ebc:	af c0       	rjmp	.+350    	; 0x101c <GPIO_voidWritePin+0x1b6>
		{
			case GPIOA :
				if(copy_u8Value ==HIGH )
     ebe:	8b 81       	ldd	r24, Y+3	; 0x03
     ec0:	81 30       	cpi	r24, 0x01	; 1
     ec2:	a1 f4       	brne	.+40     	; 0xeec <GPIO_voidWritePin+0x86>
				{
					SET_BIT(PORTA ,copy_u8Pin);
     ec4:	ab e3       	ldi	r26, 0x3B	; 59
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	eb e3       	ldi	r30, 0x3B	; 59
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	48 2f       	mov	r20, r24
     ed0:	8a 81       	ldd	r24, Y+2	; 0x02
     ed2:	28 2f       	mov	r18, r24
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	02 2e       	mov	r0, r18
     edc:	02 c0       	rjmp	.+4      	; 0xee2 <GPIO_voidWritePin+0x7c>
     ede:	88 0f       	add	r24, r24
     ee0:	99 1f       	adc	r25, r25
     ee2:	0a 94       	dec	r0
     ee4:	e2 f7       	brpl	.-8      	; 0xede <GPIO_voidWritePin+0x78>
     ee6:	84 2b       	or	r24, r20
     ee8:	8c 93       	st	X, r24
     eea:	98 c0       	rjmp	.+304    	; 0x101c <GPIO_voidWritePin+0x1b6>
				}
				else {
					CLEAR_BIT(PORTA,copy_u8Pin);
     eec:	ab e3       	ldi	r26, 0x3B	; 59
     eee:	b0 e0       	ldi	r27, 0x00	; 0
     ef0:	eb e3       	ldi	r30, 0x3B	; 59
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	80 81       	ld	r24, Z
     ef6:	48 2f       	mov	r20, r24
     ef8:	8a 81       	ldd	r24, Y+2	; 0x02
     efa:	28 2f       	mov	r18, r24
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	02 2e       	mov	r0, r18
     f04:	02 c0       	rjmp	.+4      	; 0xf0a <GPIO_voidWritePin+0xa4>
     f06:	88 0f       	add	r24, r24
     f08:	99 1f       	adc	r25, r25
     f0a:	0a 94       	dec	r0
     f0c:	e2 f7       	brpl	.-8      	; 0xf06 <GPIO_voidWritePin+0xa0>
     f0e:	80 95       	com	r24
     f10:	84 23       	and	r24, r20
     f12:	8c 93       	st	X, r24
     f14:	83 c0       	rjmp	.+262    	; 0x101c <GPIO_voidWritePin+0x1b6>
				}
				break;
			case GPIOB :
				if(copy_u8Value ==HIGH )
     f16:	8b 81       	ldd	r24, Y+3	; 0x03
     f18:	81 30       	cpi	r24, 0x01	; 1
     f1a:	a1 f4       	brne	.+40     	; 0xf44 <GPIO_voidWritePin+0xde>
				{
					SET_BIT(PORTB ,copy_u8Pin);
     f1c:	a8 e3       	ldi	r26, 0x38	; 56
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	e8 e3       	ldi	r30, 0x38	; 56
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	48 2f       	mov	r20, r24
     f28:	8a 81       	ldd	r24, Y+2	; 0x02
     f2a:	28 2f       	mov	r18, r24
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	02 2e       	mov	r0, r18
     f34:	02 c0       	rjmp	.+4      	; 0xf3a <GPIO_voidWritePin+0xd4>
     f36:	88 0f       	add	r24, r24
     f38:	99 1f       	adc	r25, r25
     f3a:	0a 94       	dec	r0
     f3c:	e2 f7       	brpl	.-8      	; 0xf36 <GPIO_voidWritePin+0xd0>
     f3e:	84 2b       	or	r24, r20
     f40:	8c 93       	st	X, r24
     f42:	6c c0       	rjmp	.+216    	; 0x101c <GPIO_voidWritePin+0x1b6>
				}
				else {
					CLEAR_BIT(PORTB,copy_u8Pin);
     f44:	a8 e3       	ldi	r26, 0x38	; 56
     f46:	b0 e0       	ldi	r27, 0x00	; 0
     f48:	e8 e3       	ldi	r30, 0x38	; 56
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	48 2f       	mov	r20, r24
     f50:	8a 81       	ldd	r24, Y+2	; 0x02
     f52:	28 2f       	mov	r18, r24
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	02 2e       	mov	r0, r18
     f5c:	02 c0       	rjmp	.+4      	; 0xf62 <GPIO_voidWritePin+0xfc>
     f5e:	88 0f       	add	r24, r24
     f60:	99 1f       	adc	r25, r25
     f62:	0a 94       	dec	r0
     f64:	e2 f7       	brpl	.-8      	; 0xf5e <GPIO_voidWritePin+0xf8>
     f66:	80 95       	com	r24
     f68:	84 23       	and	r24, r20
     f6a:	8c 93       	st	X, r24
     f6c:	57 c0       	rjmp	.+174    	; 0x101c <GPIO_voidWritePin+0x1b6>
				}
				break;
			case GPIOC :
				if(copy_u8Value ==HIGH )
     f6e:	8b 81       	ldd	r24, Y+3	; 0x03
     f70:	81 30       	cpi	r24, 0x01	; 1
     f72:	a1 f4       	brne	.+40     	; 0xf9c <GPIO_voidWritePin+0x136>
				{
					SET_BIT(PORTC ,copy_u8Pin);
     f74:	a5 e3       	ldi	r26, 0x35	; 53
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	e5 e3       	ldi	r30, 0x35	; 53
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	48 2f       	mov	r20, r24
     f80:	8a 81       	ldd	r24, Y+2	; 0x02
     f82:	28 2f       	mov	r18, r24
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	02 2e       	mov	r0, r18
     f8c:	02 c0       	rjmp	.+4      	; 0xf92 <GPIO_voidWritePin+0x12c>
     f8e:	88 0f       	add	r24, r24
     f90:	99 1f       	adc	r25, r25
     f92:	0a 94       	dec	r0
     f94:	e2 f7       	brpl	.-8      	; 0xf8e <GPIO_voidWritePin+0x128>
     f96:	84 2b       	or	r24, r20
     f98:	8c 93       	st	X, r24
     f9a:	40 c0       	rjmp	.+128    	; 0x101c <GPIO_voidWritePin+0x1b6>
				}
				else {
					CLEAR_BIT(PORTC,copy_u8Pin);
     f9c:	a5 e3       	ldi	r26, 0x35	; 53
     f9e:	b0 e0       	ldi	r27, 0x00	; 0
     fa0:	e5 e3       	ldi	r30, 0x35	; 53
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	80 81       	ld	r24, Z
     fa6:	48 2f       	mov	r20, r24
     fa8:	8a 81       	ldd	r24, Y+2	; 0x02
     faa:	28 2f       	mov	r18, r24
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	02 2e       	mov	r0, r18
     fb4:	02 c0       	rjmp	.+4      	; 0xfba <GPIO_voidWritePin+0x154>
     fb6:	88 0f       	add	r24, r24
     fb8:	99 1f       	adc	r25, r25
     fba:	0a 94       	dec	r0
     fbc:	e2 f7       	brpl	.-8      	; 0xfb6 <GPIO_voidWritePin+0x150>
     fbe:	80 95       	com	r24
     fc0:	84 23       	and	r24, r20
     fc2:	8c 93       	st	X, r24
     fc4:	2b c0       	rjmp	.+86     	; 0x101c <GPIO_voidWritePin+0x1b6>
				}
				break;
			case GPIOD :
				if(copy_u8Value == HIGH )
     fc6:	8b 81       	ldd	r24, Y+3	; 0x03
     fc8:	81 30       	cpi	r24, 0x01	; 1
     fca:	a1 f4       	brne	.+40     	; 0xff4 <GPIO_voidWritePin+0x18e>
				{
					SET_BIT(PORTD ,copy_u8Pin);
     fcc:	a2 e3       	ldi	r26, 0x32	; 50
     fce:	b0 e0       	ldi	r27, 0x00	; 0
     fd0:	e2 e3       	ldi	r30, 0x32	; 50
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	80 81       	ld	r24, Z
     fd6:	48 2f       	mov	r20, r24
     fd8:	8a 81       	ldd	r24, Y+2	; 0x02
     fda:	28 2f       	mov	r18, r24
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	02 2e       	mov	r0, r18
     fe4:	02 c0       	rjmp	.+4      	; 0xfea <GPIO_voidWritePin+0x184>
     fe6:	88 0f       	add	r24, r24
     fe8:	99 1f       	adc	r25, r25
     fea:	0a 94       	dec	r0
     fec:	e2 f7       	brpl	.-8      	; 0xfe6 <GPIO_voidWritePin+0x180>
     fee:	84 2b       	or	r24, r20
     ff0:	8c 93       	st	X, r24
     ff2:	14 c0       	rjmp	.+40     	; 0x101c <GPIO_voidWritePin+0x1b6>
				}
				else {
					CLEAR_BIT(PORTD,copy_u8Pin);
     ff4:	a2 e3       	ldi	r26, 0x32	; 50
     ff6:	b0 e0       	ldi	r27, 0x00	; 0
     ff8:	e2 e3       	ldi	r30, 0x32	; 50
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	80 81       	ld	r24, Z
     ffe:	48 2f       	mov	r20, r24
    1000:	8a 81       	ldd	r24, Y+2	; 0x02
    1002:	28 2f       	mov	r18, r24
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	02 2e       	mov	r0, r18
    100c:	02 c0       	rjmp	.+4      	; 0x1012 <GPIO_voidWritePin+0x1ac>
    100e:	88 0f       	add	r24, r24
    1010:	99 1f       	adc	r25, r25
    1012:	0a 94       	dec	r0
    1014:	e2 f7       	brpl	.-8      	; 0x100e <GPIO_voidWritePin+0x1a8>
    1016:	80 95       	com	r24
    1018:	84 23       	and	r24, r20
    101a:	8c 93       	st	X, r24
				break;	
			default:
				break;
		}
		
	}
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	0f 90       	pop	r0
    1024:	0f 90       	pop	r0
    1026:	cf 91       	pop	r28
    1028:	df 91       	pop	r29
    102a:	08 95       	ret

0000102c <GPIO_u8ReadPin>:
	
	u8	GPIO_u8ReadPin(	u8  copy_u8Port ,u8 copy_u8Pin )
	{
    102c:	df 93       	push	r29
    102e:	cf 93       	push	r28
    1030:	00 d0       	rcall	.+0      	; 0x1032 <GPIO_u8ReadPin+0x6>
    1032:	00 d0       	rcall	.+0      	; 0x1034 <GPIO_u8ReadPin+0x8>
    1034:	0f 92       	push	r0
    1036:	cd b7       	in	r28, 0x3d	; 61
    1038:	de b7       	in	r29, 0x3e	; 62
    103a:	8a 83       	std	Y+2, r24	; 0x02
    103c:	6b 83       	std	Y+3, r22	; 0x03
		u8 Local_u8ReturnValue ;
		switch(copy_u8Port){
    103e:	8a 81       	ldd	r24, Y+2	; 0x02
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	3d 83       	std	Y+5, r19	; 0x05
    1046:	2c 83       	std	Y+4, r18	; 0x04
    1048:	4c 81       	ldd	r20, Y+4	; 0x04
    104a:	5d 81       	ldd	r21, Y+5	; 0x05
    104c:	41 30       	cpi	r20, 0x01	; 1
    104e:	51 05       	cpc	r21, r1
    1050:	b1 f1       	breq	.+108    	; 0x10be <GPIO_u8ReadPin+0x92>
    1052:	8c 81       	ldd	r24, Y+4	; 0x04
    1054:	9d 81       	ldd	r25, Y+5	; 0x05
    1056:	82 30       	cpi	r24, 0x02	; 2
    1058:	91 05       	cpc	r25, r1
    105a:	34 f4       	brge	.+12     	; 0x1068 <GPIO_u8ReadPin+0x3c>
    105c:	2c 81       	ldd	r18, Y+4	; 0x04
    105e:	3d 81       	ldd	r19, Y+5	; 0x05
    1060:	21 15       	cp	r18, r1
    1062:	31 05       	cpc	r19, r1
    1064:	71 f0       	breq	.+28     	; 0x1082 <GPIO_u8ReadPin+0x56>
    1066:	84 c0       	rjmp	.+264    	; 0x1170 <GPIO_u8ReadPin+0x144>
    1068:	4c 81       	ldd	r20, Y+4	; 0x04
    106a:	5d 81       	ldd	r21, Y+5	; 0x05
    106c:	42 30       	cpi	r20, 0x02	; 2
    106e:	51 05       	cpc	r21, r1
    1070:	09 f4       	brne	.+2      	; 0x1074 <GPIO_u8ReadPin+0x48>
    1072:	43 c0       	rjmp	.+134    	; 0x10fa <GPIO_u8ReadPin+0xce>
    1074:	8c 81       	ldd	r24, Y+4	; 0x04
    1076:	9d 81       	ldd	r25, Y+5	; 0x05
    1078:	83 30       	cpi	r24, 0x03	; 3
    107a:	91 05       	cpc	r25, r1
    107c:	09 f4       	brne	.+2      	; 0x1080 <GPIO_u8ReadPin+0x54>
    107e:	5b c0       	rjmp	.+182    	; 0x1136 <GPIO_u8ReadPin+0x10a>
    1080:	77 c0       	rjmp	.+238    	; 0x1170 <GPIO_u8ReadPin+0x144>
			case GPIOA :
				Local_u8ReturnValue = GET_BIT(PINA,copy_u8Pin);
    1082:	e9 e3       	ldi	r30, 0x39	; 57
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	80 81       	ld	r24, Z
    1088:	48 2f       	mov	r20, r24
    108a:	50 e0       	ldi	r21, 0x00	; 0
    108c:	8b 81       	ldd	r24, Y+3	; 0x03
    108e:	28 2f       	mov	r18, r24
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	02 c0       	rjmp	.+4      	; 0x109c <GPIO_u8ReadPin+0x70>
    1098:	88 0f       	add	r24, r24
    109a:	99 1f       	adc	r25, r25
    109c:	2a 95       	dec	r18
    109e:	e2 f7       	brpl	.-8      	; 0x1098 <GPIO_u8ReadPin+0x6c>
    10a0:	9a 01       	movw	r18, r20
    10a2:	28 23       	and	r18, r24
    10a4:	39 23       	and	r19, r25
    10a6:	8b 81       	ldd	r24, Y+3	; 0x03
    10a8:	88 2f       	mov	r24, r24
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	a9 01       	movw	r20, r18
    10ae:	02 c0       	rjmp	.+4      	; 0x10b4 <GPIO_u8ReadPin+0x88>
    10b0:	55 95       	asr	r21
    10b2:	47 95       	ror	r20
    10b4:	8a 95       	dec	r24
    10b6:	e2 f7       	brpl	.-8      	; 0x10b0 <GPIO_u8ReadPin+0x84>
    10b8:	ca 01       	movw	r24, r20
    10ba:	89 83       	std	Y+1, r24	; 0x01
    10bc:	59 c0       	rjmp	.+178    	; 0x1170 <GPIO_u8ReadPin+0x144>
				break ;
			case GPIOB :
				Local_u8ReturnValue = GET_BIT(PINB,copy_u8Pin);
    10be:	e6 e3       	ldi	r30, 0x36	; 54
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 81       	ld	r24, Z
    10c4:	48 2f       	mov	r20, r24
    10c6:	50 e0       	ldi	r21, 0x00	; 0
    10c8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ca:	28 2f       	mov	r18, r24
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	02 c0       	rjmp	.+4      	; 0x10d8 <GPIO_u8ReadPin+0xac>
    10d4:	88 0f       	add	r24, r24
    10d6:	99 1f       	adc	r25, r25
    10d8:	2a 95       	dec	r18
    10da:	e2 f7       	brpl	.-8      	; 0x10d4 <GPIO_u8ReadPin+0xa8>
    10dc:	9a 01       	movw	r18, r20
    10de:	28 23       	and	r18, r24
    10e0:	39 23       	and	r19, r25
    10e2:	8b 81       	ldd	r24, Y+3	; 0x03
    10e4:	88 2f       	mov	r24, r24
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	a9 01       	movw	r20, r18
    10ea:	02 c0       	rjmp	.+4      	; 0x10f0 <GPIO_u8ReadPin+0xc4>
    10ec:	55 95       	asr	r21
    10ee:	47 95       	ror	r20
    10f0:	8a 95       	dec	r24
    10f2:	e2 f7       	brpl	.-8      	; 0x10ec <GPIO_u8ReadPin+0xc0>
    10f4:	ca 01       	movw	r24, r20
    10f6:	89 83       	std	Y+1, r24	; 0x01
    10f8:	3b c0       	rjmp	.+118    	; 0x1170 <GPIO_u8ReadPin+0x144>
				break ;
			case GPIOC :
				Local_u8ReturnValue = GET_BIT(PINC,copy_u8Pin);
    10fa:	e3 e3       	ldi	r30, 0x33	; 51
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	80 81       	ld	r24, Z
    1100:	48 2f       	mov	r20, r24
    1102:	50 e0       	ldi	r21, 0x00	; 0
    1104:	8b 81       	ldd	r24, Y+3	; 0x03
    1106:	28 2f       	mov	r18, r24
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	02 c0       	rjmp	.+4      	; 0x1114 <GPIO_u8ReadPin+0xe8>
    1110:	88 0f       	add	r24, r24
    1112:	99 1f       	adc	r25, r25
    1114:	2a 95       	dec	r18
    1116:	e2 f7       	brpl	.-8      	; 0x1110 <GPIO_u8ReadPin+0xe4>
    1118:	9a 01       	movw	r18, r20
    111a:	28 23       	and	r18, r24
    111c:	39 23       	and	r19, r25
    111e:	8b 81       	ldd	r24, Y+3	; 0x03
    1120:	88 2f       	mov	r24, r24
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	a9 01       	movw	r20, r18
    1126:	02 c0       	rjmp	.+4      	; 0x112c <GPIO_u8ReadPin+0x100>
    1128:	55 95       	asr	r21
    112a:	47 95       	ror	r20
    112c:	8a 95       	dec	r24
    112e:	e2 f7       	brpl	.-8      	; 0x1128 <GPIO_u8ReadPin+0xfc>
    1130:	ca 01       	movw	r24, r20
    1132:	89 83       	std	Y+1, r24	; 0x01
    1134:	1d c0       	rjmp	.+58     	; 0x1170 <GPIO_u8ReadPin+0x144>
				break ;
			case GPIOD :
				Local_u8ReturnValue = GET_BIT(PIND,copy_u8Pin);
    1136:	e0 e3       	ldi	r30, 0x30	; 48
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	80 81       	ld	r24, Z
    113c:	48 2f       	mov	r20, r24
    113e:	50 e0       	ldi	r21, 0x00	; 0
    1140:	8b 81       	ldd	r24, Y+3	; 0x03
    1142:	28 2f       	mov	r18, r24
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	02 c0       	rjmp	.+4      	; 0x1150 <GPIO_u8ReadPin+0x124>
    114c:	88 0f       	add	r24, r24
    114e:	99 1f       	adc	r25, r25
    1150:	2a 95       	dec	r18
    1152:	e2 f7       	brpl	.-8      	; 0x114c <GPIO_u8ReadPin+0x120>
    1154:	9a 01       	movw	r18, r20
    1156:	28 23       	and	r18, r24
    1158:	39 23       	and	r19, r25
    115a:	8b 81       	ldd	r24, Y+3	; 0x03
    115c:	88 2f       	mov	r24, r24
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	a9 01       	movw	r20, r18
    1162:	02 c0       	rjmp	.+4      	; 0x1168 <GPIO_u8ReadPin+0x13c>
    1164:	55 95       	asr	r21
    1166:	47 95       	ror	r20
    1168:	8a 95       	dec	r24
    116a:	e2 f7       	brpl	.-8      	; 0x1164 <GPIO_u8ReadPin+0x138>
    116c:	ca 01       	movw	r24, r20
    116e:	89 83       	std	Y+1, r24	; 0x01
				break ;
			default:
			break;
		}
		return Local_u8ReturnValue ;
    1170:	89 81       	ldd	r24, Y+1	; 0x01
		
	}
    1172:	0f 90       	pop	r0
    1174:	0f 90       	pop	r0
    1176:	0f 90       	pop	r0
    1178:	0f 90       	pop	r0
    117a:	0f 90       	pop	r0
    117c:	cf 91       	pop	r28
    117e:	df 91       	pop	r29
    1180:	08 95       	ret

00001182 <GPIO_voidTogPin>:
	
	void GPIO_voidTogPin 	( u8 copy_u8Port , u8 copy_u8Pin )
	{
    1182:	df 93       	push	r29
    1184:	cf 93       	push	r28
    1186:	00 d0       	rcall	.+0      	; 0x1188 <GPIO_voidTogPin+0x6>
    1188:	00 d0       	rcall	.+0      	; 0x118a <GPIO_voidTogPin+0x8>
    118a:	cd b7       	in	r28, 0x3d	; 61
    118c:	de b7       	in	r29, 0x3e	; 62
    118e:	89 83       	std	Y+1, r24	; 0x01
    1190:	6a 83       	std	Y+2, r22	; 0x02
		switch(copy_u8Port){
    1192:	89 81       	ldd	r24, Y+1	; 0x01
    1194:	28 2f       	mov	r18, r24
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	3c 83       	std	Y+4, r19	; 0x04
    119a:	2b 83       	std	Y+3, r18	; 0x03
    119c:	8b 81       	ldd	r24, Y+3	; 0x03
    119e:	9c 81       	ldd	r25, Y+4	; 0x04
    11a0:	81 30       	cpi	r24, 0x01	; 1
    11a2:	91 05       	cpc	r25, r1
    11a4:	49 f1       	breq	.+82     	; 0x11f8 <GPIO_voidTogPin+0x76>
    11a6:	2b 81       	ldd	r18, Y+3	; 0x03
    11a8:	3c 81       	ldd	r19, Y+4	; 0x04
    11aa:	22 30       	cpi	r18, 0x02	; 2
    11ac:	31 05       	cpc	r19, r1
    11ae:	2c f4       	brge	.+10     	; 0x11ba <GPIO_voidTogPin+0x38>
    11b0:	8b 81       	ldd	r24, Y+3	; 0x03
    11b2:	9c 81       	ldd	r25, Y+4	; 0x04
    11b4:	00 97       	sbiw	r24, 0x00	; 0
    11b6:	61 f0       	breq	.+24     	; 0x11d0 <GPIO_voidTogPin+0x4e>
    11b8:	5a c0       	rjmp	.+180    	; 0x126e <GPIO_voidTogPin+0xec>
    11ba:	2b 81       	ldd	r18, Y+3	; 0x03
    11bc:	3c 81       	ldd	r19, Y+4	; 0x04
    11be:	22 30       	cpi	r18, 0x02	; 2
    11c0:	31 05       	cpc	r19, r1
    11c2:	71 f1       	breq	.+92     	; 0x1220 <GPIO_voidTogPin+0x9e>
    11c4:	8b 81       	ldd	r24, Y+3	; 0x03
    11c6:	9c 81       	ldd	r25, Y+4	; 0x04
    11c8:	83 30       	cpi	r24, 0x03	; 3
    11ca:	91 05       	cpc	r25, r1
    11cc:	e9 f1       	breq	.+122    	; 0x1248 <GPIO_voidTogPin+0xc6>
    11ce:	4f c0       	rjmp	.+158    	; 0x126e <GPIO_voidTogPin+0xec>
			case GPIOA :
				TOG_BIT(PORTA,copy_u8Pin);
    11d0:	ab e3       	ldi	r26, 0x3B	; 59
    11d2:	b0 e0       	ldi	r27, 0x00	; 0
    11d4:	eb e3       	ldi	r30, 0x3B	; 59
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	80 81       	ld	r24, Z
    11da:	48 2f       	mov	r20, r24
    11dc:	8a 81       	ldd	r24, Y+2	; 0x02
    11de:	28 2f       	mov	r18, r24
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	02 2e       	mov	r0, r18
    11e8:	02 c0       	rjmp	.+4      	; 0x11ee <GPIO_voidTogPin+0x6c>
    11ea:	88 0f       	add	r24, r24
    11ec:	99 1f       	adc	r25, r25
    11ee:	0a 94       	dec	r0
    11f0:	e2 f7       	brpl	.-8      	; 0x11ea <GPIO_voidTogPin+0x68>
    11f2:	84 27       	eor	r24, r20
    11f4:	8c 93       	st	X, r24
    11f6:	3b c0       	rjmp	.+118    	; 0x126e <GPIO_voidTogPin+0xec>
				break ;             
			case GPIOB :            
				TOG_BIT(PORTB,copy_u8Pin);
    11f8:	a8 e3       	ldi	r26, 0x38	; 56
    11fa:	b0 e0       	ldi	r27, 0x00	; 0
    11fc:	e8 e3       	ldi	r30, 0x38	; 56
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	80 81       	ld	r24, Z
    1202:	48 2f       	mov	r20, r24
    1204:	8a 81       	ldd	r24, Y+2	; 0x02
    1206:	28 2f       	mov	r18, r24
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	81 e0       	ldi	r24, 0x01	; 1
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	02 2e       	mov	r0, r18
    1210:	02 c0       	rjmp	.+4      	; 0x1216 <GPIO_voidTogPin+0x94>
    1212:	88 0f       	add	r24, r24
    1214:	99 1f       	adc	r25, r25
    1216:	0a 94       	dec	r0
    1218:	e2 f7       	brpl	.-8      	; 0x1212 <GPIO_voidTogPin+0x90>
    121a:	84 27       	eor	r24, r20
    121c:	8c 93       	st	X, r24
    121e:	27 c0       	rjmp	.+78     	; 0x126e <GPIO_voidTogPin+0xec>
				break ;             
			case GPIOC :            
				TOG_BIT(PORTC,copy_u8Pin);
    1220:	a5 e3       	ldi	r26, 0x35	; 53
    1222:	b0 e0       	ldi	r27, 0x00	; 0
    1224:	e5 e3       	ldi	r30, 0x35	; 53
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	80 81       	ld	r24, Z
    122a:	48 2f       	mov	r20, r24
    122c:	8a 81       	ldd	r24, Y+2	; 0x02
    122e:	28 2f       	mov	r18, r24
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	02 2e       	mov	r0, r18
    1238:	02 c0       	rjmp	.+4      	; 0x123e <GPIO_voidTogPin+0xbc>
    123a:	88 0f       	add	r24, r24
    123c:	99 1f       	adc	r25, r25
    123e:	0a 94       	dec	r0
    1240:	e2 f7       	brpl	.-8      	; 0x123a <GPIO_voidTogPin+0xb8>
    1242:	84 27       	eor	r24, r20
    1244:	8c 93       	st	X, r24
    1246:	13 c0       	rjmp	.+38     	; 0x126e <GPIO_voidTogPin+0xec>
				break ;             
			case GPIOD : 
				TOG_BIT(PORTD,copy_u8Pin);
    1248:	a2 e3       	ldi	r26, 0x32	; 50
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	e2 e3       	ldi	r30, 0x32	; 50
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	48 2f       	mov	r20, r24
    1254:	8a 81       	ldd	r24, Y+2	; 0x02
    1256:	28 2f       	mov	r18, r24
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	02 2e       	mov	r0, r18
    1260:	02 c0       	rjmp	.+4      	; 0x1266 <GPIO_voidTogPin+0xe4>
    1262:	88 0f       	add	r24, r24
    1264:	99 1f       	adc	r25, r25
    1266:	0a 94       	dec	r0
    1268:	e2 f7       	brpl	.-8      	; 0x1262 <GPIO_voidTogPin+0xe0>
    126a:	84 27       	eor	r24, r20
    126c:	8c 93       	st	X, r24
			default:
			break;
		}
		
		
	}
    126e:	0f 90       	pop	r0
    1270:	0f 90       	pop	r0
    1272:	0f 90       	pop	r0
    1274:	0f 90       	pop	r0
    1276:	cf 91       	pop	r28
    1278:	df 91       	pop	r29
    127a:	08 95       	ret

0000127c <GPIO_voidSetPortDDR>:
	void GPIO_voidSetPortDDR (u8  copy_u8Port , u8 copy_u8Mode )
	{
    127c:	df 93       	push	r29
    127e:	cf 93       	push	r28
    1280:	00 d0       	rcall	.+0      	; 0x1282 <GPIO_voidSetPortDDR+0x6>
    1282:	00 d0       	rcall	.+0      	; 0x1284 <GPIO_voidSetPortDDR+0x8>
    1284:	cd b7       	in	r28, 0x3d	; 61
    1286:	de b7       	in	r29, 0x3e	; 62
    1288:	89 83       	std	Y+1, r24	; 0x01
    128a:	6a 83       	std	Y+2, r22	; 0x02
		switch(copy_u8Port)
    128c:	89 81       	ldd	r24, Y+1	; 0x01
    128e:	28 2f       	mov	r18, r24
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	3c 83       	std	Y+4, r19	; 0x04
    1294:	2b 83       	std	Y+3, r18	; 0x03
    1296:	8b 81       	ldd	r24, Y+3	; 0x03
    1298:	9c 81       	ldd	r25, Y+4	; 0x04
    129a:	81 30       	cpi	r24, 0x01	; 1
    129c:	91 05       	cpc	r25, r1
    129e:	09 f1       	breq	.+66     	; 0x12e2 <GPIO_voidSetPortDDR+0x66>
    12a0:	2b 81       	ldd	r18, Y+3	; 0x03
    12a2:	3c 81       	ldd	r19, Y+4	; 0x04
    12a4:	22 30       	cpi	r18, 0x02	; 2
    12a6:	31 05       	cpc	r19, r1
    12a8:	2c f4       	brge	.+10     	; 0x12b4 <GPIO_voidSetPortDDR+0x38>
    12aa:	8b 81       	ldd	r24, Y+3	; 0x03
    12ac:	9c 81       	ldd	r25, Y+4	; 0x04
    12ae:	00 97       	sbiw	r24, 0x00	; 0
    12b0:	61 f0       	breq	.+24     	; 0x12ca <GPIO_voidSetPortDDR+0x4e>
    12b2:	3a c0       	rjmp	.+116    	; 0x1328 <GPIO_voidSetPortDDR+0xac>
    12b4:	2b 81       	ldd	r18, Y+3	; 0x03
    12b6:	3c 81       	ldd	r19, Y+4	; 0x04
    12b8:	22 30       	cpi	r18, 0x02	; 2
    12ba:	31 05       	cpc	r19, r1
    12bc:	f1 f0       	breq	.+60     	; 0x12fa <GPIO_voidSetPortDDR+0x7e>
    12be:	8b 81       	ldd	r24, Y+3	; 0x03
    12c0:	9c 81       	ldd	r25, Y+4	; 0x04
    12c2:	83 30       	cpi	r24, 0x03	; 3
    12c4:	91 05       	cpc	r25, r1
    12c6:	29 f1       	breq	.+74     	; 0x1312 <GPIO_voidSetPortDDR+0x96>
    12c8:	2f c0       	rjmp	.+94     	; 0x1328 <GPIO_voidSetPortDDR+0xac>
		{
			case GPIOA :
				if(copy_u8Mode ==OUTPUT )
    12ca:	8a 81       	ldd	r24, Y+2	; 0x02
    12cc:	81 30       	cpi	r24, 0x01	; 1
    12ce:	29 f4       	brne	.+10     	; 0x12da <GPIO_voidSetPortDDR+0x5e>
				{
					DDRA= 0xFF;
    12d0:	ea e3       	ldi	r30, 0x3A	; 58
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	8f ef       	ldi	r24, 0xFF	; 255
    12d6:	80 83       	st	Z, r24
    12d8:	27 c0       	rjmp	.+78     	; 0x1328 <GPIO_voidSetPortDDR+0xac>
				}
				else {
					DDRA = 0x00 ;
    12da:	ea e3       	ldi	r30, 0x3A	; 58
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	10 82       	st	Z, r1
    12e0:	23 c0       	rjmp	.+70     	; 0x1328 <GPIO_voidSetPortDDR+0xac>
				}
				break;
			case GPIOB :
				if(copy_u8Mode ==OUTPUT )
    12e2:	8a 81       	ldd	r24, Y+2	; 0x02
    12e4:	81 30       	cpi	r24, 0x01	; 1
    12e6:	29 f4       	brne	.+10     	; 0x12f2 <GPIO_voidSetPortDDR+0x76>
				{
					DDRB = 0xFF;
    12e8:	e7 e3       	ldi	r30, 0x37	; 55
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	8f ef       	ldi	r24, 0xFF	; 255
    12ee:	80 83       	st	Z, r24
    12f0:	1b c0       	rjmp	.+54     	; 0x1328 <GPIO_voidSetPortDDR+0xac>
				}
				else {
					DDRB = 0x00;
    12f2:	e7 e3       	ldi	r30, 0x37	; 55
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	10 82       	st	Z, r1
    12f8:	17 c0       	rjmp	.+46     	; 0x1328 <GPIO_voidSetPortDDR+0xac>
				}
				break;
			case GPIOC :
				if(copy_u8Mode ==OUTPUT )
    12fa:	8a 81       	ldd	r24, Y+2	; 0x02
    12fc:	81 30       	cpi	r24, 0x01	; 1
    12fe:	29 f4       	brne	.+10     	; 0x130a <GPIO_voidSetPortDDR+0x8e>
				{
					DDRC = 0xFF ;
    1300:	e4 e3       	ldi	r30, 0x34	; 52
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	8f ef       	ldi	r24, 0xFF	; 255
    1306:	80 83       	st	Z, r24
    1308:	0f c0       	rjmp	.+30     	; 0x1328 <GPIO_voidSetPortDDR+0xac>
				}
				else {
					DDRC = 0x00 ;
    130a:	e4 e3       	ldi	r30, 0x34	; 52
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	10 82       	st	Z, r1
    1310:	0b c0       	rjmp	.+22     	; 0x1328 <GPIO_voidSetPortDDR+0xac>
				}
				break;
			case GPIOD :
				if(copy_u8Mode ==OUTPUT )
    1312:	8a 81       	ldd	r24, Y+2	; 0x02
    1314:	81 30       	cpi	r24, 0x01	; 1
    1316:	29 f4       	brne	.+10     	; 0x1322 <GPIO_voidSetPortDDR+0xa6>
				{
					DDRD = 0xFF;
    1318:	e1 e3       	ldi	r30, 0x31	; 49
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	8f ef       	ldi	r24, 0xFF	; 255
    131e:	80 83       	st	Z, r24
    1320:	03 c0       	rjmp	.+6      	; 0x1328 <GPIO_voidSetPortDDR+0xac>
				}
				else {
					DDRD = 0x00;
    1322:	e1 e3       	ldi	r30, 0x31	; 49
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	10 82       	st	Z, r1
				}
				break;	
			default:
				break;
		}
	}
    1328:	0f 90       	pop	r0
    132a:	0f 90       	pop	r0
    132c:	0f 90       	pop	r0
    132e:	0f 90       	pop	r0
    1330:	cf 91       	pop	r28
    1332:	df 91       	pop	r29
    1334:	08 95       	ret

00001336 <GPIO_voidWritePort>:
	void	GPIO_voidWritePort (u8 copy_u8Port , u8 copy_u8Value)
	{
    1336:	df 93       	push	r29
    1338:	cf 93       	push	r28
    133a:	00 d0       	rcall	.+0      	; 0x133c <GPIO_voidWritePort+0x6>
    133c:	00 d0       	rcall	.+0      	; 0x133e <GPIO_voidWritePort+0x8>
    133e:	cd b7       	in	r28, 0x3d	; 61
    1340:	de b7       	in	r29, 0x3e	; 62
    1342:	89 83       	std	Y+1, r24	; 0x01
    1344:	6a 83       	std	Y+2, r22	; 0x02
			switch(copy_u8Port)
    1346:	89 81       	ldd	r24, Y+1	; 0x01
    1348:	28 2f       	mov	r18, r24
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	3c 83       	std	Y+4, r19	; 0x04
    134e:	2b 83       	std	Y+3, r18	; 0x03
    1350:	8b 81       	ldd	r24, Y+3	; 0x03
    1352:	9c 81       	ldd	r25, Y+4	; 0x04
    1354:	81 30       	cpi	r24, 0x01	; 1
    1356:	91 05       	cpc	r25, r1
    1358:	d1 f0       	breq	.+52     	; 0x138e <GPIO_voidWritePort+0x58>
    135a:	2b 81       	ldd	r18, Y+3	; 0x03
    135c:	3c 81       	ldd	r19, Y+4	; 0x04
    135e:	22 30       	cpi	r18, 0x02	; 2
    1360:	31 05       	cpc	r19, r1
    1362:	2c f4       	brge	.+10     	; 0x136e <GPIO_voidWritePort+0x38>
    1364:	8b 81       	ldd	r24, Y+3	; 0x03
    1366:	9c 81       	ldd	r25, Y+4	; 0x04
    1368:	00 97       	sbiw	r24, 0x00	; 0
    136a:	61 f0       	breq	.+24     	; 0x1384 <GPIO_voidWritePort+0x4e>
    136c:	1e c0       	rjmp	.+60     	; 0x13aa <GPIO_voidWritePort+0x74>
    136e:	2b 81       	ldd	r18, Y+3	; 0x03
    1370:	3c 81       	ldd	r19, Y+4	; 0x04
    1372:	22 30       	cpi	r18, 0x02	; 2
    1374:	31 05       	cpc	r19, r1
    1376:	81 f0       	breq	.+32     	; 0x1398 <GPIO_voidWritePort+0x62>
    1378:	8b 81       	ldd	r24, Y+3	; 0x03
    137a:	9c 81       	ldd	r25, Y+4	; 0x04
    137c:	83 30       	cpi	r24, 0x03	; 3
    137e:	91 05       	cpc	r25, r1
    1380:	81 f0       	breq	.+32     	; 0x13a2 <GPIO_voidWritePort+0x6c>
    1382:	13 c0       	rjmp	.+38     	; 0x13aa <GPIO_voidWritePort+0x74>
		{
			case GPIOA :
				PORTA = copy_u8Value ;
    1384:	eb e3       	ldi	r30, 0x3B	; 59
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	8a 81       	ldd	r24, Y+2	; 0x02
    138a:	80 83       	st	Z, r24
    138c:	0e c0       	rjmp	.+28     	; 0x13aa <GPIO_voidWritePort+0x74>
				break;
			case GPIOB :
				PORTB = copy_u8Value;
    138e:	e8 e3       	ldi	r30, 0x38	; 56
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	8a 81       	ldd	r24, Y+2	; 0x02
    1394:	80 83       	st	Z, r24
    1396:	09 c0       	rjmp	.+18     	; 0x13aa <GPIO_voidWritePort+0x74>
				break;
			case GPIOC :
				PORTC = copy_u8Value;
    1398:	e5 e3       	ldi	r30, 0x35	; 53
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	8a 81       	ldd	r24, Y+2	; 0x02
    139e:	80 83       	st	Z, r24
    13a0:	04 c0       	rjmp	.+8      	; 0x13aa <GPIO_voidWritePort+0x74>
				break;
			case GPIOD :
				PORTD = copy_u8Value;
    13a2:	e2 e3       	ldi	r30, 0x32	; 50
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	8a 81       	ldd	r24, Y+2	; 0x02
    13a8:	80 83       	st	Z, r24
				break;
		}
		
			
			
		}
    13aa:	0f 90       	pop	r0
    13ac:	0f 90       	pop	r0
    13ae:	0f 90       	pop	r0
    13b0:	0f 90       	pop	r0
    13b2:	cf 91       	pop	r28
    13b4:	df 91       	pop	r29
    13b6:	08 95       	ret

000013b8 <GPIO_voidSetLowNippleDDR>:
	void GPIO_voidSetLowNippleDDR(u8 copy_u8Port , u8 copy_u8Mode)
	{
    13b8:	df 93       	push	r29
    13ba:	cf 93       	push	r28
    13bc:	00 d0       	rcall	.+0      	; 0x13be <GPIO_voidSetLowNippleDDR+0x6>
    13be:	0f 92       	push	r0
    13c0:	cd b7       	in	r28, 0x3d	; 61
    13c2:	de b7       	in	r29, 0x3e	; 62
    13c4:	8a 83       	std	Y+2, r24	; 0x02
    13c6:	6b 83       	std	Y+3, r22	; 0x03
		u8 i ;
		for (i= 0 ; i<4 ; i++){
    13c8:	19 82       	std	Y+1, r1	; 0x01
    13ca:	08 c0       	rjmp	.+16     	; 0x13dc <GPIO_voidSetLowNippleDDR+0x24>
			GPIO_voidSetPinDDR(copy_u8Port , i ,copy_u8Mode );
    13cc:	8a 81       	ldd	r24, Y+2	; 0x02
    13ce:	69 81       	ldd	r22, Y+1	; 0x01
    13d0:	4b 81       	ldd	r20, Y+3	; 0x03
    13d2:	0e 94 50 06 	call	0xca0	; 0xca0 <GPIO_voidSetPinDDR>
			
		}
	void GPIO_voidSetLowNippleDDR(u8 copy_u8Port , u8 copy_u8Mode)
	{
		u8 i ;
		for (i= 0 ; i<4 ; i++){
    13d6:	89 81       	ldd	r24, Y+1	; 0x01
    13d8:	8f 5f       	subi	r24, 0xFF	; 255
    13da:	89 83       	std	Y+1, r24	; 0x01
    13dc:	89 81       	ldd	r24, Y+1	; 0x01
    13de:	84 30       	cpi	r24, 0x04	; 4
    13e0:	a8 f3       	brcs	.-22     	; 0x13cc <GPIO_voidSetLowNippleDDR+0x14>
			GPIO_voidSetPinDDR(copy_u8Port , i ,copy_u8Mode );
		}
	}
    13e2:	0f 90       	pop	r0
    13e4:	0f 90       	pop	r0
    13e6:	0f 90       	pop	r0
    13e8:	cf 91       	pop	r28
    13ea:	df 91       	pop	r29
    13ec:	08 95       	ret

000013ee <GPIO_voidSetHighNippleDDR>:
	void GPIO_voidSetHighNippleDDR(u8 copy_u8Port , u8 copy_u8Mode)
	{
    13ee:	df 93       	push	r29
    13f0:	cf 93       	push	r28
    13f2:	00 d0       	rcall	.+0      	; 0x13f4 <GPIO_voidSetHighNippleDDR+0x6>
    13f4:	0f 92       	push	r0
    13f6:	cd b7       	in	r28, 0x3d	; 61
    13f8:	de b7       	in	r29, 0x3e	; 62
    13fa:	8a 83       	std	Y+2, r24	; 0x02
    13fc:	6b 83       	std	Y+3, r22	; 0x03
		u8 i ;
		for (i= 4 ; i<8 ; i++){
    13fe:	84 e0       	ldi	r24, 0x04	; 4
    1400:	89 83       	std	Y+1, r24	; 0x01
    1402:	08 c0       	rjmp	.+16     	; 0x1414 <GPIO_voidSetHighNippleDDR+0x26>
			GPIO_voidSetPinDDR(copy_u8Port , i ,copy_u8Mode );
    1404:	8a 81       	ldd	r24, Y+2	; 0x02
    1406:	69 81       	ldd	r22, Y+1	; 0x01
    1408:	4b 81       	ldd	r20, Y+3	; 0x03
    140a:	0e 94 50 06 	call	0xca0	; 0xca0 <GPIO_voidSetPinDDR>
		}
	}
	void GPIO_voidSetHighNippleDDR(u8 copy_u8Port , u8 copy_u8Mode)
	{
		u8 i ;
		for (i= 4 ; i<8 ; i++){
    140e:	89 81       	ldd	r24, Y+1	; 0x01
    1410:	8f 5f       	subi	r24, 0xFF	; 255
    1412:	89 83       	std	Y+1, r24	; 0x01
    1414:	89 81       	ldd	r24, Y+1	; 0x01
    1416:	88 30       	cpi	r24, 0x08	; 8
    1418:	a8 f3       	brcs	.-22     	; 0x1404 <GPIO_voidSetHighNippleDDR+0x16>
			GPIO_voidSetPinDDR(copy_u8Port , i ,copy_u8Mode );
		}
	}
    141a:	0f 90       	pop	r0
    141c:	0f 90       	pop	r0
    141e:	0f 90       	pop	r0
    1420:	cf 91       	pop	r28
    1422:	df 91       	pop	r29
    1424:	08 95       	ret

00001426 <GPIO_voidWriteLowNipple>:
	void GPIO_voidWriteLowNipple (u8 copy_u8Port , u8 copy_u8Value )
	{
    1426:	df 93       	push	r29
    1428:	cf 93       	push	r28
    142a:	00 d0       	rcall	.+0      	; 0x142c <GPIO_voidWriteLowNipple+0x6>
    142c:	00 d0       	rcall	.+0      	; 0x142e <GPIO_voidWriteLowNipple+0x8>
    142e:	cd b7       	in	r28, 0x3d	; 61
    1430:	de b7       	in	r29, 0x3e	; 62
    1432:	89 83       	std	Y+1, r24	; 0x01
    1434:	6a 83       	std	Y+2, r22	; 0x02
		copy_u8Value &= 0x0F;
    1436:	8a 81       	ldd	r24, Y+2	; 0x02
    1438:	8f 70       	andi	r24, 0x0F	; 15
    143a:	8a 83       	std	Y+2, r24	; 0x02
		switch (copy_u8Port) {
    143c:	89 81       	ldd	r24, Y+1	; 0x01
    143e:	28 2f       	mov	r18, r24
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	3c 83       	std	Y+4, r19	; 0x04
    1444:	2b 83       	std	Y+3, r18	; 0x03
    1446:	8b 81       	ldd	r24, Y+3	; 0x03
    1448:	9c 81       	ldd	r25, Y+4	; 0x04
    144a:	81 30       	cpi	r24, 0x01	; 1
    144c:	91 05       	cpc	r25, r1
    144e:	29 f1       	breq	.+74     	; 0x149a <GPIO_voidWriteLowNipple+0x74>
    1450:	2b 81       	ldd	r18, Y+3	; 0x03
    1452:	3c 81       	ldd	r19, Y+4	; 0x04
    1454:	22 30       	cpi	r18, 0x02	; 2
    1456:	31 05       	cpc	r19, r1
    1458:	2c f4       	brge	.+10     	; 0x1464 <GPIO_voidWriteLowNipple+0x3e>
    145a:	8b 81       	ldd	r24, Y+3	; 0x03
    145c:	9c 81       	ldd	r25, Y+4	; 0x04
    145e:	00 97       	sbiw	r24, 0x00	; 0
    1460:	61 f0       	breq	.+24     	; 0x147a <GPIO_voidWriteLowNipple+0x54>
    1462:	4a c0       	rjmp	.+148    	; 0x14f8 <GPIO_voidWriteLowNipple+0xd2>
    1464:	2b 81       	ldd	r18, Y+3	; 0x03
    1466:	3c 81       	ldd	r19, Y+4	; 0x04
    1468:	22 30       	cpi	r18, 0x02	; 2
    146a:	31 05       	cpc	r19, r1
    146c:	31 f1       	breq	.+76     	; 0x14ba <GPIO_voidWriteLowNipple+0x94>
    146e:	8b 81       	ldd	r24, Y+3	; 0x03
    1470:	9c 81       	ldd	r25, Y+4	; 0x04
    1472:	83 30       	cpi	r24, 0x03	; 3
    1474:	91 05       	cpc	r25, r1
    1476:	89 f1       	breq	.+98     	; 0x14da <GPIO_voidWriteLowNipple+0xb4>
    1478:	3f c0       	rjmp	.+126    	; 0x14f8 <GPIO_voidWriteLowNipple+0xd2>
			case GPIOA :
				PORTA &= 0xF0 ; 
    147a:	ab e3       	ldi	r26, 0x3B	; 59
    147c:	b0 e0       	ldi	r27, 0x00	; 0
    147e:	eb e3       	ldi	r30, 0x3B	; 59
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	80 81       	ld	r24, Z
    1484:	80 7f       	andi	r24, 0xF0	; 240
    1486:	8c 93       	st	X, r24
				PORTA |= copy_u8Value ;
    1488:	ab e3       	ldi	r26, 0x3B	; 59
    148a:	b0 e0       	ldi	r27, 0x00	; 0
    148c:	eb e3       	ldi	r30, 0x3B	; 59
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	90 81       	ld	r25, Z
    1492:	8a 81       	ldd	r24, Y+2	; 0x02
    1494:	89 2b       	or	r24, r25
    1496:	8c 93       	st	X, r24
    1498:	2f c0       	rjmp	.+94     	; 0x14f8 <GPIO_voidWriteLowNipple+0xd2>
				break;
			case GPIOB :
				PORTB &= 0xF0 ; 
    149a:	a8 e3       	ldi	r26, 0x38	; 56
    149c:	b0 e0       	ldi	r27, 0x00	; 0
    149e:	e8 e3       	ldi	r30, 0x38	; 56
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	80 81       	ld	r24, Z
    14a4:	80 7f       	andi	r24, 0xF0	; 240
    14a6:	8c 93       	st	X, r24
				PORTB |= copy_u8Value ;
    14a8:	a8 e3       	ldi	r26, 0x38	; 56
    14aa:	b0 e0       	ldi	r27, 0x00	; 0
    14ac:	e8 e3       	ldi	r30, 0x38	; 56
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	90 81       	ld	r25, Z
    14b2:	8a 81       	ldd	r24, Y+2	; 0x02
    14b4:	89 2b       	or	r24, r25
    14b6:	8c 93       	st	X, r24
    14b8:	1f c0       	rjmp	.+62     	; 0x14f8 <GPIO_voidWriteLowNipple+0xd2>
				break;
			case GPIOC :
				PORTC &= 0xF0 ; 
    14ba:	a5 e3       	ldi	r26, 0x35	; 53
    14bc:	b0 e0       	ldi	r27, 0x00	; 0
    14be:	e5 e3       	ldi	r30, 0x35	; 53
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	80 81       	ld	r24, Z
    14c4:	80 7f       	andi	r24, 0xF0	; 240
    14c6:	8c 93       	st	X, r24
				PORTC |= copy_u8Value ;
    14c8:	a5 e3       	ldi	r26, 0x35	; 53
    14ca:	b0 e0       	ldi	r27, 0x00	; 0
    14cc:	e5 e3       	ldi	r30, 0x35	; 53
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	90 81       	ld	r25, Z
    14d2:	8a 81       	ldd	r24, Y+2	; 0x02
    14d4:	89 2b       	or	r24, r25
    14d6:	8c 93       	st	X, r24
    14d8:	0f c0       	rjmp	.+30     	; 0x14f8 <GPIO_voidWriteLowNipple+0xd2>
				break;
			case GPIOD :
				PORTD &= 0xF0 ; 
    14da:	a2 e3       	ldi	r26, 0x32	; 50
    14dc:	b0 e0       	ldi	r27, 0x00	; 0
    14de:	e2 e3       	ldi	r30, 0x32	; 50
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	80 81       	ld	r24, Z
    14e4:	80 7f       	andi	r24, 0xF0	; 240
    14e6:	8c 93       	st	X, r24
				PORTD |= copy_u8Value ;
    14e8:	a2 e3       	ldi	r26, 0x32	; 50
    14ea:	b0 e0       	ldi	r27, 0x00	; 0
    14ec:	e2 e3       	ldi	r30, 0x32	; 50
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	90 81       	ld	r25, Z
    14f2:	8a 81       	ldd	r24, Y+2	; 0x02
    14f4:	89 2b       	or	r24, r25
    14f6:	8c 93       	st	X, r24
				break;	
		}
	}
    14f8:	0f 90       	pop	r0
    14fa:	0f 90       	pop	r0
    14fc:	0f 90       	pop	r0
    14fe:	0f 90       	pop	r0
    1500:	cf 91       	pop	r28
    1502:	df 91       	pop	r29
    1504:	08 95       	ret

00001506 <GPIO_voidWriteHighNipple>:
	void GPIO_voidWriteHighNipple (u8 copy_u8Port , u8 copy_u8Value )
	{
    1506:	df 93       	push	r29
    1508:	cf 93       	push	r28
    150a:	00 d0       	rcall	.+0      	; 0x150c <GPIO_voidWriteHighNipple+0x6>
    150c:	00 d0       	rcall	.+0      	; 0x150e <GPIO_voidWriteHighNipple+0x8>
    150e:	cd b7       	in	r28, 0x3d	; 61
    1510:	de b7       	in	r29, 0x3e	; 62
    1512:	89 83       	std	Y+1, r24	; 0x01
    1514:	6a 83       	std	Y+2, r22	; 0x02
		copy_u8Value &= 0xF0;
    1516:	8a 81       	ldd	r24, Y+2	; 0x02
    1518:	80 7f       	andi	r24, 0xF0	; 240
    151a:	8a 83       	std	Y+2, r24	; 0x02
		switch (copy_u8Port) {
    151c:	89 81       	ldd	r24, Y+1	; 0x01
    151e:	28 2f       	mov	r18, r24
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	3c 83       	std	Y+4, r19	; 0x04
    1524:	2b 83       	std	Y+3, r18	; 0x03
    1526:	8b 81       	ldd	r24, Y+3	; 0x03
    1528:	9c 81       	ldd	r25, Y+4	; 0x04
    152a:	81 30       	cpi	r24, 0x01	; 1
    152c:	91 05       	cpc	r25, r1
    152e:	29 f1       	breq	.+74     	; 0x157a <GPIO_voidWriteHighNipple+0x74>
    1530:	2b 81       	ldd	r18, Y+3	; 0x03
    1532:	3c 81       	ldd	r19, Y+4	; 0x04
    1534:	22 30       	cpi	r18, 0x02	; 2
    1536:	31 05       	cpc	r19, r1
    1538:	2c f4       	brge	.+10     	; 0x1544 <GPIO_voidWriteHighNipple+0x3e>
    153a:	8b 81       	ldd	r24, Y+3	; 0x03
    153c:	9c 81       	ldd	r25, Y+4	; 0x04
    153e:	00 97       	sbiw	r24, 0x00	; 0
    1540:	61 f0       	breq	.+24     	; 0x155a <GPIO_voidWriteHighNipple+0x54>
    1542:	4a c0       	rjmp	.+148    	; 0x15d8 <GPIO_voidWriteHighNipple+0xd2>
    1544:	2b 81       	ldd	r18, Y+3	; 0x03
    1546:	3c 81       	ldd	r19, Y+4	; 0x04
    1548:	22 30       	cpi	r18, 0x02	; 2
    154a:	31 05       	cpc	r19, r1
    154c:	31 f1       	breq	.+76     	; 0x159a <GPIO_voidWriteHighNipple+0x94>
    154e:	8b 81       	ldd	r24, Y+3	; 0x03
    1550:	9c 81       	ldd	r25, Y+4	; 0x04
    1552:	83 30       	cpi	r24, 0x03	; 3
    1554:	91 05       	cpc	r25, r1
    1556:	89 f1       	breq	.+98     	; 0x15ba <GPIO_voidWriteHighNipple+0xb4>
    1558:	3f c0       	rjmp	.+126    	; 0x15d8 <GPIO_voidWriteHighNipple+0xd2>
			case GPIOA :
				PORTA &= 0x0F ; 
    155a:	ab e3       	ldi	r26, 0x3B	; 59
    155c:	b0 e0       	ldi	r27, 0x00	; 0
    155e:	eb e3       	ldi	r30, 0x3B	; 59
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	80 81       	ld	r24, Z
    1564:	8f 70       	andi	r24, 0x0F	; 15
    1566:	8c 93       	st	X, r24
				PORTA |= copy_u8Value ;
    1568:	ab e3       	ldi	r26, 0x3B	; 59
    156a:	b0 e0       	ldi	r27, 0x00	; 0
    156c:	eb e3       	ldi	r30, 0x3B	; 59
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	90 81       	ld	r25, Z
    1572:	8a 81       	ldd	r24, Y+2	; 0x02
    1574:	89 2b       	or	r24, r25
    1576:	8c 93       	st	X, r24
    1578:	2f c0       	rjmp	.+94     	; 0x15d8 <GPIO_voidWriteHighNipple+0xd2>
				break;
			case GPIOB :
				PORTB &= 0x0F ; 
    157a:	a8 e3       	ldi	r26, 0x38	; 56
    157c:	b0 e0       	ldi	r27, 0x00	; 0
    157e:	e8 e3       	ldi	r30, 0x38	; 56
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	80 81       	ld	r24, Z
    1584:	8f 70       	andi	r24, 0x0F	; 15
    1586:	8c 93       	st	X, r24
				PORTB |= copy_u8Value ;
    1588:	a8 e3       	ldi	r26, 0x38	; 56
    158a:	b0 e0       	ldi	r27, 0x00	; 0
    158c:	e8 e3       	ldi	r30, 0x38	; 56
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	90 81       	ld	r25, Z
    1592:	8a 81       	ldd	r24, Y+2	; 0x02
    1594:	89 2b       	or	r24, r25
    1596:	8c 93       	st	X, r24
    1598:	1f c0       	rjmp	.+62     	; 0x15d8 <GPIO_voidWriteHighNipple+0xd2>
				break;
			case GPIOC :
				PORTC &= 0x0F ; 
    159a:	a5 e3       	ldi	r26, 0x35	; 53
    159c:	b0 e0       	ldi	r27, 0x00	; 0
    159e:	e5 e3       	ldi	r30, 0x35	; 53
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	80 81       	ld	r24, Z
    15a4:	8f 70       	andi	r24, 0x0F	; 15
    15a6:	8c 93       	st	X, r24
				PORTC |= copy_u8Value ;
    15a8:	a5 e3       	ldi	r26, 0x35	; 53
    15aa:	b0 e0       	ldi	r27, 0x00	; 0
    15ac:	e5 e3       	ldi	r30, 0x35	; 53
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	90 81       	ld	r25, Z
    15b2:	8a 81       	ldd	r24, Y+2	; 0x02
    15b4:	89 2b       	or	r24, r25
    15b6:	8c 93       	st	X, r24
    15b8:	0f c0       	rjmp	.+30     	; 0x15d8 <GPIO_voidWriteHighNipple+0xd2>
				break;
			case GPIOD :
				PORTD &= 0x0F ; 
    15ba:	a2 e3       	ldi	r26, 0x32	; 50
    15bc:	b0 e0       	ldi	r27, 0x00	; 0
    15be:	e2 e3       	ldi	r30, 0x32	; 50
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	80 81       	ld	r24, Z
    15c4:	8f 70       	andi	r24, 0x0F	; 15
    15c6:	8c 93       	st	X, r24
				PORTD |= copy_u8Value ;
    15c8:	a2 e3       	ldi	r26, 0x32	; 50
    15ca:	b0 e0       	ldi	r27, 0x00	; 0
    15cc:	e2 e3       	ldi	r30, 0x32	; 50
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	90 81       	ld	r25, Z
    15d2:	8a 81       	ldd	r24, Y+2	; 0x02
    15d4:	89 2b       	or	r24, r25
    15d6:	8c 93       	st	X, r24
				break;	
		}
	}
    15d8:	0f 90       	pop	r0
    15da:	0f 90       	pop	r0
    15dc:	0f 90       	pop	r0
    15de:	0f 90       	pop	r0
    15e0:	cf 91       	pop	r28
    15e2:	df 91       	pop	r29
    15e4:	08 95       	ret

000015e6 <LCD_voidInit>:
#include "util/delay.h"



void LCD_voidInit()
{
    15e6:	0f 93       	push	r16
    15e8:	1f 93       	push	r17
    15ea:	df 93       	push	r29
    15ec:	cf 93       	push	r28
    15ee:	cd b7       	in	r28, 0x3d	; 61
    15f0:	de b7       	in	r29, 0x3e	; 62
    15f2:	c4 55       	subi	r28, 0x54	; 84
    15f4:	d0 40       	sbci	r29, 0x00	; 0
    15f6:	0f b6       	in	r0, 0x3f	; 63
    15f8:	f8 94       	cli
    15fa:	de bf       	out	0x3e, r29	; 62
    15fc:	0f be       	out	0x3f, r0	; 63
    15fe:	cd bf       	out	0x3d, r28	; 61
    1600:	fe 01       	movw	r30, r28
    1602:	ef 5a       	subi	r30, 0xAF	; 175
    1604:	ff 4f       	sbci	r31, 0xFF	; 255
    1606:	80 e0       	ldi	r24, 0x00	; 0
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	a0 e2       	ldi	r26, 0x20	; 32
    160c:	b2 e4       	ldi	r27, 0x42	; 66
    160e:	80 83       	st	Z, r24
    1610:	91 83       	std	Z+1, r25	; 0x01
    1612:	a2 83       	std	Z+2, r26	; 0x02
    1614:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1616:	8e 01       	movw	r16, r28
    1618:	03 5b       	subi	r16, 0xB3	; 179
    161a:	1f 4f       	sbci	r17, 0xFF	; 255
    161c:	fe 01       	movw	r30, r28
    161e:	ef 5a       	subi	r30, 0xAF	; 175
    1620:	ff 4f       	sbci	r31, 0xFF	; 255
    1622:	60 81       	ld	r22, Z
    1624:	71 81       	ldd	r23, Z+1	; 0x01
    1626:	82 81       	ldd	r24, Z+2	; 0x02
    1628:	93 81       	ldd	r25, Z+3	; 0x03
    162a:	20 e0       	ldi	r18, 0x00	; 0
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	4a ef       	ldi	r20, 0xFA	; 250
    1630:	54 e4       	ldi	r21, 0x44	; 68
    1632:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1636:	dc 01       	movw	r26, r24
    1638:	cb 01       	movw	r24, r22
    163a:	f8 01       	movw	r30, r16
    163c:	80 83       	st	Z, r24
    163e:	91 83       	std	Z+1, r25	; 0x01
    1640:	a2 83       	std	Z+2, r26	; 0x02
    1642:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1644:	fe 01       	movw	r30, r28
    1646:	e3 5b       	subi	r30, 0xB3	; 179
    1648:	ff 4f       	sbci	r31, 0xFF	; 255
    164a:	60 81       	ld	r22, Z
    164c:	71 81       	ldd	r23, Z+1	; 0x01
    164e:	82 81       	ldd	r24, Z+2	; 0x02
    1650:	93 81       	ldd	r25, Z+3	; 0x03
    1652:	20 e0       	ldi	r18, 0x00	; 0
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	40 e8       	ldi	r20, 0x80	; 128
    1658:	5f e3       	ldi	r21, 0x3F	; 63
    165a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    165e:	88 23       	and	r24, r24
    1660:	44 f4       	brge	.+16     	; 0x1672 <LCD_voidInit+0x8c>
		__ticks = 1;
    1662:	fe 01       	movw	r30, r28
    1664:	e5 5b       	subi	r30, 0xB5	; 181
    1666:	ff 4f       	sbci	r31, 0xFF	; 255
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	91 83       	std	Z+1, r25	; 0x01
    166e:	80 83       	st	Z, r24
    1670:	64 c0       	rjmp	.+200    	; 0x173a <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    1672:	fe 01       	movw	r30, r28
    1674:	e3 5b       	subi	r30, 0xB3	; 179
    1676:	ff 4f       	sbci	r31, 0xFF	; 255
    1678:	60 81       	ld	r22, Z
    167a:	71 81       	ldd	r23, Z+1	; 0x01
    167c:	82 81       	ldd	r24, Z+2	; 0x02
    167e:	93 81       	ldd	r25, Z+3	; 0x03
    1680:	20 e0       	ldi	r18, 0x00	; 0
    1682:	3f ef       	ldi	r19, 0xFF	; 255
    1684:	4f e7       	ldi	r20, 0x7F	; 127
    1686:	57 e4       	ldi	r21, 0x47	; 71
    1688:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    168c:	18 16       	cp	r1, r24
    168e:	0c f0       	brlt	.+2      	; 0x1692 <LCD_voidInit+0xac>
    1690:	43 c0       	rjmp	.+134    	; 0x1718 <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1692:	fe 01       	movw	r30, r28
    1694:	ef 5a       	subi	r30, 0xAF	; 175
    1696:	ff 4f       	sbci	r31, 0xFF	; 255
    1698:	60 81       	ld	r22, Z
    169a:	71 81       	ldd	r23, Z+1	; 0x01
    169c:	82 81       	ldd	r24, Z+2	; 0x02
    169e:	93 81       	ldd	r25, Z+3	; 0x03
    16a0:	20 e0       	ldi	r18, 0x00	; 0
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	40 e2       	ldi	r20, 0x20	; 32
    16a6:	51 e4       	ldi	r21, 0x41	; 65
    16a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ac:	dc 01       	movw	r26, r24
    16ae:	cb 01       	movw	r24, r22
    16b0:	8e 01       	movw	r16, r28
    16b2:	05 5b       	subi	r16, 0xB5	; 181
    16b4:	1f 4f       	sbci	r17, 0xFF	; 255
    16b6:	bc 01       	movw	r22, r24
    16b8:	cd 01       	movw	r24, r26
    16ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16be:	dc 01       	movw	r26, r24
    16c0:	cb 01       	movw	r24, r22
    16c2:	f8 01       	movw	r30, r16
    16c4:	91 83       	std	Z+1, r25	; 0x01
    16c6:	80 83       	st	Z, r24
    16c8:	1f c0       	rjmp	.+62     	; 0x1708 <LCD_voidInit+0x122>
    16ca:	fe 01       	movw	r30, r28
    16cc:	e7 5b       	subi	r30, 0xB7	; 183
    16ce:	ff 4f       	sbci	r31, 0xFF	; 255
    16d0:	88 ec       	ldi	r24, 0xC8	; 200
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	91 83       	std	Z+1, r25	; 0x01
    16d6:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16d8:	fe 01       	movw	r30, r28
    16da:	e7 5b       	subi	r30, 0xB7	; 183
    16dc:	ff 4f       	sbci	r31, 0xFF	; 255
    16de:	80 81       	ld	r24, Z
    16e0:	91 81       	ldd	r25, Z+1	; 0x01
    16e2:	01 97       	sbiw	r24, 0x01	; 1
    16e4:	f1 f7       	brne	.-4      	; 0x16e2 <LCD_voidInit+0xfc>
    16e6:	fe 01       	movw	r30, r28
    16e8:	e7 5b       	subi	r30, 0xB7	; 183
    16ea:	ff 4f       	sbci	r31, 0xFF	; 255
    16ec:	91 83       	std	Z+1, r25	; 0x01
    16ee:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16f0:	de 01       	movw	r26, r28
    16f2:	a5 5b       	subi	r26, 0xB5	; 181
    16f4:	bf 4f       	sbci	r27, 0xFF	; 255
    16f6:	fe 01       	movw	r30, r28
    16f8:	e5 5b       	subi	r30, 0xB5	; 181
    16fa:	ff 4f       	sbci	r31, 0xFF	; 255
    16fc:	80 81       	ld	r24, Z
    16fe:	91 81       	ldd	r25, Z+1	; 0x01
    1700:	01 97       	sbiw	r24, 0x01	; 1
    1702:	11 96       	adiw	r26, 0x01	; 1
    1704:	9c 93       	st	X, r25
    1706:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1708:	fe 01       	movw	r30, r28
    170a:	e5 5b       	subi	r30, 0xB5	; 181
    170c:	ff 4f       	sbci	r31, 0xFF	; 255
    170e:	80 81       	ld	r24, Z
    1710:	91 81       	ldd	r25, Z+1	; 0x01
    1712:	00 97       	sbiw	r24, 0x00	; 0
    1714:	d1 f6       	brne	.-76     	; 0x16ca <LCD_voidInit+0xe4>
    1716:	27 c0       	rjmp	.+78     	; 0x1766 <LCD_voidInit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1718:	8e 01       	movw	r16, r28
    171a:	05 5b       	subi	r16, 0xB5	; 181
    171c:	1f 4f       	sbci	r17, 0xFF	; 255
    171e:	fe 01       	movw	r30, r28
    1720:	e3 5b       	subi	r30, 0xB3	; 179
    1722:	ff 4f       	sbci	r31, 0xFF	; 255
    1724:	60 81       	ld	r22, Z
    1726:	71 81       	ldd	r23, Z+1	; 0x01
    1728:	82 81       	ldd	r24, Z+2	; 0x02
    172a:	93 81       	ldd	r25, Z+3	; 0x03
    172c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1730:	dc 01       	movw	r26, r24
    1732:	cb 01       	movw	r24, r22
    1734:	f8 01       	movw	r30, r16
    1736:	91 83       	std	Z+1, r25	; 0x01
    1738:	80 83       	st	Z, r24
    173a:	de 01       	movw	r26, r28
    173c:	a9 5b       	subi	r26, 0xB9	; 185
    173e:	bf 4f       	sbci	r27, 0xFF	; 255
    1740:	fe 01       	movw	r30, r28
    1742:	e5 5b       	subi	r30, 0xB5	; 181
    1744:	ff 4f       	sbci	r31, 0xFF	; 255
    1746:	80 81       	ld	r24, Z
    1748:	91 81       	ldd	r25, Z+1	; 0x01
    174a:	8d 93       	st	X+, r24
    174c:	9c 93       	st	X, r25
    174e:	fe 01       	movw	r30, r28
    1750:	e9 5b       	subi	r30, 0xB9	; 185
    1752:	ff 4f       	sbci	r31, 0xFF	; 255
    1754:	80 81       	ld	r24, Z
    1756:	91 81       	ldd	r25, Z+1	; 0x01
    1758:	01 97       	sbiw	r24, 0x01	; 1
    175a:	f1 f7       	brne	.-4      	; 0x1758 <LCD_voidInit+0x172>
    175c:	fe 01       	movw	r30, r28
    175e:	e9 5b       	subi	r30, 0xB9	; 185
    1760:	ff 4f       	sbci	r31, 0xFF	; 255
    1762:	91 83       	std	Z+1, r25	; 0x01
    1764:	80 83       	st	Z, r24
	_delay_ms(40);
	
	GPIO_voidSetPinDDR(LCD_RSPORT , LCD_RSPIN , OUTPUT);
    1766:	82 e0       	ldi	r24, 0x02	; 2
    1768:	60 e0       	ldi	r22, 0x00	; 0
    176a:	41 e0       	ldi	r20, 0x01	; 1
    176c:	0e 94 50 06 	call	0xca0	; 0xca0 <GPIO_voidSetPinDDR>
	GPIO_voidSetPinDDR(LCD_RWPORT , LCD_RWPIN , OUTPUT);
    1770:	82 e0       	ldi	r24, 0x02	; 2
    1772:	61 e0       	ldi	r22, 0x01	; 1
    1774:	41 e0       	ldi	r20, 0x01	; 1
    1776:	0e 94 50 06 	call	0xca0	; 0xca0 <GPIO_voidSetPinDDR>
	GPIO_voidSetPinDDR(LCD_ENPORT , LCD_ENPIN , OUTPUT);
    177a:	82 e0       	ldi	r24, 0x02	; 2
    177c:	62 e0       	ldi	r22, 0x02	; 2
    177e:	41 e0       	ldi	r20, 0x01	; 1
    1780:	0e 94 50 06 	call	0xca0	; 0xca0 <GPIO_voidSetPinDDR>
		LCD_voidSendCmd(LCD_ENTRY_MODE);
		_delay_ms(1);
		
	#elif LCD_MODE == 1 
		#if LCD_NIBBLE == 0 
			GPIO_voidSetLowNippleDDR(LCD_PORT , OUTPUT);
    1784:	80 e0       	ldi	r24, 0x00	; 0
    1786:	61 e0       	ldi	r22, 0x01	; 1
    1788:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <GPIO_voidSetLowNippleDDR>
			LCD_voidSendCmd(LCD_RETURN_HOME);
    178c:	82 e0       	ldi	r24, 0x02	; 2
    178e:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <LCD_voidSendCmd>
    1792:	fe 01       	movw	r30, r28
    1794:	ed 5b       	subi	r30, 0xBD	; 189
    1796:	ff 4f       	sbci	r31, 0xFF	; 255
    1798:	80 e0       	ldi	r24, 0x00	; 0
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	a0 e7       	ldi	r26, 0x70	; 112
    179e:	b1 e4       	ldi	r27, 0x41	; 65
    17a0:	80 83       	st	Z, r24
    17a2:	91 83       	std	Z+1, r25	; 0x01
    17a4:	a2 83       	std	Z+2, r26	; 0x02
    17a6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17a8:	8e 01       	movw	r16, r28
    17aa:	01 5c       	subi	r16, 0xC1	; 193
    17ac:	1f 4f       	sbci	r17, 0xFF	; 255
    17ae:	fe 01       	movw	r30, r28
    17b0:	ed 5b       	subi	r30, 0xBD	; 189
    17b2:	ff 4f       	sbci	r31, 0xFF	; 255
    17b4:	60 81       	ld	r22, Z
    17b6:	71 81       	ldd	r23, Z+1	; 0x01
    17b8:	82 81       	ldd	r24, Z+2	; 0x02
    17ba:	93 81       	ldd	r25, Z+3	; 0x03
    17bc:	20 e0       	ldi	r18, 0x00	; 0
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	4a ef       	ldi	r20, 0xFA	; 250
    17c2:	54 e4       	ldi	r21, 0x44	; 68
    17c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17c8:	dc 01       	movw	r26, r24
    17ca:	cb 01       	movw	r24, r22
    17cc:	f8 01       	movw	r30, r16
    17ce:	80 83       	st	Z, r24
    17d0:	91 83       	std	Z+1, r25	; 0x01
    17d2:	a2 83       	std	Z+2, r26	; 0x02
    17d4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    17d6:	fe 01       	movw	r30, r28
    17d8:	ff 96       	adiw	r30, 0x3f	; 63
    17da:	60 81       	ld	r22, Z
    17dc:	71 81       	ldd	r23, Z+1	; 0x01
    17de:	82 81       	ldd	r24, Z+2	; 0x02
    17e0:	93 81       	ldd	r25, Z+3	; 0x03
    17e2:	20 e0       	ldi	r18, 0x00	; 0
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	40 e8       	ldi	r20, 0x80	; 128
    17e8:	5f e3       	ldi	r21, 0x3F	; 63
    17ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17ee:	88 23       	and	r24, r24
    17f0:	2c f4       	brge	.+10     	; 0x17fc <LCD_voidInit+0x216>
		__ticks = 1;
    17f2:	81 e0       	ldi	r24, 0x01	; 1
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	9e af       	std	Y+62, r25	; 0x3e
    17f8:	8d af       	std	Y+61, r24	; 0x3d
    17fa:	46 c0       	rjmp	.+140    	; 0x1888 <LCD_voidInit+0x2a2>
	else if (__tmp > 65535)
    17fc:	fe 01       	movw	r30, r28
    17fe:	ff 96       	adiw	r30, 0x3f	; 63
    1800:	60 81       	ld	r22, Z
    1802:	71 81       	ldd	r23, Z+1	; 0x01
    1804:	82 81       	ldd	r24, Z+2	; 0x02
    1806:	93 81       	ldd	r25, Z+3	; 0x03
    1808:	20 e0       	ldi	r18, 0x00	; 0
    180a:	3f ef       	ldi	r19, 0xFF	; 255
    180c:	4f e7       	ldi	r20, 0x7F	; 127
    180e:	57 e4       	ldi	r21, 0x47	; 71
    1810:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1814:	18 16       	cp	r1, r24
    1816:	64 f5       	brge	.+88     	; 0x1870 <LCD_voidInit+0x28a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1818:	fe 01       	movw	r30, r28
    181a:	ed 5b       	subi	r30, 0xBD	; 189
    181c:	ff 4f       	sbci	r31, 0xFF	; 255
    181e:	60 81       	ld	r22, Z
    1820:	71 81       	ldd	r23, Z+1	; 0x01
    1822:	82 81       	ldd	r24, Z+2	; 0x02
    1824:	93 81       	ldd	r25, Z+3	; 0x03
    1826:	20 e0       	ldi	r18, 0x00	; 0
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	40 e2       	ldi	r20, 0x20	; 32
    182c:	51 e4       	ldi	r21, 0x41	; 65
    182e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1832:	dc 01       	movw	r26, r24
    1834:	cb 01       	movw	r24, r22
    1836:	bc 01       	movw	r22, r24
    1838:	cd 01       	movw	r24, r26
    183a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    183e:	dc 01       	movw	r26, r24
    1840:	cb 01       	movw	r24, r22
    1842:	9e af       	std	Y+62, r25	; 0x3e
    1844:	8d af       	std	Y+61, r24	; 0x3d
    1846:	0f c0       	rjmp	.+30     	; 0x1866 <LCD_voidInit+0x280>
    1848:	88 ec       	ldi	r24, 0xC8	; 200
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	9c af       	std	Y+60, r25	; 0x3c
    184e:	8b af       	std	Y+59, r24	; 0x3b
    1850:	8b ad       	ldd	r24, Y+59	; 0x3b
    1852:	9c ad       	ldd	r25, Y+60	; 0x3c
    1854:	01 97       	sbiw	r24, 0x01	; 1
    1856:	f1 f7       	brne	.-4      	; 0x1854 <LCD_voidInit+0x26e>
    1858:	9c af       	std	Y+60, r25	; 0x3c
    185a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    185c:	8d ad       	ldd	r24, Y+61	; 0x3d
    185e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1860:	01 97       	sbiw	r24, 0x01	; 1
    1862:	9e af       	std	Y+62, r25	; 0x3e
    1864:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1866:	8d ad       	ldd	r24, Y+61	; 0x3d
    1868:	9e ad       	ldd	r25, Y+62	; 0x3e
    186a:	00 97       	sbiw	r24, 0x00	; 0
    186c:	69 f7       	brne	.-38     	; 0x1848 <LCD_voidInit+0x262>
    186e:	16 c0       	rjmp	.+44     	; 0x189c <LCD_voidInit+0x2b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1870:	fe 01       	movw	r30, r28
    1872:	ff 96       	adiw	r30, 0x3f	; 63
    1874:	60 81       	ld	r22, Z
    1876:	71 81       	ldd	r23, Z+1	; 0x01
    1878:	82 81       	ldd	r24, Z+2	; 0x02
    187a:	93 81       	ldd	r25, Z+3	; 0x03
    187c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1880:	dc 01       	movw	r26, r24
    1882:	cb 01       	movw	r24, r22
    1884:	9e af       	std	Y+62, r25	; 0x3e
    1886:	8d af       	std	Y+61, r24	; 0x3d
    1888:	8d ad       	ldd	r24, Y+61	; 0x3d
    188a:	9e ad       	ldd	r25, Y+62	; 0x3e
    188c:	9a af       	std	Y+58, r25	; 0x3a
    188e:	89 af       	std	Y+57, r24	; 0x39
    1890:	89 ad       	ldd	r24, Y+57	; 0x39
    1892:	9a ad       	ldd	r25, Y+58	; 0x3a
    1894:	01 97       	sbiw	r24, 0x01	; 1
    1896:	f1 f7       	brne	.-4      	; 0x1894 <LCD_voidInit+0x2ae>
    1898:	9a af       	std	Y+58, r25	; 0x3a
    189a:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(15);
			LCD_voidSendCmd(LCD_Function_4BIT_2Lines);
    189c:	88 e2       	ldi	r24, 0x28	; 40
    189e:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <LCD_voidSendCmd>
    18a2:	80 e0       	ldi	r24, 0x00	; 0
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	a0 e8       	ldi	r26, 0x80	; 128
    18a8:	bf e3       	ldi	r27, 0x3F	; 63
    18aa:	8d ab       	std	Y+53, r24	; 0x35
    18ac:	9e ab       	std	Y+54, r25	; 0x36
    18ae:	af ab       	std	Y+55, r26	; 0x37
    18b0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18b2:	6d a9       	ldd	r22, Y+53	; 0x35
    18b4:	7e a9       	ldd	r23, Y+54	; 0x36
    18b6:	8f a9       	ldd	r24, Y+55	; 0x37
    18b8:	98 ad       	ldd	r25, Y+56	; 0x38
    18ba:	20 e0       	ldi	r18, 0x00	; 0
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	4a ef       	ldi	r20, 0xFA	; 250
    18c0:	54 e4       	ldi	r21, 0x44	; 68
    18c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18c6:	dc 01       	movw	r26, r24
    18c8:	cb 01       	movw	r24, r22
    18ca:	89 ab       	std	Y+49, r24	; 0x31
    18cc:	9a ab       	std	Y+50, r25	; 0x32
    18ce:	ab ab       	std	Y+51, r26	; 0x33
    18d0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    18d2:	69 a9       	ldd	r22, Y+49	; 0x31
    18d4:	7a a9       	ldd	r23, Y+50	; 0x32
    18d6:	8b a9       	ldd	r24, Y+51	; 0x33
    18d8:	9c a9       	ldd	r25, Y+52	; 0x34
    18da:	20 e0       	ldi	r18, 0x00	; 0
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	40 e8       	ldi	r20, 0x80	; 128
    18e0:	5f e3       	ldi	r21, 0x3F	; 63
    18e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18e6:	88 23       	and	r24, r24
    18e8:	2c f4       	brge	.+10     	; 0x18f4 <LCD_voidInit+0x30e>
		__ticks = 1;
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	98 ab       	std	Y+48, r25	; 0x30
    18f0:	8f a7       	std	Y+47, r24	; 0x2f
    18f2:	3f c0       	rjmp	.+126    	; 0x1972 <LCD_voidInit+0x38c>
	else if (__tmp > 65535)
    18f4:	69 a9       	ldd	r22, Y+49	; 0x31
    18f6:	7a a9       	ldd	r23, Y+50	; 0x32
    18f8:	8b a9       	ldd	r24, Y+51	; 0x33
    18fa:	9c a9       	ldd	r25, Y+52	; 0x34
    18fc:	20 e0       	ldi	r18, 0x00	; 0
    18fe:	3f ef       	ldi	r19, 0xFF	; 255
    1900:	4f e7       	ldi	r20, 0x7F	; 127
    1902:	57 e4       	ldi	r21, 0x47	; 71
    1904:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1908:	18 16       	cp	r1, r24
    190a:	4c f5       	brge	.+82     	; 0x195e <LCD_voidInit+0x378>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    190c:	6d a9       	ldd	r22, Y+53	; 0x35
    190e:	7e a9       	ldd	r23, Y+54	; 0x36
    1910:	8f a9       	ldd	r24, Y+55	; 0x37
    1912:	98 ad       	ldd	r25, Y+56	; 0x38
    1914:	20 e0       	ldi	r18, 0x00	; 0
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	40 e2       	ldi	r20, 0x20	; 32
    191a:	51 e4       	ldi	r21, 0x41	; 65
    191c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1920:	dc 01       	movw	r26, r24
    1922:	cb 01       	movw	r24, r22
    1924:	bc 01       	movw	r22, r24
    1926:	cd 01       	movw	r24, r26
    1928:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    192c:	dc 01       	movw	r26, r24
    192e:	cb 01       	movw	r24, r22
    1930:	98 ab       	std	Y+48, r25	; 0x30
    1932:	8f a7       	std	Y+47, r24	; 0x2f
    1934:	0f c0       	rjmp	.+30     	; 0x1954 <LCD_voidInit+0x36e>
    1936:	88 ec       	ldi	r24, 0xC8	; 200
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	9e a7       	std	Y+46, r25	; 0x2e
    193c:	8d a7       	std	Y+45, r24	; 0x2d
    193e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1940:	9e a5       	ldd	r25, Y+46	; 0x2e
    1942:	01 97       	sbiw	r24, 0x01	; 1
    1944:	f1 f7       	brne	.-4      	; 0x1942 <LCD_voidInit+0x35c>
    1946:	9e a7       	std	Y+46, r25	; 0x2e
    1948:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    194a:	8f a5       	ldd	r24, Y+47	; 0x2f
    194c:	98 a9       	ldd	r25, Y+48	; 0x30
    194e:	01 97       	sbiw	r24, 0x01	; 1
    1950:	98 ab       	std	Y+48, r25	; 0x30
    1952:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1954:	8f a5       	ldd	r24, Y+47	; 0x2f
    1956:	98 a9       	ldd	r25, Y+48	; 0x30
    1958:	00 97       	sbiw	r24, 0x00	; 0
    195a:	69 f7       	brne	.-38     	; 0x1936 <LCD_voidInit+0x350>
    195c:	14 c0       	rjmp	.+40     	; 0x1986 <LCD_voidInit+0x3a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    195e:	69 a9       	ldd	r22, Y+49	; 0x31
    1960:	7a a9       	ldd	r23, Y+50	; 0x32
    1962:	8b a9       	ldd	r24, Y+51	; 0x33
    1964:	9c a9       	ldd	r25, Y+52	; 0x34
    1966:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    196a:	dc 01       	movw	r26, r24
    196c:	cb 01       	movw	r24, r22
    196e:	98 ab       	std	Y+48, r25	; 0x30
    1970:	8f a7       	std	Y+47, r24	; 0x2f
    1972:	8f a5       	ldd	r24, Y+47	; 0x2f
    1974:	98 a9       	ldd	r25, Y+48	; 0x30
    1976:	9c a7       	std	Y+44, r25	; 0x2c
    1978:	8b a7       	std	Y+43, r24	; 0x2b
    197a:	8b a5       	ldd	r24, Y+43	; 0x2b
    197c:	9c a5       	ldd	r25, Y+44	; 0x2c
    197e:	01 97       	sbiw	r24, 0x01	; 1
    1980:	f1 f7       	brne	.-4      	; 0x197e <LCD_voidInit+0x398>
    1982:	9c a7       	std	Y+44, r25	; 0x2c
    1984:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(1);
		    LCD_voidSendCmd(LCD_DISP_ON_CURSOR_ON);
    1986:	8e e0       	ldi	r24, 0x0E	; 14
    1988:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <LCD_voidSendCmd>
    198c:	80 e0       	ldi	r24, 0x00	; 0
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	a0 e8       	ldi	r26, 0x80	; 128
    1992:	bf e3       	ldi	r27, 0x3F	; 63
    1994:	8f a3       	std	Y+39, r24	; 0x27
    1996:	98 a7       	std	Y+40, r25	; 0x28
    1998:	a9 a7       	std	Y+41, r26	; 0x29
    199a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    199c:	6f a1       	ldd	r22, Y+39	; 0x27
    199e:	78 a5       	ldd	r23, Y+40	; 0x28
    19a0:	89 a5       	ldd	r24, Y+41	; 0x29
    19a2:	9a a5       	ldd	r25, Y+42	; 0x2a
    19a4:	20 e0       	ldi	r18, 0x00	; 0
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	4a ef       	ldi	r20, 0xFA	; 250
    19aa:	54 e4       	ldi	r21, 0x44	; 68
    19ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19b0:	dc 01       	movw	r26, r24
    19b2:	cb 01       	movw	r24, r22
    19b4:	8b a3       	std	Y+35, r24	; 0x23
    19b6:	9c a3       	std	Y+36, r25	; 0x24
    19b8:	ad a3       	std	Y+37, r26	; 0x25
    19ba:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    19bc:	6b a1       	ldd	r22, Y+35	; 0x23
    19be:	7c a1       	ldd	r23, Y+36	; 0x24
    19c0:	8d a1       	ldd	r24, Y+37	; 0x25
    19c2:	9e a1       	ldd	r25, Y+38	; 0x26
    19c4:	20 e0       	ldi	r18, 0x00	; 0
    19c6:	30 e0       	ldi	r19, 0x00	; 0
    19c8:	40 e8       	ldi	r20, 0x80	; 128
    19ca:	5f e3       	ldi	r21, 0x3F	; 63
    19cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19d0:	88 23       	and	r24, r24
    19d2:	2c f4       	brge	.+10     	; 0x19de <LCD_voidInit+0x3f8>
		__ticks = 1;
    19d4:	81 e0       	ldi	r24, 0x01	; 1
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	9a a3       	std	Y+34, r25	; 0x22
    19da:	89 a3       	std	Y+33, r24	; 0x21
    19dc:	3f c0       	rjmp	.+126    	; 0x1a5c <LCD_voidInit+0x476>
	else if (__tmp > 65535)
    19de:	6b a1       	ldd	r22, Y+35	; 0x23
    19e0:	7c a1       	ldd	r23, Y+36	; 0x24
    19e2:	8d a1       	ldd	r24, Y+37	; 0x25
    19e4:	9e a1       	ldd	r25, Y+38	; 0x26
    19e6:	20 e0       	ldi	r18, 0x00	; 0
    19e8:	3f ef       	ldi	r19, 0xFF	; 255
    19ea:	4f e7       	ldi	r20, 0x7F	; 127
    19ec:	57 e4       	ldi	r21, 0x47	; 71
    19ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19f2:	18 16       	cp	r1, r24
    19f4:	4c f5       	brge	.+82     	; 0x1a48 <LCD_voidInit+0x462>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19f6:	6f a1       	ldd	r22, Y+39	; 0x27
    19f8:	78 a5       	ldd	r23, Y+40	; 0x28
    19fa:	89 a5       	ldd	r24, Y+41	; 0x29
    19fc:	9a a5       	ldd	r25, Y+42	; 0x2a
    19fe:	20 e0       	ldi	r18, 0x00	; 0
    1a00:	30 e0       	ldi	r19, 0x00	; 0
    1a02:	40 e2       	ldi	r20, 0x20	; 32
    1a04:	51 e4       	ldi	r21, 0x41	; 65
    1a06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a0a:	dc 01       	movw	r26, r24
    1a0c:	cb 01       	movw	r24, r22
    1a0e:	bc 01       	movw	r22, r24
    1a10:	cd 01       	movw	r24, r26
    1a12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a16:	dc 01       	movw	r26, r24
    1a18:	cb 01       	movw	r24, r22
    1a1a:	9a a3       	std	Y+34, r25	; 0x22
    1a1c:	89 a3       	std	Y+33, r24	; 0x21
    1a1e:	0f c0       	rjmp	.+30     	; 0x1a3e <LCD_voidInit+0x458>
    1a20:	88 ec       	ldi	r24, 0xC8	; 200
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	98 a3       	std	Y+32, r25	; 0x20
    1a26:	8f 8f       	std	Y+31, r24	; 0x1f
    1a28:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a2a:	98 a1       	ldd	r25, Y+32	; 0x20
    1a2c:	01 97       	sbiw	r24, 0x01	; 1
    1a2e:	f1 f7       	brne	.-4      	; 0x1a2c <LCD_voidInit+0x446>
    1a30:	98 a3       	std	Y+32, r25	; 0x20
    1a32:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a34:	89 a1       	ldd	r24, Y+33	; 0x21
    1a36:	9a a1       	ldd	r25, Y+34	; 0x22
    1a38:	01 97       	sbiw	r24, 0x01	; 1
    1a3a:	9a a3       	std	Y+34, r25	; 0x22
    1a3c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a3e:	89 a1       	ldd	r24, Y+33	; 0x21
    1a40:	9a a1       	ldd	r25, Y+34	; 0x22
    1a42:	00 97       	sbiw	r24, 0x00	; 0
    1a44:	69 f7       	brne	.-38     	; 0x1a20 <LCD_voidInit+0x43a>
    1a46:	14 c0       	rjmp	.+40     	; 0x1a70 <LCD_voidInit+0x48a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a48:	6b a1       	ldd	r22, Y+35	; 0x23
    1a4a:	7c a1       	ldd	r23, Y+36	; 0x24
    1a4c:	8d a1       	ldd	r24, Y+37	; 0x25
    1a4e:	9e a1       	ldd	r25, Y+38	; 0x26
    1a50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a54:	dc 01       	movw	r26, r24
    1a56:	cb 01       	movw	r24, r22
    1a58:	9a a3       	std	Y+34, r25	; 0x22
    1a5a:	89 a3       	std	Y+33, r24	; 0x21
    1a5c:	89 a1       	ldd	r24, Y+33	; 0x21
    1a5e:	9a a1       	ldd	r25, Y+34	; 0x22
    1a60:	9e 8f       	std	Y+30, r25	; 0x1e
    1a62:	8d 8f       	std	Y+29, r24	; 0x1d
    1a64:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a66:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a68:	01 97       	sbiw	r24, 0x01	; 1
    1a6a:	f1 f7       	brne	.-4      	; 0x1a68 <LCD_voidInit+0x482>
    1a6c:	9e 8f       	std	Y+30, r25	; 0x1e
    1a6e:	8d 8f       	std	Y+29, r24	; 0x1d
		    _delay_ms(1);
		    LCD_voidSendCmd(LCD_CLEAR_SCREEN);
    1a70:	81 e0       	ldi	r24, 0x01	; 1
    1a72:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <LCD_voidSendCmd>
    1a76:	80 e0       	ldi	r24, 0x00	; 0
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	a0 e2       	ldi	r26, 0x20	; 32
    1a7c:	b1 e4       	ldi	r27, 0x41	; 65
    1a7e:	89 8f       	std	Y+25, r24	; 0x19
    1a80:	9a 8f       	std	Y+26, r25	; 0x1a
    1a82:	ab 8f       	std	Y+27, r26	; 0x1b
    1a84:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a86:	69 8d       	ldd	r22, Y+25	; 0x19
    1a88:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a8a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a8c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a8e:	20 e0       	ldi	r18, 0x00	; 0
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	4a ef       	ldi	r20, 0xFA	; 250
    1a94:	54 e4       	ldi	r21, 0x44	; 68
    1a96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a9a:	dc 01       	movw	r26, r24
    1a9c:	cb 01       	movw	r24, r22
    1a9e:	8d 8b       	std	Y+21, r24	; 0x15
    1aa0:	9e 8b       	std	Y+22, r25	; 0x16
    1aa2:	af 8b       	std	Y+23, r26	; 0x17
    1aa4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1aa6:	6d 89       	ldd	r22, Y+21	; 0x15
    1aa8:	7e 89       	ldd	r23, Y+22	; 0x16
    1aaa:	8f 89       	ldd	r24, Y+23	; 0x17
    1aac:	98 8d       	ldd	r25, Y+24	; 0x18
    1aae:	20 e0       	ldi	r18, 0x00	; 0
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	40 e8       	ldi	r20, 0x80	; 128
    1ab4:	5f e3       	ldi	r21, 0x3F	; 63
    1ab6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1aba:	88 23       	and	r24, r24
    1abc:	2c f4       	brge	.+10     	; 0x1ac8 <LCD_voidInit+0x4e2>
		__ticks = 1;
    1abe:	81 e0       	ldi	r24, 0x01	; 1
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	9c 8b       	std	Y+20, r25	; 0x14
    1ac4:	8b 8b       	std	Y+19, r24	; 0x13
    1ac6:	3f c0       	rjmp	.+126    	; 0x1b46 <LCD_voidInit+0x560>
	else if (__tmp > 65535)
    1ac8:	6d 89       	ldd	r22, Y+21	; 0x15
    1aca:	7e 89       	ldd	r23, Y+22	; 0x16
    1acc:	8f 89       	ldd	r24, Y+23	; 0x17
    1ace:	98 8d       	ldd	r25, Y+24	; 0x18
    1ad0:	20 e0       	ldi	r18, 0x00	; 0
    1ad2:	3f ef       	ldi	r19, 0xFF	; 255
    1ad4:	4f e7       	ldi	r20, 0x7F	; 127
    1ad6:	57 e4       	ldi	r21, 0x47	; 71
    1ad8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1adc:	18 16       	cp	r1, r24
    1ade:	4c f5       	brge	.+82     	; 0x1b32 <LCD_voidInit+0x54c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ae0:	69 8d       	ldd	r22, Y+25	; 0x19
    1ae2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ae4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ae6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ae8:	20 e0       	ldi	r18, 0x00	; 0
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	40 e2       	ldi	r20, 0x20	; 32
    1aee:	51 e4       	ldi	r21, 0x41	; 65
    1af0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1af4:	dc 01       	movw	r26, r24
    1af6:	cb 01       	movw	r24, r22
    1af8:	bc 01       	movw	r22, r24
    1afa:	cd 01       	movw	r24, r26
    1afc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b00:	dc 01       	movw	r26, r24
    1b02:	cb 01       	movw	r24, r22
    1b04:	9c 8b       	std	Y+20, r25	; 0x14
    1b06:	8b 8b       	std	Y+19, r24	; 0x13
    1b08:	0f c0       	rjmp	.+30     	; 0x1b28 <LCD_voidInit+0x542>
    1b0a:	88 ec       	ldi	r24, 0xC8	; 200
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	9a 8b       	std	Y+18, r25	; 0x12
    1b10:	89 8b       	std	Y+17, r24	; 0x11
    1b12:	89 89       	ldd	r24, Y+17	; 0x11
    1b14:	9a 89       	ldd	r25, Y+18	; 0x12
    1b16:	01 97       	sbiw	r24, 0x01	; 1
    1b18:	f1 f7       	brne	.-4      	; 0x1b16 <LCD_voidInit+0x530>
    1b1a:	9a 8b       	std	Y+18, r25	; 0x12
    1b1c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b1e:	8b 89       	ldd	r24, Y+19	; 0x13
    1b20:	9c 89       	ldd	r25, Y+20	; 0x14
    1b22:	01 97       	sbiw	r24, 0x01	; 1
    1b24:	9c 8b       	std	Y+20, r25	; 0x14
    1b26:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b28:	8b 89       	ldd	r24, Y+19	; 0x13
    1b2a:	9c 89       	ldd	r25, Y+20	; 0x14
    1b2c:	00 97       	sbiw	r24, 0x00	; 0
    1b2e:	69 f7       	brne	.-38     	; 0x1b0a <LCD_voidInit+0x524>
    1b30:	14 c0       	rjmp	.+40     	; 0x1b5a <LCD_voidInit+0x574>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b32:	6d 89       	ldd	r22, Y+21	; 0x15
    1b34:	7e 89       	ldd	r23, Y+22	; 0x16
    1b36:	8f 89       	ldd	r24, Y+23	; 0x17
    1b38:	98 8d       	ldd	r25, Y+24	; 0x18
    1b3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b3e:	dc 01       	movw	r26, r24
    1b40:	cb 01       	movw	r24, r22
    1b42:	9c 8b       	std	Y+20, r25	; 0x14
    1b44:	8b 8b       	std	Y+19, r24	; 0x13
    1b46:	8b 89       	ldd	r24, Y+19	; 0x13
    1b48:	9c 89       	ldd	r25, Y+20	; 0x14
    1b4a:	98 8b       	std	Y+16, r25	; 0x10
    1b4c:	8f 87       	std	Y+15, r24	; 0x0f
    1b4e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b50:	98 89       	ldd	r25, Y+16	; 0x10
    1b52:	01 97       	sbiw	r24, 0x01	; 1
    1b54:	f1 f7       	brne	.-4      	; 0x1b52 <LCD_voidInit+0x56c>
    1b56:	98 8b       	std	Y+16, r25	; 0x10
    1b58:	8f 87       	std	Y+15, r24	; 0x0f
		    _delay_ms(10);
		    LCD_voidSendCmd(LCD_ENTRY_MODE);
    1b5a:	86 e0       	ldi	r24, 0x06	; 6
    1b5c:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <LCD_voidSendCmd>
    1b60:	80 e0       	ldi	r24, 0x00	; 0
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	a0 e8       	ldi	r26, 0x80	; 128
    1b66:	bf e3       	ldi	r27, 0x3F	; 63
    1b68:	8b 87       	std	Y+11, r24	; 0x0b
    1b6a:	9c 87       	std	Y+12, r25	; 0x0c
    1b6c:	ad 87       	std	Y+13, r26	; 0x0d
    1b6e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b70:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b72:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b74:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b76:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b78:	20 e0       	ldi	r18, 0x00	; 0
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	4a ef       	ldi	r20, 0xFA	; 250
    1b7e:	54 e4       	ldi	r21, 0x44	; 68
    1b80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b84:	dc 01       	movw	r26, r24
    1b86:	cb 01       	movw	r24, r22
    1b88:	8f 83       	std	Y+7, r24	; 0x07
    1b8a:	98 87       	std	Y+8, r25	; 0x08
    1b8c:	a9 87       	std	Y+9, r26	; 0x09
    1b8e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b90:	6f 81       	ldd	r22, Y+7	; 0x07
    1b92:	78 85       	ldd	r23, Y+8	; 0x08
    1b94:	89 85       	ldd	r24, Y+9	; 0x09
    1b96:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b98:	20 e0       	ldi	r18, 0x00	; 0
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	40 e8       	ldi	r20, 0x80	; 128
    1b9e:	5f e3       	ldi	r21, 0x3F	; 63
    1ba0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ba4:	88 23       	and	r24, r24
    1ba6:	2c f4       	brge	.+10     	; 0x1bb2 <LCD_voidInit+0x5cc>
		__ticks = 1;
    1ba8:	81 e0       	ldi	r24, 0x01	; 1
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	9e 83       	std	Y+6, r25	; 0x06
    1bae:	8d 83       	std	Y+5, r24	; 0x05
    1bb0:	3f c0       	rjmp	.+126    	; 0x1c30 <LCD_voidInit+0x64a>
	else if (__tmp > 65535)
    1bb2:	6f 81       	ldd	r22, Y+7	; 0x07
    1bb4:	78 85       	ldd	r23, Y+8	; 0x08
    1bb6:	89 85       	ldd	r24, Y+9	; 0x09
    1bb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bba:	20 e0       	ldi	r18, 0x00	; 0
    1bbc:	3f ef       	ldi	r19, 0xFF	; 255
    1bbe:	4f e7       	ldi	r20, 0x7F	; 127
    1bc0:	57 e4       	ldi	r21, 0x47	; 71
    1bc2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bc6:	18 16       	cp	r1, r24
    1bc8:	4c f5       	brge	.+82     	; 0x1c1c <LCD_voidInit+0x636>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bca:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bcc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bce:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bd2:	20 e0       	ldi	r18, 0x00	; 0
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	40 e2       	ldi	r20, 0x20	; 32
    1bd8:	51 e4       	ldi	r21, 0x41	; 65
    1bda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bde:	dc 01       	movw	r26, r24
    1be0:	cb 01       	movw	r24, r22
    1be2:	bc 01       	movw	r22, r24
    1be4:	cd 01       	movw	r24, r26
    1be6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bea:	dc 01       	movw	r26, r24
    1bec:	cb 01       	movw	r24, r22
    1bee:	9e 83       	std	Y+6, r25	; 0x06
    1bf0:	8d 83       	std	Y+5, r24	; 0x05
    1bf2:	0f c0       	rjmp	.+30     	; 0x1c12 <LCD_voidInit+0x62c>
    1bf4:	88 ec       	ldi	r24, 0xC8	; 200
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	9c 83       	std	Y+4, r25	; 0x04
    1bfa:	8b 83       	std	Y+3, r24	; 0x03
    1bfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfe:	9c 81       	ldd	r25, Y+4	; 0x04
    1c00:	01 97       	sbiw	r24, 0x01	; 1
    1c02:	f1 f7       	brne	.-4      	; 0x1c00 <LCD_voidInit+0x61a>
    1c04:	9c 83       	std	Y+4, r25	; 0x04
    1c06:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c08:	8d 81       	ldd	r24, Y+5	; 0x05
    1c0a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c0c:	01 97       	sbiw	r24, 0x01	; 1
    1c0e:	9e 83       	std	Y+6, r25	; 0x06
    1c10:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c12:	8d 81       	ldd	r24, Y+5	; 0x05
    1c14:	9e 81       	ldd	r25, Y+6	; 0x06
    1c16:	00 97       	sbiw	r24, 0x00	; 0
    1c18:	69 f7       	brne	.-38     	; 0x1bf4 <LCD_voidInit+0x60e>
    1c1a:	14 c0       	rjmp	.+40     	; 0x1c44 <LCD_voidInit+0x65e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c1c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c1e:	78 85       	ldd	r23, Y+8	; 0x08
    1c20:	89 85       	ldd	r24, Y+9	; 0x09
    1c22:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c28:	dc 01       	movw	r26, r24
    1c2a:	cb 01       	movw	r24, r22
    1c2c:	9e 83       	std	Y+6, r25	; 0x06
    1c2e:	8d 83       	std	Y+5, r24	; 0x05
    1c30:	8d 81       	ldd	r24, Y+5	; 0x05
    1c32:	9e 81       	ldd	r25, Y+6	; 0x06
    1c34:	9a 83       	std	Y+2, r25	; 0x02
    1c36:	89 83       	std	Y+1, r24	; 0x01
    1c38:	89 81       	ldd	r24, Y+1	; 0x01
    1c3a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c3c:	01 97       	sbiw	r24, 0x01	; 1
    1c3e:	f1 f7       	brne	.-4      	; 0x1c3c <LCD_voidInit+0x656>
    1c40:	9a 83       	std	Y+2, r25	; 0x02
    1c42:	89 83       	std	Y+1, r24	; 0x01
	#endif
	
	
	

}
    1c44:	cc 5a       	subi	r28, 0xAC	; 172
    1c46:	df 4f       	sbci	r29, 0xFF	; 255
    1c48:	0f b6       	in	r0, 0x3f	; 63
    1c4a:	f8 94       	cli
    1c4c:	de bf       	out	0x3e, r29	; 62
    1c4e:	0f be       	out	0x3f, r0	; 63
    1c50:	cd bf       	out	0x3d, r28	; 61
    1c52:	cf 91       	pop	r28
    1c54:	df 91       	pop	r29
    1c56:	1f 91       	pop	r17
    1c58:	0f 91       	pop	r16
    1c5a:	08 95       	ret

00001c5c <LCD_voidSendCmd>:

void LCD_voidSendCmd(u8 copy_u8Cmd)
{
    1c5c:	df 93       	push	r29
    1c5e:	cf 93       	push	r28
    1c60:	cd b7       	in	r28, 0x3d	; 61
    1c62:	de b7       	in	r29, 0x3e	; 62
    1c64:	2f 97       	sbiw	r28, 0x0f	; 15
    1c66:	0f b6       	in	r0, 0x3f	; 63
    1c68:	f8 94       	cli
    1c6a:	de bf       	out	0x3e, r29	; 62
    1c6c:	0f be       	out	0x3f, r0	; 63
    1c6e:	cd bf       	out	0x3d, r28	; 61
    1c70:	8f 87       	std	Y+15, r24	; 0x0f
		GPIO_voidWritePin  (LCD_RWPORT , LCD_RWPIN , 0);
		LCD_voidSendEnPulse();
		
	#elif LCD_MODE == 1 
		#if LCD_NIBBLE == 0 
			GPIO_voidWriteLowNipple(LCD_PORT , copy_u8Cmd>>4);
    1c72:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c74:	98 2f       	mov	r25, r24
    1c76:	92 95       	swap	r25
    1c78:	9f 70       	andi	r25, 0x0F	; 15
    1c7a:	80 e0       	ldi	r24, 0x00	; 0
    1c7c:	69 2f       	mov	r22, r25
    1c7e:	0e 94 13 0a 	call	0x1426	; 0x1426 <GPIO_voidWriteLowNipple>
			GPIO_voidWritePin  (LCD_RSPORT , LCD_RSPIN , 0);
    1c82:	82 e0       	ldi	r24, 0x02	; 2
    1c84:	60 e0       	ldi	r22, 0x00	; 0
    1c86:	40 e0       	ldi	r20, 0x00	; 0
    1c88:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_voidWritePin>
			GPIO_voidWritePin  (LCD_RWPORT , LCD_RWPIN , 0);
    1c8c:	82 e0       	ldi	r24, 0x02	; 2
    1c8e:	61 e0       	ldi	r22, 0x01	; 1
    1c90:	40 e0       	ldi	r20, 0x00	; 0
    1c92:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_voidWritePin>
			LCD_voidSendEnPulse();
    1c96:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <LCD_voidSendEnPulse>
		
			GPIO_voidWriteLowNipple(LCD_PORT , copy_u8Cmd);
    1c9a:	80 e0       	ldi	r24, 0x00	; 0
    1c9c:	6f 85       	ldd	r22, Y+15	; 0x0f
    1c9e:	0e 94 13 0a 	call	0x1426	; 0x1426 <GPIO_voidWriteLowNipple>
			GPIO_voidWritePin  (LCD_RSPORT , LCD_RSPIN , 0);
    1ca2:	82 e0       	ldi	r24, 0x02	; 2
    1ca4:	60 e0       	ldi	r22, 0x00	; 0
    1ca6:	40 e0       	ldi	r20, 0x00	; 0
    1ca8:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_voidWritePin>
			GPIO_voidWritePin  (LCD_RWPORT , LCD_RWPIN , 0);
    1cac:	82 e0       	ldi	r24, 0x02	; 2
    1cae:	61 e0       	ldi	r22, 0x01	; 1
    1cb0:	40 e0       	ldi	r20, 0x00	; 0
    1cb2:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_voidWritePin>
			LCD_voidSendEnPulse();
    1cb6:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <LCD_voidSendEnPulse>
    1cba:	80 e0       	ldi	r24, 0x00	; 0
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	a0 e0       	ldi	r26, 0x00	; 0
    1cc0:	b0 e4       	ldi	r27, 0x40	; 64
    1cc2:	8b 87       	std	Y+11, r24	; 0x0b
    1cc4:	9c 87       	std	Y+12, r25	; 0x0c
    1cc6:	ad 87       	std	Y+13, r26	; 0x0d
    1cc8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cca:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ccc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cce:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cd2:	20 e0       	ldi	r18, 0x00	; 0
    1cd4:	30 e0       	ldi	r19, 0x00	; 0
    1cd6:	4a ef       	ldi	r20, 0xFA	; 250
    1cd8:	54 e4       	ldi	r21, 0x44	; 68
    1cda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cde:	dc 01       	movw	r26, r24
    1ce0:	cb 01       	movw	r24, r22
    1ce2:	8f 83       	std	Y+7, r24	; 0x07
    1ce4:	98 87       	std	Y+8, r25	; 0x08
    1ce6:	a9 87       	std	Y+9, r26	; 0x09
    1ce8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cea:	6f 81       	ldd	r22, Y+7	; 0x07
    1cec:	78 85       	ldd	r23, Y+8	; 0x08
    1cee:	89 85       	ldd	r24, Y+9	; 0x09
    1cf0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cf2:	20 e0       	ldi	r18, 0x00	; 0
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	40 e8       	ldi	r20, 0x80	; 128
    1cf8:	5f e3       	ldi	r21, 0x3F	; 63
    1cfa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cfe:	88 23       	and	r24, r24
    1d00:	2c f4       	brge	.+10     	; 0x1d0c <LCD_voidSendCmd+0xb0>
		__ticks = 1;
    1d02:	81 e0       	ldi	r24, 0x01	; 1
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	9e 83       	std	Y+6, r25	; 0x06
    1d08:	8d 83       	std	Y+5, r24	; 0x05
    1d0a:	3f c0       	rjmp	.+126    	; 0x1d8a <LCD_voidSendCmd+0x12e>
	else if (__tmp > 65535)
    1d0c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d0e:	78 85       	ldd	r23, Y+8	; 0x08
    1d10:	89 85       	ldd	r24, Y+9	; 0x09
    1d12:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d14:	20 e0       	ldi	r18, 0x00	; 0
    1d16:	3f ef       	ldi	r19, 0xFF	; 255
    1d18:	4f e7       	ldi	r20, 0x7F	; 127
    1d1a:	57 e4       	ldi	r21, 0x47	; 71
    1d1c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d20:	18 16       	cp	r1, r24
    1d22:	4c f5       	brge	.+82     	; 0x1d76 <LCD_voidSendCmd+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d24:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d26:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d28:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d2c:	20 e0       	ldi	r18, 0x00	; 0
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	40 e2       	ldi	r20, 0x20	; 32
    1d32:	51 e4       	ldi	r21, 0x41	; 65
    1d34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d38:	dc 01       	movw	r26, r24
    1d3a:	cb 01       	movw	r24, r22
    1d3c:	bc 01       	movw	r22, r24
    1d3e:	cd 01       	movw	r24, r26
    1d40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d44:	dc 01       	movw	r26, r24
    1d46:	cb 01       	movw	r24, r22
    1d48:	9e 83       	std	Y+6, r25	; 0x06
    1d4a:	8d 83       	std	Y+5, r24	; 0x05
    1d4c:	0f c0       	rjmp	.+30     	; 0x1d6c <LCD_voidSendCmd+0x110>
    1d4e:	88 ec       	ldi	r24, 0xC8	; 200
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	9c 83       	std	Y+4, r25	; 0x04
    1d54:	8b 83       	std	Y+3, r24	; 0x03
    1d56:	8b 81       	ldd	r24, Y+3	; 0x03
    1d58:	9c 81       	ldd	r25, Y+4	; 0x04
    1d5a:	01 97       	sbiw	r24, 0x01	; 1
    1d5c:	f1 f7       	brne	.-4      	; 0x1d5a <LCD_voidSendCmd+0xfe>
    1d5e:	9c 83       	std	Y+4, r25	; 0x04
    1d60:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d62:	8d 81       	ldd	r24, Y+5	; 0x05
    1d64:	9e 81       	ldd	r25, Y+6	; 0x06
    1d66:	01 97       	sbiw	r24, 0x01	; 1
    1d68:	9e 83       	std	Y+6, r25	; 0x06
    1d6a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d70:	00 97       	sbiw	r24, 0x00	; 0
    1d72:	69 f7       	brne	.-38     	; 0x1d4e <LCD_voidSendCmd+0xf2>
    1d74:	14 c0       	rjmp	.+40     	; 0x1d9e <LCD_voidSendCmd+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d76:	6f 81       	ldd	r22, Y+7	; 0x07
    1d78:	78 85       	ldd	r23, Y+8	; 0x08
    1d7a:	89 85       	ldd	r24, Y+9	; 0x09
    1d7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d82:	dc 01       	movw	r26, r24
    1d84:	cb 01       	movw	r24, r22
    1d86:	9e 83       	std	Y+6, r25	; 0x06
    1d88:	8d 83       	std	Y+5, r24	; 0x05
    1d8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d8e:	9a 83       	std	Y+2, r25	; 0x02
    1d90:	89 83       	std	Y+1, r24	; 0x01
    1d92:	89 81       	ldd	r24, Y+1	; 0x01
    1d94:	9a 81       	ldd	r25, Y+2	; 0x02
    1d96:	01 97       	sbiw	r24, 0x01	; 1
    1d98:	f1 f7       	brne	.-4      	; 0x1d96 <LCD_voidSendCmd+0x13a>
    1d9a:	9a 83       	std	Y+2, r25	; 0x02
    1d9c:	89 83       	std	Y+1, r24	; 0x01
			LCD_voidSendEnPulse();
			_delay_ms(2);
		#endif
	#endif
	
}
    1d9e:	2f 96       	adiw	r28, 0x0f	; 15
    1da0:	0f b6       	in	r0, 0x3f	; 63
    1da2:	f8 94       	cli
    1da4:	de bf       	out	0x3e, r29	; 62
    1da6:	0f be       	out	0x3f, r0	; 63
    1da8:	cd bf       	out	0x3d, r28	; 61
    1daa:	cf 91       	pop	r28
    1dac:	df 91       	pop	r29
    1dae:	08 95       	ret

00001db0 <LCD_voidSendEnPulse>:
void LCD_voidSendEnPulse ()
{
    1db0:	df 93       	push	r29
    1db2:	cf 93       	push	r28
    1db4:	cd b7       	in	r28, 0x3d	; 61
    1db6:	de b7       	in	r29, 0x3e	; 62
    1db8:	2e 97       	sbiw	r28, 0x0e	; 14
    1dba:	0f b6       	in	r0, 0x3f	; 63
    1dbc:	f8 94       	cli
    1dbe:	de bf       	out	0x3e, r29	; 62
    1dc0:	0f be       	out	0x3f, r0	; 63
    1dc2:	cd bf       	out	0x3d, r28	; 61
	GPIO_voidWritePin  (LCD_ENPORT , LCD_ENPIN , 1);
    1dc4:	82 e0       	ldi	r24, 0x02	; 2
    1dc6:	62 e0       	ldi	r22, 0x02	; 2
    1dc8:	41 e0       	ldi	r20, 0x01	; 1
    1dca:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_voidWritePin>
    1dce:	80 e0       	ldi	r24, 0x00	; 0
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	a0 e0       	ldi	r26, 0x00	; 0
    1dd4:	b0 e4       	ldi	r27, 0x40	; 64
    1dd6:	8b 87       	std	Y+11, r24	; 0x0b
    1dd8:	9c 87       	std	Y+12, r25	; 0x0c
    1dda:	ad 87       	std	Y+13, r26	; 0x0d
    1ddc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dde:	6b 85       	ldd	r22, Y+11	; 0x0b
    1de0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1de2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1de4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1de6:	20 e0       	ldi	r18, 0x00	; 0
    1de8:	30 e0       	ldi	r19, 0x00	; 0
    1dea:	4a ef       	ldi	r20, 0xFA	; 250
    1dec:	54 e4       	ldi	r21, 0x44	; 68
    1dee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1df2:	dc 01       	movw	r26, r24
    1df4:	cb 01       	movw	r24, r22
    1df6:	8f 83       	std	Y+7, r24	; 0x07
    1df8:	98 87       	std	Y+8, r25	; 0x08
    1dfa:	a9 87       	std	Y+9, r26	; 0x09
    1dfc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dfe:	6f 81       	ldd	r22, Y+7	; 0x07
    1e00:	78 85       	ldd	r23, Y+8	; 0x08
    1e02:	89 85       	ldd	r24, Y+9	; 0x09
    1e04:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e06:	20 e0       	ldi	r18, 0x00	; 0
    1e08:	30 e0       	ldi	r19, 0x00	; 0
    1e0a:	40 e8       	ldi	r20, 0x80	; 128
    1e0c:	5f e3       	ldi	r21, 0x3F	; 63
    1e0e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e12:	88 23       	and	r24, r24
    1e14:	2c f4       	brge	.+10     	; 0x1e20 <LCD_voidSendEnPulse+0x70>
		__ticks = 1;
    1e16:	81 e0       	ldi	r24, 0x01	; 1
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	9e 83       	std	Y+6, r25	; 0x06
    1e1c:	8d 83       	std	Y+5, r24	; 0x05
    1e1e:	3f c0       	rjmp	.+126    	; 0x1e9e <LCD_voidSendEnPulse+0xee>
	else if (__tmp > 65535)
    1e20:	6f 81       	ldd	r22, Y+7	; 0x07
    1e22:	78 85       	ldd	r23, Y+8	; 0x08
    1e24:	89 85       	ldd	r24, Y+9	; 0x09
    1e26:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e28:	20 e0       	ldi	r18, 0x00	; 0
    1e2a:	3f ef       	ldi	r19, 0xFF	; 255
    1e2c:	4f e7       	ldi	r20, 0x7F	; 127
    1e2e:	57 e4       	ldi	r21, 0x47	; 71
    1e30:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e34:	18 16       	cp	r1, r24
    1e36:	4c f5       	brge	.+82     	; 0x1e8a <LCD_voidSendEnPulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e38:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e40:	20 e0       	ldi	r18, 0x00	; 0
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	40 e2       	ldi	r20, 0x20	; 32
    1e46:	51 e4       	ldi	r21, 0x41	; 65
    1e48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e4c:	dc 01       	movw	r26, r24
    1e4e:	cb 01       	movw	r24, r22
    1e50:	bc 01       	movw	r22, r24
    1e52:	cd 01       	movw	r24, r26
    1e54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e58:	dc 01       	movw	r26, r24
    1e5a:	cb 01       	movw	r24, r22
    1e5c:	9e 83       	std	Y+6, r25	; 0x06
    1e5e:	8d 83       	std	Y+5, r24	; 0x05
    1e60:	0f c0       	rjmp	.+30     	; 0x1e80 <LCD_voidSendEnPulse+0xd0>
    1e62:	88 ec       	ldi	r24, 0xC8	; 200
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	9c 83       	std	Y+4, r25	; 0x04
    1e68:	8b 83       	std	Y+3, r24	; 0x03
    1e6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e6e:	01 97       	sbiw	r24, 0x01	; 1
    1e70:	f1 f7       	brne	.-4      	; 0x1e6e <LCD_voidSendEnPulse+0xbe>
    1e72:	9c 83       	std	Y+4, r25	; 0x04
    1e74:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e76:	8d 81       	ldd	r24, Y+5	; 0x05
    1e78:	9e 81       	ldd	r25, Y+6	; 0x06
    1e7a:	01 97       	sbiw	r24, 0x01	; 1
    1e7c:	9e 83       	std	Y+6, r25	; 0x06
    1e7e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e80:	8d 81       	ldd	r24, Y+5	; 0x05
    1e82:	9e 81       	ldd	r25, Y+6	; 0x06
    1e84:	00 97       	sbiw	r24, 0x00	; 0
    1e86:	69 f7       	brne	.-38     	; 0x1e62 <LCD_voidSendEnPulse+0xb2>
    1e88:	14 c0       	rjmp	.+40     	; 0x1eb2 <LCD_voidSendEnPulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e8a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e8c:	78 85       	ldd	r23, Y+8	; 0x08
    1e8e:	89 85       	ldd	r24, Y+9	; 0x09
    1e90:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e96:	dc 01       	movw	r26, r24
    1e98:	cb 01       	movw	r24, r22
    1e9a:	9e 83       	std	Y+6, r25	; 0x06
    1e9c:	8d 83       	std	Y+5, r24	; 0x05
    1e9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1ea0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ea2:	9a 83       	std	Y+2, r25	; 0x02
    1ea4:	89 83       	std	Y+1, r24	; 0x01
    1ea6:	89 81       	ldd	r24, Y+1	; 0x01
    1ea8:	9a 81       	ldd	r25, Y+2	; 0x02
    1eaa:	01 97       	sbiw	r24, 0x01	; 1
    1eac:	f1 f7       	brne	.-4      	; 0x1eaa <LCD_voidSendEnPulse+0xfa>
    1eae:	9a 83       	std	Y+2, r25	; 0x02
    1eb0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	GPIO_voidWritePin  (LCD_ENPORT , LCD_ENPIN , 0);
    1eb2:	82 e0       	ldi	r24, 0x02	; 2
    1eb4:	62 e0       	ldi	r22, 0x02	; 2
    1eb6:	40 e0       	ldi	r20, 0x00	; 0
    1eb8:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_voidWritePin>

}
    1ebc:	2e 96       	adiw	r28, 0x0e	; 14
    1ebe:	0f b6       	in	r0, 0x3f	; 63
    1ec0:	f8 94       	cli
    1ec2:	de bf       	out	0x3e, r29	; 62
    1ec4:	0f be       	out	0x3f, r0	; 63
    1ec6:	cd bf       	out	0x3d, r28	; 61
    1ec8:	cf 91       	pop	r28
    1eca:	df 91       	pop	r29
    1ecc:	08 95       	ret

00001ece <LCD_voidMoveCrusor>:
void LCD_voidMoveCrusor(u8 copy_u8Line , u8 copy_u8Position)
{
    1ece:	df 93       	push	r29
    1ed0:	cf 93       	push	r28
    1ed2:	cd b7       	in	r28, 0x3d	; 61
    1ed4:	de b7       	in	r29, 0x3e	; 62
    1ed6:	61 97       	sbiw	r28, 0x11	; 17
    1ed8:	0f b6       	in	r0, 0x3f	; 63
    1eda:	f8 94       	cli
    1edc:	de bf       	out	0x3e, r29	; 62
    1ede:	0f be       	out	0x3f, r0	; 63
    1ee0:	cd bf       	out	0x3d, r28	; 61
    1ee2:	88 8b       	std	Y+16, r24	; 0x10
    1ee4:	69 8b       	std	Y+17, r22	; 0x11
	u8 data ;
if(copy_u8Line < 1 || copy_u8Line > 2 || copy_u8Position >16 || copy_u8Position <1 )	
    1ee6:	88 89       	ldd	r24, Y+16	; 0x10
    1ee8:	88 23       	and	r24, r24
    1eea:	49 f0       	breq	.+18     	; 0x1efe <LCD_voidMoveCrusor+0x30>
    1eec:	88 89       	ldd	r24, Y+16	; 0x10
    1eee:	83 30       	cpi	r24, 0x03	; 3
    1ef0:	30 f4       	brcc	.+12     	; 0x1efe <LCD_voidMoveCrusor+0x30>
    1ef2:	89 89       	ldd	r24, Y+17	; 0x11
    1ef4:	81 31       	cpi	r24, 0x11	; 17
    1ef6:	18 f4       	brcc	.+6      	; 0x1efe <LCD_voidMoveCrusor+0x30>
    1ef8:	89 89       	ldd	r24, Y+17	; 0x11
    1efa:	88 23       	and	r24, r24
    1efc:	19 f4       	brne	.+6      	; 0x1f04 <LCD_voidMoveCrusor+0x36>
{
	data = 0x80 ;
    1efe:	80 e8       	ldi	r24, 0x80	; 128
    1f00:	8f 87       	std	Y+15, r24	; 0x0f
    1f02:	0d c0       	rjmp	.+26     	; 0x1f1e <LCD_voidMoveCrusor+0x50>
}
else if (copy_u8Line ==1)
    1f04:	88 89       	ldd	r24, Y+16	; 0x10
    1f06:	81 30       	cpi	r24, 0x01	; 1
    1f08:	21 f4       	brne	.+8      	; 0x1f12 <LCD_voidMoveCrusor+0x44>
{
	data = 0x80 +(copy_u8Position -1);
    1f0a:	89 89       	ldd	r24, Y+17	; 0x11
    1f0c:	81 58       	subi	r24, 0x81	; 129
    1f0e:	8f 87       	std	Y+15, r24	; 0x0f
    1f10:	06 c0       	rjmp	.+12     	; 0x1f1e <LCD_voidMoveCrusor+0x50>
}
else if (copy_u8Line==2)
    1f12:	88 89       	ldd	r24, Y+16	; 0x10
    1f14:	82 30       	cpi	r24, 0x02	; 2
    1f16:	19 f4       	brne	.+6      	; 0x1f1e <LCD_voidMoveCrusor+0x50>
{
	data = 0xC0 + (copy_u8Position -1 );
    1f18:	89 89       	ldd	r24, Y+17	; 0x11
    1f1a:	81 54       	subi	r24, 0x41	; 65
    1f1c:	8f 87       	std	Y+15, r24	; 0x0f
}
LCD_voidSendCmd(data);
    1f1e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f20:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <LCD_voidSendCmd>
    1f24:	80 e0       	ldi	r24, 0x00	; 0
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	a0 e8       	ldi	r26, 0x80	; 128
    1f2a:	bf e3       	ldi	r27, 0x3F	; 63
    1f2c:	8b 87       	std	Y+11, r24	; 0x0b
    1f2e:	9c 87       	std	Y+12, r25	; 0x0c
    1f30:	ad 87       	std	Y+13, r26	; 0x0d
    1f32:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f34:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f36:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f38:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f3c:	20 e0       	ldi	r18, 0x00	; 0
    1f3e:	30 e0       	ldi	r19, 0x00	; 0
    1f40:	4a ef       	ldi	r20, 0xFA	; 250
    1f42:	54 e4       	ldi	r21, 0x44	; 68
    1f44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f48:	dc 01       	movw	r26, r24
    1f4a:	cb 01       	movw	r24, r22
    1f4c:	8f 83       	std	Y+7, r24	; 0x07
    1f4e:	98 87       	std	Y+8, r25	; 0x08
    1f50:	a9 87       	std	Y+9, r26	; 0x09
    1f52:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f54:	6f 81       	ldd	r22, Y+7	; 0x07
    1f56:	78 85       	ldd	r23, Y+8	; 0x08
    1f58:	89 85       	ldd	r24, Y+9	; 0x09
    1f5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f5c:	20 e0       	ldi	r18, 0x00	; 0
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	40 e8       	ldi	r20, 0x80	; 128
    1f62:	5f e3       	ldi	r21, 0x3F	; 63
    1f64:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f68:	88 23       	and	r24, r24
    1f6a:	2c f4       	brge	.+10     	; 0x1f76 <LCD_voidMoveCrusor+0xa8>
		__ticks = 1;
    1f6c:	81 e0       	ldi	r24, 0x01	; 1
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	9e 83       	std	Y+6, r25	; 0x06
    1f72:	8d 83       	std	Y+5, r24	; 0x05
    1f74:	3f c0       	rjmp	.+126    	; 0x1ff4 <LCD_voidMoveCrusor+0x126>
	else if (__tmp > 65535)
    1f76:	6f 81       	ldd	r22, Y+7	; 0x07
    1f78:	78 85       	ldd	r23, Y+8	; 0x08
    1f7a:	89 85       	ldd	r24, Y+9	; 0x09
    1f7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f7e:	20 e0       	ldi	r18, 0x00	; 0
    1f80:	3f ef       	ldi	r19, 0xFF	; 255
    1f82:	4f e7       	ldi	r20, 0x7F	; 127
    1f84:	57 e4       	ldi	r21, 0x47	; 71
    1f86:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f8a:	18 16       	cp	r1, r24
    1f8c:	4c f5       	brge	.+82     	; 0x1fe0 <LCD_voidMoveCrusor+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f90:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f92:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f94:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f96:	20 e0       	ldi	r18, 0x00	; 0
    1f98:	30 e0       	ldi	r19, 0x00	; 0
    1f9a:	40 e2       	ldi	r20, 0x20	; 32
    1f9c:	51 e4       	ldi	r21, 0x41	; 65
    1f9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fa2:	dc 01       	movw	r26, r24
    1fa4:	cb 01       	movw	r24, r22
    1fa6:	bc 01       	movw	r22, r24
    1fa8:	cd 01       	movw	r24, r26
    1faa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fae:	dc 01       	movw	r26, r24
    1fb0:	cb 01       	movw	r24, r22
    1fb2:	9e 83       	std	Y+6, r25	; 0x06
    1fb4:	8d 83       	std	Y+5, r24	; 0x05
    1fb6:	0f c0       	rjmp	.+30     	; 0x1fd6 <LCD_voidMoveCrusor+0x108>
    1fb8:	88 ec       	ldi	r24, 0xC8	; 200
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	9c 83       	std	Y+4, r25	; 0x04
    1fbe:	8b 83       	std	Y+3, r24	; 0x03
    1fc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc2:	9c 81       	ldd	r25, Y+4	; 0x04
    1fc4:	01 97       	sbiw	r24, 0x01	; 1
    1fc6:	f1 f7       	brne	.-4      	; 0x1fc4 <LCD_voidMoveCrusor+0xf6>
    1fc8:	9c 83       	std	Y+4, r25	; 0x04
    1fca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fcc:	8d 81       	ldd	r24, Y+5	; 0x05
    1fce:	9e 81       	ldd	r25, Y+6	; 0x06
    1fd0:	01 97       	sbiw	r24, 0x01	; 1
    1fd2:	9e 83       	std	Y+6, r25	; 0x06
    1fd4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fd6:	8d 81       	ldd	r24, Y+5	; 0x05
    1fd8:	9e 81       	ldd	r25, Y+6	; 0x06
    1fda:	00 97       	sbiw	r24, 0x00	; 0
    1fdc:	69 f7       	brne	.-38     	; 0x1fb8 <LCD_voidMoveCrusor+0xea>
    1fde:	14 c0       	rjmp	.+40     	; 0x2008 <LCD_voidMoveCrusor+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fe0:	6f 81       	ldd	r22, Y+7	; 0x07
    1fe2:	78 85       	ldd	r23, Y+8	; 0x08
    1fe4:	89 85       	ldd	r24, Y+9	; 0x09
    1fe6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fe8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fec:	dc 01       	movw	r26, r24
    1fee:	cb 01       	movw	r24, r22
    1ff0:	9e 83       	std	Y+6, r25	; 0x06
    1ff2:	8d 83       	std	Y+5, r24	; 0x05
    1ff4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ff6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ff8:	9a 83       	std	Y+2, r25	; 0x02
    1ffa:	89 83       	std	Y+1, r24	; 0x01
    1ffc:	89 81       	ldd	r24, Y+1	; 0x01
    1ffe:	9a 81       	ldd	r25, Y+2	; 0x02
    2000:	01 97       	sbiw	r24, 0x01	; 1
    2002:	f1 f7       	brne	.-4      	; 0x2000 <LCD_voidMoveCrusor+0x132>
    2004:	9a 83       	std	Y+2, r25	; 0x02
    2006:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(1);
}
    2008:	61 96       	adiw	r28, 0x11	; 17
    200a:	0f b6       	in	r0, 0x3f	; 63
    200c:	f8 94       	cli
    200e:	de bf       	out	0x3e, r29	; 62
    2010:	0f be       	out	0x3f, r0	; 63
    2012:	cd bf       	out	0x3d, r28	; 61
    2014:	cf 91       	pop	r28
    2016:	df 91       	pop	r29
    2018:	08 95       	ret

0000201a <LCD_voidClearScreen>:
void LCD_voidClearScreen()
{
    201a:	df 93       	push	r29
    201c:	cf 93       	push	r28
    201e:	cd b7       	in	r28, 0x3d	; 61
    2020:	de b7       	in	r29, 0x3e	; 62
    2022:	2e 97       	sbiw	r28, 0x0e	; 14
    2024:	0f b6       	in	r0, 0x3f	; 63
    2026:	f8 94       	cli
    2028:	de bf       	out	0x3e, r29	; 62
    202a:	0f be       	out	0x3f, r0	; 63
    202c:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCmd(LCD_CLEAR_SCREEN);
    202e:	81 e0       	ldi	r24, 0x01	; 1
    2030:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <LCD_voidSendCmd>
    2034:	80 e0       	ldi	r24, 0x00	; 0
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	a0 e2       	ldi	r26, 0x20	; 32
    203a:	b1 e4       	ldi	r27, 0x41	; 65
    203c:	8b 87       	std	Y+11, r24	; 0x0b
    203e:	9c 87       	std	Y+12, r25	; 0x0c
    2040:	ad 87       	std	Y+13, r26	; 0x0d
    2042:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2044:	6b 85       	ldd	r22, Y+11	; 0x0b
    2046:	7c 85       	ldd	r23, Y+12	; 0x0c
    2048:	8d 85       	ldd	r24, Y+13	; 0x0d
    204a:	9e 85       	ldd	r25, Y+14	; 0x0e
    204c:	20 e0       	ldi	r18, 0x00	; 0
    204e:	30 e0       	ldi	r19, 0x00	; 0
    2050:	4a ef       	ldi	r20, 0xFA	; 250
    2052:	54 e4       	ldi	r21, 0x44	; 68
    2054:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2058:	dc 01       	movw	r26, r24
    205a:	cb 01       	movw	r24, r22
    205c:	8f 83       	std	Y+7, r24	; 0x07
    205e:	98 87       	std	Y+8, r25	; 0x08
    2060:	a9 87       	std	Y+9, r26	; 0x09
    2062:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2064:	6f 81       	ldd	r22, Y+7	; 0x07
    2066:	78 85       	ldd	r23, Y+8	; 0x08
    2068:	89 85       	ldd	r24, Y+9	; 0x09
    206a:	9a 85       	ldd	r25, Y+10	; 0x0a
    206c:	20 e0       	ldi	r18, 0x00	; 0
    206e:	30 e0       	ldi	r19, 0x00	; 0
    2070:	40 e8       	ldi	r20, 0x80	; 128
    2072:	5f e3       	ldi	r21, 0x3F	; 63
    2074:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2078:	88 23       	and	r24, r24
    207a:	2c f4       	brge	.+10     	; 0x2086 <LCD_voidClearScreen+0x6c>
		__ticks = 1;
    207c:	81 e0       	ldi	r24, 0x01	; 1
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	9e 83       	std	Y+6, r25	; 0x06
    2082:	8d 83       	std	Y+5, r24	; 0x05
    2084:	3f c0       	rjmp	.+126    	; 0x2104 <LCD_voidClearScreen+0xea>
	else if (__tmp > 65535)
    2086:	6f 81       	ldd	r22, Y+7	; 0x07
    2088:	78 85       	ldd	r23, Y+8	; 0x08
    208a:	89 85       	ldd	r24, Y+9	; 0x09
    208c:	9a 85       	ldd	r25, Y+10	; 0x0a
    208e:	20 e0       	ldi	r18, 0x00	; 0
    2090:	3f ef       	ldi	r19, 0xFF	; 255
    2092:	4f e7       	ldi	r20, 0x7F	; 127
    2094:	57 e4       	ldi	r21, 0x47	; 71
    2096:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    209a:	18 16       	cp	r1, r24
    209c:	4c f5       	brge	.+82     	; 0x20f0 <LCD_voidClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    209e:	6b 85       	ldd	r22, Y+11	; 0x0b
    20a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    20a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    20a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    20a6:	20 e0       	ldi	r18, 0x00	; 0
    20a8:	30 e0       	ldi	r19, 0x00	; 0
    20aa:	40 e2       	ldi	r20, 0x20	; 32
    20ac:	51 e4       	ldi	r21, 0x41	; 65
    20ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20b2:	dc 01       	movw	r26, r24
    20b4:	cb 01       	movw	r24, r22
    20b6:	bc 01       	movw	r22, r24
    20b8:	cd 01       	movw	r24, r26
    20ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20be:	dc 01       	movw	r26, r24
    20c0:	cb 01       	movw	r24, r22
    20c2:	9e 83       	std	Y+6, r25	; 0x06
    20c4:	8d 83       	std	Y+5, r24	; 0x05
    20c6:	0f c0       	rjmp	.+30     	; 0x20e6 <LCD_voidClearScreen+0xcc>
    20c8:	88 ec       	ldi	r24, 0xC8	; 200
    20ca:	90 e0       	ldi	r25, 0x00	; 0
    20cc:	9c 83       	std	Y+4, r25	; 0x04
    20ce:	8b 83       	std	Y+3, r24	; 0x03
    20d0:	8b 81       	ldd	r24, Y+3	; 0x03
    20d2:	9c 81       	ldd	r25, Y+4	; 0x04
    20d4:	01 97       	sbiw	r24, 0x01	; 1
    20d6:	f1 f7       	brne	.-4      	; 0x20d4 <LCD_voidClearScreen+0xba>
    20d8:	9c 83       	std	Y+4, r25	; 0x04
    20da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20dc:	8d 81       	ldd	r24, Y+5	; 0x05
    20de:	9e 81       	ldd	r25, Y+6	; 0x06
    20e0:	01 97       	sbiw	r24, 0x01	; 1
    20e2:	9e 83       	std	Y+6, r25	; 0x06
    20e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20e6:	8d 81       	ldd	r24, Y+5	; 0x05
    20e8:	9e 81       	ldd	r25, Y+6	; 0x06
    20ea:	00 97       	sbiw	r24, 0x00	; 0
    20ec:	69 f7       	brne	.-38     	; 0x20c8 <LCD_voidClearScreen+0xae>
    20ee:	14 c0       	rjmp	.+40     	; 0x2118 <LCD_voidClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20f0:	6f 81       	ldd	r22, Y+7	; 0x07
    20f2:	78 85       	ldd	r23, Y+8	; 0x08
    20f4:	89 85       	ldd	r24, Y+9	; 0x09
    20f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    20f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20fc:	dc 01       	movw	r26, r24
    20fe:	cb 01       	movw	r24, r22
    2100:	9e 83       	std	Y+6, r25	; 0x06
    2102:	8d 83       	std	Y+5, r24	; 0x05
    2104:	8d 81       	ldd	r24, Y+5	; 0x05
    2106:	9e 81       	ldd	r25, Y+6	; 0x06
    2108:	9a 83       	std	Y+2, r25	; 0x02
    210a:	89 83       	std	Y+1, r24	; 0x01
    210c:	89 81       	ldd	r24, Y+1	; 0x01
    210e:	9a 81       	ldd	r25, Y+2	; 0x02
    2110:	01 97       	sbiw	r24, 0x01	; 1
    2112:	f1 f7       	brne	.-4      	; 0x2110 <LCD_voidClearScreen+0xf6>
    2114:	9a 83       	std	Y+2, r25	; 0x02
    2116:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    2118:	2e 96       	adiw	r28, 0x0e	; 14
    211a:	0f b6       	in	r0, 0x3f	; 63
    211c:	f8 94       	cli
    211e:	de bf       	out	0x3e, r29	; 62
    2120:	0f be       	out	0x3f, r0	; 63
    2122:	cd bf       	out	0x3d, r28	; 61
    2124:	cf 91       	pop	r28
    2126:	df 91       	pop	r29
    2128:	08 95       	ret

0000212a <LCD_voidDispChar>:
void LCD_voidDispChar(u8 copy_u8char)
{
    212a:	df 93       	push	r29
    212c:	cf 93       	push	r28
    212e:	cd b7       	in	r28, 0x3d	; 61
    2130:	de b7       	in	r29, 0x3e	; 62
    2132:	2f 97       	sbiw	r28, 0x0f	; 15
    2134:	0f b6       	in	r0, 0x3f	; 63
    2136:	f8 94       	cli
    2138:	de bf       	out	0x3e, r29	; 62
    213a:	0f be       	out	0x3f, r0	; 63
    213c:	cd bf       	out	0x3d, r28	; 61
    213e:	8f 87       	std	Y+15, r24	; 0x0f
		GPIO_voidWritePin  (LCD_RWPORT , LCD_RWPIN , 0);
		LCD_voidSendEnPulse();
		
	#elif LCD_MODE == 1 
		#if LCD_NIBBLE == 0 
			GPIO_voidWriteLowNipple(LCD_PORT , copy_u8char>>4);
    2140:	8f 85       	ldd	r24, Y+15	; 0x0f
    2142:	98 2f       	mov	r25, r24
    2144:	92 95       	swap	r25
    2146:	9f 70       	andi	r25, 0x0F	; 15
    2148:	80 e0       	ldi	r24, 0x00	; 0
    214a:	69 2f       	mov	r22, r25
    214c:	0e 94 13 0a 	call	0x1426	; 0x1426 <GPIO_voidWriteLowNipple>
			GPIO_voidWritePin  (LCD_RSPORT , LCD_RSPIN , 1);
    2150:	82 e0       	ldi	r24, 0x02	; 2
    2152:	60 e0       	ldi	r22, 0x00	; 0
    2154:	41 e0       	ldi	r20, 0x01	; 1
    2156:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_voidWritePin>
			GPIO_voidWritePin  (LCD_RWPORT , LCD_RWPIN , 0);
    215a:	82 e0       	ldi	r24, 0x02	; 2
    215c:	61 e0       	ldi	r22, 0x01	; 1
    215e:	40 e0       	ldi	r20, 0x00	; 0
    2160:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_voidWritePin>
			LCD_voidSendEnPulse();
    2164:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <LCD_voidSendEnPulse>
		
			GPIO_voidWriteLowNipple(LCD_PORT , copy_u8char);
    2168:	80 e0       	ldi	r24, 0x00	; 0
    216a:	6f 85       	ldd	r22, Y+15	; 0x0f
    216c:	0e 94 13 0a 	call	0x1426	; 0x1426 <GPIO_voidWriteLowNipple>
			GPIO_voidWritePin  (LCD_RSPORT , LCD_RSPIN , 1);
    2170:	82 e0       	ldi	r24, 0x02	; 2
    2172:	60 e0       	ldi	r22, 0x00	; 0
    2174:	41 e0       	ldi	r20, 0x01	; 1
    2176:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_voidWritePin>
			GPIO_voidWritePin  (LCD_RWPORT , LCD_RWPIN , 0);
    217a:	82 e0       	ldi	r24, 0x02	; 2
    217c:	61 e0       	ldi	r22, 0x01	; 1
    217e:	40 e0       	ldi	r20, 0x00	; 0
    2180:	0e 94 33 07 	call	0xe66	; 0xe66 <GPIO_voidWritePin>
			LCD_voidSendEnPulse();
    2184:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <LCD_voidSendEnPulse>
    2188:	80 e0       	ldi	r24, 0x00	; 0
    218a:	90 e0       	ldi	r25, 0x00	; 0
    218c:	a0 e0       	ldi	r26, 0x00	; 0
    218e:	b0 e4       	ldi	r27, 0x40	; 64
    2190:	8b 87       	std	Y+11, r24	; 0x0b
    2192:	9c 87       	std	Y+12, r25	; 0x0c
    2194:	ad 87       	std	Y+13, r26	; 0x0d
    2196:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2198:	6b 85       	ldd	r22, Y+11	; 0x0b
    219a:	7c 85       	ldd	r23, Y+12	; 0x0c
    219c:	8d 85       	ldd	r24, Y+13	; 0x0d
    219e:	9e 85       	ldd	r25, Y+14	; 0x0e
    21a0:	20 e0       	ldi	r18, 0x00	; 0
    21a2:	30 e0       	ldi	r19, 0x00	; 0
    21a4:	4a ef       	ldi	r20, 0xFA	; 250
    21a6:	54 e4       	ldi	r21, 0x44	; 68
    21a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ac:	dc 01       	movw	r26, r24
    21ae:	cb 01       	movw	r24, r22
    21b0:	8f 83       	std	Y+7, r24	; 0x07
    21b2:	98 87       	std	Y+8, r25	; 0x08
    21b4:	a9 87       	std	Y+9, r26	; 0x09
    21b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21b8:	6f 81       	ldd	r22, Y+7	; 0x07
    21ba:	78 85       	ldd	r23, Y+8	; 0x08
    21bc:	89 85       	ldd	r24, Y+9	; 0x09
    21be:	9a 85       	ldd	r25, Y+10	; 0x0a
    21c0:	20 e0       	ldi	r18, 0x00	; 0
    21c2:	30 e0       	ldi	r19, 0x00	; 0
    21c4:	40 e8       	ldi	r20, 0x80	; 128
    21c6:	5f e3       	ldi	r21, 0x3F	; 63
    21c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21cc:	88 23       	and	r24, r24
    21ce:	2c f4       	brge	.+10     	; 0x21da <LCD_voidDispChar+0xb0>
		__ticks = 1;
    21d0:	81 e0       	ldi	r24, 0x01	; 1
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	9e 83       	std	Y+6, r25	; 0x06
    21d6:	8d 83       	std	Y+5, r24	; 0x05
    21d8:	3f c0       	rjmp	.+126    	; 0x2258 <LCD_voidDispChar+0x12e>
	else if (__tmp > 65535)
    21da:	6f 81       	ldd	r22, Y+7	; 0x07
    21dc:	78 85       	ldd	r23, Y+8	; 0x08
    21de:	89 85       	ldd	r24, Y+9	; 0x09
    21e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    21e2:	20 e0       	ldi	r18, 0x00	; 0
    21e4:	3f ef       	ldi	r19, 0xFF	; 255
    21e6:	4f e7       	ldi	r20, 0x7F	; 127
    21e8:	57 e4       	ldi	r21, 0x47	; 71
    21ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21ee:	18 16       	cp	r1, r24
    21f0:	4c f5       	brge	.+82     	; 0x2244 <LCD_voidDispChar+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    21f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    21f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    21f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    21fa:	20 e0       	ldi	r18, 0x00	; 0
    21fc:	30 e0       	ldi	r19, 0x00	; 0
    21fe:	40 e2       	ldi	r20, 0x20	; 32
    2200:	51 e4       	ldi	r21, 0x41	; 65
    2202:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2206:	dc 01       	movw	r26, r24
    2208:	cb 01       	movw	r24, r22
    220a:	bc 01       	movw	r22, r24
    220c:	cd 01       	movw	r24, r26
    220e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2212:	dc 01       	movw	r26, r24
    2214:	cb 01       	movw	r24, r22
    2216:	9e 83       	std	Y+6, r25	; 0x06
    2218:	8d 83       	std	Y+5, r24	; 0x05
    221a:	0f c0       	rjmp	.+30     	; 0x223a <LCD_voidDispChar+0x110>
    221c:	88 ec       	ldi	r24, 0xC8	; 200
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	9c 83       	std	Y+4, r25	; 0x04
    2222:	8b 83       	std	Y+3, r24	; 0x03
    2224:	8b 81       	ldd	r24, Y+3	; 0x03
    2226:	9c 81       	ldd	r25, Y+4	; 0x04
    2228:	01 97       	sbiw	r24, 0x01	; 1
    222a:	f1 f7       	brne	.-4      	; 0x2228 <LCD_voidDispChar+0xfe>
    222c:	9c 83       	std	Y+4, r25	; 0x04
    222e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2230:	8d 81       	ldd	r24, Y+5	; 0x05
    2232:	9e 81       	ldd	r25, Y+6	; 0x06
    2234:	01 97       	sbiw	r24, 0x01	; 1
    2236:	9e 83       	std	Y+6, r25	; 0x06
    2238:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    223a:	8d 81       	ldd	r24, Y+5	; 0x05
    223c:	9e 81       	ldd	r25, Y+6	; 0x06
    223e:	00 97       	sbiw	r24, 0x00	; 0
    2240:	69 f7       	brne	.-38     	; 0x221c <LCD_voidDispChar+0xf2>
    2242:	14 c0       	rjmp	.+40     	; 0x226c <LCD_voidDispChar+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2244:	6f 81       	ldd	r22, Y+7	; 0x07
    2246:	78 85       	ldd	r23, Y+8	; 0x08
    2248:	89 85       	ldd	r24, Y+9	; 0x09
    224a:	9a 85       	ldd	r25, Y+10	; 0x0a
    224c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2250:	dc 01       	movw	r26, r24
    2252:	cb 01       	movw	r24, r22
    2254:	9e 83       	std	Y+6, r25	; 0x06
    2256:	8d 83       	std	Y+5, r24	; 0x05
    2258:	8d 81       	ldd	r24, Y+5	; 0x05
    225a:	9e 81       	ldd	r25, Y+6	; 0x06
    225c:	9a 83       	std	Y+2, r25	; 0x02
    225e:	89 83       	std	Y+1, r24	; 0x01
    2260:	89 81       	ldd	r24, Y+1	; 0x01
    2262:	9a 81       	ldd	r25, Y+2	; 0x02
    2264:	01 97       	sbiw	r24, 0x01	; 1
    2266:	f1 f7       	brne	.-4      	; 0x2264 <LCD_voidDispChar+0x13a>
    2268:	9a 83       	std	Y+2, r25	; 0x02
    226a:	89 83       	std	Y+1, r24	; 0x01
			LCD_voidSendEnPulse();
			_delay_ms(2);
		#endif
	#endif
		
}
    226c:	2f 96       	adiw	r28, 0x0f	; 15
    226e:	0f b6       	in	r0, 0x3f	; 63
    2270:	f8 94       	cli
    2272:	de bf       	out	0x3e, r29	; 62
    2274:	0f be       	out	0x3f, r0	; 63
    2276:	cd bf       	out	0x3d, r28	; 61
    2278:	cf 91       	pop	r28
    227a:	df 91       	pop	r29
    227c:	08 95       	ret

0000227e <LCD_voidDispString>:
void LCD_voidDispString(u8 *copy_u8String)
{
    227e:	df 93       	push	r29
    2280:	cf 93       	push	r28
    2282:	00 d0       	rcall	.+0      	; 0x2284 <LCD_voidDispString+0x6>
    2284:	cd b7       	in	r28, 0x3d	; 61
    2286:	de b7       	in	r29, 0x3e	; 62
    2288:	9a 83       	std	Y+2, r25	; 0x02
    228a:	89 83       	std	Y+1, r24	; 0x01
    228c:	0a c0       	rjmp	.+20     	; 0x22a2 <LCD_voidDispString+0x24>
	while ((*copy_u8String) != '\0')
	{
		LCD_voidDispChar (*copy_u8String);
    228e:	e9 81       	ldd	r30, Y+1	; 0x01
    2290:	fa 81       	ldd	r31, Y+2	; 0x02
    2292:	80 81       	ld	r24, Z
    2294:	0e 94 95 10 	call	0x212a	; 0x212a <LCD_voidDispChar>
		copy_u8String ++ ;
    2298:	89 81       	ldd	r24, Y+1	; 0x01
    229a:	9a 81       	ldd	r25, Y+2	; 0x02
    229c:	01 96       	adiw	r24, 0x01	; 1
    229e:	9a 83       	std	Y+2, r25	; 0x02
    22a0:	89 83       	std	Y+1, r24	; 0x01
	#endif
		
}
void LCD_voidDispString(u8 *copy_u8String)
{
	while ((*copy_u8String) != '\0')
    22a2:	e9 81       	ldd	r30, Y+1	; 0x01
    22a4:	fa 81       	ldd	r31, Y+2	; 0x02
    22a6:	80 81       	ld	r24, Z
    22a8:	88 23       	and	r24, r24
    22aa:	89 f7       	brne	.-30     	; 0x228e <LCD_voidDispString+0x10>
	{
		LCD_voidDispChar (*copy_u8String);
		copy_u8String ++ ;
	}
}
    22ac:	0f 90       	pop	r0
    22ae:	0f 90       	pop	r0
    22b0:	cf 91       	pop	r28
    22b2:	df 91       	pop	r29
    22b4:	08 95       	ret

000022b6 <LCD_voidDispNumber>:

void LCD_voidDispNumber (f32 copy_f32Num)
{
    22b6:	df 93       	push	r29
    22b8:	cf 93       	push	r28
    22ba:	00 d0       	rcall	.+0      	; 0x22bc <LCD_voidDispNumber+0x6>
    22bc:	00 d0       	rcall	.+0      	; 0x22be <LCD_voidDispNumber+0x8>
    22be:	0f 92       	push	r0
    22c0:	cd b7       	in	r28, 0x3d	; 61
    22c2:	de b7       	in	r29, 0x3e	; 62
    22c4:	6a 83       	std	Y+2, r22	; 0x02
    22c6:	7b 83       	std	Y+3, r23	; 0x03
    22c8:	8c 83       	std	Y+4, r24	; 0x04
    22ca:	9d 83       	std	Y+5, r25	; 0x05
	u8 str[1];
	sprintf(str,"%d",(u8)copy_f32Num);
    22cc:	6a 81       	ldd	r22, Y+2	; 0x02
    22ce:	7b 81       	ldd	r23, Y+3	; 0x03
    22d0:	8c 81       	ldd	r24, Y+4	; 0x04
    22d2:	9d 81       	ldd	r25, Y+5	; 0x05
    22d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22d8:	dc 01       	movw	r26, r24
    22da:	cb 01       	movw	r24, r22
    22dc:	28 2f       	mov	r18, r24
    22de:	30 e0       	ldi	r19, 0x00	; 0
    22e0:	00 d0       	rcall	.+0      	; 0x22e2 <LCD_voidDispNumber+0x2c>
    22e2:	00 d0       	rcall	.+0      	; 0x22e4 <LCD_voidDispNumber+0x2e>
    22e4:	00 d0       	rcall	.+0      	; 0x22e6 <LCD_voidDispNumber+0x30>
    22e6:	ed b7       	in	r30, 0x3d	; 61
    22e8:	fe b7       	in	r31, 0x3e	; 62
    22ea:	31 96       	adiw	r30, 0x01	; 1
    22ec:	ce 01       	movw	r24, r28
    22ee:	01 96       	adiw	r24, 0x01	; 1
    22f0:	91 83       	std	Z+1, r25	; 0x01
    22f2:	80 83       	st	Z, r24
    22f4:	80 e6       	ldi	r24, 0x60	; 96
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    22f8:	93 83       	std	Z+3, r25	; 0x03
    22fa:	82 83       	std	Z+2, r24	; 0x02
    22fc:	35 83       	std	Z+5, r19	; 0x05
    22fe:	24 83       	std	Z+4, r18	; 0x04
    2300:	0e 94 20 13 	call	0x2640	; 0x2640 <sprintf>
    2304:	8d b7       	in	r24, 0x3d	; 61
    2306:	9e b7       	in	r25, 0x3e	; 62
    2308:	06 96       	adiw	r24, 0x06	; 6
    230a:	0f b6       	in	r0, 0x3f	; 63
    230c:	f8 94       	cli
    230e:	9e bf       	out	0x3e, r25	; 62
    2310:	0f be       	out	0x3f, r0	; 63
    2312:	8d bf       	out	0x3d, r24	; 61
	LCD_voidDispString(str);
    2314:	ce 01       	movw	r24, r28
    2316:	01 96       	adiw	r24, 0x01	; 1
    2318:	0e 94 3f 11 	call	0x227e	; 0x227e <LCD_voidDispString>
	LCD_voidDispChar('.');
    231c:	8e e2       	ldi	r24, 0x2E	; 46
    231e:	0e 94 95 10 	call	0x212a	; 0x212a <LCD_voidDispChar>
	copy_f32Num = ((copy_f32Num-(u8)copy_f32Num)*100);
    2322:	6a 81       	ldd	r22, Y+2	; 0x02
    2324:	7b 81       	ldd	r23, Y+3	; 0x03
    2326:	8c 81       	ldd	r24, Y+4	; 0x04
    2328:	9d 81       	ldd	r25, Y+5	; 0x05
    232a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    232e:	dc 01       	movw	r26, r24
    2330:	cb 01       	movw	r24, r22
    2332:	88 2f       	mov	r24, r24
    2334:	90 e0       	ldi	r25, 0x00	; 0
    2336:	aa 27       	eor	r26, r26
    2338:	97 fd       	sbrc	r25, 7
    233a:	a0 95       	com	r26
    233c:	ba 2f       	mov	r27, r26
    233e:	bc 01       	movw	r22, r24
    2340:	cd 01       	movw	r24, r26
    2342:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    2346:	9b 01       	movw	r18, r22
    2348:	ac 01       	movw	r20, r24
    234a:	6a 81       	ldd	r22, Y+2	; 0x02
    234c:	7b 81       	ldd	r23, Y+3	; 0x03
    234e:	8c 81       	ldd	r24, Y+4	; 0x04
    2350:	9d 81       	ldd	r25, Y+5	; 0x05
    2352:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2356:	dc 01       	movw	r26, r24
    2358:	cb 01       	movw	r24, r22
    235a:	bc 01       	movw	r22, r24
    235c:	cd 01       	movw	r24, r26
    235e:	20 e0       	ldi	r18, 0x00	; 0
    2360:	30 e0       	ldi	r19, 0x00	; 0
    2362:	48 ec       	ldi	r20, 0xC8	; 200
    2364:	52 e4       	ldi	r21, 0x42	; 66
    2366:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    236a:	dc 01       	movw	r26, r24
    236c:	cb 01       	movw	r24, r22
    236e:	8a 83       	std	Y+2, r24	; 0x02
    2370:	9b 83       	std	Y+3, r25	; 0x03
    2372:	ac 83       	std	Y+4, r26	; 0x04
    2374:	bd 83       	std	Y+5, r27	; 0x05
	sprintf(str,"%d",(u8)copy_f32Num);
    2376:	6a 81       	ldd	r22, Y+2	; 0x02
    2378:	7b 81       	ldd	r23, Y+3	; 0x03
    237a:	8c 81       	ldd	r24, Y+4	; 0x04
    237c:	9d 81       	ldd	r25, Y+5	; 0x05
    237e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2382:	dc 01       	movw	r26, r24
    2384:	cb 01       	movw	r24, r22
    2386:	28 2f       	mov	r18, r24
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	00 d0       	rcall	.+0      	; 0x238c <LCD_voidDispNumber+0xd6>
    238c:	00 d0       	rcall	.+0      	; 0x238e <LCD_voidDispNumber+0xd8>
    238e:	00 d0       	rcall	.+0      	; 0x2390 <LCD_voidDispNumber+0xda>
    2390:	ed b7       	in	r30, 0x3d	; 61
    2392:	fe b7       	in	r31, 0x3e	; 62
    2394:	31 96       	adiw	r30, 0x01	; 1
    2396:	ce 01       	movw	r24, r28
    2398:	01 96       	adiw	r24, 0x01	; 1
    239a:	91 83       	std	Z+1, r25	; 0x01
    239c:	80 83       	st	Z, r24
    239e:	80 e6       	ldi	r24, 0x60	; 96
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	93 83       	std	Z+3, r25	; 0x03
    23a4:	82 83       	std	Z+2, r24	; 0x02
    23a6:	35 83       	std	Z+5, r19	; 0x05
    23a8:	24 83       	std	Z+4, r18	; 0x04
    23aa:	0e 94 20 13 	call	0x2640	; 0x2640 <sprintf>
    23ae:	8d b7       	in	r24, 0x3d	; 61
    23b0:	9e b7       	in	r25, 0x3e	; 62
    23b2:	06 96       	adiw	r24, 0x06	; 6
    23b4:	0f b6       	in	r0, 0x3f	; 63
    23b6:	f8 94       	cli
    23b8:	9e bf       	out	0x3e, r25	; 62
    23ba:	0f be       	out	0x3f, r0	; 63
    23bc:	8d bf       	out	0x3d, r24	; 61
	LCD_voidDispString(str);
    23be:	ce 01       	movw	r24, r28
    23c0:	01 96       	adiw	r24, 0x01	; 1
    23c2:	0e 94 3f 11 	call	0x227e	; 0x227e <LCD_voidDispString>
}
    23c6:	0f 90       	pop	r0
    23c8:	0f 90       	pop	r0
    23ca:	0f 90       	pop	r0
    23cc:	0f 90       	pop	r0
    23ce:	0f 90       	pop	r0
    23d0:	cf 91       	pop	r28
    23d2:	df 91       	pop	r29
    23d4:	08 95       	ret

000023d6 <SPI_voidInit>:
#include "SPI_private.h"

void (* Global_CBSTC)(void);

void SPI_voidInit(void)
{
    23d6:	df 93       	push	r29
    23d8:	cf 93       	push	r28
    23da:	cd b7       	in	r28, 0x3d	; 61
    23dc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT (DDRB , 4);
	SET_BIT (DDRB , 5);
	SET_BIT (DDRB , 7);
	SET_BIT	(PORTB , 4);
	#else
	CLEAR_BIT (SPCR , MSTR);
    23de:	ad e2       	ldi	r26, 0x2D	; 45
    23e0:	b0 e0       	ldi	r27, 0x00	; 0
    23e2:	ed e2       	ldi	r30, 0x2D	; 45
    23e4:	f0 e0       	ldi	r31, 0x00	; 0
    23e6:	80 81       	ld	r24, Z
    23e8:	8f 7e       	andi	r24, 0xEF	; 239
    23ea:	8c 93       	st	X, r24
	SET_BIT (DDRB , 6);
    23ec:	a7 e3       	ldi	r26, 0x37	; 55
    23ee:	b0 e0       	ldi	r27, 0x00	; 0
    23f0:	e7 e3       	ldi	r30, 0x37	; 55
    23f2:	f0 e0       	ldi	r31, 0x00	; 0
    23f4:	80 81       	ld	r24, Z
    23f6:	80 64       	ori	r24, 0x40	; 64
    23f8:	8c 93       	st	X, r24
	#endif
	/*ADJUST DATA ORDER*/
	#if SPI_DATAORDER ==LSB
		SET_BIT (SPCR , DORD);
    23fa:	ad e2       	ldi	r26, 0x2D	; 45
    23fc:	b0 e0       	ldi	r27, 0x00	; 0
    23fe:	ed e2       	ldi	r30, 0x2D	; 45
    2400:	f0 e0       	ldi	r31, 0x00	; 0
    2402:	80 81       	ld	r24, Z
    2404:	80 62       	ori	r24, 0x20	; 32
    2406:	8c 93       	st	X, r24
	#else
		CLEAR_BIT (SPCR , DORD);
	#endif
	/*ADJUST POLARITY*/
	#if SPI_OPERATINGLEVEL == IDEL_LOW
		CLEAR_BIT(SPCR , CPOL);
    2408:	ad e2       	ldi	r26, 0x2D	; 45
    240a:	b0 e0       	ldi	r27, 0x00	; 0
    240c:	ed e2       	ldi	r30, 0x2D	; 45
    240e:	f0 e0       	ldi	r31, 0x00	; 0
    2410:	80 81       	ld	r24, Z
    2412:	87 7f       	andi	r24, 0xF7	; 247
    2414:	8c 93       	st	X, r24
	#else 
		SET_BIT (SPCR , CPOL);
	#endif
	/*ADJUST CLK PHASE*/
	#if SPI_CLOCKPHASE == RISING
		CLEAR_BIT (SPCR , CPHA);
    2416:	ad e2       	ldi	r26, 0x2D	; 45
    2418:	b0 e0       	ldi	r27, 0x00	; 0
    241a:	ed e2       	ldi	r30, 0x2D	; 45
    241c:	f0 e0       	ldi	r31, 0x00	; 0
    241e:	80 81       	ld	r24, Z
    2420:	8b 7f       	andi	r24, 0xFB	; 251
    2422:	8c 93       	st	X, r24
	#else
		SET_BIT (SPCR , CPHA);
	#endif
	/*ADJUST SPEED*/
	#if SPI_SPEEDMODE == NORMAL_SPEED
		CLEAR_BIT (SPSR , SPI2X);
    2424:	ae e2       	ldi	r26, 0x2E	; 46
    2426:	b0 e0       	ldi	r27, 0x00	; 0
    2428:	ee e2       	ldi	r30, 0x2E	; 46
    242a:	f0 e0       	ldi	r31, 0x00	; 0
    242c:	80 81       	ld	r24, Z
    242e:	8f 7d       	andi	r24, 0xDF	; 223
    2430:	8c 93       	st	X, r24
		CLEAR_BIT (SPCR , SPR1);
		#elif SPI_FREQUENCY_PRESCALER == F_64
		CLEAR_BIT_BIT (SPCR , SPR0);
		SET_BIT (SPCR , SPR1);
		#elif SPI_FREQUENCY_PRESCALER == F_128
		SET_BIT (SPCR , SPR0);
    2432:	ad e2       	ldi	r26, 0x2D	; 45
    2434:	b0 e0       	ldi	r27, 0x00	; 0
    2436:	ed e2       	ldi	r30, 0x2D	; 45
    2438:	f0 e0       	ldi	r31, 0x00	; 0
    243a:	80 81       	ld	r24, Z
    243c:	81 60       	ori	r24, 0x01	; 1
    243e:	8c 93       	st	X, r24
		SET_BIT (SPCR , SPR1);
    2440:	ad e2       	ldi	r26, 0x2D	; 45
    2442:	b0 e0       	ldi	r27, 0x00	; 0
    2444:	ed e2       	ldi	r30, 0x2D	; 45
    2446:	f0 e0       	ldi	r31, 0x00	; 0
    2448:	80 81       	ld	r24, Z
    244a:	82 60       	ori	r24, 0x02	; 2
    244c:	8c 93       	st	X, r24
		#elif SPI_FREQUENCY_PRESCALER == FD_64
		SET_BIT (SPCR , SPR0);
		SET_BIT (SPCR , SPR1);
		#endif
	#endif
}
    244e:	cf 91       	pop	r28
    2450:	df 91       	pop	r29
    2452:	08 95       	ret

00002454 <SPI_u8SendRes>:
 
u8 SPI_u8SendRes (u8 copy_u8Data)
{
    2454:	df 93       	push	r29
    2456:	cf 93       	push	r28
    2458:	0f 92       	push	r0
    245a:	cd b7       	in	r28, 0x3d	; 61
    245c:	de b7       	in	r29, 0x3e	; 62
    245e:	89 83       	std	Y+1, r24	; 0x01
	/*Enable SPI */
	SET_BIT (SPCR , SPE);
    2460:	ad e2       	ldi	r26, 0x2D	; 45
    2462:	b0 e0       	ldi	r27, 0x00	; 0
    2464:	ed e2       	ldi	r30, 0x2D	; 45
    2466:	f0 e0       	ldi	r31, 0x00	; 0
    2468:	80 81       	ld	r24, Z
    246a:	80 64       	ori	r24, 0x40	; 64
    246c:	8c 93       	st	X, r24
	CLEAR_BIT (PORTB , 4);
    246e:	a8 e3       	ldi	r26, 0x38	; 56
    2470:	b0 e0       	ldi	r27, 0x00	; 0
    2472:	e8 e3       	ldi	r30, 0x38	; 56
    2474:	f0 e0       	ldi	r31, 0x00	; 0
    2476:	80 81       	ld	r24, Z
    2478:	8f 7e       	andi	r24, 0xEF	; 239
    247a:	8c 93       	st	X, r24
	SPDR = copy_u8Data ;
    247c:	ef e2       	ldi	r30, 0x2F	; 47
    247e:	f0 e0       	ldi	r31, 0x00	; 0
    2480:	89 81       	ldd	r24, Y+1	; 0x01
    2482:	80 83       	st	Z, r24
	while (GET_BIT (SPSR , SPIF)== 0);
    2484:	ee e2       	ldi	r30, 0x2E	; 46
    2486:	f0 e0       	ldi	r31, 0x00	; 0
    2488:	80 81       	ld	r24, Z
    248a:	88 1f       	adc	r24, r24
    248c:	88 27       	eor	r24, r24
    248e:	88 1f       	adc	r24, r24
    2490:	88 2f       	mov	r24, r24
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	90 70       	andi	r25, 0x00	; 0
    2496:	00 97       	sbiw	r24, 0x00	; 0
    2498:	a9 f3       	breq	.-22     	; 0x2484 <SPI_u8SendRes+0x30>
		SET_BIT	(PORTB , 4);
    249a:	a8 e3       	ldi	r26, 0x38	; 56
    249c:	b0 e0       	ldi	r27, 0x00	; 0
    249e:	e8 e3       	ldi	r30, 0x38	; 56
    24a0:	f0 e0       	ldi	r31, 0x00	; 0
    24a2:	80 81       	ld	r24, Z
    24a4:	80 61       	ori	r24, 0x10	; 16
    24a6:	8c 93       	st	X, r24

	return SPDR ;
    24a8:	ef e2       	ldi	r30, 0x2F	; 47
    24aa:	f0 e0       	ldi	r31, 0x00	; 0
    24ac:	80 81       	ld	r24, Z
	
}
    24ae:	0f 90       	pop	r0
    24b0:	cf 91       	pop	r28
    24b2:	df 91       	pop	r29
    24b4:	08 95       	ret

000024b6 <SPI_u8SendString>:

void SPI_u8SendString (u8 *copy_u8PTR)
{
    24b6:	df 93       	push	r29
    24b8:	cf 93       	push	r28
    24ba:	00 d0       	rcall	.+0      	; 0x24bc <SPI_u8SendString+0x6>
    24bc:	0f 92       	push	r0
    24be:	cd b7       	in	r28, 0x3d	; 61
    24c0:	de b7       	in	r29, 0x3e	; 62
    24c2:	9b 83       	std	Y+3, r25	; 0x03
    24c4:	8a 83       	std	Y+2, r24	; 0x02
	volatile u8 temp ;
	while (*copy_u8PTR != '\0');
    24c6:	ea 81       	ldd	r30, Y+2	; 0x02
    24c8:	fb 81       	ldd	r31, Y+3	; 0x03
    24ca:	80 81       	ld	r24, Z
    24cc:	88 23       	and	r24, r24
    24ce:	d9 f7       	brne	.-10     	; 0x24c6 <SPI_u8SendString+0x10>
	{
		temp = SPI_u8SendRes ;
    24d0:	8a e2       	ldi	r24, 0x2A	; 42
    24d2:	92 e1       	ldi	r25, 0x12	; 18
    24d4:	89 83       	std	Y+1, r24	; 0x01
		copy_u8PTR ++ ;
    24d6:	8a 81       	ldd	r24, Y+2	; 0x02
    24d8:	9b 81       	ldd	r25, Y+3	; 0x03
    24da:	01 96       	adiw	r24, 0x01	; 1
    24dc:	9b 83       	std	Y+3, r25	; 0x03
    24de:	8a 83       	std	Y+2, r24	; 0x02
	}
	
}
    24e0:	0f 90       	pop	r0
    24e2:	0f 90       	pop	r0
    24e4:	0f 90       	pop	r0
    24e6:	cf 91       	pop	r28
    24e8:	df 91       	pop	r29
    24ea:	08 95       	ret

000024ec <SPI_voidIntruptEn>:

void SPI_voidIntruptEn ( void (* copy_CB)(void) )
{
    24ec:	df 93       	push	r29
    24ee:	cf 93       	push	r28
    24f0:	00 d0       	rcall	.+0      	; 0x24f2 <SPI_voidIntruptEn+0x6>
    24f2:	cd b7       	in	r28, 0x3d	; 61
    24f4:	de b7       	in	r29, 0x3e	; 62
    24f6:	9a 83       	std	Y+2, r25	; 0x02
    24f8:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(SREG , GI);
    24fa:	af e5       	ldi	r26, 0x5F	; 95
    24fc:	b0 e0       	ldi	r27, 0x00	; 0
    24fe:	ef e5       	ldi	r30, 0x5F	; 95
    2500:	f0 e0       	ldi	r31, 0x00	; 0
    2502:	80 81       	ld	r24, Z
    2504:	80 68       	ori	r24, 0x80	; 128
    2506:	8c 93       	st	X, r24
	SET_BIT (SPCR , SPIE );
    2508:	ad e2       	ldi	r26, 0x2D	; 45
    250a:	b0 e0       	ldi	r27, 0x00	; 0
    250c:	ed e2       	ldi	r30, 0x2D	; 45
    250e:	f0 e0       	ldi	r31, 0x00	; 0
    2510:	80 81       	ld	r24, Z
    2512:	80 68       	ori	r24, 0x80	; 128
    2514:	8c 93       	st	X, r24
	SET_BIT(SPSR, SPIF);
    2516:	ae e2       	ldi	r26, 0x2E	; 46
    2518:	b0 e0       	ldi	r27, 0x00	; 0
    251a:	ee e2       	ldi	r30, 0x2E	; 46
    251c:	f0 e0       	ldi	r31, 0x00	; 0
    251e:	80 81       	ld	r24, Z
    2520:	80 68       	ori	r24, 0x80	; 128
    2522:	8c 93       	st	X, r24

	Global_CBSTC = copy_CB ;
    2524:	89 81       	ldd	r24, Y+1	; 0x01
    2526:	9a 81       	ldd	r25, Y+2	; 0x02
    2528:	90 93 6d 01 	sts	0x016D, r25
    252c:	80 93 6c 01 	sts	0x016C, r24
}
    2530:	0f 90       	pop	r0
    2532:	0f 90       	pop	r0
    2534:	cf 91       	pop	r28
    2536:	df 91       	pop	r29
    2538:	08 95       	ret

0000253a <ISR>:

ISR(STC_vect)
	{
    253a:	df 93       	push	r29
    253c:	cf 93       	push	r28
    253e:	00 d0       	rcall	.+0      	; 0x2540 <ISR+0x6>
    2540:	00 d0       	rcall	.+0      	; 0x2542 <ISR+0x8>
    2542:	cd b7       	in	r28, 0x3d	; 61
    2544:	de b7       	in	r29, 0x3e	; 62
    2546:	9a 83       	std	Y+2, r25	; 0x02
    2548:	89 83       	std	Y+1, r24	; 0x01
		(*Global_CBSTC)();
    254a:	e0 91 6c 01 	lds	r30, 0x016C
    254e:	f0 91 6d 01 	lds	r31, 0x016D
    2552:	09 95       	icall
	}
    2554:	0f 90       	pop	r0
    2556:	0f 90       	pop	r0
    2558:	0f 90       	pop	r0
    255a:	0f 90       	pop	r0
    255c:	cf 91       	pop	r28
    255e:	df 91       	pop	r29
    2560:	08 95       	ret

00002562 <fun>:
#include "LCD_interface.h"

u8 x ,i ;

void fun (void)
{
    2562:	df 93       	push	r29
    2564:	cf 93       	push	r28
    2566:	cd b7       	in	r28, 0x3d	; 61
    2568:	de b7       	in	r29, 0x3e	; 62
	if (x == 1 )
    256a:	80 91 6e 01 	lds	r24, 0x016E
    256e:	81 30       	cpi	r24, 0x01	; 1
    2570:	21 f4       	brne	.+8      	; 0x257a <fun+0x18>
	{
		LCD_voidDispChar('c');
    2572:	83 e6       	ldi	r24, 0x63	; 99
    2574:	0e 94 95 10 	call	0x212a	; 0x212a <LCD_voidDispChar>
    2578:	07 c0       	rjmp	.+14     	; 0x2588 <fun+0x26>
	}
	else if (x == 2)
    257a:	80 91 6e 01 	lds	r24, 0x016E
    257e:	82 30       	cpi	r24, 0x02	; 2
    2580:	19 f4       	brne	.+6      	; 0x2588 <fun+0x26>
	{
		LCD_voidDispChar('d');
    2582:	84 e6       	ldi	r24, 0x64	; 100
    2584:	0e 94 95 10 	call	0x212a	; 0x212a <LCD_voidDispChar>
	}
}
    2588:	cf 91       	pop	r28
    258a:	df 91       	pop	r29
    258c:	08 95       	ret

0000258e <main>:
int main ()
{
    258e:	df 93       	push	r29
    2590:	cf 93       	push	r28
    2592:	cd b7       	in	r28, 0x3d	; 61
    2594:	de b7       	in	r29, 0x3e	; 62
	LCD_voidInit();
    2596:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <LCD_voidInit>
	SPI_voidInit();
    259a:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <SPI_voidInit>
	SPI_voidIntruptEn(&fun);
    259e:	81 eb       	ldi	r24, 0xB1	; 177
    25a0:	92 e1       	ldi	r25, 0x12	; 18
    25a2:	0e 94 76 12 	call	0x24ec	; 0x24ec <SPI_voidIntruptEn>


	while (1)
	{
		x = SPI_u8SendRes(i);
    25a6:	80 91 6f 01 	lds	r24, 0x016F
    25aa:	0e 94 2a 12 	call	0x2454	; 0x2454 <SPI_u8SendRes>
    25ae:	80 93 6e 01 	sts	0x016E, r24
		if (x == 1 )
    25b2:	80 91 6e 01 	lds	r24, 0x016E
    25b6:	81 30       	cpi	r24, 0x01	; 1
    25b8:	21 f4       	brne	.+8      	; 0x25c2 <main+0x34>
			{
				LCD_voidDispChar('a');
    25ba:	81 e6       	ldi	r24, 0x61	; 97
    25bc:	0e 94 95 10 	call	0x212a	; 0x212a <LCD_voidDispChar>
    25c0:	f2 cf       	rjmp	.-28     	; 0x25a6 <main+0x18>
			}
			else if (x == 2)
    25c2:	80 91 6e 01 	lds	r24, 0x016E
    25c6:	82 30       	cpi	r24, 0x02	; 2
    25c8:	71 f7       	brne	.-36     	; 0x25a6 <main+0x18>
			{
				LCD_voidDispChar('b');
    25ca:	82 e6       	ldi	r24, 0x62	; 98
    25cc:	0e 94 95 10 	call	0x212a	; 0x212a <LCD_voidDispChar>
    25d0:	ea cf       	rjmp	.-44     	; 0x25a6 <main+0x18>

000025d2 <__prologue_saves__>:
    25d2:	2f 92       	push	r2
    25d4:	3f 92       	push	r3
    25d6:	4f 92       	push	r4
    25d8:	5f 92       	push	r5
    25da:	6f 92       	push	r6
    25dc:	7f 92       	push	r7
    25de:	8f 92       	push	r8
    25e0:	9f 92       	push	r9
    25e2:	af 92       	push	r10
    25e4:	bf 92       	push	r11
    25e6:	cf 92       	push	r12
    25e8:	df 92       	push	r13
    25ea:	ef 92       	push	r14
    25ec:	ff 92       	push	r15
    25ee:	0f 93       	push	r16
    25f0:	1f 93       	push	r17
    25f2:	cf 93       	push	r28
    25f4:	df 93       	push	r29
    25f6:	cd b7       	in	r28, 0x3d	; 61
    25f8:	de b7       	in	r29, 0x3e	; 62
    25fa:	ca 1b       	sub	r28, r26
    25fc:	db 0b       	sbc	r29, r27
    25fe:	0f b6       	in	r0, 0x3f	; 63
    2600:	f8 94       	cli
    2602:	de bf       	out	0x3e, r29	; 62
    2604:	0f be       	out	0x3f, r0	; 63
    2606:	cd bf       	out	0x3d, r28	; 61
    2608:	09 94       	ijmp

0000260a <__epilogue_restores__>:
    260a:	2a 88       	ldd	r2, Y+18	; 0x12
    260c:	39 88       	ldd	r3, Y+17	; 0x11
    260e:	48 88       	ldd	r4, Y+16	; 0x10
    2610:	5f 84       	ldd	r5, Y+15	; 0x0f
    2612:	6e 84       	ldd	r6, Y+14	; 0x0e
    2614:	7d 84       	ldd	r7, Y+13	; 0x0d
    2616:	8c 84       	ldd	r8, Y+12	; 0x0c
    2618:	9b 84       	ldd	r9, Y+11	; 0x0b
    261a:	aa 84       	ldd	r10, Y+10	; 0x0a
    261c:	b9 84       	ldd	r11, Y+9	; 0x09
    261e:	c8 84       	ldd	r12, Y+8	; 0x08
    2620:	df 80       	ldd	r13, Y+7	; 0x07
    2622:	ee 80       	ldd	r14, Y+6	; 0x06
    2624:	fd 80       	ldd	r15, Y+5	; 0x05
    2626:	0c 81       	ldd	r16, Y+4	; 0x04
    2628:	1b 81       	ldd	r17, Y+3	; 0x03
    262a:	aa 81       	ldd	r26, Y+2	; 0x02
    262c:	b9 81       	ldd	r27, Y+1	; 0x01
    262e:	ce 0f       	add	r28, r30
    2630:	d1 1d       	adc	r29, r1
    2632:	0f b6       	in	r0, 0x3f	; 63
    2634:	f8 94       	cli
    2636:	de bf       	out	0x3e, r29	; 62
    2638:	0f be       	out	0x3f, r0	; 63
    263a:	cd bf       	out	0x3d, r28	; 61
    263c:	ed 01       	movw	r28, r26
    263e:	08 95       	ret

00002640 <sprintf>:
    2640:	ae e0       	ldi	r26, 0x0E	; 14
    2642:	b0 e0       	ldi	r27, 0x00	; 0
    2644:	e6 e2       	ldi	r30, 0x26	; 38
    2646:	f3 e1       	ldi	r31, 0x13	; 19
    2648:	0c 94 f7 12 	jmp	0x25ee	; 0x25ee <__prologue_saves__+0x1c>
    264c:	0d 89       	ldd	r16, Y+21	; 0x15
    264e:	1e 89       	ldd	r17, Y+22	; 0x16
    2650:	86 e0       	ldi	r24, 0x06	; 6
    2652:	8c 83       	std	Y+4, r24	; 0x04
    2654:	1a 83       	std	Y+2, r17	; 0x02
    2656:	09 83       	std	Y+1, r16	; 0x01
    2658:	8f ef       	ldi	r24, 0xFF	; 255
    265a:	9f e7       	ldi	r25, 0x7F	; 127
    265c:	9e 83       	std	Y+6, r25	; 0x06
    265e:	8d 83       	std	Y+5, r24	; 0x05
    2660:	9e 01       	movw	r18, r28
    2662:	27 5e       	subi	r18, 0xE7	; 231
    2664:	3f 4f       	sbci	r19, 0xFF	; 255
    2666:	ce 01       	movw	r24, r28
    2668:	01 96       	adiw	r24, 0x01	; 1
    266a:	6f 89       	ldd	r22, Y+23	; 0x17
    266c:	78 8d       	ldd	r23, Y+24	; 0x18
    266e:	a9 01       	movw	r20, r18
    2670:	0e 94 44 13 	call	0x2688	; 0x2688 <vfprintf>
    2674:	2f 81       	ldd	r18, Y+7	; 0x07
    2676:	38 85       	ldd	r19, Y+8	; 0x08
    2678:	02 0f       	add	r16, r18
    267a:	13 1f       	adc	r17, r19
    267c:	f8 01       	movw	r30, r16
    267e:	10 82       	st	Z, r1
    2680:	2e 96       	adiw	r28, 0x0e	; 14
    2682:	e4 e0       	ldi	r30, 0x04	; 4
    2684:	0c 94 13 13 	jmp	0x2626	; 0x2626 <__epilogue_restores__+0x1c>

00002688 <vfprintf>:
    2688:	ab e0       	ldi	r26, 0x0B	; 11
    268a:	b0 e0       	ldi	r27, 0x00	; 0
    268c:	ea e4       	ldi	r30, 0x4A	; 74
    268e:	f3 e1       	ldi	r31, 0x13	; 19
    2690:	0c 94 e9 12 	jmp	0x25d2	; 0x25d2 <__prologue_saves__>
    2694:	3c 01       	movw	r6, r24
    2696:	2b 01       	movw	r4, r22
    2698:	5a 01       	movw	r10, r20
    269a:	fc 01       	movw	r30, r24
    269c:	17 82       	std	Z+7, r1	; 0x07
    269e:	16 82       	std	Z+6, r1	; 0x06
    26a0:	83 81       	ldd	r24, Z+3	; 0x03
    26a2:	81 fd       	sbrc	r24, 1
    26a4:	03 c0       	rjmp	.+6      	; 0x26ac <vfprintf+0x24>
    26a6:	6f ef       	ldi	r22, 0xFF	; 255
    26a8:	7f ef       	ldi	r23, 0xFF	; 255
    26aa:	c6 c1       	rjmp	.+908    	; 0x2a38 <vfprintf+0x3b0>
    26ac:	9a e0       	ldi	r25, 0x0A	; 10
    26ae:	89 2e       	mov	r8, r25
    26b0:	1e 01       	movw	r2, r28
    26b2:	08 94       	sec
    26b4:	21 1c       	adc	r2, r1
    26b6:	31 1c       	adc	r3, r1
    26b8:	f3 01       	movw	r30, r6
    26ba:	23 81       	ldd	r18, Z+3	; 0x03
    26bc:	f2 01       	movw	r30, r4
    26be:	23 fd       	sbrc	r18, 3
    26c0:	85 91       	lpm	r24, Z+
    26c2:	23 ff       	sbrs	r18, 3
    26c4:	81 91       	ld	r24, Z+
    26c6:	2f 01       	movw	r4, r30
    26c8:	88 23       	and	r24, r24
    26ca:	09 f4       	brne	.+2      	; 0x26ce <vfprintf+0x46>
    26cc:	b2 c1       	rjmp	.+868    	; 0x2a32 <vfprintf+0x3aa>
    26ce:	85 32       	cpi	r24, 0x25	; 37
    26d0:	39 f4       	brne	.+14     	; 0x26e0 <vfprintf+0x58>
    26d2:	23 fd       	sbrc	r18, 3
    26d4:	85 91       	lpm	r24, Z+
    26d6:	23 ff       	sbrs	r18, 3
    26d8:	81 91       	ld	r24, Z+
    26da:	2f 01       	movw	r4, r30
    26dc:	85 32       	cpi	r24, 0x25	; 37
    26de:	29 f4       	brne	.+10     	; 0x26ea <vfprintf+0x62>
    26e0:	90 e0       	ldi	r25, 0x00	; 0
    26e2:	b3 01       	movw	r22, r6
    26e4:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <fputc>
    26e8:	e7 cf       	rjmp	.-50     	; 0x26b8 <vfprintf+0x30>
    26ea:	98 2f       	mov	r25, r24
    26ec:	ff 24       	eor	r15, r15
    26ee:	ee 24       	eor	r14, r14
    26f0:	99 24       	eor	r9, r9
    26f2:	ff e1       	ldi	r31, 0x1F	; 31
    26f4:	ff 15       	cp	r31, r15
    26f6:	d0 f0       	brcs	.+52     	; 0x272c <vfprintf+0xa4>
    26f8:	9b 32       	cpi	r25, 0x2B	; 43
    26fa:	69 f0       	breq	.+26     	; 0x2716 <vfprintf+0x8e>
    26fc:	9c 32       	cpi	r25, 0x2C	; 44
    26fe:	28 f4       	brcc	.+10     	; 0x270a <vfprintf+0x82>
    2700:	90 32       	cpi	r25, 0x20	; 32
    2702:	59 f0       	breq	.+22     	; 0x271a <vfprintf+0x92>
    2704:	93 32       	cpi	r25, 0x23	; 35
    2706:	91 f4       	brne	.+36     	; 0x272c <vfprintf+0xa4>
    2708:	0e c0       	rjmp	.+28     	; 0x2726 <vfprintf+0x9e>
    270a:	9d 32       	cpi	r25, 0x2D	; 45
    270c:	49 f0       	breq	.+18     	; 0x2720 <vfprintf+0x98>
    270e:	90 33       	cpi	r25, 0x30	; 48
    2710:	69 f4       	brne	.+26     	; 0x272c <vfprintf+0xa4>
    2712:	41 e0       	ldi	r20, 0x01	; 1
    2714:	24 c0       	rjmp	.+72     	; 0x275e <vfprintf+0xd6>
    2716:	52 e0       	ldi	r21, 0x02	; 2
    2718:	f5 2a       	or	r15, r21
    271a:	84 e0       	ldi	r24, 0x04	; 4
    271c:	f8 2a       	or	r15, r24
    271e:	28 c0       	rjmp	.+80     	; 0x2770 <vfprintf+0xe8>
    2720:	98 e0       	ldi	r25, 0x08	; 8
    2722:	f9 2a       	or	r15, r25
    2724:	25 c0       	rjmp	.+74     	; 0x2770 <vfprintf+0xe8>
    2726:	e0 e1       	ldi	r30, 0x10	; 16
    2728:	fe 2a       	or	r15, r30
    272a:	22 c0       	rjmp	.+68     	; 0x2770 <vfprintf+0xe8>
    272c:	f7 fc       	sbrc	r15, 7
    272e:	29 c0       	rjmp	.+82     	; 0x2782 <vfprintf+0xfa>
    2730:	89 2f       	mov	r24, r25
    2732:	80 53       	subi	r24, 0x30	; 48
    2734:	8a 30       	cpi	r24, 0x0A	; 10
    2736:	70 f4       	brcc	.+28     	; 0x2754 <vfprintf+0xcc>
    2738:	f6 fe       	sbrs	r15, 6
    273a:	05 c0       	rjmp	.+10     	; 0x2746 <vfprintf+0xbe>
    273c:	98 9c       	mul	r9, r8
    273e:	90 2c       	mov	r9, r0
    2740:	11 24       	eor	r1, r1
    2742:	98 0e       	add	r9, r24
    2744:	15 c0       	rjmp	.+42     	; 0x2770 <vfprintf+0xe8>
    2746:	e8 9c       	mul	r14, r8
    2748:	e0 2c       	mov	r14, r0
    274a:	11 24       	eor	r1, r1
    274c:	e8 0e       	add	r14, r24
    274e:	f0 e2       	ldi	r31, 0x20	; 32
    2750:	ff 2a       	or	r15, r31
    2752:	0e c0       	rjmp	.+28     	; 0x2770 <vfprintf+0xe8>
    2754:	9e 32       	cpi	r25, 0x2E	; 46
    2756:	29 f4       	brne	.+10     	; 0x2762 <vfprintf+0xda>
    2758:	f6 fc       	sbrc	r15, 6
    275a:	6b c1       	rjmp	.+726    	; 0x2a32 <vfprintf+0x3aa>
    275c:	40 e4       	ldi	r20, 0x40	; 64
    275e:	f4 2a       	or	r15, r20
    2760:	07 c0       	rjmp	.+14     	; 0x2770 <vfprintf+0xe8>
    2762:	9c 36       	cpi	r25, 0x6C	; 108
    2764:	19 f4       	brne	.+6      	; 0x276c <vfprintf+0xe4>
    2766:	50 e8       	ldi	r21, 0x80	; 128
    2768:	f5 2a       	or	r15, r21
    276a:	02 c0       	rjmp	.+4      	; 0x2770 <vfprintf+0xe8>
    276c:	98 36       	cpi	r25, 0x68	; 104
    276e:	49 f4       	brne	.+18     	; 0x2782 <vfprintf+0xfa>
    2770:	f2 01       	movw	r30, r4
    2772:	23 fd       	sbrc	r18, 3
    2774:	95 91       	lpm	r25, Z+
    2776:	23 ff       	sbrs	r18, 3
    2778:	91 91       	ld	r25, Z+
    277a:	2f 01       	movw	r4, r30
    277c:	99 23       	and	r25, r25
    277e:	09 f0       	breq	.+2      	; 0x2782 <vfprintf+0xfa>
    2780:	b8 cf       	rjmp	.-144    	; 0x26f2 <vfprintf+0x6a>
    2782:	89 2f       	mov	r24, r25
    2784:	85 54       	subi	r24, 0x45	; 69
    2786:	83 30       	cpi	r24, 0x03	; 3
    2788:	18 f0       	brcs	.+6      	; 0x2790 <vfprintf+0x108>
    278a:	80 52       	subi	r24, 0x20	; 32
    278c:	83 30       	cpi	r24, 0x03	; 3
    278e:	38 f4       	brcc	.+14     	; 0x279e <vfprintf+0x116>
    2790:	44 e0       	ldi	r20, 0x04	; 4
    2792:	50 e0       	ldi	r21, 0x00	; 0
    2794:	a4 0e       	add	r10, r20
    2796:	b5 1e       	adc	r11, r21
    2798:	5f e3       	ldi	r21, 0x3F	; 63
    279a:	59 83       	std	Y+1, r21	; 0x01
    279c:	0f c0       	rjmp	.+30     	; 0x27bc <vfprintf+0x134>
    279e:	93 36       	cpi	r25, 0x63	; 99
    27a0:	31 f0       	breq	.+12     	; 0x27ae <vfprintf+0x126>
    27a2:	93 37       	cpi	r25, 0x73	; 115
    27a4:	79 f0       	breq	.+30     	; 0x27c4 <vfprintf+0x13c>
    27a6:	93 35       	cpi	r25, 0x53	; 83
    27a8:	09 f0       	breq	.+2      	; 0x27ac <vfprintf+0x124>
    27aa:	56 c0       	rjmp	.+172    	; 0x2858 <vfprintf+0x1d0>
    27ac:	20 c0       	rjmp	.+64     	; 0x27ee <vfprintf+0x166>
    27ae:	f5 01       	movw	r30, r10
    27b0:	80 81       	ld	r24, Z
    27b2:	89 83       	std	Y+1, r24	; 0x01
    27b4:	42 e0       	ldi	r20, 0x02	; 2
    27b6:	50 e0       	ldi	r21, 0x00	; 0
    27b8:	a4 0e       	add	r10, r20
    27ba:	b5 1e       	adc	r11, r21
    27bc:	61 01       	movw	r12, r2
    27be:	01 e0       	ldi	r16, 0x01	; 1
    27c0:	10 e0       	ldi	r17, 0x00	; 0
    27c2:	12 c0       	rjmp	.+36     	; 0x27e8 <vfprintf+0x160>
    27c4:	f5 01       	movw	r30, r10
    27c6:	c0 80       	ld	r12, Z
    27c8:	d1 80       	ldd	r13, Z+1	; 0x01
    27ca:	f6 fc       	sbrc	r15, 6
    27cc:	03 c0       	rjmp	.+6      	; 0x27d4 <vfprintf+0x14c>
    27ce:	6f ef       	ldi	r22, 0xFF	; 255
    27d0:	7f ef       	ldi	r23, 0xFF	; 255
    27d2:	02 c0       	rjmp	.+4      	; 0x27d8 <vfprintf+0x150>
    27d4:	69 2d       	mov	r22, r9
    27d6:	70 e0       	ldi	r23, 0x00	; 0
    27d8:	42 e0       	ldi	r20, 0x02	; 2
    27da:	50 e0       	ldi	r21, 0x00	; 0
    27dc:	a4 0e       	add	r10, r20
    27de:	b5 1e       	adc	r11, r21
    27e0:	c6 01       	movw	r24, r12
    27e2:	0e 94 2c 15 	call	0x2a58	; 0x2a58 <strnlen>
    27e6:	8c 01       	movw	r16, r24
    27e8:	5f e7       	ldi	r21, 0x7F	; 127
    27ea:	f5 22       	and	r15, r21
    27ec:	14 c0       	rjmp	.+40     	; 0x2816 <vfprintf+0x18e>
    27ee:	f5 01       	movw	r30, r10
    27f0:	c0 80       	ld	r12, Z
    27f2:	d1 80       	ldd	r13, Z+1	; 0x01
    27f4:	f6 fc       	sbrc	r15, 6
    27f6:	03 c0       	rjmp	.+6      	; 0x27fe <vfprintf+0x176>
    27f8:	6f ef       	ldi	r22, 0xFF	; 255
    27fa:	7f ef       	ldi	r23, 0xFF	; 255
    27fc:	02 c0       	rjmp	.+4      	; 0x2802 <vfprintf+0x17a>
    27fe:	69 2d       	mov	r22, r9
    2800:	70 e0       	ldi	r23, 0x00	; 0
    2802:	42 e0       	ldi	r20, 0x02	; 2
    2804:	50 e0       	ldi	r21, 0x00	; 0
    2806:	a4 0e       	add	r10, r20
    2808:	b5 1e       	adc	r11, r21
    280a:	c6 01       	movw	r24, r12
    280c:	0e 94 21 15 	call	0x2a42	; 0x2a42 <strnlen_P>
    2810:	8c 01       	movw	r16, r24
    2812:	50 e8       	ldi	r21, 0x80	; 128
    2814:	f5 2a       	or	r15, r21
    2816:	f3 fe       	sbrs	r15, 3
    2818:	07 c0       	rjmp	.+14     	; 0x2828 <vfprintf+0x1a0>
    281a:	1a c0       	rjmp	.+52     	; 0x2850 <vfprintf+0x1c8>
    281c:	80 e2       	ldi	r24, 0x20	; 32
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	b3 01       	movw	r22, r6
    2822:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <fputc>
    2826:	ea 94       	dec	r14
    2828:	8e 2d       	mov	r24, r14
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	08 17       	cp	r16, r24
    282e:	19 07       	cpc	r17, r25
    2830:	a8 f3       	brcs	.-22     	; 0x281c <vfprintf+0x194>
    2832:	0e c0       	rjmp	.+28     	; 0x2850 <vfprintf+0x1c8>
    2834:	f6 01       	movw	r30, r12
    2836:	f7 fc       	sbrc	r15, 7
    2838:	85 91       	lpm	r24, Z+
    283a:	f7 fe       	sbrs	r15, 7
    283c:	81 91       	ld	r24, Z+
    283e:	6f 01       	movw	r12, r30
    2840:	90 e0       	ldi	r25, 0x00	; 0
    2842:	b3 01       	movw	r22, r6
    2844:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <fputc>
    2848:	e1 10       	cpse	r14, r1
    284a:	ea 94       	dec	r14
    284c:	01 50       	subi	r16, 0x01	; 1
    284e:	10 40       	sbci	r17, 0x00	; 0
    2850:	01 15       	cp	r16, r1
    2852:	11 05       	cpc	r17, r1
    2854:	79 f7       	brne	.-34     	; 0x2834 <vfprintf+0x1ac>
    2856:	ea c0       	rjmp	.+468    	; 0x2a2c <vfprintf+0x3a4>
    2858:	94 36       	cpi	r25, 0x64	; 100
    285a:	11 f0       	breq	.+4      	; 0x2860 <vfprintf+0x1d8>
    285c:	99 36       	cpi	r25, 0x69	; 105
    285e:	69 f5       	brne	.+90     	; 0x28ba <vfprintf+0x232>
    2860:	f7 fe       	sbrs	r15, 7
    2862:	08 c0       	rjmp	.+16     	; 0x2874 <vfprintf+0x1ec>
    2864:	f5 01       	movw	r30, r10
    2866:	20 81       	ld	r18, Z
    2868:	31 81       	ldd	r19, Z+1	; 0x01
    286a:	42 81       	ldd	r20, Z+2	; 0x02
    286c:	53 81       	ldd	r21, Z+3	; 0x03
    286e:	84 e0       	ldi	r24, 0x04	; 4
    2870:	90 e0       	ldi	r25, 0x00	; 0
    2872:	0a c0       	rjmp	.+20     	; 0x2888 <vfprintf+0x200>
    2874:	f5 01       	movw	r30, r10
    2876:	80 81       	ld	r24, Z
    2878:	91 81       	ldd	r25, Z+1	; 0x01
    287a:	9c 01       	movw	r18, r24
    287c:	44 27       	eor	r20, r20
    287e:	37 fd       	sbrc	r19, 7
    2880:	40 95       	com	r20
    2882:	54 2f       	mov	r21, r20
    2884:	82 e0       	ldi	r24, 0x02	; 2
    2886:	90 e0       	ldi	r25, 0x00	; 0
    2888:	a8 0e       	add	r10, r24
    288a:	b9 1e       	adc	r11, r25
    288c:	9f e6       	ldi	r25, 0x6F	; 111
    288e:	f9 22       	and	r15, r25
    2890:	57 ff       	sbrs	r21, 7
    2892:	09 c0       	rjmp	.+18     	; 0x28a6 <vfprintf+0x21e>
    2894:	50 95       	com	r21
    2896:	40 95       	com	r20
    2898:	30 95       	com	r19
    289a:	21 95       	neg	r18
    289c:	3f 4f       	sbci	r19, 0xFF	; 255
    289e:	4f 4f       	sbci	r20, 0xFF	; 255
    28a0:	5f 4f       	sbci	r21, 0xFF	; 255
    28a2:	e0 e8       	ldi	r30, 0x80	; 128
    28a4:	fe 2a       	or	r15, r30
    28a6:	ca 01       	movw	r24, r20
    28a8:	b9 01       	movw	r22, r18
    28aa:	a1 01       	movw	r20, r2
    28ac:	2a e0       	ldi	r18, 0x0A	; 10
    28ae:	30 e0       	ldi	r19, 0x00	; 0
    28b0:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <__ultoa_invert>
    28b4:	d8 2e       	mov	r13, r24
    28b6:	d2 18       	sub	r13, r2
    28b8:	40 c0       	rjmp	.+128    	; 0x293a <vfprintf+0x2b2>
    28ba:	95 37       	cpi	r25, 0x75	; 117
    28bc:	29 f4       	brne	.+10     	; 0x28c8 <vfprintf+0x240>
    28be:	1f 2d       	mov	r17, r15
    28c0:	1f 7e       	andi	r17, 0xEF	; 239
    28c2:	2a e0       	ldi	r18, 0x0A	; 10
    28c4:	30 e0       	ldi	r19, 0x00	; 0
    28c6:	1d c0       	rjmp	.+58     	; 0x2902 <vfprintf+0x27a>
    28c8:	1f 2d       	mov	r17, r15
    28ca:	19 7f       	andi	r17, 0xF9	; 249
    28cc:	9f 36       	cpi	r25, 0x6F	; 111
    28ce:	61 f0       	breq	.+24     	; 0x28e8 <vfprintf+0x260>
    28d0:	90 37       	cpi	r25, 0x70	; 112
    28d2:	20 f4       	brcc	.+8      	; 0x28dc <vfprintf+0x254>
    28d4:	98 35       	cpi	r25, 0x58	; 88
    28d6:	09 f0       	breq	.+2      	; 0x28da <vfprintf+0x252>
    28d8:	ac c0       	rjmp	.+344    	; 0x2a32 <vfprintf+0x3aa>
    28da:	0f c0       	rjmp	.+30     	; 0x28fa <vfprintf+0x272>
    28dc:	90 37       	cpi	r25, 0x70	; 112
    28de:	39 f0       	breq	.+14     	; 0x28ee <vfprintf+0x266>
    28e0:	98 37       	cpi	r25, 0x78	; 120
    28e2:	09 f0       	breq	.+2      	; 0x28e6 <vfprintf+0x25e>
    28e4:	a6 c0       	rjmp	.+332    	; 0x2a32 <vfprintf+0x3aa>
    28e6:	04 c0       	rjmp	.+8      	; 0x28f0 <vfprintf+0x268>
    28e8:	28 e0       	ldi	r18, 0x08	; 8
    28ea:	30 e0       	ldi	r19, 0x00	; 0
    28ec:	0a c0       	rjmp	.+20     	; 0x2902 <vfprintf+0x27a>
    28ee:	10 61       	ori	r17, 0x10	; 16
    28f0:	14 fd       	sbrc	r17, 4
    28f2:	14 60       	ori	r17, 0x04	; 4
    28f4:	20 e1       	ldi	r18, 0x10	; 16
    28f6:	30 e0       	ldi	r19, 0x00	; 0
    28f8:	04 c0       	rjmp	.+8      	; 0x2902 <vfprintf+0x27a>
    28fa:	14 fd       	sbrc	r17, 4
    28fc:	16 60       	ori	r17, 0x06	; 6
    28fe:	20 e1       	ldi	r18, 0x10	; 16
    2900:	32 e0       	ldi	r19, 0x02	; 2
    2902:	17 ff       	sbrs	r17, 7
    2904:	08 c0       	rjmp	.+16     	; 0x2916 <vfprintf+0x28e>
    2906:	f5 01       	movw	r30, r10
    2908:	60 81       	ld	r22, Z
    290a:	71 81       	ldd	r23, Z+1	; 0x01
    290c:	82 81       	ldd	r24, Z+2	; 0x02
    290e:	93 81       	ldd	r25, Z+3	; 0x03
    2910:	44 e0       	ldi	r20, 0x04	; 4
    2912:	50 e0       	ldi	r21, 0x00	; 0
    2914:	08 c0       	rjmp	.+16     	; 0x2926 <vfprintf+0x29e>
    2916:	f5 01       	movw	r30, r10
    2918:	80 81       	ld	r24, Z
    291a:	91 81       	ldd	r25, Z+1	; 0x01
    291c:	bc 01       	movw	r22, r24
    291e:	80 e0       	ldi	r24, 0x00	; 0
    2920:	90 e0       	ldi	r25, 0x00	; 0
    2922:	42 e0       	ldi	r20, 0x02	; 2
    2924:	50 e0       	ldi	r21, 0x00	; 0
    2926:	a4 0e       	add	r10, r20
    2928:	b5 1e       	adc	r11, r21
    292a:	a1 01       	movw	r20, r2
    292c:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <__ultoa_invert>
    2930:	d8 2e       	mov	r13, r24
    2932:	d2 18       	sub	r13, r2
    2934:	8f e7       	ldi	r24, 0x7F	; 127
    2936:	f8 2e       	mov	r15, r24
    2938:	f1 22       	and	r15, r17
    293a:	f6 fe       	sbrs	r15, 6
    293c:	0b c0       	rjmp	.+22     	; 0x2954 <vfprintf+0x2cc>
    293e:	5e ef       	ldi	r21, 0xFE	; 254
    2940:	f5 22       	and	r15, r21
    2942:	d9 14       	cp	r13, r9
    2944:	38 f4       	brcc	.+14     	; 0x2954 <vfprintf+0x2cc>
    2946:	f4 fe       	sbrs	r15, 4
    2948:	07 c0       	rjmp	.+14     	; 0x2958 <vfprintf+0x2d0>
    294a:	f2 fc       	sbrc	r15, 2
    294c:	05 c0       	rjmp	.+10     	; 0x2958 <vfprintf+0x2d0>
    294e:	8f ee       	ldi	r24, 0xEF	; 239
    2950:	f8 22       	and	r15, r24
    2952:	02 c0       	rjmp	.+4      	; 0x2958 <vfprintf+0x2d0>
    2954:	1d 2d       	mov	r17, r13
    2956:	01 c0       	rjmp	.+2      	; 0x295a <vfprintf+0x2d2>
    2958:	19 2d       	mov	r17, r9
    295a:	f4 fe       	sbrs	r15, 4
    295c:	0d c0       	rjmp	.+26     	; 0x2978 <vfprintf+0x2f0>
    295e:	fe 01       	movw	r30, r28
    2960:	ed 0d       	add	r30, r13
    2962:	f1 1d       	adc	r31, r1
    2964:	80 81       	ld	r24, Z
    2966:	80 33       	cpi	r24, 0x30	; 48
    2968:	19 f4       	brne	.+6      	; 0x2970 <vfprintf+0x2e8>
    296a:	99 ee       	ldi	r25, 0xE9	; 233
    296c:	f9 22       	and	r15, r25
    296e:	08 c0       	rjmp	.+16     	; 0x2980 <vfprintf+0x2f8>
    2970:	1f 5f       	subi	r17, 0xFF	; 255
    2972:	f2 fe       	sbrs	r15, 2
    2974:	05 c0       	rjmp	.+10     	; 0x2980 <vfprintf+0x2f8>
    2976:	03 c0       	rjmp	.+6      	; 0x297e <vfprintf+0x2f6>
    2978:	8f 2d       	mov	r24, r15
    297a:	86 78       	andi	r24, 0x86	; 134
    297c:	09 f0       	breq	.+2      	; 0x2980 <vfprintf+0x2f8>
    297e:	1f 5f       	subi	r17, 0xFF	; 255
    2980:	0f 2d       	mov	r16, r15
    2982:	f3 fc       	sbrc	r15, 3
    2984:	14 c0       	rjmp	.+40     	; 0x29ae <vfprintf+0x326>
    2986:	f0 fe       	sbrs	r15, 0
    2988:	0f c0       	rjmp	.+30     	; 0x29a8 <vfprintf+0x320>
    298a:	1e 15       	cp	r17, r14
    298c:	10 f0       	brcs	.+4      	; 0x2992 <vfprintf+0x30a>
    298e:	9d 2c       	mov	r9, r13
    2990:	0b c0       	rjmp	.+22     	; 0x29a8 <vfprintf+0x320>
    2992:	9d 2c       	mov	r9, r13
    2994:	9e 0c       	add	r9, r14
    2996:	91 1a       	sub	r9, r17
    2998:	1e 2d       	mov	r17, r14
    299a:	06 c0       	rjmp	.+12     	; 0x29a8 <vfprintf+0x320>
    299c:	80 e2       	ldi	r24, 0x20	; 32
    299e:	90 e0       	ldi	r25, 0x00	; 0
    29a0:	b3 01       	movw	r22, r6
    29a2:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <fputc>
    29a6:	1f 5f       	subi	r17, 0xFF	; 255
    29a8:	1e 15       	cp	r17, r14
    29aa:	c0 f3       	brcs	.-16     	; 0x299c <vfprintf+0x314>
    29ac:	04 c0       	rjmp	.+8      	; 0x29b6 <vfprintf+0x32e>
    29ae:	1e 15       	cp	r17, r14
    29b0:	10 f4       	brcc	.+4      	; 0x29b6 <vfprintf+0x32e>
    29b2:	e1 1a       	sub	r14, r17
    29b4:	01 c0       	rjmp	.+2      	; 0x29b8 <vfprintf+0x330>
    29b6:	ee 24       	eor	r14, r14
    29b8:	04 ff       	sbrs	r16, 4
    29ba:	0f c0       	rjmp	.+30     	; 0x29da <vfprintf+0x352>
    29bc:	80 e3       	ldi	r24, 0x30	; 48
    29be:	90 e0       	ldi	r25, 0x00	; 0
    29c0:	b3 01       	movw	r22, r6
    29c2:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <fputc>
    29c6:	02 ff       	sbrs	r16, 2
    29c8:	1d c0       	rjmp	.+58     	; 0x2a04 <vfprintf+0x37c>
    29ca:	01 fd       	sbrc	r16, 1
    29cc:	03 c0       	rjmp	.+6      	; 0x29d4 <vfprintf+0x34c>
    29ce:	88 e7       	ldi	r24, 0x78	; 120
    29d0:	90 e0       	ldi	r25, 0x00	; 0
    29d2:	0e c0       	rjmp	.+28     	; 0x29f0 <vfprintf+0x368>
    29d4:	88 e5       	ldi	r24, 0x58	; 88
    29d6:	90 e0       	ldi	r25, 0x00	; 0
    29d8:	0b c0       	rjmp	.+22     	; 0x29f0 <vfprintf+0x368>
    29da:	80 2f       	mov	r24, r16
    29dc:	86 78       	andi	r24, 0x86	; 134
    29de:	91 f0       	breq	.+36     	; 0x2a04 <vfprintf+0x37c>
    29e0:	01 ff       	sbrs	r16, 1
    29e2:	02 c0       	rjmp	.+4      	; 0x29e8 <vfprintf+0x360>
    29e4:	8b e2       	ldi	r24, 0x2B	; 43
    29e6:	01 c0       	rjmp	.+2      	; 0x29ea <vfprintf+0x362>
    29e8:	80 e2       	ldi	r24, 0x20	; 32
    29ea:	f7 fc       	sbrc	r15, 7
    29ec:	8d e2       	ldi	r24, 0x2D	; 45
    29ee:	90 e0       	ldi	r25, 0x00	; 0
    29f0:	b3 01       	movw	r22, r6
    29f2:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <fputc>
    29f6:	06 c0       	rjmp	.+12     	; 0x2a04 <vfprintf+0x37c>
    29f8:	80 e3       	ldi	r24, 0x30	; 48
    29fa:	90 e0       	ldi	r25, 0x00	; 0
    29fc:	b3 01       	movw	r22, r6
    29fe:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <fputc>
    2a02:	9a 94       	dec	r9
    2a04:	d9 14       	cp	r13, r9
    2a06:	c0 f3       	brcs	.-16     	; 0x29f8 <vfprintf+0x370>
    2a08:	da 94       	dec	r13
    2a0a:	f1 01       	movw	r30, r2
    2a0c:	ed 0d       	add	r30, r13
    2a0e:	f1 1d       	adc	r31, r1
    2a10:	80 81       	ld	r24, Z
    2a12:	90 e0       	ldi	r25, 0x00	; 0
    2a14:	b3 01       	movw	r22, r6
    2a16:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <fputc>
    2a1a:	dd 20       	and	r13, r13
    2a1c:	a9 f7       	brne	.-22     	; 0x2a08 <vfprintf+0x380>
    2a1e:	06 c0       	rjmp	.+12     	; 0x2a2c <vfprintf+0x3a4>
    2a20:	80 e2       	ldi	r24, 0x20	; 32
    2a22:	90 e0       	ldi	r25, 0x00	; 0
    2a24:	b3 01       	movw	r22, r6
    2a26:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <fputc>
    2a2a:	ea 94       	dec	r14
    2a2c:	ee 20       	and	r14, r14
    2a2e:	c1 f7       	brne	.-16     	; 0x2a20 <vfprintf+0x398>
    2a30:	43 ce       	rjmp	.-890    	; 0x26b8 <vfprintf+0x30>
    2a32:	f3 01       	movw	r30, r6
    2a34:	66 81       	ldd	r22, Z+6	; 0x06
    2a36:	77 81       	ldd	r23, Z+7	; 0x07
    2a38:	cb 01       	movw	r24, r22
    2a3a:	2b 96       	adiw	r28, 0x0b	; 11
    2a3c:	e2 e1       	ldi	r30, 0x12	; 18
    2a3e:	0c 94 05 13 	jmp	0x260a	; 0x260a <__epilogue_restores__>

00002a42 <strnlen_P>:
    2a42:	fc 01       	movw	r30, r24
    2a44:	05 90       	lpm	r0, Z+
    2a46:	61 50       	subi	r22, 0x01	; 1
    2a48:	70 40       	sbci	r23, 0x00	; 0
    2a4a:	01 10       	cpse	r0, r1
    2a4c:	d8 f7       	brcc	.-10     	; 0x2a44 <strnlen_P+0x2>
    2a4e:	80 95       	com	r24
    2a50:	90 95       	com	r25
    2a52:	8e 0f       	add	r24, r30
    2a54:	9f 1f       	adc	r25, r31
    2a56:	08 95       	ret

00002a58 <strnlen>:
    2a58:	fc 01       	movw	r30, r24
    2a5a:	61 50       	subi	r22, 0x01	; 1
    2a5c:	70 40       	sbci	r23, 0x00	; 0
    2a5e:	01 90       	ld	r0, Z+
    2a60:	01 10       	cpse	r0, r1
    2a62:	d8 f7       	brcc	.-10     	; 0x2a5a <strnlen+0x2>
    2a64:	80 95       	com	r24
    2a66:	90 95       	com	r25
    2a68:	8e 0f       	add	r24, r30
    2a6a:	9f 1f       	adc	r25, r31
    2a6c:	08 95       	ret

00002a6e <fputc>:
    2a6e:	0f 93       	push	r16
    2a70:	1f 93       	push	r17
    2a72:	cf 93       	push	r28
    2a74:	df 93       	push	r29
    2a76:	8c 01       	movw	r16, r24
    2a78:	eb 01       	movw	r28, r22
    2a7a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a7c:	81 ff       	sbrs	r24, 1
    2a7e:	1b c0       	rjmp	.+54     	; 0x2ab6 <fputc+0x48>
    2a80:	82 ff       	sbrs	r24, 2
    2a82:	0d c0       	rjmp	.+26     	; 0x2a9e <fputc+0x30>
    2a84:	2e 81       	ldd	r18, Y+6	; 0x06
    2a86:	3f 81       	ldd	r19, Y+7	; 0x07
    2a88:	8c 81       	ldd	r24, Y+4	; 0x04
    2a8a:	9d 81       	ldd	r25, Y+5	; 0x05
    2a8c:	28 17       	cp	r18, r24
    2a8e:	39 07       	cpc	r19, r25
    2a90:	64 f4       	brge	.+24     	; 0x2aaa <fputc+0x3c>
    2a92:	e8 81       	ld	r30, Y
    2a94:	f9 81       	ldd	r31, Y+1	; 0x01
    2a96:	01 93       	st	Z+, r16
    2a98:	f9 83       	std	Y+1, r31	; 0x01
    2a9a:	e8 83       	st	Y, r30
    2a9c:	06 c0       	rjmp	.+12     	; 0x2aaa <fputc+0x3c>
    2a9e:	e8 85       	ldd	r30, Y+8	; 0x08
    2aa0:	f9 85       	ldd	r31, Y+9	; 0x09
    2aa2:	80 2f       	mov	r24, r16
    2aa4:	09 95       	icall
    2aa6:	89 2b       	or	r24, r25
    2aa8:	31 f4       	brne	.+12     	; 0x2ab6 <fputc+0x48>
    2aaa:	8e 81       	ldd	r24, Y+6	; 0x06
    2aac:	9f 81       	ldd	r25, Y+7	; 0x07
    2aae:	01 96       	adiw	r24, 0x01	; 1
    2ab0:	9f 83       	std	Y+7, r25	; 0x07
    2ab2:	8e 83       	std	Y+6, r24	; 0x06
    2ab4:	02 c0       	rjmp	.+4      	; 0x2aba <fputc+0x4c>
    2ab6:	0f ef       	ldi	r16, 0xFF	; 255
    2ab8:	1f ef       	ldi	r17, 0xFF	; 255
    2aba:	c8 01       	movw	r24, r16
    2abc:	df 91       	pop	r29
    2abe:	cf 91       	pop	r28
    2ac0:	1f 91       	pop	r17
    2ac2:	0f 91       	pop	r16
    2ac4:	08 95       	ret

00002ac6 <__ultoa_invert>:
    2ac6:	fa 01       	movw	r30, r20
    2ac8:	aa 27       	eor	r26, r26
    2aca:	28 30       	cpi	r18, 0x08	; 8
    2acc:	51 f1       	breq	.+84     	; 0x2b22 <__ultoa_invert+0x5c>
    2ace:	20 31       	cpi	r18, 0x10	; 16
    2ad0:	81 f1       	breq	.+96     	; 0x2b32 <__ultoa_invert+0x6c>
    2ad2:	e8 94       	clt
    2ad4:	6f 93       	push	r22
    2ad6:	6e 7f       	andi	r22, 0xFE	; 254
    2ad8:	6e 5f       	subi	r22, 0xFE	; 254
    2ada:	7f 4f       	sbci	r23, 0xFF	; 255
    2adc:	8f 4f       	sbci	r24, 0xFF	; 255
    2ade:	9f 4f       	sbci	r25, 0xFF	; 255
    2ae0:	af 4f       	sbci	r26, 0xFF	; 255
    2ae2:	b1 e0       	ldi	r27, 0x01	; 1
    2ae4:	3e d0       	rcall	.+124    	; 0x2b62 <__ultoa_invert+0x9c>
    2ae6:	b4 e0       	ldi	r27, 0x04	; 4
    2ae8:	3c d0       	rcall	.+120    	; 0x2b62 <__ultoa_invert+0x9c>
    2aea:	67 0f       	add	r22, r23
    2aec:	78 1f       	adc	r23, r24
    2aee:	89 1f       	adc	r24, r25
    2af0:	9a 1f       	adc	r25, r26
    2af2:	a1 1d       	adc	r26, r1
    2af4:	68 0f       	add	r22, r24
    2af6:	79 1f       	adc	r23, r25
    2af8:	8a 1f       	adc	r24, r26
    2afa:	91 1d       	adc	r25, r1
    2afc:	a1 1d       	adc	r26, r1
    2afe:	6a 0f       	add	r22, r26
    2b00:	71 1d       	adc	r23, r1
    2b02:	81 1d       	adc	r24, r1
    2b04:	91 1d       	adc	r25, r1
    2b06:	a1 1d       	adc	r26, r1
    2b08:	20 d0       	rcall	.+64     	; 0x2b4a <__ultoa_invert+0x84>
    2b0a:	09 f4       	brne	.+2      	; 0x2b0e <__ultoa_invert+0x48>
    2b0c:	68 94       	set
    2b0e:	3f 91       	pop	r19
    2b10:	2a e0       	ldi	r18, 0x0A	; 10
    2b12:	26 9f       	mul	r18, r22
    2b14:	11 24       	eor	r1, r1
    2b16:	30 19       	sub	r19, r0
    2b18:	30 5d       	subi	r19, 0xD0	; 208
    2b1a:	31 93       	st	Z+, r19
    2b1c:	de f6       	brtc	.-74     	; 0x2ad4 <__ultoa_invert+0xe>
    2b1e:	cf 01       	movw	r24, r30
    2b20:	08 95       	ret
    2b22:	46 2f       	mov	r20, r22
    2b24:	47 70       	andi	r20, 0x07	; 7
    2b26:	40 5d       	subi	r20, 0xD0	; 208
    2b28:	41 93       	st	Z+, r20
    2b2a:	b3 e0       	ldi	r27, 0x03	; 3
    2b2c:	0f d0       	rcall	.+30     	; 0x2b4c <__ultoa_invert+0x86>
    2b2e:	c9 f7       	brne	.-14     	; 0x2b22 <__ultoa_invert+0x5c>
    2b30:	f6 cf       	rjmp	.-20     	; 0x2b1e <__ultoa_invert+0x58>
    2b32:	46 2f       	mov	r20, r22
    2b34:	4f 70       	andi	r20, 0x0F	; 15
    2b36:	40 5d       	subi	r20, 0xD0	; 208
    2b38:	4a 33       	cpi	r20, 0x3A	; 58
    2b3a:	18 f0       	brcs	.+6      	; 0x2b42 <__ultoa_invert+0x7c>
    2b3c:	49 5d       	subi	r20, 0xD9	; 217
    2b3e:	31 fd       	sbrc	r19, 1
    2b40:	40 52       	subi	r20, 0x20	; 32
    2b42:	41 93       	st	Z+, r20
    2b44:	02 d0       	rcall	.+4      	; 0x2b4a <__ultoa_invert+0x84>
    2b46:	a9 f7       	brne	.-22     	; 0x2b32 <__ultoa_invert+0x6c>
    2b48:	ea cf       	rjmp	.-44     	; 0x2b1e <__ultoa_invert+0x58>
    2b4a:	b4 e0       	ldi	r27, 0x04	; 4
    2b4c:	a6 95       	lsr	r26
    2b4e:	97 95       	ror	r25
    2b50:	87 95       	ror	r24
    2b52:	77 95       	ror	r23
    2b54:	67 95       	ror	r22
    2b56:	ba 95       	dec	r27
    2b58:	c9 f7       	brne	.-14     	; 0x2b4c <__ultoa_invert+0x86>
    2b5a:	00 97       	sbiw	r24, 0x00	; 0
    2b5c:	61 05       	cpc	r22, r1
    2b5e:	71 05       	cpc	r23, r1
    2b60:	08 95       	ret
    2b62:	9b 01       	movw	r18, r22
    2b64:	ac 01       	movw	r20, r24
    2b66:	0a 2e       	mov	r0, r26
    2b68:	06 94       	lsr	r0
    2b6a:	57 95       	ror	r21
    2b6c:	47 95       	ror	r20
    2b6e:	37 95       	ror	r19
    2b70:	27 95       	ror	r18
    2b72:	ba 95       	dec	r27
    2b74:	c9 f7       	brne	.-14     	; 0x2b68 <__ultoa_invert+0xa2>
    2b76:	62 0f       	add	r22, r18
    2b78:	73 1f       	adc	r23, r19
    2b7a:	84 1f       	adc	r24, r20
    2b7c:	95 1f       	adc	r25, r21
    2b7e:	a0 1d       	adc	r26, r0
    2b80:	08 95       	ret

00002b82 <_exit>:
    2b82:	f8 94       	cli

00002b84 <__stop_program>:
    2b84:	ff cf       	rjmp	.-2      	; 0x2b84 <__stop_program>
