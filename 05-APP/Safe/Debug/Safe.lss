
Safe.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003068  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000009e  00800060  00003068  000030fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  008000fe  008000fe  0000319a  2**0
                  ALLOC
  3 .stab         000023ac  00000000  00000000  0000319c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d15  00000000  00000000  00005548  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000625d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000639d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000650d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008156  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009041  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009df0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009f50  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a1dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a9ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e6       	ldi	r30, 0x68	; 104
      68:	f0 e3       	ldi	r31, 0x30	; 48
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3f       	cpi	r26, 0xFE	; 254
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae ef       	ldi	r26, 0xFE	; 254
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 30       	cpi	r26, 0x0A	; 10
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c2 11 	call	0x2384	; 0x2384 <main>
      8a:	0c 94 32 18 	jmp	0x3064	; 0x3064 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 5a 15 	jmp	0x2ab4	; 0x2ab4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 ee       	ldi	r26, 0xE4	; 228
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 76 15 	jmp	0x2aec	; 0x2aec <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 66 15 	jmp	0x2acc	; 0x2acc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 82 15 	jmp	0x2b04	; 0x2b04 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 66 15 	jmp	0x2acc	; 0x2acc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 82 15 	jmp	0x2b04	; 0x2b04 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 5a 15 	jmp	0x2ab4	; 0x2ab4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	84 ee       	ldi	r24, 0xE4	; 228
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 76 15 	jmp	0x2aec	; 0x2aec <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 66 15 	jmp	0x2acc	; 0x2acc <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 82 15 	jmp	0x2b04	; 0x2b04 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 66 15 	jmp	0x2acc	; 0x2acc <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 82 15 	jmp	0x2b04	; 0x2b04 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 66 15 	jmp	0x2acc	; 0x2acc <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 82 15 	jmp	0x2b04	; 0x2b04 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 6a 15 	jmp	0x2ad4	; 0x2ad4 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 86 15 	jmp	0x2b0c	; 0x2b0c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <EEPROM_voidWrite>:
#include "EEPROM_interface.h"
#include "EEPROM_config.h"
#include "EEPROM_private.h"

void EEPROM_voidWrite (u16 copy_u16Address , u8 copy_u8Data)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <EEPROM_voidWrite+0x6>
     b4c:	0f 92       	push	r0
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	9a 83       	std	Y+2, r25	; 0x02
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6b 83       	std	Y+3, r22	; 0x03
	EEARL = (u8)copy_u16Address;
     b58:	ee e3       	ldi	r30, 0x3E	; 62
     b5a:	f0 e0       	ldi	r31, 0x00	; 0
     b5c:	89 81       	ldd	r24, Y+1	; 0x01
     b5e:	80 83       	st	Z, r24
	EEARH = (u8)(copy_u16Address>>8);
     b60:	ef e3       	ldi	r30, 0x3F	; 63
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	89 81       	ldd	r24, Y+1	; 0x01
     b66:	9a 81       	ldd	r25, Y+2	; 0x02
     b68:	89 2f       	mov	r24, r25
     b6a:	99 27       	eor	r25, r25
     b6c:	80 83       	st	Z, r24
	EEDR = copy_u8Data ;
     b6e:	ed e3       	ldi	r30, 0x3D	; 61
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	8b 81       	ldd	r24, Y+3	; 0x03
     b74:	80 83       	st	Z, r24
	
	SET_BIT(EECR , EEMWE);
     b76:	ac e3       	ldi	r26, 0x3C	; 60
     b78:	b0 e0       	ldi	r27, 0x00	; 0
     b7a:	ec e3       	ldi	r30, 0x3C	; 60
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	80 81       	ld	r24, Z
     b80:	84 60       	ori	r24, 0x04	; 4
     b82:	8c 93       	st	X, r24
	SET_BIT (EECR , EEWE);
     b84:	ac e3       	ldi	r26, 0x3C	; 60
     b86:	b0 e0       	ldi	r27, 0x00	; 0
     b88:	ec e3       	ldi	r30, 0x3C	; 60
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	80 81       	ld	r24, Z
     b8e:	82 60       	ori	r24, 0x02	; 2
     b90:	8c 93       	st	X, r24
	while (GET_BIT(EECR,EEWE)==1);
     b92:	ec e3       	ldi	r30, 0x3C	; 60
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	80 81       	ld	r24, Z
     b98:	88 2f       	mov	r24, r24
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	82 70       	andi	r24, 0x02	; 2
     b9e:	90 70       	andi	r25, 0x00	; 0
     ba0:	95 95       	asr	r25
     ba2:	87 95       	ror	r24
     ba4:	81 30       	cpi	r24, 0x01	; 1
     ba6:	91 05       	cpc	r25, r1
     ba8:	a1 f3       	breq	.-24     	; 0xb92 <EEPROM_voidWrite+0x4c>
}
     baa:	0f 90       	pop	r0
     bac:	0f 90       	pop	r0
     bae:	0f 90       	pop	r0
     bb0:	cf 91       	pop	r28
     bb2:	df 91       	pop	r29
     bb4:	08 95       	ret

00000bb6 <EEPROM_voidRead>:
u8 EEPROM_voidRead (u16 copy_u16Address)
{
     bb6:	df 93       	push	r29
     bb8:	cf 93       	push	r28
     bba:	00 d0       	rcall	.+0      	; 0xbbc <EEPROM_voidRead+0x6>
     bbc:	cd b7       	in	r28, 0x3d	; 61
     bbe:	de b7       	in	r29, 0x3e	; 62
     bc0:	9a 83       	std	Y+2, r25	; 0x02
     bc2:	89 83       	std	Y+1, r24	; 0x01
	
	EEARL = (u8)copy_u16Address;
     bc4:	ee e3       	ldi	r30, 0x3E	; 62
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	89 81       	ldd	r24, Y+1	; 0x01
     bca:	80 83       	st	Z, r24
	EEARH = (u8)(copy_u16Address>>8);
     bcc:	ef e3       	ldi	r30, 0x3F	; 63
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	89 81       	ldd	r24, Y+1	; 0x01
     bd2:	9a 81       	ldd	r25, Y+2	; 0x02
     bd4:	89 2f       	mov	r24, r25
     bd6:	99 27       	eor	r25, r25
     bd8:	80 83       	st	Z, r24
	SET_BIT (EECR , EERE);
     bda:	ac e3       	ldi	r26, 0x3C	; 60
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	ec e3       	ldi	r30, 0x3C	; 60
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	81 60       	ori	r24, 0x01	; 1
     be6:	8c 93       	st	X, r24
	return EEDR ; 
     be8:	ed e3       	ldi	r30, 0x3D	; 61
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	80 81       	ld	r24, Z
}
     bee:	0f 90       	pop	r0
     bf0:	0f 90       	pop	r0
     bf2:	cf 91       	pop	r28
     bf4:	df 91       	pop	r29
     bf6:	08 95       	ret

00000bf8 <GPIO_voidSetPinDDR>:




	void GPIO_voidSetPinDDR (u8  copy_u8Port ,u8 copy_u8Pin , u8 copy_u8Mode )
	{
     bf8:	df 93       	push	r29
     bfa:	cf 93       	push	r28
     bfc:	00 d0       	rcall	.+0      	; 0xbfe <GPIO_voidSetPinDDR+0x6>
     bfe:	00 d0       	rcall	.+0      	; 0xc00 <GPIO_voidSetPinDDR+0x8>
     c00:	0f 92       	push	r0
     c02:	cd b7       	in	r28, 0x3d	; 61
     c04:	de b7       	in	r29, 0x3e	; 62
     c06:	89 83       	std	Y+1, r24	; 0x01
     c08:	6a 83       	std	Y+2, r22	; 0x02
     c0a:	4b 83       	std	Y+3, r20	; 0x03
		switch(copy_u8Port)
     c0c:	89 81       	ldd	r24, Y+1	; 0x01
     c0e:	28 2f       	mov	r18, r24
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	3d 83       	std	Y+5, r19	; 0x05
     c14:	2c 83       	std	Y+4, r18	; 0x04
     c16:	8c 81       	ldd	r24, Y+4	; 0x04
     c18:	9d 81       	ldd	r25, Y+5	; 0x05
     c1a:	81 30       	cpi	r24, 0x01	; 1
     c1c:	91 05       	cpc	r25, r1
     c1e:	09 f4       	brne	.+2      	; 0xc22 <GPIO_voidSetPinDDR+0x2a>
     c20:	43 c0       	rjmp	.+134    	; 0xca8 <GPIO_voidSetPinDDR+0xb0>
     c22:	2c 81       	ldd	r18, Y+4	; 0x04
     c24:	3d 81       	ldd	r19, Y+5	; 0x05
     c26:	22 30       	cpi	r18, 0x02	; 2
     c28:	31 05       	cpc	r19, r1
     c2a:	2c f4       	brge	.+10     	; 0xc36 <GPIO_voidSetPinDDR+0x3e>
     c2c:	8c 81       	ldd	r24, Y+4	; 0x04
     c2e:	9d 81       	ldd	r25, Y+5	; 0x05
     c30:	00 97       	sbiw	r24, 0x00	; 0
     c32:	71 f0       	breq	.+28     	; 0xc50 <GPIO_voidSetPinDDR+0x58>
     c34:	bc c0       	rjmp	.+376    	; 0xdae <GPIO_voidSetPinDDR+0x1b6>
     c36:	2c 81       	ldd	r18, Y+4	; 0x04
     c38:	3d 81       	ldd	r19, Y+5	; 0x05
     c3a:	22 30       	cpi	r18, 0x02	; 2
     c3c:	31 05       	cpc	r19, r1
     c3e:	09 f4       	brne	.+2      	; 0xc42 <GPIO_voidSetPinDDR+0x4a>
     c40:	5f c0       	rjmp	.+190    	; 0xd00 <GPIO_voidSetPinDDR+0x108>
     c42:	8c 81       	ldd	r24, Y+4	; 0x04
     c44:	9d 81       	ldd	r25, Y+5	; 0x05
     c46:	83 30       	cpi	r24, 0x03	; 3
     c48:	91 05       	cpc	r25, r1
     c4a:	09 f4       	brne	.+2      	; 0xc4e <GPIO_voidSetPinDDR+0x56>
     c4c:	85 c0       	rjmp	.+266    	; 0xd58 <GPIO_voidSetPinDDR+0x160>
     c4e:	af c0       	rjmp	.+350    	; 0xdae <GPIO_voidSetPinDDR+0x1b6>
		{
			case GPIOA :
				if(copy_u8Mode ==OUTPUT )
     c50:	8b 81       	ldd	r24, Y+3	; 0x03
     c52:	81 30       	cpi	r24, 0x01	; 1
     c54:	a1 f4       	brne	.+40     	; 0xc7e <GPIO_voidSetPinDDR+0x86>
				{
					SET_BIT(DDRA ,copy_u8Pin);
     c56:	aa e3       	ldi	r26, 0x3A	; 58
     c58:	b0 e0       	ldi	r27, 0x00	; 0
     c5a:	ea e3       	ldi	r30, 0x3A	; 58
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	80 81       	ld	r24, Z
     c60:	48 2f       	mov	r20, r24
     c62:	8a 81       	ldd	r24, Y+2	; 0x02
     c64:	28 2f       	mov	r18, r24
     c66:	30 e0       	ldi	r19, 0x00	; 0
     c68:	81 e0       	ldi	r24, 0x01	; 1
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	02 2e       	mov	r0, r18
     c6e:	02 c0       	rjmp	.+4      	; 0xc74 <GPIO_voidSetPinDDR+0x7c>
     c70:	88 0f       	add	r24, r24
     c72:	99 1f       	adc	r25, r25
     c74:	0a 94       	dec	r0
     c76:	e2 f7       	brpl	.-8      	; 0xc70 <GPIO_voidSetPinDDR+0x78>
     c78:	84 2b       	or	r24, r20
     c7a:	8c 93       	st	X, r24
     c7c:	98 c0       	rjmp	.+304    	; 0xdae <GPIO_voidSetPinDDR+0x1b6>
				}
				else {
					CLEAR_BIT(DDRA,copy_u8Pin);
     c7e:	aa e3       	ldi	r26, 0x3A	; 58
     c80:	b0 e0       	ldi	r27, 0x00	; 0
     c82:	ea e3       	ldi	r30, 0x3A	; 58
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	80 81       	ld	r24, Z
     c88:	48 2f       	mov	r20, r24
     c8a:	8a 81       	ldd	r24, Y+2	; 0x02
     c8c:	28 2f       	mov	r18, r24
     c8e:	30 e0       	ldi	r19, 0x00	; 0
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	02 2e       	mov	r0, r18
     c96:	02 c0       	rjmp	.+4      	; 0xc9c <GPIO_voidSetPinDDR+0xa4>
     c98:	88 0f       	add	r24, r24
     c9a:	99 1f       	adc	r25, r25
     c9c:	0a 94       	dec	r0
     c9e:	e2 f7       	brpl	.-8      	; 0xc98 <GPIO_voidSetPinDDR+0xa0>
     ca0:	80 95       	com	r24
     ca2:	84 23       	and	r24, r20
     ca4:	8c 93       	st	X, r24
     ca6:	83 c0       	rjmp	.+262    	; 0xdae <GPIO_voidSetPinDDR+0x1b6>
				}
				break;
			case GPIOB :
				if(copy_u8Mode ==OUTPUT )
     ca8:	8b 81       	ldd	r24, Y+3	; 0x03
     caa:	81 30       	cpi	r24, 0x01	; 1
     cac:	a1 f4       	brne	.+40     	; 0xcd6 <GPIO_voidSetPinDDR+0xde>
				{
					SET_BIT(DDRB ,copy_u8Pin);
     cae:	a7 e3       	ldi	r26, 0x37	; 55
     cb0:	b0 e0       	ldi	r27, 0x00	; 0
     cb2:	e7 e3       	ldi	r30, 0x37	; 55
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	80 81       	ld	r24, Z
     cb8:	48 2f       	mov	r20, r24
     cba:	8a 81       	ldd	r24, Y+2	; 0x02
     cbc:	28 2f       	mov	r18, r24
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	81 e0       	ldi	r24, 0x01	; 1
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	02 2e       	mov	r0, r18
     cc6:	02 c0       	rjmp	.+4      	; 0xccc <GPIO_voidSetPinDDR+0xd4>
     cc8:	88 0f       	add	r24, r24
     cca:	99 1f       	adc	r25, r25
     ccc:	0a 94       	dec	r0
     cce:	e2 f7       	brpl	.-8      	; 0xcc8 <GPIO_voidSetPinDDR+0xd0>
     cd0:	84 2b       	or	r24, r20
     cd2:	8c 93       	st	X, r24
     cd4:	6c c0       	rjmp	.+216    	; 0xdae <GPIO_voidSetPinDDR+0x1b6>
				}
				else {
					CLEAR_BIT(DDRB,copy_u8Pin);
     cd6:	a7 e3       	ldi	r26, 0x37	; 55
     cd8:	b0 e0       	ldi	r27, 0x00	; 0
     cda:	e7 e3       	ldi	r30, 0x37	; 55
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	80 81       	ld	r24, Z
     ce0:	48 2f       	mov	r20, r24
     ce2:	8a 81       	ldd	r24, Y+2	; 0x02
     ce4:	28 2f       	mov	r18, r24
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	02 2e       	mov	r0, r18
     cee:	02 c0       	rjmp	.+4      	; 0xcf4 <GPIO_voidSetPinDDR+0xfc>
     cf0:	88 0f       	add	r24, r24
     cf2:	99 1f       	adc	r25, r25
     cf4:	0a 94       	dec	r0
     cf6:	e2 f7       	brpl	.-8      	; 0xcf0 <GPIO_voidSetPinDDR+0xf8>
     cf8:	80 95       	com	r24
     cfa:	84 23       	and	r24, r20
     cfc:	8c 93       	st	X, r24
     cfe:	57 c0       	rjmp	.+174    	; 0xdae <GPIO_voidSetPinDDR+0x1b6>
				}
				break;
			case GPIOC :
				if(copy_u8Mode ==OUTPUT )
     d00:	8b 81       	ldd	r24, Y+3	; 0x03
     d02:	81 30       	cpi	r24, 0x01	; 1
     d04:	a1 f4       	brne	.+40     	; 0xd2e <GPIO_voidSetPinDDR+0x136>
				{
					SET_BIT(DDRC ,copy_u8Pin);
     d06:	a4 e3       	ldi	r26, 0x34	; 52
     d08:	b0 e0       	ldi	r27, 0x00	; 0
     d0a:	e4 e3       	ldi	r30, 0x34	; 52
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	80 81       	ld	r24, Z
     d10:	48 2f       	mov	r20, r24
     d12:	8a 81       	ldd	r24, Y+2	; 0x02
     d14:	28 2f       	mov	r18, r24
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	02 2e       	mov	r0, r18
     d1e:	02 c0       	rjmp	.+4      	; 0xd24 <GPIO_voidSetPinDDR+0x12c>
     d20:	88 0f       	add	r24, r24
     d22:	99 1f       	adc	r25, r25
     d24:	0a 94       	dec	r0
     d26:	e2 f7       	brpl	.-8      	; 0xd20 <GPIO_voidSetPinDDR+0x128>
     d28:	84 2b       	or	r24, r20
     d2a:	8c 93       	st	X, r24
     d2c:	40 c0       	rjmp	.+128    	; 0xdae <GPIO_voidSetPinDDR+0x1b6>
				}
				else {
					CLEAR_BIT(DDRC,copy_u8Pin);
     d2e:	a4 e3       	ldi	r26, 0x34	; 52
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	e4 e3       	ldi	r30, 0x34	; 52
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	80 81       	ld	r24, Z
     d38:	48 2f       	mov	r20, r24
     d3a:	8a 81       	ldd	r24, Y+2	; 0x02
     d3c:	28 2f       	mov	r18, r24
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	02 2e       	mov	r0, r18
     d46:	02 c0       	rjmp	.+4      	; 0xd4c <GPIO_voidSetPinDDR+0x154>
     d48:	88 0f       	add	r24, r24
     d4a:	99 1f       	adc	r25, r25
     d4c:	0a 94       	dec	r0
     d4e:	e2 f7       	brpl	.-8      	; 0xd48 <GPIO_voidSetPinDDR+0x150>
     d50:	80 95       	com	r24
     d52:	84 23       	and	r24, r20
     d54:	8c 93       	st	X, r24
     d56:	2b c0       	rjmp	.+86     	; 0xdae <GPIO_voidSetPinDDR+0x1b6>
				}
				break;
			case GPIOD :
				if(copy_u8Mode ==OUTPUT )
     d58:	8b 81       	ldd	r24, Y+3	; 0x03
     d5a:	81 30       	cpi	r24, 0x01	; 1
     d5c:	a1 f4       	brne	.+40     	; 0xd86 <GPIO_voidSetPinDDR+0x18e>
				{
					SET_BIT(DDRD ,copy_u8Pin);
     d5e:	a1 e3       	ldi	r26, 0x31	; 49
     d60:	b0 e0       	ldi	r27, 0x00	; 0
     d62:	e1 e3       	ldi	r30, 0x31	; 49
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	80 81       	ld	r24, Z
     d68:	48 2f       	mov	r20, r24
     d6a:	8a 81       	ldd	r24, Y+2	; 0x02
     d6c:	28 2f       	mov	r18, r24
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	81 e0       	ldi	r24, 0x01	; 1
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	02 2e       	mov	r0, r18
     d76:	02 c0       	rjmp	.+4      	; 0xd7c <GPIO_voidSetPinDDR+0x184>
     d78:	88 0f       	add	r24, r24
     d7a:	99 1f       	adc	r25, r25
     d7c:	0a 94       	dec	r0
     d7e:	e2 f7       	brpl	.-8      	; 0xd78 <GPIO_voidSetPinDDR+0x180>
     d80:	84 2b       	or	r24, r20
     d82:	8c 93       	st	X, r24
     d84:	14 c0       	rjmp	.+40     	; 0xdae <GPIO_voidSetPinDDR+0x1b6>
				}
				else {
					CLEAR_BIT(DDRD,copy_u8Pin);
     d86:	a1 e3       	ldi	r26, 0x31	; 49
     d88:	b0 e0       	ldi	r27, 0x00	; 0
     d8a:	e1 e3       	ldi	r30, 0x31	; 49
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	48 2f       	mov	r20, r24
     d92:	8a 81       	ldd	r24, Y+2	; 0x02
     d94:	28 2f       	mov	r18, r24
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	02 2e       	mov	r0, r18
     d9e:	02 c0       	rjmp	.+4      	; 0xda4 <GPIO_voidSetPinDDR+0x1ac>
     da0:	88 0f       	add	r24, r24
     da2:	99 1f       	adc	r25, r25
     da4:	0a 94       	dec	r0
     da6:	e2 f7       	brpl	.-8      	; 0xda0 <GPIO_voidSetPinDDR+0x1a8>
     da8:	80 95       	com	r24
     daa:	84 23       	and	r24, r20
     dac:	8c 93       	st	X, r24
				}
				break;	
			default:
				break;
		}
	}
     dae:	0f 90       	pop	r0
     db0:	0f 90       	pop	r0
     db2:	0f 90       	pop	r0
     db4:	0f 90       	pop	r0
     db6:	0f 90       	pop	r0
     db8:	cf 91       	pop	r28
     dba:	df 91       	pop	r29
     dbc:	08 95       	ret

00000dbe <GPIO_voidWritePin>:
	
	void GPIO_voidWritePin (u8  copy_u8Port ,u8 copy_u8Pin , u8 copy_u8Value )
	{
     dbe:	df 93       	push	r29
     dc0:	cf 93       	push	r28
     dc2:	00 d0       	rcall	.+0      	; 0xdc4 <GPIO_voidWritePin+0x6>
     dc4:	00 d0       	rcall	.+0      	; 0xdc6 <GPIO_voidWritePin+0x8>
     dc6:	0f 92       	push	r0
     dc8:	cd b7       	in	r28, 0x3d	; 61
     dca:	de b7       	in	r29, 0x3e	; 62
     dcc:	89 83       	std	Y+1, r24	; 0x01
     dce:	6a 83       	std	Y+2, r22	; 0x02
     dd0:	4b 83       	std	Y+3, r20	; 0x03
		switch(copy_u8Port)
     dd2:	89 81       	ldd	r24, Y+1	; 0x01
     dd4:	28 2f       	mov	r18, r24
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	3d 83       	std	Y+5, r19	; 0x05
     dda:	2c 83       	std	Y+4, r18	; 0x04
     ddc:	8c 81       	ldd	r24, Y+4	; 0x04
     dde:	9d 81       	ldd	r25, Y+5	; 0x05
     de0:	81 30       	cpi	r24, 0x01	; 1
     de2:	91 05       	cpc	r25, r1
     de4:	09 f4       	brne	.+2      	; 0xde8 <GPIO_voidWritePin+0x2a>
     de6:	43 c0       	rjmp	.+134    	; 0xe6e <GPIO_voidWritePin+0xb0>
     de8:	2c 81       	ldd	r18, Y+4	; 0x04
     dea:	3d 81       	ldd	r19, Y+5	; 0x05
     dec:	22 30       	cpi	r18, 0x02	; 2
     dee:	31 05       	cpc	r19, r1
     df0:	2c f4       	brge	.+10     	; 0xdfc <GPIO_voidWritePin+0x3e>
     df2:	8c 81       	ldd	r24, Y+4	; 0x04
     df4:	9d 81       	ldd	r25, Y+5	; 0x05
     df6:	00 97       	sbiw	r24, 0x00	; 0
     df8:	71 f0       	breq	.+28     	; 0xe16 <GPIO_voidWritePin+0x58>
     dfa:	bc c0       	rjmp	.+376    	; 0xf74 <GPIO_voidWritePin+0x1b6>
     dfc:	2c 81       	ldd	r18, Y+4	; 0x04
     dfe:	3d 81       	ldd	r19, Y+5	; 0x05
     e00:	22 30       	cpi	r18, 0x02	; 2
     e02:	31 05       	cpc	r19, r1
     e04:	09 f4       	brne	.+2      	; 0xe08 <GPIO_voidWritePin+0x4a>
     e06:	5f c0       	rjmp	.+190    	; 0xec6 <GPIO_voidWritePin+0x108>
     e08:	8c 81       	ldd	r24, Y+4	; 0x04
     e0a:	9d 81       	ldd	r25, Y+5	; 0x05
     e0c:	83 30       	cpi	r24, 0x03	; 3
     e0e:	91 05       	cpc	r25, r1
     e10:	09 f4       	brne	.+2      	; 0xe14 <GPIO_voidWritePin+0x56>
     e12:	85 c0       	rjmp	.+266    	; 0xf1e <GPIO_voidWritePin+0x160>
     e14:	af c0       	rjmp	.+350    	; 0xf74 <GPIO_voidWritePin+0x1b6>
		{
			case GPIOA :
				if(copy_u8Value ==HIGH )
     e16:	8b 81       	ldd	r24, Y+3	; 0x03
     e18:	81 30       	cpi	r24, 0x01	; 1
     e1a:	a1 f4       	brne	.+40     	; 0xe44 <GPIO_voidWritePin+0x86>
				{
					SET_BIT(PORTA ,copy_u8Pin);
     e1c:	ab e3       	ldi	r26, 0x3B	; 59
     e1e:	b0 e0       	ldi	r27, 0x00	; 0
     e20:	eb e3       	ldi	r30, 0x3B	; 59
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	80 81       	ld	r24, Z
     e26:	48 2f       	mov	r20, r24
     e28:	8a 81       	ldd	r24, Y+2	; 0x02
     e2a:	28 2f       	mov	r18, r24
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	81 e0       	ldi	r24, 0x01	; 1
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	02 2e       	mov	r0, r18
     e34:	02 c0       	rjmp	.+4      	; 0xe3a <GPIO_voidWritePin+0x7c>
     e36:	88 0f       	add	r24, r24
     e38:	99 1f       	adc	r25, r25
     e3a:	0a 94       	dec	r0
     e3c:	e2 f7       	brpl	.-8      	; 0xe36 <GPIO_voidWritePin+0x78>
     e3e:	84 2b       	or	r24, r20
     e40:	8c 93       	st	X, r24
     e42:	98 c0       	rjmp	.+304    	; 0xf74 <GPIO_voidWritePin+0x1b6>
				}
				else {
					CLEAR_BIT(PORTA,copy_u8Pin);
     e44:	ab e3       	ldi	r26, 0x3B	; 59
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	eb e3       	ldi	r30, 0x3B	; 59
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	48 2f       	mov	r20, r24
     e50:	8a 81       	ldd	r24, Y+2	; 0x02
     e52:	28 2f       	mov	r18, r24
     e54:	30 e0       	ldi	r19, 0x00	; 0
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	02 2e       	mov	r0, r18
     e5c:	02 c0       	rjmp	.+4      	; 0xe62 <GPIO_voidWritePin+0xa4>
     e5e:	88 0f       	add	r24, r24
     e60:	99 1f       	adc	r25, r25
     e62:	0a 94       	dec	r0
     e64:	e2 f7       	brpl	.-8      	; 0xe5e <GPIO_voidWritePin+0xa0>
     e66:	80 95       	com	r24
     e68:	84 23       	and	r24, r20
     e6a:	8c 93       	st	X, r24
     e6c:	83 c0       	rjmp	.+262    	; 0xf74 <GPIO_voidWritePin+0x1b6>
				}
				break;
			case GPIOB :
				if(copy_u8Value ==HIGH )
     e6e:	8b 81       	ldd	r24, Y+3	; 0x03
     e70:	81 30       	cpi	r24, 0x01	; 1
     e72:	a1 f4       	brne	.+40     	; 0xe9c <GPIO_voidWritePin+0xde>
				{
					SET_BIT(PORTB ,copy_u8Pin);
     e74:	a8 e3       	ldi	r26, 0x38	; 56
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	e8 e3       	ldi	r30, 0x38	; 56
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	48 2f       	mov	r20, r24
     e80:	8a 81       	ldd	r24, Y+2	; 0x02
     e82:	28 2f       	mov	r18, r24
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	02 2e       	mov	r0, r18
     e8c:	02 c0       	rjmp	.+4      	; 0xe92 <GPIO_voidWritePin+0xd4>
     e8e:	88 0f       	add	r24, r24
     e90:	99 1f       	adc	r25, r25
     e92:	0a 94       	dec	r0
     e94:	e2 f7       	brpl	.-8      	; 0xe8e <GPIO_voidWritePin+0xd0>
     e96:	84 2b       	or	r24, r20
     e98:	8c 93       	st	X, r24
     e9a:	6c c0       	rjmp	.+216    	; 0xf74 <GPIO_voidWritePin+0x1b6>
				}
				else {
					CLEAR_BIT(PORTB,copy_u8Pin);
     e9c:	a8 e3       	ldi	r26, 0x38	; 56
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	e8 e3       	ldi	r30, 0x38	; 56
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	48 2f       	mov	r20, r24
     ea8:	8a 81       	ldd	r24, Y+2	; 0x02
     eaa:	28 2f       	mov	r18, r24
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	02 2e       	mov	r0, r18
     eb4:	02 c0       	rjmp	.+4      	; 0xeba <GPIO_voidWritePin+0xfc>
     eb6:	88 0f       	add	r24, r24
     eb8:	99 1f       	adc	r25, r25
     eba:	0a 94       	dec	r0
     ebc:	e2 f7       	brpl	.-8      	; 0xeb6 <GPIO_voidWritePin+0xf8>
     ebe:	80 95       	com	r24
     ec0:	84 23       	and	r24, r20
     ec2:	8c 93       	st	X, r24
     ec4:	57 c0       	rjmp	.+174    	; 0xf74 <GPIO_voidWritePin+0x1b6>
				}
				break;
			case GPIOC :
				if(copy_u8Value ==HIGH )
     ec6:	8b 81       	ldd	r24, Y+3	; 0x03
     ec8:	81 30       	cpi	r24, 0x01	; 1
     eca:	a1 f4       	brne	.+40     	; 0xef4 <GPIO_voidWritePin+0x136>
				{
					SET_BIT(PORTC ,copy_u8Pin);
     ecc:	a5 e3       	ldi	r26, 0x35	; 53
     ece:	b0 e0       	ldi	r27, 0x00	; 0
     ed0:	e5 e3       	ldi	r30, 0x35	; 53
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	80 81       	ld	r24, Z
     ed6:	48 2f       	mov	r20, r24
     ed8:	8a 81       	ldd	r24, Y+2	; 0x02
     eda:	28 2f       	mov	r18, r24
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	02 2e       	mov	r0, r18
     ee4:	02 c0       	rjmp	.+4      	; 0xeea <GPIO_voidWritePin+0x12c>
     ee6:	88 0f       	add	r24, r24
     ee8:	99 1f       	adc	r25, r25
     eea:	0a 94       	dec	r0
     eec:	e2 f7       	brpl	.-8      	; 0xee6 <GPIO_voidWritePin+0x128>
     eee:	84 2b       	or	r24, r20
     ef0:	8c 93       	st	X, r24
     ef2:	40 c0       	rjmp	.+128    	; 0xf74 <GPIO_voidWritePin+0x1b6>
				}
				else {
					CLEAR_BIT(PORTC,copy_u8Pin);
     ef4:	a5 e3       	ldi	r26, 0x35	; 53
     ef6:	b0 e0       	ldi	r27, 0x00	; 0
     ef8:	e5 e3       	ldi	r30, 0x35	; 53
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	80 81       	ld	r24, Z
     efe:	48 2f       	mov	r20, r24
     f00:	8a 81       	ldd	r24, Y+2	; 0x02
     f02:	28 2f       	mov	r18, r24
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	02 2e       	mov	r0, r18
     f0c:	02 c0       	rjmp	.+4      	; 0xf12 <GPIO_voidWritePin+0x154>
     f0e:	88 0f       	add	r24, r24
     f10:	99 1f       	adc	r25, r25
     f12:	0a 94       	dec	r0
     f14:	e2 f7       	brpl	.-8      	; 0xf0e <GPIO_voidWritePin+0x150>
     f16:	80 95       	com	r24
     f18:	84 23       	and	r24, r20
     f1a:	8c 93       	st	X, r24
     f1c:	2b c0       	rjmp	.+86     	; 0xf74 <GPIO_voidWritePin+0x1b6>
				}
				break;
			case GPIOD :
				if(copy_u8Value == HIGH )
     f1e:	8b 81       	ldd	r24, Y+3	; 0x03
     f20:	81 30       	cpi	r24, 0x01	; 1
     f22:	a1 f4       	brne	.+40     	; 0xf4c <GPIO_voidWritePin+0x18e>
				{
					SET_BIT(PORTD ,copy_u8Pin);
     f24:	a2 e3       	ldi	r26, 0x32	; 50
     f26:	b0 e0       	ldi	r27, 0x00	; 0
     f28:	e2 e3       	ldi	r30, 0x32	; 50
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	48 2f       	mov	r20, r24
     f30:	8a 81       	ldd	r24, Y+2	; 0x02
     f32:	28 2f       	mov	r18, r24
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	02 2e       	mov	r0, r18
     f3c:	02 c0       	rjmp	.+4      	; 0xf42 <GPIO_voidWritePin+0x184>
     f3e:	88 0f       	add	r24, r24
     f40:	99 1f       	adc	r25, r25
     f42:	0a 94       	dec	r0
     f44:	e2 f7       	brpl	.-8      	; 0xf3e <GPIO_voidWritePin+0x180>
     f46:	84 2b       	or	r24, r20
     f48:	8c 93       	st	X, r24
     f4a:	14 c0       	rjmp	.+40     	; 0xf74 <GPIO_voidWritePin+0x1b6>
				}
				else {
					CLEAR_BIT(PORTD,copy_u8Pin);
     f4c:	a2 e3       	ldi	r26, 0x32	; 50
     f4e:	b0 e0       	ldi	r27, 0x00	; 0
     f50:	e2 e3       	ldi	r30, 0x32	; 50
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	80 81       	ld	r24, Z
     f56:	48 2f       	mov	r20, r24
     f58:	8a 81       	ldd	r24, Y+2	; 0x02
     f5a:	28 2f       	mov	r18, r24
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	02 2e       	mov	r0, r18
     f64:	02 c0       	rjmp	.+4      	; 0xf6a <GPIO_voidWritePin+0x1ac>
     f66:	88 0f       	add	r24, r24
     f68:	99 1f       	adc	r25, r25
     f6a:	0a 94       	dec	r0
     f6c:	e2 f7       	brpl	.-8      	; 0xf66 <GPIO_voidWritePin+0x1a8>
     f6e:	80 95       	com	r24
     f70:	84 23       	and	r24, r20
     f72:	8c 93       	st	X, r24
				break;	
			default:
				break;
		}
		
	}
     f74:	0f 90       	pop	r0
     f76:	0f 90       	pop	r0
     f78:	0f 90       	pop	r0
     f7a:	0f 90       	pop	r0
     f7c:	0f 90       	pop	r0
     f7e:	cf 91       	pop	r28
     f80:	df 91       	pop	r29
     f82:	08 95       	ret

00000f84 <GPIO_u8ReadPin>:
	
	u8	GPIO_u8ReadPin(	u8  copy_u8Port ,u8 copy_u8Pin )
	{
     f84:	df 93       	push	r29
     f86:	cf 93       	push	r28
     f88:	00 d0       	rcall	.+0      	; 0xf8a <GPIO_u8ReadPin+0x6>
     f8a:	00 d0       	rcall	.+0      	; 0xf8c <GPIO_u8ReadPin+0x8>
     f8c:	0f 92       	push	r0
     f8e:	cd b7       	in	r28, 0x3d	; 61
     f90:	de b7       	in	r29, 0x3e	; 62
     f92:	8a 83       	std	Y+2, r24	; 0x02
     f94:	6b 83       	std	Y+3, r22	; 0x03
		u8 Local_u8ReturnValue ;
		switch(copy_u8Port){
     f96:	8a 81       	ldd	r24, Y+2	; 0x02
     f98:	28 2f       	mov	r18, r24
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	3d 83       	std	Y+5, r19	; 0x05
     f9e:	2c 83       	std	Y+4, r18	; 0x04
     fa0:	4c 81       	ldd	r20, Y+4	; 0x04
     fa2:	5d 81       	ldd	r21, Y+5	; 0x05
     fa4:	41 30       	cpi	r20, 0x01	; 1
     fa6:	51 05       	cpc	r21, r1
     fa8:	b1 f1       	breq	.+108    	; 0x1016 <GPIO_u8ReadPin+0x92>
     faa:	8c 81       	ldd	r24, Y+4	; 0x04
     fac:	9d 81       	ldd	r25, Y+5	; 0x05
     fae:	82 30       	cpi	r24, 0x02	; 2
     fb0:	91 05       	cpc	r25, r1
     fb2:	34 f4       	brge	.+12     	; 0xfc0 <GPIO_u8ReadPin+0x3c>
     fb4:	2c 81       	ldd	r18, Y+4	; 0x04
     fb6:	3d 81       	ldd	r19, Y+5	; 0x05
     fb8:	21 15       	cp	r18, r1
     fba:	31 05       	cpc	r19, r1
     fbc:	71 f0       	breq	.+28     	; 0xfda <GPIO_u8ReadPin+0x56>
     fbe:	84 c0       	rjmp	.+264    	; 0x10c8 <GPIO_u8ReadPin+0x144>
     fc0:	4c 81       	ldd	r20, Y+4	; 0x04
     fc2:	5d 81       	ldd	r21, Y+5	; 0x05
     fc4:	42 30       	cpi	r20, 0x02	; 2
     fc6:	51 05       	cpc	r21, r1
     fc8:	09 f4       	brne	.+2      	; 0xfcc <GPIO_u8ReadPin+0x48>
     fca:	43 c0       	rjmp	.+134    	; 0x1052 <GPIO_u8ReadPin+0xce>
     fcc:	8c 81       	ldd	r24, Y+4	; 0x04
     fce:	9d 81       	ldd	r25, Y+5	; 0x05
     fd0:	83 30       	cpi	r24, 0x03	; 3
     fd2:	91 05       	cpc	r25, r1
     fd4:	09 f4       	brne	.+2      	; 0xfd8 <GPIO_u8ReadPin+0x54>
     fd6:	5b c0       	rjmp	.+182    	; 0x108e <GPIO_u8ReadPin+0x10a>
     fd8:	77 c0       	rjmp	.+238    	; 0x10c8 <GPIO_u8ReadPin+0x144>
			case GPIOA :
				Local_u8ReturnValue = GET_BIT(PINA,copy_u8Pin);
     fda:	e9 e3       	ldi	r30, 0x39	; 57
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
     fe0:	48 2f       	mov	r20, r24
     fe2:	50 e0       	ldi	r21, 0x00	; 0
     fe4:	8b 81       	ldd	r24, Y+3	; 0x03
     fe6:	28 2f       	mov	r18, r24
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	02 c0       	rjmp	.+4      	; 0xff4 <GPIO_u8ReadPin+0x70>
     ff0:	88 0f       	add	r24, r24
     ff2:	99 1f       	adc	r25, r25
     ff4:	2a 95       	dec	r18
     ff6:	e2 f7       	brpl	.-8      	; 0xff0 <GPIO_u8ReadPin+0x6c>
     ff8:	9a 01       	movw	r18, r20
     ffa:	28 23       	and	r18, r24
     ffc:	39 23       	and	r19, r25
     ffe:	8b 81       	ldd	r24, Y+3	; 0x03
    1000:	88 2f       	mov	r24, r24
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	a9 01       	movw	r20, r18
    1006:	02 c0       	rjmp	.+4      	; 0x100c <GPIO_u8ReadPin+0x88>
    1008:	55 95       	asr	r21
    100a:	47 95       	ror	r20
    100c:	8a 95       	dec	r24
    100e:	e2 f7       	brpl	.-8      	; 0x1008 <GPIO_u8ReadPin+0x84>
    1010:	ca 01       	movw	r24, r20
    1012:	89 83       	std	Y+1, r24	; 0x01
    1014:	59 c0       	rjmp	.+178    	; 0x10c8 <GPIO_u8ReadPin+0x144>
				break ;
			case GPIOB :
				Local_u8ReturnValue = GET_BIT(PINB,copy_u8Pin);
    1016:	e6 e3       	ldi	r30, 0x36	; 54
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	80 81       	ld	r24, Z
    101c:	48 2f       	mov	r20, r24
    101e:	50 e0       	ldi	r21, 0x00	; 0
    1020:	8b 81       	ldd	r24, Y+3	; 0x03
    1022:	28 2f       	mov	r18, r24
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	02 c0       	rjmp	.+4      	; 0x1030 <GPIO_u8ReadPin+0xac>
    102c:	88 0f       	add	r24, r24
    102e:	99 1f       	adc	r25, r25
    1030:	2a 95       	dec	r18
    1032:	e2 f7       	brpl	.-8      	; 0x102c <GPIO_u8ReadPin+0xa8>
    1034:	9a 01       	movw	r18, r20
    1036:	28 23       	and	r18, r24
    1038:	39 23       	and	r19, r25
    103a:	8b 81       	ldd	r24, Y+3	; 0x03
    103c:	88 2f       	mov	r24, r24
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	a9 01       	movw	r20, r18
    1042:	02 c0       	rjmp	.+4      	; 0x1048 <GPIO_u8ReadPin+0xc4>
    1044:	55 95       	asr	r21
    1046:	47 95       	ror	r20
    1048:	8a 95       	dec	r24
    104a:	e2 f7       	brpl	.-8      	; 0x1044 <GPIO_u8ReadPin+0xc0>
    104c:	ca 01       	movw	r24, r20
    104e:	89 83       	std	Y+1, r24	; 0x01
    1050:	3b c0       	rjmp	.+118    	; 0x10c8 <GPIO_u8ReadPin+0x144>
				break ;
			case GPIOC :
				Local_u8ReturnValue = GET_BIT(PINC,copy_u8Pin);
    1052:	e3 e3       	ldi	r30, 0x33	; 51
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	48 2f       	mov	r20, r24
    105a:	50 e0       	ldi	r21, 0x00	; 0
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	28 2f       	mov	r18, r24
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	81 e0       	ldi	r24, 0x01	; 1
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	02 c0       	rjmp	.+4      	; 0x106c <GPIO_u8ReadPin+0xe8>
    1068:	88 0f       	add	r24, r24
    106a:	99 1f       	adc	r25, r25
    106c:	2a 95       	dec	r18
    106e:	e2 f7       	brpl	.-8      	; 0x1068 <GPIO_u8ReadPin+0xe4>
    1070:	9a 01       	movw	r18, r20
    1072:	28 23       	and	r18, r24
    1074:	39 23       	and	r19, r25
    1076:	8b 81       	ldd	r24, Y+3	; 0x03
    1078:	88 2f       	mov	r24, r24
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	a9 01       	movw	r20, r18
    107e:	02 c0       	rjmp	.+4      	; 0x1084 <GPIO_u8ReadPin+0x100>
    1080:	55 95       	asr	r21
    1082:	47 95       	ror	r20
    1084:	8a 95       	dec	r24
    1086:	e2 f7       	brpl	.-8      	; 0x1080 <GPIO_u8ReadPin+0xfc>
    1088:	ca 01       	movw	r24, r20
    108a:	89 83       	std	Y+1, r24	; 0x01
    108c:	1d c0       	rjmp	.+58     	; 0x10c8 <GPIO_u8ReadPin+0x144>
				break ;
			case GPIOD :
				Local_u8ReturnValue = GET_BIT(PIND,copy_u8Pin);
    108e:	e0 e3       	ldi	r30, 0x30	; 48
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	48 2f       	mov	r20, r24
    1096:	50 e0       	ldi	r21, 0x00	; 0
    1098:	8b 81       	ldd	r24, Y+3	; 0x03
    109a:	28 2f       	mov	r18, r24
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	02 c0       	rjmp	.+4      	; 0x10a8 <GPIO_u8ReadPin+0x124>
    10a4:	88 0f       	add	r24, r24
    10a6:	99 1f       	adc	r25, r25
    10a8:	2a 95       	dec	r18
    10aa:	e2 f7       	brpl	.-8      	; 0x10a4 <GPIO_u8ReadPin+0x120>
    10ac:	9a 01       	movw	r18, r20
    10ae:	28 23       	and	r18, r24
    10b0:	39 23       	and	r19, r25
    10b2:	8b 81       	ldd	r24, Y+3	; 0x03
    10b4:	88 2f       	mov	r24, r24
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	a9 01       	movw	r20, r18
    10ba:	02 c0       	rjmp	.+4      	; 0x10c0 <GPIO_u8ReadPin+0x13c>
    10bc:	55 95       	asr	r21
    10be:	47 95       	ror	r20
    10c0:	8a 95       	dec	r24
    10c2:	e2 f7       	brpl	.-8      	; 0x10bc <GPIO_u8ReadPin+0x138>
    10c4:	ca 01       	movw	r24, r20
    10c6:	89 83       	std	Y+1, r24	; 0x01
				break ;
			default:
			break;
		}
		return Local_u8ReturnValue ;
    10c8:	89 81       	ldd	r24, Y+1	; 0x01
		
	}
    10ca:	0f 90       	pop	r0
    10cc:	0f 90       	pop	r0
    10ce:	0f 90       	pop	r0
    10d0:	0f 90       	pop	r0
    10d2:	0f 90       	pop	r0
    10d4:	cf 91       	pop	r28
    10d6:	df 91       	pop	r29
    10d8:	08 95       	ret

000010da <GPIO_voidTogPin>:
	
	void GPIO_voidTogPin 	( u8 copy_u8Port , u8 copy_u8Pin )
	{
    10da:	df 93       	push	r29
    10dc:	cf 93       	push	r28
    10de:	00 d0       	rcall	.+0      	; 0x10e0 <GPIO_voidTogPin+0x6>
    10e0:	00 d0       	rcall	.+0      	; 0x10e2 <GPIO_voidTogPin+0x8>
    10e2:	cd b7       	in	r28, 0x3d	; 61
    10e4:	de b7       	in	r29, 0x3e	; 62
    10e6:	89 83       	std	Y+1, r24	; 0x01
    10e8:	6a 83       	std	Y+2, r22	; 0x02
		switch(copy_u8Port){
    10ea:	89 81       	ldd	r24, Y+1	; 0x01
    10ec:	28 2f       	mov	r18, r24
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	3c 83       	std	Y+4, r19	; 0x04
    10f2:	2b 83       	std	Y+3, r18	; 0x03
    10f4:	8b 81       	ldd	r24, Y+3	; 0x03
    10f6:	9c 81       	ldd	r25, Y+4	; 0x04
    10f8:	81 30       	cpi	r24, 0x01	; 1
    10fa:	91 05       	cpc	r25, r1
    10fc:	49 f1       	breq	.+82     	; 0x1150 <GPIO_voidTogPin+0x76>
    10fe:	2b 81       	ldd	r18, Y+3	; 0x03
    1100:	3c 81       	ldd	r19, Y+4	; 0x04
    1102:	22 30       	cpi	r18, 0x02	; 2
    1104:	31 05       	cpc	r19, r1
    1106:	2c f4       	brge	.+10     	; 0x1112 <GPIO_voidTogPin+0x38>
    1108:	8b 81       	ldd	r24, Y+3	; 0x03
    110a:	9c 81       	ldd	r25, Y+4	; 0x04
    110c:	00 97       	sbiw	r24, 0x00	; 0
    110e:	61 f0       	breq	.+24     	; 0x1128 <GPIO_voidTogPin+0x4e>
    1110:	5a c0       	rjmp	.+180    	; 0x11c6 <GPIO_voidTogPin+0xec>
    1112:	2b 81       	ldd	r18, Y+3	; 0x03
    1114:	3c 81       	ldd	r19, Y+4	; 0x04
    1116:	22 30       	cpi	r18, 0x02	; 2
    1118:	31 05       	cpc	r19, r1
    111a:	71 f1       	breq	.+92     	; 0x1178 <GPIO_voidTogPin+0x9e>
    111c:	8b 81       	ldd	r24, Y+3	; 0x03
    111e:	9c 81       	ldd	r25, Y+4	; 0x04
    1120:	83 30       	cpi	r24, 0x03	; 3
    1122:	91 05       	cpc	r25, r1
    1124:	e9 f1       	breq	.+122    	; 0x11a0 <GPIO_voidTogPin+0xc6>
    1126:	4f c0       	rjmp	.+158    	; 0x11c6 <GPIO_voidTogPin+0xec>
			case GPIOA :
				TOG_BIT(PORTA,copy_u8Pin);
    1128:	ab e3       	ldi	r26, 0x3B	; 59
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	eb e3       	ldi	r30, 0x3B	; 59
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	48 2f       	mov	r20, r24
    1134:	8a 81       	ldd	r24, Y+2	; 0x02
    1136:	28 2f       	mov	r18, r24
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	02 2e       	mov	r0, r18
    1140:	02 c0       	rjmp	.+4      	; 0x1146 <GPIO_voidTogPin+0x6c>
    1142:	88 0f       	add	r24, r24
    1144:	99 1f       	adc	r25, r25
    1146:	0a 94       	dec	r0
    1148:	e2 f7       	brpl	.-8      	; 0x1142 <GPIO_voidTogPin+0x68>
    114a:	84 27       	eor	r24, r20
    114c:	8c 93       	st	X, r24
    114e:	3b c0       	rjmp	.+118    	; 0x11c6 <GPIO_voidTogPin+0xec>
				break ;             
			case GPIOB :            
				TOG_BIT(PORTB,copy_u8Pin);
    1150:	a8 e3       	ldi	r26, 0x38	; 56
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	e8 e3       	ldi	r30, 0x38	; 56
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	48 2f       	mov	r20, r24
    115c:	8a 81       	ldd	r24, Y+2	; 0x02
    115e:	28 2f       	mov	r18, r24
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	02 2e       	mov	r0, r18
    1168:	02 c0       	rjmp	.+4      	; 0x116e <GPIO_voidTogPin+0x94>
    116a:	88 0f       	add	r24, r24
    116c:	99 1f       	adc	r25, r25
    116e:	0a 94       	dec	r0
    1170:	e2 f7       	brpl	.-8      	; 0x116a <GPIO_voidTogPin+0x90>
    1172:	84 27       	eor	r24, r20
    1174:	8c 93       	st	X, r24
    1176:	27 c0       	rjmp	.+78     	; 0x11c6 <GPIO_voidTogPin+0xec>
				break ;             
			case GPIOC :            
				TOG_BIT(PORTC,copy_u8Pin);
    1178:	a5 e3       	ldi	r26, 0x35	; 53
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	e5 e3       	ldi	r30, 0x35	; 53
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	48 2f       	mov	r20, r24
    1184:	8a 81       	ldd	r24, Y+2	; 0x02
    1186:	28 2f       	mov	r18, r24
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	02 2e       	mov	r0, r18
    1190:	02 c0       	rjmp	.+4      	; 0x1196 <GPIO_voidTogPin+0xbc>
    1192:	88 0f       	add	r24, r24
    1194:	99 1f       	adc	r25, r25
    1196:	0a 94       	dec	r0
    1198:	e2 f7       	brpl	.-8      	; 0x1192 <GPIO_voidTogPin+0xb8>
    119a:	84 27       	eor	r24, r20
    119c:	8c 93       	st	X, r24
    119e:	13 c0       	rjmp	.+38     	; 0x11c6 <GPIO_voidTogPin+0xec>
				break ;             
			case GPIOD : 
				TOG_BIT(PORTD,copy_u8Pin);
    11a0:	a2 e3       	ldi	r26, 0x32	; 50
    11a2:	b0 e0       	ldi	r27, 0x00	; 0
    11a4:	e2 e3       	ldi	r30, 0x32	; 50
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	80 81       	ld	r24, Z
    11aa:	48 2f       	mov	r20, r24
    11ac:	8a 81       	ldd	r24, Y+2	; 0x02
    11ae:	28 2f       	mov	r18, r24
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	02 2e       	mov	r0, r18
    11b8:	02 c0       	rjmp	.+4      	; 0x11be <GPIO_voidTogPin+0xe4>
    11ba:	88 0f       	add	r24, r24
    11bc:	99 1f       	adc	r25, r25
    11be:	0a 94       	dec	r0
    11c0:	e2 f7       	brpl	.-8      	; 0x11ba <GPIO_voidTogPin+0xe0>
    11c2:	84 27       	eor	r24, r20
    11c4:	8c 93       	st	X, r24
			default:
			break;
		}
		
		
	}
    11c6:	0f 90       	pop	r0
    11c8:	0f 90       	pop	r0
    11ca:	0f 90       	pop	r0
    11cc:	0f 90       	pop	r0
    11ce:	cf 91       	pop	r28
    11d0:	df 91       	pop	r29
    11d2:	08 95       	ret

000011d4 <GPIO_voidSetPortDDR>:
	void GPIO_voidSetPortDDR (u8  copy_u8Port , u8 copy_u8Mode )
	{
    11d4:	df 93       	push	r29
    11d6:	cf 93       	push	r28
    11d8:	00 d0       	rcall	.+0      	; 0x11da <GPIO_voidSetPortDDR+0x6>
    11da:	00 d0       	rcall	.+0      	; 0x11dc <GPIO_voidSetPortDDR+0x8>
    11dc:	cd b7       	in	r28, 0x3d	; 61
    11de:	de b7       	in	r29, 0x3e	; 62
    11e0:	89 83       	std	Y+1, r24	; 0x01
    11e2:	6a 83       	std	Y+2, r22	; 0x02
		switch(copy_u8Port)
    11e4:	89 81       	ldd	r24, Y+1	; 0x01
    11e6:	28 2f       	mov	r18, r24
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	3c 83       	std	Y+4, r19	; 0x04
    11ec:	2b 83       	std	Y+3, r18	; 0x03
    11ee:	8b 81       	ldd	r24, Y+3	; 0x03
    11f0:	9c 81       	ldd	r25, Y+4	; 0x04
    11f2:	81 30       	cpi	r24, 0x01	; 1
    11f4:	91 05       	cpc	r25, r1
    11f6:	09 f1       	breq	.+66     	; 0x123a <GPIO_voidSetPortDDR+0x66>
    11f8:	2b 81       	ldd	r18, Y+3	; 0x03
    11fa:	3c 81       	ldd	r19, Y+4	; 0x04
    11fc:	22 30       	cpi	r18, 0x02	; 2
    11fe:	31 05       	cpc	r19, r1
    1200:	2c f4       	brge	.+10     	; 0x120c <GPIO_voidSetPortDDR+0x38>
    1202:	8b 81       	ldd	r24, Y+3	; 0x03
    1204:	9c 81       	ldd	r25, Y+4	; 0x04
    1206:	00 97       	sbiw	r24, 0x00	; 0
    1208:	61 f0       	breq	.+24     	; 0x1222 <GPIO_voidSetPortDDR+0x4e>
    120a:	3a c0       	rjmp	.+116    	; 0x1280 <GPIO_voidSetPortDDR+0xac>
    120c:	2b 81       	ldd	r18, Y+3	; 0x03
    120e:	3c 81       	ldd	r19, Y+4	; 0x04
    1210:	22 30       	cpi	r18, 0x02	; 2
    1212:	31 05       	cpc	r19, r1
    1214:	f1 f0       	breq	.+60     	; 0x1252 <GPIO_voidSetPortDDR+0x7e>
    1216:	8b 81       	ldd	r24, Y+3	; 0x03
    1218:	9c 81       	ldd	r25, Y+4	; 0x04
    121a:	83 30       	cpi	r24, 0x03	; 3
    121c:	91 05       	cpc	r25, r1
    121e:	29 f1       	breq	.+74     	; 0x126a <GPIO_voidSetPortDDR+0x96>
    1220:	2f c0       	rjmp	.+94     	; 0x1280 <GPIO_voidSetPortDDR+0xac>
		{
			case GPIOA :
				if(copy_u8Mode ==OUTPUT )
    1222:	8a 81       	ldd	r24, Y+2	; 0x02
    1224:	81 30       	cpi	r24, 0x01	; 1
    1226:	29 f4       	brne	.+10     	; 0x1232 <GPIO_voidSetPortDDR+0x5e>
				{
					DDRA= 0xFF;
    1228:	ea e3       	ldi	r30, 0x3A	; 58
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	8f ef       	ldi	r24, 0xFF	; 255
    122e:	80 83       	st	Z, r24
    1230:	27 c0       	rjmp	.+78     	; 0x1280 <GPIO_voidSetPortDDR+0xac>
				}
				else {
					DDRA = 0x00 ;
    1232:	ea e3       	ldi	r30, 0x3A	; 58
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	10 82       	st	Z, r1
    1238:	23 c0       	rjmp	.+70     	; 0x1280 <GPIO_voidSetPortDDR+0xac>
				}
				break;
			case GPIOB :
				if(copy_u8Mode ==OUTPUT )
    123a:	8a 81       	ldd	r24, Y+2	; 0x02
    123c:	81 30       	cpi	r24, 0x01	; 1
    123e:	29 f4       	brne	.+10     	; 0x124a <GPIO_voidSetPortDDR+0x76>
				{
					DDRB = 0xFF;
    1240:	e7 e3       	ldi	r30, 0x37	; 55
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	8f ef       	ldi	r24, 0xFF	; 255
    1246:	80 83       	st	Z, r24
    1248:	1b c0       	rjmp	.+54     	; 0x1280 <GPIO_voidSetPortDDR+0xac>
				}
				else {
					DDRB = 0x00;
    124a:	e7 e3       	ldi	r30, 0x37	; 55
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	10 82       	st	Z, r1
    1250:	17 c0       	rjmp	.+46     	; 0x1280 <GPIO_voidSetPortDDR+0xac>
				}
				break;
			case GPIOC :
				if(copy_u8Mode ==OUTPUT )
    1252:	8a 81       	ldd	r24, Y+2	; 0x02
    1254:	81 30       	cpi	r24, 0x01	; 1
    1256:	29 f4       	brne	.+10     	; 0x1262 <GPIO_voidSetPortDDR+0x8e>
				{
					DDRC = 0xFF ;
    1258:	e4 e3       	ldi	r30, 0x34	; 52
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	8f ef       	ldi	r24, 0xFF	; 255
    125e:	80 83       	st	Z, r24
    1260:	0f c0       	rjmp	.+30     	; 0x1280 <GPIO_voidSetPortDDR+0xac>
				}
				else {
					DDRC = 0x00 ;
    1262:	e4 e3       	ldi	r30, 0x34	; 52
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	10 82       	st	Z, r1
    1268:	0b c0       	rjmp	.+22     	; 0x1280 <GPIO_voidSetPortDDR+0xac>
				}
				break;
			case GPIOD :
				if(copy_u8Mode ==OUTPUT )
    126a:	8a 81       	ldd	r24, Y+2	; 0x02
    126c:	81 30       	cpi	r24, 0x01	; 1
    126e:	29 f4       	brne	.+10     	; 0x127a <GPIO_voidSetPortDDR+0xa6>
				{
					DDRD = 0xFF;
    1270:	e1 e3       	ldi	r30, 0x31	; 49
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	8f ef       	ldi	r24, 0xFF	; 255
    1276:	80 83       	st	Z, r24
    1278:	03 c0       	rjmp	.+6      	; 0x1280 <GPIO_voidSetPortDDR+0xac>
				}
				else {
					DDRD = 0x00;
    127a:	e1 e3       	ldi	r30, 0x31	; 49
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	10 82       	st	Z, r1
				}
				break;	
			default:
				break;
		}
	}
    1280:	0f 90       	pop	r0
    1282:	0f 90       	pop	r0
    1284:	0f 90       	pop	r0
    1286:	0f 90       	pop	r0
    1288:	cf 91       	pop	r28
    128a:	df 91       	pop	r29
    128c:	08 95       	ret

0000128e <GPIO_voidWritePort>:
	void	GPIO_voidWritePort (u8 copy_u8Port , u8 copy_u8Value)
	{
    128e:	df 93       	push	r29
    1290:	cf 93       	push	r28
    1292:	00 d0       	rcall	.+0      	; 0x1294 <GPIO_voidWritePort+0x6>
    1294:	00 d0       	rcall	.+0      	; 0x1296 <GPIO_voidWritePort+0x8>
    1296:	cd b7       	in	r28, 0x3d	; 61
    1298:	de b7       	in	r29, 0x3e	; 62
    129a:	89 83       	std	Y+1, r24	; 0x01
    129c:	6a 83       	std	Y+2, r22	; 0x02
			switch(copy_u8Port)
    129e:	89 81       	ldd	r24, Y+1	; 0x01
    12a0:	28 2f       	mov	r18, r24
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	3c 83       	std	Y+4, r19	; 0x04
    12a6:	2b 83       	std	Y+3, r18	; 0x03
    12a8:	8b 81       	ldd	r24, Y+3	; 0x03
    12aa:	9c 81       	ldd	r25, Y+4	; 0x04
    12ac:	81 30       	cpi	r24, 0x01	; 1
    12ae:	91 05       	cpc	r25, r1
    12b0:	d1 f0       	breq	.+52     	; 0x12e6 <GPIO_voidWritePort+0x58>
    12b2:	2b 81       	ldd	r18, Y+3	; 0x03
    12b4:	3c 81       	ldd	r19, Y+4	; 0x04
    12b6:	22 30       	cpi	r18, 0x02	; 2
    12b8:	31 05       	cpc	r19, r1
    12ba:	2c f4       	brge	.+10     	; 0x12c6 <GPIO_voidWritePort+0x38>
    12bc:	8b 81       	ldd	r24, Y+3	; 0x03
    12be:	9c 81       	ldd	r25, Y+4	; 0x04
    12c0:	00 97       	sbiw	r24, 0x00	; 0
    12c2:	61 f0       	breq	.+24     	; 0x12dc <GPIO_voidWritePort+0x4e>
    12c4:	1e c0       	rjmp	.+60     	; 0x1302 <GPIO_voidWritePort+0x74>
    12c6:	2b 81       	ldd	r18, Y+3	; 0x03
    12c8:	3c 81       	ldd	r19, Y+4	; 0x04
    12ca:	22 30       	cpi	r18, 0x02	; 2
    12cc:	31 05       	cpc	r19, r1
    12ce:	81 f0       	breq	.+32     	; 0x12f0 <GPIO_voidWritePort+0x62>
    12d0:	8b 81       	ldd	r24, Y+3	; 0x03
    12d2:	9c 81       	ldd	r25, Y+4	; 0x04
    12d4:	83 30       	cpi	r24, 0x03	; 3
    12d6:	91 05       	cpc	r25, r1
    12d8:	81 f0       	breq	.+32     	; 0x12fa <GPIO_voidWritePort+0x6c>
    12da:	13 c0       	rjmp	.+38     	; 0x1302 <GPIO_voidWritePort+0x74>
		{
			case GPIOA :
				PORTA = copy_u8Value ;
    12dc:	eb e3       	ldi	r30, 0x3B	; 59
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	8a 81       	ldd	r24, Y+2	; 0x02
    12e2:	80 83       	st	Z, r24
    12e4:	0e c0       	rjmp	.+28     	; 0x1302 <GPIO_voidWritePort+0x74>
				break;
			case GPIOB :
				PORTB = copy_u8Value;
    12e6:	e8 e3       	ldi	r30, 0x38	; 56
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	8a 81       	ldd	r24, Y+2	; 0x02
    12ec:	80 83       	st	Z, r24
    12ee:	09 c0       	rjmp	.+18     	; 0x1302 <GPIO_voidWritePort+0x74>
				break;
			case GPIOC :
				PORTC = copy_u8Value;
    12f0:	e5 e3       	ldi	r30, 0x35	; 53
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	8a 81       	ldd	r24, Y+2	; 0x02
    12f6:	80 83       	st	Z, r24
    12f8:	04 c0       	rjmp	.+8      	; 0x1302 <GPIO_voidWritePort+0x74>
				break;
			case GPIOD :
				PORTD = copy_u8Value;
    12fa:	e2 e3       	ldi	r30, 0x32	; 50
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1300:	80 83       	st	Z, r24
				break;
		}
		
			
			
		}
    1302:	0f 90       	pop	r0
    1304:	0f 90       	pop	r0
    1306:	0f 90       	pop	r0
    1308:	0f 90       	pop	r0
    130a:	cf 91       	pop	r28
    130c:	df 91       	pop	r29
    130e:	08 95       	ret

00001310 <GPIO_voidSetLowNippleDDR>:
	void GPIO_voidSetLowNippleDDR(u8 copy_u8Port , u8 copy_u8Mode)
	{
    1310:	df 93       	push	r29
    1312:	cf 93       	push	r28
    1314:	00 d0       	rcall	.+0      	; 0x1316 <GPIO_voidSetLowNippleDDR+0x6>
    1316:	0f 92       	push	r0
    1318:	cd b7       	in	r28, 0x3d	; 61
    131a:	de b7       	in	r29, 0x3e	; 62
    131c:	8a 83       	std	Y+2, r24	; 0x02
    131e:	6b 83       	std	Y+3, r22	; 0x03
		u8 i ;
		for (i= 0 ; i<4 ; i++){
    1320:	19 82       	std	Y+1, r1	; 0x01
    1322:	08 c0       	rjmp	.+16     	; 0x1334 <GPIO_voidSetLowNippleDDR+0x24>
			GPIO_voidSetPinDDR(copy_u8Port , i ,copy_u8Mode );
    1324:	8a 81       	ldd	r24, Y+2	; 0x02
    1326:	69 81       	ldd	r22, Y+1	; 0x01
    1328:	4b 81       	ldd	r20, Y+3	; 0x03
    132a:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <GPIO_voidSetPinDDR>
			
		}
	void GPIO_voidSetLowNippleDDR(u8 copy_u8Port , u8 copy_u8Mode)
	{
		u8 i ;
		for (i= 0 ; i<4 ; i++){
    132e:	89 81       	ldd	r24, Y+1	; 0x01
    1330:	8f 5f       	subi	r24, 0xFF	; 255
    1332:	89 83       	std	Y+1, r24	; 0x01
    1334:	89 81       	ldd	r24, Y+1	; 0x01
    1336:	84 30       	cpi	r24, 0x04	; 4
    1338:	a8 f3       	brcs	.-22     	; 0x1324 <GPIO_voidSetLowNippleDDR+0x14>
			GPIO_voidSetPinDDR(copy_u8Port , i ,copy_u8Mode );
		}
	}
    133a:	0f 90       	pop	r0
    133c:	0f 90       	pop	r0
    133e:	0f 90       	pop	r0
    1340:	cf 91       	pop	r28
    1342:	df 91       	pop	r29
    1344:	08 95       	ret

00001346 <GPIO_voidSetHighNippleDDR>:
	void GPIO_voidSetHighNippleDDR(u8 copy_u8Port , u8 copy_u8Mode)
	{
    1346:	df 93       	push	r29
    1348:	cf 93       	push	r28
    134a:	00 d0       	rcall	.+0      	; 0x134c <GPIO_voidSetHighNippleDDR+0x6>
    134c:	0f 92       	push	r0
    134e:	cd b7       	in	r28, 0x3d	; 61
    1350:	de b7       	in	r29, 0x3e	; 62
    1352:	8a 83       	std	Y+2, r24	; 0x02
    1354:	6b 83       	std	Y+3, r22	; 0x03
		u8 i ;
		for (i= 4 ; i<8 ; i++){
    1356:	84 e0       	ldi	r24, 0x04	; 4
    1358:	89 83       	std	Y+1, r24	; 0x01
    135a:	08 c0       	rjmp	.+16     	; 0x136c <GPIO_voidSetHighNippleDDR+0x26>
			GPIO_voidSetPinDDR(copy_u8Port , i ,copy_u8Mode );
    135c:	8a 81       	ldd	r24, Y+2	; 0x02
    135e:	69 81       	ldd	r22, Y+1	; 0x01
    1360:	4b 81       	ldd	r20, Y+3	; 0x03
    1362:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <GPIO_voidSetPinDDR>
		}
	}
	void GPIO_voidSetHighNippleDDR(u8 copy_u8Port , u8 copy_u8Mode)
	{
		u8 i ;
		for (i= 4 ; i<8 ; i++){
    1366:	89 81       	ldd	r24, Y+1	; 0x01
    1368:	8f 5f       	subi	r24, 0xFF	; 255
    136a:	89 83       	std	Y+1, r24	; 0x01
    136c:	89 81       	ldd	r24, Y+1	; 0x01
    136e:	88 30       	cpi	r24, 0x08	; 8
    1370:	a8 f3       	brcs	.-22     	; 0x135c <GPIO_voidSetHighNippleDDR+0x16>
			GPIO_voidSetPinDDR(copy_u8Port , i ,copy_u8Mode );
		}
	}
    1372:	0f 90       	pop	r0
    1374:	0f 90       	pop	r0
    1376:	0f 90       	pop	r0
    1378:	cf 91       	pop	r28
    137a:	df 91       	pop	r29
    137c:	08 95       	ret

0000137e <GPIO_voidWriteLowNipple>:
	void GPIO_voidWriteLowNipple (u8 copy_u8Port , u8 copy_u8Value )
	{
    137e:	df 93       	push	r29
    1380:	cf 93       	push	r28
    1382:	00 d0       	rcall	.+0      	; 0x1384 <GPIO_voidWriteLowNipple+0x6>
    1384:	00 d0       	rcall	.+0      	; 0x1386 <GPIO_voidWriteLowNipple+0x8>
    1386:	cd b7       	in	r28, 0x3d	; 61
    1388:	de b7       	in	r29, 0x3e	; 62
    138a:	89 83       	std	Y+1, r24	; 0x01
    138c:	6a 83       	std	Y+2, r22	; 0x02
		copy_u8Value &= 0x0F;
    138e:	8a 81       	ldd	r24, Y+2	; 0x02
    1390:	8f 70       	andi	r24, 0x0F	; 15
    1392:	8a 83       	std	Y+2, r24	; 0x02
		switch (copy_u8Port) {
    1394:	89 81       	ldd	r24, Y+1	; 0x01
    1396:	28 2f       	mov	r18, r24
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	3c 83       	std	Y+4, r19	; 0x04
    139c:	2b 83       	std	Y+3, r18	; 0x03
    139e:	8b 81       	ldd	r24, Y+3	; 0x03
    13a0:	9c 81       	ldd	r25, Y+4	; 0x04
    13a2:	81 30       	cpi	r24, 0x01	; 1
    13a4:	91 05       	cpc	r25, r1
    13a6:	29 f1       	breq	.+74     	; 0x13f2 <GPIO_voidWriteLowNipple+0x74>
    13a8:	2b 81       	ldd	r18, Y+3	; 0x03
    13aa:	3c 81       	ldd	r19, Y+4	; 0x04
    13ac:	22 30       	cpi	r18, 0x02	; 2
    13ae:	31 05       	cpc	r19, r1
    13b0:	2c f4       	brge	.+10     	; 0x13bc <GPIO_voidWriteLowNipple+0x3e>
    13b2:	8b 81       	ldd	r24, Y+3	; 0x03
    13b4:	9c 81       	ldd	r25, Y+4	; 0x04
    13b6:	00 97       	sbiw	r24, 0x00	; 0
    13b8:	61 f0       	breq	.+24     	; 0x13d2 <GPIO_voidWriteLowNipple+0x54>
    13ba:	4a c0       	rjmp	.+148    	; 0x1450 <GPIO_voidWriteLowNipple+0xd2>
    13bc:	2b 81       	ldd	r18, Y+3	; 0x03
    13be:	3c 81       	ldd	r19, Y+4	; 0x04
    13c0:	22 30       	cpi	r18, 0x02	; 2
    13c2:	31 05       	cpc	r19, r1
    13c4:	31 f1       	breq	.+76     	; 0x1412 <GPIO_voidWriteLowNipple+0x94>
    13c6:	8b 81       	ldd	r24, Y+3	; 0x03
    13c8:	9c 81       	ldd	r25, Y+4	; 0x04
    13ca:	83 30       	cpi	r24, 0x03	; 3
    13cc:	91 05       	cpc	r25, r1
    13ce:	89 f1       	breq	.+98     	; 0x1432 <GPIO_voidWriteLowNipple+0xb4>
    13d0:	3f c0       	rjmp	.+126    	; 0x1450 <GPIO_voidWriteLowNipple+0xd2>
			case GPIOA :
				PORTA &= 0xF0 ; 
    13d2:	ab e3       	ldi	r26, 0x3B	; 59
    13d4:	b0 e0       	ldi	r27, 0x00	; 0
    13d6:	eb e3       	ldi	r30, 0x3B	; 59
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	80 81       	ld	r24, Z
    13dc:	80 7f       	andi	r24, 0xF0	; 240
    13de:	8c 93       	st	X, r24
				PORTA |= copy_u8Value ;
    13e0:	ab e3       	ldi	r26, 0x3B	; 59
    13e2:	b0 e0       	ldi	r27, 0x00	; 0
    13e4:	eb e3       	ldi	r30, 0x3B	; 59
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	90 81       	ld	r25, Z
    13ea:	8a 81       	ldd	r24, Y+2	; 0x02
    13ec:	89 2b       	or	r24, r25
    13ee:	8c 93       	st	X, r24
    13f0:	2f c0       	rjmp	.+94     	; 0x1450 <GPIO_voidWriteLowNipple+0xd2>
				break;
			case GPIOB :
				PORTB &= 0xF0 ; 
    13f2:	a8 e3       	ldi	r26, 0x38	; 56
    13f4:	b0 e0       	ldi	r27, 0x00	; 0
    13f6:	e8 e3       	ldi	r30, 0x38	; 56
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	80 81       	ld	r24, Z
    13fc:	80 7f       	andi	r24, 0xF0	; 240
    13fe:	8c 93       	st	X, r24
				PORTB |= copy_u8Value ;
    1400:	a8 e3       	ldi	r26, 0x38	; 56
    1402:	b0 e0       	ldi	r27, 0x00	; 0
    1404:	e8 e3       	ldi	r30, 0x38	; 56
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	90 81       	ld	r25, Z
    140a:	8a 81       	ldd	r24, Y+2	; 0x02
    140c:	89 2b       	or	r24, r25
    140e:	8c 93       	st	X, r24
    1410:	1f c0       	rjmp	.+62     	; 0x1450 <GPIO_voidWriteLowNipple+0xd2>
				break;
			case GPIOC :
				PORTC &= 0xF0 ; 
    1412:	a5 e3       	ldi	r26, 0x35	; 53
    1414:	b0 e0       	ldi	r27, 0x00	; 0
    1416:	e5 e3       	ldi	r30, 0x35	; 53
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	80 81       	ld	r24, Z
    141c:	80 7f       	andi	r24, 0xF0	; 240
    141e:	8c 93       	st	X, r24
				PORTC |= copy_u8Value ;
    1420:	a5 e3       	ldi	r26, 0x35	; 53
    1422:	b0 e0       	ldi	r27, 0x00	; 0
    1424:	e5 e3       	ldi	r30, 0x35	; 53
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	90 81       	ld	r25, Z
    142a:	8a 81       	ldd	r24, Y+2	; 0x02
    142c:	89 2b       	or	r24, r25
    142e:	8c 93       	st	X, r24
    1430:	0f c0       	rjmp	.+30     	; 0x1450 <GPIO_voidWriteLowNipple+0xd2>
				break;
			case GPIOD :
				PORTD &= 0xF0 ; 
    1432:	a2 e3       	ldi	r26, 0x32	; 50
    1434:	b0 e0       	ldi	r27, 0x00	; 0
    1436:	e2 e3       	ldi	r30, 0x32	; 50
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	80 81       	ld	r24, Z
    143c:	80 7f       	andi	r24, 0xF0	; 240
    143e:	8c 93       	st	X, r24
				PORTD |= copy_u8Value ;
    1440:	a2 e3       	ldi	r26, 0x32	; 50
    1442:	b0 e0       	ldi	r27, 0x00	; 0
    1444:	e2 e3       	ldi	r30, 0x32	; 50
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	90 81       	ld	r25, Z
    144a:	8a 81       	ldd	r24, Y+2	; 0x02
    144c:	89 2b       	or	r24, r25
    144e:	8c 93       	st	X, r24
				break;	
		}
	}
    1450:	0f 90       	pop	r0
    1452:	0f 90       	pop	r0
    1454:	0f 90       	pop	r0
    1456:	0f 90       	pop	r0
    1458:	cf 91       	pop	r28
    145a:	df 91       	pop	r29
    145c:	08 95       	ret

0000145e <GPIO_voidWriteHighNipple>:
	void GPIO_voidWriteHighNipple (u8 copy_u8Port , u8 copy_u8Value )
	{
    145e:	df 93       	push	r29
    1460:	cf 93       	push	r28
    1462:	00 d0       	rcall	.+0      	; 0x1464 <GPIO_voidWriteHighNipple+0x6>
    1464:	00 d0       	rcall	.+0      	; 0x1466 <GPIO_voidWriteHighNipple+0x8>
    1466:	cd b7       	in	r28, 0x3d	; 61
    1468:	de b7       	in	r29, 0x3e	; 62
    146a:	89 83       	std	Y+1, r24	; 0x01
    146c:	6a 83       	std	Y+2, r22	; 0x02
		copy_u8Value &= 0xF0;
    146e:	8a 81       	ldd	r24, Y+2	; 0x02
    1470:	80 7f       	andi	r24, 0xF0	; 240
    1472:	8a 83       	std	Y+2, r24	; 0x02
		switch (copy_u8Port) {
    1474:	89 81       	ldd	r24, Y+1	; 0x01
    1476:	28 2f       	mov	r18, r24
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	3c 83       	std	Y+4, r19	; 0x04
    147c:	2b 83       	std	Y+3, r18	; 0x03
    147e:	8b 81       	ldd	r24, Y+3	; 0x03
    1480:	9c 81       	ldd	r25, Y+4	; 0x04
    1482:	81 30       	cpi	r24, 0x01	; 1
    1484:	91 05       	cpc	r25, r1
    1486:	29 f1       	breq	.+74     	; 0x14d2 <GPIO_voidWriteHighNipple+0x74>
    1488:	2b 81       	ldd	r18, Y+3	; 0x03
    148a:	3c 81       	ldd	r19, Y+4	; 0x04
    148c:	22 30       	cpi	r18, 0x02	; 2
    148e:	31 05       	cpc	r19, r1
    1490:	2c f4       	brge	.+10     	; 0x149c <GPIO_voidWriteHighNipple+0x3e>
    1492:	8b 81       	ldd	r24, Y+3	; 0x03
    1494:	9c 81       	ldd	r25, Y+4	; 0x04
    1496:	00 97       	sbiw	r24, 0x00	; 0
    1498:	61 f0       	breq	.+24     	; 0x14b2 <GPIO_voidWriteHighNipple+0x54>
    149a:	4a c0       	rjmp	.+148    	; 0x1530 <GPIO_voidWriteHighNipple+0xd2>
    149c:	2b 81       	ldd	r18, Y+3	; 0x03
    149e:	3c 81       	ldd	r19, Y+4	; 0x04
    14a0:	22 30       	cpi	r18, 0x02	; 2
    14a2:	31 05       	cpc	r19, r1
    14a4:	31 f1       	breq	.+76     	; 0x14f2 <GPIO_voidWriteHighNipple+0x94>
    14a6:	8b 81       	ldd	r24, Y+3	; 0x03
    14a8:	9c 81       	ldd	r25, Y+4	; 0x04
    14aa:	83 30       	cpi	r24, 0x03	; 3
    14ac:	91 05       	cpc	r25, r1
    14ae:	89 f1       	breq	.+98     	; 0x1512 <GPIO_voidWriteHighNipple+0xb4>
    14b0:	3f c0       	rjmp	.+126    	; 0x1530 <GPIO_voidWriteHighNipple+0xd2>
			case GPIOA :
				PORTA &= 0x0F ; 
    14b2:	ab e3       	ldi	r26, 0x3B	; 59
    14b4:	b0 e0       	ldi	r27, 0x00	; 0
    14b6:	eb e3       	ldi	r30, 0x3B	; 59
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	80 81       	ld	r24, Z
    14bc:	8f 70       	andi	r24, 0x0F	; 15
    14be:	8c 93       	st	X, r24
				PORTA |= copy_u8Value ;
    14c0:	ab e3       	ldi	r26, 0x3B	; 59
    14c2:	b0 e0       	ldi	r27, 0x00	; 0
    14c4:	eb e3       	ldi	r30, 0x3B	; 59
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	90 81       	ld	r25, Z
    14ca:	8a 81       	ldd	r24, Y+2	; 0x02
    14cc:	89 2b       	or	r24, r25
    14ce:	8c 93       	st	X, r24
    14d0:	2f c0       	rjmp	.+94     	; 0x1530 <GPIO_voidWriteHighNipple+0xd2>
				break;
			case GPIOB :
				PORTB &= 0x0F ; 
    14d2:	a8 e3       	ldi	r26, 0x38	; 56
    14d4:	b0 e0       	ldi	r27, 0x00	; 0
    14d6:	e8 e3       	ldi	r30, 0x38	; 56
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	80 81       	ld	r24, Z
    14dc:	8f 70       	andi	r24, 0x0F	; 15
    14de:	8c 93       	st	X, r24
				PORTB |= copy_u8Value ;
    14e0:	a8 e3       	ldi	r26, 0x38	; 56
    14e2:	b0 e0       	ldi	r27, 0x00	; 0
    14e4:	e8 e3       	ldi	r30, 0x38	; 56
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	90 81       	ld	r25, Z
    14ea:	8a 81       	ldd	r24, Y+2	; 0x02
    14ec:	89 2b       	or	r24, r25
    14ee:	8c 93       	st	X, r24
    14f0:	1f c0       	rjmp	.+62     	; 0x1530 <GPIO_voidWriteHighNipple+0xd2>
				break;
			case GPIOC :
				PORTC &= 0x0F ; 
    14f2:	a5 e3       	ldi	r26, 0x35	; 53
    14f4:	b0 e0       	ldi	r27, 0x00	; 0
    14f6:	e5 e3       	ldi	r30, 0x35	; 53
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	80 81       	ld	r24, Z
    14fc:	8f 70       	andi	r24, 0x0F	; 15
    14fe:	8c 93       	st	X, r24
				PORTC |= copy_u8Value ;
    1500:	a5 e3       	ldi	r26, 0x35	; 53
    1502:	b0 e0       	ldi	r27, 0x00	; 0
    1504:	e5 e3       	ldi	r30, 0x35	; 53
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	90 81       	ld	r25, Z
    150a:	8a 81       	ldd	r24, Y+2	; 0x02
    150c:	89 2b       	or	r24, r25
    150e:	8c 93       	st	X, r24
    1510:	0f c0       	rjmp	.+30     	; 0x1530 <GPIO_voidWriteHighNipple+0xd2>
				break;
			case GPIOD :
				PORTD &= 0x0F ; 
    1512:	a2 e3       	ldi	r26, 0x32	; 50
    1514:	b0 e0       	ldi	r27, 0x00	; 0
    1516:	e2 e3       	ldi	r30, 0x32	; 50
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	80 81       	ld	r24, Z
    151c:	8f 70       	andi	r24, 0x0F	; 15
    151e:	8c 93       	st	X, r24
				PORTD |= copy_u8Value ;
    1520:	a2 e3       	ldi	r26, 0x32	; 50
    1522:	b0 e0       	ldi	r27, 0x00	; 0
    1524:	e2 e3       	ldi	r30, 0x32	; 50
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	90 81       	ld	r25, Z
    152a:	8a 81       	ldd	r24, Y+2	; 0x02
    152c:	89 2b       	or	r24, r25
    152e:	8c 93       	st	X, r24
				break;	
		}
	}
    1530:	0f 90       	pop	r0
    1532:	0f 90       	pop	r0
    1534:	0f 90       	pop	r0
    1536:	0f 90       	pop	r0
    1538:	cf 91       	pop	r28
    153a:	df 91       	pop	r29
    153c:	08 95       	ret

0000153e <Keypad_voidInit>:


u8 Keypad [4][4] = { {'1','2','3','A'},{'4','5','6','B'},{'7','8','9','C'},{'*', '0','#','D'}};

void Keypad_voidInit (u8 copy_u8Port )
{
    153e:	df 93       	push	r29
    1540:	cf 93       	push	r28
    1542:	0f 92       	push	r0
    1544:	cd b7       	in	r28, 0x3d	; 61
    1546:	de b7       	in	r29, 0x3e	; 62
    1548:	89 83       	std	Y+1, r24	; 0x01
	GPIO_voidSetLowNippleDDR (copy_u8Port , OUTPUT);
    154a:	89 81       	ldd	r24, Y+1	; 0x01
    154c:	61 e0       	ldi	r22, 0x01	; 1
    154e:	0e 94 88 09 	call	0x1310	; 0x1310 <GPIO_voidSetLowNippleDDR>
	GPIO_voidSetHighNippleDDR (copy_u8Port , INPUT);
    1552:	89 81       	ldd	r24, Y+1	; 0x01
    1554:	60 e0       	ldi	r22, 0x00	; 0
    1556:	0e 94 a3 09 	call	0x1346	; 0x1346 <GPIO_voidSetHighNippleDDR>
	GPIO_voidWriteHighNipple (copy_u8Port , 0xF0);
    155a:	89 81       	ldd	r24, Y+1	; 0x01
    155c:	60 ef       	ldi	r22, 0xF0	; 240
    155e:	0e 94 2f 0a 	call	0x145e	; 0x145e <GPIO_voidWriteHighNipple>
}
    1562:	0f 90       	pop	r0
    1564:	cf 91       	pop	r28
    1566:	df 91       	pop	r29
    1568:	08 95       	ret

0000156a <Keypad_voidCheckVal>:
u8 Keypad_voidCheckVal (u8 copy_u8Port)
{
    156a:	df 93       	push	r29
    156c:	cf 93       	push	r28
    156e:	00 d0       	rcall	.+0      	; 0x1570 <Keypad_voidCheckVal+0x6>
    1570:	00 d0       	rcall	.+0      	; 0x1572 <Keypad_voidCheckVal+0x8>
    1572:	0f 92       	push	r0
    1574:	cd b7       	in	r28, 0x3d	; 61
    1576:	de b7       	in	r29, 0x3e	; 62
    1578:	8d 83       	std	Y+5, r24	; 0x05


	u8 Row , Column , Return  , Value = NOTPRESSED;
    157a:	8f ef       	ldi	r24, 0xFF	; 255
    157c:	89 83       	std	Y+1, r24	; 0x01
	for (Row = 0 ; Row < 4 ; Row ++)
    157e:	1c 82       	std	Y+4, r1	; 0x04
    1580:	35 c0       	rjmp	.+106    	; 0x15ec <Keypad_voidCheckVal+0x82>
		{
			GPIO_voidWriteLowNipple	(copy_u8Port , 0x0F);
    1582:	8d 81       	ldd	r24, Y+5	; 0x05
    1584:	6f e0       	ldi	r22, 0x0F	; 15
    1586:	0e 94 bf 09 	call	0x137e	; 0x137e <GPIO_voidWriteLowNipple>
			GPIO_voidWritePin (copy_u8Port , Row , LOW );
    158a:	8d 81       	ldd	r24, Y+5	; 0x05
    158c:	6c 81       	ldd	r22, Y+4	; 0x04
    158e:	40 e0       	ldi	r20, 0x00	; 0
    1590:	0e 94 df 06 	call	0xdbe	; 0xdbe <GPIO_voidWritePin>
			
			for (Column = 0 ; Column <4 ; Column ++ )
    1594:	1b 82       	std	Y+3, r1	; 0x03
    1596:	21 c0       	rjmp	.+66     	; 0x15da <Keypad_voidCheckVal+0x70>
			{
				
			Return=GPIO_u8ReadPin(copy_u8Port ,( Column+4 ));
    1598:	8b 81       	ldd	r24, Y+3	; 0x03
    159a:	98 2f       	mov	r25, r24
    159c:	9c 5f       	subi	r25, 0xFC	; 252
    159e:	8d 81       	ldd	r24, Y+5	; 0x05
    15a0:	69 2f       	mov	r22, r25
    15a2:	0e 94 c2 07 	call	0xf84	; 0xf84 <GPIO_u8ReadPin>
    15a6:	8a 83       	std	Y+2, r24	; 0x02
		
			if (Return == 0 )
    15a8:	8a 81       	ldd	r24, Y+2	; 0x02
    15aa:	88 23       	and	r24, r24
    15ac:	99 f4       	brne	.+38     	; 0x15d4 <Keypad_voidCheckVal+0x6a>
			{
				Value = Keypad [Row][Column];
    15ae:	8c 81       	ldd	r24, Y+4	; 0x04
    15b0:	48 2f       	mov	r20, r24
    15b2:	50 e0       	ldi	r21, 0x00	; 0
    15b4:	8b 81       	ldd	r24, Y+3	; 0x03
    15b6:	28 2f       	mov	r18, r24
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	ca 01       	movw	r24, r20
    15bc:	88 0f       	add	r24, r24
    15be:	99 1f       	adc	r25, r25
    15c0:	88 0f       	add	r24, r24
    15c2:	99 1f       	adc	r25, r25
    15c4:	82 0f       	add	r24, r18
    15c6:	93 1f       	adc	r25, r19
    15c8:	fc 01       	movw	r30, r24
    15ca:	e4 51       	subi	r30, 0x14	; 20
    15cc:	ff 4f       	sbci	r31, 0xFF	; 255
    15ce:	80 81       	ld	r24, Z
    15d0:	89 83       	std	Y+1, r24	; 0x01
    15d2:	06 c0       	rjmp	.+12     	; 0x15e0 <Keypad_voidCheckVal+0x76>
	for (Row = 0 ; Row < 4 ; Row ++)
		{
			GPIO_voidWriteLowNipple	(copy_u8Port , 0x0F);
			GPIO_voidWritePin (copy_u8Port , Row , LOW );
			
			for (Column = 0 ; Column <4 ; Column ++ )
    15d4:	8b 81       	ldd	r24, Y+3	; 0x03
    15d6:	8f 5f       	subi	r24, 0xFF	; 255
    15d8:	8b 83       	std	Y+3, r24	; 0x03
    15da:	8b 81       	ldd	r24, Y+3	; 0x03
    15dc:	84 30       	cpi	r24, 0x04	; 4
    15de:	e0 f2       	brcs	.-72     	; 0x1598 <Keypad_voidCheckVal+0x2e>
				Value = Keypad [Row][Column];
				break;
			}
				
			}
			if (Return ==0)
    15e0:	8a 81       	ldd	r24, Y+2	; 0x02
    15e2:	88 23       	and	r24, r24
    15e4:	31 f0       	breq	.+12     	; 0x15f2 <Keypad_voidCheckVal+0x88>
u8 Keypad_voidCheckVal (u8 copy_u8Port)
{


	u8 Row , Column , Return  , Value = NOTPRESSED;
	for (Row = 0 ; Row < 4 ; Row ++)
    15e6:	8c 81       	ldd	r24, Y+4	; 0x04
    15e8:	8f 5f       	subi	r24, 0xFF	; 255
    15ea:	8c 83       	std	Y+4, r24	; 0x04
    15ec:	8c 81       	ldd	r24, Y+4	; 0x04
    15ee:	84 30       	cpi	r24, 0x04	; 4
    15f0:	40 f2       	brcs	.-112    	; 0x1582 <Keypad_voidCheckVal+0x18>
			if (Return ==0)
			{
			break;
			}
		}
		return Value ;
    15f2:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    15f4:	0f 90       	pop	r0
    15f6:	0f 90       	pop	r0
    15f8:	0f 90       	pop	r0
    15fa:	0f 90       	pop	r0
    15fc:	0f 90       	pop	r0
    15fe:	cf 91       	pop	r28
    1600:	df 91       	pop	r29
    1602:	08 95       	ret

00001604 <LCD_voidInit>:
#include "util/delay.h"



void LCD_voidInit()
{
    1604:	0f 93       	push	r16
    1606:	1f 93       	push	r17
    1608:	df 93       	push	r29
    160a:	cf 93       	push	r28
    160c:	cd b7       	in	r28, 0x3d	; 61
    160e:	de b7       	in	r29, 0x3e	; 62
    1610:	c4 55       	subi	r28, 0x54	; 84
    1612:	d0 40       	sbci	r29, 0x00	; 0
    1614:	0f b6       	in	r0, 0x3f	; 63
    1616:	f8 94       	cli
    1618:	de bf       	out	0x3e, r29	; 62
    161a:	0f be       	out	0x3f, r0	; 63
    161c:	cd bf       	out	0x3d, r28	; 61
    161e:	fe 01       	movw	r30, r28
    1620:	ef 5a       	subi	r30, 0xAF	; 175
    1622:	ff 4f       	sbci	r31, 0xFF	; 255
    1624:	80 e0       	ldi	r24, 0x00	; 0
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	a0 e2       	ldi	r26, 0x20	; 32
    162a:	b2 e4       	ldi	r27, 0x42	; 66
    162c:	80 83       	st	Z, r24
    162e:	91 83       	std	Z+1, r25	; 0x01
    1630:	a2 83       	std	Z+2, r26	; 0x02
    1632:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1634:	8e 01       	movw	r16, r28
    1636:	03 5b       	subi	r16, 0xB3	; 179
    1638:	1f 4f       	sbci	r17, 0xFF	; 255
    163a:	fe 01       	movw	r30, r28
    163c:	ef 5a       	subi	r30, 0xAF	; 175
    163e:	ff 4f       	sbci	r31, 0xFF	; 255
    1640:	60 81       	ld	r22, Z
    1642:	71 81       	ldd	r23, Z+1	; 0x01
    1644:	82 81       	ldd	r24, Z+2	; 0x02
    1646:	93 81       	ldd	r25, Z+3	; 0x03
    1648:	20 e0       	ldi	r18, 0x00	; 0
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	4a ef       	ldi	r20, 0xFA	; 250
    164e:	54 e4       	ldi	r21, 0x44	; 68
    1650:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1654:	dc 01       	movw	r26, r24
    1656:	cb 01       	movw	r24, r22
    1658:	f8 01       	movw	r30, r16
    165a:	80 83       	st	Z, r24
    165c:	91 83       	std	Z+1, r25	; 0x01
    165e:	a2 83       	std	Z+2, r26	; 0x02
    1660:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1662:	fe 01       	movw	r30, r28
    1664:	e3 5b       	subi	r30, 0xB3	; 179
    1666:	ff 4f       	sbci	r31, 0xFF	; 255
    1668:	60 81       	ld	r22, Z
    166a:	71 81       	ldd	r23, Z+1	; 0x01
    166c:	82 81       	ldd	r24, Z+2	; 0x02
    166e:	93 81       	ldd	r25, Z+3	; 0x03
    1670:	20 e0       	ldi	r18, 0x00	; 0
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	40 e8       	ldi	r20, 0x80	; 128
    1676:	5f e3       	ldi	r21, 0x3F	; 63
    1678:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    167c:	88 23       	and	r24, r24
    167e:	44 f4       	brge	.+16     	; 0x1690 <LCD_voidInit+0x8c>
		__ticks = 1;
    1680:	fe 01       	movw	r30, r28
    1682:	e5 5b       	subi	r30, 0xB5	; 181
    1684:	ff 4f       	sbci	r31, 0xFF	; 255
    1686:	81 e0       	ldi	r24, 0x01	; 1
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	91 83       	std	Z+1, r25	; 0x01
    168c:	80 83       	st	Z, r24
    168e:	64 c0       	rjmp	.+200    	; 0x1758 <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    1690:	fe 01       	movw	r30, r28
    1692:	e3 5b       	subi	r30, 0xB3	; 179
    1694:	ff 4f       	sbci	r31, 0xFF	; 255
    1696:	60 81       	ld	r22, Z
    1698:	71 81       	ldd	r23, Z+1	; 0x01
    169a:	82 81       	ldd	r24, Z+2	; 0x02
    169c:	93 81       	ldd	r25, Z+3	; 0x03
    169e:	20 e0       	ldi	r18, 0x00	; 0
    16a0:	3f ef       	ldi	r19, 0xFF	; 255
    16a2:	4f e7       	ldi	r20, 0x7F	; 127
    16a4:	57 e4       	ldi	r21, 0x47	; 71
    16a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16aa:	18 16       	cp	r1, r24
    16ac:	0c f0       	brlt	.+2      	; 0x16b0 <LCD_voidInit+0xac>
    16ae:	43 c0       	rjmp	.+134    	; 0x1736 <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16b0:	fe 01       	movw	r30, r28
    16b2:	ef 5a       	subi	r30, 0xAF	; 175
    16b4:	ff 4f       	sbci	r31, 0xFF	; 255
    16b6:	60 81       	ld	r22, Z
    16b8:	71 81       	ldd	r23, Z+1	; 0x01
    16ba:	82 81       	ldd	r24, Z+2	; 0x02
    16bc:	93 81       	ldd	r25, Z+3	; 0x03
    16be:	20 e0       	ldi	r18, 0x00	; 0
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	40 e2       	ldi	r20, 0x20	; 32
    16c4:	51 e4       	ldi	r21, 0x41	; 65
    16c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ca:	dc 01       	movw	r26, r24
    16cc:	cb 01       	movw	r24, r22
    16ce:	8e 01       	movw	r16, r28
    16d0:	05 5b       	subi	r16, 0xB5	; 181
    16d2:	1f 4f       	sbci	r17, 0xFF	; 255
    16d4:	bc 01       	movw	r22, r24
    16d6:	cd 01       	movw	r24, r26
    16d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16dc:	dc 01       	movw	r26, r24
    16de:	cb 01       	movw	r24, r22
    16e0:	f8 01       	movw	r30, r16
    16e2:	91 83       	std	Z+1, r25	; 0x01
    16e4:	80 83       	st	Z, r24
    16e6:	1f c0       	rjmp	.+62     	; 0x1726 <LCD_voidInit+0x122>
    16e8:	fe 01       	movw	r30, r28
    16ea:	e7 5b       	subi	r30, 0xB7	; 183
    16ec:	ff 4f       	sbci	r31, 0xFF	; 255
    16ee:	88 ec       	ldi	r24, 0xC8	; 200
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	91 83       	std	Z+1, r25	; 0x01
    16f4:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16f6:	fe 01       	movw	r30, r28
    16f8:	e7 5b       	subi	r30, 0xB7	; 183
    16fa:	ff 4f       	sbci	r31, 0xFF	; 255
    16fc:	80 81       	ld	r24, Z
    16fe:	91 81       	ldd	r25, Z+1	; 0x01
    1700:	01 97       	sbiw	r24, 0x01	; 1
    1702:	f1 f7       	brne	.-4      	; 0x1700 <LCD_voidInit+0xfc>
    1704:	fe 01       	movw	r30, r28
    1706:	e7 5b       	subi	r30, 0xB7	; 183
    1708:	ff 4f       	sbci	r31, 0xFF	; 255
    170a:	91 83       	std	Z+1, r25	; 0x01
    170c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    170e:	de 01       	movw	r26, r28
    1710:	a5 5b       	subi	r26, 0xB5	; 181
    1712:	bf 4f       	sbci	r27, 0xFF	; 255
    1714:	fe 01       	movw	r30, r28
    1716:	e5 5b       	subi	r30, 0xB5	; 181
    1718:	ff 4f       	sbci	r31, 0xFF	; 255
    171a:	80 81       	ld	r24, Z
    171c:	91 81       	ldd	r25, Z+1	; 0x01
    171e:	01 97       	sbiw	r24, 0x01	; 1
    1720:	11 96       	adiw	r26, 0x01	; 1
    1722:	9c 93       	st	X, r25
    1724:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1726:	fe 01       	movw	r30, r28
    1728:	e5 5b       	subi	r30, 0xB5	; 181
    172a:	ff 4f       	sbci	r31, 0xFF	; 255
    172c:	80 81       	ld	r24, Z
    172e:	91 81       	ldd	r25, Z+1	; 0x01
    1730:	00 97       	sbiw	r24, 0x00	; 0
    1732:	d1 f6       	brne	.-76     	; 0x16e8 <LCD_voidInit+0xe4>
    1734:	27 c0       	rjmp	.+78     	; 0x1784 <LCD_voidInit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1736:	8e 01       	movw	r16, r28
    1738:	05 5b       	subi	r16, 0xB5	; 181
    173a:	1f 4f       	sbci	r17, 0xFF	; 255
    173c:	fe 01       	movw	r30, r28
    173e:	e3 5b       	subi	r30, 0xB3	; 179
    1740:	ff 4f       	sbci	r31, 0xFF	; 255
    1742:	60 81       	ld	r22, Z
    1744:	71 81       	ldd	r23, Z+1	; 0x01
    1746:	82 81       	ldd	r24, Z+2	; 0x02
    1748:	93 81       	ldd	r25, Z+3	; 0x03
    174a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    174e:	dc 01       	movw	r26, r24
    1750:	cb 01       	movw	r24, r22
    1752:	f8 01       	movw	r30, r16
    1754:	91 83       	std	Z+1, r25	; 0x01
    1756:	80 83       	st	Z, r24
    1758:	de 01       	movw	r26, r28
    175a:	a9 5b       	subi	r26, 0xB9	; 185
    175c:	bf 4f       	sbci	r27, 0xFF	; 255
    175e:	fe 01       	movw	r30, r28
    1760:	e5 5b       	subi	r30, 0xB5	; 181
    1762:	ff 4f       	sbci	r31, 0xFF	; 255
    1764:	80 81       	ld	r24, Z
    1766:	91 81       	ldd	r25, Z+1	; 0x01
    1768:	8d 93       	st	X+, r24
    176a:	9c 93       	st	X, r25
    176c:	fe 01       	movw	r30, r28
    176e:	e9 5b       	subi	r30, 0xB9	; 185
    1770:	ff 4f       	sbci	r31, 0xFF	; 255
    1772:	80 81       	ld	r24, Z
    1774:	91 81       	ldd	r25, Z+1	; 0x01
    1776:	01 97       	sbiw	r24, 0x01	; 1
    1778:	f1 f7       	brne	.-4      	; 0x1776 <LCD_voidInit+0x172>
    177a:	fe 01       	movw	r30, r28
    177c:	e9 5b       	subi	r30, 0xB9	; 185
    177e:	ff 4f       	sbci	r31, 0xFF	; 255
    1780:	91 83       	std	Z+1, r25	; 0x01
    1782:	80 83       	st	Z, r24
	_delay_ms(40);
	
	GPIO_voidSetPinDDR(LCD_RSPORT , LCD_RSPIN , OUTPUT);
    1784:	80 e0       	ldi	r24, 0x00	; 0
    1786:	64 e0       	ldi	r22, 0x04	; 4
    1788:	41 e0       	ldi	r20, 0x01	; 1
    178a:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <GPIO_voidSetPinDDR>
	GPIO_voidSetPinDDR(LCD_RWPORT , LCD_RWPIN , OUTPUT);
    178e:	80 e0       	ldi	r24, 0x00	; 0
    1790:	65 e0       	ldi	r22, 0x05	; 5
    1792:	41 e0       	ldi	r20, 0x01	; 1
    1794:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <GPIO_voidSetPinDDR>
	GPIO_voidSetPinDDR(LCD_ENPORT , LCD_ENPIN , OUTPUT);
    1798:	80 e0       	ldi	r24, 0x00	; 0
    179a:	66 e0       	ldi	r22, 0x06	; 6
    179c:	41 e0       	ldi	r20, 0x01	; 1
    179e:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <GPIO_voidSetPinDDR>
		LCD_voidSendCmd(LCD_ENTRY_MODE);
		_delay_ms(1);
		
	#elif LCD_MODE == 1 
		#if LCD_NIBBLE == 0 
			GPIO_voidSetLowNippleDDR(LCD_PORT , OUTPUT);
    17a2:	80 e0       	ldi	r24, 0x00	; 0
    17a4:	61 e0       	ldi	r22, 0x01	; 1
    17a6:	0e 94 88 09 	call	0x1310	; 0x1310 <GPIO_voidSetLowNippleDDR>
			LCD_voidSendCmd(LCD_RETURN_HOME);
    17aa:	82 e0       	ldi	r24, 0x02	; 2
    17ac:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <LCD_voidSendCmd>
    17b0:	fe 01       	movw	r30, r28
    17b2:	ed 5b       	subi	r30, 0xBD	; 189
    17b4:	ff 4f       	sbci	r31, 0xFF	; 255
    17b6:	80 e0       	ldi	r24, 0x00	; 0
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	a0 e7       	ldi	r26, 0x70	; 112
    17bc:	b1 e4       	ldi	r27, 0x41	; 65
    17be:	80 83       	st	Z, r24
    17c0:	91 83       	std	Z+1, r25	; 0x01
    17c2:	a2 83       	std	Z+2, r26	; 0x02
    17c4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17c6:	8e 01       	movw	r16, r28
    17c8:	01 5c       	subi	r16, 0xC1	; 193
    17ca:	1f 4f       	sbci	r17, 0xFF	; 255
    17cc:	fe 01       	movw	r30, r28
    17ce:	ed 5b       	subi	r30, 0xBD	; 189
    17d0:	ff 4f       	sbci	r31, 0xFF	; 255
    17d2:	60 81       	ld	r22, Z
    17d4:	71 81       	ldd	r23, Z+1	; 0x01
    17d6:	82 81       	ldd	r24, Z+2	; 0x02
    17d8:	93 81       	ldd	r25, Z+3	; 0x03
    17da:	20 e0       	ldi	r18, 0x00	; 0
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	4a ef       	ldi	r20, 0xFA	; 250
    17e0:	54 e4       	ldi	r21, 0x44	; 68
    17e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17e6:	dc 01       	movw	r26, r24
    17e8:	cb 01       	movw	r24, r22
    17ea:	f8 01       	movw	r30, r16
    17ec:	80 83       	st	Z, r24
    17ee:	91 83       	std	Z+1, r25	; 0x01
    17f0:	a2 83       	std	Z+2, r26	; 0x02
    17f2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    17f4:	fe 01       	movw	r30, r28
    17f6:	ff 96       	adiw	r30, 0x3f	; 63
    17f8:	60 81       	ld	r22, Z
    17fa:	71 81       	ldd	r23, Z+1	; 0x01
    17fc:	82 81       	ldd	r24, Z+2	; 0x02
    17fe:	93 81       	ldd	r25, Z+3	; 0x03
    1800:	20 e0       	ldi	r18, 0x00	; 0
    1802:	30 e0       	ldi	r19, 0x00	; 0
    1804:	40 e8       	ldi	r20, 0x80	; 128
    1806:	5f e3       	ldi	r21, 0x3F	; 63
    1808:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    180c:	88 23       	and	r24, r24
    180e:	2c f4       	brge	.+10     	; 0x181a <LCD_voidInit+0x216>
		__ticks = 1;
    1810:	81 e0       	ldi	r24, 0x01	; 1
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	9e af       	std	Y+62, r25	; 0x3e
    1816:	8d af       	std	Y+61, r24	; 0x3d
    1818:	46 c0       	rjmp	.+140    	; 0x18a6 <LCD_voidInit+0x2a2>
	else if (__tmp > 65535)
    181a:	fe 01       	movw	r30, r28
    181c:	ff 96       	adiw	r30, 0x3f	; 63
    181e:	60 81       	ld	r22, Z
    1820:	71 81       	ldd	r23, Z+1	; 0x01
    1822:	82 81       	ldd	r24, Z+2	; 0x02
    1824:	93 81       	ldd	r25, Z+3	; 0x03
    1826:	20 e0       	ldi	r18, 0x00	; 0
    1828:	3f ef       	ldi	r19, 0xFF	; 255
    182a:	4f e7       	ldi	r20, 0x7F	; 127
    182c:	57 e4       	ldi	r21, 0x47	; 71
    182e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1832:	18 16       	cp	r1, r24
    1834:	64 f5       	brge	.+88     	; 0x188e <LCD_voidInit+0x28a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1836:	fe 01       	movw	r30, r28
    1838:	ed 5b       	subi	r30, 0xBD	; 189
    183a:	ff 4f       	sbci	r31, 0xFF	; 255
    183c:	60 81       	ld	r22, Z
    183e:	71 81       	ldd	r23, Z+1	; 0x01
    1840:	82 81       	ldd	r24, Z+2	; 0x02
    1842:	93 81       	ldd	r25, Z+3	; 0x03
    1844:	20 e0       	ldi	r18, 0x00	; 0
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	40 e2       	ldi	r20, 0x20	; 32
    184a:	51 e4       	ldi	r21, 0x41	; 65
    184c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1850:	dc 01       	movw	r26, r24
    1852:	cb 01       	movw	r24, r22
    1854:	bc 01       	movw	r22, r24
    1856:	cd 01       	movw	r24, r26
    1858:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    185c:	dc 01       	movw	r26, r24
    185e:	cb 01       	movw	r24, r22
    1860:	9e af       	std	Y+62, r25	; 0x3e
    1862:	8d af       	std	Y+61, r24	; 0x3d
    1864:	0f c0       	rjmp	.+30     	; 0x1884 <LCD_voidInit+0x280>
    1866:	88 ec       	ldi	r24, 0xC8	; 200
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	9c af       	std	Y+60, r25	; 0x3c
    186c:	8b af       	std	Y+59, r24	; 0x3b
    186e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1870:	9c ad       	ldd	r25, Y+60	; 0x3c
    1872:	01 97       	sbiw	r24, 0x01	; 1
    1874:	f1 f7       	brne	.-4      	; 0x1872 <LCD_voidInit+0x26e>
    1876:	9c af       	std	Y+60, r25	; 0x3c
    1878:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    187a:	8d ad       	ldd	r24, Y+61	; 0x3d
    187c:	9e ad       	ldd	r25, Y+62	; 0x3e
    187e:	01 97       	sbiw	r24, 0x01	; 1
    1880:	9e af       	std	Y+62, r25	; 0x3e
    1882:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1884:	8d ad       	ldd	r24, Y+61	; 0x3d
    1886:	9e ad       	ldd	r25, Y+62	; 0x3e
    1888:	00 97       	sbiw	r24, 0x00	; 0
    188a:	69 f7       	brne	.-38     	; 0x1866 <LCD_voidInit+0x262>
    188c:	16 c0       	rjmp	.+44     	; 0x18ba <LCD_voidInit+0x2b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    188e:	fe 01       	movw	r30, r28
    1890:	ff 96       	adiw	r30, 0x3f	; 63
    1892:	60 81       	ld	r22, Z
    1894:	71 81       	ldd	r23, Z+1	; 0x01
    1896:	82 81       	ldd	r24, Z+2	; 0x02
    1898:	93 81       	ldd	r25, Z+3	; 0x03
    189a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    189e:	dc 01       	movw	r26, r24
    18a0:	cb 01       	movw	r24, r22
    18a2:	9e af       	std	Y+62, r25	; 0x3e
    18a4:	8d af       	std	Y+61, r24	; 0x3d
    18a6:	8d ad       	ldd	r24, Y+61	; 0x3d
    18a8:	9e ad       	ldd	r25, Y+62	; 0x3e
    18aa:	9a af       	std	Y+58, r25	; 0x3a
    18ac:	89 af       	std	Y+57, r24	; 0x39
    18ae:	89 ad       	ldd	r24, Y+57	; 0x39
    18b0:	9a ad       	ldd	r25, Y+58	; 0x3a
    18b2:	01 97       	sbiw	r24, 0x01	; 1
    18b4:	f1 f7       	brne	.-4      	; 0x18b2 <LCD_voidInit+0x2ae>
    18b6:	9a af       	std	Y+58, r25	; 0x3a
    18b8:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(15);
			LCD_voidSendCmd(LCD_Function_4BIT_2Lines);
    18ba:	88 e2       	ldi	r24, 0x28	; 40
    18bc:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <LCD_voidSendCmd>
    18c0:	80 e0       	ldi	r24, 0x00	; 0
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	a0 e8       	ldi	r26, 0x80	; 128
    18c6:	bf e3       	ldi	r27, 0x3F	; 63
    18c8:	8d ab       	std	Y+53, r24	; 0x35
    18ca:	9e ab       	std	Y+54, r25	; 0x36
    18cc:	af ab       	std	Y+55, r26	; 0x37
    18ce:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18d0:	6d a9       	ldd	r22, Y+53	; 0x35
    18d2:	7e a9       	ldd	r23, Y+54	; 0x36
    18d4:	8f a9       	ldd	r24, Y+55	; 0x37
    18d6:	98 ad       	ldd	r25, Y+56	; 0x38
    18d8:	20 e0       	ldi	r18, 0x00	; 0
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	4a ef       	ldi	r20, 0xFA	; 250
    18de:	54 e4       	ldi	r21, 0x44	; 68
    18e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18e4:	dc 01       	movw	r26, r24
    18e6:	cb 01       	movw	r24, r22
    18e8:	89 ab       	std	Y+49, r24	; 0x31
    18ea:	9a ab       	std	Y+50, r25	; 0x32
    18ec:	ab ab       	std	Y+51, r26	; 0x33
    18ee:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    18f0:	69 a9       	ldd	r22, Y+49	; 0x31
    18f2:	7a a9       	ldd	r23, Y+50	; 0x32
    18f4:	8b a9       	ldd	r24, Y+51	; 0x33
    18f6:	9c a9       	ldd	r25, Y+52	; 0x34
    18f8:	20 e0       	ldi	r18, 0x00	; 0
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	40 e8       	ldi	r20, 0x80	; 128
    18fe:	5f e3       	ldi	r21, 0x3F	; 63
    1900:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1904:	88 23       	and	r24, r24
    1906:	2c f4       	brge	.+10     	; 0x1912 <LCD_voidInit+0x30e>
		__ticks = 1;
    1908:	81 e0       	ldi	r24, 0x01	; 1
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	98 ab       	std	Y+48, r25	; 0x30
    190e:	8f a7       	std	Y+47, r24	; 0x2f
    1910:	3f c0       	rjmp	.+126    	; 0x1990 <LCD_voidInit+0x38c>
	else if (__tmp > 65535)
    1912:	69 a9       	ldd	r22, Y+49	; 0x31
    1914:	7a a9       	ldd	r23, Y+50	; 0x32
    1916:	8b a9       	ldd	r24, Y+51	; 0x33
    1918:	9c a9       	ldd	r25, Y+52	; 0x34
    191a:	20 e0       	ldi	r18, 0x00	; 0
    191c:	3f ef       	ldi	r19, 0xFF	; 255
    191e:	4f e7       	ldi	r20, 0x7F	; 127
    1920:	57 e4       	ldi	r21, 0x47	; 71
    1922:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1926:	18 16       	cp	r1, r24
    1928:	4c f5       	brge	.+82     	; 0x197c <LCD_voidInit+0x378>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    192a:	6d a9       	ldd	r22, Y+53	; 0x35
    192c:	7e a9       	ldd	r23, Y+54	; 0x36
    192e:	8f a9       	ldd	r24, Y+55	; 0x37
    1930:	98 ad       	ldd	r25, Y+56	; 0x38
    1932:	20 e0       	ldi	r18, 0x00	; 0
    1934:	30 e0       	ldi	r19, 0x00	; 0
    1936:	40 e2       	ldi	r20, 0x20	; 32
    1938:	51 e4       	ldi	r21, 0x41	; 65
    193a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    193e:	dc 01       	movw	r26, r24
    1940:	cb 01       	movw	r24, r22
    1942:	bc 01       	movw	r22, r24
    1944:	cd 01       	movw	r24, r26
    1946:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    194a:	dc 01       	movw	r26, r24
    194c:	cb 01       	movw	r24, r22
    194e:	98 ab       	std	Y+48, r25	; 0x30
    1950:	8f a7       	std	Y+47, r24	; 0x2f
    1952:	0f c0       	rjmp	.+30     	; 0x1972 <LCD_voidInit+0x36e>
    1954:	88 ec       	ldi	r24, 0xC8	; 200
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	9e a7       	std	Y+46, r25	; 0x2e
    195a:	8d a7       	std	Y+45, r24	; 0x2d
    195c:	8d a5       	ldd	r24, Y+45	; 0x2d
    195e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1960:	01 97       	sbiw	r24, 0x01	; 1
    1962:	f1 f7       	brne	.-4      	; 0x1960 <LCD_voidInit+0x35c>
    1964:	9e a7       	std	Y+46, r25	; 0x2e
    1966:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1968:	8f a5       	ldd	r24, Y+47	; 0x2f
    196a:	98 a9       	ldd	r25, Y+48	; 0x30
    196c:	01 97       	sbiw	r24, 0x01	; 1
    196e:	98 ab       	std	Y+48, r25	; 0x30
    1970:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1972:	8f a5       	ldd	r24, Y+47	; 0x2f
    1974:	98 a9       	ldd	r25, Y+48	; 0x30
    1976:	00 97       	sbiw	r24, 0x00	; 0
    1978:	69 f7       	brne	.-38     	; 0x1954 <LCD_voidInit+0x350>
    197a:	14 c0       	rjmp	.+40     	; 0x19a4 <LCD_voidInit+0x3a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    197c:	69 a9       	ldd	r22, Y+49	; 0x31
    197e:	7a a9       	ldd	r23, Y+50	; 0x32
    1980:	8b a9       	ldd	r24, Y+51	; 0x33
    1982:	9c a9       	ldd	r25, Y+52	; 0x34
    1984:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1988:	dc 01       	movw	r26, r24
    198a:	cb 01       	movw	r24, r22
    198c:	98 ab       	std	Y+48, r25	; 0x30
    198e:	8f a7       	std	Y+47, r24	; 0x2f
    1990:	8f a5       	ldd	r24, Y+47	; 0x2f
    1992:	98 a9       	ldd	r25, Y+48	; 0x30
    1994:	9c a7       	std	Y+44, r25	; 0x2c
    1996:	8b a7       	std	Y+43, r24	; 0x2b
    1998:	8b a5       	ldd	r24, Y+43	; 0x2b
    199a:	9c a5       	ldd	r25, Y+44	; 0x2c
    199c:	01 97       	sbiw	r24, 0x01	; 1
    199e:	f1 f7       	brne	.-4      	; 0x199c <LCD_voidInit+0x398>
    19a0:	9c a7       	std	Y+44, r25	; 0x2c
    19a2:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(1);
		    LCD_voidSendCmd(LCD_DISP_ON_CURSOR_ON);
    19a4:	8e e0       	ldi	r24, 0x0E	; 14
    19a6:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <LCD_voidSendCmd>
    19aa:	80 e0       	ldi	r24, 0x00	; 0
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	a0 e8       	ldi	r26, 0x80	; 128
    19b0:	bf e3       	ldi	r27, 0x3F	; 63
    19b2:	8f a3       	std	Y+39, r24	; 0x27
    19b4:	98 a7       	std	Y+40, r25	; 0x28
    19b6:	a9 a7       	std	Y+41, r26	; 0x29
    19b8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19ba:	6f a1       	ldd	r22, Y+39	; 0x27
    19bc:	78 a5       	ldd	r23, Y+40	; 0x28
    19be:	89 a5       	ldd	r24, Y+41	; 0x29
    19c0:	9a a5       	ldd	r25, Y+42	; 0x2a
    19c2:	20 e0       	ldi	r18, 0x00	; 0
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	4a ef       	ldi	r20, 0xFA	; 250
    19c8:	54 e4       	ldi	r21, 0x44	; 68
    19ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ce:	dc 01       	movw	r26, r24
    19d0:	cb 01       	movw	r24, r22
    19d2:	8b a3       	std	Y+35, r24	; 0x23
    19d4:	9c a3       	std	Y+36, r25	; 0x24
    19d6:	ad a3       	std	Y+37, r26	; 0x25
    19d8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    19da:	6b a1       	ldd	r22, Y+35	; 0x23
    19dc:	7c a1       	ldd	r23, Y+36	; 0x24
    19de:	8d a1       	ldd	r24, Y+37	; 0x25
    19e0:	9e a1       	ldd	r25, Y+38	; 0x26
    19e2:	20 e0       	ldi	r18, 0x00	; 0
    19e4:	30 e0       	ldi	r19, 0x00	; 0
    19e6:	40 e8       	ldi	r20, 0x80	; 128
    19e8:	5f e3       	ldi	r21, 0x3F	; 63
    19ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19ee:	88 23       	and	r24, r24
    19f0:	2c f4       	brge	.+10     	; 0x19fc <LCD_voidInit+0x3f8>
		__ticks = 1;
    19f2:	81 e0       	ldi	r24, 0x01	; 1
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	9a a3       	std	Y+34, r25	; 0x22
    19f8:	89 a3       	std	Y+33, r24	; 0x21
    19fa:	3f c0       	rjmp	.+126    	; 0x1a7a <LCD_voidInit+0x476>
	else if (__tmp > 65535)
    19fc:	6b a1       	ldd	r22, Y+35	; 0x23
    19fe:	7c a1       	ldd	r23, Y+36	; 0x24
    1a00:	8d a1       	ldd	r24, Y+37	; 0x25
    1a02:	9e a1       	ldd	r25, Y+38	; 0x26
    1a04:	20 e0       	ldi	r18, 0x00	; 0
    1a06:	3f ef       	ldi	r19, 0xFF	; 255
    1a08:	4f e7       	ldi	r20, 0x7F	; 127
    1a0a:	57 e4       	ldi	r21, 0x47	; 71
    1a0c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a10:	18 16       	cp	r1, r24
    1a12:	4c f5       	brge	.+82     	; 0x1a66 <LCD_voidInit+0x462>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a14:	6f a1       	ldd	r22, Y+39	; 0x27
    1a16:	78 a5       	ldd	r23, Y+40	; 0x28
    1a18:	89 a5       	ldd	r24, Y+41	; 0x29
    1a1a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a1c:	20 e0       	ldi	r18, 0x00	; 0
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	40 e2       	ldi	r20, 0x20	; 32
    1a22:	51 e4       	ldi	r21, 0x41	; 65
    1a24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a28:	dc 01       	movw	r26, r24
    1a2a:	cb 01       	movw	r24, r22
    1a2c:	bc 01       	movw	r22, r24
    1a2e:	cd 01       	movw	r24, r26
    1a30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a34:	dc 01       	movw	r26, r24
    1a36:	cb 01       	movw	r24, r22
    1a38:	9a a3       	std	Y+34, r25	; 0x22
    1a3a:	89 a3       	std	Y+33, r24	; 0x21
    1a3c:	0f c0       	rjmp	.+30     	; 0x1a5c <LCD_voidInit+0x458>
    1a3e:	88 ec       	ldi	r24, 0xC8	; 200
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	98 a3       	std	Y+32, r25	; 0x20
    1a44:	8f 8f       	std	Y+31, r24	; 0x1f
    1a46:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a48:	98 a1       	ldd	r25, Y+32	; 0x20
    1a4a:	01 97       	sbiw	r24, 0x01	; 1
    1a4c:	f1 f7       	brne	.-4      	; 0x1a4a <LCD_voidInit+0x446>
    1a4e:	98 a3       	std	Y+32, r25	; 0x20
    1a50:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a52:	89 a1       	ldd	r24, Y+33	; 0x21
    1a54:	9a a1       	ldd	r25, Y+34	; 0x22
    1a56:	01 97       	sbiw	r24, 0x01	; 1
    1a58:	9a a3       	std	Y+34, r25	; 0x22
    1a5a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a5c:	89 a1       	ldd	r24, Y+33	; 0x21
    1a5e:	9a a1       	ldd	r25, Y+34	; 0x22
    1a60:	00 97       	sbiw	r24, 0x00	; 0
    1a62:	69 f7       	brne	.-38     	; 0x1a3e <LCD_voidInit+0x43a>
    1a64:	14 c0       	rjmp	.+40     	; 0x1a8e <LCD_voidInit+0x48a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a66:	6b a1       	ldd	r22, Y+35	; 0x23
    1a68:	7c a1       	ldd	r23, Y+36	; 0x24
    1a6a:	8d a1       	ldd	r24, Y+37	; 0x25
    1a6c:	9e a1       	ldd	r25, Y+38	; 0x26
    1a6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a72:	dc 01       	movw	r26, r24
    1a74:	cb 01       	movw	r24, r22
    1a76:	9a a3       	std	Y+34, r25	; 0x22
    1a78:	89 a3       	std	Y+33, r24	; 0x21
    1a7a:	89 a1       	ldd	r24, Y+33	; 0x21
    1a7c:	9a a1       	ldd	r25, Y+34	; 0x22
    1a7e:	9e 8f       	std	Y+30, r25	; 0x1e
    1a80:	8d 8f       	std	Y+29, r24	; 0x1d
    1a82:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a84:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a86:	01 97       	sbiw	r24, 0x01	; 1
    1a88:	f1 f7       	brne	.-4      	; 0x1a86 <LCD_voidInit+0x482>
    1a8a:	9e 8f       	std	Y+30, r25	; 0x1e
    1a8c:	8d 8f       	std	Y+29, r24	; 0x1d
		    _delay_ms(1);
		    LCD_voidSendCmd(LCD_CLEAR_SCREEN);
    1a8e:	81 e0       	ldi	r24, 0x01	; 1
    1a90:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <LCD_voidSendCmd>
    1a94:	80 e0       	ldi	r24, 0x00	; 0
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	a0 e2       	ldi	r26, 0x20	; 32
    1a9a:	b1 e4       	ldi	r27, 0x41	; 65
    1a9c:	89 8f       	std	Y+25, r24	; 0x19
    1a9e:	9a 8f       	std	Y+26, r25	; 0x1a
    1aa0:	ab 8f       	std	Y+27, r26	; 0x1b
    1aa2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aa4:	69 8d       	ldd	r22, Y+25	; 0x19
    1aa6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1aa8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1aaa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1aac:	20 e0       	ldi	r18, 0x00	; 0
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	4a ef       	ldi	r20, 0xFA	; 250
    1ab2:	54 e4       	ldi	r21, 0x44	; 68
    1ab4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ab8:	dc 01       	movw	r26, r24
    1aba:	cb 01       	movw	r24, r22
    1abc:	8d 8b       	std	Y+21, r24	; 0x15
    1abe:	9e 8b       	std	Y+22, r25	; 0x16
    1ac0:	af 8b       	std	Y+23, r26	; 0x17
    1ac2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ac4:	6d 89       	ldd	r22, Y+21	; 0x15
    1ac6:	7e 89       	ldd	r23, Y+22	; 0x16
    1ac8:	8f 89       	ldd	r24, Y+23	; 0x17
    1aca:	98 8d       	ldd	r25, Y+24	; 0x18
    1acc:	20 e0       	ldi	r18, 0x00	; 0
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	40 e8       	ldi	r20, 0x80	; 128
    1ad2:	5f e3       	ldi	r21, 0x3F	; 63
    1ad4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ad8:	88 23       	and	r24, r24
    1ada:	2c f4       	brge	.+10     	; 0x1ae6 <LCD_voidInit+0x4e2>
		__ticks = 1;
    1adc:	81 e0       	ldi	r24, 0x01	; 1
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	9c 8b       	std	Y+20, r25	; 0x14
    1ae2:	8b 8b       	std	Y+19, r24	; 0x13
    1ae4:	3f c0       	rjmp	.+126    	; 0x1b64 <LCD_voidInit+0x560>
	else if (__tmp > 65535)
    1ae6:	6d 89       	ldd	r22, Y+21	; 0x15
    1ae8:	7e 89       	ldd	r23, Y+22	; 0x16
    1aea:	8f 89       	ldd	r24, Y+23	; 0x17
    1aec:	98 8d       	ldd	r25, Y+24	; 0x18
    1aee:	20 e0       	ldi	r18, 0x00	; 0
    1af0:	3f ef       	ldi	r19, 0xFF	; 255
    1af2:	4f e7       	ldi	r20, 0x7F	; 127
    1af4:	57 e4       	ldi	r21, 0x47	; 71
    1af6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1afa:	18 16       	cp	r1, r24
    1afc:	4c f5       	brge	.+82     	; 0x1b50 <LCD_voidInit+0x54c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1afe:	69 8d       	ldd	r22, Y+25	; 0x19
    1b00:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b02:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b04:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b06:	20 e0       	ldi	r18, 0x00	; 0
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	40 e2       	ldi	r20, 0x20	; 32
    1b0c:	51 e4       	ldi	r21, 0x41	; 65
    1b0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b12:	dc 01       	movw	r26, r24
    1b14:	cb 01       	movw	r24, r22
    1b16:	bc 01       	movw	r22, r24
    1b18:	cd 01       	movw	r24, r26
    1b1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b1e:	dc 01       	movw	r26, r24
    1b20:	cb 01       	movw	r24, r22
    1b22:	9c 8b       	std	Y+20, r25	; 0x14
    1b24:	8b 8b       	std	Y+19, r24	; 0x13
    1b26:	0f c0       	rjmp	.+30     	; 0x1b46 <LCD_voidInit+0x542>
    1b28:	88 ec       	ldi	r24, 0xC8	; 200
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	9a 8b       	std	Y+18, r25	; 0x12
    1b2e:	89 8b       	std	Y+17, r24	; 0x11
    1b30:	89 89       	ldd	r24, Y+17	; 0x11
    1b32:	9a 89       	ldd	r25, Y+18	; 0x12
    1b34:	01 97       	sbiw	r24, 0x01	; 1
    1b36:	f1 f7       	brne	.-4      	; 0x1b34 <LCD_voidInit+0x530>
    1b38:	9a 8b       	std	Y+18, r25	; 0x12
    1b3a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b3c:	8b 89       	ldd	r24, Y+19	; 0x13
    1b3e:	9c 89       	ldd	r25, Y+20	; 0x14
    1b40:	01 97       	sbiw	r24, 0x01	; 1
    1b42:	9c 8b       	std	Y+20, r25	; 0x14
    1b44:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b46:	8b 89       	ldd	r24, Y+19	; 0x13
    1b48:	9c 89       	ldd	r25, Y+20	; 0x14
    1b4a:	00 97       	sbiw	r24, 0x00	; 0
    1b4c:	69 f7       	brne	.-38     	; 0x1b28 <LCD_voidInit+0x524>
    1b4e:	14 c0       	rjmp	.+40     	; 0x1b78 <LCD_voidInit+0x574>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b50:	6d 89       	ldd	r22, Y+21	; 0x15
    1b52:	7e 89       	ldd	r23, Y+22	; 0x16
    1b54:	8f 89       	ldd	r24, Y+23	; 0x17
    1b56:	98 8d       	ldd	r25, Y+24	; 0x18
    1b58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b5c:	dc 01       	movw	r26, r24
    1b5e:	cb 01       	movw	r24, r22
    1b60:	9c 8b       	std	Y+20, r25	; 0x14
    1b62:	8b 8b       	std	Y+19, r24	; 0x13
    1b64:	8b 89       	ldd	r24, Y+19	; 0x13
    1b66:	9c 89       	ldd	r25, Y+20	; 0x14
    1b68:	98 8b       	std	Y+16, r25	; 0x10
    1b6a:	8f 87       	std	Y+15, r24	; 0x0f
    1b6c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b6e:	98 89       	ldd	r25, Y+16	; 0x10
    1b70:	01 97       	sbiw	r24, 0x01	; 1
    1b72:	f1 f7       	brne	.-4      	; 0x1b70 <LCD_voidInit+0x56c>
    1b74:	98 8b       	std	Y+16, r25	; 0x10
    1b76:	8f 87       	std	Y+15, r24	; 0x0f
		    _delay_ms(10);
		    LCD_voidSendCmd(LCD_ENTRY_MODE);
    1b78:	86 e0       	ldi	r24, 0x06	; 6
    1b7a:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <LCD_voidSendCmd>
    1b7e:	80 e0       	ldi	r24, 0x00	; 0
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	a0 e8       	ldi	r26, 0x80	; 128
    1b84:	bf e3       	ldi	r27, 0x3F	; 63
    1b86:	8b 87       	std	Y+11, r24	; 0x0b
    1b88:	9c 87       	std	Y+12, r25	; 0x0c
    1b8a:	ad 87       	std	Y+13, r26	; 0x0d
    1b8c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b90:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b92:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b94:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b96:	20 e0       	ldi	r18, 0x00	; 0
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	4a ef       	ldi	r20, 0xFA	; 250
    1b9c:	54 e4       	ldi	r21, 0x44	; 68
    1b9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ba2:	dc 01       	movw	r26, r24
    1ba4:	cb 01       	movw	r24, r22
    1ba6:	8f 83       	std	Y+7, r24	; 0x07
    1ba8:	98 87       	std	Y+8, r25	; 0x08
    1baa:	a9 87       	std	Y+9, r26	; 0x09
    1bac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bae:	6f 81       	ldd	r22, Y+7	; 0x07
    1bb0:	78 85       	ldd	r23, Y+8	; 0x08
    1bb2:	89 85       	ldd	r24, Y+9	; 0x09
    1bb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bb6:	20 e0       	ldi	r18, 0x00	; 0
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	40 e8       	ldi	r20, 0x80	; 128
    1bbc:	5f e3       	ldi	r21, 0x3F	; 63
    1bbe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bc2:	88 23       	and	r24, r24
    1bc4:	2c f4       	brge	.+10     	; 0x1bd0 <LCD_voidInit+0x5cc>
		__ticks = 1;
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	9e 83       	std	Y+6, r25	; 0x06
    1bcc:	8d 83       	std	Y+5, r24	; 0x05
    1bce:	3f c0       	rjmp	.+126    	; 0x1c4e <LCD_voidInit+0x64a>
	else if (__tmp > 65535)
    1bd0:	6f 81       	ldd	r22, Y+7	; 0x07
    1bd2:	78 85       	ldd	r23, Y+8	; 0x08
    1bd4:	89 85       	ldd	r24, Y+9	; 0x09
    1bd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bd8:	20 e0       	ldi	r18, 0x00	; 0
    1bda:	3f ef       	ldi	r19, 0xFF	; 255
    1bdc:	4f e7       	ldi	r20, 0x7F	; 127
    1bde:	57 e4       	ldi	r21, 0x47	; 71
    1be0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1be4:	18 16       	cp	r1, r24
    1be6:	4c f5       	brge	.+82     	; 0x1c3a <LCD_voidInit+0x636>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1be8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bea:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bec:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bee:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bf0:	20 e0       	ldi	r18, 0x00	; 0
    1bf2:	30 e0       	ldi	r19, 0x00	; 0
    1bf4:	40 e2       	ldi	r20, 0x20	; 32
    1bf6:	51 e4       	ldi	r21, 0x41	; 65
    1bf8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bfc:	dc 01       	movw	r26, r24
    1bfe:	cb 01       	movw	r24, r22
    1c00:	bc 01       	movw	r22, r24
    1c02:	cd 01       	movw	r24, r26
    1c04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c08:	dc 01       	movw	r26, r24
    1c0a:	cb 01       	movw	r24, r22
    1c0c:	9e 83       	std	Y+6, r25	; 0x06
    1c0e:	8d 83       	std	Y+5, r24	; 0x05
    1c10:	0f c0       	rjmp	.+30     	; 0x1c30 <LCD_voidInit+0x62c>
    1c12:	88 ec       	ldi	r24, 0xC8	; 200
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	9c 83       	std	Y+4, r25	; 0x04
    1c18:	8b 83       	std	Y+3, r24	; 0x03
    1c1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c1e:	01 97       	sbiw	r24, 0x01	; 1
    1c20:	f1 f7       	brne	.-4      	; 0x1c1e <LCD_voidInit+0x61a>
    1c22:	9c 83       	std	Y+4, r25	; 0x04
    1c24:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c26:	8d 81       	ldd	r24, Y+5	; 0x05
    1c28:	9e 81       	ldd	r25, Y+6	; 0x06
    1c2a:	01 97       	sbiw	r24, 0x01	; 1
    1c2c:	9e 83       	std	Y+6, r25	; 0x06
    1c2e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c30:	8d 81       	ldd	r24, Y+5	; 0x05
    1c32:	9e 81       	ldd	r25, Y+6	; 0x06
    1c34:	00 97       	sbiw	r24, 0x00	; 0
    1c36:	69 f7       	brne	.-38     	; 0x1c12 <LCD_voidInit+0x60e>
    1c38:	14 c0       	rjmp	.+40     	; 0x1c62 <LCD_voidInit+0x65e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c3a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c3c:	78 85       	ldd	r23, Y+8	; 0x08
    1c3e:	89 85       	ldd	r24, Y+9	; 0x09
    1c40:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c46:	dc 01       	movw	r26, r24
    1c48:	cb 01       	movw	r24, r22
    1c4a:	9e 83       	std	Y+6, r25	; 0x06
    1c4c:	8d 83       	std	Y+5, r24	; 0x05
    1c4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c50:	9e 81       	ldd	r25, Y+6	; 0x06
    1c52:	9a 83       	std	Y+2, r25	; 0x02
    1c54:	89 83       	std	Y+1, r24	; 0x01
    1c56:	89 81       	ldd	r24, Y+1	; 0x01
    1c58:	9a 81       	ldd	r25, Y+2	; 0x02
    1c5a:	01 97       	sbiw	r24, 0x01	; 1
    1c5c:	f1 f7       	brne	.-4      	; 0x1c5a <LCD_voidInit+0x656>
    1c5e:	9a 83       	std	Y+2, r25	; 0x02
    1c60:	89 83       	std	Y+1, r24	; 0x01
	#endif
	
	
	

}
    1c62:	cc 5a       	subi	r28, 0xAC	; 172
    1c64:	df 4f       	sbci	r29, 0xFF	; 255
    1c66:	0f b6       	in	r0, 0x3f	; 63
    1c68:	f8 94       	cli
    1c6a:	de bf       	out	0x3e, r29	; 62
    1c6c:	0f be       	out	0x3f, r0	; 63
    1c6e:	cd bf       	out	0x3d, r28	; 61
    1c70:	cf 91       	pop	r28
    1c72:	df 91       	pop	r29
    1c74:	1f 91       	pop	r17
    1c76:	0f 91       	pop	r16
    1c78:	08 95       	ret

00001c7a <LCD_voidSendCmd>:

void LCD_voidSendCmd(u8 copy_u8Cmd)
{
    1c7a:	df 93       	push	r29
    1c7c:	cf 93       	push	r28
    1c7e:	cd b7       	in	r28, 0x3d	; 61
    1c80:	de b7       	in	r29, 0x3e	; 62
    1c82:	2f 97       	sbiw	r28, 0x0f	; 15
    1c84:	0f b6       	in	r0, 0x3f	; 63
    1c86:	f8 94       	cli
    1c88:	de bf       	out	0x3e, r29	; 62
    1c8a:	0f be       	out	0x3f, r0	; 63
    1c8c:	cd bf       	out	0x3d, r28	; 61
    1c8e:	8f 87       	std	Y+15, r24	; 0x0f
		GPIO_voidWritePin  (LCD_RWPORT , LCD_RWPIN , 0);
		LCD_voidSendEnPulse();
		
	#elif LCD_MODE == 1 
		#if LCD_NIBBLE == 0 
			GPIO_voidWriteLowNipple(LCD_PORT , copy_u8Cmd>>4);
    1c90:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c92:	98 2f       	mov	r25, r24
    1c94:	92 95       	swap	r25
    1c96:	9f 70       	andi	r25, 0x0F	; 15
    1c98:	80 e0       	ldi	r24, 0x00	; 0
    1c9a:	69 2f       	mov	r22, r25
    1c9c:	0e 94 bf 09 	call	0x137e	; 0x137e <GPIO_voidWriteLowNipple>
			GPIO_voidWritePin  (LCD_RSPORT , LCD_RSPIN , 0);
    1ca0:	80 e0       	ldi	r24, 0x00	; 0
    1ca2:	64 e0       	ldi	r22, 0x04	; 4
    1ca4:	40 e0       	ldi	r20, 0x00	; 0
    1ca6:	0e 94 df 06 	call	0xdbe	; 0xdbe <GPIO_voidWritePin>
			GPIO_voidWritePin  (LCD_RWPORT , LCD_RWPIN , 0);
    1caa:	80 e0       	ldi	r24, 0x00	; 0
    1cac:	65 e0       	ldi	r22, 0x05	; 5
    1cae:	40 e0       	ldi	r20, 0x00	; 0
    1cb0:	0e 94 df 06 	call	0xdbe	; 0xdbe <GPIO_voidWritePin>
			LCD_voidSendEnPulse();
    1cb4:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <LCD_voidSendEnPulse>
		
			GPIO_voidWriteLowNipple(LCD_PORT , copy_u8Cmd);
    1cb8:	80 e0       	ldi	r24, 0x00	; 0
    1cba:	6f 85       	ldd	r22, Y+15	; 0x0f
    1cbc:	0e 94 bf 09 	call	0x137e	; 0x137e <GPIO_voidWriteLowNipple>
			GPIO_voidWritePin  (LCD_RSPORT , LCD_RSPIN , 0);
    1cc0:	80 e0       	ldi	r24, 0x00	; 0
    1cc2:	64 e0       	ldi	r22, 0x04	; 4
    1cc4:	40 e0       	ldi	r20, 0x00	; 0
    1cc6:	0e 94 df 06 	call	0xdbe	; 0xdbe <GPIO_voidWritePin>
			GPIO_voidWritePin  (LCD_RWPORT , LCD_RWPIN , 0);
    1cca:	80 e0       	ldi	r24, 0x00	; 0
    1ccc:	65 e0       	ldi	r22, 0x05	; 5
    1cce:	40 e0       	ldi	r20, 0x00	; 0
    1cd0:	0e 94 df 06 	call	0xdbe	; 0xdbe <GPIO_voidWritePin>
			LCD_voidSendEnPulse();
    1cd4:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <LCD_voidSendEnPulse>
    1cd8:	80 e0       	ldi	r24, 0x00	; 0
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	a0 e0       	ldi	r26, 0x00	; 0
    1cde:	b0 e4       	ldi	r27, 0x40	; 64
    1ce0:	8b 87       	std	Y+11, r24	; 0x0b
    1ce2:	9c 87       	std	Y+12, r25	; 0x0c
    1ce4:	ad 87       	std	Y+13, r26	; 0x0d
    1ce6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ce8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cea:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cec:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cee:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cf0:	20 e0       	ldi	r18, 0x00	; 0
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	4a ef       	ldi	r20, 0xFA	; 250
    1cf6:	54 e4       	ldi	r21, 0x44	; 68
    1cf8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cfc:	dc 01       	movw	r26, r24
    1cfe:	cb 01       	movw	r24, r22
    1d00:	8f 83       	std	Y+7, r24	; 0x07
    1d02:	98 87       	std	Y+8, r25	; 0x08
    1d04:	a9 87       	std	Y+9, r26	; 0x09
    1d06:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d08:	6f 81       	ldd	r22, Y+7	; 0x07
    1d0a:	78 85       	ldd	r23, Y+8	; 0x08
    1d0c:	89 85       	ldd	r24, Y+9	; 0x09
    1d0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d10:	20 e0       	ldi	r18, 0x00	; 0
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	40 e8       	ldi	r20, 0x80	; 128
    1d16:	5f e3       	ldi	r21, 0x3F	; 63
    1d18:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d1c:	88 23       	and	r24, r24
    1d1e:	2c f4       	brge	.+10     	; 0x1d2a <LCD_voidSendCmd+0xb0>
		__ticks = 1;
    1d20:	81 e0       	ldi	r24, 0x01	; 1
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	9e 83       	std	Y+6, r25	; 0x06
    1d26:	8d 83       	std	Y+5, r24	; 0x05
    1d28:	3f c0       	rjmp	.+126    	; 0x1da8 <LCD_voidSendCmd+0x12e>
	else if (__tmp > 65535)
    1d2a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d2c:	78 85       	ldd	r23, Y+8	; 0x08
    1d2e:	89 85       	ldd	r24, Y+9	; 0x09
    1d30:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d32:	20 e0       	ldi	r18, 0x00	; 0
    1d34:	3f ef       	ldi	r19, 0xFF	; 255
    1d36:	4f e7       	ldi	r20, 0x7F	; 127
    1d38:	57 e4       	ldi	r21, 0x47	; 71
    1d3a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d3e:	18 16       	cp	r1, r24
    1d40:	4c f5       	brge	.+82     	; 0x1d94 <LCD_voidSendCmd+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d42:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d44:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d46:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d48:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d4a:	20 e0       	ldi	r18, 0x00	; 0
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	40 e2       	ldi	r20, 0x20	; 32
    1d50:	51 e4       	ldi	r21, 0x41	; 65
    1d52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d56:	dc 01       	movw	r26, r24
    1d58:	cb 01       	movw	r24, r22
    1d5a:	bc 01       	movw	r22, r24
    1d5c:	cd 01       	movw	r24, r26
    1d5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d62:	dc 01       	movw	r26, r24
    1d64:	cb 01       	movw	r24, r22
    1d66:	9e 83       	std	Y+6, r25	; 0x06
    1d68:	8d 83       	std	Y+5, r24	; 0x05
    1d6a:	0f c0       	rjmp	.+30     	; 0x1d8a <LCD_voidSendCmd+0x110>
    1d6c:	88 ec       	ldi	r24, 0xC8	; 200
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	9c 83       	std	Y+4, r25	; 0x04
    1d72:	8b 83       	std	Y+3, r24	; 0x03
    1d74:	8b 81       	ldd	r24, Y+3	; 0x03
    1d76:	9c 81       	ldd	r25, Y+4	; 0x04
    1d78:	01 97       	sbiw	r24, 0x01	; 1
    1d7a:	f1 f7       	brne	.-4      	; 0x1d78 <LCD_voidSendCmd+0xfe>
    1d7c:	9c 83       	std	Y+4, r25	; 0x04
    1d7e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d80:	8d 81       	ldd	r24, Y+5	; 0x05
    1d82:	9e 81       	ldd	r25, Y+6	; 0x06
    1d84:	01 97       	sbiw	r24, 0x01	; 1
    1d86:	9e 83       	std	Y+6, r25	; 0x06
    1d88:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d8e:	00 97       	sbiw	r24, 0x00	; 0
    1d90:	69 f7       	brne	.-38     	; 0x1d6c <LCD_voidSendCmd+0xf2>
    1d92:	14 c0       	rjmp	.+40     	; 0x1dbc <LCD_voidSendCmd+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d94:	6f 81       	ldd	r22, Y+7	; 0x07
    1d96:	78 85       	ldd	r23, Y+8	; 0x08
    1d98:	89 85       	ldd	r24, Y+9	; 0x09
    1d9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1da0:	dc 01       	movw	r26, r24
    1da2:	cb 01       	movw	r24, r22
    1da4:	9e 83       	std	Y+6, r25	; 0x06
    1da6:	8d 83       	std	Y+5, r24	; 0x05
    1da8:	8d 81       	ldd	r24, Y+5	; 0x05
    1daa:	9e 81       	ldd	r25, Y+6	; 0x06
    1dac:	9a 83       	std	Y+2, r25	; 0x02
    1dae:	89 83       	std	Y+1, r24	; 0x01
    1db0:	89 81       	ldd	r24, Y+1	; 0x01
    1db2:	9a 81       	ldd	r25, Y+2	; 0x02
    1db4:	01 97       	sbiw	r24, 0x01	; 1
    1db6:	f1 f7       	brne	.-4      	; 0x1db4 <LCD_voidSendCmd+0x13a>
    1db8:	9a 83       	std	Y+2, r25	; 0x02
    1dba:	89 83       	std	Y+1, r24	; 0x01
			LCD_voidSendEnPulse();
			_delay_ms(2);
		#endif
	#endif
	
}
    1dbc:	2f 96       	adiw	r28, 0x0f	; 15
    1dbe:	0f b6       	in	r0, 0x3f	; 63
    1dc0:	f8 94       	cli
    1dc2:	de bf       	out	0x3e, r29	; 62
    1dc4:	0f be       	out	0x3f, r0	; 63
    1dc6:	cd bf       	out	0x3d, r28	; 61
    1dc8:	cf 91       	pop	r28
    1dca:	df 91       	pop	r29
    1dcc:	08 95       	ret

00001dce <LCD_voidSendEnPulse>:
void LCD_voidSendEnPulse ()
{
    1dce:	df 93       	push	r29
    1dd0:	cf 93       	push	r28
    1dd2:	cd b7       	in	r28, 0x3d	; 61
    1dd4:	de b7       	in	r29, 0x3e	; 62
    1dd6:	2e 97       	sbiw	r28, 0x0e	; 14
    1dd8:	0f b6       	in	r0, 0x3f	; 63
    1dda:	f8 94       	cli
    1ddc:	de bf       	out	0x3e, r29	; 62
    1dde:	0f be       	out	0x3f, r0	; 63
    1de0:	cd bf       	out	0x3d, r28	; 61
	GPIO_voidWritePin  (LCD_ENPORT , LCD_ENPIN , 1);
    1de2:	80 e0       	ldi	r24, 0x00	; 0
    1de4:	66 e0       	ldi	r22, 0x06	; 6
    1de6:	41 e0       	ldi	r20, 0x01	; 1
    1de8:	0e 94 df 06 	call	0xdbe	; 0xdbe <GPIO_voidWritePin>
    1dec:	80 e0       	ldi	r24, 0x00	; 0
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	a0 e0       	ldi	r26, 0x00	; 0
    1df2:	b0 e4       	ldi	r27, 0x40	; 64
    1df4:	8b 87       	std	Y+11, r24	; 0x0b
    1df6:	9c 87       	std	Y+12, r25	; 0x0c
    1df8:	ad 87       	std	Y+13, r26	; 0x0d
    1dfa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dfc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dfe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e00:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e02:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e04:	20 e0       	ldi	r18, 0x00	; 0
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	4a ef       	ldi	r20, 0xFA	; 250
    1e0a:	54 e4       	ldi	r21, 0x44	; 68
    1e0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e10:	dc 01       	movw	r26, r24
    1e12:	cb 01       	movw	r24, r22
    1e14:	8f 83       	std	Y+7, r24	; 0x07
    1e16:	98 87       	std	Y+8, r25	; 0x08
    1e18:	a9 87       	std	Y+9, r26	; 0x09
    1e1a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e1c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e1e:	78 85       	ldd	r23, Y+8	; 0x08
    1e20:	89 85       	ldd	r24, Y+9	; 0x09
    1e22:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e24:	20 e0       	ldi	r18, 0x00	; 0
    1e26:	30 e0       	ldi	r19, 0x00	; 0
    1e28:	40 e8       	ldi	r20, 0x80	; 128
    1e2a:	5f e3       	ldi	r21, 0x3F	; 63
    1e2c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e30:	88 23       	and	r24, r24
    1e32:	2c f4       	brge	.+10     	; 0x1e3e <LCD_voidSendEnPulse+0x70>
		__ticks = 1;
    1e34:	81 e0       	ldi	r24, 0x01	; 1
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	9e 83       	std	Y+6, r25	; 0x06
    1e3a:	8d 83       	std	Y+5, r24	; 0x05
    1e3c:	3f c0       	rjmp	.+126    	; 0x1ebc <LCD_voidSendEnPulse+0xee>
	else if (__tmp > 65535)
    1e3e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e40:	78 85       	ldd	r23, Y+8	; 0x08
    1e42:	89 85       	ldd	r24, Y+9	; 0x09
    1e44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e46:	20 e0       	ldi	r18, 0x00	; 0
    1e48:	3f ef       	ldi	r19, 0xFF	; 255
    1e4a:	4f e7       	ldi	r20, 0x7F	; 127
    1e4c:	57 e4       	ldi	r21, 0x47	; 71
    1e4e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e52:	18 16       	cp	r1, r24
    1e54:	4c f5       	brge	.+82     	; 0x1ea8 <LCD_voidSendEnPulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e56:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e58:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e5e:	20 e0       	ldi	r18, 0x00	; 0
    1e60:	30 e0       	ldi	r19, 0x00	; 0
    1e62:	40 e2       	ldi	r20, 0x20	; 32
    1e64:	51 e4       	ldi	r21, 0x41	; 65
    1e66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e6a:	dc 01       	movw	r26, r24
    1e6c:	cb 01       	movw	r24, r22
    1e6e:	bc 01       	movw	r22, r24
    1e70:	cd 01       	movw	r24, r26
    1e72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e76:	dc 01       	movw	r26, r24
    1e78:	cb 01       	movw	r24, r22
    1e7a:	9e 83       	std	Y+6, r25	; 0x06
    1e7c:	8d 83       	std	Y+5, r24	; 0x05
    1e7e:	0f c0       	rjmp	.+30     	; 0x1e9e <LCD_voidSendEnPulse+0xd0>
    1e80:	88 ec       	ldi	r24, 0xC8	; 200
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	9c 83       	std	Y+4, r25	; 0x04
    1e86:	8b 83       	std	Y+3, r24	; 0x03
    1e88:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e8c:	01 97       	sbiw	r24, 0x01	; 1
    1e8e:	f1 f7       	brne	.-4      	; 0x1e8c <LCD_voidSendEnPulse+0xbe>
    1e90:	9c 83       	std	Y+4, r25	; 0x04
    1e92:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e94:	8d 81       	ldd	r24, Y+5	; 0x05
    1e96:	9e 81       	ldd	r25, Y+6	; 0x06
    1e98:	01 97       	sbiw	r24, 0x01	; 1
    1e9a:	9e 83       	std	Y+6, r25	; 0x06
    1e9c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1ea0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ea2:	00 97       	sbiw	r24, 0x00	; 0
    1ea4:	69 f7       	brne	.-38     	; 0x1e80 <LCD_voidSendEnPulse+0xb2>
    1ea6:	14 c0       	rjmp	.+40     	; 0x1ed0 <LCD_voidSendEnPulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ea8:	6f 81       	ldd	r22, Y+7	; 0x07
    1eaa:	78 85       	ldd	r23, Y+8	; 0x08
    1eac:	89 85       	ldd	r24, Y+9	; 0x09
    1eae:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eb4:	dc 01       	movw	r26, r24
    1eb6:	cb 01       	movw	r24, r22
    1eb8:	9e 83       	std	Y+6, r25	; 0x06
    1eba:	8d 83       	std	Y+5, r24	; 0x05
    1ebc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ebe:	9e 81       	ldd	r25, Y+6	; 0x06
    1ec0:	9a 83       	std	Y+2, r25	; 0x02
    1ec2:	89 83       	std	Y+1, r24	; 0x01
    1ec4:	89 81       	ldd	r24, Y+1	; 0x01
    1ec6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ec8:	01 97       	sbiw	r24, 0x01	; 1
    1eca:	f1 f7       	brne	.-4      	; 0x1ec8 <LCD_voidSendEnPulse+0xfa>
    1ecc:	9a 83       	std	Y+2, r25	; 0x02
    1ece:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	GPIO_voidWritePin  (LCD_ENPORT , LCD_ENPIN , 0);
    1ed0:	80 e0       	ldi	r24, 0x00	; 0
    1ed2:	66 e0       	ldi	r22, 0x06	; 6
    1ed4:	40 e0       	ldi	r20, 0x00	; 0
    1ed6:	0e 94 df 06 	call	0xdbe	; 0xdbe <GPIO_voidWritePin>

}
    1eda:	2e 96       	adiw	r28, 0x0e	; 14
    1edc:	0f b6       	in	r0, 0x3f	; 63
    1ede:	f8 94       	cli
    1ee0:	de bf       	out	0x3e, r29	; 62
    1ee2:	0f be       	out	0x3f, r0	; 63
    1ee4:	cd bf       	out	0x3d, r28	; 61
    1ee6:	cf 91       	pop	r28
    1ee8:	df 91       	pop	r29
    1eea:	08 95       	ret

00001eec <LCD_voidMoveCrusor>:
void LCD_voidMoveCrusor(u8 copy_u8Line , u8 copy_u8Position)
{
    1eec:	df 93       	push	r29
    1eee:	cf 93       	push	r28
    1ef0:	cd b7       	in	r28, 0x3d	; 61
    1ef2:	de b7       	in	r29, 0x3e	; 62
    1ef4:	61 97       	sbiw	r28, 0x11	; 17
    1ef6:	0f b6       	in	r0, 0x3f	; 63
    1ef8:	f8 94       	cli
    1efa:	de bf       	out	0x3e, r29	; 62
    1efc:	0f be       	out	0x3f, r0	; 63
    1efe:	cd bf       	out	0x3d, r28	; 61
    1f00:	88 8b       	std	Y+16, r24	; 0x10
    1f02:	69 8b       	std	Y+17, r22	; 0x11
	u8 data ;
if(copy_u8Line < 1 || copy_u8Line > 2 || copy_u8Position >16 || copy_u8Position <1 )	
    1f04:	88 89       	ldd	r24, Y+16	; 0x10
    1f06:	88 23       	and	r24, r24
    1f08:	49 f0       	breq	.+18     	; 0x1f1c <LCD_voidMoveCrusor+0x30>
    1f0a:	88 89       	ldd	r24, Y+16	; 0x10
    1f0c:	83 30       	cpi	r24, 0x03	; 3
    1f0e:	30 f4       	brcc	.+12     	; 0x1f1c <LCD_voidMoveCrusor+0x30>
    1f10:	89 89       	ldd	r24, Y+17	; 0x11
    1f12:	81 31       	cpi	r24, 0x11	; 17
    1f14:	18 f4       	brcc	.+6      	; 0x1f1c <LCD_voidMoveCrusor+0x30>
    1f16:	89 89       	ldd	r24, Y+17	; 0x11
    1f18:	88 23       	and	r24, r24
    1f1a:	19 f4       	brne	.+6      	; 0x1f22 <LCD_voidMoveCrusor+0x36>
{
	data = 0x80 ;
    1f1c:	80 e8       	ldi	r24, 0x80	; 128
    1f1e:	8f 87       	std	Y+15, r24	; 0x0f
    1f20:	0d c0       	rjmp	.+26     	; 0x1f3c <LCD_voidMoveCrusor+0x50>
}
else if (copy_u8Line ==1)
    1f22:	88 89       	ldd	r24, Y+16	; 0x10
    1f24:	81 30       	cpi	r24, 0x01	; 1
    1f26:	21 f4       	brne	.+8      	; 0x1f30 <LCD_voidMoveCrusor+0x44>
{
	data = 0x80 +(copy_u8Position -1);
    1f28:	89 89       	ldd	r24, Y+17	; 0x11
    1f2a:	81 58       	subi	r24, 0x81	; 129
    1f2c:	8f 87       	std	Y+15, r24	; 0x0f
    1f2e:	06 c0       	rjmp	.+12     	; 0x1f3c <LCD_voidMoveCrusor+0x50>
}
else if (copy_u8Line==2)
    1f30:	88 89       	ldd	r24, Y+16	; 0x10
    1f32:	82 30       	cpi	r24, 0x02	; 2
    1f34:	19 f4       	brne	.+6      	; 0x1f3c <LCD_voidMoveCrusor+0x50>
{
	data = 0xC0 + (copy_u8Position -1 );
    1f36:	89 89       	ldd	r24, Y+17	; 0x11
    1f38:	81 54       	subi	r24, 0x41	; 65
    1f3a:	8f 87       	std	Y+15, r24	; 0x0f
}
LCD_voidSendCmd(data);
    1f3c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f3e:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <LCD_voidSendCmd>
    1f42:	80 e0       	ldi	r24, 0x00	; 0
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	a0 e8       	ldi	r26, 0x80	; 128
    1f48:	bf e3       	ldi	r27, 0x3F	; 63
    1f4a:	8b 87       	std	Y+11, r24	; 0x0b
    1f4c:	9c 87       	std	Y+12, r25	; 0x0c
    1f4e:	ad 87       	std	Y+13, r26	; 0x0d
    1f50:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f52:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f54:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f56:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f58:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f5a:	20 e0       	ldi	r18, 0x00	; 0
    1f5c:	30 e0       	ldi	r19, 0x00	; 0
    1f5e:	4a ef       	ldi	r20, 0xFA	; 250
    1f60:	54 e4       	ldi	r21, 0x44	; 68
    1f62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f66:	dc 01       	movw	r26, r24
    1f68:	cb 01       	movw	r24, r22
    1f6a:	8f 83       	std	Y+7, r24	; 0x07
    1f6c:	98 87       	std	Y+8, r25	; 0x08
    1f6e:	a9 87       	std	Y+9, r26	; 0x09
    1f70:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f72:	6f 81       	ldd	r22, Y+7	; 0x07
    1f74:	78 85       	ldd	r23, Y+8	; 0x08
    1f76:	89 85       	ldd	r24, Y+9	; 0x09
    1f78:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f7a:	20 e0       	ldi	r18, 0x00	; 0
    1f7c:	30 e0       	ldi	r19, 0x00	; 0
    1f7e:	40 e8       	ldi	r20, 0x80	; 128
    1f80:	5f e3       	ldi	r21, 0x3F	; 63
    1f82:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f86:	88 23       	and	r24, r24
    1f88:	2c f4       	brge	.+10     	; 0x1f94 <LCD_voidMoveCrusor+0xa8>
		__ticks = 1;
    1f8a:	81 e0       	ldi	r24, 0x01	; 1
    1f8c:	90 e0       	ldi	r25, 0x00	; 0
    1f8e:	9e 83       	std	Y+6, r25	; 0x06
    1f90:	8d 83       	std	Y+5, r24	; 0x05
    1f92:	3f c0       	rjmp	.+126    	; 0x2012 <LCD_voidMoveCrusor+0x126>
	else if (__tmp > 65535)
    1f94:	6f 81       	ldd	r22, Y+7	; 0x07
    1f96:	78 85       	ldd	r23, Y+8	; 0x08
    1f98:	89 85       	ldd	r24, Y+9	; 0x09
    1f9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f9c:	20 e0       	ldi	r18, 0x00	; 0
    1f9e:	3f ef       	ldi	r19, 0xFF	; 255
    1fa0:	4f e7       	ldi	r20, 0x7F	; 127
    1fa2:	57 e4       	ldi	r21, 0x47	; 71
    1fa4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fa8:	18 16       	cp	r1, r24
    1faa:	4c f5       	brge	.+82     	; 0x1ffe <LCD_voidMoveCrusor+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fac:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fae:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fb0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fb2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fb4:	20 e0       	ldi	r18, 0x00	; 0
    1fb6:	30 e0       	ldi	r19, 0x00	; 0
    1fb8:	40 e2       	ldi	r20, 0x20	; 32
    1fba:	51 e4       	ldi	r21, 0x41	; 65
    1fbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fc0:	dc 01       	movw	r26, r24
    1fc2:	cb 01       	movw	r24, r22
    1fc4:	bc 01       	movw	r22, r24
    1fc6:	cd 01       	movw	r24, r26
    1fc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fcc:	dc 01       	movw	r26, r24
    1fce:	cb 01       	movw	r24, r22
    1fd0:	9e 83       	std	Y+6, r25	; 0x06
    1fd2:	8d 83       	std	Y+5, r24	; 0x05
    1fd4:	0f c0       	rjmp	.+30     	; 0x1ff4 <LCD_voidMoveCrusor+0x108>
    1fd6:	88 ec       	ldi	r24, 0xC8	; 200
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	9c 83       	std	Y+4, r25	; 0x04
    1fdc:	8b 83       	std	Y+3, r24	; 0x03
    1fde:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fe2:	01 97       	sbiw	r24, 0x01	; 1
    1fe4:	f1 f7       	brne	.-4      	; 0x1fe2 <LCD_voidMoveCrusor+0xf6>
    1fe6:	9c 83       	std	Y+4, r25	; 0x04
    1fe8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fea:	8d 81       	ldd	r24, Y+5	; 0x05
    1fec:	9e 81       	ldd	r25, Y+6	; 0x06
    1fee:	01 97       	sbiw	r24, 0x01	; 1
    1ff0:	9e 83       	std	Y+6, r25	; 0x06
    1ff2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ff4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ff6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ff8:	00 97       	sbiw	r24, 0x00	; 0
    1ffa:	69 f7       	brne	.-38     	; 0x1fd6 <LCD_voidMoveCrusor+0xea>
    1ffc:	14 c0       	rjmp	.+40     	; 0x2026 <LCD_voidMoveCrusor+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ffe:	6f 81       	ldd	r22, Y+7	; 0x07
    2000:	78 85       	ldd	r23, Y+8	; 0x08
    2002:	89 85       	ldd	r24, Y+9	; 0x09
    2004:	9a 85       	ldd	r25, Y+10	; 0x0a
    2006:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    200a:	dc 01       	movw	r26, r24
    200c:	cb 01       	movw	r24, r22
    200e:	9e 83       	std	Y+6, r25	; 0x06
    2010:	8d 83       	std	Y+5, r24	; 0x05
    2012:	8d 81       	ldd	r24, Y+5	; 0x05
    2014:	9e 81       	ldd	r25, Y+6	; 0x06
    2016:	9a 83       	std	Y+2, r25	; 0x02
    2018:	89 83       	std	Y+1, r24	; 0x01
    201a:	89 81       	ldd	r24, Y+1	; 0x01
    201c:	9a 81       	ldd	r25, Y+2	; 0x02
    201e:	01 97       	sbiw	r24, 0x01	; 1
    2020:	f1 f7       	brne	.-4      	; 0x201e <LCD_voidMoveCrusor+0x132>
    2022:	9a 83       	std	Y+2, r25	; 0x02
    2024:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(1);
}
    2026:	61 96       	adiw	r28, 0x11	; 17
    2028:	0f b6       	in	r0, 0x3f	; 63
    202a:	f8 94       	cli
    202c:	de bf       	out	0x3e, r29	; 62
    202e:	0f be       	out	0x3f, r0	; 63
    2030:	cd bf       	out	0x3d, r28	; 61
    2032:	cf 91       	pop	r28
    2034:	df 91       	pop	r29
    2036:	08 95       	ret

00002038 <LCD_voidClearScreen>:
void LCD_voidClearScreen()
{
    2038:	df 93       	push	r29
    203a:	cf 93       	push	r28
    203c:	cd b7       	in	r28, 0x3d	; 61
    203e:	de b7       	in	r29, 0x3e	; 62
    2040:	2e 97       	sbiw	r28, 0x0e	; 14
    2042:	0f b6       	in	r0, 0x3f	; 63
    2044:	f8 94       	cli
    2046:	de bf       	out	0x3e, r29	; 62
    2048:	0f be       	out	0x3f, r0	; 63
    204a:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCmd(LCD_CLEAR_SCREEN);
    204c:	81 e0       	ldi	r24, 0x01	; 1
    204e:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <LCD_voidSendCmd>
    2052:	80 e0       	ldi	r24, 0x00	; 0
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	a0 e2       	ldi	r26, 0x20	; 32
    2058:	b1 e4       	ldi	r27, 0x41	; 65
    205a:	8b 87       	std	Y+11, r24	; 0x0b
    205c:	9c 87       	std	Y+12, r25	; 0x0c
    205e:	ad 87       	std	Y+13, r26	; 0x0d
    2060:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2062:	6b 85       	ldd	r22, Y+11	; 0x0b
    2064:	7c 85       	ldd	r23, Y+12	; 0x0c
    2066:	8d 85       	ldd	r24, Y+13	; 0x0d
    2068:	9e 85       	ldd	r25, Y+14	; 0x0e
    206a:	20 e0       	ldi	r18, 0x00	; 0
    206c:	30 e0       	ldi	r19, 0x00	; 0
    206e:	4a ef       	ldi	r20, 0xFA	; 250
    2070:	54 e4       	ldi	r21, 0x44	; 68
    2072:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2076:	dc 01       	movw	r26, r24
    2078:	cb 01       	movw	r24, r22
    207a:	8f 83       	std	Y+7, r24	; 0x07
    207c:	98 87       	std	Y+8, r25	; 0x08
    207e:	a9 87       	std	Y+9, r26	; 0x09
    2080:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2082:	6f 81       	ldd	r22, Y+7	; 0x07
    2084:	78 85       	ldd	r23, Y+8	; 0x08
    2086:	89 85       	ldd	r24, Y+9	; 0x09
    2088:	9a 85       	ldd	r25, Y+10	; 0x0a
    208a:	20 e0       	ldi	r18, 0x00	; 0
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	40 e8       	ldi	r20, 0x80	; 128
    2090:	5f e3       	ldi	r21, 0x3F	; 63
    2092:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2096:	88 23       	and	r24, r24
    2098:	2c f4       	brge	.+10     	; 0x20a4 <LCD_voidClearScreen+0x6c>
		__ticks = 1;
    209a:	81 e0       	ldi	r24, 0x01	; 1
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	9e 83       	std	Y+6, r25	; 0x06
    20a0:	8d 83       	std	Y+5, r24	; 0x05
    20a2:	3f c0       	rjmp	.+126    	; 0x2122 <LCD_voidClearScreen+0xea>
	else if (__tmp > 65535)
    20a4:	6f 81       	ldd	r22, Y+7	; 0x07
    20a6:	78 85       	ldd	r23, Y+8	; 0x08
    20a8:	89 85       	ldd	r24, Y+9	; 0x09
    20aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ac:	20 e0       	ldi	r18, 0x00	; 0
    20ae:	3f ef       	ldi	r19, 0xFF	; 255
    20b0:	4f e7       	ldi	r20, 0x7F	; 127
    20b2:	57 e4       	ldi	r21, 0x47	; 71
    20b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20b8:	18 16       	cp	r1, r24
    20ba:	4c f5       	brge	.+82     	; 0x210e <LCD_voidClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    20be:	7c 85       	ldd	r23, Y+12	; 0x0c
    20c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    20c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    20c4:	20 e0       	ldi	r18, 0x00	; 0
    20c6:	30 e0       	ldi	r19, 0x00	; 0
    20c8:	40 e2       	ldi	r20, 0x20	; 32
    20ca:	51 e4       	ldi	r21, 0x41	; 65
    20cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20d0:	dc 01       	movw	r26, r24
    20d2:	cb 01       	movw	r24, r22
    20d4:	bc 01       	movw	r22, r24
    20d6:	cd 01       	movw	r24, r26
    20d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20dc:	dc 01       	movw	r26, r24
    20de:	cb 01       	movw	r24, r22
    20e0:	9e 83       	std	Y+6, r25	; 0x06
    20e2:	8d 83       	std	Y+5, r24	; 0x05
    20e4:	0f c0       	rjmp	.+30     	; 0x2104 <LCD_voidClearScreen+0xcc>
    20e6:	88 ec       	ldi	r24, 0xC8	; 200
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	9c 83       	std	Y+4, r25	; 0x04
    20ec:	8b 83       	std	Y+3, r24	; 0x03
    20ee:	8b 81       	ldd	r24, Y+3	; 0x03
    20f0:	9c 81       	ldd	r25, Y+4	; 0x04
    20f2:	01 97       	sbiw	r24, 0x01	; 1
    20f4:	f1 f7       	brne	.-4      	; 0x20f2 <LCD_voidClearScreen+0xba>
    20f6:	9c 83       	std	Y+4, r25	; 0x04
    20f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20fa:	8d 81       	ldd	r24, Y+5	; 0x05
    20fc:	9e 81       	ldd	r25, Y+6	; 0x06
    20fe:	01 97       	sbiw	r24, 0x01	; 1
    2100:	9e 83       	std	Y+6, r25	; 0x06
    2102:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2104:	8d 81       	ldd	r24, Y+5	; 0x05
    2106:	9e 81       	ldd	r25, Y+6	; 0x06
    2108:	00 97       	sbiw	r24, 0x00	; 0
    210a:	69 f7       	brne	.-38     	; 0x20e6 <LCD_voidClearScreen+0xae>
    210c:	14 c0       	rjmp	.+40     	; 0x2136 <LCD_voidClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    210e:	6f 81       	ldd	r22, Y+7	; 0x07
    2110:	78 85       	ldd	r23, Y+8	; 0x08
    2112:	89 85       	ldd	r24, Y+9	; 0x09
    2114:	9a 85       	ldd	r25, Y+10	; 0x0a
    2116:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    211a:	dc 01       	movw	r26, r24
    211c:	cb 01       	movw	r24, r22
    211e:	9e 83       	std	Y+6, r25	; 0x06
    2120:	8d 83       	std	Y+5, r24	; 0x05
    2122:	8d 81       	ldd	r24, Y+5	; 0x05
    2124:	9e 81       	ldd	r25, Y+6	; 0x06
    2126:	9a 83       	std	Y+2, r25	; 0x02
    2128:	89 83       	std	Y+1, r24	; 0x01
    212a:	89 81       	ldd	r24, Y+1	; 0x01
    212c:	9a 81       	ldd	r25, Y+2	; 0x02
    212e:	01 97       	sbiw	r24, 0x01	; 1
    2130:	f1 f7       	brne	.-4      	; 0x212e <LCD_voidClearScreen+0xf6>
    2132:	9a 83       	std	Y+2, r25	; 0x02
    2134:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    2136:	2e 96       	adiw	r28, 0x0e	; 14
    2138:	0f b6       	in	r0, 0x3f	; 63
    213a:	f8 94       	cli
    213c:	de bf       	out	0x3e, r29	; 62
    213e:	0f be       	out	0x3f, r0	; 63
    2140:	cd bf       	out	0x3d, r28	; 61
    2142:	cf 91       	pop	r28
    2144:	df 91       	pop	r29
    2146:	08 95       	ret

00002148 <LCD_voidDispChar>:
void LCD_voidDispChar(u8 copy_u8char)
{
    2148:	df 93       	push	r29
    214a:	cf 93       	push	r28
    214c:	cd b7       	in	r28, 0x3d	; 61
    214e:	de b7       	in	r29, 0x3e	; 62
    2150:	2f 97       	sbiw	r28, 0x0f	; 15
    2152:	0f b6       	in	r0, 0x3f	; 63
    2154:	f8 94       	cli
    2156:	de bf       	out	0x3e, r29	; 62
    2158:	0f be       	out	0x3f, r0	; 63
    215a:	cd bf       	out	0x3d, r28	; 61
    215c:	8f 87       	std	Y+15, r24	; 0x0f
		GPIO_voidWritePin  (LCD_RWPORT , LCD_RWPIN , 0);
		LCD_voidSendEnPulse();
		
	#elif LCD_MODE == 1 
		#if LCD_NIBBLE == 0 
			GPIO_voidWriteLowNipple(LCD_PORT , copy_u8char>>4);
    215e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2160:	98 2f       	mov	r25, r24
    2162:	92 95       	swap	r25
    2164:	9f 70       	andi	r25, 0x0F	; 15
    2166:	80 e0       	ldi	r24, 0x00	; 0
    2168:	69 2f       	mov	r22, r25
    216a:	0e 94 bf 09 	call	0x137e	; 0x137e <GPIO_voidWriteLowNipple>
			GPIO_voidWritePin  (LCD_RSPORT , LCD_RSPIN , 1);
    216e:	80 e0       	ldi	r24, 0x00	; 0
    2170:	64 e0       	ldi	r22, 0x04	; 4
    2172:	41 e0       	ldi	r20, 0x01	; 1
    2174:	0e 94 df 06 	call	0xdbe	; 0xdbe <GPIO_voidWritePin>
			GPIO_voidWritePin  (LCD_RWPORT , LCD_RWPIN , 0);
    2178:	80 e0       	ldi	r24, 0x00	; 0
    217a:	65 e0       	ldi	r22, 0x05	; 5
    217c:	40 e0       	ldi	r20, 0x00	; 0
    217e:	0e 94 df 06 	call	0xdbe	; 0xdbe <GPIO_voidWritePin>
			LCD_voidSendEnPulse();
    2182:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <LCD_voidSendEnPulse>
		
			GPIO_voidWriteLowNipple(LCD_PORT , copy_u8char);
    2186:	80 e0       	ldi	r24, 0x00	; 0
    2188:	6f 85       	ldd	r22, Y+15	; 0x0f
    218a:	0e 94 bf 09 	call	0x137e	; 0x137e <GPIO_voidWriteLowNipple>
			GPIO_voidWritePin  (LCD_RSPORT , LCD_RSPIN , 1);
    218e:	80 e0       	ldi	r24, 0x00	; 0
    2190:	64 e0       	ldi	r22, 0x04	; 4
    2192:	41 e0       	ldi	r20, 0x01	; 1
    2194:	0e 94 df 06 	call	0xdbe	; 0xdbe <GPIO_voidWritePin>
			GPIO_voidWritePin  (LCD_RWPORT , LCD_RWPIN , 0);
    2198:	80 e0       	ldi	r24, 0x00	; 0
    219a:	65 e0       	ldi	r22, 0x05	; 5
    219c:	40 e0       	ldi	r20, 0x00	; 0
    219e:	0e 94 df 06 	call	0xdbe	; 0xdbe <GPIO_voidWritePin>
			LCD_voidSendEnPulse();
    21a2:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <LCD_voidSendEnPulse>
    21a6:	80 e0       	ldi	r24, 0x00	; 0
    21a8:	90 e0       	ldi	r25, 0x00	; 0
    21aa:	a0 e0       	ldi	r26, 0x00	; 0
    21ac:	b0 e4       	ldi	r27, 0x40	; 64
    21ae:	8b 87       	std	Y+11, r24	; 0x0b
    21b0:	9c 87       	std	Y+12, r25	; 0x0c
    21b2:	ad 87       	std	Y+13, r26	; 0x0d
    21b4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    21b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    21ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    21bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    21be:	20 e0       	ldi	r18, 0x00	; 0
    21c0:	30 e0       	ldi	r19, 0x00	; 0
    21c2:	4a ef       	ldi	r20, 0xFA	; 250
    21c4:	54 e4       	ldi	r21, 0x44	; 68
    21c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ca:	dc 01       	movw	r26, r24
    21cc:	cb 01       	movw	r24, r22
    21ce:	8f 83       	std	Y+7, r24	; 0x07
    21d0:	98 87       	std	Y+8, r25	; 0x08
    21d2:	a9 87       	std	Y+9, r26	; 0x09
    21d4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21d6:	6f 81       	ldd	r22, Y+7	; 0x07
    21d8:	78 85       	ldd	r23, Y+8	; 0x08
    21da:	89 85       	ldd	r24, Y+9	; 0x09
    21dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    21de:	20 e0       	ldi	r18, 0x00	; 0
    21e0:	30 e0       	ldi	r19, 0x00	; 0
    21e2:	40 e8       	ldi	r20, 0x80	; 128
    21e4:	5f e3       	ldi	r21, 0x3F	; 63
    21e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21ea:	88 23       	and	r24, r24
    21ec:	2c f4       	brge	.+10     	; 0x21f8 <LCD_voidDispChar+0xb0>
		__ticks = 1;
    21ee:	81 e0       	ldi	r24, 0x01	; 1
    21f0:	90 e0       	ldi	r25, 0x00	; 0
    21f2:	9e 83       	std	Y+6, r25	; 0x06
    21f4:	8d 83       	std	Y+5, r24	; 0x05
    21f6:	3f c0       	rjmp	.+126    	; 0x2276 <LCD_voidDispChar+0x12e>
	else if (__tmp > 65535)
    21f8:	6f 81       	ldd	r22, Y+7	; 0x07
    21fa:	78 85       	ldd	r23, Y+8	; 0x08
    21fc:	89 85       	ldd	r24, Y+9	; 0x09
    21fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2200:	20 e0       	ldi	r18, 0x00	; 0
    2202:	3f ef       	ldi	r19, 0xFF	; 255
    2204:	4f e7       	ldi	r20, 0x7F	; 127
    2206:	57 e4       	ldi	r21, 0x47	; 71
    2208:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    220c:	18 16       	cp	r1, r24
    220e:	4c f5       	brge	.+82     	; 0x2262 <LCD_voidDispChar+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2210:	6b 85       	ldd	r22, Y+11	; 0x0b
    2212:	7c 85       	ldd	r23, Y+12	; 0x0c
    2214:	8d 85       	ldd	r24, Y+13	; 0x0d
    2216:	9e 85       	ldd	r25, Y+14	; 0x0e
    2218:	20 e0       	ldi	r18, 0x00	; 0
    221a:	30 e0       	ldi	r19, 0x00	; 0
    221c:	40 e2       	ldi	r20, 0x20	; 32
    221e:	51 e4       	ldi	r21, 0x41	; 65
    2220:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2224:	dc 01       	movw	r26, r24
    2226:	cb 01       	movw	r24, r22
    2228:	bc 01       	movw	r22, r24
    222a:	cd 01       	movw	r24, r26
    222c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2230:	dc 01       	movw	r26, r24
    2232:	cb 01       	movw	r24, r22
    2234:	9e 83       	std	Y+6, r25	; 0x06
    2236:	8d 83       	std	Y+5, r24	; 0x05
    2238:	0f c0       	rjmp	.+30     	; 0x2258 <LCD_voidDispChar+0x110>
    223a:	88 ec       	ldi	r24, 0xC8	; 200
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	9c 83       	std	Y+4, r25	; 0x04
    2240:	8b 83       	std	Y+3, r24	; 0x03
    2242:	8b 81       	ldd	r24, Y+3	; 0x03
    2244:	9c 81       	ldd	r25, Y+4	; 0x04
    2246:	01 97       	sbiw	r24, 0x01	; 1
    2248:	f1 f7       	brne	.-4      	; 0x2246 <LCD_voidDispChar+0xfe>
    224a:	9c 83       	std	Y+4, r25	; 0x04
    224c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    224e:	8d 81       	ldd	r24, Y+5	; 0x05
    2250:	9e 81       	ldd	r25, Y+6	; 0x06
    2252:	01 97       	sbiw	r24, 0x01	; 1
    2254:	9e 83       	std	Y+6, r25	; 0x06
    2256:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2258:	8d 81       	ldd	r24, Y+5	; 0x05
    225a:	9e 81       	ldd	r25, Y+6	; 0x06
    225c:	00 97       	sbiw	r24, 0x00	; 0
    225e:	69 f7       	brne	.-38     	; 0x223a <LCD_voidDispChar+0xf2>
    2260:	14 c0       	rjmp	.+40     	; 0x228a <LCD_voidDispChar+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2262:	6f 81       	ldd	r22, Y+7	; 0x07
    2264:	78 85       	ldd	r23, Y+8	; 0x08
    2266:	89 85       	ldd	r24, Y+9	; 0x09
    2268:	9a 85       	ldd	r25, Y+10	; 0x0a
    226a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    226e:	dc 01       	movw	r26, r24
    2270:	cb 01       	movw	r24, r22
    2272:	9e 83       	std	Y+6, r25	; 0x06
    2274:	8d 83       	std	Y+5, r24	; 0x05
    2276:	8d 81       	ldd	r24, Y+5	; 0x05
    2278:	9e 81       	ldd	r25, Y+6	; 0x06
    227a:	9a 83       	std	Y+2, r25	; 0x02
    227c:	89 83       	std	Y+1, r24	; 0x01
    227e:	89 81       	ldd	r24, Y+1	; 0x01
    2280:	9a 81       	ldd	r25, Y+2	; 0x02
    2282:	01 97       	sbiw	r24, 0x01	; 1
    2284:	f1 f7       	brne	.-4      	; 0x2282 <LCD_voidDispChar+0x13a>
    2286:	9a 83       	std	Y+2, r25	; 0x02
    2288:	89 83       	std	Y+1, r24	; 0x01
			LCD_voidSendEnPulse();
			_delay_ms(2);
		#endif
	#endif
		
}
    228a:	2f 96       	adiw	r28, 0x0f	; 15
    228c:	0f b6       	in	r0, 0x3f	; 63
    228e:	f8 94       	cli
    2290:	de bf       	out	0x3e, r29	; 62
    2292:	0f be       	out	0x3f, r0	; 63
    2294:	cd bf       	out	0x3d, r28	; 61
    2296:	cf 91       	pop	r28
    2298:	df 91       	pop	r29
    229a:	08 95       	ret

0000229c <LCD_voidDispString>:
void LCD_voidDispString(u8 *copy_u8String)
{
    229c:	df 93       	push	r29
    229e:	cf 93       	push	r28
    22a0:	00 d0       	rcall	.+0      	; 0x22a2 <LCD_voidDispString+0x6>
    22a2:	cd b7       	in	r28, 0x3d	; 61
    22a4:	de b7       	in	r29, 0x3e	; 62
    22a6:	9a 83       	std	Y+2, r25	; 0x02
    22a8:	89 83       	std	Y+1, r24	; 0x01
    22aa:	0a c0       	rjmp	.+20     	; 0x22c0 <LCD_voidDispString+0x24>
	while ((*copy_u8String) != '\0')
	{
		LCD_voidDispChar (*copy_u8String);
    22ac:	e9 81       	ldd	r30, Y+1	; 0x01
    22ae:	fa 81       	ldd	r31, Y+2	; 0x02
    22b0:	80 81       	ld	r24, Z
    22b2:	0e 94 a4 10 	call	0x2148	; 0x2148 <LCD_voidDispChar>
		copy_u8String ++ ;
    22b6:	89 81       	ldd	r24, Y+1	; 0x01
    22b8:	9a 81       	ldd	r25, Y+2	; 0x02
    22ba:	01 96       	adiw	r24, 0x01	; 1
    22bc:	9a 83       	std	Y+2, r25	; 0x02
    22be:	89 83       	std	Y+1, r24	; 0x01
	#endif
		
}
void LCD_voidDispString(u8 *copy_u8String)
{
	while ((*copy_u8String) != '\0')
    22c0:	e9 81       	ldd	r30, Y+1	; 0x01
    22c2:	fa 81       	ldd	r31, Y+2	; 0x02
    22c4:	80 81       	ld	r24, Z
    22c6:	88 23       	and	r24, r24
    22c8:	89 f7       	brne	.-30     	; 0x22ac <LCD_voidDispString+0x10>
	{
		LCD_voidDispChar (*copy_u8String);
		copy_u8String ++ ;
	}
}
    22ca:	0f 90       	pop	r0
    22cc:	0f 90       	pop	r0
    22ce:	cf 91       	pop	r28
    22d0:	df 91       	pop	r29
    22d2:	08 95       	ret

000022d4 <LCD_voidDispNumber>:
void LCD_voidDispNumber (u8 copy_u8Num)
{
    22d4:	df 93       	push	r29
    22d6:	cf 93       	push	r28
    22d8:	00 d0       	rcall	.+0      	; 0x22da <LCD_voidDispNumber+0x6>
    22da:	cd b7       	in	r28, 0x3d	; 61
    22dc:	de b7       	in	r29, 0x3e	; 62
    22de:	8a 83       	std	Y+2, r24	; 0x02
	u8 str[1];
	sprintf(str,"%d",copy_u8Num);
    22e0:	8a 81       	ldd	r24, Y+2	; 0x02
    22e2:	28 2f       	mov	r18, r24
    22e4:	30 e0       	ldi	r19, 0x00	; 0
    22e6:	00 d0       	rcall	.+0      	; 0x22e8 <LCD_voidDispNumber+0x14>
    22e8:	00 d0       	rcall	.+0      	; 0x22ea <LCD_voidDispNumber+0x16>
    22ea:	00 d0       	rcall	.+0      	; 0x22ec <LCD_voidDispNumber+0x18>
    22ec:	ed b7       	in	r30, 0x3d	; 61
    22ee:	fe b7       	in	r31, 0x3e	; 62
    22f0:	31 96       	adiw	r30, 0x01	; 1
    22f2:	ce 01       	movw	r24, r28
    22f4:	01 96       	adiw	r24, 0x01	; 1
    22f6:	91 83       	std	Z+1, r25	; 0x01
    22f8:	80 83       	st	Z, r24
    22fa:	80 e6       	ldi	r24, 0x60	; 96
    22fc:	90 e0       	ldi	r25, 0x00	; 0
    22fe:	93 83       	std	Z+3, r25	; 0x03
    2300:	82 83       	std	Z+2, r24	; 0x02
    2302:	35 83       	std	Z+5, r19	; 0x05
    2304:	24 83       	std	Z+4, r18	; 0x04
    2306:	0e 94 91 15 	call	0x2b22	; 0x2b22 <sprintf>
    230a:	8d b7       	in	r24, 0x3d	; 61
    230c:	9e b7       	in	r25, 0x3e	; 62
    230e:	06 96       	adiw	r24, 0x06	; 6
    2310:	0f b6       	in	r0, 0x3f	; 63
    2312:	f8 94       	cli
    2314:	9e bf       	out	0x3e, r25	; 62
    2316:	0f be       	out	0x3f, r0	; 63
    2318:	8d bf       	out	0x3d, r24	; 61
	LCD_voidDispString(str);
    231a:	ce 01       	movw	r24, r28
    231c:	01 96       	adiw	r24, 0x01	; 1
    231e:	0e 94 4e 11 	call	0x229c	; 0x229c <LCD_voidDispString>
}
    2322:	0f 90       	pop	r0
    2324:	0f 90       	pop	r0
    2326:	cf 91       	pop	r28
    2328:	df 91       	pop	r29
    232a:	08 95       	ret

0000232c <LED_voidTurnOn>:




void LED_voidTurnOn(u8 copy_u8port , u8 copy_u8pin)
{
    232c:	df 93       	push	r29
    232e:	cf 93       	push	r28
    2330:	00 d0       	rcall	.+0      	; 0x2332 <LED_voidTurnOn+0x6>
    2332:	cd b7       	in	r28, 0x3d	; 61
    2334:	de b7       	in	r29, 0x3e	; 62
    2336:	89 83       	std	Y+1, r24	; 0x01
    2338:	6a 83       	std	Y+2, r22	; 0x02
	GPIO_voidSetPinDDR(copy_u8port , copy_u8pin , OUTPUT );
    233a:	89 81       	ldd	r24, Y+1	; 0x01
    233c:	6a 81       	ldd	r22, Y+2	; 0x02
    233e:	41 e0       	ldi	r20, 0x01	; 1
    2340:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <GPIO_voidSetPinDDR>
	GPIO_voidWritePin (copy_u8port , copy_u8pin , HIGH);
    2344:	89 81       	ldd	r24, Y+1	; 0x01
    2346:	6a 81       	ldd	r22, Y+2	; 0x02
    2348:	41 e0       	ldi	r20, 0x01	; 1
    234a:	0e 94 df 06 	call	0xdbe	; 0xdbe <GPIO_voidWritePin>
}
    234e:	0f 90       	pop	r0
    2350:	0f 90       	pop	r0
    2352:	cf 91       	pop	r28
    2354:	df 91       	pop	r29
    2356:	08 95       	ret

00002358 <LED_voidTurnOff>:
void LED_voidTurnOff(u8 copy_u8port , u8 copy_u8pin)
{
    2358:	df 93       	push	r29
    235a:	cf 93       	push	r28
    235c:	00 d0       	rcall	.+0      	; 0x235e <LED_voidTurnOff+0x6>
    235e:	cd b7       	in	r28, 0x3d	; 61
    2360:	de b7       	in	r29, 0x3e	; 62
    2362:	89 83       	std	Y+1, r24	; 0x01
    2364:	6a 83       	std	Y+2, r22	; 0x02
	GPIO_voidSetPinDDR(copy_u8port , copy_u8pin , OUTPUT );
    2366:	89 81       	ldd	r24, Y+1	; 0x01
    2368:	6a 81       	ldd	r22, Y+2	; 0x02
    236a:	41 e0       	ldi	r20, 0x01	; 1
    236c:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <GPIO_voidSetPinDDR>
	GPIO_voidWritePin (copy_u8port , copy_u8pin , LOW);
    2370:	89 81       	ldd	r24, Y+1	; 0x01
    2372:	6a 81       	ldd	r22, Y+2	; 0x02
    2374:	40 e0       	ldi	r20, 0x00	; 0
    2376:	0e 94 df 06 	call	0xdbe	; 0xdbe <GPIO_voidWritePin>
}
    237a:	0f 90       	pop	r0
    237c:	0f 90       	pop	r0
    237e:	cf 91       	pop	r28
    2380:	df 91       	pop	r29
    2382:	08 95       	ret

00002384 <main>:
u8 Pass[4] , Password[4] ;

u8 flag = 0 ;

int main ()
{
    2384:	df 93       	push	r29
    2386:	cf 93       	push	r28
    2388:	cd b7       	in	r28, 0x3d	; 61
    238a:	de b7       	in	r29, 0x3e	; 62
    238c:	2e 97       	sbiw	r28, 0x0e	; 14
    238e:	0f b6       	in	r0, 0x3f	; 63
    2390:	f8 94       	cli
    2392:	de bf       	out	0x3e, r29	; 62
    2394:	0f be       	out	0x3f, r0	; 63
    2396:	cd bf       	out	0x3d, r28	; 61


	Keypad_voidInit( GPIOD );
    2398:	83 e0       	ldi	r24, 0x03	; 3
    239a:	0e 94 9f 0a 	call	0x153e	; 0x153e <Keypad_voidInit>
	LCD_voidInit();
    239e:	0e 94 02 0b 	call	0x1604	; 0x1604 <LCD_voidInit>

	while(1)
	{
	LCD_voidMoveCrusor(1,1);
    23a2:	81 e0       	ldi	r24, 0x01	; 1
    23a4:	61 e0       	ldi	r22, 0x01	; 1
    23a6:	0e 94 76 0f 	call	0x1eec	; 0x1eec <LCD_voidMoveCrusor>
	LCD_voidDispString("1-Set new Pass");
    23aa:	83 e6       	ldi	r24, 0x63	; 99
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	0e 94 4e 11 	call	0x229c	; 0x229c <LCD_voidDispString>
	LCD_voidMoveCrusor(2,1);
    23b2:	82 e0       	ldi	r24, 0x02	; 2
    23b4:	61 e0       	ldi	r22, 0x01	; 1
    23b6:	0e 94 76 0f 	call	0x1eec	; 0x1eec <LCD_voidMoveCrusor>
	LCD_voidDispString("2-Enter PassWord");
    23ba:	82 e7       	ldi	r24, 0x72	; 114
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	0e 94 4e 11 	call	0x229c	; 0x229c <LCD_voidDispString>
	do{

				Num =  Keypad_voidCheckVal(GPIOD);
    23c2:	83 e0       	ldi	r24, 0x03	; 3
    23c4:	0e 94 b5 0a 	call	0x156a	; 0x156a <Keypad_voidCheckVal>
    23c8:	80 93 00 01 	sts	0x0100, r24
			}while (Num==NOTPRESSED);
    23cc:	80 91 00 01 	lds	r24, 0x0100
    23d0:	8f 3f       	cpi	r24, 0xFF	; 255
    23d2:	b9 f3       	breq	.-18     	; 0x23c2 <main+0x3e>
    23d4:	80 e0       	ldi	r24, 0x00	; 0
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	a0 ef       	ldi	r26, 0xF0	; 240
    23da:	b1 e4       	ldi	r27, 0x41	; 65
    23dc:	8b 87       	std	Y+11, r24	; 0x0b
    23de:	9c 87       	std	Y+12, r25	; 0x0c
    23e0:	ad 87       	std	Y+13, r26	; 0x0d
    23e2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    23e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    23e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    23ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    23ec:	20 e0       	ldi	r18, 0x00	; 0
    23ee:	30 e0       	ldi	r19, 0x00	; 0
    23f0:	4a ef       	ldi	r20, 0xFA	; 250
    23f2:	54 e4       	ldi	r21, 0x44	; 68
    23f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23f8:	dc 01       	movw	r26, r24
    23fa:	cb 01       	movw	r24, r22
    23fc:	8f 83       	std	Y+7, r24	; 0x07
    23fe:	98 87       	std	Y+8, r25	; 0x08
    2400:	a9 87       	std	Y+9, r26	; 0x09
    2402:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2404:	6f 81       	ldd	r22, Y+7	; 0x07
    2406:	78 85       	ldd	r23, Y+8	; 0x08
    2408:	89 85       	ldd	r24, Y+9	; 0x09
    240a:	9a 85       	ldd	r25, Y+10	; 0x0a
    240c:	20 e0       	ldi	r18, 0x00	; 0
    240e:	30 e0       	ldi	r19, 0x00	; 0
    2410:	40 e8       	ldi	r20, 0x80	; 128
    2412:	5f e3       	ldi	r21, 0x3F	; 63
    2414:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2418:	88 23       	and	r24, r24
    241a:	2c f4       	brge	.+10     	; 0x2426 <main+0xa2>
		__ticks = 1;
    241c:	81 e0       	ldi	r24, 0x01	; 1
    241e:	90 e0       	ldi	r25, 0x00	; 0
    2420:	9e 83       	std	Y+6, r25	; 0x06
    2422:	8d 83       	std	Y+5, r24	; 0x05
    2424:	3f c0       	rjmp	.+126    	; 0x24a4 <main+0x120>
	else if (__tmp > 65535)
    2426:	6f 81       	ldd	r22, Y+7	; 0x07
    2428:	78 85       	ldd	r23, Y+8	; 0x08
    242a:	89 85       	ldd	r24, Y+9	; 0x09
    242c:	9a 85       	ldd	r25, Y+10	; 0x0a
    242e:	20 e0       	ldi	r18, 0x00	; 0
    2430:	3f ef       	ldi	r19, 0xFF	; 255
    2432:	4f e7       	ldi	r20, 0x7F	; 127
    2434:	57 e4       	ldi	r21, 0x47	; 71
    2436:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    243a:	18 16       	cp	r1, r24
    243c:	4c f5       	brge	.+82     	; 0x2490 <main+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    243e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2440:	7c 85       	ldd	r23, Y+12	; 0x0c
    2442:	8d 85       	ldd	r24, Y+13	; 0x0d
    2444:	9e 85       	ldd	r25, Y+14	; 0x0e
    2446:	20 e0       	ldi	r18, 0x00	; 0
    2448:	30 e0       	ldi	r19, 0x00	; 0
    244a:	40 e2       	ldi	r20, 0x20	; 32
    244c:	51 e4       	ldi	r21, 0x41	; 65
    244e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2452:	dc 01       	movw	r26, r24
    2454:	cb 01       	movw	r24, r22
    2456:	bc 01       	movw	r22, r24
    2458:	cd 01       	movw	r24, r26
    245a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    245e:	dc 01       	movw	r26, r24
    2460:	cb 01       	movw	r24, r22
    2462:	9e 83       	std	Y+6, r25	; 0x06
    2464:	8d 83       	std	Y+5, r24	; 0x05
    2466:	0f c0       	rjmp	.+30     	; 0x2486 <main+0x102>
    2468:	88 ec       	ldi	r24, 0xC8	; 200
    246a:	90 e0       	ldi	r25, 0x00	; 0
    246c:	9c 83       	std	Y+4, r25	; 0x04
    246e:	8b 83       	std	Y+3, r24	; 0x03
    2470:	8b 81       	ldd	r24, Y+3	; 0x03
    2472:	9c 81       	ldd	r25, Y+4	; 0x04
    2474:	01 97       	sbiw	r24, 0x01	; 1
    2476:	f1 f7       	brne	.-4      	; 0x2474 <main+0xf0>
    2478:	9c 83       	std	Y+4, r25	; 0x04
    247a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    247c:	8d 81       	ldd	r24, Y+5	; 0x05
    247e:	9e 81       	ldd	r25, Y+6	; 0x06
    2480:	01 97       	sbiw	r24, 0x01	; 1
    2482:	9e 83       	std	Y+6, r25	; 0x06
    2484:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2486:	8d 81       	ldd	r24, Y+5	; 0x05
    2488:	9e 81       	ldd	r25, Y+6	; 0x06
    248a:	00 97       	sbiw	r24, 0x00	; 0
    248c:	69 f7       	brne	.-38     	; 0x2468 <main+0xe4>
    248e:	14 c0       	rjmp	.+40     	; 0x24b8 <main+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2490:	6f 81       	ldd	r22, Y+7	; 0x07
    2492:	78 85       	ldd	r23, Y+8	; 0x08
    2494:	89 85       	ldd	r24, Y+9	; 0x09
    2496:	9a 85       	ldd	r25, Y+10	; 0x0a
    2498:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    249c:	dc 01       	movw	r26, r24
    249e:	cb 01       	movw	r24, r22
    24a0:	9e 83       	std	Y+6, r25	; 0x06
    24a2:	8d 83       	std	Y+5, r24	; 0x05
    24a4:	8d 81       	ldd	r24, Y+5	; 0x05
    24a6:	9e 81       	ldd	r25, Y+6	; 0x06
    24a8:	9a 83       	std	Y+2, r25	; 0x02
    24aa:	89 83       	std	Y+1, r24	; 0x01
    24ac:	89 81       	ldd	r24, Y+1	; 0x01
    24ae:	9a 81       	ldd	r25, Y+2	; 0x02
    24b0:	01 97       	sbiw	r24, 0x01	; 1
    24b2:	f1 f7       	brne	.-4      	; 0x24b0 <main+0x12c>
    24b4:	9a 83       	std	Y+2, r25	; 0x02
    24b6:	89 83       	std	Y+1, r24	; 0x01
			 _delay_ms(30);
			 if (Num =='1'){
    24b8:	80 91 00 01 	lds	r24, 0x0100
    24bc:	81 33       	cpi	r24, 0x31	; 49
    24be:	71 f5       	brne	.+92     	; 0x251c <main+0x198>
				 if(flag == 1 )
    24c0:	80 91 ff 00 	lds	r24, 0x00FF
    24c4:	81 30       	cpi	r24, 0x01	; 1
    24c6:	51 f4       	brne	.+20     	; 0x24dc <main+0x158>
				 {
					 do{
				 check_pass();
    24c8:	0e 94 db 13 	call	0x27b6	; 0x27b6 <check_pass>
					 if (try == 0){
    24cc:	80 91 fc 00 	lds	r24, 0x00FC
    24d0:	88 23       	and	r24, r24
    24d2:	21 f0       	breq	.+8      	; 0x24dc <main+0x158>
						 break ;
					 }

					 }while(true ==0 );
    24d4:	80 91 fe 00 	lds	r24, 0x00FE
    24d8:	88 23       	and	r24, r24
    24da:	b1 f3       	breq	.-20     	; 0x24c8 <main+0x144>
				 }
			 if (try !=0){
    24dc:	80 91 fc 00 	lds	r24, 0x00FC
    24e0:	88 23       	and	r24, r24
    24e2:	19 f0       	breq	.+6      	; 0x24ea <main+0x166>
				 set_pass();
    24e4:	0e 94 9f 12 	call	0x253e	; 0x253e <set_pass>
    24e8:	5c cf       	rjmp	.-328    	; 0x23a2 <main+0x1e>
			 }
			 else{
				 LCD_voidClearScreen();
    24ea:	0e 94 1c 10 	call	0x2038	; 0x2038 <LCD_voidClearScreen>
				 		LCD_voidMoveCrusor(1,1);
    24ee:	81 e0       	ldi	r24, 0x01	; 1
    24f0:	61 e0       	ldi	r22, 0x01	; 1
    24f2:	0e 94 76 0f 	call	0x1eec	; 0x1eec <LCD_voidMoveCrusor>
				 		LCD_voidDispString("YOU ARE LOCKED OUT");
    24f6:	83 e8       	ldi	r24, 0x83	; 131
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	0e 94 4e 11 	call	0x229c	; 0x229c <LCD_voidDispString>
				 		LCD_voidMoveCrusor(2,1);
    24fe:	82 e0       	ldi	r24, 0x02	; 2
    2500:	61 e0       	ldi	r22, 0x01	; 1
    2502:	0e 94 76 0f 	call	0x1eec	; 0x1eec <LCD_voidMoveCrusor>
    2506:	80 e0       	ldi	r24, 0x00	; 0
    2508:	90 e0       	ldi	r25, 0x00	; 0
			 else
			 {

			 }
	}
}
    250a:	2e 96       	adiw	r28, 0x0e	; 14
    250c:	0f b6       	in	r0, 0x3f	; 63
    250e:	f8 94       	cli
    2510:	de bf       	out	0x3e, r29	; 62
    2512:	0f be       	out	0x3f, r0	; 63
    2514:	cd bf       	out	0x3d, r28	; 61
    2516:	cf 91       	pop	r28
    2518:	df 91       	pop	r29
    251a:	08 95       	ret
				 		LCD_voidDispString("YOU ARE LOCKED OUT");
				 		LCD_voidMoveCrusor(2,1);
				 		break;
			 }
	}
			 else if (Num == '2')
    251c:	80 91 00 01 	lds	r24, 0x0100
    2520:	82 33       	cpi	r24, 0x32	; 50
    2522:	09 f0       	breq	.+2      	; 0x2526 <main+0x1a2>
    2524:	3e cf       	rjmp	.-388    	; 0x23a2 <main+0x1e>
			 {
				 do{
								 check_pass();
    2526:	0e 94 db 13 	call	0x27b6	; 0x27b6 <check_pass>
									 if (try == 0){
    252a:	80 91 fc 00 	lds	r24, 0x00FC
    252e:	88 23       	and	r24, r24
    2530:	09 f4       	brne	.+2      	; 0x2534 <main+0x1b0>
    2532:	37 cf       	rjmp	.-402    	; 0x23a2 <main+0x1e>
										 break ;
									 }

									 }while(true ==0 );
    2534:	80 91 fe 00 	lds	r24, 0x00FE
    2538:	88 23       	and	r24, r24
    253a:	a9 f3       	breq	.-22     	; 0x2526 <main+0x1a2>
    253c:	32 cf       	rjmp	.-412    	; 0x23a2 <main+0x1e>

0000253e <set_pass>:

			 }
	}
}
	void set_pass()
	{
    253e:	df 93       	push	r29
    2540:	cf 93       	push	r28
    2542:	cd b7       	in	r28, 0x3d	; 61
    2544:	de b7       	in	r29, 0x3e	; 62
    2546:	6c 97       	sbiw	r28, 0x1c	; 28
    2548:	0f b6       	in	r0, 0x3f	; 63
    254a:	f8 94       	cli
    254c:	de bf       	out	0x3e, r29	; 62
    254e:	0f be       	out	0x3f, r0	; 63
    2550:	cd bf       	out	0x3d, r28	; 61



		LCD_voidClearScreen();
    2552:	0e 94 1c 10 	call	0x2038	; 0x2038 <LCD_voidClearScreen>
		LCD_voidMoveCrusor(1,1);
    2556:	81 e0       	ldi	r24, 0x01	; 1
    2558:	61 e0       	ldi	r22, 0x01	; 1
    255a:	0e 94 76 0f 	call	0x1eec	; 0x1eec <LCD_voidMoveCrusor>
		LCD_voidDispString("Enter Password");
    255e:	86 e9       	ldi	r24, 0x96	; 150
    2560:	90 e0       	ldi	r25, 0x00	; 0
    2562:	0e 94 4e 11 	call	0x229c	; 0x229c <LCD_voidDispString>
		LCD_voidMoveCrusor(2,1);
    2566:	82 e0       	ldi	r24, 0x02	; 2
    2568:	61 e0       	ldi	r22, 0x01	; 1
    256a:	0e 94 76 0f 	call	0x1eec	; 0x1eec <LCD_voidMoveCrusor>



		for(counter=0 ; counter<4 ; counter ++){
    256e:	10 92 05 01 	sts	0x0105, r1
    2572:	94 c0       	rjmp	.+296    	; 0x269c <set_pass+0x15e>
		do{

			Num =  Keypad_voidCheckVal(GPIOD);
    2574:	83 e0       	ldi	r24, 0x03	; 3
    2576:	0e 94 b5 0a 	call	0x156a	; 0x156a <Keypad_voidCheckVal>
    257a:	80 93 00 01 	sts	0x0100, r24
		}while (Num==NOTPRESSED);
    257e:	80 91 00 01 	lds	r24, 0x0100
    2582:	8f 3f       	cpi	r24, 0xFF	; 255
    2584:	b9 f3       	breq	.-18     	; 0x2574 <set_pass+0x36>
    2586:	80 e0       	ldi	r24, 0x00	; 0
    2588:	90 e0       	ldi	r25, 0x00	; 0
    258a:	a0 ef       	ldi	r26, 0xF0	; 240
    258c:	b1 e4       	ldi	r27, 0x41	; 65
    258e:	89 8f       	std	Y+25, r24	; 0x19
    2590:	9a 8f       	std	Y+26, r25	; 0x1a
    2592:	ab 8f       	std	Y+27, r26	; 0x1b
    2594:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2596:	69 8d       	ldd	r22, Y+25	; 0x19
    2598:	7a 8d       	ldd	r23, Y+26	; 0x1a
    259a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    259c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    259e:	20 e0       	ldi	r18, 0x00	; 0
    25a0:	30 e0       	ldi	r19, 0x00	; 0
    25a2:	4a ef       	ldi	r20, 0xFA	; 250
    25a4:	54 e4       	ldi	r21, 0x44	; 68
    25a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25aa:	dc 01       	movw	r26, r24
    25ac:	cb 01       	movw	r24, r22
    25ae:	8d 8b       	std	Y+21, r24	; 0x15
    25b0:	9e 8b       	std	Y+22, r25	; 0x16
    25b2:	af 8b       	std	Y+23, r26	; 0x17
    25b4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    25b6:	6d 89       	ldd	r22, Y+21	; 0x15
    25b8:	7e 89       	ldd	r23, Y+22	; 0x16
    25ba:	8f 89       	ldd	r24, Y+23	; 0x17
    25bc:	98 8d       	ldd	r25, Y+24	; 0x18
    25be:	20 e0       	ldi	r18, 0x00	; 0
    25c0:	30 e0       	ldi	r19, 0x00	; 0
    25c2:	40 e8       	ldi	r20, 0x80	; 128
    25c4:	5f e3       	ldi	r21, 0x3F	; 63
    25c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25ca:	88 23       	and	r24, r24
    25cc:	2c f4       	brge	.+10     	; 0x25d8 <set_pass+0x9a>
		__ticks = 1;
    25ce:	81 e0       	ldi	r24, 0x01	; 1
    25d0:	90 e0       	ldi	r25, 0x00	; 0
    25d2:	9c 8b       	std	Y+20, r25	; 0x14
    25d4:	8b 8b       	std	Y+19, r24	; 0x13
    25d6:	3f c0       	rjmp	.+126    	; 0x2656 <set_pass+0x118>
	else if (__tmp > 65535)
    25d8:	6d 89       	ldd	r22, Y+21	; 0x15
    25da:	7e 89       	ldd	r23, Y+22	; 0x16
    25dc:	8f 89       	ldd	r24, Y+23	; 0x17
    25de:	98 8d       	ldd	r25, Y+24	; 0x18
    25e0:	20 e0       	ldi	r18, 0x00	; 0
    25e2:	3f ef       	ldi	r19, 0xFF	; 255
    25e4:	4f e7       	ldi	r20, 0x7F	; 127
    25e6:	57 e4       	ldi	r21, 0x47	; 71
    25e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25ec:	18 16       	cp	r1, r24
    25ee:	4c f5       	brge	.+82     	; 0x2642 <set_pass+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25f0:	69 8d       	ldd	r22, Y+25	; 0x19
    25f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25f8:	20 e0       	ldi	r18, 0x00	; 0
    25fa:	30 e0       	ldi	r19, 0x00	; 0
    25fc:	40 e2       	ldi	r20, 0x20	; 32
    25fe:	51 e4       	ldi	r21, 0x41	; 65
    2600:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2604:	dc 01       	movw	r26, r24
    2606:	cb 01       	movw	r24, r22
    2608:	bc 01       	movw	r22, r24
    260a:	cd 01       	movw	r24, r26
    260c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2610:	dc 01       	movw	r26, r24
    2612:	cb 01       	movw	r24, r22
    2614:	9c 8b       	std	Y+20, r25	; 0x14
    2616:	8b 8b       	std	Y+19, r24	; 0x13
    2618:	0f c0       	rjmp	.+30     	; 0x2638 <set_pass+0xfa>
    261a:	88 ec       	ldi	r24, 0xC8	; 200
    261c:	90 e0       	ldi	r25, 0x00	; 0
    261e:	9a 8b       	std	Y+18, r25	; 0x12
    2620:	89 8b       	std	Y+17, r24	; 0x11
    2622:	89 89       	ldd	r24, Y+17	; 0x11
    2624:	9a 89       	ldd	r25, Y+18	; 0x12
    2626:	01 97       	sbiw	r24, 0x01	; 1
    2628:	f1 f7       	brne	.-4      	; 0x2626 <set_pass+0xe8>
    262a:	9a 8b       	std	Y+18, r25	; 0x12
    262c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    262e:	8b 89       	ldd	r24, Y+19	; 0x13
    2630:	9c 89       	ldd	r25, Y+20	; 0x14
    2632:	01 97       	sbiw	r24, 0x01	; 1
    2634:	9c 8b       	std	Y+20, r25	; 0x14
    2636:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2638:	8b 89       	ldd	r24, Y+19	; 0x13
    263a:	9c 89       	ldd	r25, Y+20	; 0x14
    263c:	00 97       	sbiw	r24, 0x00	; 0
    263e:	69 f7       	brne	.-38     	; 0x261a <set_pass+0xdc>
    2640:	14 c0       	rjmp	.+40     	; 0x266a <set_pass+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2642:	6d 89       	ldd	r22, Y+21	; 0x15
    2644:	7e 89       	ldd	r23, Y+22	; 0x16
    2646:	8f 89       	ldd	r24, Y+23	; 0x17
    2648:	98 8d       	ldd	r25, Y+24	; 0x18
    264a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    264e:	dc 01       	movw	r26, r24
    2650:	cb 01       	movw	r24, r22
    2652:	9c 8b       	std	Y+20, r25	; 0x14
    2654:	8b 8b       	std	Y+19, r24	; 0x13
    2656:	8b 89       	ldd	r24, Y+19	; 0x13
    2658:	9c 89       	ldd	r25, Y+20	; 0x14
    265a:	98 8b       	std	Y+16, r25	; 0x10
    265c:	8f 87       	std	Y+15, r24	; 0x0f
    265e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2660:	98 89       	ldd	r25, Y+16	; 0x10
    2662:	01 97       	sbiw	r24, 0x01	; 1
    2664:	f1 f7       	brne	.-4      	; 0x2662 <set_pass+0x124>
    2666:	98 8b       	std	Y+16, r25	; 0x10
    2668:	8f 87       	std	Y+15, r24	; 0x0f
		 _delay_ms(30);
		 LCD_voidDispChar(Num);
    266a:	80 91 00 01 	lds	r24, 0x0100
    266e:	0e 94 a4 10 	call	0x2148	; 0x2148 <LCD_voidDispChar>
		 Num ^= E_Key;
    2672:	90 91 00 01 	lds	r25, 0x0100
    2676:	8d ee       	ldi	r24, 0xED	; 237
    2678:	89 27       	eor	r24, r25
    267a:	80 93 00 01 	sts	0x0100, r24
		 	 Password[counter] = Num ;
    267e:	80 91 05 01 	lds	r24, 0x0105
    2682:	88 2f       	mov	r24, r24
    2684:	90 e0       	ldi	r25, 0x00	; 0
    2686:	20 91 00 01 	lds	r18, 0x0100
    268a:	fc 01       	movw	r30, r24
    268c:	ea 5f       	subi	r30, 0xFA	; 250
    268e:	fe 4f       	sbci	r31, 0xFE	; 254
    2690:	20 83       	st	Z, r18
		LCD_voidDispString("Enter Password");
		LCD_voidMoveCrusor(2,1);



		for(counter=0 ; counter<4 ; counter ++){
    2692:	80 91 05 01 	lds	r24, 0x0105
    2696:	8f 5f       	subi	r24, 0xFF	; 255
    2698:	80 93 05 01 	sts	0x0105, r24
    269c:	80 91 05 01 	lds	r24, 0x0105
    26a0:	84 30       	cpi	r24, 0x04	; 4
    26a2:	08 f4       	brcc	.+2      	; 0x26a6 <set_pass+0x168>
    26a4:	67 cf       	rjmp	.-306    	; 0x2574 <set_pass+0x36>



			}

		LCD_voidClearScreen();
    26a6:	0e 94 1c 10 	call	0x2038	; 0x2038 <LCD_voidClearScreen>
		LCD_voidMoveCrusor(1,1);
    26aa:	81 e0       	ldi	r24, 0x01	; 1
    26ac:	61 e0       	ldi	r22, 0x01	; 1
    26ae:	0e 94 76 0f 	call	0x1eec	; 0x1eec <LCD_voidMoveCrusor>
		LCD_voidDispString("Pass is set");
    26b2:	85 ea       	ldi	r24, 0xA5	; 165
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	0e 94 4e 11 	call	0x229c	; 0x229c <LCD_voidDispString>
		flag = 1 ;
    26ba:	81 e0       	ldi	r24, 0x01	; 1
    26bc:	80 93 ff 00 	sts	0x00FF, r24
    26c0:	80 e0       	ldi	r24, 0x00	; 0
    26c2:	90 e0       	ldi	r25, 0x00	; 0
    26c4:	a6 e9       	ldi	r26, 0x96	; 150
    26c6:	b3 e4       	ldi	r27, 0x43	; 67
    26c8:	8b 87       	std	Y+11, r24	; 0x0b
    26ca:	9c 87       	std	Y+12, r25	; 0x0c
    26cc:	ad 87       	std	Y+13, r26	; 0x0d
    26ce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    26d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    26d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    26d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    26d8:	20 e0       	ldi	r18, 0x00	; 0
    26da:	30 e0       	ldi	r19, 0x00	; 0
    26dc:	4a ef       	ldi	r20, 0xFA	; 250
    26de:	54 e4       	ldi	r21, 0x44	; 68
    26e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26e4:	dc 01       	movw	r26, r24
    26e6:	cb 01       	movw	r24, r22
    26e8:	8f 83       	std	Y+7, r24	; 0x07
    26ea:	98 87       	std	Y+8, r25	; 0x08
    26ec:	a9 87       	std	Y+9, r26	; 0x09
    26ee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26f0:	6f 81       	ldd	r22, Y+7	; 0x07
    26f2:	78 85       	ldd	r23, Y+8	; 0x08
    26f4:	89 85       	ldd	r24, Y+9	; 0x09
    26f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    26f8:	20 e0       	ldi	r18, 0x00	; 0
    26fa:	30 e0       	ldi	r19, 0x00	; 0
    26fc:	40 e8       	ldi	r20, 0x80	; 128
    26fe:	5f e3       	ldi	r21, 0x3F	; 63
    2700:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2704:	88 23       	and	r24, r24
    2706:	2c f4       	brge	.+10     	; 0x2712 <set_pass+0x1d4>
		__ticks = 1;
    2708:	81 e0       	ldi	r24, 0x01	; 1
    270a:	90 e0       	ldi	r25, 0x00	; 0
    270c:	9e 83       	std	Y+6, r25	; 0x06
    270e:	8d 83       	std	Y+5, r24	; 0x05
    2710:	3f c0       	rjmp	.+126    	; 0x2790 <set_pass+0x252>
	else if (__tmp > 65535)
    2712:	6f 81       	ldd	r22, Y+7	; 0x07
    2714:	78 85       	ldd	r23, Y+8	; 0x08
    2716:	89 85       	ldd	r24, Y+9	; 0x09
    2718:	9a 85       	ldd	r25, Y+10	; 0x0a
    271a:	20 e0       	ldi	r18, 0x00	; 0
    271c:	3f ef       	ldi	r19, 0xFF	; 255
    271e:	4f e7       	ldi	r20, 0x7F	; 127
    2720:	57 e4       	ldi	r21, 0x47	; 71
    2722:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2726:	18 16       	cp	r1, r24
    2728:	4c f5       	brge	.+82     	; 0x277c <set_pass+0x23e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    272a:	6b 85       	ldd	r22, Y+11	; 0x0b
    272c:	7c 85       	ldd	r23, Y+12	; 0x0c
    272e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2730:	9e 85       	ldd	r25, Y+14	; 0x0e
    2732:	20 e0       	ldi	r18, 0x00	; 0
    2734:	30 e0       	ldi	r19, 0x00	; 0
    2736:	40 e2       	ldi	r20, 0x20	; 32
    2738:	51 e4       	ldi	r21, 0x41	; 65
    273a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    273e:	dc 01       	movw	r26, r24
    2740:	cb 01       	movw	r24, r22
    2742:	bc 01       	movw	r22, r24
    2744:	cd 01       	movw	r24, r26
    2746:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    274a:	dc 01       	movw	r26, r24
    274c:	cb 01       	movw	r24, r22
    274e:	9e 83       	std	Y+6, r25	; 0x06
    2750:	8d 83       	std	Y+5, r24	; 0x05
    2752:	0f c0       	rjmp	.+30     	; 0x2772 <set_pass+0x234>
    2754:	88 ec       	ldi	r24, 0xC8	; 200
    2756:	90 e0       	ldi	r25, 0x00	; 0
    2758:	9c 83       	std	Y+4, r25	; 0x04
    275a:	8b 83       	std	Y+3, r24	; 0x03
    275c:	8b 81       	ldd	r24, Y+3	; 0x03
    275e:	9c 81       	ldd	r25, Y+4	; 0x04
    2760:	01 97       	sbiw	r24, 0x01	; 1
    2762:	f1 f7       	brne	.-4      	; 0x2760 <set_pass+0x222>
    2764:	9c 83       	std	Y+4, r25	; 0x04
    2766:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2768:	8d 81       	ldd	r24, Y+5	; 0x05
    276a:	9e 81       	ldd	r25, Y+6	; 0x06
    276c:	01 97       	sbiw	r24, 0x01	; 1
    276e:	9e 83       	std	Y+6, r25	; 0x06
    2770:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2772:	8d 81       	ldd	r24, Y+5	; 0x05
    2774:	9e 81       	ldd	r25, Y+6	; 0x06
    2776:	00 97       	sbiw	r24, 0x00	; 0
    2778:	69 f7       	brne	.-38     	; 0x2754 <set_pass+0x216>
    277a:	14 c0       	rjmp	.+40     	; 0x27a4 <set_pass+0x266>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    277c:	6f 81       	ldd	r22, Y+7	; 0x07
    277e:	78 85       	ldd	r23, Y+8	; 0x08
    2780:	89 85       	ldd	r24, Y+9	; 0x09
    2782:	9a 85       	ldd	r25, Y+10	; 0x0a
    2784:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2788:	dc 01       	movw	r26, r24
    278a:	cb 01       	movw	r24, r22
    278c:	9e 83       	std	Y+6, r25	; 0x06
    278e:	8d 83       	std	Y+5, r24	; 0x05
    2790:	8d 81       	ldd	r24, Y+5	; 0x05
    2792:	9e 81       	ldd	r25, Y+6	; 0x06
    2794:	9a 83       	std	Y+2, r25	; 0x02
    2796:	89 83       	std	Y+1, r24	; 0x01
    2798:	89 81       	ldd	r24, Y+1	; 0x01
    279a:	9a 81       	ldd	r25, Y+2	; 0x02
    279c:	01 97       	sbiw	r24, 0x01	; 1
    279e:	f1 f7       	brne	.-4      	; 0x279c <set_pass+0x25e>
    27a0:	9a 83       	std	Y+2, r25	; 0x02
    27a2:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(300);

		}
    27a4:	6c 96       	adiw	r28, 0x1c	; 28
    27a6:	0f b6       	in	r0, 0x3f	; 63
    27a8:	f8 94       	cli
    27aa:	de bf       	out	0x3e, r29	; 62
    27ac:	0f be       	out	0x3f, r0	; 63
    27ae:	cd bf       	out	0x3d, r28	; 61
    27b0:	cf 91       	pop	r28
    27b2:	df 91       	pop	r29
    27b4:	08 95       	ret

000027b6 <check_pass>:




	void check_pass()
	{
    27b6:	df 93       	push	r29
    27b8:	cf 93       	push	r28
    27ba:	cd b7       	in	r28, 0x3d	; 61
    27bc:	de b7       	in	r29, 0x3e	; 62
    27be:	6c 97       	sbiw	r28, 0x1c	; 28
    27c0:	0f b6       	in	r0, 0x3f	; 63
    27c2:	f8 94       	cli
    27c4:	de bf       	out	0x3e, r29	; 62
    27c6:	0f be       	out	0x3f, r0	; 63
    27c8:	cd bf       	out	0x3d, r28	; 61
		LCD_voidClearScreen();
    27ca:	0e 94 1c 10 	call	0x2038	; 0x2038 <LCD_voidClearScreen>
		LCD_voidMoveCrusor(1,1);
    27ce:	81 e0       	ldi	r24, 0x01	; 1
    27d0:	61 e0       	ldi	r22, 0x01	; 1
    27d2:	0e 94 76 0f 	call	0x1eec	; 0x1eec <LCD_voidMoveCrusor>
		LCD_voidDispString("Enter Pass");
    27d6:	81 eb       	ldi	r24, 0xB1	; 177
    27d8:	90 e0       	ldi	r25, 0x00	; 0
    27da:	0e 94 4e 11 	call	0x229c	; 0x229c <LCD_voidDispString>
		LCD_voidMoveCrusor(2,1);
    27de:	82 e0       	ldi	r24, 0x02	; 2
    27e0:	61 e0       	ldi	r22, 0x01	; 1
    27e2:	0e 94 76 0f 	call	0x1eec	; 0x1eec <LCD_voidMoveCrusor>


		for(counter=0 ; counter<4 ; counter ++){
    27e6:	10 92 05 01 	sts	0x0105, r1
    27ea:	8d c0       	rjmp	.+282    	; 0x2906 <check_pass+0x150>
		do{

			Num =  Keypad_voidCheckVal(GPIOD);
    27ec:	83 e0       	ldi	r24, 0x03	; 3
    27ee:	0e 94 b5 0a 	call	0x156a	; 0x156a <Keypad_voidCheckVal>
    27f2:	80 93 00 01 	sts	0x0100, r24
		}while (Num==NOTPRESSED);
    27f6:	80 91 00 01 	lds	r24, 0x0100
    27fa:	8f 3f       	cpi	r24, 0xFF	; 255
    27fc:	b9 f3       	breq	.-18     	; 0x27ec <check_pass+0x36>
    27fe:	80 e0       	ldi	r24, 0x00	; 0
    2800:	90 e0       	ldi	r25, 0x00	; 0
    2802:	a0 ef       	ldi	r26, 0xF0	; 240
    2804:	b1 e4       	ldi	r27, 0x41	; 65
    2806:	89 8f       	std	Y+25, r24	; 0x19
    2808:	9a 8f       	std	Y+26, r25	; 0x1a
    280a:	ab 8f       	std	Y+27, r26	; 0x1b
    280c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    280e:	69 8d       	ldd	r22, Y+25	; 0x19
    2810:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2812:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2814:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2816:	20 e0       	ldi	r18, 0x00	; 0
    2818:	30 e0       	ldi	r19, 0x00	; 0
    281a:	4a ef       	ldi	r20, 0xFA	; 250
    281c:	54 e4       	ldi	r21, 0x44	; 68
    281e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2822:	dc 01       	movw	r26, r24
    2824:	cb 01       	movw	r24, r22
    2826:	8d 8b       	std	Y+21, r24	; 0x15
    2828:	9e 8b       	std	Y+22, r25	; 0x16
    282a:	af 8b       	std	Y+23, r26	; 0x17
    282c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    282e:	6d 89       	ldd	r22, Y+21	; 0x15
    2830:	7e 89       	ldd	r23, Y+22	; 0x16
    2832:	8f 89       	ldd	r24, Y+23	; 0x17
    2834:	98 8d       	ldd	r25, Y+24	; 0x18
    2836:	20 e0       	ldi	r18, 0x00	; 0
    2838:	30 e0       	ldi	r19, 0x00	; 0
    283a:	40 e8       	ldi	r20, 0x80	; 128
    283c:	5f e3       	ldi	r21, 0x3F	; 63
    283e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2842:	88 23       	and	r24, r24
    2844:	2c f4       	brge	.+10     	; 0x2850 <check_pass+0x9a>
		__ticks = 1;
    2846:	81 e0       	ldi	r24, 0x01	; 1
    2848:	90 e0       	ldi	r25, 0x00	; 0
    284a:	9c 8b       	std	Y+20, r25	; 0x14
    284c:	8b 8b       	std	Y+19, r24	; 0x13
    284e:	3f c0       	rjmp	.+126    	; 0x28ce <check_pass+0x118>
	else if (__tmp > 65535)
    2850:	6d 89       	ldd	r22, Y+21	; 0x15
    2852:	7e 89       	ldd	r23, Y+22	; 0x16
    2854:	8f 89       	ldd	r24, Y+23	; 0x17
    2856:	98 8d       	ldd	r25, Y+24	; 0x18
    2858:	20 e0       	ldi	r18, 0x00	; 0
    285a:	3f ef       	ldi	r19, 0xFF	; 255
    285c:	4f e7       	ldi	r20, 0x7F	; 127
    285e:	57 e4       	ldi	r21, 0x47	; 71
    2860:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2864:	18 16       	cp	r1, r24
    2866:	4c f5       	brge	.+82     	; 0x28ba <check_pass+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2868:	69 8d       	ldd	r22, Y+25	; 0x19
    286a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    286c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    286e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2870:	20 e0       	ldi	r18, 0x00	; 0
    2872:	30 e0       	ldi	r19, 0x00	; 0
    2874:	40 e2       	ldi	r20, 0x20	; 32
    2876:	51 e4       	ldi	r21, 0x41	; 65
    2878:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    287c:	dc 01       	movw	r26, r24
    287e:	cb 01       	movw	r24, r22
    2880:	bc 01       	movw	r22, r24
    2882:	cd 01       	movw	r24, r26
    2884:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2888:	dc 01       	movw	r26, r24
    288a:	cb 01       	movw	r24, r22
    288c:	9c 8b       	std	Y+20, r25	; 0x14
    288e:	8b 8b       	std	Y+19, r24	; 0x13
    2890:	0f c0       	rjmp	.+30     	; 0x28b0 <check_pass+0xfa>
    2892:	88 ec       	ldi	r24, 0xC8	; 200
    2894:	90 e0       	ldi	r25, 0x00	; 0
    2896:	9a 8b       	std	Y+18, r25	; 0x12
    2898:	89 8b       	std	Y+17, r24	; 0x11
    289a:	89 89       	ldd	r24, Y+17	; 0x11
    289c:	9a 89       	ldd	r25, Y+18	; 0x12
    289e:	01 97       	sbiw	r24, 0x01	; 1
    28a0:	f1 f7       	brne	.-4      	; 0x289e <check_pass+0xe8>
    28a2:	9a 8b       	std	Y+18, r25	; 0x12
    28a4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28a6:	8b 89       	ldd	r24, Y+19	; 0x13
    28a8:	9c 89       	ldd	r25, Y+20	; 0x14
    28aa:	01 97       	sbiw	r24, 0x01	; 1
    28ac:	9c 8b       	std	Y+20, r25	; 0x14
    28ae:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28b0:	8b 89       	ldd	r24, Y+19	; 0x13
    28b2:	9c 89       	ldd	r25, Y+20	; 0x14
    28b4:	00 97       	sbiw	r24, 0x00	; 0
    28b6:	69 f7       	brne	.-38     	; 0x2892 <check_pass+0xdc>
    28b8:	14 c0       	rjmp	.+40     	; 0x28e2 <check_pass+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28ba:	6d 89       	ldd	r22, Y+21	; 0x15
    28bc:	7e 89       	ldd	r23, Y+22	; 0x16
    28be:	8f 89       	ldd	r24, Y+23	; 0x17
    28c0:	98 8d       	ldd	r25, Y+24	; 0x18
    28c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28c6:	dc 01       	movw	r26, r24
    28c8:	cb 01       	movw	r24, r22
    28ca:	9c 8b       	std	Y+20, r25	; 0x14
    28cc:	8b 8b       	std	Y+19, r24	; 0x13
    28ce:	8b 89       	ldd	r24, Y+19	; 0x13
    28d0:	9c 89       	ldd	r25, Y+20	; 0x14
    28d2:	98 8b       	std	Y+16, r25	; 0x10
    28d4:	8f 87       	std	Y+15, r24	; 0x0f
    28d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    28d8:	98 89       	ldd	r25, Y+16	; 0x10
    28da:	01 97       	sbiw	r24, 0x01	; 1
    28dc:	f1 f7       	brne	.-4      	; 0x28da <check_pass+0x124>
    28de:	98 8b       	std	Y+16, r25	; 0x10
    28e0:	8f 87       	std	Y+15, r24	; 0x0f
		 _delay_ms(30);

		 	 Pass[counter] = Num ;
    28e2:	80 91 05 01 	lds	r24, 0x0105
    28e6:	88 2f       	mov	r24, r24
    28e8:	90 e0       	ldi	r25, 0x00	; 0
    28ea:	20 91 00 01 	lds	r18, 0x0100
    28ee:	fc 01       	movw	r30, r24
    28f0:	ef 5f       	subi	r30, 0xFF	; 255
    28f2:	fe 4f       	sbci	r31, 0xFE	; 254
    28f4:	20 83       	st	Z, r18

			LCD_voidDispChar('*');
    28f6:	8a e2       	ldi	r24, 0x2A	; 42
    28f8:	0e 94 a4 10 	call	0x2148	; 0x2148 <LCD_voidDispChar>
		LCD_voidMoveCrusor(1,1);
		LCD_voidDispString("Enter Pass");
		LCD_voidMoveCrusor(2,1);


		for(counter=0 ; counter<4 ; counter ++){
    28fc:	80 91 05 01 	lds	r24, 0x0105
    2900:	8f 5f       	subi	r24, 0xFF	; 255
    2902:	80 93 05 01 	sts	0x0105, r24
    2906:	80 91 05 01 	lds	r24, 0x0105
    290a:	84 30       	cpi	r24, 0x04	; 4
    290c:	08 f4       	brcc	.+2      	; 0x2910 <check_pass+0x15a>
    290e:	6e cf       	rjmp	.-292    	; 0x27ec <check_pass+0x36>

		 	 Pass[counter] = Num ;

			LCD_voidDispChar('*');
		}
		for(counter = 0 ; counter <4 ; counter ++)
    2910:	10 92 05 01 	sts	0x0105, r1
    2914:	17 c0       	rjmp	.+46     	; 0x2944 <check_pass+0x18e>
		{
			Password[counter] ^= E_Key ;
    2916:	80 91 05 01 	lds	r24, 0x0105
    291a:	28 2f       	mov	r18, r24
    291c:	30 e0       	ldi	r19, 0x00	; 0
    291e:	80 91 05 01 	lds	r24, 0x0105
    2922:	88 2f       	mov	r24, r24
    2924:	90 e0       	ldi	r25, 0x00	; 0
    2926:	fc 01       	movw	r30, r24
    2928:	ea 5f       	subi	r30, 0xFA	; 250
    292a:	fe 4f       	sbci	r31, 0xFE	; 254
    292c:	90 81       	ld	r25, Z
    292e:	8d ee       	ldi	r24, 0xED	; 237
    2930:	89 27       	eor	r24, r25
    2932:	f9 01       	movw	r30, r18
    2934:	ea 5f       	subi	r30, 0xFA	; 250
    2936:	fe 4f       	sbci	r31, 0xFE	; 254
    2938:	80 83       	st	Z, r24

		 	 Pass[counter] = Num ;

			LCD_voidDispChar('*');
		}
		for(counter = 0 ; counter <4 ; counter ++)
    293a:	80 91 05 01 	lds	r24, 0x0105
    293e:	8f 5f       	subi	r24, 0xFF	; 255
    2940:	80 93 05 01 	sts	0x0105, r24
    2944:	80 91 05 01 	lds	r24, 0x0105
    2948:	84 30       	cpi	r24, 0x04	; 4
    294a:	28 f3       	brcs	.-54     	; 0x2916 <check_pass+0x160>
		{
			Password[counter] ^= E_Key ;
		}

		if(Pass[0]==Password[0] &&  Pass[1]==Password[1] && Pass[2]==Password[2] && Pass[3]==Password[3] )
    294c:	90 91 01 01 	lds	r25, 0x0101
    2950:	80 91 06 01 	lds	r24, 0x0106
    2954:	98 17       	cp	r25, r24
    2956:	e1 f4       	brne	.+56     	; 0x2990 <check_pass+0x1da>
    2958:	90 91 02 01 	lds	r25, 0x0102
    295c:	80 91 07 01 	lds	r24, 0x0107
    2960:	98 17       	cp	r25, r24
    2962:	b1 f4       	brne	.+44     	; 0x2990 <check_pass+0x1da>
    2964:	90 91 03 01 	lds	r25, 0x0103
    2968:	80 91 08 01 	lds	r24, 0x0108
    296c:	98 17       	cp	r25, r24
    296e:	81 f4       	brne	.+32     	; 0x2990 <check_pass+0x1da>
    2970:	90 91 04 01 	lds	r25, 0x0104
    2974:	80 91 09 01 	lds	r24, 0x0109
    2978:	98 17       	cp	r25, r24
    297a:	51 f4       	brne	.+20     	; 0x2990 <check_pass+0x1da>
		{
			LCD_voidClearScreen();
    297c:	0e 94 1c 10 	call	0x2038	; 0x2038 <LCD_voidClearScreen>
			LCD_voidDispString("Correct Pass :)");
    2980:	8c eb       	ldi	r24, 0xBC	; 188
    2982:	90 e0       	ldi	r25, 0x00	; 0
    2984:	0e 94 4e 11 	call	0x229c	; 0x229c <LCD_voidDispString>
			true = 1 ;
    2988:	81 e0       	ldi	r24, 0x01	; 1
    298a:	80 93 fe 00 	sts	0x00FE, r24
    298e:	17 c0       	rjmp	.+46     	; 0x29be <check_pass+0x208>
		}
		else
		{
			LCD_voidClearScreen();
    2990:	0e 94 1c 10 	call	0x2038	; 0x2038 <LCD_voidClearScreen>
			LCD_voidDispString("Wrong pass :(");
    2994:	8c ec       	ldi	r24, 0xCC	; 204
    2996:	90 e0       	ldi	r25, 0x00	; 0
    2998:	0e 94 4e 11 	call	0x229c	; 0x229c <LCD_voidDispString>
			LCD_voidMoveCrusor(2,1);
    299c:	82 e0       	ldi	r24, 0x02	; 2
    299e:	61 e0       	ldi	r22, 0x01	; 1
    29a0:	0e 94 76 0f 	call	0x1eec	; 0x1eec <LCD_voidMoveCrusor>
			LCD_voidDispString("You have ");
    29a4:	8a ed       	ldi	r24, 0xDA	; 218
    29a6:	90 e0       	ldi	r25, 0x00	; 0
    29a8:	0e 94 4e 11 	call	0x229c	; 0x229c <LCD_voidDispString>
			try -- ;
    29ac:	80 91 fc 00 	lds	r24, 0x00FC
    29b0:	81 50       	subi	r24, 0x01	; 1
    29b2:	80 93 fc 00 	sts	0x00FC, r24
			LCD_voidDispNumber(try);
    29b6:	80 91 fc 00 	lds	r24, 0x00FC
    29ba:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <LCD_voidDispNumber>
    29be:	80 e0       	ldi	r24, 0x00	; 0
    29c0:	90 e0       	ldi	r25, 0x00	; 0
    29c2:	a8 e4       	ldi	r26, 0x48	; 72
    29c4:	b2 e4       	ldi	r27, 0x42	; 66
    29c6:	8b 87       	std	Y+11, r24	; 0x0b
    29c8:	9c 87       	std	Y+12, r25	; 0x0c
    29ca:	ad 87       	std	Y+13, r26	; 0x0d
    29cc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    29d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    29d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    29d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    29d6:	20 e0       	ldi	r18, 0x00	; 0
    29d8:	30 e0       	ldi	r19, 0x00	; 0
    29da:	4a ef       	ldi	r20, 0xFA	; 250
    29dc:	54 e4       	ldi	r21, 0x44	; 68
    29de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29e2:	dc 01       	movw	r26, r24
    29e4:	cb 01       	movw	r24, r22
    29e6:	8f 83       	std	Y+7, r24	; 0x07
    29e8:	98 87       	std	Y+8, r25	; 0x08
    29ea:	a9 87       	std	Y+9, r26	; 0x09
    29ec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29ee:	6f 81       	ldd	r22, Y+7	; 0x07
    29f0:	78 85       	ldd	r23, Y+8	; 0x08
    29f2:	89 85       	ldd	r24, Y+9	; 0x09
    29f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    29f6:	20 e0       	ldi	r18, 0x00	; 0
    29f8:	30 e0       	ldi	r19, 0x00	; 0
    29fa:	40 e8       	ldi	r20, 0x80	; 128
    29fc:	5f e3       	ldi	r21, 0x3F	; 63
    29fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a02:	88 23       	and	r24, r24
    2a04:	2c f4       	brge	.+10     	; 0x2a10 <check_pass+0x25a>
		__ticks = 1;
    2a06:	81 e0       	ldi	r24, 0x01	; 1
    2a08:	90 e0       	ldi	r25, 0x00	; 0
    2a0a:	9e 83       	std	Y+6, r25	; 0x06
    2a0c:	8d 83       	std	Y+5, r24	; 0x05
    2a0e:	3f c0       	rjmp	.+126    	; 0x2a8e <check_pass+0x2d8>
	else if (__tmp > 65535)
    2a10:	6f 81       	ldd	r22, Y+7	; 0x07
    2a12:	78 85       	ldd	r23, Y+8	; 0x08
    2a14:	89 85       	ldd	r24, Y+9	; 0x09
    2a16:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a18:	20 e0       	ldi	r18, 0x00	; 0
    2a1a:	3f ef       	ldi	r19, 0xFF	; 255
    2a1c:	4f e7       	ldi	r20, 0x7F	; 127
    2a1e:	57 e4       	ldi	r21, 0x47	; 71
    2a20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a24:	18 16       	cp	r1, r24
    2a26:	4c f5       	brge	.+82     	; 0x2a7a <check_pass+0x2c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a28:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a30:	20 e0       	ldi	r18, 0x00	; 0
    2a32:	30 e0       	ldi	r19, 0x00	; 0
    2a34:	40 e2       	ldi	r20, 0x20	; 32
    2a36:	51 e4       	ldi	r21, 0x41	; 65
    2a38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a3c:	dc 01       	movw	r26, r24
    2a3e:	cb 01       	movw	r24, r22
    2a40:	bc 01       	movw	r22, r24
    2a42:	cd 01       	movw	r24, r26
    2a44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a48:	dc 01       	movw	r26, r24
    2a4a:	cb 01       	movw	r24, r22
    2a4c:	9e 83       	std	Y+6, r25	; 0x06
    2a4e:	8d 83       	std	Y+5, r24	; 0x05
    2a50:	0f c0       	rjmp	.+30     	; 0x2a70 <check_pass+0x2ba>
    2a52:	88 ec       	ldi	r24, 0xC8	; 200
    2a54:	90 e0       	ldi	r25, 0x00	; 0
    2a56:	9c 83       	std	Y+4, r25	; 0x04
    2a58:	8b 83       	std	Y+3, r24	; 0x03
    2a5a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a5c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a5e:	01 97       	sbiw	r24, 0x01	; 1
    2a60:	f1 f7       	brne	.-4      	; 0x2a5e <check_pass+0x2a8>
    2a62:	9c 83       	std	Y+4, r25	; 0x04
    2a64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a66:	8d 81       	ldd	r24, Y+5	; 0x05
    2a68:	9e 81       	ldd	r25, Y+6	; 0x06
    2a6a:	01 97       	sbiw	r24, 0x01	; 1
    2a6c:	9e 83       	std	Y+6, r25	; 0x06
    2a6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a70:	8d 81       	ldd	r24, Y+5	; 0x05
    2a72:	9e 81       	ldd	r25, Y+6	; 0x06
    2a74:	00 97       	sbiw	r24, 0x00	; 0
    2a76:	69 f7       	brne	.-38     	; 0x2a52 <check_pass+0x29c>
    2a78:	14 c0       	rjmp	.+40     	; 0x2aa2 <check_pass+0x2ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a7a:	6f 81       	ldd	r22, Y+7	; 0x07
    2a7c:	78 85       	ldd	r23, Y+8	; 0x08
    2a7e:	89 85       	ldd	r24, Y+9	; 0x09
    2a80:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a86:	dc 01       	movw	r26, r24
    2a88:	cb 01       	movw	r24, r22
    2a8a:	9e 83       	std	Y+6, r25	; 0x06
    2a8c:	8d 83       	std	Y+5, r24	; 0x05
    2a8e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a90:	9e 81       	ldd	r25, Y+6	; 0x06
    2a92:	9a 83       	std	Y+2, r25	; 0x02
    2a94:	89 83       	std	Y+1, r24	; 0x01
    2a96:	89 81       	ldd	r24, Y+1	; 0x01
    2a98:	9a 81       	ldd	r25, Y+2	; 0x02
    2a9a:	01 97       	sbiw	r24, 0x01	; 1
    2a9c:	f1 f7       	brne	.-4      	; 0x2a9a <check_pass+0x2e4>
    2a9e:	9a 83       	std	Y+2, r25	; 0x02
    2aa0:	89 83       	std	Y+1, r24	; 0x01
		}
		_delay_ms(50);



	}
    2aa2:	6c 96       	adiw	r28, 0x1c	; 28
    2aa4:	0f b6       	in	r0, 0x3f	; 63
    2aa6:	f8 94       	cli
    2aa8:	de bf       	out	0x3e, r29	; 62
    2aaa:	0f be       	out	0x3f, r0	; 63
    2aac:	cd bf       	out	0x3d, r28	; 61
    2aae:	cf 91       	pop	r28
    2ab0:	df 91       	pop	r29
    2ab2:	08 95       	ret

00002ab4 <__prologue_saves__>:
    2ab4:	2f 92       	push	r2
    2ab6:	3f 92       	push	r3
    2ab8:	4f 92       	push	r4
    2aba:	5f 92       	push	r5
    2abc:	6f 92       	push	r6
    2abe:	7f 92       	push	r7
    2ac0:	8f 92       	push	r8
    2ac2:	9f 92       	push	r9
    2ac4:	af 92       	push	r10
    2ac6:	bf 92       	push	r11
    2ac8:	cf 92       	push	r12
    2aca:	df 92       	push	r13
    2acc:	ef 92       	push	r14
    2ace:	ff 92       	push	r15
    2ad0:	0f 93       	push	r16
    2ad2:	1f 93       	push	r17
    2ad4:	cf 93       	push	r28
    2ad6:	df 93       	push	r29
    2ad8:	cd b7       	in	r28, 0x3d	; 61
    2ada:	de b7       	in	r29, 0x3e	; 62
    2adc:	ca 1b       	sub	r28, r26
    2ade:	db 0b       	sbc	r29, r27
    2ae0:	0f b6       	in	r0, 0x3f	; 63
    2ae2:	f8 94       	cli
    2ae4:	de bf       	out	0x3e, r29	; 62
    2ae6:	0f be       	out	0x3f, r0	; 63
    2ae8:	cd bf       	out	0x3d, r28	; 61
    2aea:	09 94       	ijmp

00002aec <__epilogue_restores__>:
    2aec:	2a 88       	ldd	r2, Y+18	; 0x12
    2aee:	39 88       	ldd	r3, Y+17	; 0x11
    2af0:	48 88       	ldd	r4, Y+16	; 0x10
    2af2:	5f 84       	ldd	r5, Y+15	; 0x0f
    2af4:	6e 84       	ldd	r6, Y+14	; 0x0e
    2af6:	7d 84       	ldd	r7, Y+13	; 0x0d
    2af8:	8c 84       	ldd	r8, Y+12	; 0x0c
    2afa:	9b 84       	ldd	r9, Y+11	; 0x0b
    2afc:	aa 84       	ldd	r10, Y+10	; 0x0a
    2afe:	b9 84       	ldd	r11, Y+9	; 0x09
    2b00:	c8 84       	ldd	r12, Y+8	; 0x08
    2b02:	df 80       	ldd	r13, Y+7	; 0x07
    2b04:	ee 80       	ldd	r14, Y+6	; 0x06
    2b06:	fd 80       	ldd	r15, Y+5	; 0x05
    2b08:	0c 81       	ldd	r16, Y+4	; 0x04
    2b0a:	1b 81       	ldd	r17, Y+3	; 0x03
    2b0c:	aa 81       	ldd	r26, Y+2	; 0x02
    2b0e:	b9 81       	ldd	r27, Y+1	; 0x01
    2b10:	ce 0f       	add	r28, r30
    2b12:	d1 1d       	adc	r29, r1
    2b14:	0f b6       	in	r0, 0x3f	; 63
    2b16:	f8 94       	cli
    2b18:	de bf       	out	0x3e, r29	; 62
    2b1a:	0f be       	out	0x3f, r0	; 63
    2b1c:	cd bf       	out	0x3d, r28	; 61
    2b1e:	ed 01       	movw	r28, r26
    2b20:	08 95       	ret

00002b22 <sprintf>:
    2b22:	ae e0       	ldi	r26, 0x0E	; 14
    2b24:	b0 e0       	ldi	r27, 0x00	; 0
    2b26:	e7 e9       	ldi	r30, 0x97	; 151
    2b28:	f5 e1       	ldi	r31, 0x15	; 21
    2b2a:	0c 94 68 15 	jmp	0x2ad0	; 0x2ad0 <__prologue_saves__+0x1c>
    2b2e:	0d 89       	ldd	r16, Y+21	; 0x15
    2b30:	1e 89       	ldd	r17, Y+22	; 0x16
    2b32:	86 e0       	ldi	r24, 0x06	; 6
    2b34:	8c 83       	std	Y+4, r24	; 0x04
    2b36:	1a 83       	std	Y+2, r17	; 0x02
    2b38:	09 83       	std	Y+1, r16	; 0x01
    2b3a:	8f ef       	ldi	r24, 0xFF	; 255
    2b3c:	9f e7       	ldi	r25, 0x7F	; 127
    2b3e:	9e 83       	std	Y+6, r25	; 0x06
    2b40:	8d 83       	std	Y+5, r24	; 0x05
    2b42:	9e 01       	movw	r18, r28
    2b44:	27 5e       	subi	r18, 0xE7	; 231
    2b46:	3f 4f       	sbci	r19, 0xFF	; 255
    2b48:	ce 01       	movw	r24, r28
    2b4a:	01 96       	adiw	r24, 0x01	; 1
    2b4c:	6f 89       	ldd	r22, Y+23	; 0x17
    2b4e:	78 8d       	ldd	r23, Y+24	; 0x18
    2b50:	a9 01       	movw	r20, r18
    2b52:	0e 94 b5 15 	call	0x2b6a	; 0x2b6a <vfprintf>
    2b56:	2f 81       	ldd	r18, Y+7	; 0x07
    2b58:	38 85       	ldd	r19, Y+8	; 0x08
    2b5a:	02 0f       	add	r16, r18
    2b5c:	13 1f       	adc	r17, r19
    2b5e:	f8 01       	movw	r30, r16
    2b60:	10 82       	st	Z, r1
    2b62:	2e 96       	adiw	r28, 0x0e	; 14
    2b64:	e4 e0       	ldi	r30, 0x04	; 4
    2b66:	0c 94 84 15 	jmp	0x2b08	; 0x2b08 <__epilogue_restores__+0x1c>

00002b6a <vfprintf>:
    2b6a:	ab e0       	ldi	r26, 0x0B	; 11
    2b6c:	b0 e0       	ldi	r27, 0x00	; 0
    2b6e:	eb eb       	ldi	r30, 0xBB	; 187
    2b70:	f5 e1       	ldi	r31, 0x15	; 21
    2b72:	0c 94 5a 15 	jmp	0x2ab4	; 0x2ab4 <__prologue_saves__>
    2b76:	3c 01       	movw	r6, r24
    2b78:	2b 01       	movw	r4, r22
    2b7a:	5a 01       	movw	r10, r20
    2b7c:	fc 01       	movw	r30, r24
    2b7e:	17 82       	std	Z+7, r1	; 0x07
    2b80:	16 82       	std	Z+6, r1	; 0x06
    2b82:	83 81       	ldd	r24, Z+3	; 0x03
    2b84:	81 fd       	sbrc	r24, 1
    2b86:	03 c0       	rjmp	.+6      	; 0x2b8e <vfprintf+0x24>
    2b88:	6f ef       	ldi	r22, 0xFF	; 255
    2b8a:	7f ef       	ldi	r23, 0xFF	; 255
    2b8c:	c6 c1       	rjmp	.+908    	; 0x2f1a <vfprintf+0x3b0>
    2b8e:	9a e0       	ldi	r25, 0x0A	; 10
    2b90:	89 2e       	mov	r8, r25
    2b92:	1e 01       	movw	r2, r28
    2b94:	08 94       	sec
    2b96:	21 1c       	adc	r2, r1
    2b98:	31 1c       	adc	r3, r1
    2b9a:	f3 01       	movw	r30, r6
    2b9c:	23 81       	ldd	r18, Z+3	; 0x03
    2b9e:	f2 01       	movw	r30, r4
    2ba0:	23 fd       	sbrc	r18, 3
    2ba2:	85 91       	lpm	r24, Z+
    2ba4:	23 ff       	sbrs	r18, 3
    2ba6:	81 91       	ld	r24, Z+
    2ba8:	2f 01       	movw	r4, r30
    2baa:	88 23       	and	r24, r24
    2bac:	09 f4       	brne	.+2      	; 0x2bb0 <vfprintf+0x46>
    2bae:	b2 c1       	rjmp	.+868    	; 0x2f14 <vfprintf+0x3aa>
    2bb0:	85 32       	cpi	r24, 0x25	; 37
    2bb2:	39 f4       	brne	.+14     	; 0x2bc2 <vfprintf+0x58>
    2bb4:	23 fd       	sbrc	r18, 3
    2bb6:	85 91       	lpm	r24, Z+
    2bb8:	23 ff       	sbrs	r18, 3
    2bba:	81 91       	ld	r24, Z+
    2bbc:	2f 01       	movw	r4, r30
    2bbe:	85 32       	cpi	r24, 0x25	; 37
    2bc0:	29 f4       	brne	.+10     	; 0x2bcc <vfprintf+0x62>
    2bc2:	90 e0       	ldi	r25, 0x00	; 0
    2bc4:	b3 01       	movw	r22, r6
    2bc6:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <fputc>
    2bca:	e7 cf       	rjmp	.-50     	; 0x2b9a <vfprintf+0x30>
    2bcc:	98 2f       	mov	r25, r24
    2bce:	ff 24       	eor	r15, r15
    2bd0:	ee 24       	eor	r14, r14
    2bd2:	99 24       	eor	r9, r9
    2bd4:	ff e1       	ldi	r31, 0x1F	; 31
    2bd6:	ff 15       	cp	r31, r15
    2bd8:	d0 f0       	brcs	.+52     	; 0x2c0e <vfprintf+0xa4>
    2bda:	9b 32       	cpi	r25, 0x2B	; 43
    2bdc:	69 f0       	breq	.+26     	; 0x2bf8 <vfprintf+0x8e>
    2bde:	9c 32       	cpi	r25, 0x2C	; 44
    2be0:	28 f4       	brcc	.+10     	; 0x2bec <vfprintf+0x82>
    2be2:	90 32       	cpi	r25, 0x20	; 32
    2be4:	59 f0       	breq	.+22     	; 0x2bfc <vfprintf+0x92>
    2be6:	93 32       	cpi	r25, 0x23	; 35
    2be8:	91 f4       	brne	.+36     	; 0x2c0e <vfprintf+0xa4>
    2bea:	0e c0       	rjmp	.+28     	; 0x2c08 <vfprintf+0x9e>
    2bec:	9d 32       	cpi	r25, 0x2D	; 45
    2bee:	49 f0       	breq	.+18     	; 0x2c02 <vfprintf+0x98>
    2bf0:	90 33       	cpi	r25, 0x30	; 48
    2bf2:	69 f4       	brne	.+26     	; 0x2c0e <vfprintf+0xa4>
    2bf4:	41 e0       	ldi	r20, 0x01	; 1
    2bf6:	24 c0       	rjmp	.+72     	; 0x2c40 <vfprintf+0xd6>
    2bf8:	52 e0       	ldi	r21, 0x02	; 2
    2bfa:	f5 2a       	or	r15, r21
    2bfc:	84 e0       	ldi	r24, 0x04	; 4
    2bfe:	f8 2a       	or	r15, r24
    2c00:	28 c0       	rjmp	.+80     	; 0x2c52 <vfprintf+0xe8>
    2c02:	98 e0       	ldi	r25, 0x08	; 8
    2c04:	f9 2a       	or	r15, r25
    2c06:	25 c0       	rjmp	.+74     	; 0x2c52 <vfprintf+0xe8>
    2c08:	e0 e1       	ldi	r30, 0x10	; 16
    2c0a:	fe 2a       	or	r15, r30
    2c0c:	22 c0       	rjmp	.+68     	; 0x2c52 <vfprintf+0xe8>
    2c0e:	f7 fc       	sbrc	r15, 7
    2c10:	29 c0       	rjmp	.+82     	; 0x2c64 <vfprintf+0xfa>
    2c12:	89 2f       	mov	r24, r25
    2c14:	80 53       	subi	r24, 0x30	; 48
    2c16:	8a 30       	cpi	r24, 0x0A	; 10
    2c18:	70 f4       	brcc	.+28     	; 0x2c36 <vfprintf+0xcc>
    2c1a:	f6 fe       	sbrs	r15, 6
    2c1c:	05 c0       	rjmp	.+10     	; 0x2c28 <vfprintf+0xbe>
    2c1e:	98 9c       	mul	r9, r8
    2c20:	90 2c       	mov	r9, r0
    2c22:	11 24       	eor	r1, r1
    2c24:	98 0e       	add	r9, r24
    2c26:	15 c0       	rjmp	.+42     	; 0x2c52 <vfprintf+0xe8>
    2c28:	e8 9c       	mul	r14, r8
    2c2a:	e0 2c       	mov	r14, r0
    2c2c:	11 24       	eor	r1, r1
    2c2e:	e8 0e       	add	r14, r24
    2c30:	f0 e2       	ldi	r31, 0x20	; 32
    2c32:	ff 2a       	or	r15, r31
    2c34:	0e c0       	rjmp	.+28     	; 0x2c52 <vfprintf+0xe8>
    2c36:	9e 32       	cpi	r25, 0x2E	; 46
    2c38:	29 f4       	brne	.+10     	; 0x2c44 <vfprintf+0xda>
    2c3a:	f6 fc       	sbrc	r15, 6
    2c3c:	6b c1       	rjmp	.+726    	; 0x2f14 <vfprintf+0x3aa>
    2c3e:	40 e4       	ldi	r20, 0x40	; 64
    2c40:	f4 2a       	or	r15, r20
    2c42:	07 c0       	rjmp	.+14     	; 0x2c52 <vfprintf+0xe8>
    2c44:	9c 36       	cpi	r25, 0x6C	; 108
    2c46:	19 f4       	brne	.+6      	; 0x2c4e <vfprintf+0xe4>
    2c48:	50 e8       	ldi	r21, 0x80	; 128
    2c4a:	f5 2a       	or	r15, r21
    2c4c:	02 c0       	rjmp	.+4      	; 0x2c52 <vfprintf+0xe8>
    2c4e:	98 36       	cpi	r25, 0x68	; 104
    2c50:	49 f4       	brne	.+18     	; 0x2c64 <vfprintf+0xfa>
    2c52:	f2 01       	movw	r30, r4
    2c54:	23 fd       	sbrc	r18, 3
    2c56:	95 91       	lpm	r25, Z+
    2c58:	23 ff       	sbrs	r18, 3
    2c5a:	91 91       	ld	r25, Z+
    2c5c:	2f 01       	movw	r4, r30
    2c5e:	99 23       	and	r25, r25
    2c60:	09 f0       	breq	.+2      	; 0x2c64 <vfprintf+0xfa>
    2c62:	b8 cf       	rjmp	.-144    	; 0x2bd4 <vfprintf+0x6a>
    2c64:	89 2f       	mov	r24, r25
    2c66:	85 54       	subi	r24, 0x45	; 69
    2c68:	83 30       	cpi	r24, 0x03	; 3
    2c6a:	18 f0       	brcs	.+6      	; 0x2c72 <vfprintf+0x108>
    2c6c:	80 52       	subi	r24, 0x20	; 32
    2c6e:	83 30       	cpi	r24, 0x03	; 3
    2c70:	38 f4       	brcc	.+14     	; 0x2c80 <vfprintf+0x116>
    2c72:	44 e0       	ldi	r20, 0x04	; 4
    2c74:	50 e0       	ldi	r21, 0x00	; 0
    2c76:	a4 0e       	add	r10, r20
    2c78:	b5 1e       	adc	r11, r21
    2c7a:	5f e3       	ldi	r21, 0x3F	; 63
    2c7c:	59 83       	std	Y+1, r21	; 0x01
    2c7e:	0f c0       	rjmp	.+30     	; 0x2c9e <vfprintf+0x134>
    2c80:	93 36       	cpi	r25, 0x63	; 99
    2c82:	31 f0       	breq	.+12     	; 0x2c90 <vfprintf+0x126>
    2c84:	93 37       	cpi	r25, 0x73	; 115
    2c86:	79 f0       	breq	.+30     	; 0x2ca6 <vfprintf+0x13c>
    2c88:	93 35       	cpi	r25, 0x53	; 83
    2c8a:	09 f0       	breq	.+2      	; 0x2c8e <vfprintf+0x124>
    2c8c:	56 c0       	rjmp	.+172    	; 0x2d3a <vfprintf+0x1d0>
    2c8e:	20 c0       	rjmp	.+64     	; 0x2cd0 <vfprintf+0x166>
    2c90:	f5 01       	movw	r30, r10
    2c92:	80 81       	ld	r24, Z
    2c94:	89 83       	std	Y+1, r24	; 0x01
    2c96:	42 e0       	ldi	r20, 0x02	; 2
    2c98:	50 e0       	ldi	r21, 0x00	; 0
    2c9a:	a4 0e       	add	r10, r20
    2c9c:	b5 1e       	adc	r11, r21
    2c9e:	61 01       	movw	r12, r2
    2ca0:	01 e0       	ldi	r16, 0x01	; 1
    2ca2:	10 e0       	ldi	r17, 0x00	; 0
    2ca4:	12 c0       	rjmp	.+36     	; 0x2cca <vfprintf+0x160>
    2ca6:	f5 01       	movw	r30, r10
    2ca8:	c0 80       	ld	r12, Z
    2caa:	d1 80       	ldd	r13, Z+1	; 0x01
    2cac:	f6 fc       	sbrc	r15, 6
    2cae:	03 c0       	rjmp	.+6      	; 0x2cb6 <vfprintf+0x14c>
    2cb0:	6f ef       	ldi	r22, 0xFF	; 255
    2cb2:	7f ef       	ldi	r23, 0xFF	; 255
    2cb4:	02 c0       	rjmp	.+4      	; 0x2cba <vfprintf+0x150>
    2cb6:	69 2d       	mov	r22, r9
    2cb8:	70 e0       	ldi	r23, 0x00	; 0
    2cba:	42 e0       	ldi	r20, 0x02	; 2
    2cbc:	50 e0       	ldi	r21, 0x00	; 0
    2cbe:	a4 0e       	add	r10, r20
    2cc0:	b5 1e       	adc	r11, r21
    2cc2:	c6 01       	movw	r24, r12
    2cc4:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <strnlen>
    2cc8:	8c 01       	movw	r16, r24
    2cca:	5f e7       	ldi	r21, 0x7F	; 127
    2ccc:	f5 22       	and	r15, r21
    2cce:	14 c0       	rjmp	.+40     	; 0x2cf8 <vfprintf+0x18e>
    2cd0:	f5 01       	movw	r30, r10
    2cd2:	c0 80       	ld	r12, Z
    2cd4:	d1 80       	ldd	r13, Z+1	; 0x01
    2cd6:	f6 fc       	sbrc	r15, 6
    2cd8:	03 c0       	rjmp	.+6      	; 0x2ce0 <vfprintf+0x176>
    2cda:	6f ef       	ldi	r22, 0xFF	; 255
    2cdc:	7f ef       	ldi	r23, 0xFF	; 255
    2cde:	02 c0       	rjmp	.+4      	; 0x2ce4 <vfprintf+0x17a>
    2ce0:	69 2d       	mov	r22, r9
    2ce2:	70 e0       	ldi	r23, 0x00	; 0
    2ce4:	42 e0       	ldi	r20, 0x02	; 2
    2ce6:	50 e0       	ldi	r21, 0x00	; 0
    2ce8:	a4 0e       	add	r10, r20
    2cea:	b5 1e       	adc	r11, r21
    2cec:	c6 01       	movw	r24, r12
    2cee:	0e 94 92 17 	call	0x2f24	; 0x2f24 <strnlen_P>
    2cf2:	8c 01       	movw	r16, r24
    2cf4:	50 e8       	ldi	r21, 0x80	; 128
    2cf6:	f5 2a       	or	r15, r21
    2cf8:	f3 fe       	sbrs	r15, 3
    2cfa:	07 c0       	rjmp	.+14     	; 0x2d0a <vfprintf+0x1a0>
    2cfc:	1a c0       	rjmp	.+52     	; 0x2d32 <vfprintf+0x1c8>
    2cfe:	80 e2       	ldi	r24, 0x20	; 32
    2d00:	90 e0       	ldi	r25, 0x00	; 0
    2d02:	b3 01       	movw	r22, r6
    2d04:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <fputc>
    2d08:	ea 94       	dec	r14
    2d0a:	8e 2d       	mov	r24, r14
    2d0c:	90 e0       	ldi	r25, 0x00	; 0
    2d0e:	08 17       	cp	r16, r24
    2d10:	19 07       	cpc	r17, r25
    2d12:	a8 f3       	brcs	.-22     	; 0x2cfe <vfprintf+0x194>
    2d14:	0e c0       	rjmp	.+28     	; 0x2d32 <vfprintf+0x1c8>
    2d16:	f6 01       	movw	r30, r12
    2d18:	f7 fc       	sbrc	r15, 7
    2d1a:	85 91       	lpm	r24, Z+
    2d1c:	f7 fe       	sbrs	r15, 7
    2d1e:	81 91       	ld	r24, Z+
    2d20:	6f 01       	movw	r12, r30
    2d22:	90 e0       	ldi	r25, 0x00	; 0
    2d24:	b3 01       	movw	r22, r6
    2d26:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <fputc>
    2d2a:	e1 10       	cpse	r14, r1
    2d2c:	ea 94       	dec	r14
    2d2e:	01 50       	subi	r16, 0x01	; 1
    2d30:	10 40       	sbci	r17, 0x00	; 0
    2d32:	01 15       	cp	r16, r1
    2d34:	11 05       	cpc	r17, r1
    2d36:	79 f7       	brne	.-34     	; 0x2d16 <vfprintf+0x1ac>
    2d38:	ea c0       	rjmp	.+468    	; 0x2f0e <vfprintf+0x3a4>
    2d3a:	94 36       	cpi	r25, 0x64	; 100
    2d3c:	11 f0       	breq	.+4      	; 0x2d42 <vfprintf+0x1d8>
    2d3e:	99 36       	cpi	r25, 0x69	; 105
    2d40:	69 f5       	brne	.+90     	; 0x2d9c <vfprintf+0x232>
    2d42:	f7 fe       	sbrs	r15, 7
    2d44:	08 c0       	rjmp	.+16     	; 0x2d56 <vfprintf+0x1ec>
    2d46:	f5 01       	movw	r30, r10
    2d48:	20 81       	ld	r18, Z
    2d4a:	31 81       	ldd	r19, Z+1	; 0x01
    2d4c:	42 81       	ldd	r20, Z+2	; 0x02
    2d4e:	53 81       	ldd	r21, Z+3	; 0x03
    2d50:	84 e0       	ldi	r24, 0x04	; 4
    2d52:	90 e0       	ldi	r25, 0x00	; 0
    2d54:	0a c0       	rjmp	.+20     	; 0x2d6a <vfprintf+0x200>
    2d56:	f5 01       	movw	r30, r10
    2d58:	80 81       	ld	r24, Z
    2d5a:	91 81       	ldd	r25, Z+1	; 0x01
    2d5c:	9c 01       	movw	r18, r24
    2d5e:	44 27       	eor	r20, r20
    2d60:	37 fd       	sbrc	r19, 7
    2d62:	40 95       	com	r20
    2d64:	54 2f       	mov	r21, r20
    2d66:	82 e0       	ldi	r24, 0x02	; 2
    2d68:	90 e0       	ldi	r25, 0x00	; 0
    2d6a:	a8 0e       	add	r10, r24
    2d6c:	b9 1e       	adc	r11, r25
    2d6e:	9f e6       	ldi	r25, 0x6F	; 111
    2d70:	f9 22       	and	r15, r25
    2d72:	57 ff       	sbrs	r21, 7
    2d74:	09 c0       	rjmp	.+18     	; 0x2d88 <vfprintf+0x21e>
    2d76:	50 95       	com	r21
    2d78:	40 95       	com	r20
    2d7a:	30 95       	com	r19
    2d7c:	21 95       	neg	r18
    2d7e:	3f 4f       	sbci	r19, 0xFF	; 255
    2d80:	4f 4f       	sbci	r20, 0xFF	; 255
    2d82:	5f 4f       	sbci	r21, 0xFF	; 255
    2d84:	e0 e8       	ldi	r30, 0x80	; 128
    2d86:	fe 2a       	or	r15, r30
    2d88:	ca 01       	movw	r24, r20
    2d8a:	b9 01       	movw	r22, r18
    2d8c:	a1 01       	movw	r20, r2
    2d8e:	2a e0       	ldi	r18, 0x0A	; 10
    2d90:	30 e0       	ldi	r19, 0x00	; 0
    2d92:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <__ultoa_invert>
    2d96:	d8 2e       	mov	r13, r24
    2d98:	d2 18       	sub	r13, r2
    2d9a:	40 c0       	rjmp	.+128    	; 0x2e1c <vfprintf+0x2b2>
    2d9c:	95 37       	cpi	r25, 0x75	; 117
    2d9e:	29 f4       	brne	.+10     	; 0x2daa <vfprintf+0x240>
    2da0:	1f 2d       	mov	r17, r15
    2da2:	1f 7e       	andi	r17, 0xEF	; 239
    2da4:	2a e0       	ldi	r18, 0x0A	; 10
    2da6:	30 e0       	ldi	r19, 0x00	; 0
    2da8:	1d c0       	rjmp	.+58     	; 0x2de4 <vfprintf+0x27a>
    2daa:	1f 2d       	mov	r17, r15
    2dac:	19 7f       	andi	r17, 0xF9	; 249
    2dae:	9f 36       	cpi	r25, 0x6F	; 111
    2db0:	61 f0       	breq	.+24     	; 0x2dca <vfprintf+0x260>
    2db2:	90 37       	cpi	r25, 0x70	; 112
    2db4:	20 f4       	brcc	.+8      	; 0x2dbe <vfprintf+0x254>
    2db6:	98 35       	cpi	r25, 0x58	; 88
    2db8:	09 f0       	breq	.+2      	; 0x2dbc <vfprintf+0x252>
    2dba:	ac c0       	rjmp	.+344    	; 0x2f14 <vfprintf+0x3aa>
    2dbc:	0f c0       	rjmp	.+30     	; 0x2ddc <vfprintf+0x272>
    2dbe:	90 37       	cpi	r25, 0x70	; 112
    2dc0:	39 f0       	breq	.+14     	; 0x2dd0 <vfprintf+0x266>
    2dc2:	98 37       	cpi	r25, 0x78	; 120
    2dc4:	09 f0       	breq	.+2      	; 0x2dc8 <vfprintf+0x25e>
    2dc6:	a6 c0       	rjmp	.+332    	; 0x2f14 <vfprintf+0x3aa>
    2dc8:	04 c0       	rjmp	.+8      	; 0x2dd2 <vfprintf+0x268>
    2dca:	28 e0       	ldi	r18, 0x08	; 8
    2dcc:	30 e0       	ldi	r19, 0x00	; 0
    2dce:	0a c0       	rjmp	.+20     	; 0x2de4 <vfprintf+0x27a>
    2dd0:	10 61       	ori	r17, 0x10	; 16
    2dd2:	14 fd       	sbrc	r17, 4
    2dd4:	14 60       	ori	r17, 0x04	; 4
    2dd6:	20 e1       	ldi	r18, 0x10	; 16
    2dd8:	30 e0       	ldi	r19, 0x00	; 0
    2dda:	04 c0       	rjmp	.+8      	; 0x2de4 <vfprintf+0x27a>
    2ddc:	14 fd       	sbrc	r17, 4
    2dde:	16 60       	ori	r17, 0x06	; 6
    2de0:	20 e1       	ldi	r18, 0x10	; 16
    2de2:	32 e0       	ldi	r19, 0x02	; 2
    2de4:	17 ff       	sbrs	r17, 7
    2de6:	08 c0       	rjmp	.+16     	; 0x2df8 <vfprintf+0x28e>
    2de8:	f5 01       	movw	r30, r10
    2dea:	60 81       	ld	r22, Z
    2dec:	71 81       	ldd	r23, Z+1	; 0x01
    2dee:	82 81       	ldd	r24, Z+2	; 0x02
    2df0:	93 81       	ldd	r25, Z+3	; 0x03
    2df2:	44 e0       	ldi	r20, 0x04	; 4
    2df4:	50 e0       	ldi	r21, 0x00	; 0
    2df6:	08 c0       	rjmp	.+16     	; 0x2e08 <vfprintf+0x29e>
    2df8:	f5 01       	movw	r30, r10
    2dfa:	80 81       	ld	r24, Z
    2dfc:	91 81       	ldd	r25, Z+1	; 0x01
    2dfe:	bc 01       	movw	r22, r24
    2e00:	80 e0       	ldi	r24, 0x00	; 0
    2e02:	90 e0       	ldi	r25, 0x00	; 0
    2e04:	42 e0       	ldi	r20, 0x02	; 2
    2e06:	50 e0       	ldi	r21, 0x00	; 0
    2e08:	a4 0e       	add	r10, r20
    2e0a:	b5 1e       	adc	r11, r21
    2e0c:	a1 01       	movw	r20, r2
    2e0e:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <__ultoa_invert>
    2e12:	d8 2e       	mov	r13, r24
    2e14:	d2 18       	sub	r13, r2
    2e16:	8f e7       	ldi	r24, 0x7F	; 127
    2e18:	f8 2e       	mov	r15, r24
    2e1a:	f1 22       	and	r15, r17
    2e1c:	f6 fe       	sbrs	r15, 6
    2e1e:	0b c0       	rjmp	.+22     	; 0x2e36 <vfprintf+0x2cc>
    2e20:	5e ef       	ldi	r21, 0xFE	; 254
    2e22:	f5 22       	and	r15, r21
    2e24:	d9 14       	cp	r13, r9
    2e26:	38 f4       	brcc	.+14     	; 0x2e36 <vfprintf+0x2cc>
    2e28:	f4 fe       	sbrs	r15, 4
    2e2a:	07 c0       	rjmp	.+14     	; 0x2e3a <vfprintf+0x2d0>
    2e2c:	f2 fc       	sbrc	r15, 2
    2e2e:	05 c0       	rjmp	.+10     	; 0x2e3a <vfprintf+0x2d0>
    2e30:	8f ee       	ldi	r24, 0xEF	; 239
    2e32:	f8 22       	and	r15, r24
    2e34:	02 c0       	rjmp	.+4      	; 0x2e3a <vfprintf+0x2d0>
    2e36:	1d 2d       	mov	r17, r13
    2e38:	01 c0       	rjmp	.+2      	; 0x2e3c <vfprintf+0x2d2>
    2e3a:	19 2d       	mov	r17, r9
    2e3c:	f4 fe       	sbrs	r15, 4
    2e3e:	0d c0       	rjmp	.+26     	; 0x2e5a <vfprintf+0x2f0>
    2e40:	fe 01       	movw	r30, r28
    2e42:	ed 0d       	add	r30, r13
    2e44:	f1 1d       	adc	r31, r1
    2e46:	80 81       	ld	r24, Z
    2e48:	80 33       	cpi	r24, 0x30	; 48
    2e4a:	19 f4       	brne	.+6      	; 0x2e52 <vfprintf+0x2e8>
    2e4c:	99 ee       	ldi	r25, 0xE9	; 233
    2e4e:	f9 22       	and	r15, r25
    2e50:	08 c0       	rjmp	.+16     	; 0x2e62 <vfprintf+0x2f8>
    2e52:	1f 5f       	subi	r17, 0xFF	; 255
    2e54:	f2 fe       	sbrs	r15, 2
    2e56:	05 c0       	rjmp	.+10     	; 0x2e62 <vfprintf+0x2f8>
    2e58:	03 c0       	rjmp	.+6      	; 0x2e60 <vfprintf+0x2f6>
    2e5a:	8f 2d       	mov	r24, r15
    2e5c:	86 78       	andi	r24, 0x86	; 134
    2e5e:	09 f0       	breq	.+2      	; 0x2e62 <vfprintf+0x2f8>
    2e60:	1f 5f       	subi	r17, 0xFF	; 255
    2e62:	0f 2d       	mov	r16, r15
    2e64:	f3 fc       	sbrc	r15, 3
    2e66:	14 c0       	rjmp	.+40     	; 0x2e90 <vfprintf+0x326>
    2e68:	f0 fe       	sbrs	r15, 0
    2e6a:	0f c0       	rjmp	.+30     	; 0x2e8a <vfprintf+0x320>
    2e6c:	1e 15       	cp	r17, r14
    2e6e:	10 f0       	brcs	.+4      	; 0x2e74 <vfprintf+0x30a>
    2e70:	9d 2c       	mov	r9, r13
    2e72:	0b c0       	rjmp	.+22     	; 0x2e8a <vfprintf+0x320>
    2e74:	9d 2c       	mov	r9, r13
    2e76:	9e 0c       	add	r9, r14
    2e78:	91 1a       	sub	r9, r17
    2e7a:	1e 2d       	mov	r17, r14
    2e7c:	06 c0       	rjmp	.+12     	; 0x2e8a <vfprintf+0x320>
    2e7e:	80 e2       	ldi	r24, 0x20	; 32
    2e80:	90 e0       	ldi	r25, 0x00	; 0
    2e82:	b3 01       	movw	r22, r6
    2e84:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <fputc>
    2e88:	1f 5f       	subi	r17, 0xFF	; 255
    2e8a:	1e 15       	cp	r17, r14
    2e8c:	c0 f3       	brcs	.-16     	; 0x2e7e <vfprintf+0x314>
    2e8e:	04 c0       	rjmp	.+8      	; 0x2e98 <vfprintf+0x32e>
    2e90:	1e 15       	cp	r17, r14
    2e92:	10 f4       	brcc	.+4      	; 0x2e98 <vfprintf+0x32e>
    2e94:	e1 1a       	sub	r14, r17
    2e96:	01 c0       	rjmp	.+2      	; 0x2e9a <vfprintf+0x330>
    2e98:	ee 24       	eor	r14, r14
    2e9a:	04 ff       	sbrs	r16, 4
    2e9c:	0f c0       	rjmp	.+30     	; 0x2ebc <vfprintf+0x352>
    2e9e:	80 e3       	ldi	r24, 0x30	; 48
    2ea0:	90 e0       	ldi	r25, 0x00	; 0
    2ea2:	b3 01       	movw	r22, r6
    2ea4:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <fputc>
    2ea8:	02 ff       	sbrs	r16, 2
    2eaa:	1d c0       	rjmp	.+58     	; 0x2ee6 <vfprintf+0x37c>
    2eac:	01 fd       	sbrc	r16, 1
    2eae:	03 c0       	rjmp	.+6      	; 0x2eb6 <vfprintf+0x34c>
    2eb0:	88 e7       	ldi	r24, 0x78	; 120
    2eb2:	90 e0       	ldi	r25, 0x00	; 0
    2eb4:	0e c0       	rjmp	.+28     	; 0x2ed2 <vfprintf+0x368>
    2eb6:	88 e5       	ldi	r24, 0x58	; 88
    2eb8:	90 e0       	ldi	r25, 0x00	; 0
    2eba:	0b c0       	rjmp	.+22     	; 0x2ed2 <vfprintf+0x368>
    2ebc:	80 2f       	mov	r24, r16
    2ebe:	86 78       	andi	r24, 0x86	; 134
    2ec0:	91 f0       	breq	.+36     	; 0x2ee6 <vfprintf+0x37c>
    2ec2:	01 ff       	sbrs	r16, 1
    2ec4:	02 c0       	rjmp	.+4      	; 0x2eca <vfprintf+0x360>
    2ec6:	8b e2       	ldi	r24, 0x2B	; 43
    2ec8:	01 c0       	rjmp	.+2      	; 0x2ecc <vfprintf+0x362>
    2eca:	80 e2       	ldi	r24, 0x20	; 32
    2ecc:	f7 fc       	sbrc	r15, 7
    2ece:	8d e2       	ldi	r24, 0x2D	; 45
    2ed0:	90 e0       	ldi	r25, 0x00	; 0
    2ed2:	b3 01       	movw	r22, r6
    2ed4:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <fputc>
    2ed8:	06 c0       	rjmp	.+12     	; 0x2ee6 <vfprintf+0x37c>
    2eda:	80 e3       	ldi	r24, 0x30	; 48
    2edc:	90 e0       	ldi	r25, 0x00	; 0
    2ede:	b3 01       	movw	r22, r6
    2ee0:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <fputc>
    2ee4:	9a 94       	dec	r9
    2ee6:	d9 14       	cp	r13, r9
    2ee8:	c0 f3       	brcs	.-16     	; 0x2eda <vfprintf+0x370>
    2eea:	da 94       	dec	r13
    2eec:	f1 01       	movw	r30, r2
    2eee:	ed 0d       	add	r30, r13
    2ef0:	f1 1d       	adc	r31, r1
    2ef2:	80 81       	ld	r24, Z
    2ef4:	90 e0       	ldi	r25, 0x00	; 0
    2ef6:	b3 01       	movw	r22, r6
    2ef8:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <fputc>
    2efc:	dd 20       	and	r13, r13
    2efe:	a9 f7       	brne	.-22     	; 0x2eea <vfprintf+0x380>
    2f00:	06 c0       	rjmp	.+12     	; 0x2f0e <vfprintf+0x3a4>
    2f02:	80 e2       	ldi	r24, 0x20	; 32
    2f04:	90 e0       	ldi	r25, 0x00	; 0
    2f06:	b3 01       	movw	r22, r6
    2f08:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <fputc>
    2f0c:	ea 94       	dec	r14
    2f0e:	ee 20       	and	r14, r14
    2f10:	c1 f7       	brne	.-16     	; 0x2f02 <vfprintf+0x398>
    2f12:	43 ce       	rjmp	.-890    	; 0x2b9a <vfprintf+0x30>
    2f14:	f3 01       	movw	r30, r6
    2f16:	66 81       	ldd	r22, Z+6	; 0x06
    2f18:	77 81       	ldd	r23, Z+7	; 0x07
    2f1a:	cb 01       	movw	r24, r22
    2f1c:	2b 96       	adiw	r28, 0x0b	; 11
    2f1e:	e2 e1       	ldi	r30, 0x12	; 18
    2f20:	0c 94 76 15 	jmp	0x2aec	; 0x2aec <__epilogue_restores__>

00002f24 <strnlen_P>:
    2f24:	fc 01       	movw	r30, r24
    2f26:	05 90       	lpm	r0, Z+
    2f28:	61 50       	subi	r22, 0x01	; 1
    2f2a:	70 40       	sbci	r23, 0x00	; 0
    2f2c:	01 10       	cpse	r0, r1
    2f2e:	d8 f7       	brcc	.-10     	; 0x2f26 <strnlen_P+0x2>
    2f30:	80 95       	com	r24
    2f32:	90 95       	com	r25
    2f34:	8e 0f       	add	r24, r30
    2f36:	9f 1f       	adc	r25, r31
    2f38:	08 95       	ret

00002f3a <strnlen>:
    2f3a:	fc 01       	movw	r30, r24
    2f3c:	61 50       	subi	r22, 0x01	; 1
    2f3e:	70 40       	sbci	r23, 0x00	; 0
    2f40:	01 90       	ld	r0, Z+
    2f42:	01 10       	cpse	r0, r1
    2f44:	d8 f7       	brcc	.-10     	; 0x2f3c <strnlen+0x2>
    2f46:	80 95       	com	r24
    2f48:	90 95       	com	r25
    2f4a:	8e 0f       	add	r24, r30
    2f4c:	9f 1f       	adc	r25, r31
    2f4e:	08 95       	ret

00002f50 <fputc>:
    2f50:	0f 93       	push	r16
    2f52:	1f 93       	push	r17
    2f54:	cf 93       	push	r28
    2f56:	df 93       	push	r29
    2f58:	8c 01       	movw	r16, r24
    2f5a:	eb 01       	movw	r28, r22
    2f5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f5e:	81 ff       	sbrs	r24, 1
    2f60:	1b c0       	rjmp	.+54     	; 0x2f98 <fputc+0x48>
    2f62:	82 ff       	sbrs	r24, 2
    2f64:	0d c0       	rjmp	.+26     	; 0x2f80 <fputc+0x30>
    2f66:	2e 81       	ldd	r18, Y+6	; 0x06
    2f68:	3f 81       	ldd	r19, Y+7	; 0x07
    2f6a:	8c 81       	ldd	r24, Y+4	; 0x04
    2f6c:	9d 81       	ldd	r25, Y+5	; 0x05
    2f6e:	28 17       	cp	r18, r24
    2f70:	39 07       	cpc	r19, r25
    2f72:	64 f4       	brge	.+24     	; 0x2f8c <fputc+0x3c>
    2f74:	e8 81       	ld	r30, Y
    2f76:	f9 81       	ldd	r31, Y+1	; 0x01
    2f78:	01 93       	st	Z+, r16
    2f7a:	f9 83       	std	Y+1, r31	; 0x01
    2f7c:	e8 83       	st	Y, r30
    2f7e:	06 c0       	rjmp	.+12     	; 0x2f8c <fputc+0x3c>
    2f80:	e8 85       	ldd	r30, Y+8	; 0x08
    2f82:	f9 85       	ldd	r31, Y+9	; 0x09
    2f84:	80 2f       	mov	r24, r16
    2f86:	09 95       	icall
    2f88:	89 2b       	or	r24, r25
    2f8a:	31 f4       	brne	.+12     	; 0x2f98 <fputc+0x48>
    2f8c:	8e 81       	ldd	r24, Y+6	; 0x06
    2f8e:	9f 81       	ldd	r25, Y+7	; 0x07
    2f90:	01 96       	adiw	r24, 0x01	; 1
    2f92:	9f 83       	std	Y+7, r25	; 0x07
    2f94:	8e 83       	std	Y+6, r24	; 0x06
    2f96:	02 c0       	rjmp	.+4      	; 0x2f9c <fputc+0x4c>
    2f98:	0f ef       	ldi	r16, 0xFF	; 255
    2f9a:	1f ef       	ldi	r17, 0xFF	; 255
    2f9c:	c8 01       	movw	r24, r16
    2f9e:	df 91       	pop	r29
    2fa0:	cf 91       	pop	r28
    2fa2:	1f 91       	pop	r17
    2fa4:	0f 91       	pop	r16
    2fa6:	08 95       	ret

00002fa8 <__ultoa_invert>:
    2fa8:	fa 01       	movw	r30, r20
    2faa:	aa 27       	eor	r26, r26
    2fac:	28 30       	cpi	r18, 0x08	; 8
    2fae:	51 f1       	breq	.+84     	; 0x3004 <__ultoa_invert+0x5c>
    2fb0:	20 31       	cpi	r18, 0x10	; 16
    2fb2:	81 f1       	breq	.+96     	; 0x3014 <__ultoa_invert+0x6c>
    2fb4:	e8 94       	clt
    2fb6:	6f 93       	push	r22
    2fb8:	6e 7f       	andi	r22, 0xFE	; 254
    2fba:	6e 5f       	subi	r22, 0xFE	; 254
    2fbc:	7f 4f       	sbci	r23, 0xFF	; 255
    2fbe:	8f 4f       	sbci	r24, 0xFF	; 255
    2fc0:	9f 4f       	sbci	r25, 0xFF	; 255
    2fc2:	af 4f       	sbci	r26, 0xFF	; 255
    2fc4:	b1 e0       	ldi	r27, 0x01	; 1
    2fc6:	3e d0       	rcall	.+124    	; 0x3044 <__ultoa_invert+0x9c>
    2fc8:	b4 e0       	ldi	r27, 0x04	; 4
    2fca:	3c d0       	rcall	.+120    	; 0x3044 <__ultoa_invert+0x9c>
    2fcc:	67 0f       	add	r22, r23
    2fce:	78 1f       	adc	r23, r24
    2fd0:	89 1f       	adc	r24, r25
    2fd2:	9a 1f       	adc	r25, r26
    2fd4:	a1 1d       	adc	r26, r1
    2fd6:	68 0f       	add	r22, r24
    2fd8:	79 1f       	adc	r23, r25
    2fda:	8a 1f       	adc	r24, r26
    2fdc:	91 1d       	adc	r25, r1
    2fde:	a1 1d       	adc	r26, r1
    2fe0:	6a 0f       	add	r22, r26
    2fe2:	71 1d       	adc	r23, r1
    2fe4:	81 1d       	adc	r24, r1
    2fe6:	91 1d       	adc	r25, r1
    2fe8:	a1 1d       	adc	r26, r1
    2fea:	20 d0       	rcall	.+64     	; 0x302c <__ultoa_invert+0x84>
    2fec:	09 f4       	brne	.+2      	; 0x2ff0 <__ultoa_invert+0x48>
    2fee:	68 94       	set
    2ff0:	3f 91       	pop	r19
    2ff2:	2a e0       	ldi	r18, 0x0A	; 10
    2ff4:	26 9f       	mul	r18, r22
    2ff6:	11 24       	eor	r1, r1
    2ff8:	30 19       	sub	r19, r0
    2ffa:	30 5d       	subi	r19, 0xD0	; 208
    2ffc:	31 93       	st	Z+, r19
    2ffe:	de f6       	brtc	.-74     	; 0x2fb6 <__ultoa_invert+0xe>
    3000:	cf 01       	movw	r24, r30
    3002:	08 95       	ret
    3004:	46 2f       	mov	r20, r22
    3006:	47 70       	andi	r20, 0x07	; 7
    3008:	40 5d       	subi	r20, 0xD0	; 208
    300a:	41 93       	st	Z+, r20
    300c:	b3 e0       	ldi	r27, 0x03	; 3
    300e:	0f d0       	rcall	.+30     	; 0x302e <__ultoa_invert+0x86>
    3010:	c9 f7       	brne	.-14     	; 0x3004 <__ultoa_invert+0x5c>
    3012:	f6 cf       	rjmp	.-20     	; 0x3000 <__ultoa_invert+0x58>
    3014:	46 2f       	mov	r20, r22
    3016:	4f 70       	andi	r20, 0x0F	; 15
    3018:	40 5d       	subi	r20, 0xD0	; 208
    301a:	4a 33       	cpi	r20, 0x3A	; 58
    301c:	18 f0       	brcs	.+6      	; 0x3024 <__ultoa_invert+0x7c>
    301e:	49 5d       	subi	r20, 0xD9	; 217
    3020:	31 fd       	sbrc	r19, 1
    3022:	40 52       	subi	r20, 0x20	; 32
    3024:	41 93       	st	Z+, r20
    3026:	02 d0       	rcall	.+4      	; 0x302c <__ultoa_invert+0x84>
    3028:	a9 f7       	brne	.-22     	; 0x3014 <__ultoa_invert+0x6c>
    302a:	ea cf       	rjmp	.-44     	; 0x3000 <__ultoa_invert+0x58>
    302c:	b4 e0       	ldi	r27, 0x04	; 4
    302e:	a6 95       	lsr	r26
    3030:	97 95       	ror	r25
    3032:	87 95       	ror	r24
    3034:	77 95       	ror	r23
    3036:	67 95       	ror	r22
    3038:	ba 95       	dec	r27
    303a:	c9 f7       	brne	.-14     	; 0x302e <__ultoa_invert+0x86>
    303c:	00 97       	sbiw	r24, 0x00	; 0
    303e:	61 05       	cpc	r22, r1
    3040:	71 05       	cpc	r23, r1
    3042:	08 95       	ret
    3044:	9b 01       	movw	r18, r22
    3046:	ac 01       	movw	r20, r24
    3048:	0a 2e       	mov	r0, r26
    304a:	06 94       	lsr	r0
    304c:	57 95       	ror	r21
    304e:	47 95       	ror	r20
    3050:	37 95       	ror	r19
    3052:	27 95       	ror	r18
    3054:	ba 95       	dec	r27
    3056:	c9 f7       	brne	.-14     	; 0x304a <__ultoa_invert+0xa2>
    3058:	62 0f       	add	r22, r18
    305a:	73 1f       	adc	r23, r19
    305c:	84 1f       	adc	r24, r20
    305e:	95 1f       	adc	r25, r21
    3060:	a0 1d       	adc	r26, r0
    3062:	08 95       	ret

00003064 <_exit>:
    3064:	f8 94       	cli

00003066 <__stop_program>:
    3066:	ff cf       	rjmp	.-2      	; 0x3066 <__stop_program>
